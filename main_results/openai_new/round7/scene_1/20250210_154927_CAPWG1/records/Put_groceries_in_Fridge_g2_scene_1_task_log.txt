From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Identify a table in the dining room.', '3. Put milk, turkey, eggs, fish, and chicken on the identified table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_kitchen_counter_119(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

behavior find_soap_2010_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_fish_clean(fish: item):
    # Determine if the fish is already clean
    return clean(fish)

behavior wash_fish(fish: item):
    body:
        if dirty(fish):
            # If the fish is dirty, proceed to wash it
            wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) # Identify the fish to be washed

        # Ensure that the fish is clean by washing it if necessary
        wash_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_kitchen_counter_119(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

behavior find_soap_2125_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
bind fish: item where:
    is_food_fish(fish)

behavior clean_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        clean_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
bind fish: item where:
    is_food_fish(fish)

behavior wash_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        wash_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_food_fish_2093_around_kitchen_counter_119(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish) # Wash the fish if its dirty

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) 
        # Selecting an item that is a fish
        wash_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_kitchen_counter_123(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
bind fish: item where:
    is_food_fish(fish)

behavior __goal__():
    body:
        if dirty(fish):
            wash(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_kitchen_counter_123(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish that needs to be washed

        wash(fish)
        # Wash the fish

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish that needs to be washed

        wash(fish)
        # Wash the fish

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_fish_2093, kitchen_counter_123)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_fish_2093, kitchen_counter_123)
Fail to find food_fish_2093 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_fish_2093 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_table_cloth_2005_around_table_270(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
def has_surfaces(table:item):
    # Function to check if the table has a surface to place items on
    symbol surface_available = surfaces(table)
    return surface_available

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        foreach table: item:
            if is_table(table) and inside(table, dining_room):
                observe(table, "Check for a usable table surface in the dining room")
                # Observe each tables surface availability in the dining room
                
                if has_surfaces(table):
                    # If a table with available surfaces is found, approach it
                    walk_to(table)
                    break

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior find_table_in_dining_room():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check if this is a table in the dining room")

behavior __goal__():
    body:
        find_table_in_dining_room()

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_table_in_dining_room():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check if this is a table in the dining room")

behavior __goal__():
    body:
        find_table_in_dining_room()

##############################
From agent.py-> find a plan in act()
walk_executor(table_114)obs(table_114, Check if this is a table in the dining room)walk_executor(table_199)obs(table_199, Check if this is a table in the dining room)walk_executor(table_270)obs(table_270, Check if this is a table in the dining room)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
obs(table_114, Check if this is a table in the dining room)
Get this information:  cup_2049 is on table_114. box_2038 is on table_114. clothes_hat_2117 is on table_114. table_114 is inside dining_room_41. milk_2115 is on table_114. cup_2134 is on table_114. table_114 is facing drawing_110. table_114 is facing drawing_111. check_2058 is on table_114. clothes_gloves_2118 is on table_114. table_114 is close to cup_2049. table_114 is close to check_2058. table_114 is close to food_bread_2084. table_114 is close to floor_44. table_114 is close to floor_47. table_114 is close to floor_48. table_114 is close to floor_50. table_114 is close to dry_pasta_2114. table_114 is close to milk_2115. table_114 is close to clothes_hat_2117. table_114 is close to clothes_gloves_2118. table_114 is close to knife_2122. table_114 is close to cup_2132. table_114 is close to cup_2133. table_114 is close to cup_2134. table_114 is close to table_cloth_2005. table_114 is close to food_food_2021. table_114 is close to mat_102. table_114 is close to pillow_103. table_114 is close to pillow_104. table_114 is close to pillow_105. table_114 is close to pillow_106. table_114 is close to bench_113. table_114 is close to bench_115. table_114 is close to box_2038. table_114 is close to character_240. cup_2132 is on table_114. table_114 is on mat_102. table_114 is on floor_47. food_food_2021 is on table_114. knife_2122 is on table_114. cup_2133 is on table_114. table_cloth_2005 is on table_114. food_bread_2084 is on table_114. dry_pasta_2114 is on table_114. table_114 is DIRTY.
##############################
From agent.py
walk_executor(table_199)
Robot find: wooden_spoon_2000, mat_203, tea_bag_2023, drawing_201, drawing_202, Robot is close to the food_fish_2093. Robot is close to the table_199. 
##############################
From agent.py
obs(table_199, Check if this is a table in the dining room)
Get this information:  wooden_spoon_2000 is on table_199. table_199 is inside bedroom_162. tea_bag_2023 is on table_199. table_199 is close to couch_198. table_199 is close to floor_167. table_199 is close to floor_168. table_199 is close to tea_bag_2023. table_199 is close to mat_203. table_199 is close to floor_172. table_199 is close to floor_171. table_199 is close to wooden_spoon_2000. table_199 is close to wall_177. table_199 is close to character_240. table_199 is facing drawing_201. table_199 is facing drawing_202. table_199 is facing computer_209. table_199 is DIRTY.
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the food_fish_2093. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
obs(table_270, Check if this is a table in the dining room)
Get this information:  shampoo_2019 is on table_270. pencil_2014 is on table_270. orchid_285 is on table_270. table_270 is inside home_office_241. table_270 is inside couch_269. table_270 is close to shampoo_2019. table_270 is close to floor_264. table_270 is close to floor_265. table_270 is close to floor_266. table_270 is close to floor_267. table_270 is close to couch_269. table_270 is close to wall_248. table_270 is close to pillow_286. table_270 is close to orchid_285. table_270 is close to pencil_2014. table_270 is close to pillow_287. table_270 is close to character_240. table_270 is facing drawing_288. table_270 is facing television_281. table_270 is facing computer_276. table_270 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_home_office_241(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(diary,home_office_instance)
        else:
            exp(diary,home_office_instance)
    eff:
        unknown[diary]=False
        close[diary,home_office_instance]=True
        close[home_office_instance,diary]=True
    

behavior find_food_butter_2007_around_kitchen_counter_119(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

behavior find_food_peanut_butter_2105_around_kitchen_counter_119(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_table(food_items: list[item], table: item):
    body:
        foreach food: item in food_items:
            if not on(food, table):
                put_on(food, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 270 # Table identified in the dining room
        
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind eggs: item where:
            is_food_egg(eggs)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        symbol food_items=[milk, turkey, eggs, fish, chicken]
        place_food_on_table(food_items, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_home_office_241(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(diary,home_office_instance)
        else:
            exp(diary,home_office_instance)
    eff:
        unknown[diary]=False
        close[diary,home_office_instance]=True
        close[home_office_instance,diary]=True
    

behavior find_food_cheese_2088_around_cupboard_117(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cheese,cupboard_instance)
        else:
            exp(food_cheese,cupboard_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,cupboard_instance]=True
        close[cupboard_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation

behavior put_items_on_table(milk: item, turkey: item, eggs: item, fish: item, chicken: item, table: item):
    body:
        if not on(milk, table):
            put_on(milk, table)
        if not on(turkey, table):
            put_on(turkey, table)
        if not on(eggs, table):
            put_on(eggs, table)
        if not on(fish, table):
            put_on(fish, table)
        if not on(chicken, table):
            put_on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind eggs: item where:
            is_food_egg(eggs)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind table: item where:
            is_table(table) and is_dining_room(table)

        put_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_home_office_241(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(diary,home_office_instance)
        else:
            exp(diary,home_office_instance)
    eff:
        unknown[diary]=False
        close[diary,home_office_instance]=True
        close[home_office_instance,diary]=True
    

behavior find_food_cheese_2072_around_home_office_241(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(food_cheese,home_office_instance)
        else:
            exp(food_cheese,home_office_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,home_office_instance]=True
        close[home_office_instance,food_cheese]=True
    

behavior find_food_butter_2007_around_cupboard_118(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_food_peanut_butter_2077_around_kitchen_counter_119(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_table(inhand_obj: item, table: item):
    body:
        if not on(inhand_obj, table):
            put_on(inhand_obj, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Identify a table in the dining room

        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind eggs: item where:
            is_food_egg(eggs)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        walk_to(milk)
        grab(milk)
        place_on_table(milk, table)
        
        walk_to(turkey)
        grab(turkey)
        place_on_table(turkey, table)
        
        walk_to(eggs)
        grab(eggs)
        place_on_table(eggs, table)
        
        walk_to(fish)
        grab(fish)
        place_on_table(fish, table)

        walk_to(chicken)
        grab(chicken)
        place_on_table(chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_home_office_241(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(diary,home_office_instance)
        else:
            exp(diary,home_office_instance)
    eff:
        unknown[diary]=False
        close[diary,home_office_instance]=True
        close[home_office_instance,diary]=True
    

behavior find_food_cheese_2072_around_cupboard_117(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cheese,cupboard_instance)
        else:
            exp(food_cheese,cupboard_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,cupboard_instance]=True
        close[cupboard_instance,food_cheese]=True
    

behavior find_food_peanut_butter_2105_around_kitchen_counter_119(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_place(obj1: item, obj2: item):
    body:
        if not inhand(obj1):
            grab(obj1)
        put_on(obj1, obj2)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 270
        # Select the identified table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        grab_and_place(milk, table)
        # Place the milk on the table

        if not has_a_free_hand(char):
            empty_a_hand()
        grab_and_place(turkey, table)
        # Place the turkey on the table

        if not has_a_free_hand(char):
            empty_a_hand()
        grab_and_place(eggs, table)
        # Place the eggs on the table

        if not has_a_free_hand(char):
            empty_a_hand()
        grab_and_place(fish, table)
        # Place the fish on the table

        if not has_a_free_hand(char):
            empty_a_hand()
        grab_and_place(chicken, table)
        # Place the chicken on the table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_and_place(obj1: item, obj2: item):
    body:
        if not inhand(obj1):
            grab(obj1)
        put_on(obj1, obj2)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 270
        # Select the identified table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        grab_and_place(milk, table)
        # Place the milk on the table

        if not has_a_free_hand(char):
            empty_a_hand()
        grab_and_place(turkey, table)
        # Place the turkey on the table

        if not has_a_free_hand(char):
            empty_a_hand()
        grab_and_place(eggs, table)
        # Place the eggs on the table

        if not has_a_free_hand(char):
            empty_a_hand()
        grab_and_place(fish, table)
        # Place the fish on the table

        if not has_a_free_hand(char):
            empty_a_hand()
        grab_and_place(chicken, table)
        # Place the chicken on the table

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_270)put_executor(milk_2115, table_270)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_270)put_executor(food_turkey_2112, table_270)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_270)put_executor(food_egg_2092, table_270)put_executor(food_fish_2093, table_270)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_270)put_executor(food_chicken_2089, table_270)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the milk_2115. Grabbing milk_2115 by left hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: Robot is close to the food_fish_2093. Robot is close to the milk_2115. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(milk_2115, table_270)
Robot find: Robot is close to the food_fish_2093. Robot is close to the milk_2115. Robot is close to the couch_269. Robot is close to the table_270. milk_2115 is close table_270. milk_2115 is on table_270. table_270 is close milk_2115. milk_2115 released by left hand. 
##############################
From agent.py
walk_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. Grabbing food_turkey_2112 by left hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(food_turkey_2112, table_270)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the couch_269. Robot is close to the table_270. food_turkey_2112 is close table_270. table_270 is close food_turkey_2112. food_turkey_2112 is on table_270. food_turkey_2112 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(food_egg_2092, table_270)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the couch_269. Robot is close to the table_270. food_egg_2092 is close table_270. table_270 is close food_egg_2092. food_egg_2092 is on table_270. food_egg_2092 released by left hand. 
##############################
From agent.py
put_executor(food_fish_2093, table_270)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the couch_269. Robot is close to the table_270. table_270 is close food_fish_2093. food_fish_2093 is close table_270. food_fish_2093 is on table_270. food_fish_2093 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(food_chicken_2089, table_270)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the couch_269. Robot is close to the table_270. food_chicken_2089 is close table_270. table_270 is close food_chicken_2089. food_chicken_2089 is on table_270. food_chicken_2089 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_fish_2093)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_fish_2093)', 'switchoff_executor(faucet_20)', 'walk_executor(table_114)', 'walk_executor(table_199)', 'walk_executor(table_270)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(table_270)', 'put_executor(milk_2115, table_270)', 'walk_executor(food_turkey_2112)', 'grab_executor(food_turkey_2112)', 'walk_executor(table_270)', 'put_executor(food_turkey_2112, table_270)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(table_270)', 'put_executor(food_egg_2092, table_270)', 'put_executor(food_fish_2093, table_270)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(table_270)', 'put_executor(food_chicken_2089, table_270)']
Time info:
Time consume: 214 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 12
goal correct times: 0
action_num: 29

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
