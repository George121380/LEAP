From agent.py
Reset goals: The sub-goals are: 
['Wipe the toilet with toilet paper and then throw it into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet_paper: item, toilet: item):
    body:
        if not clean(toilet):
            wipe(toilet)
            # Wipe the toilet with toilet paper to clean it

behavior throw_toilet_paper_into_toilet(toilet_paper: item, toilet: item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)
            # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Bind an instance of toilet paper

        bind toilet: item where:
            is_toilet(toilet)
        # Bind an instance of a toilet

        wipe_toilet_with_toilet_paper(toilet_paper, toilet)
        throw_toilet_paper_into_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wipe_toilet_with_toilet_paper(toilet_paper: item, toilet: item):
    body:
        if not clean(toilet):
            wipe(toilet)
            # Wipe the toilet with toilet paper to clean it

behavior throw_toilet_paper_into_toilet(toilet_paper: item, toilet: item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)
            # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Bind an instance of toilet paper

        bind toilet: item where:
            is_toilet(toilet)
        # Bind an instance of a toilet

        wipe_toilet_with_toilet_paper(toilet_paper, toilet)
        throw_toilet_paper_into_toilet(toilet_paper, toilet)

##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_17)open_executor(bathroom_cabinet_17)exp(toilet_paper_2076, bathroom_cabinet_17)walk_executor(toilet_15)open_executor(toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(bathroom_cabinet_17)
Robot find: drawing_33, Robot is close to the bathroom_cabinet_17. 
##############################
From agent.py
open_executor(bathroom_cabinet_17)
Robot find: tooth_paste_2059, Robot is close to the bathroom_cabinet_17. Robot is close to the tooth_paste_2059. bathroom_cabinet_17 is opened. 
##############################
From agent.py
exp(toilet_paper_2076, bathroom_cabinet_17)
Fail to find toilet_paper_2076 around bathroom_cabinet_17. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_counter_18)exp(toilet_paper_2076, bathroom_counter_18)walk_executor(toilet_15)open_executor(toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(bathroom_counter_18)
Robot find: mat_32, phone_2029, Robot is close to the bathroom_counter_18. 
##############################
From agent.py
exp(toilet_paper_2076, bathroom_counter_18)
Fail to find toilet_paper_2076 around bathroom_counter_18. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_15)open_executor(toilet_15)exp(toilet_paper_2076, toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(toilet_15)
Robot find: toilet_paper_2076, Robot is close to the toilet_15. 
##############################
From agent.py
open_executor(toilet_15)
Robot find: Robot is close to the toilet_15. toilet_15 is opened. 
##############################
From agent.py
exp(toilet_paper_2076, toilet_15)
Find toilet_paper_2076. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. 
##############################
From agent.py
grab_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Grabbing toilet_paper_2076 by right hand. 
##############################
From agent.py
walk_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py
putin_executor(toilet_paper_2076, toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. toilet_paper_2076 is inside toilet_15. toilet_paper_2076 is close toilet_15. toilet_paper_2076 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Wipe the toilet with toilet paper before putting it into the toilet.
##############################
From agent.py
Human Instruction: Wipe the toilet with toilet paper before putting it into the toilet.

The actions you have taken:
Action 1: Walk to bathroom_cabinet_17.
Action 2: Open bathroom_cabinet_17.
Action 3: look for toilet_paper_2076 around bathroom_cabinet_17.
Action 4: Walk to bathroom_counter_18.
Action 5: look for toilet_paper_2076 around bathroom_counter_18.
Action 6: Walk to toilet_15.
Action 7: Open toilet_15.
Action 8: look for toilet_paper_2076 around toilet_15.
Action 9: Walk to toilet_paper_2076.
Action 10: Grab toilet_paper_2076.
Action 11: Walk to toilet_15.
Action 12: Put toilet_paper_2076 into toilet_15.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2025_around_ironing_board_2144(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(rag,ironing_board_instance)
        else:
            exp(rag,ironing_board_instance)
    eff:
        unknown[rag]=False
        close[rag,ironing_board_instance]=True
        close[ironing_board_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet(toilet:item, toilet_paper:item):
    body:
        if not clean(toilet):
            wipe(toilet)

behavior throw_in_toilet(obj:item, toilet:item):
    body:
        if not inside(obj, toilet):
            put_inside(obj, toilet)

behavior __goal__():
    body:
        # Obtain the toilet instance
        bind toilet: item where:
            is_toilet(toilet)
        
        # Obtain the toilet paper instance
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        
        # Wipe the toilet using toilet paper
        wipe_toilet(toilet, toilet_paper)

        # Throw the used toilet paper into the toilet
        throw_in_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_brush_2002_around_shower_16(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(brush,shower_instance)
        else:
            exp(brush,shower_instance)
    eff:
        unknown[brush]=False
        close[brush,shower_instance]=True
        close[shower_instance,brush]=True
    

behavior find_rag_2052_around_sink_19(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(rag,sink_instance)
        else:
            exp(rag,sink_instance)
    eff:
        unknown[rag]=False
        close[rag,sink_instance]=True
        close[sink_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_toilet_paper(toilet_paper: item):
    body:
        if not inhand(toilet_paper):
            grab(toilet_paper)

behavior wipe_toilet(toilet: item):
    body:
        if dirty(toilet):
            wipe(toilet)

behavior throw_toilet_paper_in_toilet(toilet_paper: item, toilet: item):
    body:
        if inhand(toilet_paper):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet
        
        grab_toilet_paper(toilet_paper)
        wipe_toilet(toilet)
        throw_toilet_paper_in_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_toilet_paper(toilet_paper: item):
    body:
        if not inhand(toilet_paper):
            grab(toilet_paper)

behavior wipe_toilet(toilet: item):
    body:
        if dirty(toilet):
            wipe(toilet)

behavior throw_toilet_paper_in_toilet(toilet_paper: item, toilet: item):
    body:
        if inhand(toilet_paper):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet
        
        grab_toilet_paper(toilet_paper)
        wipe_toilet(toilet)
        throw_toilet_paper_in_toilet(toilet_paper, toilet)

##############################
From agent.py-> find a plan in act()
grab_executor(toilet_paper_2076)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
grab_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. Grabbing toilet_paper_2076 by right hand. 
##############################
From agent.py
putin_executor(toilet_paper_2076, toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. toilet_paper_2076 is inside toilet_15. toilet_paper_2076 is close toilet_15. toilet_paper_2076 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to wipe the toilet with the toilet paper before throwing it into the toilet.
##############################
From agent.py
Human Instruction: The robot needs to wipe the toilet with the toilet paper before throwing it into the toilet.

The actions you have taken:
Action 1: Walk to bathroom_cabinet_17.
Action 2: Open bathroom_cabinet_17.
Action 3: look for toilet_paper_2076 around bathroom_cabinet_17.
Action 4: Walk to bathroom_counter_18.
Action 5: look for toilet_paper_2076 around bathroom_counter_18.
Action 6: Walk to toilet_15.
Action 7: Open toilet_15.
Action 8: look for toilet_paper_2076 around toilet_15.
Action 9: Walk to toilet_paper_2076.
Action 10: Grab toilet_paper_2076.
Action 11: Walk to toilet_15.
Action 12: Put toilet_paper_2076 into toilet_15.
Action 13: Grab toilet_paper_2076.
Action 14: Put toilet_paper_2076 into toilet_15.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2025_around_washing_machine_2079(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(rag,washing_machine_instance)
        else:
            exp(rag,washing_machine_instance)
    eff:
        unknown[rag]=False
        close[rag,washing_machine_instance]=True
        close[washing_machine_instance,rag]=True
    

behavior find_hanger_292_around_curtain_291(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==291
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(hanger,curtain_instance)
        else:
            exp(hanger,curtain_instance)
    eff:
        unknown[hanger]=False
        close[hanger,curtain_instance]=True
        close[curtain_instance,hanger]=True
    

behavior find_cleaning_solution_2143_around_cupboard_117(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_and_throw_toilet_paper(toilet_paper:item, toilet:item):
    body:
        if not clean(toilet):
            wipe(toilet)
        if inhand(toilet_paper):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and inhand(toilet_paper)
        # Ensure we have toilet paper in hand before proceeding
        
        bind toilet: item where:
            is_toilet(toilet) and open(toilet)
        # Ensure toilet is open to throw the toilet paper inside
        
        wipe_and_throw_toilet_paper(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_brush_2002_around_shower_16(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(brush,shower_instance)
        else:
            exp(brush,shower_instance)
    eff:
        unknown[brush]=False
        close[brush,shower_instance]=True
        close[shower_instance,brush]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

behavior find_rag_2025_around_washing_machine_2079(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(rag,washing_machine_instance)
        else:
            exp(rag,washing_machine_instance)
    eff:
        unknown[rag]=False
        close[rag,washing_machine_instance]=True
        close[washing_machine_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def is_bathroom_cabinet_location(location:item):
    # Function to check if a location is a bathroom cabinet
    return is_bathroom_cabinet(location)

def is_bathroom_counter_location(location:item):
    # Function to check if a location is a bathroom counter
    return is_bathroom_counter(location)

def is_toilet(item:item):
    # Function to check if an item is a toilet
    return is_toilet(item)

def is_toilet_paper(item:item):
    # Function to check if an item is toilet paper
    return is_toilet_paper(item)

def clean_toilet_with_paper(toilet:item, toilet_paper:item):
    # Behavior to clean toilet with toilet paper
    body:
        if dirty(toilet) and inhand(toilet_paper):
            wipe(toilet)
            # Ensure the toilet is cleaned using the toilet paper

def discard_toilet_paper(toilet_paper:item, toilet:item):
    # Behavior to discard toilet paper in the toilet
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)
            # Discard the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper
        
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        grab(toilet_paper)
        walk_to(toilet)
        clean_toilet_with_paper(toilet, toilet_paper)
        discard_toilet_paper(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_brush_2002_around_shower_16(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(brush,shower_instance)
        else:
            exp(brush,shower_instance)
    eff:
        unknown[brush]=False
        close[brush,shower_instance]=True
        close[shower_instance,brush]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

behavior find_rag_2052_around_basket_for_clothes_2078(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(rag,basket_for_clothes_instance)
        else:
            exp(rag,basket_for_clothes_instance)
    eff:
        unknown[rag]=False
        close[rag,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior throw_in_toilet_paper(char: character, toilet_paper: item, toilet: item):
    body:
        if inhand(toilet_paper) and not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)

behavior clean_toilet_with_paper(char: character, toilet_paper: item, toilet: item):
    body:
        if not clean(toilet):
            if not inhand(toilet_paper):
                grab(toilet_paper)
            wipe(toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
            
        clean_toilet_with_paper(char, toilet_paper, toilet)
        throw_in_toilet_paper(char, toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_brush_2002_around_shower_21(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==21
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(brush,shower_instance)
        else:
            exp(brush,shower_instance)
    eff:
        unknown[brush]=False
        close[brush,shower_instance]=True
        close[shower_instance,brush]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

behavior find_rag_2025_around_sink_19(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(rag,sink_instance)
        else:
            exp(rag,sink_instance)
    eff:
        unknown[rag]=False
        close[rag,sink_instance]=True
        close[sink_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_toilet_paper():
    body:
        if not exists tp: item : (is_toilet_paper(tp) and inhand(tp)):
            foreach tp: item:
                if is_toilet_paper(tp) and not inhand(tp) and not visited(tp):
                    observe(tp, "Check the location of toilet paper")
                    if close_char(char, tp):
                        grab(tp)

behavior wipe_toilet(tp: item, toilet: item):
    body:
        walk_to(toilet)
        if dirty(toilet) and inhand(tp):
            wipe(toilet)

behavior throw_into_toilet(tp: item, toilet: item):
    body:
        if not inside(tp, toilet) and inhand(tp):
            put_inside(tp, toilet)

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and inhand(toilet_paper)
        bind toilet: item where:
            is_toilet(toilet)
        # Ensure I have toilet paper
        find_toilet_paper()
        # Wipe the toilet
        wipe_toilet(toilet_paper, toilet)
        # Throw the toilet paper into the toilet
        throw_into_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_washing_machine_2079(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(towel,washing_machine_instance)
        else:
            exp(towel,washing_machine_instance)
    eff:
        unknown[towel]=False
        close[towel,washing_machine_instance]=True
        close[washing_machine_instance,towel]=True
    

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet(paper:item, toilet:item):
    body:
        if inhand(paper):
            wipe(toilet)
            put_inside(paper, toilet)

behavior get_toilet_paper(paper:item):
    body:
        if not inhand(paper):
            grab(paper)

behavior approach_toilet(toilet:item):
    body:
        if not close_char(char, toilet):
            walk_to(toilet)

behavior __goal__():
    body:
        bind paper: item where:
            is_toilet_paper(paper)
        bind toilet: item where:
            is_toilet(toilet)
        
        approach_toilet(toilet)
        get_toilet_paper(paper)
        approach_toilet(toilet)  # Ensure proximity before wiping
        wipe_toilet(paper, toilet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wipe_toilet(paper:item, toilet:item):
    body:
        if inhand(paper):
            wipe(toilet)
            put_inside(paper, toilet)

behavior get_toilet_paper(paper:item):
    body:
        if not inhand(paper):
            grab(paper)

behavior approach_toilet(toilet:item):
    body:
        if not close_char(char, toilet):
            walk_to(toilet)

behavior __goal__():
    body:
        bind paper: item where:
            is_toilet_paper(paper)
        bind toilet: item where:
            is_toilet(toilet)
        
        approach_toilet(toilet)
        get_toilet_paper(paper)
        approach_toilet(toilet)  # Ensure proximity before wiping
        wipe_toilet(paper, toilet)

##############################
From agent.py-> find a plan in act()
grab_executor(toilet_paper_2076)wipe_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
grab_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. Grabbing toilet_paper_2076 by right hand. 
##############################
From agent.py
wipe_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py
putin_executor(toilet_paper_2076, toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. toilet_paper_2076 is inside toilet_15. toilet_paper_2076 is close toilet_15. toilet_paper_2076 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wipe the toilet with toilet paper. Then throw it into the toilet.
Action History:
['walk_executor(bathroom_cabinet_17)', 'open_executor(bathroom_cabinet_17)', 'walk_executor(bathroom_counter_18)', 'walk_executor(toilet_15)', 'open_executor(toilet_15)', 'walk_executor(toilet_paper_2076)', 'grab_executor(toilet_paper_2076)', 'walk_executor(toilet_15)', 'putin_executor(toilet_paper_2076, toilet_15)', 'grab_executor(toilet_paper_2076)', 'putin_executor(toilet_paper_2076, toilet_15)', 'grab_executor(toilet_paper_2076)', 'wipe_executor(toilet_15)', 'putin_executor(toilet_paper_2076, toilet_15)']
Time info:
Time consume: 137 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 8
goal correct times: 0
action_num: 14

Task complete rate:
1
Scene_id: 1
##############################
