From agent.py
Reset goals: The sub-goals are: 
['1. Clean the noodles and chicken.', '2. Boil the cleaned noodles and chicken together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2101_around_kitchen_counter_123(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

behavior find_food_chicken_2089_around_kitchen_counter_119(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_noodles(noodles: item):
    body:
        if dirty(noodles):
            wash(noodles)  # Wash the noodles if they are dirty

behavior clean_chicken(chicken: item):
    body:
        if dirty(chicken):
            rinse(chicken)  # Rinse the chicken if it is dirty

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        clean_noodles(noodles)
        # Clean the noodles
        
        clean_chicken(chicken)
        # Clean the chicken

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2101_around_cutting_board_2123(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_noodles,cutting_board_instance)
        else:
            exp(food_noodles,cutting_board_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,cutting_board_instance]=True
        close[cutting_board_instance,food_noodles]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_clothes_gloves_2118_around_basket_for_clothes_2078(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item:item, faucet:item):
    body:
        if dirty(item):
            wash(item)
            # Wash the item using water from the faucet

behavior rinse_item(item:item):
    body:
        if dirty(item):
            rinse(item)
            # Rinse the item to remove any remaining dirt

behavior clean_noodles_and_chicken(noodles:item, chicken:item, faucet:item):
    body:
        clean_item(noodles, faucet)
        rinse_item(noodles)
        clean_item(chicken, faucet)
        rinse_item(chicken)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        clean_noodles_and_chicken(noodles, chicken, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2101_around_kitchen_counter_119(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

behavior find_food_chicken_2089_around_kitchen_counter_122(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item: item):
    body:
        if dirty(item):
            wash(item)
        # Ensure the item is clean by washing it if it is dirty

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the instance of noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the instance of chicken

        # Clean the noodles and chicken
        clean_item(noodles)
        clean_item(chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2101_around_kitchen_counter_119(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item: item):
    body:
        if dirty(item):
            wash(item)
            # Wash the item to clean it

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        clean_item(noodles)
        clean_item(chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2101_around_kitchen_counter_119(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item:item):
    body:
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        clean_item(noodles)
        clean_item(chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2101_around_kitchen_counter_123(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

behavior find_food_chicken_2089_around_kitchen_counter_119(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def clean_item(obj:item):
    # Function to clean an item if its dirty
    if dirty(obj):
        wash(obj)

behavior clean_noodles_and_chicken(noodles:item, chicken:item):
    body:
        clean_item(noodles)
        clean_item(chicken)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        clean_noodles_and_chicken(noodles, chicken)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. clean the noodles and chicken." ?
Answer: Put the chicken on the cutting board and cut it into pieces before proceeding to clean it.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the chicken on the cutting board and cut it into pieces.', '2. Clean the chicken.', '3. Boil the noodles with the cleaned chicken pieces.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        if not on(chicken, cutting_board):
            put_on(chicken, cutting_board) 
            # Put the chicken on the cutting board

behavior cut_chicken(chicken:item):
    body:
        if not cut(chicken):
            cuts(chicken) 
            # Cut the chicken into pieces

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        place_chicken_on_cutting_board(chicken, cutting_board)
        cut_chicken(chicken)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(cutting_board_2123)put_executor(food_chicken_2089, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_chicken_2089, fridge_126)
Find food_chicken_2089. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2089)walk_executor(cutting_board_2123)put_executor(food_chicken_2089, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_chicken_2089, cutting_board_2123)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_chicken_2089. food_chicken_2089 is close cutting_board_2123. food_chicken_2089 is on cutting_board_2123. food_chicken_2089 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_76)
Robot find: Robot is close to the knifeblock_76. 
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Fail to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2144)exp(knife_2122, ironing_board_2144)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)
##############################
From agent.py
walk_executor(ironing_board_2144)
Robot find: Robot is close to the ironing_board_2144. 
##############################
From agent.py
exp(knife_2122, ironing_board_2144)
Fail to find knife_2122 around ironing_board_2144. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(knife_2122, cupboard_118)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(knife_2122, cupboard_118)
Fail to find knife_2122 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2037)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2037. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2037. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_hanger_294_around_basket_for_clothes_2078(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(hanger,basket_for_clothes_instance)
        else:
            exp(hanger,basket_for_clothes_instance)
    eff:
        unknown[hanger]=False
        close[hanger,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,hanger]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_shampoo_2019_around_bathroom_cabinet_17(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(shampoo,bathroom_cabinet_instance)
        else:
            exp(shampoo,bathroom_cabinet_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,shampoo]=True
    

behavior find_rag_2025_around_sink_19(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(rag,sink_instance)
        else:
            exp(rag,sink_instance)
    eff:
        unknown[rag]=False
        close[rag,sink_instance]=True
        close[sink_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def clean_chicken(chicken:item):
    # Clean the chicken if it is dirty
    if dirty(chicken):
        wash(chicken)
    
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the cut chicken
        clean_chicken(chicken)
        # Clean the chicken

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_brush_2002_around_sink_19(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(brush,sink_instance)
        else:
            exp(brush,sink_instance)
    eff:
        unknown[brush]=False
        close[brush,sink_instance]=True
        close[sink_instance,brush]=True
    

behavior find_soap_2126_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def clean_chicken(chicken: item, faucet: item):
    body:
        if dirty(chicken):
            if not inhand(chicken):
                grab(chicken)
            wash(chicken)
            if dirty(chicken):
                scrub(chicken)
            rinse(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        bind faucet: item where:
            is_faucet(faucet)
        walk_to(faucet)
        clean_chicken(chicken, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_rag_2025_around_sink_19(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(rag,sink_instance)
        else:
            exp(rag,sink_instance)
    eff:
        unknown[rag]=False
        close[rag,sink_instance]=True
        close[sink_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_the_chicken(chicken:item):
    body:
        if dirty(chicken):
            wash(chicken) # Wash the chicken if it is dirty

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the cut chicken
        clean_the_chicken(chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2125_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_hanger_292_around_basket_for_clothes_2078(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(hanger,basket_for_clothes_instance)
        else:
            exp(hanger,basket_for_clothes_instance)
    eff:
        unknown[hanger]=False
        close[hanger,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken: item):
    body:
        if dirty(chicken):
            wash(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the chicken that has already been cut
        clean_chicken(chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_brush_2002_around_sink_19(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(brush,sink_instance)
        else:
            exp(brush,sink_instance)
    eff:
        unknown[brush]=False
        close[brush,sink_instance]=True
        close[sink_instance,brush]=True
    

behavior find_knife_2035_around_kitchen_counter_123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken:item):
    body:
        if dirty(chicken):
            wash(chicken)
            # Wash the chicken to make it clean

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the chicken that is already cut
        clean_chicken(chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_the_chicken(chicken:item):
    body:
        if dirty(chicken):
            wash(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the chicken which is already cut
        clean_the_chicken(chicken)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. clean the chicken." ?
Answer: Before boiling the noodles, clean the chicken by rinsing the pieces under water to remove any impurities.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Rinse the chicken pieces under water to clean them.', '2. Boil the chicken pieces and noodles together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_soap_2010_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior rinse_chicken(chicken:item):
    body:
        if dirty(chicken):
            rinse(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        rinse_chicken(chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_towel_2128_around_sink_19(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior rinse_chicken(chicken:item):
    body:
        if dirty(chicken):
            rinse(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        rinse_chicken(chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_pot_78_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_towel_2128_around_sink_19(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior rinse_chicken(chicken:item):
    body:
        if dirty(chicken):
            rinse(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        rinse_chicken(chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_soap_2010_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior rinse_chicken(chicken:item):
    body:
        if dirty(chicken):
            rinse(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the chicken that has been cut
        rinse_chicken(chicken)
        # Rinse the cut chicken pieces to clean them

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_soap_2010_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior rinse_chicken(chicken:item):
    body:
        if dirty(chicken):
            rinse(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        rinse_chicken(chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_towel_2128_around_sink_19(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        rinse(chicken)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        rinse(chicken)

##############################
From agent.py-> find a plan in act()
rinse_executor(food_chicken_2089)
##############################
From agent.py
rinse_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2037. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_bread_2084_around_cupboard_117(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_chicken_and_noodles(chicken:item, noodles:item, pot:item, stove:item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot) # Place the chicken in the pot
        if not inside(noodles, pot):
            put_inside(noodles, pot) # Place the noodles in the pot
        if not open(stove):
            opens(stove) # Open the stove
        if is_off(stove):
            switch_on(stove) # Turn on the stove
        if not has_water(pot):
            get_water(pot) # Fill the pot with water

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and clean(chicken)
        # Select cleaned chicken
        bind noodles: item where:
            is_dry_pasta(noodles)
        # Select noodles
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_chicken_and_noodles(chicken, noodles, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_kitchen_counter_123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_bread_2084_around_cupboard_117(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_noodles(chicken:item, noodles:item):
    body:
        if not close(noodles, chicken):
            put_close(noodles, chicken)
            # Place the noodles close to the chicken

behavior boil_together(chicken:item, noodles:item, pot:item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)
            # Place the chicken in the pot
        if not inside(noodles, pot):
            put_inside(noodles, pot)
            # Place the noodles in the pot
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water

behavior start_boiling(stove:item, pot:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind noodles: item where:
            is_food_noodles(noodles)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        gather_noodles(chicken, noodles)
        boil_together(chicken, noodles, pot)
        start_boiling(stove, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_water_for_boiling(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water

behavior add_food_to_pot(food:item, pot: item):
    body:
        if not inside(food, pot):
            put_inside(food, pot)
            # Add the food to the pot

behavior boil_pot(pot:item):
    body:
        if is_off(pot):
            switch_on(pot)
            # Turn on the stove to boil the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken) and clean(chicken)
        # Select the cut and clean chicken

        bind noodles: item where:
            is_dry_pasta(noodles)
        # Select dry noodles

        get_water_for_boiling(pot)
        add_food_to_pot(chicken, pot)
        add_food_to_pot(noodles, pot)
        boil_pot(pot)
        # Boil the chicken pieces and noodles together

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_bread_2084_around_cupboard_117(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_pot_with_water():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        get_water(pot)
        # Fill the pot with water

behavior add_chicken_to_pot(pot:item):
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and clean(chicken) and cut(chicken)
        # Select cleaned and cut chicken pieces
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        # Put chicken pieces in the pot

behavior add_noodles_to_pot(pot:item):
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles
        if not inside(noodles, pot):
            put_inside(noodles, pot)
        # Put noodles in the pot

behavior boil_pot(pot:item):
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        if not on(pot, stove):
            put_on(pot, stove)
        # Put the pot on the stove
        if is_off(stove):
            switch_on(stove)
        # Turn on the stove to boil

behavior __goal__():
    body:
        get_pot_with_water()
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        add_chicken_to_pot(pot)
        add_noodles_to_pot(pot)
        boil_pot(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2114_around_kitchen_counter_122(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def has_hot_water(pot:item):
    # Function to check if there is hot water in the pot
    symbol has_hot_water=exists o: item : (has_water(o) and is_on(o))
    return has_hot_water

behavior boil_ingredients(pot:item, chicken:item, noodles:item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot) # Place chicken pieces inside the pot
        if not inside(noodles, pot):
            put_inside(noodles, pot) # Place noodles inside the pot
        if not has_hot_water(pot):
            get_water(pot) # Fill the pot with water
            if is_off(pot):
                switch_on(pot) # Turn on the pot to boil the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil ingredients

        bind chicken: item where:
            is_food_chicken(chicken) and clean(chicken) and cut(chicken)
        # Select cleaned and cut chicken

        bind noodles: item where:
            is_dry_pasta(noodles)
        # Select dry pastanoodles

        boil_ingredients(pot, chicken, noodles)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_bread_2084_around_kitchen_counter_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior put_chicken_in_pot(chicken:item, pot:item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)

behavior put_noodles_in_pot(noodles:item, pot:item):
    body:
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior boil_items_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken) and clean(chicken)
        bind noodles: item where:
            is_food_noodles(noodles)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        
        get_pot_with_water(pot)
        put_chicken_in_pot(chicken, pot)
        put_noodles_in_pot(noodles, pot)
        boil_items_on_stove(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. boil the chicken pieces and noodles together." ?
Answer: Find a pot and fill it with water. Put the pot on the stove and turn on the stove. Put the chicken and noodles in the pot.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Find a pot and fill it with water, place it on the stove, turn on the stove, and then put the chicken pieces and noodles in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_food_bread_2084_around_kitchen_counter_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen(stove:item):
    # Function to check if a stove is in the kitchen
    symbol in_kitchen=exists room: item : (is_kitchen(room) and inside(stove, room))
    return in_kitchen

def is_clean_pot(pot:item):
    # Function to check if a pot is clean
    return clean(pot)

def suitable_for_cooking(pot: item):
    # Check if the pot is suitable for cooking
    return clean(pot) and has_water(pot) 

behavior find_clean_pot(pot: item, faucet: item):
    body:
        if not is_clean_pot(pot):
            if has_a_free_hand(char):
                grab(pot)
                rinse(pot)
                empty_a_hand()

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            if has_a_free_hand(char):
                grab(pot)
                get_water(pot)
                empty_a_hand()

behavior prepare_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior place_items_in_pot(chicken:item, noodles:item, pot:item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) 

        bind sink: item where:
            is_sink(sink)

        bind stove: item where:
            is_stove(stove) and in_kitchen(stove)

        bind chicken: item where:
            is_food_chicken(chicken)  

        bind noodles: item where:
            is_dry_pasta(noodles)

        find_clean_pot(pot, sink)
        fill_pot_with_water(pot, sink)
        prepare_pot_on_stove(pot, stove)
        place_items_in_pot(chicken, noodles, pot)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2114_around_kitchen_counter_123(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def is_water_ready(pot:item):
    # Check if the pot is filled with water
    return has_water(pot)

behavior place_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
            # Put the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove

behavior add_items_to_pot(item1:item, item2:item, pot:item):
    body:
        if not inside(item1, pot):
            put_inside(item1, pot) # Put item1 inside the pot
        if not inside(item2, pot):
            put_inside(item2, pot) # Put item2 inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select cut chicken
        bind noodles: item where:
            is_dry_pasta(noodles)
        # Select noodles
        if not is_water_ready(pot):
            get_water(pot)
            # Fill the pot with water
        place_on_stove(pot, stove)
        turn_on_stove(stove)
        add_items_to_pot(chicken, noodles, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_dry_pasta_2114_around_kitchen_counter_122(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def find_and_fill_pot():
    bind pot: item where:
        is_pot(pot)
    walk_to(pot)
    grab(pot)
    bind sink: item where:
        is_sink(sink)
    walk_to(sink)
    get_water(pot)

def place_pot_on_stove(pot:item):
    bind stove: item where:
        is_stove(stove)
    walk_to(stove)
    put_on(pot, stove)

def turn_on_stove(stove:item):
    if is_off(stove):
        switch_on(stove)

def add_chicken_and_noodles_to_pot(pot:item):
    bind chicken: item where:
        is_food_chicken(chicken)
    grab(chicken)
    put_inside(chicken, pot)
    bind noodles: item where:
        is_dry_pasta(noodles)
    grab(noodles)
    put_inside(noodles, pot)

behavior __goal__():
    body:
        find_and_fill_pot()
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        place_pot_on_stove(pot)
        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        turn_on_stove(stove)
        add_chicken_and_noodles_to_pot(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_food_bread_2084_around_kitchen_counter_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_kitchen_counter_123(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_fill_pot():
    body:
        bind pot: item where:
            is_pot(pot)
        if not close_char(char, pot):
            walk_to(pot)
        if has_a_free_hand(char):
            grab(pot)
        foreach faucet: item:
            if is_faucet(faucet) and not has_water(pot):
                get_water(pot)
            else:
                put_on(pot, stove)

behavior place_pot_on_stove_and_turn_on(pot: item):
    body:
        bind stove: item where:
            is_stove(stove)
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior put_chicken_and_noodles_in_pot(pot: item):
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind noodles: item where:
            is_dry_pasta(noodles)
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior __goal__():
    body:
        find_and_fill_pot()
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        place_pot_on_stove_and_turn_on(pot)
        put_chicken_and_noodles_in_pot(pot)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2114_around_kitchen_counter_122(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen(stove:item):
    # Function to check if a stove is in the kitchen
    symbol in_kitchen=exists room: item : (is_kitchen(room) and inside(stove, room))
    return in_kitchen

behavior get_pot_with_water_and_heat(pot:item, stove:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill the pot with water
        if not inhand(pot):
            grab(pot) # Grab the pot if not already in hand
        if not on(pot, stove):
            put_on(pot, stove) # Place the pot on the stove
        if is_off(stove):
            switch_on(stove) # Turn on the stove if its off

behavior add_ingredients_to_pot(pot:item, chicken:item, noodles:item):
    body:
        # If the chicken is not in the pot, put it inside
        if not inside(chicken, pot):
            grab(chicken)
            put_inside(chicken, pot)
            empty_a_hand()
        # If the noodles are not in the pot, put them inside
        if not inside(noodles, pot):
            grab(noodles)
            put_inside(noodles, pot)
            empty_a_hand()

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and in_kitchen(stove)
        # Select a stove located in the kitchen

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind noodles: item where:
            is_dry_pasta(noodles)
        # Select dry noodles

        get_pot_with_water_and_heat(pot, stove)
        add_ingredients_to_pot(pot, chicken, noodles)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_bread_2084_around_kitchen_counter_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_available():
    # Check if there is a pot available
    symbol pot_available=exists pot: item : (is_pot(pot) and not visited(pot))
    return pot_available

def is_stove_available():
    # Check if there is a stove available
    symbol stove_available=exists stove: item : (is_stove(stove) and not visited(stove))
    return stove_available

behavior find_and_fill_pot(pot:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove) # Place the pot on the stove

behavior add_ingredients_to_pot(pot:item, chicken:item, noodles:item):
    body:
        if is_food_chicken(chicken) and is_dry_pasta(noodles):
            if not inside(chicken, pot):
                put_inside(chicken, pot) # Add chicken to the pot
            if not inside(noodles, pot):
                put_inside(noodles, pot) # Add noodles to the pot

behavior start_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        bind noodles: item where:
            is_dry_pasta(noodles)
        
        if is_pot_available():
            bind pot: item where:
                is_pot(pot) and not visited(pot)
            find_and_fill_pot(pot)

            if is_stove_available():
                bind stove: item where:
                    is_stove(stove) and not visited(stove)
                place_pot_on_stove(pot, stove)
                start_stove(stove)
                add_ingredients_to_pot(pot, chicken, noodles)
        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Is there water inside")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_chicken_2089)', 'walk_executor(cutting_board_2123)', 'put_executor(food_chicken_2089, cutting_board_2123)', 'walk_executor(knifeblock_76)', 'walk_executor(ironing_board_2144)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'grab_executor(knife_2037)', 'walk_executor(food_chicken_2089)', 'cut_executor(food_chicken_2089)', 'rinse_executor(food_chicken_2089)']
Time info:
Time consume: 461 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 0
goal generate times: 31
goal correct times: 0
action_num: 14

Task complete rate:
Keystate: k1 - Requires: 17 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
