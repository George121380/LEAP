From agent.py
Reset goals: The sub-goals are: 
['1. Fry the steak.', '2. Cut the steak.', '3. Put the steak on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_steak_2008_around_fridge_289(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

def fry_steak_on_stove(stove:item, fryingpan:item, steak:item):
    body:
        if is_off(stove):
            switch_on(stove)
            # Ensure the stove is turned on
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
            # Place the frying pan on the stove
        if not inside(steak, fryingpan):
            put_inside(steak, fryingpan)
            # Place the steak inside the frying pan
        if open(fryingpan):
            closes(fryingpan)
            # Close the frying pan if it is open
        watch(fryingpan)
        # Watch the frying process to avoid overcooking
        switch_off(stove)
        # Turn off the stove after the steak is fried

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak
        fry_steak_on_stove(stove, fryingpan, steak)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_fridge_289(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_food_steak_2008_around_fridge_289(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_pan_ready(stove: item, fryingpan: item):
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove) # Place frying pan on stove

behavior start_frying(stove: item, fryingpan: item, steak: item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove
        if not inside(steak, fryingpan):
            put_inside(steak, fryingpan) # Place the steak in the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind steak: item where:
            is_food_steak(steak)
        get_pan_ready(stove, fryingpan)
        start_frying(stove, fryingpan, steak)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior get_pan_ready(stove: item, fryingpan: item):
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove) # Place frying pan on stove

behavior start_frying(stove: item, fryingpan: item, steak: item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove
        if not inside(steak, fryingpan):
            put_inside(steak, fryingpan) # Place the steak in the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind steak: item where:
            is_food_steak(steak)
        get_pan_ready(stove, fryingpan)
        start_frying(stove, fryingpan, steak)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_steak_2008, fridge_289)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(fryingpan_2083)putin_executor(food_steak_2008, fryingpan_2083)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(fryingpan_2083, kitchen_counter_230)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_steak_2008, fridge_289)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(fryingpan_2083)putin_executor(food_steak_2008, fryingpan_2083)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_steak_2008, fridge_289)
Find food_steak_2008. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2008)walk_executor(fryingpan_2083)putin_executor(food_steak_2008, fryingpan_2083)
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_steak_2008 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_steak_2008. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_steak_2008, fryingpan_2083)
Robot find: Robot is close to the food_steak_2008. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_steak_2008 is inside fryingpan_2083. food_steak_2008 is close fryingpan_2083. fryingpan_2083 is close food_steak_2008. food_steak_2008 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_table_107(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_knife_and_cut_steak(knife:item, steak:item):
    body:
        if not inhand(knife):
            grab(knife)
        if not cut(steak):
            cuts(steak)
        empty_a_hand()

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cuttable(steak)
        bind knife: item where:
            is_knife(knife) and grabbable(knife)
        grab_knife_and_cut_steak(knife, steak)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_board_close(obj: item):
    # Function to check if a cutting board is close to the specified object
    symbol is_cutting_board_close = exists cb: item : (is_cutting_board(cb) and close(cb, obj))
    return is_cutting_board_close

behavior grab_knife_and_cut_steak(knife:item, steak:item, cutting_board:item):
    body:
        if not cut(steak):
            if not inhand(knife):
                grab(knife)
            if not on(steak, cutting_board):
                put_on(steak, cutting_board)
            cuts(steak)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cuttable(steak)

        bind knife: item where:
            is_knife(knife)

        if exists cutting_board: item : (is_cutting_board(cutting_board) and close_char(char, cutting_board)):
            # If there is a cutting board close to the character
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and close_char(char, cutting_board)
            grab_knife_and_cut_steak(knife, steak, cutting_board)

        else:
            # Otherwise, look for a cutting board
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Check cutting board location")
                    if close_char(char, cutting_board):
                        grab_knife_and_cut_steak(knife, steak, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_cutting_board_close(obj: item):
    # Function to check if a cutting board is close to the specified object
    symbol is_cutting_board_close = exists cb: item : (is_cutting_board(cb) and close(cb, obj))
    return is_cutting_board_close

behavior grab_knife_and_cut_steak(knife:item, steak:item, cutting_board:item):
    body:
        if not cut(steak):
            if not inhand(knife):
                grab(knife)
            if not on(steak, cutting_board):
                put_on(steak, cutting_board)
            cuts(steak)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cuttable(steak)

        bind knife: item where:
            is_knife(knife)

        if exists cutting_board: item : (is_cutting_board(cutting_board) and close_char(char, cutting_board)):
            # If there is a cutting board close to the character
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and close_char(char, cutting_board)
            grab_knife_and_cut_steak(knife, steak, cutting_board)

        else:
            # Otherwise, look for a cutting board
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Check cutting board location")
                    if close_char(char, cutting_board):
                        grab_knife_and_cut_steak(knife, steak, cutting_board)

##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2051)obs(cutting_board_2051, Check cutting board location)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(cutting_board_2051)put_executor(food_steak_2008, cutting_board_2051)walk_executor(food_steak_2008)cut_executor(food_steak_2008)
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
obs(cutting_board_2051, Check cutting board location)
Get this information:  cutting_board_2051 is on kitchen_counter_230. cutting_board_2051 is inside dining_room_201. cutting_board_2051 is close to kitchen_counter_230. cutting_board_2051 is close to character_65. cutting_board_2051 is CLEAN.
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the fryingpan_2083. Grabbing food_steak_2008 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_steak_2008, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_steak_2008. food_steak_2008 is close cutting_board_2051. food_steak_2008 is on cutting_board_2051. food_steak_2008 released by left hand. 
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_cut_steak():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        grab(steak)

behavior place_on_plate(steak: item, plate: item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        bind plate: item where:
            is_plate(plate)
        grab_cut_steak()
        walk_to(plate)
        place_on_plate(steak, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_cut_steak():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        grab(steak)

behavior place_on_plate(steak: item, plate: item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        bind plate: item where:
            is_plate(plate)
        grab_cut_steak()
        walk_to(plate)
        place_on_plate(steak, plate)

##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2008)walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Grabbing food_steak_2008 by left hand. 
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cupboard_229. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_plate_1000_around_wallshelf_234(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_on_plate(steak:item, plate:item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        
        bind plate: item where:
            is_plate(plate)

        place_steak_on_plate(steak, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_steak_on_plate(steak:item, plate:item):
    body:
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        
        bind plate: item where:
            is_plate(plate)

        place_steak_on_plate(steak, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_234)exp(plate_1000, wallshelf_234)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(wallshelf_234)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the wallshelf_234. 
##############################
From agent.py
exp(plate_1000, wallshelf_234)
Fail to find plate_1000 around wallshelf_234. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_235)exp(plate_1000, wallshelf_235)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(wallshelf_235)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the wallshelf_235. 
##############################
From agent.py
exp(plate_1000, wallshelf_235)
Fail to find plate_1000 around wallshelf_235. 
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_steak_2008)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_steak_2008, fryingpan_2083)', 'walk_executor(cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_steak_2008)', 'grab_executor(food_steak_2008)', 'walk_executor(cutting_board_2051)', 'put_executor(food_steak_2008, cutting_board_2051)', 'walk_executor(food_steak_2008)', 'cut_executor(food_steak_2008)', 'grab_executor(food_steak_2008)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229) (Failed)', 'walk_executor(wallshelf_234)', 'walk_executor(wallshelf_235)']
Time info:
Time consume: 179 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 26

Task complete rate:
Keystate: k1 - Requires: 6 steps
Keystate: k2 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
