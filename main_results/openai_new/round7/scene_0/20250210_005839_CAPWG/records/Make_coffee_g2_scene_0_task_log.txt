From agent.py
Reset goals: The sub-goals are: 
['1. Prepare a cup of coffee using the coffee maker.  ', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_plugged_and_off(coffee_maker:item):
    symbol is_plugged_and_off=plugged(coffee_maker) and is_off(coffee_maker)
    return is_plugged_and_off

def has_coffee_and_water(coffee_maker:item):
    symbol has_resources=exists o: item : (is_coffe_maker(o) and has_water(o) and inside(coffee_maker, o))
    return has_resources

behavior prepare_coffee(coffee_maker:item, cup:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)
        if not inside(cup, coffee_maker):
            put_inside(cup, coffee_maker)

behavior close_coffee_maker(coffee_maker:item):
    body:
        if open(coffee_maker):
            closes(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        if not is_plugged_and_off(coffee_maker) or not has_coffee_and_water(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged, turned off, and has water and coffee")
        prepare_coffee(coffee_maker, cup)
        close_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee(cup: item, coffee_maker: item):
    body:
        if not inside(cup, coffee_maker):
            put_inside(cup, coffee_maker) # Place the cup into the coffee maker
        if is_off(coffee_maker):
            switch_on(coffee_maker) # Switch on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind coffee_maker: item where:
            is_coffee_maker(coffee_maker)
        # Select a coffee maker
        prepare_coffee(cup, coffee_maker) # Prepare coffee using the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(coffee_maker:item):
    body:
        if unplugged(coffee_maker):
            plugin(coffee_maker) # Plug in the coffee maker
        if is_off(coffee_maker):
            switch_on(coffee_maker) # Turn on the coffee maker
        # Assuming the coffee maker will make coffee after being switched on

behavior pour_into_cup(cup:item):
    body:
        if not drinkable(cup):
            observe(cup, "Check if the cup is empty and ready to receive coffee") # Ensure the cup can have coffee poured into it

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select a cup that can receive coffee
        make_coffee(coffee_maker)
        # Prepare coffee using the coffee maker
        walk_to(cup)
        # Approach the cup to pour coffee
        pour_into_cup(cup)
        # Pour coffee into the cup

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior make_coffee(coffee_maker:item):
    body:
        if unplugged(coffee_maker):
            plugin(coffee_maker) # Plug in the coffee maker
        if is_off(coffee_maker):
            switch_on(coffee_maker) # Turn on the coffee maker
        # Assuming the coffee maker will make coffee after being switched on

behavior pour_into_cup(cup:item):
    body:
        if not drinkable(cup):
            observe(cup, "Check if the cup is empty and ready to receive coffee") # Ensure the cup can have coffee poured into it

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select a cup that can receive coffee
        make_coffee(coffee_maker)
        # Prepare coffee using the coffee maker
        walk_to(cup)
        # Approach the cup to pour coffee
        pour_into_cup(cup)
        # Pour coffee into the cup

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)switchon_executor(coffe_maker_290)switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)exp(cup_2063, coffe_maker_290)walk_executor(cup_2063)obs(cup_2063, Check if the cup is empty and ready to receive coffee)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned on. 
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is opened. 
##############################
From agent.py
exp(cup_2063, coffe_maker_290)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)walk_executor(cup_2063)obs(cup_2063, Check if the cup is empty and ready to receive coffee)
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned on. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
obs(cup_2063, Check if the cup is empty and ready to receive coffee)
Get this information:  cup_2063 is close to kitchen_counter_230. cup_2063 is close to character_65. cup_2063 is on kitchen_counter_230. cup_2063 is inside dining_room_201.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The coffee needs to be poured into the cup. The sub-task requires preparing a cup of coffee using the coffee maker, which involves making the coffee and pouring it into a cup. The robot should ensure the cup is positioned correctly to receive coffee from the coffee maker and perform the necessary steps to pour the coffee into the cup.
##############################
From agent.py
Human Instruction: The coffee needs to be poured into the cup. The sub-task requires preparing a cup of coffee using the coffee maker, which involves making the coffee and pouring it into a cup. The robot should ensure the cup is positioned correctly to receive coffee from the coffee maker and perform the necessary steps to pour the coffee into the cup.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Switch on coffe_maker_290.
Action 3: Switch off coffe_maker_290.
Action 4: Open coffe_maker_290.
Action 5: look for cup_2063 around coffe_maker_290.
Action 6: Close coffe_maker_290.
Action 7: Switch on coffe_maker_290.
Action 8: Walk to cup_2063.
Action 9: Observe around cup_2063 with the question of Check if the cup is empty and ready to receive coffee.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_desk_357(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(coffee_filter,desk_instance)
        else:
            exp(coffee_filter,desk_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,desk_instance]=True
        close[desk_instance,coffee_filter]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee(coffee_maker:item, cup:item):
    body:
        if not close_char(char, coffee_maker):
            walk_to(coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)
        if close(coffee_maker, cup) and closed(coffee_maker):  # Assuming the coffee is ready to be poured
            observe(coffee_maker, "Check if coffee is prepared")
            if exists coffee: item : (is_drinkable(coffee) and close(coffee, coffee_maker)):  # Assuming you can detect if coffee is close
                put_on(coffee, cup)  # This is an assumption based on available actions Actual pouring not detailed

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup)
        
        prepare_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_desk_357(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(coffee_filter,desk_instance)
        else:
            exp(coffee_filter,desk_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,desk_instance]=True
        close[desk_instance,coffee_filter]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior position_cup_under_coffee_maker(cup:item, coffee_maker:item):
    body:
        if not close(cup, coffee_maker):
            put_close(cup, coffee_maker)

behavior make_coffee(coffee_maker:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        position_cup_under_coffee_maker(cup, coffee_maker)
        make_coffee(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select coffee maker with ID 290
        bind cup: item where:
            is_cup(cup)
        # Select cup with ID 2063
        
        observe(cup, "Check if the cup is empty and ready to receive coffee")
        # Observe the cup to ensure its ready for coffee
        
        pour_coffee_into_cup(coffee_maker, cup)
        # Pour coffee into the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior position_cup_under_coffee_maker(cup:item, coffee_maker:item):
    body:
        if not close(cup, coffee_maker):
            put_close(cup, coffee_maker)

behavior make_coffee(coffee_maker:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        position_cup_under_coffee_maker(cup, coffee_maker)
        make_coffee(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select coffee maker with ID 290
        bind cup: item where:
            is_cup(cup)
        # Select cup with ID 2063
        
        observe(cup, "Check if the cup is empty and ready to receive coffee")
        # Observe the cup to ensure its ready for coffee
        
        pour_coffee_into_cup(coffee_maker, cup)
        # Pour coffee into the cup

##############################
From agent.py-> find a plan in act()
obs(cup_2063, Check if the cup is empty and ready to receive coffee)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)
##############################
From agent.py
obs(cup_2063, Check if the cup is empty and ready to receive coffee)
Get this information:  cup_2063 is close to kitchen_counter_230. cup_2063 is close to character_65. cup_2063 is on kitchen_counter_230. cup_2063 is inside dining_room_201.
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. 
##############################
From agent.py
put_executor(cup_2063, coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is close cup_2063. cup_2063 is close coffe_maker_290. cup_2063 is on coffe_maker_290. cup_2063 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Coffee has not been poured into the cup. You need to ensure the coffee maker dispenses the coffee into cup_2063. Make sure the coffee maker is turned on and coffee is being made and dispensed.
##############################
From agent.py
Human Instruction: Coffee has not been poured into the cup. You need to ensure the coffee maker dispenses the coffee into cup_2063. Make sure the coffee maker is turned on and coffee is being made and dispensed.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Switch on coffe_maker_290.
Action 3: Switch off coffe_maker_290.
Action 4: Open coffe_maker_290.
Action 5: look for cup_2063 around coffe_maker_290.
Action 6: Close coffe_maker_290.
Action 7: Switch on coffe_maker_290.
Action 8: Walk to cup_2063.
Action 9: Observe around cup_2063 with the question of Check if the cup is empty and ready to receive coffee.
Action 10: Observe around cup_2063 with the question of Check if the cup is empty and ready to receive coffee.
Action 11: Grab cup_2063.
Action 12: Walk to coffe_maker_290.
Action 13: Put cup_2063 on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_desk_357(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(coffee_filter,desk_instance)
        else:
            exp(coffee_filter,desk_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,desk_instance]=True
        close[desk_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_coffee_maker_on(coffee_maker:item):
    if is_off(coffee_maker):
        switch_on(coffee_maker)

def put_cup_on_coffee_maker(cup:item, coffee_maker:item):
    if not on(cup, coffee_maker):
        grab(cup)
        walk_to(coffee_maker)
        put_on(cup, coffee_maker)

def dispense_coffee(cup:item, coffee_maker:item):
    if not is_on(coffee_maker):
        ensure_coffee_maker_on(coffee_maker)
    else:
        if not on(cup, coffee_maker):
            put_cup_on_coffee_maker(cup, coffee_maker)
        # Assume the coffee maker automatically dispenses coffee into the cup when on

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        walk_to(coffee_maker)
        dispense_coffee(cup, coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_desk_357(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(coffee_filter,desk_instance)
        else:
            exp(coffee_filter,desk_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,desk_instance]=True
        close[desk_instance,coffee_filter]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        if not on(cup, coffee_maker): 
            put_on(cup, coffee_maker)
            # Ensure the cup is placed on the coffee maker

        if is_off(coffee_maker):
            switch_on(coffee_maker)
            # Ensure the coffee maker is turned on

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup with ID 2063

        if not is_on(coffee_maker) or not on(cup, coffee_maker):
            walk_to(coffee_maker)
            # Ensure the character is near the coffee maker
            prepare_coffee(cup, coffee_maker)
        # Prepare a cup of coffee using the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_cup():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        if not on(cup, coffe_maker):
            grab(cup)
            walk_to(coffe_maker)
            if is_coffee_maker(coffe_maker):
                put_on(cup, coffe_maker)

behavior start_coffee_maker(coffe_maker: item):
    body:
        if is_off(coffe_maker):
            switch_on(coffe_maker)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffee_maker(coffe_maker) and id[coffe_maker] == 290
        start_coffee_maker(coffe_maker)
        prepare_cup()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_photoframe_185(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==185
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(coffee_filter,photoframe_instance)
        else:
            exp(coffee_filter,photoframe_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,photoframe_instance]=True
        close[photoframe_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def observe_coffee_maker_discharge(cup:item, coffee_maker:item):
    symbol is_discharge=exists item: item : (on(item, cup) and is_coffee(item))
    observe(coffee_maker, "Check if the coffee is being dispensed into the cup")
    return is_discharge

behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker) # Turn on the coffee maker
        if not on(cup, coffee_maker):
            walk_to(cup)
            grab(cup)
            walk_to(coffee_maker)
            put_on(cup, coffee_maker) # Place the cup on the coffee maker

behavior ensure_coffee_maker_on(coffee_maker:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker) # Ensure the coffee maker is on

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        ensure_coffee_maker_on(coffee_maker)
        prepare_coffee(cup, coffee_maker)
        if not observe_coffee_maker_discharge(cup, coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is dispensing coffee into the cup")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_desk_357(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(coffee_filter,desk_instance)
        else:
            exp(coffee_filter,desk_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,desk_instance]=True
        close[desk_instance,coffee_filter]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior walk_to_coffee_maker(coffee_maker:item):
    body:
        if not close_char(char, coffee_maker):
            walk_to(coffee_maker)

behavior switch_on_coffee_maker(coffee_maker:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior place_cup_under_dispenser(cup:item, coffee_maker:item):
    body:
        if not on(cup, coffee_maker):
            put_on(cup, coffee_maker)

behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        walk_to_coffee_maker(coffee_maker)
        switch_on_coffee_maker(coffee_maker)
        walk_to(cup)
        observe(cup, "Check if the cup is empty and ready to receive coffee")
        grab(cup)
        walk_to_coffee_maker(coffee_maker)
        place_cup_under_dispenser(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==290
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        prepare_coffee(cup, coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior walk_to_coffee_maker(coffee_maker:item):
    body:
        if not close_char(char, coffee_maker):
            walk_to(coffee_maker)

behavior switch_on_coffee_maker(coffee_maker:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior place_cup_under_dispenser(cup:item, coffee_maker:item):
    body:
        if not on(cup, coffee_maker):
            put_on(cup, coffee_maker)

behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        walk_to_coffee_maker(coffee_maker)
        switch_on_coffee_maker(coffee_maker)
        walk_to(cup)
        observe(cup, "Check if the cup is empty and ready to receive coffee")
        grab(cup)
        walk_to_coffee_maker(coffee_maker)
        place_cup_under_dispenser(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==290
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        prepare_coffee(cup, coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)obs(cup_2063, Check if the cup is empty and ready to receive coffee)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. 
##############################
From agent.py
obs(cup_2063, Check if the cup is empty and ready to receive coffee)
Get this information:  cup_2063 is close to character_65. cup_2063 is close to coffe_maker_290. cup_2063 is on coffe_maker_290. cup_2063 is inside dining_room_201.
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(cup_2063, coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. cup_2063 is close coffe_maker_290. cup_2063 is on coffe_maker_290. cup_2063 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The coffee has not been poured into the cup. Ensure the coffee maker dispenses the coffee into cup_2063 by first verifying that the coffee maker is turned on and operational.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_milk(cup:item, milk:item):
    body:
        if is_milk(milk) and is_cup(cup):
            if not inside(milk, cup):
                put_inside(milk, cup)

behavior add_sugar(cup:item, sugar:item):
    body:
        if is_food_sugar(sugar) and is_cup(cup):
            if not inside(sugar, cup):
                put_inside(sugar, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        bind milk: item where:
            is_milk(milk)
        bind sugar: item where:
            is_food_sugar(sugar)
        add_milk(cup, milk)
        add_sugar(cup, sugar)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_milk(cup:item, milk:item):
    body:
        if is_milk(milk) and is_cup(cup):
            if not inside(milk, cup):
                put_inside(milk, cup)

behavior add_sugar(cup:item, sugar:item):
    body:
        if is_food_sugar(sugar) and is_cup(cup):
            if not inside(sugar, cup):
                put_inside(sugar, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        bind milk: item where:
            is_milk(milk)
        bind sugar: item where:
            is_food_sugar(sugar)
        add_milk(cup, milk)
        add_sugar(cup, sugar)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(fridge_289)exp(food_sugar_2039, fridge_289)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the coffe_maker_290. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the coffe_maker_290. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. 
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. Grabbing food_sugar_2039 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_sugar_2039, cup_2063)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. Robot is close to the cup_2063. cup_2063 is close food_sugar_2039. food_sugar_2039 is close cup_2063. food_sugar_2039 is inside cup_2063. food_sugar_2039 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(coffe_maker_290)', 'put_executor(cup_2063, coffe_maker_290)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(coffe_maker_290)', 'put_executor(cup_2063, coffe_maker_290)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(food_sugar_2039)', 'grab_executor(food_sugar_2039)', 'walk_executor(cup_2063)', 'putin_executor(food_sugar_2039, cup_2063)']
Time info:
Time consume: 170 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 11
goal correct times: 0
action_num: 24

Task complete rate:
Keystate: k1 - Requires: 16 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
