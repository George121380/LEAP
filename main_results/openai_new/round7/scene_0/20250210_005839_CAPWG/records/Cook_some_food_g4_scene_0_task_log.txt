From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables in a pot.  ', '2. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_steak_2008_around_fridge_289(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_filled_with_vegetables(pot:item):
    # Function to check if the pot contains vegetables
    symbol filled_with_vegetables=exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return filled_with_vegetables

behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water

behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        if not inside(vegetable, pot):
            put_inside(vegetable, pot)
            # Place the vegetable inside the pot

behavior start_boiling(pot:item):
    body:
        bind stove: item where:
            is_stove(stove)
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove top

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        foreach vegetable: item:
            # Move all vegetables into the pot
            if is_food_vegetable(vegetable) and not inside(vegetable, pot):
                grab(vegetable)
                put_vegetables_in_pot(vegetable, pot)
        
        fill_pot_with_water(pot)

        if is_pot_filled_with_vegetables(pot):
            start_boiling(pot)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_pot_filled_with_vegetables(pot:item):
    # Function to check if the pot contains vegetables
    symbol filled_with_vegetables=exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return filled_with_vegetables

behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water

behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        if not inside(vegetable, pot):
            put_inside(vegetable, pot)
            # Place the vegetable inside the pot

behavior start_boiling(pot:item):
    body:
        bind stove: item where:
            is_stove(stove)
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove top

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        foreach vegetable: item:
            # Move all vegetables into the pot
            if is_food_vegetable(vegetable) and not inside(vegetable, pot):
                grab(vegetable)
                put_vegetables_in_pot(vegetable, pot)
        
        fill_pot_with_water(pot)

        if is_pot_filled_with_vegetables(pot):
            start_boiling(pot)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_vegetable_2041, fridge_289)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_vegetable_2041, fridge_289)
Find food_vegetable_2041. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2041)walk_executor(pot_2069)open_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_cd_2075_around_bookshelf_101(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cd,bookshelf_instance)
        else:
            exp(cd,bookshelf_instance)
    eff:
        unknown[cd]=False
        close[cd,bookshelf_instance]=True
        close[bookshelf_instance,cd]=True
    

#exp_behavior_end

#goal_representation
 
def is_vegetable(item: item):
    return is_food_vegetable(item)

def has_water_and_vegetables(pot:item):
    symbol contains_vegetables=exists food_vegetable: item : (is_food_vegetable(food_vegetable) and inside(food_vegetable, pot))
    return has_water(pot) and contains_vegetables

behavior fill_pot_with_water_and_vegetables(pot:item, vegetables:item):
    body:
        if not has_water(pot):
            get_water(pot)
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)

behavior start_boiling(pot:item):
    body:
        if not is_on(pot):
            switch_on(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and inhand(food_vegetable)
        fill_pot_with_water_and_vegetables(pot, food_vegetable)
        start_boiling(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_desk_357(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(cd,desk_instance)
        else:
            exp(cd,desk_instance)
    eff:
        unknown[cd]=False
        close[cd,desk_instance]=True
        close[desk_instance,cd]=True
    

behavior find_tray_296_around_cutting_board_2051(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(tray,cutting_board_instance)
        else:
            exp(tray,cutting_board_instance)
    eff:
        unknown[tray]=False
        close[tray,cutting_board_instance]=True
        close[cutting_board_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item, vegetables:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill pot with water
        if not inside(vegetables, pot):
            put_inside(vegetables, pot) # Place vegetables in the pot
        if is_off(stove):
            switch_on(stove) # Turn on the stove
        if not on(pot, stove):
            put_on(pot, stove) # Place pot on stove
            
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables]==2041
        bind stove: item where:
            is_stove(stove)
        boil_vegetables(pot, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Check if the pot has water
    symbol pot_has_water=has_water(pot)
    return pot_has_water

behavior add_water_to_pot(pot:item):
    body:
        if not has_water_in_pot(pot):
            water(pot) # Add water to the pot

behavior boil_vegetables_in_pot(vegetables:item, pot:item):
    body:
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)
            # Put vegetables inside the pot for boiling
        if has_water_in_pot(pot):
            # Assume the boiling process is successful if the pot has water
            # No specific behavior required for boiling in this format

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Selecting the pot with ID 2069
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables]==2041
        # Selecting the vegetables

        add_water_to_pot(pot) # Ensure there is water in the pot
        boil_vegetables_in_pot(vegetables, pot) # Boil the vegetables in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_ironing_board_2074(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(cd,ironing_board_instance)
        else:
            exp(cd,ironing_board_instance)
    eff:
        unknown[cd]=False
        close[cd,ironing_board_instance]=True
        close[ironing_board_instance,cd]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def can_open_pot(pot:item):
    symbol can_open=can_open(pot)
    return can_open

def is_pot_empty(pot:item):
    symbol empty=exists contents: item : not inside(contents, pot)
    return empty

behavior boil_vegetables(vegetable:item, pot:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill the pot with water
        if not inside(vegetable, pot):
            put_inside(vegetable, pot) # Put vegetables into pot

behavior start_boiling_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove to start boiling
        
behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2041
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        bind stove: item where:
            is_stove(stove)
        
        if not visited(pot):
            observe(pot, "Check if pot can be opened and is empty")

        if can_open_pot(pot) and is_pot_empty(pot):
            boil_vegetables(vegetable, pot)
            start_boiling_stove(stove)

        if is_on(stove):
            walk_to(stove) # Ensure proximity to the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def can_open_pot(pot:item):
    symbol can_open=can_open(pot)
    return can_open

def is_pot_empty(pot:item):
    symbol empty=exists contents: item : not inside(contents, pot)
    return empty

behavior boil_vegetables(vegetable:item, pot:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill the pot with water
        if not inside(vegetable, pot):
            put_inside(vegetable, pot) # Put vegetables into pot

behavior start_boiling_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove to start boiling
        
behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2041
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        bind stove: item where:
            is_stove(stove)
        
        if not visited(pot):
            observe(pot, "Check if pot can be opened and is empty")

        if can_open_pot(pot) and is_pot_empty(pot):
            boil_vegetables(vegetable, pot)
            start_boiling_stove(stove)

        if is_on(stove):
            walk_to(stove) # Ensure proximity to the stove

##############################
From agent.py-> find a plan in act()
put_executor(food_vegetable_2041, kitchen_counter_230)open_executor(pot_2069)obs(pot_2069, Check if pot can be opened and is empty)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(stove_2065)
##############################
From agent.py
put_executor(food_vegetable_2041, kitchen_counter_230)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. kitchen_counter_230 is close food_vegetable_2041. food_vegetable_2041 is close kitchen_counter_230. food_vegetable_2041 is on kitchen_counter_230. food_vegetable_2041 released by left hand. food_vegetable_2041 released by right hand. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
obs(pot_2069, Check if pot can be opened and is empty)
Get this information:  pot_2069 is inside dining_room_201. pot_2069 is close to kitchen_counter_230. pot_2069 is close to character_65. pot_2069 is on kitchen_counter_230. pot_2069 is OPEN.
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the pot_2069. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the pot_2069. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_vegetable_2041. food_vegetable_2041 is inside pot_2069. food_vegetable_2041 is close pot_2069. pot_2069 is close food_vegetable_2041. food_vegetable_2041 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is filled with water before proceeding with boiling the vegetables.
##############################
From agent.py
Human Instruction: You need to ensure that the pot is filled with water before proceeding with boiling the vegetables.

Trial and Error: You can not open pot_2069
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_vegetable_2041 around fridge_289.
Action 5: Grab food_vegetable_2041.
Action 6: Walk to kitchen_counter_230.
Action 7: look for pot_2069 around kitchen_counter_230.
Action 8: Grab food_vegetable_2041.
Action 9: Walk to pot_2069.
Action 10: Put food_vegetable_2041 on kitchen_counter_230.
Action 11: Open pot_2069.
Action 12: Observe around pot_2069 with the question of Check if pot can be opened and is empty.
Action 13: Grab pot_2069.
Action 14: Walk to faucet_43.
Action 15: Switch on faucet_43.
Action 16: Switch off faucet_43.
Action 17: Walk to food_vegetable_2041.
Action 18: Grab food_vegetable_2041.
Action 19: Walk to pot_2069.
Action 20: Put food_vegetable_2041 into pot_2069.
Action 21: Walk to stove_2065.
Action 22: Switch on stove_2065.
Action 23: Walk to stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_desk_357(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(cd,desk_instance)
        else:
            exp(cd,desk_instance)
    eff:
        unknown[cd]=False
        close[cd,desk_instance]=True
        close[desk_instance,cd]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_pot_has_water(pot: item):
    symbol pot_has_water = has_water(pot)
    return pot_has_water

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            if is_off(faucet):
                switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior prepare_stove(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior add_vegetables_to_pot(vegetable: item, pot: item):
    body:
        if not inside(vegetable, pot):
            put_inside(vegetable, pot)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetable

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not ensure_pot_has_water(pot):
            fill_pot_with_water(pot, faucet)

        add_vegetables_to_pot(vegetable, pot)
        prepare_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_wallshelf_234(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cd,wallshelf_instance)
        else:
            exp(cd,wallshelf_instance)
    eff:
        unknown[cd]=False
        close[cd,wallshelf_instance]=True
        close[wallshelf_instance,cd]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_tray_296_around_cutting_board_2051(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(tray,cutting_board_instance)
        else:
            exp(tray,cutting_board_instance)
    eff:
        unknown[tray]=False
        close[tray,cutting_board_instance]=True
        close[cutting_board_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Check if pot has water inside
    symbol water_in_pot = exists water: item : (has_water(water) and inside(water, pot))
    return water_in_pot

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water_in_pot(pot):
            walk_to(faucet) # Move to the faucet
            switch_on(faucet) # Turn on the faucet
            get_water(pot) # Fill the pot with water
            switch_off(faucet) # Turn off the faucet

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        fill_pot_with_water(pot, faucet)
        if inside(vegetables, pot):
            walk_to(stove) # Move to the stove
            switch_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables
        
        walk_to(vegetables)
        grab(vegetables)
        walk_to(pot)
        put_inside(vegetables, pot)

        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_cd_2075_around_bookshelf_101(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cd,bookshelf_instance)
        else:
            exp(cd,bookshelf_instance)
    eff:
        unknown[cd]=False
        close[cd,bookshelf_instance]=True
        close[bookshelf_instance,cd]=True
    

#exp_behavior_end

#goal_representation
 
def is_filled_with_water(pot:item):
    # Checks if the pot has water in it
    symbol water_in_pot = has_water(pot)
    return water_in_pot

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not is_filled_with_water(pot):
            if is_off(faucet):
                switch_on(faucet)
            get_water(pot)
            if is_on(faucet):
                switch_off(faucet)

behavior add_vegetable_to_pot(vegetable:item, pot:item):
    body:
        if not inside(vegetable, pot):
            put_inside(vegetable, pot)

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        if close(pot, stove):
            if is_off(stove):
                switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        add_vegetable_to_pot(vegetable, pot)
        walk_to(stove)
        boil_vegetables_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_filled_with_water(pot:item):
    # Checks if the pot has water in it
    symbol water_in_pot = has_water(pot)
    return water_in_pot

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not is_filled_with_water(pot):
            if is_off(faucet):
                switch_on(faucet)
            get_water(pot)
            if is_on(faucet):
                switch_off(faucet)

behavior add_vegetable_to_pot(vegetable:item, pot:item):
    body:
        if not inside(vegetable, pot):
            put_inside(vegetable, pot)

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        if close(pot, stove):
            if is_off(stove):
                switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        add_vegetable_to_pot(vegetable, pot)
        walk_to(stove)
        boil_vegetables_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is filled with water before proceeding with boiling the vegetables.
##############################
From agent.py
Human Instruction: You need to ensure that the pot is filled with water before proceeding with boiling the vegetables.

Trial and Error: You can not open pot_2069
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_vegetable_2041 around fridge_289.
Action 5: Grab food_vegetable_2041.
Action 6: Walk to kitchen_counter_230.
Action 7: look for pot_2069 around kitchen_counter_230.
Action 8: Grab food_vegetable_2041.
Action 9: Walk to pot_2069.
Action 10: Put food_vegetable_2041 on kitchen_counter_230.
Action 11: Open pot_2069.
Action 12: Observe around pot_2069 with the question of Check if pot can be opened and is empty.
Action 13: Grab pot_2069.
Action 14: Walk to faucet_43.
Action 15: Switch on faucet_43.
Action 16: Switch off faucet_43.
Action 17: Walk to food_vegetable_2041.
Action 18: Grab food_vegetable_2041.
Action 19: Walk to pot_2069.
Action 20: Put food_vegetable_2041 into pot_2069.
Action 21: Walk to stove_2065.
Action 22: Switch on stove_2065.
Action 23: Walk to stove_2065.
Action 24: Walk to stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_tvstand_225(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cd,tvstand_instance)
        else:
            exp(cd,tvstand_instance)
    eff:
        unknown[cd]=False
        close[cd,tvstand_instance]=True
        close[tvstand_instance,cd]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water_and_boil_vegetables(pot:item, faucet:item, vegetables:item, stove:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)  # Fill the pot with water
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)  # Put the vegetables into the pot
        if is_off(stove):
            switch_on(stove)  # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select the faucet with ID 43
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables]==2041
        # Select the vegetables with ID 2041
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065
        fill_pot_with_water_and_boil_vegetables(pot, faucet, vegetables, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_cd_2075_around_closetdrawer_120(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cd,closetdrawer_instance)
        else:
            exp(cd,closetdrawer_instance)
    eff:
        unknown[cd]=False
        close[cd,closetdrawer_instance]=True
        close[closetdrawer_instance,cd]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)

behavior place_food_in_pot(food:item, pot:item, stove:item):
    body:
        if not inside(food, pot):
            walk_to(food)
            grab(food)
            walk_to(pot)
            put_inside(food, pot)

behavior boil_pot(pot:item, stove:item):
    body:
        if not is_on(stove):
            walk_to(stove)
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable]==2041
        fill_pot_with_water(pot, faucet)
        place_food_in_pot(food_vegetable, pot, stove)
        boil_pot(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_desk_357(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(cd,desk_instance)
        else:
            exp(cd,desk_instance)
    eff:
        unknown[cd]=False
        close[cd,desk_instance]=True
        close[desk_instance,cd]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_unfilled(pot:item):
    # Check if the pot is currently unfilled with water
    return not has_water(pot)

def is_pot_openable(pot:item):
    # Check if the pot can be opened
    return can_open(pot)

behavior fill_water_in_pot(pot:item, faucet:item):
    body:
        walk_to(faucet)
        get_water(pot) # Fill the pot with water

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        if not inside(vegetable, pot):
            put_inside(vegetable, pot) # Place vegetables into the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        walk_to(stove)
        if is_off(stove):
            switch_on(stove) # Turn on the stove for boiling

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) # Select vegetables item
        
        bind pot: item where:
            is_pot(pot) and is_pot_openable(pot) # Select a pot that can be opened
        
        bind faucet: item where:
            is_faucet(faucet) # Select a faucet
        
        bind stove: item where:
            is_stove(stove) # Select a stove

        if is_pot_unfilled(pot):
            fill_water_in_pot(pot, faucet)

        place_vegetables_in_pot(vegetables, pot)
        
        boil_vegetables_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pot_unfilled(pot:item):
    # Check if the pot is currently unfilled with water
    return not has_water(pot)

def is_pot_openable(pot:item):
    # Check if the pot can be opened
    return can_open(pot)

behavior fill_water_in_pot(pot:item, faucet:item):
    body:
        walk_to(faucet)
        get_water(pot) # Fill the pot with water

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        if not inside(vegetable, pot):
            put_inside(vegetable, pot) # Place vegetables into the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        walk_to(stove)
        if is_off(stove):
            switch_on(stove) # Turn on the stove for boiling

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) # Select vegetables item
        
        bind pot: item where:
            is_pot(pot) and is_pot_openable(pot) # Select a pot that can be opened
        
        bind faucet: item where:
            is_faucet(faucet) # Select a faucet
        
        bind stove: item where:
            is_stove(stove) # Select a stove

        if is_pot_unfilled(pot):
            fill_water_in_pot(pot, faucet)

        place_vegetables_in_pot(vegetables, pot)
        
        boil_vegetables_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before boiling the vegetables.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_pot_inside_fridge(pot:item, fridge:item):
    body:
        if not inside(pot, fridge):
            put_inside(pot, fridge)
            # Place the pot inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        if open(fridge):
            closes(fridge)
            # Close the fridge door if it is open

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge
        put_pot_inside_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_pot_inside_fridge(pot:item, fridge:item):
    body:
        if not inside(pot, fridge):
            put_inside(pot, fridge)
            # Place the pot inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        if open(fridge):
            closes(fridge)
            # Close the fridge door if it is open

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge
        put_pot_inside_fridge(pot, fridge)
        close_the_fridge_door(fridge)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)close_executor(fridge_289)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
putin_executor(pot_2069, fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. pot_2069 is inside fridge_289. pot_2069 is close fridge_289. fridge_289 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
close_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables with pot. Then store the whole pot in the fridge.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_vegetable_2041)', 'walk_executor(kitchen_counter_230)', 'grab_executor(food_vegetable_2041)', 'walk_executor(pot_2069)', 'open_executor(pot_2069) (Failed)', 'put_executor(food_vegetable_2041, kitchen_counter_230)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(pot_2069)', 'putin_executor(food_vegetable_2041, pot_2069)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(stove_2065)', 'walk_executor(stove_2065)', 'walk_executor(stove_2065)', 'walk_executor(fridge_289)', 'putin_executor(pot_2069, fridge_289)', 'close_executor(fridge_289)']
Time info:
Time consume: 257 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 12
goal correct times: 0
action_num: 26

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 10 steps
Keystate: k3 - Requires: 2 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
