From agent.py
Reset goals: The sub-goals are: 
['1. Fill a cup with water.', '2. Slice a kiwi and add the slices to the cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_table_107(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(tray,table_instance)
        else:
            exp(tray,table_instance)
    eff:
        unknown[tray]=False
        close[tray,table_instance]=True
        close[table_instance,tray]=True
    

behavior find_cup_2063_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        if not has_water(cup):
            get_water(cup)
            # Fill the cup with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind faucet: item where:
            is_faucet(faucet)
        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        if not has_water(cup):
            get_water(cup)
            # Fill the cup with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind faucet: item where:
            is_faucet(faucet)
        fill_cup_with_water(cup, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(table_107)exp(cup_2063, table_107)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(table_107)
Robot find: mat_173, clothes_hat_2045, clothes_gloves_2046, drawing_176, drawing_174, drawing_175, Robot is close to the table_107. 
##############################
From agent.py
exp(cup_2063, table_107)
Fail to find cup_2063 around table_107. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(cup_2063, table_355)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, drawing_404, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
exp(cup_2063, table_355)
Fail to find cup_2063 around table_355. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(cup_2063, fridge_289)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(cup_2063, fridge_289)
Fail to find cup_2063 around fridge_289. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_357)exp(cup_2063, desk_357)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(desk_357)
Robot find: keyboard_415, headset_2076, chair_356, phone_2077, mouse_413, pencil_2001, Robot is close to the desk_357. 
##############################
From agent.py
exp(cup_2063, desk_357)
Fail to find cup_2063 around desk_357. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(cup_2063, cupboard_229)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(cup_2063, cupboard_229)
Fail to find cup_2063 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(cup_2063, coffee_table_2068)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the coffee_table_2068. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2063 ?
Answer: The target item, cup_2063, is located on the kitchen_counter_230. This counter is situated inside the dining_room_201. To find cup_2063, go to the kitchen_counter_230 and look for the cup placed on it. The cup should be clearly visible sitting directly on the counter.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, cup_2063, is located on the kitchen_counter_230. This counter is situated inside the dining_room_201. To find cup_2063, go to the kitchen_counter_230 and look for the cup placed on it. The cup should be clearly visible sitting directly on the counter.

The actions you have taken:
Action 1: Walk to table_107.
Action 2: look for cup_2063 around table_107.
Action 3: Walk to table_355.
Action 4: look for cup_2063 around table_355.
Action 5: Walk to fridge_289.
Action 6: Switch off fridge_289.
Action 7: Open fridge_289.
Action 8: look for cup_2063 around fridge_289.
Action 9: Walk to desk_357.
Action 10: look for cup_2063 around desk_357.
Action 11: Walk to cupboard_229.
Action 12: Open cupboard_229.
Action 13: look for cup_2063 around cupboard_229.
Action 14: Walk to coffee_table_2068.

##############################
From agent.py
exp(cup_2063, coffee_table_2068)
Fail to find cup_2063 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_dining_room(room:item):
    symbol is_dining_room_result = exists room: item: (is_dining_room(room))
    return is_dining_room_result

def has_sliced_kiwi_in_cup(cup:item):
    symbol has_kiwi = exists o: item: (is_food_kiwi(o) and cut(o) and inside(o, cup))
    return has_kiwi

behavior slice_kiwi(kiwi:item):
    body:
        if not cut(kiwi):
            cuts(kiwi) # Slice the kiwi if it is not sliced

behavior put_sliced_kiwi_in_cup(kiwi:item, cup:item):
    body:
        if not inside(kiwi, cup):
            put_inside(kiwi, cup) # Put the sliced kiwi in the cup

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and inside(kitchen_counter, dining_room)

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063 and on(cup, kitchen_counter)
        
        bind kiwi: item where:
            is_food_kiwi(kiwi)

        if not has_sliced_kiwi_in_cup(cup):
            slice_kiwi(kiwi)
            put_sliced_kiwi_in_cup(kiwi, cup)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_dining_room(obj: item):
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(obj, room))
    return in_dining_room

def has_filled_cup_with_water(cup:item):
    symbol filled = exists c: item : (is_cup(c) and has_water(c) and id[c] == id[cup])
    return filled

def contains_kiwi(cup:item):
    symbol has_kiwi = exists kiwi: item : (is_food_kiwi(kiwi) and inside(kiwi, cup))
    return has_kiwi

behavior find_cup_dining_room():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup) and is_in_dining_room(cup):
                observe(cup, "Check if it is cup_2063 on kitchen counter in dining room")

behavior prepare_sliced_kiwi_for_drink(cup:item, kitchen_counter:item):
    body:
        if is_in_dining_room(cup) and surfaces(kitchen_counter):
            # Try to find a kiwi
            foreach o: item:
                if is_food_kiwi(o) and not cut(o):
                    # If a kiwi is found, grab, cut it, and put it inside the cup
                    grab(o)
                    cuts(o)
                    empty_a_hand()
                    put_inside(o, cup)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 230
        # Bind kitchen counter by its known ID

        if exists cup: item: is_cup(cup) and id[cup] == 2063 and has_filled_cup_with_water(cup) and is_in_dining_room(cup):
            bind cup: item where:
                is_cup(cup) and id[cup] == 2063 and has_filled_cup_with_water(cup) and is_in_dining_room(cup)
            prepare_sliced_kiwi_for_drink(cup, kitchen_counter)

        else:
            find_cup_dining_room()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_359_around_ironing_board_2074(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(hanger,ironing_board_instance)
        else:
            exp(hanger,ironing_board_instance)
    eff:
        unknown[hanger]=False
        close[hanger,ironing_board_instance]=True
        close[ironing_board_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi(kiwi:item):
    body:
        if not cut(kiwi):
            cuts(kiwi)

behavior put_slices_in_cup(kiwi:item, cup:item):
    body:
        if is_food_kiwi(kiwi) and inhand(kiwi):
            empty_a_hand()
        if not inside(kiwi, cup):
            walk_to(cup)
            grab(kiwi)
            put_inside(kiwi, cup)

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        slice_kiwi(kiwi)
        put_slices_in_cup(kiwi, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior slice_kiwi(kiwi:item):
    body:
        if not cut(kiwi):
            cuts(kiwi)

behavior put_slices_in_cup(kiwi:item, cup:item):
    body:
        if is_food_kiwi(kiwi) and inhand(kiwi):
            empty_a_hand()
        if not inside(kiwi, cup):
            walk_to(cup)
            grab(kiwi)
            put_inside(kiwi, cup)

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        slice_kiwi(kiwi)
        put_slices_in_cup(kiwi, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_kiwi_2027)cut_executor(food_kiwi_2027)walk_executor(cup_2063)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
grab_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. Robot is close to the food_kiwi_2027. Grabbing food_kiwi_2027 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_kiwi_2027, cutting_board_2051)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_kiwi_2027. food_kiwi_2027 is close cutting_board_2051. food_kiwi_2027 is on cutting_board_2051. food_kiwi_2027 released by left hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the cup_2063. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the cup_2063. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
cut_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. 
##############################
From agent.py
walk_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_bowl_2072_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi(food:item, cutting_board:item, knife:item):
    body:
        if not cut(food):
            if not on(food, cutting_board):
                put_on(food, cutting_board)
            if not inhand(knife):
                grab(knife)
            cuts(food)
            empty_a_hand()

behavior add_slices_to_cup(food:item, cup:item):
    body:
        if cut(food) and not inside(food, cup):
            put_inside(food, cup)

behavior __goal__():
    body:
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi)

        bind cup: item where:
            is_cup(cup) and id[cup]==2063

        bind knife: item where:
            is_knife(knife) and id[knife]==2050

        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board]==2051

        slice_kiwi(food_kiwi, cutting_board, knife)
        add_slices_to_cup(food_kiwi, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior slice_kiwi(food:item, cutting_board:item, knife:item):
    body:
        if not cut(food):
            if not on(food, cutting_board):
                put_on(food, cutting_board)
            if not inhand(knife):
                grab(knife)
            cuts(food)
            empty_a_hand()

behavior add_slices_to_cup(food:item, cup:item):
    body:
        if cut(food) and not inside(food, cup):
            put_inside(food, cup)

behavior __goal__():
    body:
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi)

        bind cup: item where:
            is_cup(cup) and id[cup]==2063

        bind knife: item where:
            is_knife(knife) and id[knife]==2050

        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board]==2051

        slice_kiwi(food_kiwi, cutting_board, knife)
        add_slices_to_cup(food_kiwi, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the cup_2063. Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
grab_executor(food_kiwi_2027)
Robot find: Robot is close to the cup_2063. Robot is close to the cutting_board_2051. Robot is close to the food_kiwi_2027. Grabbing food_kiwi_2027 by left hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. 
##############################
From agent.py
putin_executor(food_kiwi_2027, cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the food_kiwi_2027. food_kiwi_2027 is inside cup_2063. cup_2063 is close food_kiwi_2027. food_kiwi_2027 is close cup_2063. food_kiwi_2027 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Get a cup of water and add some sliced kiwi inside.
Action History:
['walk_executor(table_107)', 'walk_executor(table_355)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(desk_357)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(coffee_table_2068)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(food_kiwi_2027)', 'grab_executor(food_kiwi_2027)', 'walk_executor(cutting_board_2051)', 'put_executor(food_kiwi_2027, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_kiwi_2027)', 'cut_executor(food_kiwi_2027)', 'walk_executor(cup_2063)', 'walk_executor(food_kiwi_2027)', 'grab_executor(food_kiwi_2027) (Failed)', 'walk_executor(kitchen_counter_230)', 'put_executor(knife_2050, kitchen_counter_230)', 'walk_executor(food_kiwi_2027)', 'grab_executor(food_kiwi_2027)', 'walk_executor(cup_2063)', 'putin_executor(food_kiwi_2027, cup_2063)']
Time info:
Time consume: 161 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0
action_num: 32

Task complete rate:
1
Scene_id: 0
##############################
