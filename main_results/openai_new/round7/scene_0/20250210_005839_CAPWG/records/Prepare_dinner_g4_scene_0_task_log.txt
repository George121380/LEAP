From agent.py
Reset goals: The sub-goals are: 
['1. Gather the ingredients needed for fried rice with egg, including rice and eggs, directly at the cooking area.', '2. Cook the rice, then fry it together with the eggs and any other desired ingredients in the pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_rice_or_egg(item:item):
    # Function to check if an item is rice or egg
    return is_food_rice(item) or is_food_egg(item)

behavior gather_ingredient(item:item, cooking_area:item):
    body:
        if not close(item, cooking_area):
            put_close(item, cooking_area)
            # Place the item close to the cooking area

behavior __goal__():
    body:
        # Bind rice item
        bind rice: item where:
            is_food_rice(rice)
        # Bind egg item
        bind egg: item where:
            is_food_egg(egg)
        
        # Bind cooking area item
        bind cooking_area: item where:
            surfaces(cooking_area)
        
        gather_ingredient(rice, cooking_area)
        gather_ingredient(egg, cooking_area)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_food_rice_or_egg(item:item):
    # Function to check if an item is rice or egg
    return is_food_rice(item) or is_food_egg(item)

behavior gather_ingredient(item:item, cooking_area:item):
    body:
        if not close(item, cooking_area):
            put_close(item, cooking_area)
            # Place the item close to the cooking area

behavior __goal__():
    body:
        # Bind rice item
        bind rice: item where:
            is_food_rice(rice)
        # Bind egg item
        bind egg: item where:
            is_food_egg(egg)
        
        # Bind cooking area item
        bind cooking_area: item where:
            surfaces(cooking_area)
        
        gather_ingredient(rice, cooking_area)
        gather_ingredient(egg, cooking_area)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(floor_202)put_executor(food_rice_2036, floor_202)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(floor_202)put_executor(food_egg_2020, floor_202)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_rice_2036, fridge_289)
Find food_rice_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2036)put_executor(food_rice_2036, floor_202)grab_executor(food_egg_2020)put_executor(food_egg_2020, floor_202)
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
put_executor(food_rice_2036, floor_202)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. floor_202 is close food_rice_2036. food_rice_2036 is close floor_202. food_rice_2036 is on floor_202. food_rice_2036 released by right hand. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
put_executor(food_egg_2020, floor_202)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. floor_202 is close food_egg_2020. food_egg_2020 is close floor_202. food_egg_2020 is on floor_202. food_egg_2020 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has gathered the rice and eggs but placed them on the floor, not at the designated cooking area. To complete this sub-task, the robot needs to put the rice and eggs close to the cooking area.
##############################
From agent.py
Human Instruction: The robot has gathered the rice and eggs but placed them on the floor, not at the designated cooking area. To complete this sub-task, the robot needs to put the rice and eggs close to the cooking area.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_rice_2036 around fridge_289.
Action 5: Grab food_rice_2036.
Action 6: Put food_rice_2036 on floor_202.
Action 7: Grab food_egg_2020.
Action 8: Put food_egg_2020 on floor_202.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_items_to_cooking_area(rice:item, eggs:item, cooking_area:item):
    body:
        if close(rice, cooking_area):
            empty_a_hand()
        else:
            if not inhand(rice):
                grab(rice)
            put_close(rice, cooking_area)
            empty_a_hand()

        if close(eggs, cooking_area):
            empty_a_hand()
        else:
            if not inhand(eggs):
                grab(eggs)
            put_close(eggs, cooking_area)
            empty_a_hand()

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind eggs: item where:
            is_food_egg(eggs)

        bind cooking_area: item where:
            surfaces(cooking_area)

        move_items_to_cooking_area(rice, eggs, cooking_area)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_to_kitchen_area(food_rice:item, food_egg:item, kitchen_counter:item):
    body:
        if not close(food_rice, kitchen_counter):
            walk_to(food_rice)
            grab(food_rice)
            put_close(food_rice, kitchen_counter)
            empty_a_hand()
        if not close(food_egg, kitchen_counter):
            walk_to(food_egg)
            grab(food_egg)
            put_close(food_egg, kitchen_counter)
            empty_a_hand()

behavior __goal__():
    body:
        bind food_rice: item where:
            is_food_rice(food_rice)
        bind food_egg: item where:
            is_food_egg(food_egg)
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        move_to_kitchen_area(food_rice, food_egg, kitchen_counter)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_item_close_to_cooking_area(item: item, cooking_area: item):
    body:
        if not close(item, cooking_area):
            grab(item)
            put_close(item, cooking_area)

behavior relocate_items_to_cooking_area(rice: item, eggs: item, cooking_area: item):
    body:
        move_item_close_to_cooking_area(rice, cooking_area)
        move_item_close_to_cooking_area(eggs, cooking_area)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind eggs: item where:
            is_food_egg(eggs)
        bind cooking_area: item where:
            is_kitchen_counter(cooking_area) or is_stove(cooking_area)
        
        relocate_items_to_cooking_area(rice, eggs, cooking_area)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_item_close_to_cooking_area(item: item, cooking_area: item):
    body:
        if not close(item, cooking_area):
            grab(item)
            put_close(item, cooking_area)

behavior relocate_items_to_cooking_area(rice: item, eggs: item, cooking_area: item):
    body:
        move_item_close_to_cooking_area(rice, cooking_area)
        move_item_close_to_cooking_area(eggs, cooking_area)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind eggs: item where:
            is_food_egg(eggs)
        bind cooking_area: item where:
            is_kitchen_counter(cooking_area) or is_stove(cooking_area)
        
        relocate_items_to_cooking_area(rice, eggs, cooking_area)

##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2036)walk_executor(stove_2065)put_executor(food_rice_2036, stove_2065)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(stove_2065)put_executor(food_egg_2020, stove_2065)
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_rice_2036, stove_2065)
Robot find: Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. food_rice_2036 is close stove_2065. stove_2065 is close food_rice_2036. food_rice_2036 is on stove_2065. food_rice_2036 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, stove_2065)
Robot find: Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. food_egg_2020 is close stove_2065. stove_2065 is close food_egg_2020. food_egg_2020 is on stove_2065. food_egg_2020 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_table_107(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_bowl_2071_around_pot_2069(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

behavior find_keyboard_168_around_desk_357(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
def are_items_near_stove():
    # Check if both rice and eggs are close to the stove
    symbol rice_near_stove = exists rice: item : (is_food_rice(rice) and close(rice, stove_2065))
    symbol eggs_near_stove = exists eggs: item : (is_food_egg(eggs) and close(eggs, stove_2065))
    return rice_near_stove and eggs_near_stove

behavior move_to_cooking_area(rice:item, eggs:item, stove:item):
    body:
        if not close(rice, stove):
            grab(rice)
            walk_to(stove)
            put_close(rice, stove)
        if not close(eggs, stove):
            grab(eggs)
            walk_to(stove)
            put_close(eggs, stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind eggs: item where:
            is_food_egg(eggs)
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065

        if not are_items_near_stove():
            move_to_cooking_area(rice, eggs, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior cook_rice_and_egg(rice:item, egg:item, stove:item):
    body:
        if not clean(rice):
            wash(rice)
        put_on(rice, stove)
        # The rice is washed and placed on the stove
        put_on(egg, stove)
        # The egg is placed on the stove

behavior fry_ingredients(stove:item):
    body:
        if empty_stove_top(stove):
            # If the stove is not on, only the rice and egg should be fried
            switch_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove) and clean(stove)
        # Ensure the stove is clean

        cook_rice_and_egg(rice, egg, stove)
        # Cook the rice and egg on the stove
        fry_ingredients(stove)
        # Fry the ingredients on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_cutting_board_2051(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(cd,cutting_board_instance)
        else:
            exp(cd,cutting_board_instance)
    eff:
        unknown[cd]=False
        close[cd,cutting_board_instance]=True
        close[cutting_board_instance,cd]=True
    

behavior find_keyboard_415_around_desk_357(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_pencil_2001_around_desk_357(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_move(obj: item, target: item):
    body:
        if not inhand(obj):
            grab(obj)
        walk_to(target)
        put_close(obj, target)

def cook_rice_and_ingredients(rice: item, egg: item, stove: item):
    symbol rice_is_on_stove=on(rice, stove)
    symbol egg_is_on_stove=on(egg, stove)
    return rice_is_on_stove and egg_is_on_stove

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)
        if not cook_rice_and_ingredients(rice, egg, stove):
            grab_and_move(rice, stove)
            grab_and_move(egg, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_pencil_2001_around_desk_357(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice(rice: item, stove: item):
    body:
        if not on(rice, stove):
            put_on(rice, stove)

behavior fry_ingredients(rice: item, eggs: item, pan: item, stove: item):
    body:
        if not close(pan, stove):
            put_close(pan, stove)
        if not inside(rice, pan):
            put_inside(rice, pan)
        if not inside(eggs, pan):
            put_inside(eggs, pan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice as an item of food_rice
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs as an item of food_egg
        
        bind stove: item where:
            is_stove(stove)
        # Select item as a stove
        
        bind pan: item where:
            is_fryingpan(pan)
        # Select item as a frying pan
        
        cook_rice(rice, stove)
        fry_ingredients(rice, eggs, pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_rice(rice: item, stove: item):
    body:
        if not on(rice, stove):
            put_on(rice, stove)

behavior fry_ingredients(rice: item, eggs: item, pan: item, stove: item):
    body:
        if not close(pan, stove):
            put_close(pan, stove)
        if not inside(rice, pan):
            put_inside(rice, pan)
        if not inside(eggs, pan):
            put_inside(eggs, pan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice as an item of food_rice
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs as an item of food_egg
        
        bind stove: item where:
            is_stove(stove)
        # Select item as a stove
        
        bind pan: item where:
            is_fryingpan(pan)
        # Select item as a frying pan
        
        cook_rice(rice, stove)
        fry_ingredients(rice, eggs, pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. 
##############################
From agent.py
putin_executor(food_rice_2036, fryingpan_2083)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. food_rice_2036 is inside fryingpan_2083. food_rice_2036 is close fryingpan_2083. fryingpan_2083 is close food_rice_2036. food_rice_2036 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the stove_2065. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the stove_2065. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the stove_2065. Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the stove_2065. Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The rice and eggs need to be cooked and fried. Specifically, something indicating the cooking process, like turning on the stove or confirming they have been cooking in the pan, must be present to consider this sub-task complete.
##############################
From agent.py
Human Instruction: The rice and eggs need to be cooked and fried. Specifically, something indicating the cooking process, like turning on the stove or confirming they have been cooking in the pan, must be present to consider this sub-task complete.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_rice_2036 around fridge_289.
Action 5: Grab food_rice_2036.
Action 6: Put food_rice_2036 on floor_202.
Action 7: Grab food_egg_2020.
Action 8: Put food_egg_2020 on floor_202.
Action 9: Grab food_rice_2036.
Action 10: Walk to stove_2065.
Action 11: Put food_rice_2036 on stove_2065.
Action 12: Walk to food_egg_2020.
Action 13: Grab food_egg_2020.
Action 14: Walk to stove_2065.
Action 15: Put food_egg_2020 on stove_2065.
Action 16: Walk to fryingpan_2083.
Action 17: Grab fryingpan_2083.
Action 18: Walk to stove_2065.
Action 19: Put fryingpan_2083 on stove_2065.
Action 20: Grab food_rice_2036.
Action 21: Walk to fryingpan_2083.
Action 22: Put food_rice_2036 into fryingpan_2083.
Action 23: Walk to food_egg_2020.
Action 24: Grab food_egg_2020.
Action 25: Walk to fryingpan_2083.
Action 26: Put food_egg_2020 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cutting_board_2051(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(fork,cutting_board_instance)
        else:
            exp(fork,cutting_board_instance)
    eff:
        unknown[fork]=False
        close[fork,cutting_board_instance]=True
        close[cutting_board_instance,fork]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_rice(food_rice:item, stove:item):
    body:
        if not is_on(stove):
            switch_on(stove)

behavior cook_egg(food_egg:item, fryingpan:item):
    body:
        put_close(food_egg, fryingpan)

behavior fry_rice(ingredients:list, fryingpan:item):
    body:
        foreach ingredient: item:
            if not on(ingredient, fryingpan):
                put_on(ingredient, fryingpan)

behavior __goal__():
    body:
        bind food_rice: item where:
            is_food_rice(food_rice)
        # Select rice as food_rice
        
        bind food_egg: item where:
            is_food_egg(food_egg)
        # Select egg as food_egg
        
        bind stove: item where:
            is_stove(stove)
        # Select stove in the scene
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select fryingpan in the scene

        prepare_rice(food_rice, stove)
        cook_egg(food_egg, fryingpan)
        
        bind ingredients: list where:
            exists o: item : (is_food_rice(o) or is_food_egg(o))
        fry_rice(ingredients, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_sink_231(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(fork,sink_instance)
        else:
            exp(fork,sink_instance)
    eff:
        unknown[fork]=False
        close[fork,sink_instance]=True
        close[sink_instance,fork]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_fried(x:item):
    symbol fried=exists y: item : (is_food_food(y) and on(y, x))
    return fried

behavior fry_rice_with_egg(rice:item, egg:item, fryingpan:item):
    body:
        if not is_fried(fryingpan):
            put_on(rice, fryingpan)
            put_on(egg, fryingpan)

behavior cook_on_stove(rice:item, egg:item, fryingpan:item, stove:item):
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove) # Turn on the stove to cook
        fry_rice_with_egg(rice, egg, fryingpan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        cook_on_stove(rice, egg, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_fried(x:item):
    symbol fried=exists y: item : (is_food_food(y) and on(y, x))
    return fried

behavior fry_rice_with_egg(rice:item, egg:item, fryingpan:item):
    body:
        if not is_fried(fryingpan):
            put_on(rice, fryingpan)
            put_on(egg, fryingpan)

behavior cook_on_stove(rice:item, egg:item, fryingpan:item, stove:item):
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove) # Turn on the stove to cook
        fry_rice_with_egg(rice, egg, fryingpan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        cook_on_stove(rice, egg, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2065)walk_executor(food_rice_2036)grab_executor(food_rice_2036)put_executor(food_rice_2036, fryingpan_2083)walk_executor(food_egg_2020)grab_executor(food_egg_2020)put_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
put_executor(food_rice_2036, fryingpan_2083)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the food_rice_2036. food_rice_2036 is close fryingpan_2083. food_rice_2036 is on fryingpan_2083. food_rice_2036 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
put_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the fryingpan_2083. Robot is close to the food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 is on fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_rice_2036)', 'put_executor(food_rice_2036, floor_202)', 'grab_executor(food_egg_2020)', 'put_executor(food_egg_2020, floor_202)', 'grab_executor(food_rice_2036)', 'walk_executor(stove_2065)', 'put_executor(food_rice_2036, stove_2065)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(stove_2065)', 'put_executor(food_egg_2020, stove_2065)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'grab_executor(food_rice_2036)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_rice_2036, fryingpan_2083)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)', 'switchon_executor(stove_2065)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'put_executor(food_rice_2036, fryingpan_2083)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'put_executor(food_egg_2020, fryingpan_2083)']
Time info:
Time consume: 253 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 10
goal correct times: 0
action_num: 32

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
