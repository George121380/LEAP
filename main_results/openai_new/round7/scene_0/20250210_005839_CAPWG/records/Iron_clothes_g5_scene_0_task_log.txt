From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt and the skirt.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_skirt_2088_around_closetdrawer_377(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_382(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_shirt_and_skirt_in_room(room:item):
    # Function to check if both a shirt and a skirt are in a specified room
    symbol has_shirt_and_skirt=exists o1: item : (is_clothes_shirt(o1) and inside(o1, room)) and exists o2: item : (is_clothes_skirt(o2) and inside(o2, room))
    return has_shirt_and_skirt

behavior __goal__():
    body:
        if exists room: item : is_room(room) and has_shirt_and_skirt_in_room(room):
            # Check if there is a room with both a shirt and a skirt based on the available information
            bind room: item where:
                is_room(room) and has_shirt_and_skirt_in_room(room)
            # Select a room with both a shirt and a skirt in it
            walk_to(room) 
            # Move the character closer to the room with both a shirt and a skirt

        else: 
           # If no room with both a shirt and a skirt is found, initiate exploration to locate them
            foreach room: item:
                if is_room(room) and not visited(room):
                    # Check all unvisited rooms
                    observe(room,"Check if there is a shirt and a skirt in the room")
                    # Observe whether each room has both a shirt and a skirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_skirt_2088_around_closetdrawer_377(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_377(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation

def is_shirt_or_skirt(x:item):
    # Function to check if an item is a shirt or a skirt
    symbol is_shirt_or_skirt= is_clothes_shirt(x) or is_clothes_skirt(x)
    return is_shirt_or_skirt

behavior __goal__():
    body:
        foreach item: item:
            if is_shirt_or_skirt(item) and not visited(item):
                observe(item, "Check if it is the shirt or the skirt needed")

#goal_representation_end

##############################
From agent.py->reset_goal

def is_shirt_or_skirt(x:item):
    # Function to check if an item is a shirt or a skirt
    symbol is_shirt_or_skirt= is_clothes_shirt(x) or is_clothes_skirt(x)
    return is_shirt_or_skirt

behavior __goal__():
    body:
        foreach item: item:
            if is_shirt_or_skirt(item) and not visited(item):
                observe(item, "Check if it is the shirt or the skirt needed")

##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_377)exp(clothes_shirt_2086, closetdrawer_377)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if it is the shirt or the skirt needed)walk_executor(closetdrawer_377)exp(clothes_skirt_2088, closetdrawer_377)walk_executor(clothes_skirt_2088)obs(clothes_skirt_2088, Check if it is the shirt or the skirt needed)
##############################
From agent.py
walk_executor(closetdrawer_377)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
exp(clothes_shirt_2086, closetdrawer_377)
Fail to find clothes_shirt_2086 around closetdrawer_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_377)exp(clothes_shirt_2086, closetdrawer_377)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if it is the shirt or the skirt needed)walk_executor(closetdrawer_377)exp(clothes_skirt_2088, closetdrawer_377)walk_executor(clothes_skirt_2088)obs(clothes_skirt_2088, Check if it is the shirt or the skirt needed)
##############################
From agent.py
walk_executor(closetdrawer_377)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
exp(clothes_shirt_2086, closetdrawer_377)
Fail to find clothes_shirt_2086 around closetdrawer_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_377)exp(clothes_shirt_2086, closetdrawer_377)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if it is the shirt or the skirt needed)walk_executor(closetdrawer_377)exp(clothes_skirt_2088, closetdrawer_377)walk_executor(clothes_skirt_2088)obs(clothes_skirt_2088, Check if it is the shirt or the skirt needed)
##############################
From agent.py
walk_executor(closetdrawer_377)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
exp(clothes_shirt_2086, closetdrawer_377)
Fail to find clothes_shirt_2086 around closetdrawer_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_377)exp(clothes_shirt_2086, closetdrawer_377)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if it is the shirt or the skirt needed)walk_executor(closetdrawer_377)exp(clothes_skirt_2088, closetdrawer_377)walk_executor(clothes_skirt_2088)obs(clothes_skirt_2088, Check if it is the shirt or the skirt needed)
##############################
From agent.py
walk_executor(closetdrawer_377)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
exp(clothes_shirt_2086, closetdrawer_377)
Fail to find clothes_shirt_2086 around closetdrawer_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_377)exp(clothes_shirt_2086, closetdrawer_377)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if it is the shirt or the skirt needed)walk_executor(closetdrawer_377)exp(clothes_skirt_2088, closetdrawer_377)walk_executor(clothes_skirt_2088)obs(clothes_skirt_2088, Check if it is the shirt or the skirt needed)
##############################
From agent.py
walk_executor(closetdrawer_377)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py
exp(clothes_shirt_2086, closetdrawer_377)
Fail to find clothes_shirt_2086 around closetdrawer_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_377)exp(clothes_shirt_2086, closetdrawer_377)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if it is the shirt or the skirt needed)walk_executor(closetdrawer_377)exp(clothes_skirt_2088, closetdrawer_377)walk_executor(clothes_skirt_2088)obs(clothes_skirt_2088, Check if it is the shirt or the skirt needed)
##############################
From agent.py
walk_executor(closetdrawer_377)
Robot find: Robot is close to the dresser_358. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find clothes_shirt_2086 ?
Answer: Navigate to bathroom_1. Inside bathroom_1, locate the basket_for_clothes_2006. The target item, clothes_shirt_2086, is inside this basket_for_clothes_2006.
Re-decompose: None

##############################
From agent.py
Human Instruction: Navigate to bathroom_1. Inside bathroom_1, locate the basket_for_clothes_2006. The target item, clothes_shirt_2086, is inside this basket_for_clothes_2006.

The actions you have taken:
Action 1: Walk to closetdrawer_377.
Action 2: look for clothes_shirt_2086 around closetdrawer_377.
Action 3: Walk to closetdrawer_377.
Action 4: look for clothes_shirt_2086 around closetdrawer_377.
Action 5: Walk to closetdrawer_377.
Action 6: look for clothes_shirt_2086 around closetdrawer_377.
Action 7: Walk to closetdrawer_377.
Action 8: look for clothes_shirt_2086 around closetdrawer_377.
Action 9: Walk to closetdrawer_377.
Action 10: look for clothes_shirt_2086 around closetdrawer_377.
Action 11: Walk to closetdrawer_377.

##############################
From agent.py
exp(clothes_shirt_2086, closetdrawer_377)
Fail to find clothes_shirt_2086 around closetdrawer_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if it is the shirt or the skirt needed)walk_executor(basket_for_clothes_2006)exp(clothes_skirt_2088, basket_for_clothes_2006)walk_executor(clothes_skirt_2088)obs(clothes_skirt_2088, Check if it is the shirt or the skirt needed)
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Robot find: clothes_pants_2085, clothes_shirt_2086, clothes_socks_2087, clothes_skirt_2088, towel_rack_31, towel_rack_33, towel_rack_32, towel_rack_34, mat_22, Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
exp(clothes_shirt_2086, basket_for_clothes_2006)
Find clothes_shirt_2086. 
##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2086, Check if it is the shirt or the skirt needed)obs(clothes_skirt_2088, Check if it is the shirt or the skirt needed)
##############################
From agent.py
obs(clothes_shirt_2086, Check if it is the shirt or the skirt needed)
Get this information:  clothes_shirt_2086 is close to basket_for_clothes_2006. clothes_shirt_2086 is close to character_65. clothes_shirt_2086 is inside bathroom_1. clothes_shirt_2086 is inside basket_for_clothes_2006. clothes_shirt_2086 is DIRTY.
##############################
From agent.py
obs(clothes_skirt_2088, Check if it is the shirt or the skirt needed)
Get this information:  clothes_skirt_2088 is close to basket_for_clothes_2006. clothes_skirt_2088 is close to character_65. clothes_skirt_2088 is inside bathroom_1. clothes_skirt_2088 is inside basket_for_clothes_2006. clothes_skirt_2088 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_inside(basket:item):
    # Function to check if there are clothes inside a specified basket
    symbol has_clothes=exists o: item : (is_clothes(o) and inside(o, basket))
    return has_clothes

def is_shirt_or_skirt(o:item):
    # Function to determine if an item is either shirt or skirt
    return is_clothes_shirt(o) or is_clothes_skirt(o)

behavior prepare_iron():
    body:
        bind iron: item where:
            is_iron(iron)
        # Ensure the iron is plugged and switched on before ironing
        if is_off(iron) or unplugged(iron):
            if unplugged(iron):
                plugin(iron)
            switch_on(iron)

behavior iron_clothes(clothes:item, ironing_board:item):
    body:
        if not on(clothes, ironing_board):
            put_on(clothes, ironing_board)
        # Iron the clothing item on the ironing board
        
behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket]==2006
        # Select the known basket with clothes

        if has_clothes_inside(basket):
            bind clothes_shirt: item where:
                is_clothes_shirt(clothes_shirt) and inside(clothes_shirt, basket)
            bind clothes_skirt: item where:
                is_clothes_skirt(clothes_skirt) and inside(clothes_skirt, basket)
            
            bind ironing_board: item where:
                is_ironing_board(ironing_board)
    
            prepare_iron()
            iron_clothes(clothes_shirt, ironing_board)
            iron_clothes(clothes_skirt, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_clothes_inside(basket:item):
    # Function to check if there are clothes inside a specified basket
    symbol has_clothes=exists o: item : (is_clothes(o) and inside(o, basket))
    return has_clothes

def is_shirt_or_skirt(o:item):
    # Function to determine if an item is either shirt or skirt
    return is_clothes_shirt(o) or is_clothes_skirt(o)

behavior prepare_iron():
    body:
        bind iron: item where:
            is_iron(iron)
        # Ensure the iron is plugged and switched on before ironing
        if is_off(iron) or unplugged(iron):
            if unplugged(iron):
                plugin(iron)
            switch_on(iron)

behavior iron_clothes(clothes:item, ironing_board:item):
    body:
        if not on(clothes, ironing_board):
            put_on(clothes, ironing_board)
        # Iron the clothing item on the ironing board
        
behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket]==2006
        # Select the known basket with clothes

        if has_clothes_inside(basket):
            bind clothes_shirt: item where:
                is_clothes_shirt(clothes_shirt) and inside(clothes_shirt, basket)
            bind clothes_skirt: item where:
                is_clothes_skirt(clothes_skirt) and inside(clothes_skirt, basket)
            
            bind ironing_board: item where:
                is_ironing_board(ironing_board)
    
            prepare_iron()
            iron_clothes(clothes_shirt, ironing_board)
            iron_clothes(clothes_skirt, ironing_board)

##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(ironing_board_2074)put_executor(clothes_skirt_2088, ironing_board_2074)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: iron_2089, Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_shirt_2086. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
walk_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
grab_executor(clothes_skirt_2088)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_skirt_2088 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_skirt_2088, ironing_board_2074)
Robot find: Robot is close to the clothes_skirt_2088. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_skirt_2088. clothes_skirt_2088 is close ironing_board_2074. clothes_skirt_2088 is on ironing_board_2074. clothes_skirt_2088 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to perform the ironing of both the shirt and the skirt. Currently, the clothes are placed on the ironing board but have not been ironed. Ensure the iron is plugged in and turned on before proceeding with the ironing process.
##############################
From agent.py
Human Instruction: You need to perform the ironing of both the shirt and the skirt. Currently, the clothes are placed on the ironing board but have not been ironed. Ensure the iron is plugged in and turned on before proceeding with the ironing process.

The actions you have taken:
Action 1: Walk to closetdrawer_377.
Action 2: look for clothes_shirt_2086 around closetdrawer_377.
Action 3: Walk to closetdrawer_377.
Action 4: look for clothes_shirt_2086 around closetdrawer_377.
Action 5: Walk to closetdrawer_377.
Action 6: look for clothes_shirt_2086 around closetdrawer_377.
Action 7: Walk to closetdrawer_377.
Action 8: look for clothes_shirt_2086 around closetdrawer_377.
Action 9: Walk to closetdrawer_377.
Action 10: look for clothes_shirt_2086 around closetdrawer_377.
Action 11: Walk to closetdrawer_377.
Action 12: look for clothes_shirt_2086 around closetdrawer_377.
Action 13: Walk to basket_for_clothes_2006.
Action 14: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 15: Observe around clothes_shirt_2086 with the question of Check if it is the shirt or the skirt needed.
Action 16: Observe around clothes_skirt_2088 with the question of Check if it is the shirt or the skirt needed.
Action 17: Grab clothes_shirt_2086.
Action 18: Walk to ironing_board_2074.
Action 19: Put clothes_shirt_2086 on ironing_board_2074.
Action 20: Walk to clothes_skirt_2088.
Action 21: Grab clothes_skirt_2088.
Action 22: Walk to ironing_board_2074.
Action 23: Put clothes_skirt_2088 on ironing_board_2074.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_377(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_377(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_iron_is_ready(iron:item):
    body:
        if unplugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)

behavior iron_clothes(iron:item, clothes:item):
    body:
        if close_char(char, clothes):
            grab(iron)
            if inhand(iron):
                put_on(clothes, clothes)
                # Ironing action can be assumed or implied by placing the iron on the clothes
            empty_a_hand()

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and on(clothes_shirt, ironing_board)
        
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and on(clothes_skirt, ironing_board)
        
        bind iron: item where:
            is_iron(iron) and close_char(char, iron)
        
        ensure_iron_is_ready(iron)
        iron_clothes(iron, clothes_shirt)
        iron_clothes(iron, clothes_skirt)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def ensure_iron_ready(iron:item):
    # Function to ensure the iron is ready for use
    body:
        if unplugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)

def iron_clothes(clothes:item, iron:item, ironing_board:item):
    # Function to iron clothes that are on the ironing board
    body:
        if on(clothes, ironing_board):
            ensure_iron_ready(iron)
            # Proceed to iron the clothes that are placed on the ironing board when the iron is ready
            # The action of ironing is inferred and thus does not require explicit coding

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and close_char(char, shirt)
        # Select the shirt close to the character
        
        bind skirt: item where:
            is_clothes_skirt(skirt) and close_char(char, skirt)
        # Select the skirt close to the character
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        bind iron: item where:
            is_iron(iron) and close_char(char, iron)
        # Select the iron close to the character

        iron_clothes(shirt, iron, ironing_board)
        iron_clothes(skirt, iron, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(shirt:item, skirt:item, iron:item):
    body:
        if is_off(iron):
            switch_on(iron)
            # Turn the iron on if its off
        if not plugged(iron):
            plugin(iron)
            # Plug in the iron if its not plugged in

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and on(clothes_shirt, ironing_board)
        # Select the shirt on the ironing board
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and on(clothes_skirt, ironing_board)
        # Select the skirt on the ironing board
        bind iron: item where:
            is_iron(iron) and close_char(char, iron)
        # Select the iron close to you
        iron_clothes(clothes_shirt, clothes_skirt, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_closetdrawer_377(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(oil,closetdrawer_instance)
        else:
            exp(oil,closetdrawer_instance)
    eff:
        unknown[oil]=False
        close[oil,closetdrawer_instance]=True
        close[closetdrawer_instance,oil]=True
    

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_vacuum_cleaner_2070_around_coffee_table_2068(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(vacuum_cleaner,coffee_table_instance)
        else:
            exp(vacuum_cleaner,coffee_table_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,coffee_table_instance]=True
        close[coffee_table_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_iron_for_use(iron:item):
    body:
        if unplugged(iron):
            plugin(iron)  # Plug in the iron
        if is_off(iron):
            switch_on(iron)  # Switch on the iron

behavior iron_cloth(cloth:item, ironing_board:item):
    body:
        if on(cloth, ironing_board):
            walk_to(ironing_board)  # Ensuring proximity to the ironing board

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        
        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board)

        bind iron: item where:
            is_iron(iron)
        
        prepare_iron_for_use(iron)
        
        iron_cloth(shirt, ironing_board)
        
        iron_cloth(skirt, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior prepare_iron_for_use(iron:item):
    body:
        if unplugged(iron):
            plugin(iron)  # Plug in the iron
        if is_off(iron):
            switch_on(iron)  # Switch on the iron

behavior iron_cloth(cloth:item, ironing_board:item):
    body:
        if on(cloth, ironing_board):
            walk_to(ironing_board)  # Ensuring proximity to the ironing board

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        
        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board)

        bind iron: item where:
            is_iron(iron)
        
        prepare_iron_for_use(iron)
        
        iron_cloth(shirt, ironing_board)
        
        iron_cloth(skirt, ironing_board)

##############################
From agent.py-> find a plan in act()
walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)walk_executor(ironing_board_2074)walk_executor(ironing_board_2074)
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py
plugin_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. iron_2089 is turned on. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the ironing_board_2074. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the ironing_board_2074. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to perform the actual ironing of both the shirt and the skirt, which are already on the ironing board. The iron is plugged in and turned on, so proceed with the ironing process.
##############################
From agent.py
Human Instruction: You need to perform the actual ironing of both the shirt and the skirt, which are already on the ironing board. The iron is plugged in and turned on, so proceed with the ironing process.

The actions you have taken:
Action 1: Walk to closetdrawer_377.
Action 2: look for clothes_shirt_2086 around closetdrawer_377.
Action 3: Walk to closetdrawer_377.
Action 4: look for clothes_shirt_2086 around closetdrawer_377.
Action 5: Walk to closetdrawer_377.
Action 6: look for clothes_shirt_2086 around closetdrawer_377.
Action 7: Walk to closetdrawer_377.
Action 8: look for clothes_shirt_2086 around closetdrawer_377.
Action 9: Walk to closetdrawer_377.
Action 10: look for clothes_shirt_2086 around closetdrawer_377.
Action 11: Walk to closetdrawer_377.
Action 12: look for clothes_shirt_2086 around closetdrawer_377.
Action 13: Walk to basket_for_clothes_2006.
Action 14: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 15: Observe around clothes_shirt_2086 with the question of Check if it is the shirt or the skirt needed.
Action 16: Observe around clothes_skirt_2088 with the question of Check if it is the shirt or the skirt needed.
Action 17: Grab clothes_shirt_2086.
Action 18: Walk to ironing_board_2074.
Action 19: Put clothes_shirt_2086 on ironing_board_2074.
Action 20: Walk to clothes_skirt_2088.
Action 21: Grab clothes_skirt_2088.
Action 22: Walk to ironing_board_2074.
Action 23: Put clothes_skirt_2088 on ironing_board_2074.
Action 24: Walk to iron_2089.
Action 25: Plug in iron_2089.
Action 26: Switch on iron_2089.
Action 27: Walk to ironing_board_2074.
Action 28: Walk to ironing_board_2074.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_377(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_377(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_377(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_377(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_377(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_clothes_gloves_2046_around_closetdrawer_377(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(iron:item, clothes:item):
    body:
        if is_on(iron) and not inhand(clothes):
            grab(clothes)
        if is_on(iron) and inhand(clothes):
            put_on(clothes, iron)
            # Assume ironing is done when clothes and iron are close or on each other

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed
        
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt to be ironed

        bind iron: item where:
            is_iron(iron)
        # Select the iron for ironing
        
        if not is_on(iron):
            switch_on(iron)
        
        walk_to(iron)
        iron_clothes(iron, shirt)
        empty_a_hand()
        iron_clothes(iron, skirt)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_377(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_377(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_377(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt_and_skirt(shirt:item, skirt:item):
    body:
        walk_to(shirt)
        grab(shirt)
        walk_to(skirt)
        grab(skirt)
        walk_to(iron)
        walk_to(ironing_board)
        # Assumes the ironing process takes place when walking to the iron and ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Select the shirt on the ironing board
        
        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board)
        # Select the skirt on the ironing board

        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the iron that is plugged in and turned on

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_shirt_and_skirt(shirt, skirt)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_377(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_377(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(iron:item, clothes:item):
    body:
        if not clean(clothes):
            if is_on(iron):
                put_on(clothes, iron)
                wipe(clothes)
                empty_a_hand()

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and surfaces(ironing_board)
        # Select the ironing board
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and on(clothes_shirt, ironing_board)
        # Select shirt on the ironing board
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and on(clothes_skirt, ironing_board)
        # Select skirt on the ironing board
        bind iron: item where:
            is_iron(iron) and is_on(iron) and plugged(iron)
        # Select pluggedin and switchedon iron
        iron_clothes(iron, clothes_shirt)
        iron_clothes(iron, clothes_skirt)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_shirt_or_skirt(item: item):
    # Function to check if an item is a shirt or skirt
    return is_clothes_shirt(item) or is_clothes_skirt(item)

def can_iron_now():
    # Check all conditions to see if you can start ironing
    symbol shirt_and_skirt_on_board = exists o: item : (is_shirt_or_skirt(o) and on(o, ironing_board))
    symbol iron_ready = is_on(iron) and plugged(iron)
    return shirt_and_skirt_on_board and iron_ready

behavior iron_clothes(item: item):
    # Behavior to iron the clothes
    body:
        # In this scenario, since the task is ironing, actions like grab or similar interaction for holding are not required
        if on(item, ironing_board) and can_iron_now():
            touch(item)  # Simulate the action of ironing the item

behavior __goal__():
    body:
        if can_iron_now():
            bind ironing_board: item where:
                is_ironing_board(ironing_board)
            # Bind items on ironing board as shirt or skirt
            foreach item: item:
                if is_shirt_or_skirt(item) and on(item, ironing_board):
                    iron_clothes(item)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(clothing:item, iron:item):
    body:
        if is_on(iron) and not plugged(iron):
            plugin(iron)
        if not is_on(iron):
            switch_on(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        walk_to(ironing_board)
        # Approach the ironing board

        if not on(shirt, ironing_board):
            put_on(shirt, ironing_board)
        if not on(skirt, ironing_board):
            put_on(skirt, ironing_board)

        walk_to(iron)
        # Approach the iron

        iron_clothes(shirt, iron)
        iron_clothes(skirt, iron)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_clothes(clothing:item, iron:item):
    body:
        if is_on(iron) and not plugged(iron):
            plugin(iron)
        if not is_on(iron):
            switch_on(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        walk_to(ironing_board)
        # Approach the ironing board

        if not on(shirt, ironing_board):
            put_on(shirt, ironing_board)
        if not on(skirt, ironing_board):
            put_on(skirt, ironing_board)

        walk_to(iron)
        # Approach the iron

        iron_clothes(shirt, iron)
        iron_clothes(skirt, iron)

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)walk_executor(iron_2089)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the ironing_board_2074. 
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to perform the actual ironing of the shirt and the skirt, which have already been placed on the ironing board. The iron is plugged in and turned on, but the ironing process itself has not been completed.
##############################
Task Summary:
Task Goal:
Iron the shirt and the skirt.
Action History:
['walk_executor(closetdrawer_377)', 'walk_executor(closetdrawer_377)', 'walk_executor(closetdrawer_377)', 'walk_executor(closetdrawer_377)', 'walk_executor(closetdrawer_377)', 'walk_executor(closetdrawer_377)', 'walk_executor(basket_for_clothes_2006)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'walk_executor(clothes_skirt_2088)', 'grab_executor(clothes_skirt_2088)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_skirt_2088, ironing_board_2074)', 'walk_executor(iron_2089)', 'plugin_executor(iron_2089)', 'switchon_executor(iron_2089)', 'walk_executor(ironing_board_2074)', 'walk_executor(ironing_board_2074)', 'walk_executor(ironing_board_2074)', 'walk_executor(iron_2089)']
Time info:
Time consume: 291 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 12
goal correct times: 0
action_num: 21

Task complete rate:
Keystate: k1 - Requires: 3 steps
Keystate: k2 - Requires: 3 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
