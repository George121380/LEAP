From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

def coffee_maker_ready(coffee_maker:item):
    symbol ready=plugged(coffee_maker) and is_off(coffee_maker)
    return ready

behavior plug_in_and_turn_on(obj:item):
    body:
        if unplugged(obj):
            plugin(obj)
        if is_off(obj):
            switch_on(obj)

behavior prepare_coffee_with_maker(coffee_maker:item, cup:item, coffee_filter:item):
    body:
        if is_off(coffee_maker):
            plug_in_and_turn_on(coffee_maker)
        if not has_water(coffee_maker):
            get_water(coffee_maker)
        if not has_a_free_hand(char):
            empty_a_hand()
        if not inside(coffee_filter, coffee_maker):
            grab(coffee_filter)
            put_inside(coffee_filter, coffee_maker)
            empty_a_hand()
        if not on(cup, coffee_maker):
            grab(cup)
            put_on(cup, coffee_maker)
            empty_a_hand()

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        if coffee_maker_ready(coffee_maker):
            prepare_coffee_with_maker(coffee_maker, cup, coffee_filter)
        else:
            plug_in_and_turn_on(coffee_maker)
            prepare_coffee_with_maker(coffee_maker, cup, coffee_filter)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker: item):
    body:
        if has_plug(coffee_maker) and unplugged(coffee_maker):
            plugin(coffee_maker)

behavior add_water_to_coffee_maker(coffee_maker: item):
    body:
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior switch_on_coffee_maker(coffee_maker: item):
    body:
        if has_switch(coffee_maker) and is_off(coffee_maker):
            switch_on(coffee_maker)

behavior brew_coffee(coffee_maker: item):
    body:
        plug_in_coffee_maker(coffee_maker)
        add_water_to_coffee_maker(coffee_maker)
        switch_on_coffee_maker(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        brew_coffee(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior plug_in_coffee_maker(coffee_maker: item):
    body:
        if has_plug(coffee_maker) and unplugged(coffee_maker):
            plugin(coffee_maker)

behavior add_water_to_coffee_maker(coffee_maker: item):
    body:
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior switch_on_coffee_maker(coffee_maker: item):
    body:
        if has_switch(coffee_maker) and is_off(coffee_maker):
            switch_on(coffee_maker)

behavior brew_coffee(coffee_maker: item):
    body:
        plug_in_coffee_maker(coffee_maker)
        add_water_to_coffee_maker(coffee_maker)
        switch_on_coffee_maker(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        brew_coffee(coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(faucet_232)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add water to the coffee maker and ensure it's plugged in to complete the task of making a cup of coffee.
##############################
From agent.py
Human Instruction: You need to add water to the coffee maker and ensure it's plugged in to complete the task of making a cup of coffee.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_water(coffee_maker:item, faucet:item):
    body:
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior ensure_plugged_in(coffee_maker:item):
    body:
        if unplugged(coffee_maker):
            plugin(coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker:item where:
            is_coffe_maker(coffee_maker)

        bind faucet:item where:
            is_faucet(faucet)

        fill_water(coffee_maker, faucet)
        ensure_plugged_in(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

behavior water_the_coffee_maker(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior ensure_plugged_in(coffee_maker:item):
    body:
        if not plugged(coffee_maker):
            plugin(coffee_maker)

behavior make_coffee(coffee_maker:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Ensure the coffee maker has water
        water_the_coffee_maker(coffee_maker)
        # Ensure the coffee maker is plugged in
        ensure_plugged_in(coffee_maker)
        # Make coffee by turning on the coffee maker
        make_coffee(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_faucet(faucet:item):
    # Check if the item is a faucet
    return is_faucet(faucet)

def is_coffee_maker(coffee_maker:item):
    # Check if the item is a coffee maker
    return is_coffe_maker(coffee_maker)

def is_water_added(coffee_maker:item):
    # Ensure the coffee maker has water
    symbol water_added=has_water(coffee_maker)
    return water_added

def is_plugged_in(coffee_maker:item):
    # Ensure the coffee maker is plugged in
    symbol plugged_in=plugged(coffee_maker)
    return plugged_in

behavior make_coffee(coffee_maker:item):
    body:
        if not is_water_added(coffee_maker):
            bind faucet: item where:
                is_faucet(faucet)
            walk_to(faucet)
            switch_on(faucet)
            switch_off(faucet)
            walk_to(coffee_maker)

        if not is_plugged_in(coffee_maker):
            plugin(coffee_maker)

        if not is_on(coffee_maker):
            switch_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffee_maker(coffee_maker)
        make_coffee(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_coffee_maker(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior ensure_coffee_maker_plugged_in(coffee_maker:item):
    body:
        if not plugged(coffee_maker):
            plugin(coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        add_water_to_coffee_maker(coffee_maker)
        ensure_coffee_maker_plugged_in(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water(coffee_maker: item):
    body:
        if not has_water(coffee_maker):
            get_water(coffee_maker)
            # Add water to the coffee maker

behavior ensure_plugged_in(coffee_maker: item):
    body:
        if unplugged(coffee_maker):
            plugin(coffee_maker)
            # Ensure the coffee maker is plugged in

behavior make_coffee(coffee_maker: item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)
            # Turn on the coffee maker to make coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind a coffee maker instance

        ensure_plugged_in(coffee_maker)
        add_water(coffee_maker)
        make_coffee(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_and_plugged(coffee_maker:item):
    # Function to check if the coffee maker has water and is plugged in
    symbol ready_for_use=has_water(coffee_maker) and plugged(coffee_maker)
    return ready_for_use

behavior prepare_coffee(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            walk_to(faucet_232)
            switch_on(faucet_232)
            get_water(coffee_maker)
            switch_off(faucet_232)
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        if not has_water_and_plugged(coffee_maker):
            prepare_coffee(coffee_maker)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker." ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_coffeemaker(coffeemaker:item):
    symbol water_present=exists w: item : (has_water(coffeemaker))
    return water_present

def is_plugged_in(coffeemaker:item):
    symbol plugged_in=plugged(coffeemaker)
    return plugged_in

def has_coffee_cup(coffeemaker:item):
    symbol cup_present=exists c: item : (is_cup(c) and on(c, coffeemaker))
    return cup_present

behavior prepare_coffee(coffeemaker:item):
    body:
        if is_off(coffeemaker) and is_plugged_in(coffeemaker) and has_water_in_coffeemaker(coffeemaker) and has_coffee_cup(coffeemaker):
            switch_on(coffeemaker)

behavior __goal__():
    body:
        bind coffeemaker: item where:
            is_coffe_maker(coffeemaker)
        
        if not has_water_in_coffeemaker(coffeemaker):
            get_water(coffeemaker)

        if not is_plugged_in(coffeemaker):
            plugin(coffeemaker)
        
        if not has_coffee_cup(coffeemaker):
            bind cup: item where:
                is_cup(cup)
            put_on(cup, coffeemaker)
        
        prepare_coffee(coffeemaker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_water(coffee_maker: item):
    body:
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior prepare_coffee(coffee_maker: item, cup: item):
    body:
        if not is_on(coffee_maker):
            switch_on(coffee_maker)
        if unplugged(coffee_maker):
            plugin(coffee_maker)
        put_close(cup, coffee_maker)
        if not is_on(cup):
            observe(coffee_maker, "Ensure the coffee maker starts brewing")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        fill_water(coffee_maker)
        prepare_coffee(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_water(coffee_maker: item):
    body:
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior prepare_coffee(coffee_maker: item, cup: item):
    body:
        if not is_on(coffee_maker):
            switch_on(coffee_maker)
        if unplugged(coffee_maker):
            plugin(coffee_maker)
        put_close(cup, coffee_maker)
        if not is_on(cup):
            observe(coffee_maker, "Ensure the coffee maker starts brewing")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        fill_water(coffee_maker)
        prepare_coffee(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Ensure the coffee maker starts brewing)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. 
##############################
From agent.py
put_executor(cup_2063, coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is close cup_2063. cup_2063 is close coffe_maker_290. cup_2063 is on coffe_maker_290. cup_2063 released by right hand. 
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Ensure the coffee maker starts brewing)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is close to cup_2063. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. cup_2063 is on coffe_maker_290. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is OFF. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure water is added to the coffee maker, as the task of filling the coffee maker with water is not completed. After adding water, the robot should make sure the coffee maker is properly started for brewing.
##############################
From agent.py
Human Instruction: The robot needs to ensure water is added to the coffee maker, as the task of filling the coffee maker with water is not completed. After adding water, the robot should make sure the coffee maker is properly started for brewing.

Human Guidance: Put a suitably sized cup into the coffee machine and start it.
The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Walk to cup_2063.
Action 7: Grab cup_2063.
Action 8: Walk to coffe_maker_290.
Action 9: Put cup_2063 on coffe_maker_290.
Action 10: Switch off coffe_maker_290.
Action 11: Open coffe_maker_290.
Action 12: Observe around coffe_maker_290 with the question of Ensure the coffee maker starts brewing.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_desk_357(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(coffee_filter,desk_instance)
        else:
            exp(coffee_filter,desk_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,desk_instance]=True
        close[desk_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_coffee_maker(coffee_maker: item, faucet: item):
    body:
        if not has_water(coffee_maker):
            switch_on(faucet)
            get_water(coffee_maker)
            switch_off(faucet)

behavior start_brewing(coffee_maker: item, cup: item):
    body:
        if open(coffee_maker):
            closes(coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)
        if not on(cup, coffee_maker):
            put_on(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind faucet: item where:
            is_faucet(faucet)
        bind cup: item where:
            is_cup(cup)

        add_water_to_coffee_maker(coffee_maker, faucet)
        start_brewing(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_to_coffee_maker(coffee_maker: item, faucet: item):
    body:
        if not has_water(coffee_maker):
            switch_on(faucet)
            get_water(coffee_maker)
            switch_off(faucet)

behavior start_brewing(coffee_maker: item, cup: item):
    body:
        if open(coffee_maker):
            closes(coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)
        if not on(cup, coffee_maker):
            put_on(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind faucet: item where:
            is_faucet(faucet)
        bind cup: item where:
            is_cup(cup)

        add_water_to_coffee_maker(coffee_maker, faucet)
        start_brewing(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The coffee maker needs to be filled with water. Make sure to get water from the faucet and add it to the coffee maker before closing and starting it.
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(coffe_maker_290)', 'put_executor(cup_2063, coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)']
Time info:
Time consume: 152 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 11
goal correct times: 0
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
