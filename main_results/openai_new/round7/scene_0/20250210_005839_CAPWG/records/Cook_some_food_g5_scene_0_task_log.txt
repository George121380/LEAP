From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Fry the banana slices in oil until golden brown.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_banana(banana: item):
    body:
        if not clean(banana):
            wipe(banana)
        grab(banana)
        # Simulate peeling process
        symbol is_peeling_completed = True # Assuming action is successful for simplicity
        if is_peeling_completed:
            empty_a_hand()
            # After peeling, a hand must be freed

behavior slice_banana(banana: item, knife: item):
    body:
        grab(knife)
        grab(banana)
        cuts(banana)
        empty_a_hand()
        empty_a_hand()
        # Both items are released after slicing

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        bind knife: item where:
            is_knife(knife)
        peel_banana(banana)
        slice_banana(banana, knife)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_food_noodles_2029_around_fridge_289(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_noodles,fridge_instance)
        else:
            exp(food_noodles,fridge_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,fridge_instance]=True
        close[fridge_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_banana(banana:item):
    body:
        if not cut(banana):
            cuts(banana) # Assume cutting removes the peel

behavior slice_banana(banana:item, cutting_board:item, knife:item):
    body:
        if not cut(banana):
            put_on(banana, cutting_board)
            grab(knife)
            cuts(banana)
            empty_a_hand()

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        peel_banana(banana)
        slice_banana(banana, cutting_board, knife)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_banana(banana:item):
    body:
        if not cut(banana):
            cuts(banana) # Assume cutting removes the peel

behavior slice_banana(banana:item, cutting_board:item, knife:item):
    body:
        if not cut(banana):
            put_on(banana, cutting_board)
            grab(knife)
            cuts(banana)
            empty_a_hand()

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        peel_banana(banana)
        slice_banana(banana, cutting_board, knife)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_banana_2011, fridge_289)
Find food_banana_2011. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_banana_2011 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_banana_2011. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by right hand. 
##############################
From agent.py
exp(knife_2050, cutting_board_2051)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
cut_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_table_355(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cd,table_instance)
        else:
            exp(cd,table_instance)
    eff:
        unknown[cd]=False
        close[cd,table_instance]=True
        close[table_instance,cd]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil(oil:item, stove:item):
    body:
        if not is_on(stove):
            switch_on(stove) # Turn on the stove to heat the oil

behavior prepare_pan(frying_pan:item, stove:item):
    body:
        if not on(frying_pan, stove):
            put_on(frying_pan, stove) # Place the frying pan on the stove

behavior fry_banana(banana_slices:item, frying_pan:item, stove:item):
    body:
        if cut(banana_slices) and on(frying_pan, stove):
             Simulate the frying action
             Normally, real sensorsactuators would detect the state change to golden brown

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the cut banana slices

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        prepare_pan(frying_pan, stove)
        heat_oil(oil, stove)
        fry_banana(banana_slices, frying_pan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_ironing_board_2074(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(cd,ironing_board_instance)
        else:
            exp(cd,ironing_board_instance)
    eff:
        unknown[cd]=False
        close[cd,ironing_board_instance]=True
        close[ironing_board_instance,cd]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior prep_frying_pan(frying_pan:item, stove:item):
    body:
        if not on(frying_pan, stove):
            put_on(frying_pan, stove)

behavior heat_oil(oil:item, stove:item):
    body:
        if is_off(stove):
            switch_on(stove)
        if not has_water(oil):
            put_inside(oil, stove) 

behavior fry_banana(banana_slices:item, frying_pan:item, stove:item):
    body:
        if is_food(banana_slices) and on(frying_pan, stove):
            put_on(banana_slices, frying_pan)
            watch(frying_pan) # Wait until the banana slices turn golden brown

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind oil: item where:
            is_oil(oil)
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        prep_frying_pan(frying_pan, stove)
        heat_oil(oil, stove)
        fry_banana(banana_slices, frying_pan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_bowl_2071_around_oil_2079(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2079
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(bowl,oil_instance)
        else:
            exp(bowl,oil_instance)
    eff:
        unknown[bowl]=False
        close[bowl,oil_instance]=True
        close[oil_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_oil(oil:item):
    body:
        if not inhand(oil):
            grab(oil) # Grab the oil if not already in hand

behavior pour_oil_and_fry(fryingpan:item, banana:item, oil:item):
    body:
        if not inhand(oil):
            grab_oil(oil)
        if is_oil(oil) and not inside(oil, fryingpan):
            put_on(oil, fryingpan) # Pour oil into the frying pan
        if cut(banana) and is_fryingpan(fryingpan):
            put_on(banana, fryingpan) # Place banana slices in the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        bind oil: item where:
            is_oil(oil)
        walk_to(fryingpan)
        pour_oil_and_fry(fryingpan, banana, oil)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_oil(oil:item):
    body:
        if not inhand(oil):
            grab(oil) # Grab the oil if not already in hand

behavior pour_oil_and_fry(fryingpan:item, banana:item, oil:item):
    body:
        if not inhand(oil):
            grab_oil(oil)
        if is_oil(oil) and not inside(oil, fryingpan):
            put_on(oil, fryingpan) # Pour oil into the frying pan
        if cut(banana) and is_fryingpan(fryingpan):
            put_on(banana, fryingpan) # Place banana slices in the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        bind oil: item where:
            is_oil(oil)
        walk_to(fryingpan)
        pour_oil_and_fry(fryingpan, banana, oil)

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)put_executor(oil_2079, fryingpan_2083)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)put_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
put_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is on fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_banana_2011 is close fryingpan_2083. fryingpan_2083 is close food_banana_2011. food_banana_2011 is on fryingpan_2083. food_banana_2011 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to turn on heat for the frying pan to fry the banana slices in oil until they are golden brown.
##############################
From agent.py
Human Instruction: You need to turn on heat for the frying pan to fry the banana slices in oil until they are golden brown.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_banana_2011 around fridge_289.
Action 5: Grab food_banana_2011.
Action 6: Walk to cutting_board_2051.
Action 7: Put food_banana_2011 on cutting_board_2051.
Action 8: look for knife_2050 around cutting_board_2051.
Action 9: Walk to knife_2050.
Action 10: Grab knife_2050.
Action 11: Walk to food_banana_2011.
Action 12: Cut food_banana_2011.
Action 13: Walk to fryingpan_2083.
Action 14: Walk to oil_2079.
Action 15: Grab oil_2079.
Action 16: Walk to fryingpan_2083.
Action 17: Put oil_2079 on fryingpan_2083.
Action 18: Walk to food_banana_2011.
Action 19: Grab food_banana_2011.
Action 20: Walk to fryingpan_2083.
Action 21: Put food_banana_2011 on fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_toaster_292(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(cd,toaster_instance)
        else:
            exp(cd,toaster_instance)
    eff:
        unknown[cd]=False
        close[cd,toaster_instance]=True
        close[toaster_instance,cd]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana(banana:item, fryingpan:item):
    body:
        if not cut(banana):
            cuts(banana)
        if not on(banana, fryingpan):
            put_on(banana, fryingpan)
        switch_on(fryingpan)
        observe(fryingpan, "Check if banana slices are golden brown")

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        fry_banana(banana, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_ironing_board_2074(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(cd,ironing_board_instance)
        else:
            exp(cd,ironing_board_instance)
    eff:
        unknown[cd]=False
        close[cd,ironing_board_instance]=True
        close[ironing_board_instance,cd]=True
    

#exp_behavior_end

#goal_representation
 
def is_frying_pan_active(frying_pan: item):
    # Function to check if the frying pan is on and ready for frying
    symbol frying_ready = is_on(frying_pan)
    return frying_ready

behavior fry_banana(banana: item, frying_pan: item):
    body:
        if not is_frying_pan_active(frying_pan):
            switch_on(frying_pan) # Turn on the frying pan to prepare for frying
        put_on(banana, frying_pan) # Place the banana slices in the frying pan
        # Additional action or condition could be added to complete the subtask
        # ie to check if the banana slices are fried to golden brown

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select cut banana
        fry_banana(banana, frying_pan)
        # Fry the banana slices in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_closetdrawer_154(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cd,closetdrawer_instance)
        else:
            exp(cd,closetdrawer_instance)
    eff:
        unknown[cd]=False
        close[cd,closetdrawer_instance]=True
        close[closetdrawer_instance,cd]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil_in_fryingpan(fryingpan:item, stove:item):
    body:
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove
        if not is_on(fryingpan):
            walk_to(fryingpan)

behavior fry_banana(fryingpan:item, food_banana:item):
    body:
        if not on(food_banana, fryingpan):
            put_on(food_banana, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind food_banana: item where:
            is_food_banana(food_banana)
        walk_to(stove)
        heat_oil_in_fryingpan(fryingpan, stove)
        fry_banana(fryingpan, food_banana)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_oil_in_fryingpan(fryingpan:item, stove:item):
    body:
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove
        if not is_on(fryingpan):
            walk_to(fryingpan)

behavior fry_banana(fryingpan:item, food_banana:item):
    body:
        if not on(food_banana, fryingpan):
            put_on(food_banana, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind food_banana: item where:
            is_food_banana(food_banana)
        walk_to(stove)
        heat_oil_in_fryingpan(fryingpan, stove)
        fry_banana(fryingpan, food_banana)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fryingpan_2083)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_banana_2011)', 'cut_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'put_executor(oil_2079, fryingpan_2083)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'put_executor(food_banana_2011, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fryingpan_2083)']
Time info:
Time consume: 137 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 8
goal correct times: 0
action_num: 22

Task complete rate:
Keystate: k1 - Requires: 9 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
