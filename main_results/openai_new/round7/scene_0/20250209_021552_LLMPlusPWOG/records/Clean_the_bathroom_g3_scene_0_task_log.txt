From agent.py
Reset goals: The sub-goals are: 
['Wipe the toilet with toilet paper. Then throw it into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation

behavior wipe_toilet(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        wipe(toilet)
        achieve dirty(toilet_paper)

behavior throw_in_toilet(toilet_paper:item, toilet:item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        bind toilet: item where:
            is_toilet(toilet)
        wipe_toilet(toilet, toilet_paper)
        throw_in_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation

behavior wipe_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once clean(toilet)
        # Wipe the toilet with the toilet paper

behavior throw_toilet_paper_in_toilet(toilet_paper: item, toilet: item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet(toilet, toilet_paper)
        throw_toilet_paper_in_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior wipe_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once clean(toilet)
        # Wipe the toilet with the toilet paper

behavior throw_toilet_paper_in_toilet(toilet_paper: item, toilet: item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet(toilet, toilet_paper)
        throw_toilet_paper_in_toilet(toilet_paper, toilet)

##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_40)open_executor(bathroom_cabinet_40)exp(toilet_paper_2090, bathroom_cabinet_40)walk_executor(toilet_37)open_executor(toilet_37)walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(bathroom_cabinet_40)
Robot find: towel_rack_31, Robot is close to the bathroom_cabinet_40. 
##############################
From agent.py
open_executor(bathroom_cabinet_40)
Robot find: Robot is close to the bathroom_cabinet_40. bathroom_cabinet_40 is opened. 
##############################
From agent.py
exp(toilet_paper_2090, bathroom_cabinet_40)
Fail to find toilet_paper_2090 around bathroom_cabinet_40. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_counter_41)exp(toilet_paper_2090, bathroom_counter_41)walk_executor(toilet_37)open_executor(toilet_37)walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(bathroom_counter_41)
Robot find: towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. 
##############################
From agent.py
exp(toilet_paper_2090, bathroom_counter_41)
Fail to find toilet_paper_2090 around bathroom_counter_41. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(toilet_paper_2090, sink_42)walk_executor(toilet_37)open_executor(toilet_37)walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, soap_2053, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
exp(toilet_paper_2090, sink_42)
Fail to find toilet_paper_2090 around sink_42. 
##############################
From agent.py-> find a plan in act()
walk_executor(shower_36)exp(toilet_paper_2090, shower_36)walk_executor(toilet_37)open_executor(toilet_37)walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(shower_36)
Robot find: Robot is close to the shower_36. 
##############################
From agent.py
exp(toilet_paper_2090, shower_36)
Fail to find toilet_paper_2090 around shower_36. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_37)open_executor(toilet_37)exp(toilet_paper_2090, toilet_37)walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(toilet_37)
Robot find: toilet_paper_2090, Robot is close to the toilet_37. 
##############################
From agent.py
open_executor(toilet_37)
Robot find: Robot is close to the toilet_37. toilet_37 is opened. 
##############################
From agent.py
exp(toilet_paper_2090, toilet_37)
Find toilet_paper_2090. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. 
##############################
From agent.py
grab_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. Grabbing toilet_paper_2090 by right hand. 
##############################
From agent.py
walk_executor(toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. 
##############################
From agent.py
putin_executor(toilet_paper_2090, toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. toilet_paper_2090 is inside toilet_37. toilet_paper_2090 is close toilet_37. toilet_paper_2090 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to wipe the toilet with the toilet paper before throwing it into the toilet. Currently, the robot has only thrown the toilet paper into the toilet.
##############################
From agent.py
Human Instruction: The robot needs to wipe the toilet with the toilet paper before throwing it into the toilet. Currently, the robot has only thrown the toilet paper into the toilet.

The actions you have taken:
Action 1: Walk to bathroom_cabinet_40.
Action 2: Open bathroom_cabinet_40.
Action 3: look for toilet_paper_2090 around bathroom_cabinet_40.
Action 4: Walk to bathroom_counter_41.
Action 5: look for toilet_paper_2090 around bathroom_counter_41.
Action 6: Walk to sink_42.
Action 7: look for toilet_paper_2090 around sink_42.
Action 8: Walk to shower_36.
Action 9: look for toilet_paper_2090 around shower_36.
Action 10: Walk to toilet_37.
Action 11: Open toilet_37.
Action 12: look for toilet_paper_2090 around toilet_37.
Action 13: Walk to toilet_paper_2090.
Action 14: Grab toilet_paper_2090.
Action 15: Walk to toilet_37.
Action 16: Put toilet_paper_2090 into toilet_37.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_napkin_2005_around_towel_rack_31(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(napkin,towel_rack_instance)
        else:
            exp(napkin,towel_rack_instance)
    eff:
        unknown[napkin]=False
        close[napkin,towel_rack_instance]=True
        close[towel_rack_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        wipe(toilet)
        # Wipe the toilet using the toilet paper

behavior discard_toilet_paper(toilet_paper:item, toilet:item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Discard the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select the toilet paper with ID 2090

        wipe_toilet(toilet, toilet_paper)
        # Perform the wipe action with the toilet paper on the toilet

        discard_toilet_paper(toilet_paper, toilet)
        # Dispose of the toilet paper in the toilet

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wipe_toilet(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        wipe(toilet)
        # Wipe the toilet using the toilet paper

behavior discard_toilet_paper(toilet_paper:item, toilet:item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Discard the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select the toilet paper with ID 2090

        wipe_toilet(toilet, toilet_paper)
        # Perform the wipe action with the toilet paper on the toilet

        discard_toilet_paper(toilet_paper, toilet)
        # Dispose of the toilet paper in the toilet

##############################
From agent.py-> find a plan in act()
grab_executor(toilet_paper_2090)wipe_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
grab_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. Grabbing toilet_paper_2090 by right hand. 
##############################
From agent.py
wipe_executor(toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. 
##############################
From agent.py
putin_executor(toilet_paper_2090, toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. toilet_paper_2090 is inside toilet_37. toilet_paper_2090 is close toilet_37. toilet_paper_2090 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wipe the toilet with toilet paper. Then throw it into the toilet.
Action History:
['walk_executor(bathroom_cabinet_40)', 'open_executor(bathroom_cabinet_40)', 'walk_executor(bathroom_counter_41)', 'walk_executor(sink_42)', 'walk_executor(shower_36)', 'walk_executor(toilet_37)', 'open_executor(toilet_37)', 'walk_executor(toilet_paper_2090)', 'grab_executor(toilet_paper_2090)', 'walk_executor(toilet_37)', 'putin_executor(toilet_paper_2090, toilet_37)', 'grab_executor(toilet_paper_2090)', 'wipe_executor(toilet_37)', 'putin_executor(toilet_paper_2090, toilet_37)']
Time info:
Time consume: 88 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 3
goal correct times: 0
action_num: 14

Task complete rate:
1
Scene_id: 0
##############################
