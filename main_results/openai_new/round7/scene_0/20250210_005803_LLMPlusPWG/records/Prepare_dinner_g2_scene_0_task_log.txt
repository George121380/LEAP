From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_oven_295(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_chicken,oven_instance)
        else:
            exp(food_chicken,oven_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,oven_instance]=True
        close[oven_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_baking_tray(chicken:item, onion:item, tray:item):
    body:
        achieve_once on(chicken, tray)
        achieve_once on(onion, tray)
        # Place chicken and onion on the baking tray

behavior preheat_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Preheat the oven

behavior put_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the baking tray inside the oven

behavior close_oven_door(oven:item):
    body:
        achieve_once closed(oven)
        # Close the oven door

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken item
        
        bind onion: item where:
            is_food_onion(onion)
        # Select onion item
        
        bind tray: item where:
            is_tray(tray)
        # Select baking tray
        
        bind oven: item where:
            is_oven(oven)
        # Select oven

        place_on_baking_tray(chicken, onion, tray)
        preheat_oven(oven)
        put_tray_in_oven(tray, oven)
        close_oven_door(oven)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_on_baking_tray(chicken:item, onion:item, tray:item):
    body:
        achieve_once on(chicken, tray)
        achieve_once on(onion, tray)
        # Place chicken and onion on the baking tray

behavior preheat_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Preheat the oven

behavior put_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the baking tray inside the oven

behavior close_oven_door(oven:item):
    body:
        achieve_once closed(oven)
        # Close the oven door

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken item
        
        bind onion: item where:
            is_food_onion(onion)
        # Select onion item
        
        bind tray: item where:
            is_tray(tray)
        # Select baking tray
        
        bind oven: item where:
            is_oven(oven)
        # Select oven

        place_on_baking_tray(chicken, onion, tray)
        preheat_oven(oven)
        put_tray_in_oven(tray, oven)
        close_oven_door(oven)

##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)exp(tray_296, oven_295)exp(food_chicken_2017, oven_295)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(tray_296)put_executor(food_chicken_2017, tray_296)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_onion_2032, fridge_289)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(tray_296)put_executor(food_onion_2032, tray_296)walk_executor(oven_295)close_executor(oven_295)switchon_executor(oven_295)switchoff_executor(oven_295)open_executor(oven_295)walk_executor(tray_296)grab_executor(tray_296)walk_executor(oven_295)putin_executor(tray_296, oven_295)close_executor(oven_295)
##############################
From agent.py
walk_executor(oven_295)
Robot find: drawing_240, drawing_238, drawing_239, Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
exp(tray_296, oven_295)
Find tray_296. 
##############################
From agent.py-> find a plan in act()
exp(food_chicken_2017, oven_295)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(tray_296)put_executor(food_chicken_2017, tray_296)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_onion_2032, fridge_289)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(tray_296)put_executor(food_onion_2032, tray_296)close_executor(oven_295)switchon_executor(oven_295)
##############################
From agent.py
exp(food_chicken_2017, oven_295)
Fail to find food_chicken_2017 around oven_295. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(tray_296)put_executor(food_chicken_2017, tray_296)walk_executor(fridge_289)exp(food_onion_2032, fridge_289)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(tray_296)put_executor(food_onion_2032, tray_296)close_executor(oven_295)switchon_executor(oven_295)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2017)walk_executor(tray_296)put_executor(food_chicken_2017, tray_296)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(tray_296)put_executor(food_onion_2032, tray_296)close_executor(oven_295)switchon_executor(oven_295)
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(tray_296)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. 
##############################
From agent.py
put_executor(food_chicken_2017, tray_296)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. tray_296 is close food_chicken_2017. food_chicken_2017 is close tray_296. food_chicken_2017 is on tray_296. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the fridge_289. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(tray_296)
Robot find: Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the oven_295. 
##############################
From agent.py
put_executor(food_onion_2032, tray_296)
Robot find: Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the oven_295. tray_296 is close food_onion_2032. food_onion_2032 is close tray_296. food_onion_2032 is on tray_296. food_onion_2032 released by right hand. 
##############################
From agent.py
close_executor(oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the oven_295. oven_295 is closed. 
##############################
From agent.py
switchon_executor(oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the oven_295. oven_295 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The tray needs to be placed inside the oven. The current actions do not indicate that the tray with the chicken and onion has been placed inside the oven.
##############################
From agent.py
Human Instruction: The tray needs to be placed inside the oven. The current actions do not indicate that the tray with the chicken and onion has been placed inside the oven.

The actions you have taken:
Action 1: Walk to oven_295.
Action 2: Open oven_295.
Action 3: look for tray_296 around oven_295.
Action 4: look for food_chicken_2017 around oven_295.
Action 5: Walk to fridge_289.
Action 6: Switch off fridge_289.
Action 7: Open fridge_289.
Action 8: look for food_chicken_2017 around fridge_289.
Action 9: Grab food_chicken_2017.
Action 10: Walk to tray_296.
Action 11: Put food_chicken_2017 on tray_296.
Action 12: Walk to food_onion_2032.
Action 13: Grab food_onion_2032.
Action 14: Walk to tray_296.
Action 15: Put food_onion_2032 on tray_296.
Action 16: Close oven_295.
Action 17: Switch on oven_295.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior close_the_oven_door(oven:item):
    body:
        achieve_once closed(oven)
        # Close the oven door

behavior start_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select tray with chicken and onion on it

        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select oven with ID 295

        place_tray_in_oven(tray, oven)
        close_the_oven_door(oven)
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray inside the oven

behavior ensure_oven_on(oven:item):
    body:
        achieve is_on(oven)
        # Ensure the oven remains on

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and visited(tray)
        # Select the associated tray with the chicken and onion
        
        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295
        
        place_tray_in_oven(tray, oven)
        # Place the tray containing chicken and onion in the oven
        
        ensure_oven_on(oven)
        # Ensure the oven is turned on for roasting

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_tray_with_food(tray:item, chicken:item, onion:item):
    body:
        achieve_once on(chicken, tray)
        achieve_once on(onion, tray)

behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)

behavior close_oven(oven:item):
    body:
        achieve_once closed(oven)

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and id[tray]==296
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2017
        bind onion: item where:
            is_food_onion(onion) and id[onion]==2032
        bind oven: item where:
            is_oven(oven) and id[oven]==295
        prepare_tray_with_food(tray, chicken, onion)
        place_tray_in_oven(tray, oven)
        close_oven(oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_on_tray(tray:item):
    # Function to check if items are on the specified tray
    symbol has_items=exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and on(o, tray))
    return has_items

behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven) # Place the tray inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve_once closed(oven) # Ensure the oven is closed
        achieve is_on(oven) # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and is_item_on_tray(tray)
        # Select the tray with items on it

        bind chicken: item where:
            is_food_chicken(chicken) and on(chicken, tray)
        # Select the chicken on the tray

        bind onion: item where:
            is_food_onion(onion) and on(onion, tray)
        # Select the onion on the tray
        
        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295

        place_tray_in_oven(tray, oven) # Place the tray in the oven
        turn_on_oven(oven) # Ensure the oven is turned on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and id[tray] == 296
        # Bind tray with ID 296

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2017
        # Bind chicken with ID 2017

        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2032
        # Bind onion with ID 2032

        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Bind oven with ID 295

        achieve_once on(chicken, tray)
        # Ensure the chicken is placed on the tray

        achieve_once on(onion, tray)
        # Ensure the onion is placed on the tray

        achieve_once inside(tray, oven)
        # Place the tray with chicken and onions inside the oven

        achieve_once closed(oven)
        # Ensure the oven is closed

        achieve is_on(oven)
        # Ensure the oven remains on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior close_and_turn_on_oven(oven:item):
    body:
        achieve_once closed(oven) # Ensure the oven door is closed
        achieve_once is_on(oven) # Turn the oven on

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and on(chicken, tray) and on(onion, tray)
        # Select the tray with chicken and onion

        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295

        place_tray_in_oven(tray, oven)
        close_and_turn_on_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "roast chicken with onion in the oven." ?
Answer: Put the chicken and onion in the oven. Then turn on the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven) # Place the tray inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven) # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select a tray
        bind oven: item where:
            is_oven(oven)
        # Select an oven
        place_tray_in_oven(tray, oven) # Place the tray inside the oven
        turn_on_oven(oven) # Turn on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once closed(oven) # Close the oven door
        achieve_once is_on(oven) # Turn on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        bind tray: item where:
            is_tray(tray)
        # Select the tray with chicken and onion on it
        
        place_items_in_oven(tray, oven) # Ensure the tray is placed inside the oven
        start_oven(oven) # Start the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        put_in_oven(tray, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select the tray
        
        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295
        
        place_tray_in_oven(tray, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with items inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select the tray with food items
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        place_tray_in_oven(tray, oven) # Place the tray into the oven
        turn_on_oven(oven) # Turn the oven on


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)

behavior start_oven(oven:item):
    body:
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select the tray to be used
        bind oven: item where:
            is_oven(oven)
        # Select the oven to be used
        place_tray_in_oven(tray, oven) # Place the tray with chicken and onion in the oven
        start_oven(oven) # Turn on the oven

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior place_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray inside the oven only once

behavior start_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven only once

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select the tray
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken as food
        bind onion: item where:
            is_food_onion(onion)
        # Select onion as food
        bind oven: item where:
            is_oven(oven)
        # Select an oven
        
        achieve_once on(chicken, tray)
        achieve_once on(onion, tray)
        # Ensure both the chicken and onion are on the tray
        
        place_in_oven(tray, oven)
        # Place the tray with chicken and onion inside the oven
        
        start_oven(oven)
        # Turn on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve_once closed(oven) # Ensure oven is closed before turning it on
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select the tray

        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295

        place_tray_in_oven(tray, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion in the oven

behavior start_oven(oven:item):
    body:
        achieve_once closed(oven) # Ensure the oven is closed
        achieve_once is_on(oven) # Turn on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==295
        # Select oven with ID 295

        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select the tray that has both chicken and onion

        place_tray_in_oven(tray, oven)
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_with_food_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once closed(oven) # Ensure the oven is closed
        achieve is_on(oven) # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select the tray
        
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select the chicken

        bind food_onion: item where:
            is_food_onion(food_onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven) and id[oven]==295
        # Select the oven with ID 295

        place_tray_with_food_in_oven(tray, oven)
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven) # Place the tray inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven) # Ensure the oven is turned on

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) # Select a tray
        bind chicken: item where:
            is_food_chicken(chicken) # Select chicken
        bind onion: item where:
            is_food_onion(onion) # Select onion
        bind oven: item where:
            is_oven(oven)
        # Place the chicken and onion on the tray 
        achieve_once on(chicken, tray)
        achieve_once on(onion, tray)
        put_tray_in_oven(tray, oven) # Place the tray with chicken and onion in the oven
        turn_on_oven(oven) # Turn on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_chicken_with_onion_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select the tray
        
        bind chicken: item where:
            is_food_chicken(chicken) and on(chicken, tray)
        # Select chicken on the tray

        bind onion: item where:
            is_food_onion(onion) and on(onion, tray)
        # Select onion on the tray

        bind oven: item where:
            is_oven(oven)

        put_chicken_with_onion_in_oven(tray, oven)
        start_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "roast chicken with onion in the oven." ?
Answer: Put the chicken and onion in the oven. Then turn on the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with items inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select the tray containing chicken and onion
        
        bind oven: item where:
            is_oven(oven) and id[oven]==295
        # Select the oven with ID 295

        place_tray_in_oven(tray, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once closed(oven)
        # Ensure the oven door is closed
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select the tray
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        put_in_oven(tray, oven)
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Ensure the oven is turned on

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select tray with chicken and onion

        bind oven: item where:
            is_oven(oven) and id[oven]==295
        # Select oven with ID 295
        
        place_tray_in_oven(tray, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation

def check_load_tray_into_oven(tray: item, oven: item):
    # Function to check if the tray is already loaded into the oven
    symbol loaded = exists t: item : (t == tray and inside(t, oven))
    return loaded

behavior put_tray_in_oven(tray: item, oven: item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray inside the oven

behavior turn_on_oven(oven: item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select oven with ID 295
        bind tray: item where:
            is_tray(tray) and id[tray] == 296
        # Select tray with ID 296
        if not check_load_tray_into_oven(tray, oven):
            put_tray_in_oven(tray, oven) 
            # If the tray is not yet in the oven, place it inside
        turn_on_oven(oven)
        # Turn on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once closed(oven)
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select the tray containing chicken and onion

        bind oven: item where:
            is_oven(oven) and id[oven]==295
        # Select the oven with ID 295

        put_in_oven(tray, oven)
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_tray_inside_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and id[tray]==296
        # Select tray with ID 296

        bind oven: item where:
            is_oven(oven) and id[oven]==295
        # Select oven with ID 295

        put_tray_inside_oven(tray, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Ensure the oven is turned on

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select a tray

        bind chicken: item where:
            is_food_chicken(chicken) and on(chicken, tray)
        # Select chicken that is on the tray

        bind onion: item where:
            is_food_onion(onion) and on(onion, tray)
        # Select onion that is on the tray

        bind oven: item where:
            is_oven(oven) and closed(oven)
        # Select the closed oven

        place_tray_in_oven(tray, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)

behavior switch_on_oven(oven:item):
    body:
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select the tray which has both chicken and onion
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        place_tray_in_oven(tray, oven)
        switch_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def in_oven(tray:item, oven:item):
    # Function to verify if the tray is inside the oven
    symbol inside_oven = inside(tray, oven)
    return inside_oven

behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven) # Put the tray inside the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select the tray
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        if not in_oven(tray, oven):
            # If the tray is not already in the oven
            place_tray_in_oven(tray, oven)
        achieve_once is_on(oven)
        # Turn on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray: item, oven: item):
    body:
        achieve_once inside(tray, oven)

behavior start_oven(oven: item):
    body:
        achieve is_on(oven)
        achieve_once closed(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295
        
        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select a tray with chicken and onion on it

        place_tray_in_oven(tray, oven)
        # Place the tray with chicken and onion inside the oven

        start_oven(oven)
        # Start the oven to begin roasting the chicken and onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and on(tray, kitchen_counter) # Assuming the tray starts on a kitchen counter
        # Choose the tray
        
        bind oven: item where:
            is_oven(oven) and id[oven]==295
        # Choose the oven with the known ID 295

        put_tray_in_oven(tray, oven)
        # Place the tray in the oven

        turn_on_oven(oven)
        # Turn on the oven to roast the chicken and onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295

        bind tray: item where:
            is_tray(tray) and inside(food_chicken_2017, tray) and inside(food_onion_2032, tray)
        # Select the tray with chicken and onion

        place_tray_in_oven(tray, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "roast chicken with onion in the oven." ?
Answer: Put the chicken and onion in the oven. Then turn on the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray inside the oven

behavior close_oven_door(oven:item):
    body:
        achieve_once closed(oven)
        # Close the oven door

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select a tray

        bind oven: item where:
            is_oven(oven)
        # Choose an oven

        put_tray_in_oven(tray, oven)
        close_oven_door(oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Ensure the tray with chicken and onion is inside the oven

behavior start_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select a tray
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select onion

        bind oven: item where:
            is_oven(oven)
        # Select an oven

        # Putting chicken and onion on the tray
        achieve_once on(chicken, tray)
        achieve_once on(onion, tray)
        
        # Putting the tray inside the oven
        put_tray_in_oven(tray, oven)

        # Starting the oven
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_food_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with food inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select the tray to place inside the oven

        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select the chicken to put on the tray

        bind food_onion: item where:
            is_food_onion(food_onion)
        # Select the onion to put on the tray

        bind oven: item where:
            is_oven(oven) and id[oven]==295
        # Select the oven with ID 295

        achieve_once on(food_chicken, tray)
        # Place the chicken on the tray

        achieve_once on(food_onion, tray)
        # Place the onion on the tray

        put_food_in_oven(tray, oven)
        
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==295
        # Select the oven with ID 295
        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select the tray that contains chicken and onion
        place_tray_in_oven(tray, oven)
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior activate_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295

        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select the tray with the chicken and onion on it

        place_in_oven(tray, oven)
        # Place the tray with chicken and onion inside the oven

        activate_oven(oven)
        # Turn on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_chicken_and_onion(tray: item, chicken: item, onion: item):
    body:
        achieve_once on(chicken, tray)
        # Place the chicken on the tray
        achieve_once on(onion, tray)
        # Place the onion on the tray

behavior put_tray_in_oven(tray: item, oven: item):
    body:
        achieve_once inside(tray, oven)
        # Put the tray inside the oven

behavior start_oven(oven: item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven to start cooking

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)  
        # Select a tray
        bind chicken: item where:
            is_food_chicken(chicken)  
        # Select the chicken
        bind onion: item where:
            is_food_onion(onion)  
        # Select the onion
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        prepare_chicken_and_onion(tray, chicken, onion)
        put_tray_in_oven(tray, oven)
        start_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def contains_chicken_onion(tray:item):
    # Function to check if a tray contains chicken and onion
    symbol has_chicken_and_onion= exists o1: item : (is_food_chicken(o1) and on(o1, tray))
    symbol has_onion= exists o2: item : (is_food_onion(o2) and on(o2, tray))
    return has_chicken_and_onion and has_onion

behavior put_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and contains_chicken_onion(tray)
        # Select a tray containing both chicken and onion

        bind oven: item where:
            is_oven(oven) and open(oven)
        # Select an open oven

        put_tray_in_oven(tray, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select the tray with chicken and onion on it
        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select oven with ID 295
        put_in_oven(tray, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select a tray

        bind oven: item where:
            is_oven(oven)
        # Select an oven

        put_tray_in_oven(tray, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==295
        # Select the oven with ID 295
        
        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select the tray that has chicken and onion on it

        place_tray_in_oven(tray, oven)
        # Place the tray with chicken and onion inside the oven
        
        turn_on_oven(oven)
        # Turn on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_and_onion_on_tray(tray:item):
    # Function to check if there are both chicken and onion on the tray
    symbol has_chicken_and_onion= exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and on(o, tray))
    return has_chicken_and_onion

behavior roast_chicken_with_onion(tray:item, oven:item):
    body:
        # Ensure tray is placed inside an open oven, then close the oven and turn it on
        achieve_once inside(tray, oven)
        achieve_once closed(oven)
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and has_chicken_and_onion_on_tray(tray)
        bind oven: item where:
            is_oven(oven)
        roast_chicken_with_onion(tray, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_and_onion_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once is_on(oven) 
        # Ensure the oven is turned on

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        bind tray: item where:
            is_tray(tray)
        # Select the tray with prepared chicken and onion
        
        place_chicken_and_onion_in_oven(tray, oven)
        start_oven(oven)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven) # Place the tray inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven) # Turn on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295

        bind tray: item where:
            is_tray(tray) and on(chicken, tray) and on(onion, tray)
        # Select the tray with both the chicken and onion

        place_tray_in_oven(tray, oven)
        # Place the tray with chicken and onion inside the oven
        
        turn_on_oven(oven)
        # Turn on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once closed(oven) # Ensure the oven is closed
        achieve is_on(oven) # Switch on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==295
        # Select the oven with ID 295
        
        bind tray: item where:
            is_tray(tray) and has_food_chicken(tray) and has_food_onion(tray)
        # Select the tray with chicken and onion

        place_tray_in_oven(tray, oven)
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_and_onion_on_tray(tray:item):
    # Function to check if there is chicken and onion on the specified tray
    symbol has_chicken_and_onion= exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and on(o, tray))
    return has_chicken_and_onion

behavior roast_chicken_with_onion(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven) # Place the tray with chicken and onion inside the oven
        achieve is_on(oven) # Ensure the oven is on to roast

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and has_chicken_and_onion_on_tray(tray)
        # Select tray with chicken and onion on it

        bind oven: item where:
            is_oven(oven) and open(oven)
        # Select the oven

        roast_chicken_with_onion(tray, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_tray_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)

behavior switch_on_oven(oven:item):
    body:
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 295 
        bind tray: item where:
            is_tray(tray) and id[tray] == 296
        # Place the tray with the chicken and onion in the oven and then turn it on
        put_tray_in_oven(tray, oven)
        switch_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_ingredients(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)
        # Place the tray inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select a tray to use for placing ingredients
        
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        # Select chicken and onion to place on the tray

        achieve_once on(chicken, tray)
        achieve_once on(onion, tray)
        # Place food items on the tray
        
        bind oven: item where:
            is_oven(oven)
        # Select an oven to use for roasting

        place_ingredients(tray, oven)
        # Place the tray with ingredients inside the oven

        turn_on_oven(oven)
        # Turn on the oven to start roasting

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_onion_in_oven(tray:item, oven:item):
    body:
        achieve_once inside(tray, oven)

behavior start_oven(oven:item):
    body:
        achieve_once closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        bind chicken: item where:
            is_food_chicken(chicken) and on(chicken, tray)
        bind onion: item where:
            is_food_onion(onion) and on(onion, tray)
        bind oven: item where:
            is_oven(oven)
        place_chicken_onion_in_oven(tray, oven)
        start_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_chicken_2017)', 'walk_executor(tray_296)', 'put_executor(food_chicken_2017, tray_296)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(tray_296)', 'put_executor(food_onion_2032, tray_296)', 'close_executor(oven_295)', 'switchon_executor(oven_295)']
Time info:
Time consume: 581 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 0
goal generate times: 49
goal correct times: 0
action_num: 14

Task complete rate:
Keystate: k1 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
