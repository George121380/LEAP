From agent.py
Reset goals: The sub-goals are: 
['Make sure there is at least one light on in every room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_dresser_358(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(oil,dresser_instance)
        else:
            exp(oil,dresser_instance)
    eff:
        unknown[oil]=False
        close[oil,dresser_instance]=True
        close[dresser_instance,oil]=True
    

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_wall_clock_249_around_wallshelf_235(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

behavior find_fork_2081_around_oven_295(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fork,oven_instance)
        else:
            exp(fork,oven_instance)
    eff:
        unknown[fork]=False
        close[fork,oven_instance]=True
        close[oven_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior ensure_light_on(r:item):
    body:
        if not is_on(r):
            achieve is_on(r)

behavior __goal__():
    body:
        foreach room: item:
            if inside(room, char):
                foreach light: item:
                    if is_light(light) and inside(light, room):
                        ensure_light_on(light)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_room_light_on(room: item):
    # Function to check if there is a light on in the specified room
    symbol has_light_on= exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return has_light_on

behavior turn_on_light(light: item):
    body:
        achieve_once is_on(light)
        # Turn on the light

behavior __goal__():
    body:
        foreach room: item:
            if not is_room_light_on(room):
                # If there is no light on in the room, find and turn on a light
                foreach light: item:
                    if is_light(light) and inside(light, room) and not is_on(light):
                        # Check lights in the room and turn on one that is off
                        turn_on_light(light)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_room_light_on(room: item):
    # Function to check if there is a light on in the specified room
    symbol has_light_on= exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return has_light_on

behavior turn_on_light(light: item):
    body:
        achieve_once is_on(light)
        # Turn on the light

behavior __goal__():
    body:
        foreach room: item:
            if not is_room_light_on(room):
                # If there is no light on in the room, find and turn on a light
                foreach light: item:
                    if is_light(light) and inside(light, room) and not is_on(light):
                        # Check lights in the room and turn on one that is off
                        turn_on_light(light)

##############################
From agent.py-> find a plan in act()
walk_executor(light_64)switchon_executor(light_64)walk_executor(light_169)switchon_executor(light_169)walk_executor(light_245)switchon_executor(light_245)walk_executor(light_411)switchon_executor(light_411)
##############################
From agent.py
walk_executor(light_64)
Robot find: towel_rack_32, mat_22, Robot is close to the light_64. 
##############################
From agent.py
switchon_executor(light_64)
Robot find: Robot is close to the light_64. light_64 is turned on. 
##############################
From agent.py
walk_executor(light_169)
Robot find: keyboard_168, drawing_175, chair_103, drawing_174, Robot is close to the light_169. 
##############################
From agent.py
switchon_executor(light_169)
Robot find: Robot is close to the light_169. light_169 is turned on. 
##############################
From agent.py
walk_executor(light_245)
Robot find: drawing_240, drawing_238, wall_clock_249, drawing_241, drawing_242, drawing_243, drawing_239, phone_247, Robot is close to the light_245. 
##############################
From agent.py
switchon_executor(light_245)
Robot find: Robot is close to the light_245. light_245 is turned on. 
##############################
From agent.py
walk_executor(light_411)
Robot find: drawing_404, drawing_402, Robot is close to the light_411. 
##############################
From agent.py
switchon_executor(light_411)
Robot find: Robot is close to the light_411. light_411 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make sure there is at least one light on in every room.
Action History:
['walk_executor(light_64)', 'switchon_executor(light_64)', 'walk_executor(light_169)', 'switchon_executor(light_169)', 'walk_executor(light_245)', 'switchon_executor(light_245)', 'walk_executor(light_411)', 'switchon_executor(light_411)']
Time info:
Time consume: 59 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 2
goal correct times: 0
action_num: 8

Task complete rate:
1
Scene_id: 0
##############################
