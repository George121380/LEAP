From agent.py
Reset goals: The sub-goals are: 
['Scramble egg by the fryingpan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_egg_in_pan(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior cook_egg(fryingpan:item):
    body:
        achieve_once is_on(fryingpan) 

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan
        mix_egg_in_pan(egg, fryingpan)
        # Mix the egg in the fryingpan
        cook_egg(fryingpan)
        # Turn on the fryingpan to cook the egg

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_hairbrush_2002_around_dresser_358(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(hairbrush,dresser_instance)
        else:
            exp(hairbrush,dresser_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,dresser_instance]=True
        close[dresser_instance,hairbrush]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_fryingpan_for_egg(fryingpan:item):
    body:
        achieve_once clean(fryingpan)
        # Ensure the fryingpan is clean before use

behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item):
    body:
        achieve_once on(egg, fryingpan)
        # Crack and place the egg in the fryingpan

behavior heat_fryingpan(stove:item, fryingpan:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove to heat the fryingpan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)

        prepare_fryingpan_for_egg(fryingpan)
        heat_fryingpan(stove, fryingpan)
        scramble_egg_in_fryingpan(egg, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_fryingpan_for_egg(fryingpan:item):
    body:
        achieve_once clean(fryingpan)
        # Ensure the fryingpan is clean before use

behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item):
    body:
        achieve_once on(egg, fryingpan)
        # Crack and place the egg in the fryingpan

behavior heat_fryingpan(stove:item, fryingpan:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove to heat the fryingpan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)

        prepare_fryingpan_for_egg(fryingpan)
        heat_fryingpan(stove, fryingpan)
        scramble_egg_in_fryingpan(egg, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(fryingpan_2083, stove_2065)walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(fryingpan_2083)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)put_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(fryingpan_2083, stove_2065)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)put_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(fryingpan_2083)put_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 is on fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the fryingpan is clean before using it. The current actions don't indicate that the fryingpan was cleaned.
##############################
From agent.py
Human Instruction: You need to ensure that the fryingpan is clean before using it. The current actions don't indicate that the fryingpan was cleaned.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for fryingpan_2083 around stove_2065.
Action 4: Switch on stove_2065.
Action 5: Walk to fridge_289.
Action 6: Switch off fridge_289.
Action 7: Open fridge_289.
Action 8: look for food_egg_2020 around fridge_289.
Action 9: Grab food_egg_2020.
Action 10: Walk to fryingpan_2083.
Action 11: Put food_egg_2020 on fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_dishwasher_1001(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_fryingpan(fryingpan:item):
    body:
        achieve_once clean(fryingpan)

behavior check_fryingpan_cleanliness(fryingpan:item):
    body:
        if dirty(fryingpan):
            clean_fryingpan(fryingpan)

behavior cook_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(egg, fryingpan)
        achieve_once is_on(stove)
        
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)
        check_fryingpan_cleanliness(fryingpan)
        cook_egg(egg, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_fryingpan(fryingpan:item):
    body:
        achieve_once clean(fryingpan)

behavior check_fryingpan_cleanliness(fryingpan:item):
    body:
        if dirty(fryingpan):
            clean_fryingpan(fryingpan)

behavior cook_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(egg, fryingpan)
        achieve_once is_on(stove)
        
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)
        check_fryingpan_cleanliness(fryingpan)
        cook_egg(egg, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_egg_2020 is inside fryingpan_2083. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The fryingpan needs to be cleaned before using it to scramble the egg. Ensure the fryingpan is clean, then proceed with scrambling the egg.
##############################
From agent.py
Human Instruction: The fryingpan needs to be cleaned before using it to scramble the egg. Ensure the fryingpan is clean, then proceed with scrambling the egg.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for fryingpan_2083 around stove_2065.
Action 4: Switch on stove_2065.
Action 5: Walk to fridge_289.
Action 6: Switch off fridge_289.
Action 7: Open fridge_289.
Action 8: look for food_egg_2020 around fridge_289.
Action 9: Grab food_egg_2020.
Action 10: Walk to fryingpan_2083.
Action 11: Put food_egg_2020 on fryingpan_2083.
Action 12: Grab food_egg_2020.
Action 13: Put food_egg_2020 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_fryingpan(fryingpan:item):
    body:
        achieve_once clean(fryingpan)
        # Ensure the fryingpan is clean

behavior scramble_egg(fryingpan:item, egg:item):
    body:
        achieve_once on(egg, fryingpan)
        # Place the egg on the fryingpan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        clean_fryingpan(fryingpan)
        # Clean the fryingpan before use

        scramble_egg(fryingpan, egg)
        # Scramble the egg using the fryingpan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_fryingpan(fryingpan:item):
    body:
        achieve_once clean(fryingpan)
        # Ensure the fryingpan is clean

behavior scramble_egg(fryingpan:item, egg:item):
    body:
        achieve_once on(egg, fryingpan)
        # Place the egg on the fryingpan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        clean_fryingpan(fryingpan)
        # Clean the fryingpan before use

        scramble_egg(fryingpan, egg)
        # Scramble the egg using the fryingpan

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)put_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
put_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_egg_2020 is close fryingpan_2083. food_egg_2020 is on fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the fryingpan is cleaned before placing the egg on it as per the instructions provided. Perform actions to clean the fryingpan, then place the egg on it to complete the sub-task of scrambling the egg.
##############################
Task Summary:
Task Goal:
Scramble egg by the fryingpan.
Action History:
['walk_executor(stove_2065)', 'open_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'put_executor(food_egg_2020, fryingpan_2083)', 'grab_executor(food_egg_2020)', 'putin_executor(food_egg_2020, fryingpan_2083)', 'grab_executor(food_egg_2020)', 'put_executor(food_egg_2020, fryingpan_2083)']
Time info:
Time consume: 81 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 9 steps
Keystate: k2 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
