From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the banana slices until golden brown.', '4. Remove and drain the fried bananas.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_banana(banana:item):
    body:
        achieve cut(banana) # To slice the banana after peeling

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a food item that is a banana
        peel_banana(banana)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_banana(banana:item):
    body:
        achieve cut(banana) # To slice the banana after peeling

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a food item that is a banana
        peel_banana(banana)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_banana_2011, fridge_289)
Find food_banana_2011. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_banana_2011 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_banana_2011. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by right hand. 
##############################
From agent.py
exp(knife_2050, cutting_board_2051)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
cut_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_119(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil_in_pan(oil:item, pan:item, stove:item):
    body:
        achieve inside(oil, pan)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        heat_oil_in_pan(oil, pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_oil_in_pan(oil:item, pan:item, stove:item):
    body:
        achieve inside(oil, pan)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        heat_oil_in_pan(oil, pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_119(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(pan: item):
    body:
        achieve is_on(stove) # Ensure the stove is turned on
        achieve inside(oil, pan) # Ensure oil is inside the pan
        # Fry banana slices until they are golden brown

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan for frying the bananas
        
        bind oil: item where:
            is_oil(oil)
        # Select the oil to use in the frying pan

        fry_bananas(pan)
        # Execute the frying behavior

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_119(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#goal_representation

behavior fry_bananas(stove: item, oil: item, pan: item):
    body:
        achieve is_on(stove) # Ensure the stove is turned on
        achieve inside(oil, pan) # Ensure oil is inside the pan
        # Fry banana slices until they are golden brown

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove to be turned on
        
        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan for frying the bananas
        
        bind oil: item where:
            is_oil(oil)
        # Select the oil to use in the frying pan

        fry_bananas(stove, oil, pan)
        # Execute the frying behavior

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_119(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_pillow_182_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
behavior fry_bananas(bananas:item, pan:item):
    body:
        achieve inside(bananas, pan)
        # Fry the banana slices in the pan

behavior is_bananas_golden_brown(bananas:item):
    body:
        # Function to determine if the banana slices are golden brown
        return observe(bananas, "Check if the bananas are golden brown")

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the bananas
        
        bind pan: item where:
            is_fryingpan(pan) and inside(pan, char) # Ensure pan is close to character
        # Select a frying pan
        
        fry_bananas(bananas, pan)
        
        # Iterate over the process until the desired state is achieved
        while not is_bananas_golden_brown(bananas):
            # The bananas continue frying until they are golden brown
            fry_bananas(bananas, pan)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Return statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_pillow_405_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#goal_representation

behavior fry_bananas(bananas:item, pan:item):
    body:
        achieve inside(bananas, pan)
        # Fry the banana slices in the pan

behavior is_bananas_golden_brown(bananas:item):
    body:
        symbol golden_brown=exists o: item : (is_food_banana(o) and on(o, char) and observed(Check if the bananas are golden brown))
        return golden_brown

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the bananas
        
        bind pan: item where:
            is_fryingpan(pan) and close_char(char, pan)
        # Select a frying pan
        
        fry_bananas(bananas, pan)
        
        foreach cycle: item:
            if not is_bananas_golden_brown(bananas):
                # The bananas continue frying until they are golden brown
                fry_bananas(bananas, pan)
                observe(bananas, "Check if the bananas are golden brown")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'bananas') at line 5820, column 107.
Expected one of: 
	* ELSE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pillow_405_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#goal_representation
 
behavior fry_bananas(bananas:item, pan:item):
    body:
        achieve_once inside(bananas, pan)
        # Ensure the bananas are in the pan
        
behavior is_bananas_golden_brown(bananas:item):
    body:
        symbol golden_brown=exists o: item : (is_food_banana(o) and on(o, pan) and observed(Check if the bananas are golden brown))
        return golden_brown

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the bananas

        bind pan: item where:
            is_fryingpan(pan) and close_char(char, pan)
        # Select a frying pan

        fry_bananas(bananas, pan)
        
        while not is_bananas_golden_brown(bananas):
            # The bananas continue frying until they are golden brown
            observe(bananas, "Check if the bananas are golden brown")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_coffee_table_2068(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(fork,coffee_table_instance)
        else:
            exp(fork,coffee_table_instance)
    eff:
        unknown[fork]=False
        close[fork,coffee_table_instance]=True
        close[coffee_table_instance,fork]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_119(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_slices_in_fryingpan(frying_pan:item):
    # Function to check if banana slices are in the frying pan
    symbol has_banana_slices = exists o: item : (is_food_banana(o) and inside(o, frying_pan))
    return has_banana_slices

behavior fry_banana_slices(frying_pan:item):
    body:
        if is_banana_slices_in_fryingpan(frying_pan):
            achieve inhand(spatula) # Use a spatula to fry the banana slices
            achieve is_on(stove) # Ensure the stove is on for frying
        else:
            foreach banana: item:
                if is_food_banana(banana) and cut(banana) and not inside(banana, frying_pan):
                    achieve_once inside(banana, frying_pan)
            # Place the cut banana slices inside the frying pan

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        bind spatula: item where:
            grabbable(spatula)
        # Select a spatula
        
        fry_banana_slices(frying_pan)
        # Fry the banana slices in the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: spatula; available variables: [Variable<frying_pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#goal_representation
 
def is_banana_slices_in_fryingpan(frying_pan:item):
    # Function to check if banana slices are in the frying pan
    symbol has_banana_slices = exists o: item : (is_food_banana(o) and inside(o, frying_pan))
    return has_banana_slices

behavior fry_banana_slices(frying_pan:item, spatula:item, stove:item): 
    # Correcting by passing spatula and stove as parameters
    body:
        if is_banana_slices_in_fryingpan(frying_pan):
            achieve_once inhand(spatula) # Use a spatula to fry the banana slices
            achieve is_on(stove) # Ensure the stove is on for frying
        else:
            foreach banana: item:
                if is_food_banana(banana) and cut(banana) and not inside(banana, frying_pan):
                    achieve_once inside(banana, frying_pan)
            # Place the cut banana slices inside the frying pan

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        bind spatula: item where:
            grabbable(spatula)
        # Select a spatula
        
        fry_banana_slices(frying_pan, spatula, stove)
        # Fry the banana slices in the frying pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_banana_slices_in_fryingpan(frying_pan:item):
    # Function to check if banana slices are in the frying pan
    symbol has_banana_slices = exists o: item : (is_food_banana(o) and inside(o, frying_pan))
    return has_banana_slices

behavior fry_banana_slices(frying_pan:item, spatula:item, stove:item): 
    # Correcting by passing spatula and stove as parameters
    body:
        if is_banana_slices_in_fryingpan(frying_pan):
            achieve_once inhand(spatula) # Use a spatula to fry the banana slices
            achieve is_on(stove) # Ensure the stove is on for frying
        else:
            foreach banana: item:
                if is_food_banana(banana) and cut(banana) and not inside(banana, frying_pan):
                    achieve_once inside(banana, frying_pan)
            # Place the cut banana slices inside the frying pan

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        bind spatula: item where:
            grabbable(spatula)
        # Select a spatula
        
        fry_banana_slices(frying_pan, spatula, stove)
        # Fry the banana slices in the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_banana_2011 is inside fryingpan_2083. food_banana_2011 is close fryingpan_2083. fryingpan_2083 is close food_banana_2011. food_banana_2011 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The banana slices have been placed in the frying pan, and the stove is switched on. However, the sub-task of frying the banana slices until golden brown also requires using a spatula, as indicated in the goal representation, to ensure proper frying. Ensure that the robot grabs and uses a spatula to complete the frying process.
##############################
From agent.py
Human Instruction: The banana slices have been placed in the frying pan, and the stove is switched on. However, the sub-task of frying the banana slices until golden brown also requires using a spatula, as indicated in the goal representation, to ensure proper frying. Ensure that the robot grabs and uses a spatula to complete the frying process.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_banana_2011 around fridge_289.
Action 5: Grab food_banana_2011.
Action 6: Walk to cutting_board_2051.
Action 7: Put food_banana_2011 on cutting_board_2051.
Action 8: look for knife_2050 around cutting_board_2051.
Action 9: Walk to knife_2050.
Action 10: Grab knife_2050.
Action 11: Walk to food_banana_2011.
Action 12: Cut food_banana_2011.
Action 13: Walk to oil_2079.
Action 14: Grab oil_2079.
Action 15: Walk to fryingpan_2083.
Action 16: Put oil_2079 into fryingpan_2083.
Action 17: Walk to stove_2065.
Action 18: Switch on stove_2065.
Action 19: Walk to food_banana_2011.
Action 20: Grab food_banana_2011.
Action 21: Walk to fryingpan_2083.
Action 22: Put food_banana_2011 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior achieve_golden_brown(fryingpan:item, spatula:item):
    body:
        achieve close_char(char, fryingpan)
        achieve_once inhand(spatula)
        # Ensure the banana slices are being properly fried using the spatula

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select the frying pan with ID 2083

        bind spatula: item where:
            grabbable(spatula)
        # Select a spatula

        achieve_golden_brown(fryingpan, spatula)
        # Use the spatula to fry the banana slices until golden brown

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
behavior fry_bananas_with_spatula(spatula: item, fryingpan: item):
    body:
        achieve_once inhand(spatula)
        # Use the spatula to fry the banana slices until golden brown

behavior __goal__():
    body:
        bind spatula: item where:
            is_knife(spatula) and grabbable(spatula)
        # Bind a spatula in hand
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        # Select a frying pan that has been visited
        
        fry_bananas_with_spatula(spatula, fryingpan)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
behavior grab_spatula(spatula:item):
    body:
        achieve_once inhand(spatula)
        # Grab the spatula

behavior fry_banana_slices(banana_slices:item, fryingpan:item, spatula:item):
    body:
        achieve inside(banana_slices, fryingpan)
        # Ensure banana slices are inside the frying pan
        achieve is_on(fryingpan)
        # Ensure fryingpan is on
        achieve_once on(banana_slices, fryingpan)
        # Ensure banana slices remain on the frying pan temporarily as they cook

behavior __goal__():
    body:
        bind spatula: item where:
            is_spatula(spatula) and grabbable(spatula)
        # Select a grabbable spatula
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select cut banana slices
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and close_char(char, fryingpan)
        # Select a frying pan close to the character
        grab_spatula(spatula)
        fry_banana_slices(banana_slices, fryingpan, spatula)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_spatula not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#goal_representation
behavior grab_spatula(spatula:item):
    body:
        achieve_once inhand(spatula)
        # Grab the spatula

behavior fry_banana_slices(banana_slices:item, fryingpan:item, spatula:item):
    body:
        achieve inside(banana_slices, fryingpan)
        # Ensure banana slices are inside the frying pan
        achieve is_on(fryingpan)
        # Ensure fryingpan is on
        achieve_once on(banana_slices, fryingpan)
        # Ensure banana slices remain on the frying pan temporarily as they cook

behavior __goal__():
    body:
        bind spatula: item where:
            is_food_food(spatula) and grabbable(spatula)
        # Select a grabbable spatula
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select cut banana slices
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and close_char(char, fryingpan)
        # Select a frying pan close to the character
        grab_spatula(spatula)
        fry_banana_slices(banana_slices, fryingpan, spatula)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the banana slices until golden brown." ?
Answer: The plan deviates at the frying step. You should find a frying pan, put it on the stove, turn on the stove, and add some oil. Then, put the banana slices in the frying pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a frying pan and put it on the stove.', '2. Turn on the stove and add the heated oil.', '3. Put the banana slices in the frying pan to fry.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan_and_put_on_stove():
    body:
        # Find the frying pan and identify the stove to place it on
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        
        bind stove: item where:
            is_stove(stove)
        
        # Ensure the frying pan is placed on the stove
        achieve_once on(frying_pan, stove)

behavior __goal__():
    body:
        # Execute the behavior to find the frying pan and put it on the stove
        find_frying_pan_and_put_on_stove()

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_frying_pan_and_put_on_stove():
    body:
        # Find the frying pan and identify the stove to place it on
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        
        bind stove: item where:
            is_stove(stove)
        
        # Ensure the frying pan is placed on the stove
        achieve_once on(frying_pan, stove)

behavior __goal__():
    body:
        # Execute the behavior to find the frying pan and put it on the stove
        find_frying_pan_and_put_on_stove()

##############################
From agent.py-> find a plan in act()
grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_oil_to_fryingpan(oil:item, fryingpan:item):
    body:
        achieve inside(oil, fryingpan)
        # Add the heated oil into the frying pan

behavior make_stove_ready(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is on

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind oil: item where:
            is_oil(oil)
        # Select the oil to be heated and added
        make_stove_ready(stove)
        add_oil_to_fryingpan(oil, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_walllamp_28(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==28
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(clothes_hat,walllamp_instance)
        else:
            exp(clothes_hat,walllamp_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,walllamp_instance]=True
        close[walllamp_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Bind the stove
        
        bind oil: item where:
            is_oil(oil)
        # Bind the oil
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind the frying pan
        
        achieve is_on(stove)
        # Ensure the stove is on
        
        achieve_once inside(oil, fryingpan)
        # Add the heated oil into the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_116(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation

behavior apply_oil_to_pan(oil:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan)
        
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select an oil
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        apply_oil_to_pan(oil, fryingpan)
        turn_on_stove(stove)


#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. turn on the stove and add the heated oil." ?
Answer: Turn on the stove and add some oil.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Fry the sliced bananas in the heated oil.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior use_spatula(spatula:item):
    body:
        achieve_once inhand(spatula)
        # The robot needs to have the spatula in hand to fry the banana slices properly

behavior fry_bananas(fryingpan:item):
    body:
        achieve_once is_on(stove_2065)
        # Ensure the stove remains on to maintain the heat for frying

behavior __goal__():
    body:
        bind spatula: item where:
            grabbable(spatula)
        # Select a grabbable spatula item
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select the fryingpan that is currently on the stove

        use_spatula(spatula)
        fry_bananas(fryingpan)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#goal_representation
 
behavior use_spatula(spatula:item):
    body:
        achieve_once inhand(spatula)
        # The robot needs to have the spatula in hand to fry the banana slices properly

behavior fry_bananas(fryingpan:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Ensure the stove remains on to maintain the heat for frying

behavior __goal__():
    body:
        bind spatula: item where:
            grabbable(spatula)
        # Select a grabbable spatula item
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the fryingpan that is currently on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with the correct ID

        use_spatula(spatula)
        fry_bananas(fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#goal_representation
behavior use_spatula(spatula:item):
    body:
        achieve_once inhand(spatula)

behavior fry_bananas(fryingpan:item, stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind spatula: item where:
            grabbable(spatula)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065

        use_spatula(spatula)
        fry_bananas(fryingpan, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior use_spatula(spatula:item, banana:item, fryingpan:item):
    body:
        achieve_once inhand(spatula)
        # Ensures that the spatula is held to turn the banana slices

behavior fry_bananas(banana:item, fryingpan:item):
    body:
        # Fry the banana slices until golden brown
        achieve cut(banana)
        achieve inside(banana, fryingpan)

behavior __goal__():
    body:
        bind spatula: item where:
            grabbable(spatula)
        # Select a grabbable spatula
        
        bind banana: item where:
            is_food_banana(banana)
        # Select the bananas to be fried

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select the frying pan placed on the stove

        use_spatula(spatula, banana, fryingpan)
        # Use the spatula to ensure proper frying of banana slices
        
        fry_bananas(banana, fryingpan)
        # Fry the bananas in the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#goal_representation

behavior use_spatula(spatula:item, banana:item, fryingpan:item):
    body:
        achieve_once inhand(spatula)
        # Ensures that the spatula is held to turn the banana slices

behavior fry_bananas(banana:item, fryingpan:item):
    body:
        # Fry the banana slices until golden brown
        achieve cut(banana)
        achieve inside(banana, fryingpan)

behavior __goal__():
    body:
        bind spatula: item where:
            grabbable(spatula)
        # Select a grabbable spatula
        
        bind banana: item where:
            is_food_banana(banana)
        # Select the bananas to be fried

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan placed on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Bind the stove with the specific ID
        
        use_spatula(spatula, banana, fryingpan)
        # Use the spatula to ensure proper frying of banana slices
        
        fry_bananas(banana, fryingpan)
        # Fry the bananas in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior use_spatula_to_fry(spatula:item, fryingpan:item):
    body:
        achieve_once inhand(spatula)
        # Grasp the spatula temporarily for stirring
        achieve on(spatula, fryingpan)
        # Use the spatula on the frying pan

behavior let_bananas_fry():
    body:
        achieve inside(food_banana_2011, fryingpan_2083)
        # Ensure bananas are inside the frying pan

behavior __goal__():
    body:
        bind spatula: item where:
            grabbable(spatula) and is_food(food_banana_2011)
        # Select a spatula grabbable in the environment
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        use_spatula_to_fry(spatula, fryingpan)
        let_bananas_fry()
        # Ensure bananas fry until golden brown

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_banana_2011; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#goal_representation
 
behavior use_spatula_to_fry(spatula:item, fryingpan:item):
    body:
        achieve_once inhand(spatula)
        # Grasp the spatula temporarily for stirring
        achieve on(spatula, fryingpan)
        # Use the spatula on the frying pan

behavior let_bananas_fry(banana:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan)
        # Ensure bananas are inside the frying pan

behavior __goal__():
    body:
        bind spatula: item where:
            grabbable(spatula)
        # Select a spatula grabbable in the environment
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind banana: item where:
            is_food(banana) and id[banana] == 2011
        # Select the banana slices
        use_spatula_to_fry(spatula, fryingpan)
        let_bananas_fry(banana, fryingpan)
        # Ensure bananas fry until golden brown

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior use_spatula_to_fry(spatula:item, fryingpan:item):
    body:
        achieve_once inhand(spatula)
        # Grasp the spatula temporarily for stirring
        achieve on(spatula, fryingpan)
        # Use the spatula on the frying pan

behavior let_bananas_fry(banana:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan)
        # Ensure bananas are inside the frying pan

behavior __goal__():
    body:
        bind spatula: item where:
            grabbable(spatula)
        # Select a spatula grabbable in the environment
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind banana: item where:
            is_food(banana) and id[banana] == 2011
        # Select the banana slices
        use_spatula_to_fry(spatula, fryingpan)
        let_bananas_fry(banana, fryingpan)
        # Ensure bananas fry until golden brown

##############################
From agent.py-> find a plan in act()
put_executor(knife_2050, fryingpan_2083)
##############################
From agent.py
put_executor(knife_2050, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. knife_2050 is close fryingpan_2083. fryingpan_2083 is close knife_2050. knife_2050 is on fryingpan_2083. knife_2050 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to grab a spatula and use it on the frying pan to properly fry the banana slices.
##############################
From agent.py
Human Instruction: The robot needs to grab a spatula and use it on the frying pan to properly fry the banana slices.

Human Guidance: Turn on the stove and add some oil.
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_banana_2011 around fridge_289.
Action 5: Grab food_banana_2011.
Action 6: Walk to cutting_board_2051.
Action 7: Put food_banana_2011 on cutting_board_2051.
Action 8: look for knife_2050 around cutting_board_2051.
Action 9: Walk to knife_2050.
Action 10: Grab knife_2050.
Action 11: Walk to food_banana_2011.
Action 12: Cut food_banana_2011.
Action 13: Walk to oil_2079.
Action 14: Grab oil_2079.
Action 15: Walk to fryingpan_2083.
Action 16: Put oil_2079 into fryingpan_2083.
Action 17: Walk to stove_2065.
Action 18: Switch on stove_2065.
Action 19: Walk to food_banana_2011.
Action 20: Grab food_banana_2011.
Action 21: Walk to fryingpan_2083.
Action 22: Put food_banana_2011 into fryingpan_2083.
Action 23: Grab fryingpan_2083.
Action 24: Walk to stove_2065.
Action 25: Put fryingpan_2083 on stove_2065.
Action 26: Put knife_2050 on fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
def inhand_spatula():
    # Check if the spatula is allocated to a hand
    symbol spatula_allocated=exists spatula: item : (is_knife(spatula) and inhand(spatula))
    return spatula_allocated

behavior grab_spatula(spatula:item):
    body:
        achieve_once inhand(spatula)

behavior fry_bananas(spatula:item, fryingpan:item):
    body:
        achieve_once on(spatula, fryingpan)
        # Use the spatula on the frying pan to fry the bananas properly

behavior __goal__():
    body:
        bind spatula: item where:
            is_knife(spatula)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Make sure the spatula is in hand
        if not inhand_spatula():
            grab_spatula(spatula)
        fry_bananas(spatula, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def inhand_spatula():
    # Check if the spatula is allocated to a hand
    symbol spatula_allocated=exists spatula: item : (is_knife(spatula) and inhand(spatula))
    return spatula_allocated

behavior grab_spatula(spatula:item):
    body:
        achieve_once inhand(spatula)

behavior fry_bananas(spatula:item, fryingpan:item):
    body:
        achieve_once on(spatula, fryingpan)
        # Use the spatula on the frying pan to fry the bananas properly

behavior __goal__():
    body:
        bind spatula: item where:
            is_knife(spatula)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Make sure the spatula is in hand
        if not inhand_spatula():
            grab_spatula(spatula)
        fry_bananas(spatula, fryingpan)

##############################
From agent.py-> find a plan in act()
grab_executor(knife_2050)put_executor(knife_2050, fryingpan_2083)
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. Grabbing knife_2050 by right hand. 
##############################
From agent.py
put_executor(knife_2050, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. knife_2050 is close fryingpan_2083. knife_2050 is on fryingpan_2083. knife_2050 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to grab a spatula and use it to fry the banana slices properly. The current steps used a knife instead of a spatula.
##############################
From agent.py
Human Instruction: You need to grab a spatula and use it to fry the banana slices properly. The current steps used a knife instead of a spatula.

Human Guidance: Turn on the stove and add some oil.
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_banana_2011 around fridge_289.
Action 5: Grab food_banana_2011.
Action 6: Walk to cutting_board_2051.
Action 7: Put food_banana_2011 on cutting_board_2051.
Action 8: look for knife_2050 around cutting_board_2051.
Action 9: Walk to knife_2050.
Action 10: Grab knife_2050.
Action 11: Walk to food_banana_2011.
Action 12: Cut food_banana_2011.
Action 13: Walk to oil_2079.
Action 14: Grab oil_2079.
Action 15: Walk to fryingpan_2083.
Action 16: Put oil_2079 into fryingpan_2083.
Action 17: Walk to stove_2065.
Action 18: Switch on stove_2065.
Action 19: Walk to food_banana_2011.
Action 20: Grab food_banana_2011.
Action 21: Walk to fryingpan_2083.
Action 22: Put food_banana_2011 into fryingpan_2083.
Action 23: Grab fryingpan_2083.
Action 24: Walk to stove_2065.
Action 25: Put fryingpan_2083 on stove_2065.
Action 26: Put knife_2050 on fryingpan_2083.
Action 27: Grab knife_2050.
Action 28: Put knife_2050 on fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
def heated(oil:item):
    # Function to check if the oil is heated
    symbol heated= is_on(oil) # Assuming heated oil is equivalent to being onon a heat source like stove
    return heated

behavior fry_banana_slices(frying_pan:item, banana:item):
    body:
        achieve cut(banana) # Assuming the banana slices need to be cut for frying
        achieve_once inside(banana, frying_pan) # Place the banana slices in the frying pan
        achieve_once close_char(char, frying_pan) # Remain close to the frying pan during frying

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and inside(oil_2079, frying_pan)
        # Select frying pan to fry the banana slices
        
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the bananas to be fried

        if heated(oil_2079):
            fry_banana_slices(frying_pan, banana)
        else:
            # if oil is not heated, observe if stove is on and oil is hot
            observe(stove_2065, "is the stove on and heating the oil")
            if heated(oil_2079): # If oil is heated, fry
                fry_banana_slices(frying_pan, banana)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: oil_2079; available variables: [Variable<frying_pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#goal_representation
 
def heated(oil:item):
    # Function to check if the oil is heated
    symbol heated= is_on(oil) # Assuming heated oil is equivalent to being on a heat source like stove
    return heated

behavior fry_banana_slices(frying_pan:item, banana:item):
    body:
        achieve cut(banana) # Assuming the banana slices need to be cut for frying
        achieve_once inside(banana, frying_pan) # Place the banana slices in the frying pan
        achieve_once close_char(char, frying_pan) # Remain close to the frying pan during frying

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select frying pan to fry the banana slices
        
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the bananas to be fried

        bind oil: item where:
            is_oil(oil) and inside(oil, frying_pan)
        # Bind the oil in the frying pan

        if heated(oil):
            fry_banana_slices(frying_pan, banana)
        else:
            # if oil is not heated, observe if stove is on and oil is hot
            observe(stove_2065, "is the stove on and heating the oil")
            if heated(oil): # If oil is heated, fry
                fry_banana_slices(frying_pan, banana)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#goal_representation
 
def heated(oil:item):
    # Function to check if the oil is heated
    symbol heated= is_on(oil) # Assuming heated oil is equivalent to being on a heat source like stove
    return heated

behavior fry_banana_slices(frying_pan:item, banana:item):
    body:
        achieve cut(banana) # Assuming the banana slices need to be cut for frying
        achieve_once inside(banana, frying_pan) # Place the banana slices in the frying pan
        achieve_once close_char(char, frying_pan) # Remain close to the frying pan during frying

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select frying pan to fry the banana slices

        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the bananas to be fried

        bind oil: item where:
            is_oil(oil) and inside(oil, frying_pan)
        # Bind the oil in the frying pan

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Bind the stove and check if it is on

        if heated(oil):
            fry_banana_slices(frying_pan, banana)
        else:
            # if oil is not heated, observe if stove is on and oil is hot
            observe(stove, "is the stove on and heating the oil")
            if heated(oil): # If oil is heated, fry
                fry_banana_slices(frying_pan, banana)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def heated(oil:item):
    # Function to check if the oil is heated
    symbol heated= is_on(oil) # Assuming heated oil is equivalent to being on a heat source like stove
    return heated

behavior fry_banana_slices(frying_pan:item, banana:item):
    body:
        achieve cut(banana) # Assuming the banana slices need to be cut for frying
        achieve_once inside(banana, frying_pan) # Place the banana slices in the frying pan
        achieve_once close_char(char, frying_pan) # Remain close to the frying pan during frying

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select frying pan to fry the banana slices

        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the bananas to be fried

        bind oil: item where:
            is_oil(oil) and inside(oil, frying_pan)
        # Bind the oil in the frying pan

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Bind the stove and check if it is on

        if heated(oil):
            fry_banana_slices(frying_pan, banana)
        else:
            # if oil is not heated, observe if stove is on and oil is hot
            observe(stove, "is the stove on and heating the oil")
            if heated(oil): # If oil is heated, fry
                fry_banana_slices(frying_pan, banana)

##############################
From agent.py-> find a plan in act()
switchoff_executor(stove_2065)open_executor(stove_2065)obs(stove_2065, is the stove on and heating the oil)
##############################
From agent.py
switchoff_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned off. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is opened. 
##############################
From agent.py
obs(stove_2065, is the stove on and heating the oil)
Get this information:  stove_2065 is on kitchen_counter_230. stove_2065 is inside dining_room_201. fryingpan_2083 is on stove_2065. stove_2065 is close to kitchen_counter_230. stove_2065 is close to character_65. stove_2065 is close to fryingpan_2083. stove_2065 is OFF. stove_2065 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to grab a spatula and properly fry the banana slices. The current steps used a knife instead of a spatula for frying. Additionally, ensure that the stove is switched on to heat the oil properly before frying.
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_banana_2011)', 'cut_executor(food_banana_2011)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_banana_2011, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'put_executor(knife_2050, fryingpan_2083)', 'grab_executor(knife_2050)', 'put_executor(knife_2050, fryingpan_2083)', 'switchoff_executor(stove_2065)', 'open_executor(stove_2065)']
Time info:
Time consume: 466 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 0
goal generate times: 17
goal correct times: 5
action_num: 28

Task complete rate:
Keystate: k1 - Requires: 1 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
