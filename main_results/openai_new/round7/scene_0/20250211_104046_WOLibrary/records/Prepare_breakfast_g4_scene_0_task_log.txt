From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta and cook the chicken.', '2. Mix the pasta and chicken together.', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_dry_pasta_2042_around_kitchen_counter_230(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        achieve has_water(pot)
        achieve_once is_on(stove)
        # Boil the pasta inside the pot on the stove

behavior cook_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(chicken, fryingpan)
        achieve_once is_on(stove)
        # Cook the chicken in the frying pan on the stove

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling pasta

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan for cooking chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        boil_pasta(pasta, pot, stove)
        cook_chicken(chicken, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        achieve has_water(pot)
        achieve_once is_on(stove)
        # Boil the pasta inside the pot on the stove

behavior cook_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(chicken, fryingpan)
        achieve_once is_on(stove)
        # Cook the chicken in the frying pan on the stove

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling pasta

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan for cooking chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        boil_pasta(pasta, pot, stove)
        cook_chicken(chicken, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(kitchen_counter_230)exp(dry_pasta_2042, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)exp(fryingpan_2083, stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
exp(dry_pasta_2042, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)
##############################
From agent.py
exp(dry_pasta_2042, kitchen_counter_230)
Fail to find dry_pasta_2042 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(dry_pasta_2042, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(dry_pasta_2042, cupboard_229)
Fail to find dry_pasta_2042 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(shower_36)exp(dry_pasta_2042, shower_36)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)
##############################
From agent.py
walk_executor(shower_36)
Robot find: Robot is close to the shower_36. 
##############################
From agent.py
exp(dry_pasta_2042, shower_36)
Fail to find dry_pasta_2042 around shower_36. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_234)exp(dry_pasta_2042, wallshelf_234)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)
##############################
From agent.py
walk_executor(wallshelf_234)
Robot find: Robot is close to the wallshelf_234. 
##############################
From agent.py
exp(dry_pasta_2042, wallshelf_234)
Fail to find dry_pasta_2042 around wallshelf_234. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_235)exp(dry_pasta_2042, wallshelf_235)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)
##############################
From agent.py
walk_executor(wallshelf_235)
Robot find: Robot is close to the wallshelf_235. 
##############################
From agent.py
exp(dry_pasta_2042, wallshelf_235)
Fail to find dry_pasta_2042 around wallshelf_235. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2051)exp(dry_pasta_2042, cutting_board_2051)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find dry_pasta_2042 ?
Answer: Go to the dining room (dining_room_201). Inside the dining room, find the fridge labeled as fridge_289. Open the fridge. The dry pasta (dry_pasta_2042) is inside the fridge_289.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining room (dining_room_201). Inside the dining room, find the fridge labeled as fridge_289. Open the fridge. The dry pasta (dry_pasta_2042) is inside the fridge_289.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for pot_2069 around stove_2065.
Action 4: look for dry_pasta_2042 around kitchen_counter_230.
Action 5: Walk to cupboard_229.
Action 6: Open cupboard_229.
Action 7: look for dry_pasta_2042 around cupboard_229.
Action 8: Walk to shower_36.
Action 9: look for dry_pasta_2042 around shower_36.
Action 10: Walk to wallshelf_234.
Action 11: look for dry_pasta_2042 around wallshelf_234.
Action 12: Walk to wallshelf_235.
Action 13: look for dry_pasta_2042 around wallshelf_235.
Action 14: Walk to cutting_board_2051.

##############################
From agent.py
exp(dry_pasta_2042, cutting_board_2051)
Fail to find dry_pasta_2042 around cutting_board_2051. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(dry_pasta_2042, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(dry_pasta_2042, fridge_289)
Find dry_pasta_2042. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(dry_pasta_2042)
Robot find: Robot is close to the fridge_289. Robot is close to the dry_pasta_2042. 
##############################
From agent.py
grab_executor(dry_pasta_2042)
Robot find: Robot is close to the fridge_289. Robot is close to the dry_pasta_2042. Grabbing dry_pasta_2042 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(dry_pasta_2042, pot_2069)
Robot find: Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close dry_pasta_2042. dry_pasta_2042 is close pot_2069. dry_pasta_2042 is inside pot_2069. dry_pasta_2042 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the pot_2069. Robot is close to the food_chicken_2017. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_chicken_2017, fryingpan_2083)
Robot find: Robot is close to the pot_2069. Robot is close to the food_chicken_2017. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_chicken_2017 is inside fryingpan_2083. fryingpan_2083 is close food_chicken_2017. food_chicken_2017 is close fryingpan_2083. food_chicken_2017 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that there is water in the pot for boiling the pasta ("has_water(pot)").
##############################
From agent.py
Human Instruction: The robot needs to ensure that there is water in the pot for boiling the pasta ("has_water(pot)").

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for pot_2069 around stove_2065.
Action 4: look for dry_pasta_2042 around kitchen_counter_230.
Action 5: Walk to cupboard_229.
Action 6: Open cupboard_229.
Action 7: look for dry_pasta_2042 around cupboard_229.
Action 8: Walk to shower_36.
Action 9: look for dry_pasta_2042 around shower_36.
Action 10: Walk to wallshelf_234.
Action 11: look for dry_pasta_2042 around wallshelf_234.
Action 12: Walk to wallshelf_235.
Action 13: look for dry_pasta_2042 around wallshelf_235.
Action 14: Walk to cutting_board_2051.
Action 15: look for dry_pasta_2042 around cutting_board_2051.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for dry_pasta_2042 around fridge_289.
Action 20: Walk to pot_2069.
Action 21: Open pot_2069.
Action 22: Walk to dry_pasta_2042.
Action 23: Grab dry_pasta_2042.
Action 24: Walk to pot_2069.
Action 25: Put dry_pasta_2042 into pot_2069.
Action 26: Grab pot_2069.
Action 27: Walk to faucet_43.
Action 28: Switch on faucet_43.
Action 29: Switch off faucet_43.
Action 30: Walk to stove_2065.
Action 31: Switch on stove_2065.
Action 32: Walk to food_chicken_2017.
Action 33: Grab food_chicken_2017.
Action 34: Walk to fryingpan_2083.
Action 35: Put food_chicken_2017 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_the_pasta(pasta:item, pot:item, stove:item, faucet:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(pasta, pot)
        # Add dry pasta to the pot
        achieve_once closed(pot)
        # Close the pot with pasta and water inside
        achieve_once is_on(stove)
        # Turn on the stove for boiling

behavior cook_the_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(chicken, fryingpan)
        # Place chicken in the frying pan
        achieve_once is_on(stove)
        # Ensure the stove is on to cook the chicken

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta
        bind pot: item where:
            is_pot(pot)
        # Select an available pot
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select a stove that is turned on
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        boil_the_pasta(pasta, pot, stove, faucet)

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken as the food item
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        cook_the_chicken(chicken, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_the_pasta(pasta:item, pot:item, stove:item, faucet:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(pasta, pot)
        # Add dry pasta to the pot
        achieve_once closed(pot)
        # Close the pot with pasta and water inside
        achieve_once is_on(stove)
        # Turn on the stove for boiling

behavior cook_the_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(chicken, fryingpan)
        # Place chicken in the frying pan
        achieve_once is_on(stove)
        # Ensure the stove is on to cook the chicken

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta
        bind pot: item where:
            is_pot(pot)
        # Select an available pot
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select a stove that is turned on
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        boil_the_pasta(pasta, pot, stove, faucet)

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken as the food item
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        cook_the_chicken(chicken, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
close_executor(pot_2069)
##############################
From agent.py
close_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_chicken_2017. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. pot_2069 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure there is water in the pot for boiling the pasta, as this step has not been confirmed. Additionally, the stove has been turned on, but there is no indication that either the pasta is actually boiling or that the chicken is being cooked on the stove. Further actions are required to verify this.
##############################
From agent.py
Human Instruction: You need to ensure there is water in the pot for boiling the pasta, as this step has not been confirmed. Additionally, the stove has been turned on, but there is no indication that either the pasta is actually boiling or that the chicken is being cooked on the stove. Further actions are required to verify this.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for pot_2069 around stove_2065.
Action 4: look for dry_pasta_2042 around kitchen_counter_230.
Action 5: Walk to cupboard_229.
Action 6: Open cupboard_229.
Action 7: look for dry_pasta_2042 around cupboard_229.
Action 8: Walk to shower_36.
Action 9: look for dry_pasta_2042 around shower_36.
Action 10: Walk to wallshelf_234.
Action 11: look for dry_pasta_2042 around wallshelf_234.
Action 12: Walk to wallshelf_235.
Action 13: look for dry_pasta_2042 around wallshelf_235.
Action 14: Walk to cutting_board_2051.
Action 15: look for dry_pasta_2042 around cutting_board_2051.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for dry_pasta_2042 around fridge_289.
Action 20: Walk to pot_2069.
Action 21: Open pot_2069.
Action 22: Walk to dry_pasta_2042.
Action 23: Grab dry_pasta_2042.
Action 24: Walk to pot_2069.
Action 25: Put dry_pasta_2042 into pot_2069.
Action 26: Grab pot_2069.
Action 27: Walk to faucet_43.
Action 28: Switch on faucet_43.
Action 29: Switch off faucet_43.
Action 30: Walk to stove_2065.
Action 31: Switch on stove_2065.
Action 32: Walk to food_chicken_2017.
Action 33: Grab food_chicken_2017.
Action 34: Walk to fryingpan_2083.
Action 35: Put food_chicken_2017 into fryingpan_2083.
Action 36: Close pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_fork_2081_around_tvstand_225(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(fork,tvstand_instance)
        else:
            exp(fork,tvstand_instance)
    eff:
        unknown[fork]=False
        close[fork,tvstand_instance]=True
        close[tvstand_instance,fork]=True
    

behavior find_bowl_2072_around_cup_2063(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2063
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(bowl,cup_instance)
        else:
            exp(bowl,cup_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cup_instance]=True
        close[cup_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if the pot has water
    symbol has_water_inside=has_water(pot)
    return has_water_inside

def is_chicken_cooked(pan:item):
    # Function to check if the chicken is cooked in the frying pan
    symbol food_chicken_cooked=exists o: item : (is_food_chicken(o) and inside(o, pan) and not raw(o))
    return food_chicken_cooked

behavior boil_pasta(pot:item):
    body:
        achieve has_water(pot) # Fill the pot with water
        achieve is_on(stove)   # Turn on the stove to boil the pasta
        achieve inside(item_by_id(dry_pasta_2042), pot) # Place dry pasta in the pot

behavior cook_chicken(pan:item):
    body:
        achieve inside(item_by_id(food_chicken_2017), pan) # Put chicken in the pan
        achieve is_on(stove) # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove to be used for boiling pasta and cooking chicken

        bind pot: item where:
            is_pot(pot)
        # Select the pot for boiling pasta

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan for cooking chicken

        if not has_water_in_pot(pot):
            achieve has_water(pot) # Ensure the pot has water

        if not is_chicken_cooked(fryingpan):
            cook_chicken(fryingpan) # Cook the chicken if its not cooked

        boil_pasta(pot) # Boil the pasta

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function raw not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_fork_2081_around_bench_228(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==228
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(fork,bench_instance)
        else:
            exp(fork,bench_instance)
    eff:
        unknown[fork]=False
        close[fork,bench_instance]=True
        close[bench_instance,fork]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_phone_2077_around_basket_for_clothes_2006(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(phone,basket_for_clothes_instance)
        else:
            exp(phone,basket_for_clothes_instance)
    eff:
        unknown[phone]=False
        close[phone,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,phone]=True
    

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if the pot has water
    symbol has_water_inside=has_water(pot)
    return has_water_inside

def is_chicken_cooked(pan:item):
    # Function to check if the chicken is cooked in the frying pan
    symbol food_chicken_cooked=exists o: item : (is_food_chicken(o) and inside(o, pan) and cut(o))
    return food_chicken_cooked

behavior boil_pasta(pot:item):
    body:
        achieve has_water(pot) # Fill the pot with water
        achieve is_on(stove)   # Turn on the stove to boil the pasta
        achieve inside(item_by_id(dry_pasta_2042), pot) # Place dry pasta in the pot

behavior cook_chicken(pan:item):
    body:
        achieve inside(item_by_id(food_chicken_2017), pan) # Put chicken in the pan
        achieve is_on(stove) # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove to be used for boiling pasta and cooking chicken

        bind pot: item where:
            is_pot(pot)
        # Select the pot for boiling pasta

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan for cooking chicken

        if not has_water_in_pot(pot):
            achieve has_water(pot) # Ensure the pot has water

        if not is_chicken_cooked(fryingpan):
            cook_chicken(fryingpan) # Cook the chicken if its not cooked

        boil_pasta(pot) # Boil the pasta

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_fork_2081_around_coffee_table_2068(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(fork,coffee_table_instance)
        else:
            exp(fork,coffee_table_instance)
    eff:
        unknown[fork]=False
        close[fork,coffee_table_instance]=True
        close[coffee_table_instance,fork]=True
    

behavior find_phone_2077_around_shower_38(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(phone,shower_instance)
        else:
            exp(phone,shower_instance)
    eff:
        unknown[phone]=False
        close[phone,shower_instance]=True
        close[shower_instance,phone]=True
    

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if the pot has water
    symbol has_water_inside=has_water(pot)
    return has_water_inside

def is_chicken_cooked(pan:item):
    # Function to check if the chicken is cooked in the frying pan
    symbol food_chicken_cooked=exists o: item : (is_food_chicken(o) and inside(o, pan) and cut(o))
    return food_chicken_cooked

behavior boil_pasta(pot:item, stove:item):
    body:
        achieve has_water(pot) # Fill the pot with water
        achieve is_on(stove)   # Turn on the stove to boil the pasta
        achieve inside(item_by_id(dry_pasta_2042), pot) # Place dry pasta in the pot

behavior cook_chicken(pan:item, stove:item):
    body:
        achieve inside(item_by_id(food_chicken_2017), pan) # Put chicken in the pan
        achieve is_on(stove) # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove to be used for boiling pasta and cooking chicken

        bind pot: item where:
            is_pot(pot)
        # Select the pot for boiling pasta

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan for cooking chicken

        if not has_water_in_pot(pot):
            achieve has_water(pot) # Ensure the pot has water

        if not is_chicken_cooked(fryingpan):
            cook_chicken(fryingpan, stove) # Cook the chicken if its not cooked

        boil_pasta(pot, stove) # Boil the pasta

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_bench_228(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==228
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(fork,bench_instance)
        else:
            exp(fork,bench_instance)
    eff:
        unknown[fork]=False
        close[fork,bench_instance]=True
        close[bench_instance,fork]=True
    

behavior find_phone_247_around_computer_417(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if the pot has water
    symbol has_water_pot = has_water(pot)
    return has_water_pot

def is_boiling(pot:item):
    # Function to check if the content of the pot are boiling
    symbol pot_boiling = is_on(pot)
    return pot_boiling

behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        if not has_water_in_pot(pot):
            observe(faucet, "Ensure water is added to the pot")
            achieve has_water(pot)

behavior bring_pot_to_boil(stove:item, pot:item):
    body:
        if not is_boiling(pot):
            achieve is_on(stove)
            # Make sure stove is on to boil the pot content

behavior cook_chicken(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)
        achieve_once is_on(fryingpan)
        # Cook the chicken in the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind food_chicken: item where:
            is_food_chicken(food_chicken)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        ensure_pot_has_water(pot, faucet)
        bring_pot_to_boil(stove, pot)
        cook_chicken(food_chicken, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_phone_2077_around_walllamp_350(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==350
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(phone,walllamp_instance)
        else:
            exp(phone,walllamp_instance)
    eff:
        unknown[phone]=False
        close[phone,walllamp_instance]=True
        close[walllamp_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
def water_in_pot(pot: item):
    # Function to check if the pot has water
    symbol has_water_in_pot=has_water(pot)
    return has_water_in_pot

def pot_on_stove(pot: item, stove: item):
    # Function to check if the pot is on the stove
    symbol pot_on_stove=on(pot, stove)
    return pot_on_stove

behavior boil_pasta_pot(pot:item, stove:item):
    body:
        achieve_once is_on(stove) # Ensure the stove is on
        if not water_in_pot(pot):
            achieve_once has_water(pot) # Fill the pot with water
        if not pot_on_stove(pot, stove):
            achieve_once on(pot, stove) # Place the pot on the stove

behavior cook_chicken(frying_pan: item, stove: item, chicken: item):
    body:
        achieve_once is_on(stove) # Ensure the stove is on
        achieve_once inside(chicken, frying_pan) # Place chicken in the frying pan

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind chicken: item where:
            is_food_chicken(chicken)
        
        boil_pasta_pot(pot, stove)
        cook_chicken(frying_pan, stove, chicken)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def water_in_pot(pot: item):
    # Function to check if the pot has water
    symbol has_water_in_pot=has_water(pot)
    return has_water_in_pot

def pot_on_stove(pot: item, stove: item):
    # Function to check if the pot is on the stove
    symbol pot_on_stove=on(pot, stove)
    return pot_on_stove

behavior boil_pasta_pot(pot:item, stove:item):
    body:
        achieve_once is_on(stove) # Ensure the stove is on
        if not water_in_pot(pot):
            achieve_once has_water(pot) # Fill the pot with water
        if not pot_on_stove(pot, stove):
            achieve_once on(pot, stove) # Place the pot on the stove

behavior cook_chicken(frying_pan: item, stove: item, chicken: item):
    body:
        achieve_once is_on(stove) # Ensure the stove is on
        achieve_once inside(chicken, frying_pan) # Place chicken in the frying pan

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind chicken: item where:
            is_food_chicken(chicken)
        
        boil_pasta_pot(pot, stove)
        cook_chicken(frying_pan, stove, chicken)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to confirm that there is water in pot_2069 for boiling the pasta, as this step has not been explicitly carried out or verified. Additionally, ensure the pasta is actually boiling and the chicken is actively being cooked on the stove.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_cup_2063(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2063
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(fork,cup_instance)
        else:
            exp(fork,cup_instance)
    eff:
        unknown[fork]=False
        close[fork,cup_instance]=True
        close[cup_instance,fork]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_pasta_and_chicken(pasta:item, chicken:item, pot:item):
    body:
        achieve_once inside(pasta, pot)
        # Ensure pasta is inside the pot
        achieve_once inside(chicken, pot)
        # Ensure chicken is inside the pot

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind pot: item where:
            is_pot(pot)
        # Select pot

        mix_pasta_and_chicken(pasta, chicken, pot)
        # Mix the pasta and chicken together in the pot

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior mix_pasta_and_chicken(pasta:item, chicken:item, pot:item):
    body:
        achieve_once inside(pasta, pot)
        # Ensure pasta is inside the pot
        achieve_once inside(chicken, pot)
        # Ensure chicken is inside the pot

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind pot: item where:
            is_pot(pot)
        # Select pot

        mix_pasta_and_chicken(pasta, chicken, pot)
        # Mix the pasta and chicken together in the pot

##############################
From agent.py-> find a plan in act()
open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the fryingpan_2083. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the dry_pasta_2042. Robot is close to the pot_2069. pot_2069 is close food_chicken_2017. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_bathroom_cabinet_40(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(bowl,bathroom_cabinet_instance)
        else:
            exp(bowl,bathroom_cabinet_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,bowl]=True
    

behavior find_plate_1000_around_table_226(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior serve_chicken_pasta(pasta:item, plate:item):
    body:
        achieve_once on(pasta, plate)
        # Place the chicken pasta on the plate

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food(chicken_pasta)
        # Select the chicken pasta

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        serve_chicken_pasta(chicken_pasta, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior serve_chicken_pasta(pasta:item, plate:item):
    body:
        achieve_once on(pasta, plate)
        # Place the chicken pasta on the plate

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food(chicken_pasta)
        # Select the chicken pasta

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        serve_chicken_pasta(chicken_pasta, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(plate_1000, table_226)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(plate_1000, table_226)
Fail to find plate_1000 around table_226. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(doorjamb_45)exp(plate_1000, doorjamb_45)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(doorjamb_45)
Robot find: mat_22, Robot is close to the doorjamb_45. 
##############################
From agent.py
exp(plate_1000, doorjamb_45)
Fail to find plate_1000 around doorjamb_45. 
##############################
From agent.py-> find a plan in act()
walk_executor(toaster_292)open_executor(toaster_292)exp(plate_1000, toaster_292)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(toaster_292)
Robot find: Robot is close to the toaster_292. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(toaster_292)
Robot find: Robot is close to the toaster_292. Robot is close to the kitchen_counter_230. toaster_292 is opened. 
##############################
From agent.py
exp(plate_1000, toaster_292)
Fail to find plate_1000 around toaster_292. 
##############################
From agent.py-> find a plan in act()
walk_executor(dresser_123)open_executor(dresser_123)exp(plate_1000, dresser_123)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(dresser_123)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py
open_executor(dresser_123)
Robot find: hanger_128, hanger_130, hanger_132, hanger_134, hanger_136, hanger_138, hanger_140, hanger_141, hanger_142, hanger_124, hanger_126, mat_173, Robot is close to the hanger_128. Robot is close to the hanger_130. Robot is close to the hanger_132. Robot is close to the hanger_134. Robot is close to the hanger_136. Robot is close to the hanger_138. Robot is close to the hanger_140. Robot is close to the hanger_141. Robot is close to the hanger_142. Robot is close to the closetdrawer_143. Robot is close to the closetdrawer_146. Robot is close to the closetdrawer_148. Robot is close to the closetdrawer_150. Robot is close to the closetdrawer_154. Robot is close to the closetdrawer_158. Robot is close to the closetdrawer_160. Robot is close to the dresser_123. Robot is close to the hanger_124. Robot is close to the hanger_126. dresser_123 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Go to the dining room labeled dining_room_201. Inside, locate sink_231. Plate_1000 is on sink_231.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to ensure there is water in the pot for boiling the pasta, as this step has not been confirmed. Additionally, the stove has been turned on, but there is no indication that either the pasta is actually boiling or that the chicken is being cooked on the stove. Further actions are required to verify this.
Go to the dining room labeled dining_room_201. Inside, locate sink_231. Plate_1000 is on sink_231.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for pot_2069 around stove_2065.
Action 4: look for dry_pasta_2042 around kitchen_counter_230.
Action 5: Walk to cupboard_229.
Action 6: Open cupboard_229.
Action 7: look for dry_pasta_2042 around cupboard_229.
Action 8: Walk to shower_36.
Action 9: look for dry_pasta_2042 around shower_36.
Action 10: Walk to wallshelf_234.
Action 11: look for dry_pasta_2042 around wallshelf_234.
Action 12: Walk to wallshelf_235.
Action 13: look for dry_pasta_2042 around wallshelf_235.
Action 14: Walk to cutting_board_2051.
Action 15: look for dry_pasta_2042 around cutting_board_2051.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for dry_pasta_2042 around fridge_289.
Action 20: Walk to pot_2069.
Action 21: Open pot_2069.
Action 22: Walk to dry_pasta_2042.
Action 23: Grab dry_pasta_2042.
Action 24: Walk to pot_2069.
Action 25: Put dry_pasta_2042 into pot_2069.
Action 26: Grab pot_2069.
Action 27: Walk to faucet_43.
Action 28: Switch on faucet_43.
Action 29: Switch off faucet_43.
Action 30: Walk to stove_2065.
Action 31: Switch on stove_2065.
Action 32: Walk to food_chicken_2017.
Action 33: Grab food_chicken_2017.
Action 34: Walk to fryingpan_2083.
Action 35: Put food_chicken_2017 into fryingpan_2083.
Action 36: Close pot_2069.
Action 37: Walk to stove_2065.
Action 38: Put pot_2069 on stove_2065.
Action 39: Open pot_2069.
Action 40: Walk to food_chicken_2017.
Action 41: Grab food_chicken_2017.
Action 42: Walk to pot_2069.
Action 43: Put food_chicken_2017 into pot_2069.
Action 44: Walk to table_226.
Action 45: look for plate_1000 around table_226.
Action 46: Walk to dishwasher_1001.
Action 47: Open dishwasher_1001.
Action 48: look for plate_1000 around dishwasher_1001.
Action 49: Walk to doorjamb_45.
Action 50: look for plate_1000 around doorjamb_45.
Action 51: Walk to toaster_292.
Action 52: Open toaster_292.
Action 53: look for plate_1000 around toaster_292.
Action 54: Walk to dresser_123.
Action 55: Open dresser_123.

##############################
From agent.py
exp(plate_1000, dresser_123)
Fail to find plate_1000 around dresser_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fridge_289. Grabbing food_steak_2008 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_steak_2008. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_steak_2008, plate_1000)
Robot find: Robot is close to the food_steak_2008. Robot is close to the plate_1000. Robot is close to the sink_231. food_steak_2008 is close plate_1000. plate_1000 is close food_steak_2008. food_steak_2008 is on plate_1000. food_steak_2008 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to find and grab the cooked chicken pasta and place it on the identified plate_1000. The current steps only describe identifying and using the plate for food_steak_2008 but do not mention placing the chicken pasta onto the plate.
##############################
From agent.py
Human Instruction: You need to find and grab the cooked chicken pasta and place it on the identified plate_1000. The current steps only describe identifying and using the plate for food_steak_2008 but do not mention placing the chicken pasta onto the plate.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for pot_2069 around stove_2065.
Action 4: look for dry_pasta_2042 around kitchen_counter_230.
Action 5: Walk to cupboard_229.
Action 6: Open cupboard_229.
Action 7: look for dry_pasta_2042 around cupboard_229.
Action 8: Walk to shower_36.
Action 9: look for dry_pasta_2042 around shower_36.
Action 10: Walk to wallshelf_234.
Action 11: look for dry_pasta_2042 around wallshelf_234.
Action 12: Walk to wallshelf_235.
Action 13: look for dry_pasta_2042 around wallshelf_235.
Action 14: Walk to cutting_board_2051.
Action 15: look for dry_pasta_2042 around cutting_board_2051.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for dry_pasta_2042 around fridge_289.
Action 20: Walk to pot_2069.
Action 21: Open pot_2069.
Action 22: Walk to dry_pasta_2042.
Action 23: Grab dry_pasta_2042.
Action 24: Walk to pot_2069.
Action 25: Put dry_pasta_2042 into pot_2069.
Action 26: Grab pot_2069.
Action 27: Walk to faucet_43.
Action 28: Switch on faucet_43.
Action 29: Switch off faucet_43.
Action 30: Walk to stove_2065.
Action 31: Switch on stove_2065.
Action 32: Walk to food_chicken_2017.
Action 33: Grab food_chicken_2017.
Action 34: Walk to fryingpan_2083.
Action 35: Put food_chicken_2017 into fryingpan_2083.
Action 36: Close pot_2069.
Action 37: Walk to stove_2065.
Action 38: Put pot_2069 on stove_2065.
Action 39: Open pot_2069.
Action 40: Walk to food_chicken_2017.
Action 41: Grab food_chicken_2017.
Action 42: Walk to pot_2069.
Action 43: Put food_chicken_2017 into pot_2069.
Action 44: Walk to table_226.
Action 45: look for plate_1000 around table_226.
Action 46: Walk to dishwasher_1001.
Action 47: Open dishwasher_1001.
Action 48: look for plate_1000 around dishwasher_1001.
Action 49: Walk to doorjamb_45.
Action 50: look for plate_1000 around doorjamb_45.
Action 51: Walk to toaster_292.
Action 52: Open toaster_292.
Action 53: look for plate_1000 around toaster_292.
Action 54: Walk to dresser_123.
Action 55: Open dresser_123.
Action 56: look for plate_1000 around dresser_123.
Action 57: Walk to sink_231.
Action 58: look for plate_1000 around sink_231.
Action 59: Walk to food_steak_2008.
Action 60: Grab food_steak_2008.
Action 61: Walk to plate_1000.
Action 62: Put food_steak_2008 on plate_1000.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_mat_173(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==173
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_chair_356_around_couch_352(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve_once on(chicken_pasta, plate)

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food(chicken_pasta) and is_food_chicken(chicken_pasta)
        # Select chicken pasta as food category
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select plate with ID 1000
        put_chicken_pasta_on_plate(chicken_pasta, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve_once on(chicken_pasta, plate)

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food(chicken_pasta) and is_food_chicken(chicken_pasta)
        # Select chicken pasta as food category
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select plate with ID 1000
        put_chicken_pasta_on_plate(chicken_pasta, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_chicken_2017, plate_1000)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_chicken_2017. food_chicken_2017 is close plate_1000. food_chicken_2017 is on plate_1000. food_chicken_2017 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the whole chicken pasta, not just the chicken, is placed on plate_1000. The current actions show only the placement of the food_chicken_2017 alone onto the plate without confirming the presence or transfer of the pasta as part of the chicken pasta meal. You should ensure the pasta from pot_2069 is also placed on the plate.
##############################
From agent.py
Human Instruction: You need to ensure that the whole chicken pasta, not just the chicken, is placed on plate_1000. The current actions show only the placement of the food_chicken_2017 alone onto the plate without confirming the presence or transfer of the pasta as part of the chicken pasta meal. You should ensure the pasta from pot_2069 is also placed on the plate.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for pot_2069 around stove_2065.
Action 4: look for dry_pasta_2042 around kitchen_counter_230.
Action 5: Walk to cupboard_229.
Action 6: Open cupboard_229.
Action 7: look for dry_pasta_2042 around cupboard_229.
Action 8: Walk to shower_36.
Action 9: look for dry_pasta_2042 around shower_36.
Action 10: Walk to wallshelf_234.
Action 11: look for dry_pasta_2042 around wallshelf_234.
Action 12: Walk to wallshelf_235.
Action 13: look for dry_pasta_2042 around wallshelf_235.
Action 14: Walk to cutting_board_2051.
Action 15: look for dry_pasta_2042 around cutting_board_2051.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for dry_pasta_2042 around fridge_289.
Action 20: Walk to pot_2069.
Action 21: Open pot_2069.
Action 22: Walk to dry_pasta_2042.
Action 23: Grab dry_pasta_2042.
Action 24: Walk to pot_2069.
Action 25: Put dry_pasta_2042 into pot_2069.
Action 26: Grab pot_2069.
Action 27: Walk to faucet_43.
Action 28: Switch on faucet_43.
Action 29: Switch off faucet_43.
Action 30: Walk to stove_2065.
Action 31: Switch on stove_2065.
Action 32: Walk to food_chicken_2017.
Action 33: Grab food_chicken_2017.
Action 34: Walk to fryingpan_2083.
Action 35: Put food_chicken_2017 into fryingpan_2083.
Action 36: Close pot_2069.
Action 37: Walk to stove_2065.
Action 38: Put pot_2069 on stove_2065.
Action 39: Open pot_2069.
Action 40: Walk to food_chicken_2017.
Action 41: Grab food_chicken_2017.
Action 42: Walk to pot_2069.
Action 43: Put food_chicken_2017 into pot_2069.
Action 44: Walk to table_226.
Action 45: look for plate_1000 around table_226.
Action 46: Walk to dishwasher_1001.
Action 47: Open dishwasher_1001.
Action 48: look for plate_1000 around dishwasher_1001.
Action 49: Walk to doorjamb_45.
Action 50: look for plate_1000 around doorjamb_45.
Action 51: Walk to toaster_292.
Action 52: Open toaster_292.
Action 53: look for plate_1000 around toaster_292.
Action 54: Walk to dresser_123.
Action 55: Open dresser_123.
Action 56: look for plate_1000 around dresser_123.
Action 57: Walk to sink_231.
Action 58: look for plate_1000 around sink_231.
Action 59: Walk to food_steak_2008.
Action 60: Grab food_steak_2008.
Action 61: Walk to plate_1000.
Action 62: Put food_steak_2008 on plate_1000.
Action 63: Walk to food_chicken_2017.
Action 64: Grab food_chicken_2017.
Action 65: Walk to plate_1000.
Action 66: Put food_chicken_2017 on plate_1000.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_mat_236(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==236
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve on(chicken_pasta, plate) # Place the chicken pasta on plate_1000

behavior ensure_chicken_pasta_complete(chicken:item, pasta:item, chicken_pasta:item):
    body:
        achieve_once inside(chicken, chicken_pasta) # Ensure the chicken is part of the combined chicken pasta
        achieve_once inside(pasta, chicken_pasta) # Ensure the pasta is part of the combined chicken pasta

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate]==1000
        # Select the plate with ID 1000

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2017
        # Select the chicken with ID 2017

        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot)
        # This assumes the pasta was cooked and made into chicken pasta

        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069

        bind chicken_pasta: item where:
            is_food_food(chicken_pasta) and inside(chicken, chicken_pasta) and inside(pasta, chicken_pasta)
        # Identify the chicken pasta as the item containing both chicken and pasta
        
        ensure_chicken_pasta_complete(chicken, pasta, chicken_pasta)
        put_chicken_pasta_on_plate(chicken_pasta, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<pasta: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_401_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#goal_representation
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve on(chicken_pasta, plate) # Place the chicken pasta on plate_1000

behavior ensure_chicken_pasta_complete(chicken:item, pasta:item, chicken_pasta:item):
    body:
        achieve_once inside(chicken, chicken_pasta) # Ensure the chicken is part of the combined chicken pasta
        achieve_once inside(pasta, chicken_pasta) # Ensure the pasta is part of the combined chicken pasta

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate]==1000
        # Select the plate with ID 1000

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2017
        # Select the chicken with ID 2017

        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069

        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot)
        # This assumes the pasta was cooked and made into chicken pasta

        bind chicken_pasta: item where:
            is_food_food(chicken_pasta) and inside(chicken, chicken_pasta) and inside(pasta, chicken_pasta)
        # Identify the chicken pasta as the item containing both chicken and pasta
        
        ensure_chicken_pasta_complete(chicken, pasta, chicken_pasta)
        put_chicken_pasta_on_plate(chicken_pasta, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_mat_236(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==236
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_cd_2075_around_ironing_board_2074(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(cd,ironing_board_instance)
        else:
            exp(cd,ironing_board_instance)
    eff:
        unknown[cd]=False
        close[cd,ironing_board_instance]=True
        close[ironing_board_instance,cd]=True
    

behavior find_dvd_player_2061_around_tvstand_225(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve_once on(chicken_pasta, plate)

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food_food(chicken_pasta) and inside(chicken_pasta, pot_2069)
        # Select chicken pasta from the pot

        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000

        place_chicken_pasta_on_plate(chicken_pasta, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot_2069; available variables: [Variable<chicken_pasta: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_236_around_mat_236(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==236
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_cd_2075_around_ironing_board_2074(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(cd,ironing_board_instance)
        else:
            exp(cd,ironing_board_instance)
    eff:
        unknown[cd]=False
        close[cd,ironing_board_instance]=True
        close[ironing_board_instance,cd]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#goal_representation
 
behavior place_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve_once on(chicken_pasta, plate)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069
        
        bind chicken_pasta: item where:
            is_food_food(chicken_pasta) and inside(chicken_pasta, pot)
        # Select chicken pasta from the pot

        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000

        place_chicken_pasta_on_plate(chicken_pasta, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_chair_106_around_coffee_table_2068(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(chair,coffee_table_instance)
        else:
            exp(chair,coffee_table_instance)
    eff:
        unknown[chair]=False
        close[chair,coffee_table_instance]=True
        close[coffee_table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_and_pasta_in_pot(pot:item):
    # Function to check if there is chicken and pasta together in the pot
    symbol has_chicken_and_pasta = exists o: item : ((is_food_chicken(o) or is_dry_pasta(o)) and inside(o, pot))
    return has_chicken_and_pasta

def is_empty_plate(plate:item):
    # Function to check if the plate is empty
    symbol empty_plate = not exists o: item : (inside(o, plate))
    return empty_plate

behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve_once on(chicken_pasta, plate)
        # Place the chicken pasta on the plate

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_chicken_and_pasta_in_pot(pot)
        # Select the pot containing chicken and pasta

        bind plate: item where:
            is_plate(plate) and is_empty_plate(plate)
        # Select the empty plate, ensuring its the correct one

        foreach o: item:
            if (is_food_chicken(o) or is_dry_pasta(o)) and inside(o, pot):
                # Place all chicken and pasta from the pot onto the plate
                put_chicken_pasta_on_plate(o, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 6226, column 37.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#goal_representation
 
def has_chicken_and_pasta_in_pot(pot:item):
    # Function to check if there is chicken and pasta together in the pot
    symbol has_chicken_and_pasta = exists o: item : (is_food_chicken(o) or is_dry_pasta(o)) and inside(o, pot)
    return has_chicken_and_pasta

def is_empty_plate(plate:item):
    # Function to check if the plate is empty
    symbol empty_plate = not exists o: item : (inside(o, plate))
    return empty_plate

behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve_once on(chicken_pasta, plate)
        # Place the chicken pasta on the plate

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_chicken_and_pasta_in_pot(pot)
        # Select the pot containing chicken and pasta

        bind plate: item where:
            is_plate(plate) and is_empty_plate(plate)
        # Select the empty plate, ensuring its the correct one

        foreach o: item:
            if (is_food_chicken(o) or is_dry_pasta(o)) and inside(o, pot):
                # Place all chicken and pasta from the pot onto the plate
                put_chicken_pasta_on_plate(o, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 6208, column 37.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#goal_representation
 
def has_chicken_and_pasta_in_pot(pot:item):
    # Function to check if there is chicken and pasta together in the pot
    symbol has_chicken_and_pasta = exists o: item : (is_food_chicken(o) or is_dry_pasta(o)) and inside(o, pot)
    return has_chicken_and_pasta

def is_empty_plate(plate:item):
    # Function to check if the plate is empty
    symbol empty_plate = not exists o: item : (inside(o, plate))
    return empty_plate

behavior put_chicken_pasta_on_plate(pot:item, plate:item):
    body:
        foreach o: item:
            if (is_food_chicken(o) or is_dry_pasta(o)) and inside(o, pot):
                achieve_once on(o, plate)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_chicken_and_pasta_in_pot(pot)

        bind plate: item where:
            is_plate(plate) and is_empty_plate(plate)

        put_chicken_pasta_on_plate(pot, plate)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. put the chicken pasta on a plate." ?
Answer: Put the pasta and chicken on a plate.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve_once on(chicken_pasta, plate)

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food_chicken(chicken_pasta) and inside(chicken_pasta, pot_2069)
        # Select the chicken pasta from the pot
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select plate with ID 1000
        place_chicken_pasta_on_plate(chicken_pasta, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_plate(chicken:item, pasta:item, plate:item):
    body:
        achieve_once on(chicken, plate)
        achieve_once on(pasta, plate)
        # Put both chicken and pasta on the specified plate

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and on(chicken, pot_2069)
        # Select the chicken that is inside pot_2069

        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot_2069)
        # Select the pasta that is inside pot_2069

        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with the ID 1000

        put_on_plate(chicken, pasta, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot_2069; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#goal_representation

behavior put_on_plate(chicken:item, pasta:item, plate:item):
    body:
        achieve_once on(chicken, plate)
        achieve_once on(pasta, plate)
        # Put both chicken and pasta on the specified plate

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with the ID 2069

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot)
        # Select the chicken that is inside pot_2069

        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot)
        # Select the pasta that is inside pot_2069

        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with the ID 1000

        put_on_plate(chicken, pasta, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve_once on(chicken_pasta, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000
        
        bind chicken_pasta: item where:
            is_food(chicken_pasta) and inside(chicken_pasta, pot_2069)
        # Select the chicken pasta inside the pot

        place_chicken_pasta_on_plate(chicken_pasta, plate)
        # Place the chicken pasta on the plate

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot_2069; available variables: [Variable<chicken_pasta: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_237_around_mat_237(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==237
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_cd_2075_around_ironing_board_2074(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(cd,ironing_board_instance)
        else:
            exp(cd,ironing_board_instance)
    eff:
        unknown[cd]=False
        close[cd,ironing_board_instance]=True
        close[ironing_board_instance,cd]=True
    

#goal_representation
 
behavior place_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve_once on(chicken_pasta, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000
        
        bind chicken_pasta: item where:
            is_food(chicken_pasta) and inside(chicken_pasta, pot)
        # Correct the selection to include any pot containing the pasta

        place_chicken_pasta_on_plate(chicken_pasta, plate)
        # Place the chicken pasta on the plate

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<chicken_pasta: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_chair_2004_around_coffee_table_2068(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(chair,coffee_table_instance)
        else:
            exp(chair,coffee_table_instance)
    eff:
        unknown[chair]=False
        close[chair,coffee_table_instance]=True
        close[coffee_table_instance,chair]=True
    

#goal_representation
 
behavior place_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve_once on(chicken_pasta, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000
        
        bind pot: item where:
            is_pot(pot) and inside(food_chicken_2017, pot) and inside(pasta, pot)
        # Correct the selection to include the pot containing both chicken and pasta

        bind chicken_pasta: item where:
            is_food(chicken_pasta) and inside(chicken_pasta, pot)
        # Correct the selection to include the mixed chicken and pasta from the pot

        place_chicken_pasta_on_plate(chicken_pasta, plate)
        # Place the chicken pasta on the plate

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(shower_36)', 'walk_executor(wallshelf_234)', 'walk_executor(wallshelf_235)', 'walk_executor(cutting_board_2051)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(dry_pasta_2042)', 'grab_executor(dry_pasta_2042)', 'walk_executor(pot_2069)', 'putin_executor(dry_pasta_2042, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_chicken_2017, fryingpan_2083)', 'close_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'open_executor(pot_2069)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'walk_executor(table_226)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(doorjamb_45)', 'walk_executor(toaster_292)', 'open_executor(toaster_292)', 'walk_executor(dresser_123)', 'open_executor(dresser_123)', 'walk_executor(sink_231)', 'walk_executor(food_steak_2008)', 'grab_executor(food_steak_2008)', 'walk_executor(plate_1000)', 'put_executor(food_steak_2008, plate_1000)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(plate_1000)', 'put_executor(food_chicken_2017, plate_1000)']
Time info:
Time consume: 688 seconds
Exp_helper query times: 2
Guidance query times: 1
library scale: 0
goal generate times: 14
goal correct times: 4
action_num: 52

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 11 steps
Keystate: k3 - Requires: 6 steps
Keystate: k4 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
