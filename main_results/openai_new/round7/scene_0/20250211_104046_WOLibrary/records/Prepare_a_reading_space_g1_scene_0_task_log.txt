From agent.py
Reset goals: The sub-goals are: 
['1. Identify the book you need to find.', '2. Place the book on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def identify_book(book:item):
    # Function to check if the item is a book
    symbol is_target_book= is_book(book)
    return is_target_book

behavior __goal__():
    body:
        if exists book: item : (identify_book(book)):
            # If we have already identified the book, we can directly approach it
            bind book: item where:
                identify_book(book)
            achieve close_char(char, book)

        else:
            # Check all items in the scene that have not been visited
            foreach item: item:
                if not visited(item):
                    observe(item, "Check if this item is the book Im looking for")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def identify_book(book:item):
    # Function to check if the item is a book
    symbol is_target_book= is_book(book)
    return is_target_book

behavior __goal__():
    body:
        if exists book: item : (identify_book(book)):
            # If we have already identified the book, we can directly approach it
            bind book: item where:
                identify_book(book)
            achieve close_char(char, book)

        else:
            # Check all items in the scene that have not been visited
            foreach item: item:
                if not visited(item):
                    observe(item, "Check if this item is the book Im looking for")

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cereal_2015_around_fridge_289(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cereal,fridge_instance)
        else:
            exp(food_cereal,fridge_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,fridge_instance]=True
        close[fridge_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        place_book_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. coffee_table_2068 is close book_2066. book_2066 is close coffee_table_2068. book_2066 is on coffee_table_2068. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffee table in home office.
Action History:
['walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2066, coffee_table_2068)']
Time info:
Time consume: 39 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 2
goal correct times: 0
action_num: 6

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
