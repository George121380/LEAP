From agent.py
Reset goals: The sub-goals are: 
['1. Boil the egg.', '2. Wash and prepare the vegetables and slice the lemon.', '3. Mix the boiled egg, vegetables, and lemon in a bowl to make the salad.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(pot, stove)
        # Place the pot on the stove
        achieve plugged(stove)
        # Ensure the stove is plugged in
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        boil_egg(egg, pot, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be boiled
        
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water (presumably placed on a heat source for boiling)

        bind stove: item where:
            is_stove(stove)
        # Select the stove to boil the egg

        achieve_once inside(egg, pot)
        # Place the egg inside the pot with water

        achieve_once is_on(stove)
        # Turn on the stove to boil the egg

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        achieve has_water(pot)
        achieve_once inside(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        boil_egg(egg, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        achieve has_water(pot)
        achieve_once inside(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        boil_egg(egg, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)open_executor(stove_2065)putin_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)open_executor(stove_2065)putin_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)open_executor(stove_2065)putin_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_egg_2020, pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_egg_2020. food_egg_2020 is inside pot_2069. food_egg_2020 is close pot_2069. food_egg_2020 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
putin_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is inside stove_2065. pot_2069 is close stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior wash_vegetables(vegetable:item):
    body:
        achieve clean(vegetable) # Achieve the state where the vegetable is clean

behavior cut_lemon(lemon:item):
    body:
        achieve cut(lemon) # Achieve the state where the lemon is cut

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and close_char(char, table)
        # Assume that vegetables and lemon are on a nearby table
        
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and on(vegetable, table):
                wash_vegetables(vegetable)
                # Wash each vegetable located on the table

        bind lemon: item where:
            is_food_lemon(lemon) and on(lemon, table)
        # Select the lemon on the table
        
        cut_lemon(lemon)
        # Cut the lemon

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_prepare_vegetables(vegetable:item):
    body:
        wash(vegetable) # Wash vegetable to ensure its clean
        achieve_once cut(vegetable) # Slice the vegetable

behavior slice_lemon(lemon:item):
    body:
        achieve_once cut(lemon) # Slice the lemon

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not cut(vegetable):
                wash_and_prepare_vegetables(vegetable) # Wash and slice all uncut vegetables

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon to slice
        slice_lemon(lemon)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_and_prepare_vegetables(vegetable:item):
    body:
        wash(vegetable) # Wash vegetable to ensure its clean
        achieve_once cut(vegetable) # Slice the vegetable

behavior slice_lemon(lemon:item):
    body:
        achieve_once cut(lemon) # Slice the lemon

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not cut(vegetable):
                wash_and_prepare_vegetables(vegetable) # Wash and slice all uncut vegetables

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon to slice
        slice_lemon(lemon)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(cutting_board_2051)put_executor(food_lemon_2028, cutting_board_2051)walk_executor(food_lemon_2028)cut_executor(food_lemon_2028)
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_vegetable_2041. food_vegetable_2041 is close cutting_board_2051. food_vegetable_2041 is on cutting_board_2051. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. 
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_lemon_2028, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_lemon_2028. food_lemon_2028 is close cutting_board_2051. food_lemon_2028 is on cutting_board_2051. food_lemon_2028 released by left hand. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_microwave_297(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(bowl,microwave_instance)
        else:
            exp(bowl,microwave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,microwave_instance]=True
        close[microwave_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(boiled_egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        achieve_once inside(boiled_egg, bowl) # Add boiled egg to the bowl
        achieve_once inside(vegetables, bowl) # Add vegetables to the bowl
        achieve_once inside(lemon, bowl) # Add lemon to the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)
        # Select the boiled egg
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the vegetables
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the lemon
        mix_ingredients(boiled_egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients_in_bowl(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        # Place the boiled egg inside the bowl
        achieve_once inside(vegetables, bowl)
        # Place the vegetables inside the bowl
        achieve_once inside(lemon, bowl)
        # Add the lemon to the bowl

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)
        # Select the boiled and cut egg

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        mix_ingredients_in_bowl(boiled_egg, vegetables, lemon, bowl)
        # Mix all ingredients in the bowl to make the salad

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(bowl:item, egg:item, vegetables:item, lemon:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(vegetables, bowl)
        achieve_once inside(lemon, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl for mixing
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select a cut boiled egg
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select cut vegetables
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select cut lemon
        mix_ingredients(bowl, egg, vegetables, lemon)
        # Mix the egg, vegetables, and lemon in the bowl

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. mix the boiled egg, vegetables, and lemon in a bowl to make the salad." ?
Answer: Put the cut boiled egg in a bowl. Clean and cut the lemon into pieces and add to the bowl. Wash and cut the vegetables into pieces and add them to the bowl. Mix everything together in the bowl to make the salad.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior mix_ingredients(bowl:item, egg:item, lemon:item, vegetables:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        bind bowl: item where:
            is_bowl(bowl)
        mix_ingredients(bowl, egg, lemon, vegetables)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_microwave_297(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(bowl,microwave_instance)
        else:
            exp(bowl,microwave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,microwave_instance]=True
        close[microwave_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_bowl(o:item, bowl:item):
    body:
        achieve_once inside(o, bowl) # Place the item inside the bowl

behavior mix_ingredients(bowl:item):
    body:
        # No specific state to maintain this mixes contents in the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the cut boiled egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables
        
        put_in_bowl(egg, bowl)
        put_in_bowl(lemon, bowl)
        put_in_bowl(vegetables, bowl)
        mix_ingredients(bowl)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_DEDENT', '') at line 5810, column 10.
Expected one of: 
	* _INDENT

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
behavior put_in_bowl(o:item, bowl:item):
    body:
        achieve_once inside(o, bowl) # Place the item inside the bowl

behavior mix_ingredients(bowl:item):
    body:
        # No specific state to maintain this mixes contents in the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the cut boiled egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables
        
        put_in_bowl(egg, bowl)
        put_in_bowl(lemon, bowl)
        put_in_bowl(vegetables, bowl)
        mix_ingredients(bowl)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_DEDENT', '') at line 5810, column 10.
Expected one of: 
	* _INDENT

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
behavior put_in_bowl(o:item, bowl:item):
    body:
        achieve_once inside(o, bowl) # Place the item inside the bowl

behavior mix_ingredients(bowl:item):
    body:
        # No specific state to maintain this mixes contents in the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the cut boiled egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables
        
        put_in_bowl(egg, bowl)
        put_in_bowl(lemon, bowl)
        put_in_bowl(vegetables, bowl)
        mix_ingredients(bowl)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior put_in_bowl(item: item, bowl: item):
    body:
        achieve_once inside(item, bowl)
        # Put the item in the bowl

behavior mix_salad(bowl: item):
    body:
        # Mix the contents of the bowl to make the salad

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind food_egg: item where:
            is_food_egg(food_egg) and cut(food_egg)
        # Select the cut boiled egg

        bind food_lemon: item where:
            is_food_lemon(food_lemon) and cut(food_lemon)
        # Select the cut lemon

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and cut(food_vegetable)
        # Select the cut vegetables

        put_in_bowl(food_egg, bowl)
        put_in_bowl(food_lemon, bowl)
        put_in_bowl(food_vegetable, bowl)
        mix_salad(bowl)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_DEDENT', '') at line 5810, column 10.
Expected one of: 
	* _INDENT

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
behavior put_in_bowl(item: item, bowl: item):
    body:
        achieve_once inside(item, bowl)

behavior mix_salad(bowl: item):
    body:
        achieve cut(bowl) # Ensure the items in the bowl are mixed or in a suitable state for mixing

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)

        bind food_egg: item where:
            is_food_egg(food_egg) and cut(food_egg)

        bind food_lemon: item where:
            is_food_lemon(food_lemon) and cut(food_lemon)

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and cut(food_vegetable)

        put_in_bowl(food_egg, bowl)
        put_in_bowl(food_lemon, bowl)
        put_in_bowl(food_vegetable, bowl)
        mix_salad(bowl)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(pot_2069)', 'putin_executor(food_egg_2020, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'putin_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'put_executor(food_vegetable_2041, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_vegetable_2041)', 'cut_executor(food_vegetable_2041)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(cutting_board_2051)', 'put_executor(food_lemon_2028, cutting_board_2051)', 'walk_executor(food_lemon_2028)', 'cut_executor(food_lemon_2028)']
Time info:
Time consume: 271 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 11
goal correct times: 1
action_num: 36

Task complete rate:
Keystate: k1 - Requires: 3 steps
Keystate: k2 - Requires: 12 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
