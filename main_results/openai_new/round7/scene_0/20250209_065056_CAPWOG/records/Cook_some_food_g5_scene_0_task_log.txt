From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the banana slices in the hot oil until golden brown.', '4. Remove the fried bananas and drain excess oil.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_kitchen_counter_230(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_banana(banana: item):
    body:
        if not inhand(banana):
            grab(banana)

behavior peel_banana(banana: item):
    body:
        if cuttable(banana) and not cut(banana):
            cuts(banana)
        
behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        
        grab_banana(banana)
        peel_banana(banana)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior grab_banana(banana: item):
    body:
        if not inhand(banana):
            grab(banana)

behavior peel_banana(banana: item):
    body:
        if cuttable(banana) and not cut(banana):
            cuts(banana)
        
behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        
        grab_banana(banana)
        peel_banana(banana)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_banana_2011, kitchen_counter_230)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_banana_2011, kitchen_counter_230)
Fail to find food_banana_2011 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_banana_2011, fridge_289)
Find food_banana_2011. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_banana_2011 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_banana_2011. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
cut_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_clothes_gloves_2046_around_closetdrawer_158(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_bowl_2071_around_microwave_297(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(bowl,microwave_instance)
        else:
            exp(bowl,microwave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,microwave_instance]=True
        close[microwave_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_oil(fryingpan:item):
    # Function to check if there is oil in a frying pan
    symbol contains_oil = exists o: item : (is_oil(o) and inside(o, fryingpan))
    return contains_oil

behavior heat_oil_on_stove(fryingpan:item, stove:item):
    body:
        if not close_char(char, fryingpan):
            walk_to(fryingpan)
        
        if not has_oil(fryingpan):
            # Assume oil is available to be grabbed and poured
            bind oil: item where:
                is_oil(oil) and grabbable(oil)
            grab(oil)
            put_inside(oil, fryingpan)
            empty_a_hand() # Assume the hand is freed after pouring oil
        
        if not close_char(char, stove):
            walk_to(stove)
        
        if is_off(stove):
            switch_on(stove)
        
        # Assume the frying pan is placed on the stove surface
        put_on(fryingpan, stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind a frying pan to heat oil in it
        
        bind stove: item where:
            is_stove(stove)
        # Bind a stove to heat the oil

        heat_oil_on_stove(fryingpan, stove)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_clothes_gloves_2046_around_closetdrawer_377(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_bowl_2072_around_pot_2069(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil_in_pan(oil:item, stove:item, pan:item):
    body:
        if not inside(oil, pan):
            put_on(oil, pan)

        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind pan: item where:
            is_fryingpan(pan)

        heat_oil_in_pan(oil, stove, pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_oil_in_pan(oil:item, stove:item, pan:item):
    body:
        if not inside(oil, pan):
            put_on(oil, pan)

        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind pan: item where:
            is_fryingpan(pan)

        heat_oil_in_pan(oil, stove, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)put_executor(oil_2079, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
put_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is on fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_slices(food:item, pan:item):
    body:
        if not inhand(food):
            grab(food)
        if not on(food, pan):
            put_on(food, pan)

behavior fry_slices(pan:item):
    body:
        observe(pan, "Check is banana slices are golden brown")
        # Check if the banana slices in the pan are golden brown
        if not on(food_banana_2011, pan): # Assumption: Banana slices are no longer on the pan when golden brown
            return # Banana slices are already golden brown
        # If not golden brown, further fry them to achieve desired result

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        grab_slices(food_banana_2011, frying_pan)
        fry_slices(frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_gloves_2046_around_closetdrawer_117(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_banana_slices(slices:item, banana:item):
    body:
        if cut(banana) and on(slices, banana):
            grab(slices)

behavior put_into_oil(slices:item, oil:item, pan:item):
    body:
        if on(oil, pan):
            put_on(slices, oil)

behavior fry_until_golden_brown(slices:item):
    body:
        # Simulate frying process here
        # No direct state or property for checking golden brown, assuming frying action
        touches(slices) # Assume that this action is part of the frying process (symbolic representation)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana

        bind slices: item where:
            is_food_fruit(slices) and cut(slices) and on(slices, banana)
        # Select the banana slices

        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        bind oil: item where:
            is_oil(oil) and on(oil, pan)
        # Select the oil that is currently in the pan

        if is_on(pan):
            grab_banana_slices(slices, banana)
            put_into_oil(slices, oil, pan)
            fry_until_golden_brown(slices)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_clothes_gloves_2046_around_basket_for_clothes_2006(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_sliced_bananas(sliced_bananas:item):
    body:
        if not inhand(sliced_bananas):
            grab(sliced_bananas) # Grab the banana slices in hand

behavior put_bananas_in_oil(sliced_bananas:item, fryingpan:item):
    body:
        if on(sliced_bananas, fryingpan) == False:
            put_on(sliced_bananas, fryingpan) # Put the banana slices into the hot oil in the frying pan

behavior fry_bananas_in_oil(sliced_bananas:item, fryingpan:item):
    body:
        observe(fryingpan,"Check if the banana slices are golden brown") 

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select the cut banana slices

        walk_to(sliced_bananas)
        grab_sliced_bananas(sliced_bananas)
        walk_to(fryingpan)
        put_bananas_in_oil(sliced_bananas, fryingpan)
        fry_bananas_in_oil(sliced_bananas, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_sliced_bananas(sliced_bananas:item):
    body:
        if not inhand(sliced_bananas):
            grab(sliced_bananas) # Grab the banana slices in hand

behavior put_bananas_in_oil(sliced_bananas:item, fryingpan:item):
    body:
        if on(sliced_bananas, fryingpan) == False:
            put_on(sliced_bananas, fryingpan) # Put the banana slices into the hot oil in the frying pan

behavior fry_bananas_in_oil(sliced_bananas:item, fryingpan:item):
    body:
        observe(fryingpan,"Check if the banana slices are golden brown") 

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select the cut banana slices

        walk_to(sliced_bananas)
        grab_sliced_bananas(sliced_bananas)
        walk_to(fryingpan)
        put_bananas_in_oil(sliced_bananas, fryingpan)
        fry_bananas_in_oil(sliced_bananas, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)put_executor(food_banana_2011, fryingpan_2083)obs(fryingpan_2083, Check if the banana slices are golden brown)
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_banana_2011 is close fryingpan_2083. fryingpan_2083 is close food_banana_2011. food_banana_2011 is on fryingpan_2083. food_banana_2011 released by left hand. 
##############################
From agent.py
obs(fryingpan_2083, Check if the banana slices are golden brown)
Get this information:  oil_2079 is on fryingpan_2083. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to kitchen_counter_230. fryingpan_2083 is close to oil_2079. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_banana_2011. fryingpan_2083 is on kitchen_counter_230. food_banana_2011 is on fryingpan_2083. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to verify whether the banana slices are golden brown. Currently, the observation only reported the presence of the food items and not their condition.
##############################
From agent.py
Human Instruction: The robot needs to verify whether the banana slices are golden brown. Currently, the observation only reported the presence of the food items and not their condition.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_banana_2011 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_banana_2011 around fridge_289.
Action 7: Grab food_banana_2011.
Action 8: Walk to cutting_board_2051.
Action 9: Put food_banana_2011 on cutting_board_2051.
Action 10: Walk to knife_2050.
Action 11: Grab knife_2050.
Action 12: Walk to food_banana_2011.
Action 13: Cut food_banana_2011.
Action 14: Walk to oil_2079.
Action 15: Grab oil_2079.
Action 16: Walk to fryingpan_2083.
Action 17: Put oil_2079 on fryingpan_2083.
Action 18: Walk to stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to food_banana_2011.
Action 21: Grab food_banana_2011.
Action 22: Walk to fryingpan_2083.
Action 23: Put food_banana_2011 on fryingpan_2083.
Action 24: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices_until_golden(o:item, stove:item):
    body:
        if not visited(o):
            observe(o, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind food_banana: item where:
            is_food_banana(food_banana)
        bind stove: item where:
            is_stove(stove)
        fry_banana_slices_until_golden(food_banana, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_banana_slices_until_golden(o:item, stove:item):
    body:
        if not visited(o):
            observe(o, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind food_banana: item where:
            is_food_banana(food_banana)
        bind stove: item where:
            is_stove(stove)
        fry_banana_slices_until_golden(food_banana, stove)

##############################
From agent.py-> find a plan in act()
obs(food_banana_2011, Check if the banana slices are golden brown)
##############################
From agent.py
obs(food_banana_2011, Check if the banana slices are golden brown)
Get this information:  food_banana_2011 is inside dining_room_201. food_banana_2011 is close to character_65. food_banana_2011 is close to fryingpan_2083. food_banana_2011 is on fryingpan_2083. food_banana_2011 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The sub-task requires the robot to fry the banana slices until they become golden brown. The robot needs to confirm the color of the banana slices, but current observations do not verify if they are golden brown. The robot should ensure the banana slices reach the desired golden brown state before completing the sub-task.
##############################
From agent.py
Human Instruction: The sub-task requires the robot to fry the banana slices until they become golden brown. The robot needs to confirm the color of the banana slices, but current observations do not verify if they are golden brown. The robot should ensure the banana slices reach the desired golden brown state before completing the sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_banana_2011 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_banana_2011 around fridge_289.
Action 7: Grab food_banana_2011.
Action 8: Walk to cutting_board_2051.
Action 9: Put food_banana_2011 on cutting_board_2051.
Action 10: Walk to knife_2050.
Action 11: Grab knife_2050.
Action 12: Walk to food_banana_2011.
Action 13: Cut food_banana_2011.
Action 14: Walk to oil_2079.
Action 15: Grab oil_2079.
Action 16: Walk to fryingpan_2083.
Action 17: Put oil_2079 on fryingpan_2083.
Action 18: Walk to stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to food_banana_2011.
Action 21: Grab food_banana_2011.
Action 22: Walk to fryingpan_2083.
Action 23: Put food_banana_2011 on fryingpan_2083.
Action 24: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.
Action 25: Observe around food_banana_2011 with the question of Check if the banana slices are golden brown.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fry_bananas_until_golden(banana_slices:item, fryingpan:item):
    body:
        if not visited(banana_slices):
            observe(banana_slices,"Check if the banana slices are golden brown")
        # Inspect banana slices to see if they are golden brown

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the cut banana slices

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        fry_bananas_until_golden(banana_slices, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_fryingpan_golden_brown(fryingpan:item):
    # Check if there are golden brown banana slices in the frying pan
    symbol is_golden_brown=exists o: item : (is_food_banana(o) and on(o, fryingpan) and visited(o))
    return is_golden_brown

behavior check_golden_brown_status(fryingpan:item):
    body:
        if not is_fryingpan_golden_brown(fryingpan):
            observe(fryingpan, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        check_golden_brown_status(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_bowl_2071_around_pot_2069(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

behavior find_clothes_gloves_2046_around_basket_for_clothes_2006(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
def are_bananas_golden_brown(fryingpan:item):
    # Function to check if the banana slices in the frying pan are golden brown
    symbol golden_brown=exists o: item : (is_food_banana(o) and on(o, fryingpan) and visited(o))
    return golden_brown

behavior fry_banana_slices(fryingpan:item, stove:item):
    body:
        if is_off(stove):
            switch_on(stove)
        # if the banana slices are not yet golden brown, observe them
        if not are_bananas_golden_brown(fryingpan):
            observe(fryingpan, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
            # Select a fryingpan

        fry_banana_slices(fryingpan, stove)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def confirm_golden_brown(banana_slices:item):
    # Function to confirm if the banana slices are golden brown
    symbol is_golden_brown=exists o: item : (is_food_banana(o) and observed_as_golden_brown(o))
    return is_golden_brown

behavior fry_banana_slices(fryingpan:item, banana_slices:item):
    body:
        if not confirm_golden_brown(banana_slices):
            observe(banana_slices, "Check if the banana slices are golden brown")
            # Check the color of banana slices

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind banana_slices: item where:
            is_food_banana(banana_slices)
        # Select banana slices

        fry_banana_slices(fryingpan, banana_slices)
        # Fry banana slices until golden brown


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def need_observation(fryingpan: item):
    # Function to check whether the observation is necessary by verifying if the bananas on the pan are not golden brown
    symbol observation_needed=not exists banana: item : (is_food_banana(banana) and on(banana, fryingpan) and visited(banana))
    return observation_needed

behavior check_golden_brown(fryingpan: item):
    body:
        if need_observation(fryingpan):
            observe(fryingpan, "Check if the banana slices are golden brown")

behavior fry_until_golden_brown(fryingpan: item):
    body:
        check_golden_brown(fryingpan)
        # Check if observation has been completed
        if exists banana: item : (is_food_banana(banana) and on(banana, fryingpan) and visited(banana)):
            observe(banana, "Confirm if the banana slices are golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        fry_until_golden_brown(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def is_golden_brown(banana_slices:item):
    # Function to check if the banana slices are golden brown
    symbol golden_brown=exists slice: item : (is_food(slice) and cut(slice) and on(slice, banana_slices))
    return golden_brown

behavior fry_banana_slices(frying_pan:item, banana_slices:item):
    body:
        if not is_golden_brown(banana_slices):
            observe(frying_pan, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices) and on(banana_slices, frying_pan)
        fry_banana_slices(frying_pan, banana_slices)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_golden_brown(banana_slices:item):
    # Function to check if the banana slices are golden brown
    symbol golden_brown=exists slice: item : (is_food(slice) and cut(slice) and on(slice, banana_slices))
    return golden_brown

behavior fry_banana_slices(frying_pan:item, banana_slices:item):
    body:
        if not is_golden_brown(banana_slices):
            observe(frying_pan, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices) and on(banana_slices, frying_pan)
        fry_banana_slices(frying_pan, banana_slices)

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Check if the banana slices are golden brown)
##############################
From agent.py
obs(fryingpan_2083, Check if the banana slices are golden brown)
Get this information:  oil_2079 is on fryingpan_2083. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to kitchen_counter_230. fryingpan_2083 is close to oil_2079. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_banana_2011. fryingpan_2083 is on kitchen_counter_230. food_banana_2011 is on fryingpan_2083. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to confirm that the banana slices in the frying pan are golden brown. As of now, observations indicate that the banana slices have been placed in the frying pan, but there is no confirmation that they have reached the desired golden brown state. The robot should continue to monitor the frying process and ensure the color of the banana slices reaches golden brown before completing this sub-task.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_fried_banana(o:item):
    # Function to check if the item is a fried banana
    return is_food_banana(o) and on(o, fryingpan) and visited(o)

behavior remove_and_drain_banana(o:item, pan:item):
    body:
        if on(o, pan):
            grab(o)
            put_close(o, pan)
            # Remove the banana from the frying pan and place it near it for draining

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the fryingpan
        foreach o: item:
            # Iterate over all items
            if is_fried_banana(o):
                remove_and_drain_banana(o, fryingpan)
                # Remove fried bananas from the pan to drain excess oil

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation

def is_golden_brown(banana_slices:item):
    # Function to check if banana slices are golden brown
    symbol golden_brown_found=exists o: item : (is_food_banana(o) and visited(o))
    return golden_brown_found

behavior remove_and_drain(banana_slices:item, fryingpan:item):
    body:
        if on(banana_slices, fryingpan):
            grab(banana_slices) # Grab the banana slices from the frying pan
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter)
            put_on(banana_slices, kitchen_counter) # Place the banana slices on the kitchen counter
            empty_a_hand() # Ensure the hand is free after putting down the banana slices

behavior __goal__():
    body:
        bind food_banana: item where:
            is_food_banana(food_banana) and not visited(food_banana)
        # Select banana slices
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and close_char(char, fryingpan)
        # Select the frying pan

        if not is_golden_brown(food_banana):
            observe(fryingpan,"Check if the banana slices are golden brown") # Verify the color of the banana slices
        
        if is_golden_brown(food_banana):
            remove_and_drain(food_banana, fryingpan) # Remove and drain the banana slices

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_golden_brown(banana_slices:item):
    # Function to check if banana slices are golden brown
    symbol golden_brown_found=exists o: item : (is_food_banana(o) and visited(o))
    return golden_brown_found

behavior remove_and_drain(banana_slices:item, fryingpan:item):
    body:
        if on(banana_slices, fryingpan):
            grab(banana_slices) # Grab the banana slices from the frying pan
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter)
            put_on(banana_slices, kitchen_counter) # Place the banana slices on the kitchen counter
            empty_a_hand() # Ensure the hand is free after putting down the banana slices

behavior __goal__():
    body:
        bind food_banana: item where:
            is_food_banana(food_banana) and not visited(food_banana)
        # Select banana slices
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and close_char(char, fryingpan)
        # Select the frying pan

        if not is_golden_brown(food_banana):
            observe(fryingpan,"Check if the banana slices are golden brown") # Verify the color of the banana slices
        
        if is_golden_brown(food_banana):
            remove_and_drain(food_banana, fryingpan) # Remove and drain the banana slices

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Check if the banana slices are golden brown)
##############################
From agent.py
obs(fryingpan_2083, Check if the banana slices are golden brown)
Get this information:  oil_2079 is on fryingpan_2083. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to kitchen_counter_230. fryingpan_2083 is close to oil_2079. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_banana_2011. fryingpan_2083 is on kitchen_counter_230. food_banana_2011 is on fryingpan_2083. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the banana slices in the frying pan are golden brown. Current observations do not confirm this. Once confirmed, you should grab the banana slices from the frying pan, place them on the kitchen counter, and ensure your hand is free after putting down the banana slices.
##############################
From agent.py
Human Instruction: You need to ensure that the banana slices in the frying pan are golden brown. Current observations do not confirm this. Once confirmed, you should grab the banana slices from the frying pan, place them on the kitchen counter, and ensure your hand is free after putting down the banana slices.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_banana_2011 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_banana_2011 around fridge_289.
Action 7: Grab food_banana_2011.
Action 8: Walk to cutting_board_2051.
Action 9: Put food_banana_2011 on cutting_board_2051.
Action 10: Walk to knife_2050.
Action 11: Grab knife_2050.
Action 12: Walk to food_banana_2011.
Action 13: Cut food_banana_2011.
Action 14: Walk to oil_2079.
Action 15: Grab oil_2079.
Action 16: Walk to fryingpan_2083.
Action 17: Put oil_2079 on fryingpan_2083.
Action 18: Walk to stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to food_banana_2011.
Action 21: Grab food_banana_2011.
Action 22: Walk to fryingpan_2083.
Action 23: Put food_banana_2011 on fryingpan_2083.
Action 24: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.
Action 25: Observe around food_banana_2011 with the question of Check if the banana slices are golden brown.
Action 26: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.
Action 27: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_napkin_2005(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind napkin_instance:item where:
            is_napkin(napkin_instance) and id[napkin_instance]==2005
        achieve close_char(char,napkin_instance)
        if can_open(napkin_instance):
            achieve_once open(napkin_instance)
            exp(bowl,napkin_instance)
        else:
            exp(bowl,napkin_instance)
    eff:
        unknown[bowl]=False
        close[bowl,napkin_instance]=True
        close[napkin_instance,bowl]=True
    

behavior find_plate_1000_around_sink_231(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(plate,sink_instance)
        else:
            exp(plate,sink_instance)
    eff:
        unknown[plate]=False
        close[plate,sink_instance]=True
        close[sink_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_golden(banana:item):
    # Function to check if the banana slices are golden brown
    symbol golden=exists b: item : is_food_banana(b) and on(b, fryingpan) and visited(fryingpan) # Ensure there is a visited frying pan and a banana on it
    return golden

behavior remove_and_drain_bananas(fryingpan:item, counter:item):
    body:
        foreach banana: item:
            # Drain golden brown bananas and ensure they are placed on the counter
            if is_food_banana(banana) and on(banana, fryingpan):
                grab(banana)
                put_on(banana, counter)
            
behavior ensure_hand_free():
    body:
        if not has_a_free_hand(char):
            empty_a_hand()

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind frying pan
        bind counter: item where:
            is_kitchen_counter(counter)
        # Bind kitchen counter

        if not is_banana_golden(fryingpan):
            observe(fryingpan,"Check if the banana slices are golden brown")
        
        if is_banana_golden(fryingpan):
            # If banana slices are golden, remove and drain them
            remove_and_drain_bananas(fryingpan, counter)
            ensure_hand_free()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def are_bananas_golden_brown():
    # Function to check if the banana slices are golden brown
    symbol golden_brown=exists o: item : visited(o) and is_food_banana(o) and close_char(char, o)
    return golden_brown

behavior remove_bananas_from_oil(banana:item, kitchen_counter:item):
    body:
        if not on(banana, kitchen_counter):
            put_on(banana, kitchen_counter)

behavior make_a_free_hand():
    body:
        if not has_a_free_hand(char):
            empty_a_hand()

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)

        while not are_bananas_golden_brown():
            observe(fryingpan,"Check if the banana slices are golden brown")
        
        remove_bananas_from_oil(banana, kitchen_counter)
        make_a_free_hand()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

behavior find_bowl_2071_around_pot_2069(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation

def is_bananas_golden_brown(pan:item):
    # Check if the banana slices in the frying pan are golden brown
    symbol golden_brown=exists banana: item : (is_food_banana(banana) and on(banana, pan) and visited(banana))
    return golden_brown

behavior remove_fried_bananas(pan:item, counter:item):
    body:
        foreach banana: item:
            if is_food_banana(banana) and on(banana, pan):
                walk_to(banana)
                grab(banana)
                put_on(banana, counter)
                empty_a_hand()

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        
        bind counter: item where:
            is_kitchen_counter(counter)

        if is_bananas_golden_brown(pan):
            remove_fried_bananas(pan, counter)
        else:
            observe(pan, "Check if the banana slices are golden brown")

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_bananas_golden_brown(pan:item):
    # Check if the banana slices in the frying pan are golden brown
    symbol golden_brown=exists banana: item : (is_food_banana(banana) and on(banana, pan) and visited(banana))
    return golden_brown

behavior remove_fried_bananas(pan:item, counter:item):
    body:
        foreach banana: item:
            if is_food_banana(banana) and on(banana, pan):
                walk_to(banana)
                grab(banana)
                put_on(banana, counter)
                empty_a_hand()

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        
        bind counter: item where:
            is_kitchen_counter(counter)

        if is_bananas_golden_brown(pan):
            remove_fried_bananas(pan, counter)
        else:
            observe(pan, "Check if the banana slices are golden brown")

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Check if the banana slices are golden brown)
##############################
From agent.py
obs(fryingpan_2083, Check if the banana slices are golden brown)
Get this information:  oil_2079 is on fryingpan_2083. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to kitchen_counter_230. fryingpan_2083 is close to oil_2079. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_banana_2011. fryingpan_2083 is on kitchen_counter_230. food_banana_2011 is on fryingpan_2083. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to confirm that the banana slices in the frying pan are golden brown. Once golden brown, grab the banana slices from the frying pan, place them on the kitchen counter, and ensure your hand is free after putting down the banana slices.
##############################
From agent.py
Human Instruction: You need to confirm that the banana slices in the frying pan are golden brown. Once golden brown, grab the banana slices from the frying pan, place them on the kitchen counter, and ensure your hand is free after putting down the banana slices.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_banana_2011 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_banana_2011 around fridge_289.
Action 7: Grab food_banana_2011.
Action 8: Walk to cutting_board_2051.
Action 9: Put food_banana_2011 on cutting_board_2051.
Action 10: Walk to knife_2050.
Action 11: Grab knife_2050.
Action 12: Walk to food_banana_2011.
Action 13: Cut food_banana_2011.
Action 14: Walk to oil_2079.
Action 15: Grab oil_2079.
Action 16: Walk to fryingpan_2083.
Action 17: Put oil_2079 on fryingpan_2083.
Action 18: Walk to stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to food_banana_2011.
Action 21: Grab food_banana_2011.
Action 22: Walk to fryingpan_2083.
Action 23: Put food_banana_2011 on fryingpan_2083.
Action 24: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.
Action 25: Observe around food_banana_2011 with the question of Check if the banana slices are golden brown.
Action 26: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.
Action 27: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.
Action 28: Observe around fryingpan_2083 with the question of Check if the banana slices are golden brown.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior remove_fried_bananas(banana:item, kitchen_counter:item):
    body:
        if not on(banana, kitchen_counter):
            put_on(banana, kitchen_counter)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the bananas from the frying pan
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        remove_fried_bananas(bananas, kitchen_counter)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior remove_fried_bananas(banana:item, kitchen_counter:item):
    body:
        if not on(banana, kitchen_counter):
            put_on(banana, kitchen_counter)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the bananas from the frying pan
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        remove_fried_bananas(bananas, kitchen_counter)

##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)put_executor(food_banana_2011, kitchen_counter_230)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
put_executor(food_banana_2011, kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_banana_2011. food_banana_2011 is close kitchen_counter_230. food_banana_2011 is on kitchen_counter_230. food_banana_2011 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_banana_2011)', 'cut_executor(food_banana_2011)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'put_executor(oil_2079, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'put_executor(food_banana_2011, fryingpan_2083)', 'grab_executor(food_banana_2011)', 'put_executor(food_banana_2011, kitchen_counter_230)']
Time info:
Time consume: 253 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 19
goal correct times: 0
action_num: 23

Task complete rate:
Keystate: k1 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
