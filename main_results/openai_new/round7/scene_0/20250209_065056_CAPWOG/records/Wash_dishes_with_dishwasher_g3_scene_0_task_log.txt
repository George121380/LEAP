From agent.py
Reset goals: The sub-goals are: 
['1. Place the bowls and plates into the dishwasher and start the washing cycle.', '2. Wash the forks by hand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_kitchen_counter_230(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(o: item, dishwasher: item):
    body:
        if not inside(o, dishwasher):
            put_inside(o, dishwasher)

behavior start_dishwasher(dishwasher: item):
    body:
        if open(dishwasher):
            closes(dishwasher)
        if is_off(dishwasher):
            switch_on(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        foreach o: item:
            if is_bowl(o) or is_plate(o) and dirty(o):
                load_dishwasher(o, dishwasher)
        start_dishwasher(dishwasher)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior load_dishwasher(o: item, dishwasher: item):
    body:
        if not inside(o, dishwasher):
            put_inside(o, dishwasher)

behavior start_dishwasher(dishwasher: item):
    body:
        if open(dishwasher):
            closes(dishwasher)
        if is_off(dishwasher):
            switch_on(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        foreach o: item:
            if is_bowl(o) or is_plate(o) and dirty(o):
                load_dishwasher(o, dishwasher)
        start_dishwasher(dishwasher)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(bowl_2071, kitchen_counter_230)walk_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Fail to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(bowl_2071, dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)exp(bowl_2072, dishwasher_1001)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(bowl_2071, dishwasher_1001)
Fail to find bowl_2071 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2071, cupboard_229)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(cupboard_229)exp(bowl_2072, cupboard_229)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(bowl_2071, cupboard_229)
Fail to find bowl_2071 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(cpuscreen_416)exp(bowl_2071, cpuscreen_416)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(cpuscreen_416)exp(bowl_2072, cpuscreen_416)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(cpuscreen_416)
Robot find: keyboard_415, headset_2076, chair_356, phone_2077, mouse_413, pencil_2001, Robot is close to the cpuscreen_416. Robot is close to the desk_357. 
##############################
From agent.py
exp(bowl_2071, cpuscreen_416)
Fail to find bowl_2071 around cpuscreen_416. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)exp(bowl_2071, oven_295)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(oven_295)exp(bowl_2072, oven_295)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
exp(bowl_2071, oven_295)
Fail to find bowl_2071 around oven_295. 
##############################
From agent.py-> find a plan in act()
walk_executor(tablelamp_98)exp(bowl_2071, tablelamp_98)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(tablelamp_98)exp(bowl_2072, tablelamp_98)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(tablelamp_98)
Robot find: pillow_183, chair_106, mat_173, pillow_182, drawing_176, Robot is close to the tablelamp_98. Robot is close to the nightstand_102. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2071 ?
Answer: Locate dining_room_201. Inside, you will find table_226. Bowl_2071 is on top of table_226. Look for a bowl on the table to identify bowl_2071.
Re-decompose: None

##############################
From agent.py
Human Instruction: Locate dining_room_201. Inside, you will find table_226. Bowl_2071 is on top of table_226. Look for a bowl on the table to identify bowl_2071.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to dishwasher_1001.
Action 4: Open dishwasher_1001.
Action 5: look for bowl_2071 around dishwasher_1001.
Action 6: Walk to cupboard_229.
Action 7: Open cupboard_229.
Action 8: look for bowl_2071 around cupboard_229.
Action 9: Walk to cpuscreen_416.
Action 10: look for bowl_2071 around cpuscreen_416.
Action 11: Walk to oven_295.
Action 12: Open oven_295.
Action 13: look for bowl_2071 around oven_295.
Action 14: Walk to tablelamp_98.

##############################
From agent.py
exp(bowl_2071, tablelamp_98)
Fail to find bowl_2071 around tablelamp_98. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(table_226)exp(bowl_2072, table_226)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
grab_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. Grabbing bowl_2071 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the bowl_2071. Robot is close to the dishwasher_1001. 
##############################
From agent.py
putin_executor(bowl_2071, dishwasher_1001)
Robot find: Robot is close to the bowl_2071. Robot is close to the dishwasher_1001. bowl_2071 is close dishwasher_1001. bowl_2071 is inside dishwasher_1001. dishwasher_1001 is close bowl_2071. bowl_2071 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
grab_executor(bowl_2072)
Robot find: Robot is close to the bowl_2072. Robot is close to the table_226. Grabbing bowl_2072 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the bowl_2072. Robot is close to the dishwasher_1001. Robot is close to the bowl_2071. 
##############################
From agent.py
putin_executor(bowl_2072, dishwasher_1001)
Robot find: Robot is close to the bowl_2072. Robot is close to the dishwasher_1001. Robot is close to the bowl_2071. bowl_2072 is close dishwasher_1001. bowl_2072 is inside dishwasher_1001. dishwasher_1001 is close bowl_2072. bowl_2072 released by right hand. 
##############################
From agent.py
close_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is closed. 
##############################
From agent.py
switchon_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_fork_dirty(fork:item):
    # Function to check if a fork is dirty
    symbol is_dirty=dirty(fork)
    return is_dirty

def has_forks(kitchen:item):
    # Function to check if there are forks in the kitchen
    symbol has_forks=exists o: item : (is_fork(o) and inside(o, kitchen) and is_fork_dirty(o))
    return has_forks

behavior wash_fork(fork:item):
    # Behavior to wash a dirty fork
    body:
        if is_fork_dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Select the kitchen counter
        foreach fork: item:
            # Find all forks in the kitchen and wash them
            if is_fork(fork) and inside(fork, kitchen) and is_fork_dirty(fork):
                wash_fork(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def observe_unvisited_forks():
    # A function to observe all unvisited forks to find those that are dirty
    foreach fork: item:
        if is_fork(fork) and dirty(fork) and not visited(fork):
            observe(fork, "Check if the fork is dirty and unvisited")

behavior wash_fork(fork:item):
    body:
        if dirty(fork):
            walk_to(fork)
            grab(fork)
            wash(fork)
            empty_a_hand()

behavior __goal__():
    body:
        observe_unvisited_forks()
        foreach fork: item:
            if is_fork(fork) and dirty(fork) and visited(fork):
                wash_fork(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_forks():
    # Function to check if there is a fork in the current location
    symbol has_fork=exists o: item : (is_fork(o) and close_char(char, o))
    return has_fork

behavior grab_and_wash_forks(fork:item):
    body:
        if dirty(fork):
            if not inhand(fork):
                grab(fork)
            wash(fork)
            # Wash the fork by hand

behavior __goal__():
    body:
        if not close_char(char, table_226):
            walk_to(table_226)
        # Approach the specific table to find forks

        if find_forks():
            foreach fork: item:
                # Iterate over forks close to character
                if is_fork(fork) and close_char(char, fork) and dirty(fork):
                    grab_and_wash_forks(fork)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_forks():
    # Function to check if there is a fork in the current location
    symbol has_fork=exists o: item : (is_fork(o) and close_char(char, o))
    return has_fork

behavior grab_and_wash_forks(fork:item):
    body:
        if dirty(fork):
            if not inhand(fork):
                grab(fork)
            wash(fork)
            # Wash the fork by hand

behavior __goal__():
    body:
        if not close_char(char, table_226):
            walk_to(table_226)
        # Approach the specific table to find forks

        if find_forks():
            foreach fork: item:
                # Iterate over forks close to character
                if is_fork(fork) and close_char(char, fork) and dirty(fork):
                    grab_and_wash_forks(fork)

##############################
From agent.py-> find a plan in act()
walk_executor(table_226)
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the table_226. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to wash the forks by hand. It should identify the forks present on the table, ensure they are dirty, and perform the washing action on them.
##############################
From agent.py
Human Instruction: The robot needs to wash the forks by hand. It should identify the forks present on the table, ensure they are dirty, and perform the washing action on them.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to dishwasher_1001.
Action 4: Open dishwasher_1001.
Action 5: look for bowl_2071 around dishwasher_1001.
Action 6: Walk to cupboard_229.
Action 7: Open cupboard_229.
Action 8: look for bowl_2071 around cupboard_229.
Action 9: Walk to cpuscreen_416.
Action 10: look for bowl_2071 around cpuscreen_416.
Action 11: Walk to oven_295.
Action 12: Open oven_295.
Action 13: look for bowl_2071 around oven_295.
Action 14: Walk to tablelamp_98.
Action 15: look for bowl_2071 around tablelamp_98.
Action 16: Walk to table_226.
Action 17: look for bowl_2071 around table_226.
Action 18: Walk to bowl_2071.
Action 19: Grab bowl_2071.
Action 20: Walk to dishwasher_1001.
Action 21: Put bowl_2071 into dishwasher_1001.
Action 22: Walk to bowl_2072.
Action 23: Grab bowl_2072.
Action 24: Walk to dishwasher_1001.
Action 25: Put bowl_2072 into dishwasher_1001.
Action 26: Close dishwasher_1001.
Action 27: Switch on dishwasher_1001.
Action 28: Walk to table_226.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_and_wash_dirty_forks_on_table(table:item):
    # Function to find and wash dirty forks on a specified table
    foreach fork: item:
        if is_fork(fork) and on(fork, table) and dirty(fork):
            wash(fork)

behavior evaluate_table_for_forks():
    body:
        foreach table: item:
            # Iterate over each table
            if is_table(table) and not visited(table):
                observe(table, "Check if there are dirty forks on the table")
                # Observe if there are dirty forks on the table

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and exists fork: item : (is_fork(fork) and on(fork, table) and dirty(fork))):
            # Check if there is a table with dirty forks based on available information
            bind table: item where:
                is_table(table) and exists fork: item : (is_fork(fork) and on(fork, table) and dirty(fork))
            # Bind a table that has dirty forks on it
            find_and_wash_dirty_forks_on_table(table)
            # Wash all dirty forks on this table
        else:
            # If no such table is found, evaluate each table for dirty forks
            evaluate_table_for_forks()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior identify_dirty_forks_on_table(table:item):
    body:
        foreach fork: item:
            if is_fork(fork) and on(fork, table) and dirty(fork):
                wash(fork) # Wash the fork

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        # Identify and wash all dirty forks located on the table
        identify_dirty_forks_on_table(table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior identify_dirty_forks_on_table(table:item):
    body:
        observe(table, "Check if there are any dirty forks on the table")

behavior wash_forks(fork:item):
    body:
        if dirty(fork):
            wash(fork) # Wash the dirty fork

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        identify_dirty_forks_on_table(table)
        
        foreach fork: item:
        # Iterate over all forks found on the table to wash them
            if is_fork(fork) and dirty(fork) and on(fork, table):
                wash_forks(fork)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior identify_dirty_forks_on_table(table:item):
    body:
        observe(table, "Check if there are any dirty forks on the table")

behavior wash_forks(fork:item):
    body:
        if dirty(fork):
            wash(fork) # Wash the dirty fork

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        identify_dirty_forks_on_table(table)
        
        foreach fork: item:
        # Iterate over all forks found on the table to wash them
            if is_fork(fork) and dirty(fork) and on(fork, table):
                wash_forks(fork)

##############################
From agent.py-> find a plan in act()
obs(table_226, Check if there are any dirty forks on the table)
##############################
From agent.py
obs(table_226, Check if there are any dirty forks on the table)
Get this information:  coffee_filter_2000 is on table_226. drawing_2003 is on table_226. table_226 is facing drawing_238. table_226 is facing drawing_239. table_226 is facing drawing_240. table_226 is facing drawing_241. table_226 is facing drawing_242. table_226 is facing drawing_243. table_226 is facing television_248. mat_236 is on table_226. fork_2080 is on table_226. table_226 is inside dining_room_201. table_226 is close to drawing_402. table_226 is close to drawing_403. table_226 is close to bowl_2071. table_226 is close to bowl_2072. table_226 is close to fork_2080. table_226 is close to fork_2081. table_226 is close to floor_202. table_226 is close to floor_203. table_226 is close to floor_204. table_226 is close to floor_205. table_226 is close to floor_206. table_226 is close to floor_207. table_226 is close to floor_208. table_226 is close to coffee_filter_2000. table_226 is close to wall_210. table_226 is close to wall_211. table_226 is close to wall_212. table_226 is close to wall_213. table_226 is close to wall_214. table_226 is close to drawing_2003. table_226 is close to ceilinglamp_224. table_226 is close to bench_227. table_226 is close to bench_228. table_226 is close to wallshelf_235. table_226 is close to mat_236. table_226 is close to mat_237. table_226 is close to drawing_241. table_226 is close to drawing_242. table_226 is close to drawing_243. table_226 is close to character_65. fork_2081 is on table_226. table_226 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to wash the forks (fork_2080 and fork_2081) by hand, ensuring they are dirty as observed.
##############################
From agent.py
Human Instruction: The robot needs to wash the forks (fork_2080 and fork_2081) by hand, ensuring they are dirty as observed.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to dishwasher_1001.
Action 4: Open dishwasher_1001.
Action 5: look for bowl_2071 around dishwasher_1001.
Action 6: Walk to cupboard_229.
Action 7: Open cupboard_229.
Action 8: look for bowl_2071 around cupboard_229.
Action 9: Walk to cpuscreen_416.
Action 10: look for bowl_2071 around cpuscreen_416.
Action 11: Walk to oven_295.
Action 12: Open oven_295.
Action 13: look for bowl_2071 around oven_295.
Action 14: Walk to tablelamp_98.
Action 15: look for bowl_2071 around tablelamp_98.
Action 16: Walk to table_226.
Action 17: look for bowl_2071 around table_226.
Action 18: Walk to bowl_2071.
Action 19: Grab bowl_2071.
Action 20: Walk to dishwasher_1001.
Action 21: Put bowl_2071 into dishwasher_1001.
Action 22: Walk to bowl_2072.
Action 23: Grab bowl_2072.
Action 24: Walk to dishwasher_1001.
Action 25: Put bowl_2072 into dishwasher_1001.
Action 26: Close dishwasher_1001.
Action 27: Switch on dishwasher_1001.
Action 28: Walk to table_226.
Action 29: Observe around table_226 with the question of Check if there are any dirty forks on the table.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fork_by_hand(fork:item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        bind fork_2080: item where:
            id[fork_2080] == 2080 and is_fork(fork_2080)
        bind fork_2081: item where:
            id[fork_2081] == 2081 and is_fork(fork_2081)
        
        wash_fork_by_hand(fork_2080)
        wash_fork_by_hand(fork_2081)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation

def is_fork_dirty(fork:item):
    # Function to check if a fork is dirty
    return dirty(fork)

behavior wash_fork_hand(fork:item):
    body:
        if is_fork_dirty(fork):
            wash(fork) # Wash the fork by hand

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and id[fork1]==2080
        # Select fork with ID 2080
        bind fork2: item where:
            is_fork(fork2) and id[fork2]==2081
        # Select fork with ID 2081
        wash_fork_hand(fork1)
        # Wash fork1 by hand
        wash_fork_hand(fork2)
        # Wash fork2 by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fork(fork:item):
    body:
        if dirty(fork):
            wash(fork)

behavior wash_dirty_forks():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_fork(fork)

behavior __goal__():
    body:
        wash_dirty_forks()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wash_fork_by_hand(fork:item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        bind fork_2080: item where:
            is_fork(fork_2080) and id[fork_2080]==2080
        # Select fork_2080
        bind fork_2081: item where:
            is_fork(fork_2081) and id[fork_2081]==2081
        # Select fork_2081
        wash_fork_by_hand(fork_2080)
        wash_fork_by_hand(fork_2081)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wash_fork_by_hand(fork: item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        bind fork_2080: item where:
            is_fork(fork_2080)
        # Select fork_2080

        bind fork_2081: item where:
            is_fork(fork_2081)
        # Select fork_2081

        wash_fork_by_hand(fork_2080)
        wash_fork_by_hand(fork_2081)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fork(fork:item):
    body:
        if dirty(fork):
            wash(fork)  # Wash the fork by hand

behavior __goal__():
    body:
        bind fork_2080: item where:
            is_fork(fork_2080) and id[fork_2080]==2080
        # Select fork with ID 2080

        bind fork_2081: item where:
            is_fork(fork_2081) and id[fork_2081]==2081
        # Select fork with ID 2081

        wash_fork(fork_2080)
        wash_fork(fork_2081)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wash_forks(fork:item):
    body:
        if dirty(fork):
            wash(fork) # Wash the dirty fork by hand

behavior __goal__():
    body:
        bind fork_2080: item where:
            is_fork(fork_2080)
        # Select fork with ID 2080
        
        bind fork_2081: item where:
            is_fork(fork_2081)
        # Select fork with ID 2081
        
        wash_forks(fork_2080)
        wash_forks(fork_2081)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def dirty_fork(fork: item):
    # Determines if the fork is dirty
    symbol is_dirty=dirty(fork)
    return is_dirty

behavior hand_wash(fork:item):
    body:
        if not clean(fork):
            wash(fork)
            # Wash the item by hand to make it clean

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and id[fork1]==2080
        # Select the fork with ID 2080

        bind fork2: item where:
            is_fork(fork2) and id[fork2]==2081
        # Select the fork with ID 2081

        if dirty_fork(fork1):
            hand_wash(fork1)
            # Wash the fork by hand if it is dirty

        if dirty_fork(fork2):
            hand_wash(fork2)
            # Wash the fork by hand if it is dirty

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_fork_dirty(fork:item):
    # Function to check if a fork is dirty
    symbol dirty_fork=exists fork_d: item : (is_fork(fork_d) and dirty(fork_d) and fork_d==fork)
    return dirty_fork

behavior wash_forks(fork:item):
    body:
        if is_fork_dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        bind fork_2080: item where:
            is_fork(fork_2080) and id[fork_2080] == 2080
        # Select fork with ID 2080

        bind fork_2081: item where:
            is_fork(fork_2081) and id[fork_2081] == 2081
        # Select fork with ID 2081

        wash_forks(fork_2080)
        wash_forks(fork_2081)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def wash_forks(fork:item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        bind fork_2080: item where:
            is_fork(fork_2080)
        # Select fork_2080
        
        bind fork_2081: item where:
            is_fork(fork_2081)
        # Select fork_2081
        
        wash_forks(fork_2080)
        wash_forks(fork_2081)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fork_by_hand(fork:item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        bind fork_2080: item where:
            is_fork(fork_2080) and id[fork_2080]==2080
        # Select fork with ID 2080
        
        bind fork_2081: item where:
            is_fork(fork_2081) and id[fork_2081]==2081
        # Select fork with ID 2081
        
        wash_fork_by_hand(fork_2080)
        wash_fork_by_hand(fork_2081)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fork_hand(fork:item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        bind fork_1: item where:
            id[fork_1]==2080 and is_fork(fork_1)
        bind fork_2: item where:
            id[fork_2]==2081 and is_fork(fork_2)
        wash_fork_hand(fork_1)
        wash_fork_hand(fork_2)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation

def has_dirty_forks(forks:list):
    symbol has_dirty=exists fork: item : (is_fork(fork) and dirty(fork) and fork in forks)
    return has_dirty

behavior wash_fork_by_hand(fork:item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        bind fork_2080: item where:
            is_fork(fork_2080) and id[fork_2080]==2080
        bind fork_2081: item where:
            is_fork(fork_2081) and id[fork_2081]==2081
        forks = [fork_2080, fork_2081]
        if has_dirty_forks(forks):
            foreach fork: item:
                if fork in forks:
                    wash_fork_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wash_fork(fork:item):
    body:
        if dirty(fork):
            wash(fork)
            # Wash the fork by hand

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and id[fork1]==2080
        # Select fork with ID 2080
        
        bind fork2: item where:
            is_fork(fork2) and id[fork2]==2081
        # Select fork with ID 2081
        
        wash_fork(fork1)
        wash_fork(fork2)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if is_fork(fork) and dirty(fork):
            # Ensuring that only identified dirty forks are washed
            wash(fork)

behavior __goal__():
    body:
        bind fork_1: item where:
            is_fork(fork_1) and id[fork_1]==2080
        # Binding fork with id 2080

        bind fork_2: item where:
            is_fork(fork_2) and id[fork_2]==2081
        # Binding fork with id 2081

        wash_forks_by_hand(fork_1)
        wash_forks_by_hand(fork_2)
        # Washing both forks by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_dirty_fork(fork:item):
    symbol is_dirty=dirty(fork)
    return is_dirty

def is_not_clean(fork:item):
    symbol is_washed=clean(fork)
    return not is_washed

behavior wash_dirty_fork(fork:item):
    body:
        wash(fork)

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and id[fork1] == 2080
        bind fork2: item where:
            is_fork(fork2) and id[fork2] == 2081

        if has_dirty_fork(fork1) and is_not_clean(fork1):
            wash_dirty_fork(fork1)

        if has_dirty_fork(fork2) and is_not_clean(fork2):
            wash_dirty_fork(fork2)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_fork_dirty(fork:item):
    # Check if the fork is dirty
    symbol is_dirty=dirty(fork)
    return is_dirty

behavior wash_by_hand(fork:item):
    body:
        if is_fork_dirty(fork):
            wash(fork)
            # Wash the dirty fork by hand

behavior __goal__():
    body:
        bind fork_1: item where:
            is_fork(fork_1) and id[fork_1]==2080
        # Bind the first fork with id 2080

        bind fork_2: item where:
            is_fork(fork_2) and id[fork_2]==2081
        # Bind the second fork with id 2081

        wash_by_hand(fork_1)
        wash_by_hand(fork_2)
        # Wash both forks by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_sink_231(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(plate,sink_instance)
        else:
            exp(plate,sink_instance)
    eff:
        unknown[plate]=False
        close[plate,sink_instance]=True
        close[sink_instance,plate]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior hand_wash_fork(fork:item, sink:item):
    body:
        if dirty(fork):
            if not has_water(sink):
                get_water(sink)
            wash(fork)
            rinse(fork)

behavior __goal__():
    body:
        bind fork_1: item where:
            is_fork(fork_1) and id[fork_1]==2080
        # Select fork with ID 2080
        bind fork_2: item where:
            is_fork(fork_2) and id[fork_2]==2081
        # Select fork with ID 2081
        bind sink: item where:
            is_sink(sink)
        # Select any sink available
        hand_wash_fork(fork_1, sink)
        hand_wash_fork(fork_2, sink)


#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Wash the bowls and plates with dishwasher. And wash forks by hand.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(cpuscreen_416)', 'walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(tablelamp_98)', 'walk_executor(table_226)', 'walk_executor(bowl_2071)', 'grab_executor(bowl_2071)', 'walk_executor(dishwasher_1001)', 'putin_executor(bowl_2071, dishwasher_1001)', 'walk_executor(bowl_2072)', 'grab_executor(bowl_2072)', 'walk_executor(dishwasher_1001)', 'putin_executor(bowl_2072, dishwasher_1001)', 'close_executor(dishwasher_1001)', 'switchon_executor(dishwasher_1001)', 'walk_executor(table_226)']
Time info:
Time consume: 334 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 25
goal correct times: 0
action_num: 21

Task complete rate:
Keystate: k1 - Requires: 9 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
