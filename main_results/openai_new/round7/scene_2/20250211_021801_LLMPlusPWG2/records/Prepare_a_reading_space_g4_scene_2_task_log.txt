From agent.py
Reset goals: The sub-goals are: 
['Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2089_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior prepare_hot_milk_and_place_on_table(milk: item, cup: item, coffee_table: item):
    body:
        achieve_once inside(milk, cup)
        # Assume the preparation of hot milk involves pouring it into the cup
        achieve_once on(cup, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office(inside(coffee_table))
        # Select a coffee table in the home office

        place_book_on_coffee_table(book, coffee_table)

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        prepare_hot_milk_and_place_on_table(milk, cup, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2088_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior prepare_hot_milk(milk:item, cup:item, stove:item):
    body:
        achieve_once has_water(cup)
        achieve_once inside(milk, cup)
        achieve_once plugged(stove) 
        achieve_once on(cup, stove) 

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        place_book_on_table(book, coffee_table)

        bind milk: item where:
            is_milk(milk)
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        bind stove: item where:
            is_stove(stove) and has_plug(stove)
        prepare_hot_milk(milk, cup, stove)
        place_book_on_table(cup, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2089_around_fridge_140(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cup,fridge_instance)
        else:
            exp(cup,fridge_instance)
    eff:
        unknown[cup]=False
        close[cup,fridge_instance]=True
        close[fridge_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior prepare_hot_milk(milk:item, cup:item):
    body:
        achieve_once has_water(cup) # Fill the cup with milk
        achieve_once on(cup, table) # Place the cup on the table

behavior __goal__():
    body:
        # Find and place the book on the coffee table in the home office
        bind book: item where:
            is_book(book)
        # Select an item that is categorized as a book
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, office)
        # Select the coffee table in the home office
        place_book_on_table(book, coffee_table)

        # Prepare hot milk and place it on the table
        bind milk: item where:
            is_milk(milk)
        # Select an item that is categorized as milk
        bind cup: item where:
            is_cup(cup)
        # Select an item that is categorized as a cup
        prepare_hot_milk(milk, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2088_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_book_to_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior prepare_hot_milk(milk:item, cup:item):
    body:
        achieve has_water(cup)
        # Preparing hot milk implies filling the cup with milk

behavior place_milk_on_table(cup:item, coffee_table:item):
    body:
        achieve_once on(cup, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book to be moved to the coffee table

        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office(coffee_table)
        # Select the coffee table in the home office

        bind milk: item where:
            is_milk(milk)
        # Select milk for preparing hot milk

        bind cup: item where:
            is_cup(cup)
        # Select a cup to hold the hot milk

        move_book_to_table(book, coffee_table)
        # Move the book to the coffee table

        prepare_hot_milk(milk, cup)
        # Prepare hot milk in the cup

        place_milk_on_table(cup, coffee_table)
        # Place the cup of hot milk on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2087_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_food_salt_2068_around_fridge_140(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_salt,fridge_instance)
        else:
            exp(food_salt,fridge_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,fridge_instance]=True
        close[fridge_instance,food_salt]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book_and_place_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior prepare_hot_milk_and_place_on_table(milk:item, stove:item, cup:item, table:item):
    body:
        achieve has_water(cup) # Boil the milk in the cup
        achieve_once on(milk, table) # Place the hot milk on the coffee table

def is_home_office(table:item):
    symbol is_office=exists room: item : (is_home_office(room) and inside(table, room))
    return is_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind table: item where:
            is_table(table) and is_home_office(table)
        # Select a coffee table in the home office

        find_book_and_place_on_table(book, table)

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        prepare_hot_milk_and_place_on_table(milk, stove, cup, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2006_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book_and_place_on_coffee_table(book:item, coffee_table:item, home_office:item):
    body:
        achieve_once inside(book, home_office)
        achieve_once on(book, coffee_table)

behavior prepare_and_place_hot_milk_on_table(milk:item, cup:item, coffee_table:item, home_office:item):
    body:
        achieve_once inside(cup, home_office)
        achieve_once on(milk, coffee_table)
        achieve_once inside(milk, cup)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Get the book
        
        bind cup: item where:
            is_cup(cup)
        # Get a cup

        bind milk: item where:
            is_milk(milk)
        # Get the milk
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Get the coffee table inside the home office
        
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office
        
        find_book_and_place_on_coffee_table(book, coffee_table, home_office)
        prepare_and_place_hot_milk_on_table(milk, cup, coffee_table, home_office)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "find the book and put it on the coffe table in home office. then prepare a cup of hot milk, put it on the table." ?
Answer: Find the book on the bookshelf and put it on the coffee table in the home office. Find the milk in the fridge, put it in a cup, put the cup in the microwave, turn on the microwave, then put the cup on the table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2006_around_microwave_149(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(cup,microwave_instance)
        else:
            exp(cup,microwave_instance)
    eff:
        unknown[cup]=False
        close[cup,microwave_instance]=True
        close[microwave_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_place_book(book:item, coffee_table:item, bookshelf:item):
    body:
        achieve_once inhand(book)
        achieve_once on(book, coffee_table)

behavior prepare_and_place_cup_of_milk(cup:item, table:item, fridge:item, microwave:item, milk:item):
    body:
        achieve_once inside(milk, cup) # Pour milk into the cup
        achieve_once inside(cup, microwave) # Put the cup in the microwave
        achieve_once is_on(microwave) # Turn on the microwave
        achieve_once on(cup, table) # Place the cup on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Bind the book
        bind coffee_table: item where:
            is_table(coffee_table)
        # Bind the coffee table in the home office
        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        # Bind the bookshelf where the book might be
        find_and_place_book(book, coffee_table, bookshelf)

        bind cup: item where:
            is_cup(cup)
        # Bind the cup for the milk
        bind fridge: item where:
            is_fridge(fridge)
        # Bind the fridge where the milk is stored
        bind microwave: item where:
            is_microwave(microwave)
        # Bind the microwave for heating the milk
        bind milk: item where:
            is_milk(milk)
        # Bind the milk to be used
        prepare_and_place_cup_of_milk(cup, coffee_table, fridge, microwave, milk)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(book_2091, bookshelf_189)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)walk_executor(microwave_149)open_executor(microwave_149)exp(cup_2087, microwave_149)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)grab_executor(cup_2087)walk_executor(microwave_149)putin_executor(cup_2087, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_123)put_executor(cup_2087, table_123)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. 
##############################
From agent.py
open_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. bookshelf_189 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_189)
Fail to find book_2091 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)walk_executor(microwave_149)open_executor(microwave_149)exp(cup_2087, microwave_149)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)grab_executor(cup_2087)walk_executor(microwave_149)putin_executor(cup_2087, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_123)put_executor(cup_2087, table_123)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)walk_executor(microwave_149)open_executor(microwave_149)exp(cup_2087, microwave_149)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)grab_executor(cup_2087)walk_executor(microwave_149)putin_executor(cup_2087, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_123)put_executor(cup_2087, table_123)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the book_2091. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(book_2091, table_123)
Robot find: Robot is close to the book_2091. Robot is close to the mat_114. Robot is close to the table_123. book_2091 is on table_123. book_2091 is close table_123. table_123 is close book_2091. book_2091 released by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: pot_54, Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
exp(cup_2087, microwave_149)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)grab_executor(cup_2087)walk_executor(microwave_149)putin_executor(cup_2087, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_123)put_executor(cup_2087, table_123)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the table_123. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the table_123. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the table_123. Robot is close to the book_2091. Robot is close to the mat_114. 
##############################
From agent.py
put_executor(book_2091, table_123)
Robot find: Robot is close to the table_123. Robot is close to the book_2091. Robot is close to the mat_114. book_2091 is on table_123. book_2091 is close table_123. book_2091 released by right hand. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)grab_executor(cup_2087)walk_executor(microwave_149)putin_executor(cup_2087, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(table_123)put_executor(cup_2087, table_123)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the table_123. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the table_123. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the table_123. Robot is close to the book_2091. Robot is close to the mat_114. 
##############################
From agent.py
put_executor(book_2091, table_123)
Robot find: Robot is close to the table_123. Robot is close to the book_2091. Robot is close to the mat_114. book_2091 is on table_123. book_2091 is close table_123. book_2091 released by right hand. 
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the fridge_140. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
putin_executor(milk_2074, cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. milk_2074 is close cup_2087. milk_2074 is inside cup_2087. cup_2087 is close milk_2074. milk_2074 released by right hand. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
putin_executor(cup_2087, microwave_149)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is close cup_2087. cup_2087 is inside microwave_149. cup_2087 is close microwave_149. cup_2087 released by right hand. 
##############################
From agent.py
close_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is closed. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned on. 
##############################
From agent.py
switchoff_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned off. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the cup_2087. Robot is close to the microwave_149. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the cup_2087. Robot is close to the microwave_149. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the cup_2087. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(cup_2087, table_123)
Robot find: Robot is close to the cup_2087. Robot is close to the mat_114. Robot is close to the table_123. cup_2087 is close table_123. cup_2087 is on table_123. cup_2087 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.
Action History:
['walk_executor(bookshelf_189)', 'open_executor(bookshelf_189)', 'walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_123)', 'put_executor(book_2091, table_123)', 'walk_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_123)', 'put_executor(book_2091, table_123)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_123)', 'put_executor(book_2091, table_123)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(cup_2087)', 'putin_executor(milk_2074, cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(microwave_149)', 'putin_executor(cup_2087, microwave_149)', 'close_executor(microwave_149)', 'switchon_executor(microwave_149)', 'switchoff_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(table_123)', 'put_executor(cup_2087, table_123)']
Time info:
Time consume: 395 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 7
goal correct times: 0
action_num: 35

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 5 steps
Keystate: k3 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
