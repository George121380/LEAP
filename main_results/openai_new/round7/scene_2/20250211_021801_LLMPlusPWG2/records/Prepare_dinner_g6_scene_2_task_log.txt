From agent.py
Reset goals: The sub-goals are: 
['Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation

behavior put_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)
        achieve_once closed(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        bind plate: item where:
            is_plate(plate)
        bind microwave: item where:
            is_microwave(microwave)
        bind table: item where:
            is_table(table) and inside(table, dining_room) and is_dining_room(dining_room)

        put_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_plate(item:item, plate:item):
    body:
        achieve_once on(item, plate)

behavior heat_in_microwave(item:item, microwave:item):
    body:
        achieve_once inside(item, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        # Select a table inside the dining room

        place_on_plate(pizza, plate)
        place_on_plate(hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation

behavior put_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior put_on_dining_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and is_dining_room(table)
        # Select a table in the dining room
        
        put_food_on_plate(pizza, plate)
        put_food_on_plate(hamburger, plate)
        heat_in_microwave(plate, microwave)
        put_on_dining_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_kitchen_counter_132(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_plate(item1:item, item2:item, plate:item):
    body:
        achieve_once on(item1, plate)
        achieve_once on(item2, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger

        put_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior put_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        bind microwave: item where:
            is_microwave(microwave)
        bind table: item where:
            is_table(table) and is_dining_room(table) 
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)
        
        heat_in_microwave(plate, microwave)

        put_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation

behavior place_items_on_plate(plate:item, pizza:item, hamburger:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_in_microwave(microwave:item, plate:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)
        achieve_once closed(microwave)

behavior place_on_table(table:item, plate:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        bind microwave: item where:
            is_microwave(microwave)
        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        place_items_on_plate(plate, pizza, hamburger)
        heat_in_microwave(microwave, plate)
        place_on_table(table, plate)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put pizza and hamburger on a plate. then hot them in the microwave. then put them on a table in dinning room." ?
Answer: Find a plate to put the pizza and hamburger on. Then put them in the microwave. Turn on the microwave. After that, put the plate on the table in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
def find_plate_for_food():
    # Function to find a plate for placing food items
    foreach plate: item:
        if is_plate(plate) and not visited(plate):
            observe(plate, "Find a plate to place pizza and hamburger")
            return plate

behavior place_food_on_plate(plate: item, pizza: item, hamburger: item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_food_in_microwave(plate: item, microwave: item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)

behavior move_plate_to_dining_table(plate: item, table: item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger
        
        plate = find_plate_for_food()
        
        if not plate:
            observe(char, "Find a plate for the pizza and hamburger")
            # If no plate is initially found, it needs to be observeddetermined 
            bind plate: item where:
                is_plate(plate) and visited(plate)

        place_food_on_plate(plate, pizza, hamburger)
        
        bind microwave: item where:
            is_microwave(microwave)
        heat_food_in_microwave(plate, microwave)
        
        bind table: item where:
            is_table(table) and is_dining_room(table)
        # Choose a table inside the dining room
        
        move_plate_to_dining_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_kitchen_counter_132(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)

behavior put_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza item

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger item

        bind plate: item where:
            is_plate(plate) and surfaces(plate)
        # Select a plate with a surface

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)
        # Select a table in the dining room

        put_on_plate(pizza, plate)
        put_on_plate(hamburger, plate)
        heat_in_microwave(plate, microwave)
        put_on_table(plate, dining_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate) # Place the pizza on the plate
        achieve_once on(hamburger, plate) # Place the hamburger on the plate

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Insert the plate into the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve is_on(microwave) # Turn on the microwave

behavior place_on_table(plate:item, table:item):
    body:
        achieve on(plate, table) # Place the plate on the table

def in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and in_dining_room(table)
        # Select a table in the dining room

        place_on_plate(pizza, hamburger, plate) # Place food on the plate
        heat_in_microwave(plate, microwave) # Heat the food in the microwave
        place_on_table(plate, table) # Move the plate to the dining room table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        # Place pizza on the plate
        achieve_once on(hamburger, plate)
        # Place hamburger on the plate

behavior heat_food_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with pizza and hamburger into the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the food

behavior place_on_table(plate:item, dining_room:item, table:item):
    body:
        achieve_once inside(plate, dining_room)
        achieve_once on(plate, table)
        # Move the plate with heated food to the table in the dining room

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza item

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger item

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select the table inside the dining room

        place_food_on_plate(pizza, hamburger, plate)
        heat_food_in_microwave(plate, microwave)
        place_on_table(plate, dining_room, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)

behavior move_to_dining_room(plate:item, dining_room:item):
    body:
        achieve_once inside(plate, dining_room)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        place_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        move_to_dining_room(plate, dining_room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation

behavior place_on_plate(item:item, plate:item):
    body:
        achieve_once on(item, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Bind the pizza item
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Bind the hamburger item
        
        bind plate: item where:
            is_plate(plate)
        # Bind any available plate

        bind microwave: item where:
            is_microwave(microwave)
        # Bind any available microwave

        bind dining_room_table: item where:
            is_table(dining_room_table) and inside(dining_room_table, dining_room)
        # Bind a table inside the dining room

        place_on_plate(pizza, plate)
        # Place the pizza on the plate
        
        place_on_plate(hamburger, plate)
        # Place the hamburger on the plate
        
        heat_in_microwave(plate, microwave)
        # Heat the plate containing pizza and hamburger in the microwave
        
        place_on_table(plate, dining_room_table)
        # Place the plate with pizza and hamburger on the dining room table

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 213 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 12
goal correct times: 0
action_num: 0

Task complete rate:
Keystate: k1 - Requires: 19 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
