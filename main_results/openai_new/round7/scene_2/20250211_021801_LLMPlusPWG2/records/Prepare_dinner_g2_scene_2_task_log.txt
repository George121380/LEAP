From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_142_around_oven_141(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

behavior find_food_onion_2026_around_fridge_140(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_oven(oven: item):
    body:
        achieve_once plugged(oven) # Ensure the oven is plugged in
        achieve is_on(oven) # Ensure the oven is turned on

behavior roast_chicken(chicken: item, oven: item, onion: item):
    body:
        achieve_once cut(onion) # Ensure the onion is cut
        # Place the chicken on a roasting tray and ensure its inside the oven with onion
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        # Bind an oven item
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind a chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Bind an onion item

        prepare_oven(oven)
        roast_chicken(chicken, oven, onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2050_around_oven_141(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_chicken,oven_instance)
        else:
            exp(food_chicken,oven_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,oven_instance]=True
        close[oven_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior roast_chicken_with_onion_oven(chicken:item, onion:item, oven:item):
    body:
        ensure plugged(oven) # Make sure the oven is plugged in
        achieve_once inside(chicken, oven) # Place the chicken inside the oven
        achieve_once inside(onion, oven) # Place the onion inside the oven as well
        achieve_once closed(oven) # Close the oven door
        achieve is_on(oven) # Turn on the oven to roast the chicken and onion

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken to roast
        
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion to roast with the chicken
        
        bind oven: item where:
            is_oven(oven)
        # Select an oven for roasting
        
        roast_chicken_with_onion_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_fridge_140(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_rice_2067_around_cupboard_130(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_chicken_2050_around_oven_141(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_chicken,oven_instance)
        else:
            exp(food_chicken,oven_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,oven_instance]=True
        close[oven_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior roast_chicken_with_onion(oven:item, chicken:item, onion:item):
    body:
        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven
        achieve_once inside(onion, oven)
        # Place the onion inside the oven
        achieve is_on(oven)
        # Turn on the oven until the chicken and onion are roasted

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        roast_chicken_with_onion(oven, chicken, onion)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior roast_chicken_with_onion(oven:item, chicken:item, onion:item):
    body:
        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven
        achieve_once inside(onion, oven)
        # Place the onion inside the oven
        achieve is_on(oven)
        # Turn on the oven until the chicken and onion are roasted

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        roast_chicken_with_onion(oven, chicken, onion)

##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)exp(food_chicken_2050, oven_141)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(oven_141)putin_executor(food_chicken_2050, oven_141)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_onion_2026, fridge_140)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(oven_141)putin_executor(food_onion_2026, oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
walk_executor(oven_141)
Robot find: pot_54, Robot is close to the oven_141. 
##############################
From agent.py
open_executor(oven_141)
Robot find: food_butter_2018, dough_2021, food_onion_2026, tray_142, Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
exp(food_chicken_2050, oven_141)
Fail to find food_chicken_2050 around oven_141. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(oven_141)putin_executor(food_chicken_2050, oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2050)walk_executor(oven_141)putin_executor(food_chicken_2050, oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. 
##############################
From agent.py
putin_executor(food_chicken_2050, oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is close food_chicken_2050. food_chicken_2050 is close oven_141. food_chicken_2050 is inside oven_141. food_chicken_2050 released by right hand. 
##############################
From agent.py
close_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is closed. 
##############################
From agent.py
switchon_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Place the onion inside the oven to complete the task before roasting the chicken and onion together.
##############################
From agent.py
Human Instruction: Place the onion inside the oven to complete the task before roasting the chicken and onion together.

The actions you have taken:
Action 1: Walk to oven_141.
Action 2: Open oven_141.
Action 3: look for food_chicken_2050 around oven_141.
Action 4: Walk to fridge_140.
Action 5: Switch off fridge_140.
Action 6: Open fridge_140.
Action 7: look for food_chicken_2050 around fridge_140.
Action 8: Grab food_chicken_2050.
Action 9: Walk to oven_141.
Action 10: Put food_chicken_2050 into oven_141.
Action 11: Close oven_141.
Action 12: Switch on oven_141.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_onion_in_oven(onion:item, oven:item): 
    body:
        achieve_once inside(onion, oven)

behavior roast_chicken_and_onion(oven:item):
    body:
        achieve_once closed(oven)
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2050
        bind onion: item where:
            is_food_onion(onion)
        place_onion_in_oven(onion, oven)
        roast_chicken_and_onion(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)
        # Place the onion inside the oven

behavior roast_chicken_and_onion(oven:item):
    body:
        achieve_once is_on(oven) # The oven must be on to complete roasting
        achieve_once closed(oven) # Ensure the oven is closed during roasting
        
behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion

        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141

        place_onion_in_oven(onion, oven)
        # Put the onion inside the oven

        roast_chicken_and_onion(oven)
        # Roast both the chicken and onion together

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def in_oven(item:item):
    # Function to check if an item is inside the oven
    symbol inside_oven= exists oven: item : (is_oven(oven) and inside(item, oven))
    return inside_oven

def is_oven_on_far_side(oven:item):
    # Function to check if the oven is on the far side of the room
    symbol oven_far_side=exists kitchen: item : (is_kitchen_counter(kitchen) and close(oven, kitchen))
    return not oven_far_side

behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior close_oven_door(oven:item):
    body:
        achieve_once closed(oven)

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)

behavior roast_chicken_with_onion(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        turn_on_oven(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and is_oven_on_far_side(oven)
        # Select the oven that is assumed to be located at the far side of the room
        
        # Placing the onion in the oven based on the provided instruction
        bind onion: item where:
            is_food_onion(onion) and not in_oven(onion)
        place_onion_in_oven(onion, oven)
        close_oven_door(oven)
        
        # Placing the chicken in the oven based on the current actions youve taken
        bind chicken: item where:
            is_food_chicken(chicken) and not in_oven(chicken)
        roast_chicken_with_onion(chicken, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_stove_2090(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fork,stove_instance)
        else:
            exp(fork,stove_instance)
    eff:
        unknown[fork]=False
        close[fork,stove_instance]=True
        close[stove_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_oven_with_chicken_and_onion(oven:item):
    # Function to check if the oven contains both chicken and onion
    symbol has_chicken_and_onion = exists chicken: item : (is_food_chicken(chicken) and inside(chicken, oven)) and exists onion: item : (is_food_onion(onion) and inside(onion, oven))
    return has_chicken_and_onion

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        
        if is_oven_with_chicken_and_onion(oven):
            # If the chicken and onion are already in the oven, close it and ensure it is on
            achieve_once closed(oven)
            achieve_once is_on(oven)
        
        else:
            # Ensure the chicken is in the oven
            bind chicken: item where:
                is_food_chicken(chicken)
            achieve_once inside(chicken, oven)
            
            # Ensure the onion is in the oven
            bind onion: item where:
                is_food_onion(onion)
            achieve_once inside(onion, oven)
        
            achieve_once closed(oven)
            achieve_once is_on(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_onion_inside_oven(onion: item, oven: item):
    body:
        achieve_once inside(onion, oven)
        # Place the onion inside the oven

behavior roast_chicken_with_onion(oven: item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven to roast the chicken and onion

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion

        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select oven with ID 141

        place_onion_inside_oven(onion, oven)
        roast_chicken_with_onion(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def in_oven(item:item):
    # Function to determine if an item is inside the oven
    symbol inside_oven=exists o: item : (inside(item, o) and is_oven(o))
    return inside_oven

behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven) # Place the onion in the oven temporarily

behavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        achieve is_on(oven) # Ensure the oven is turned on
        achieve inside(chicken, oven) # Keep the chicken inside the oven
        achieve inside(onion, oven) # Keep the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)

        if not in_oven(onion):
            place_onion_in_oven(onion, oven)

        roast_chicken_with_onion(chicken, onion, oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "roast chicken with onion in the oven." ?
Answer: Put the chicken and onion in the oven. Then turn on the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)
        # Place the onion inside the oven

behavior roast_chicken_with_onion(oven:item):
    body:
        achieve_once is_on(oven)
        # Ensure the oven is on for roasting

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select the oven with ID 141

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2050
        # Select the chicken with ID 2050

        bind onion: item where:
            is_food_onion(onion)
        # Select an onion

        place_onion_in_oven(onion, oven)
        roast_chicken_with_onion(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_and_put_onion(oven:item):
    body:
        # Assuming theres an onion available, well place it in the oven
        bind onion: item where:
            is_food_onion(onion) and not inside(onion, oven)
        achieve_once inside(onion, oven)

behavior put_chicken_in_oven(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)

behavior start_oven(oven:item):
    body:
        achieve_once closed(oven) # Ensure the oven is closed
        achieve_once is_on(oven) # Switch on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        # Find chicken to roast
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven)
        observe_and_put_onion(oven)
        # Place the chicken in the oven if it is not inside already
        put_chicken_in_oven(chicken, oven)
        # Turn on the oven to roast
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_stove_2090(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fork,stove_instance)
        else:
            exp(fork,stove_instance)
    eff:
        unknown[fork]=False
        close[fork,stove_instance]=True
        close[stove_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_54_around_pot_54(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_food_inside_oven(food:item, oven:item):
    body:
        achieve_once inside(food, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)

behavior close_oven(oven:item):
    body:
        achieve_once closed(oven)

behavior __goal__():
    body:
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select the chicken

        bind oven: item where:
            is_oven(oven)
            # Select an oven

        put_food_inside_oven(food_chicken, oven)
        # Put the chicken inside the oven

        bind food_onion: item where:
            is_food_onion(food_onion)
        # Select the onion

        put_food_inside_oven(food_onion, oven)
        # Put the onion inside the oven

        close_oven(oven)
        # Close the oven door

        turn_on_oven(oven)
        # Turn on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior roast_chicken_and_onion_in_oven(oven:item):
    body:
        achieve_once closed(oven) 
        achieve_once is_on(oven) 

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with the ID 141
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion
        place_onion_in_oven(onion, oven)
        roast_chicken_and_onion_in_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)
        # Place the onion inside the oven

behavior close_the_oven_door(oven:item):
    body:
        achieve_once closed(oven)
        # Close the oven door

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        put_onion_in_oven(onion, oven)
        achieve_once inside(chicken, oven)
        close_the_oven_door(oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_oven_ready(oven: item):
    # Function to check if the oven is ready for use
    symbol oven_ready = is_on(oven) and closed(oven)
    return oven_ready

behavior put_onion_in_oven(onion: item, oven: item):
    body:
        achieve_once inside(onion, oven) # Place onion inside the oven

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141
        if not is_oven_ready(oven):
            # If oven is not ready, ensure it is closed and turned on
            achieve_once closed(oven)
            achieve_once is_on(oven)
        put_onion_in_oven(onion, oven)
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven) # Ensure chicken is inside the oven


#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def has_onion_inside_oven(oven: item):
    # Function to check if there is an onion inside the oven
    symbol onion_in_oven = exists o: item : (is_food_onion(o) and inside(o, oven))
    return onion_in_oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select oven with ID 141

        if not has_onion_inside_oven(oven):
            foreach o: item:
                if is_food_onion(o) and not inside(o, oven):
                    achieve_once inside(o, oven)
                    # Place the onion inside the oven if not already inside

        achieve_once inside(food_chicken_2050, oven)

        achieve_once closed(oven)
        achieve_once is_on(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_stove_2090(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fork,stove_instance)
        else:
            exp(fork,stove_instance)
    eff:
        unknown[fork]=False
        close[fork,stove_instance]=True
        close[stove_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)
        # Place the onion inside the oven

behavior roast_chicken_with_onion(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven
        achieve is_on(oven)
        # Ensure the oven is on

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select oven with ID 141

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2050
        # Select chicken with ID 2050

        bind onion: item where:
            is_food_onion(onion)
        # Select a food item that is an onion
        
        prepare_oven(onion, oven)
        roast_chicken_with_onion(chicken, oven)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven) # Place the onion inside the oven

behavior place_chicken_in_oven(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven) # Place the chicken inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once is_on(oven) # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        place_onion_in_oven(onion, oven)
        place_chicken_in_oven(chicken, oven)
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_oven_ready_for_chicken(oven:item):
    # Function to check if the oven is ready for chicken to be roasted
    return is_on(oven) and open(oven)

def is_oven_open_with_chicken_inside(oven:item, chicken:item):
    # Function to check if the oven is open with chicken inside
    return open(oven) and inside(chicken, oven)

behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)
        # Place the onion inside the oven

behavior close_and_turn_on_oven(oven:item):
    body:
        achieve_once closed(oven)
        # Close the oven
        achieve_once is_on(oven)
        # Turn on the oven

behavior roast_chicken_and_onion(chicken:item, oven:item, onion:item):
    body:
        if is_oven_open_with_chicken_inside(oven, chicken):
            # If the oven is open with the chicken inside, place the onion
            place_onion_in_oven(onion, oven)
            close_and_turn_on_oven(oven)
        else:
            # Ensure chicken is in the oven and turn it on if not yet done
            achieve_once inside(chicken, oven)
            place_onion_in_oven(onion, oven)
            close_and_turn_on_oven(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select the chicken with ID 2050

        bind onion: item where:
            is_food_onion(onion)
        # Select an onion

        roast_chicken_and_onion(chicken, oven, onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141

        achieve_once inside(onion, oven)
        # Place the onion inside the oven

        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven

        achieve is_on(oven)
        # Ensures the oven is turned on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(food_chicken:item, food_onion:item, oven:item):
    body:
        achieve_once open(oven)
        achieve_once inside(food_chicken, oven)
        achieve_once inside(food_onion, oven)
        achieve_once closed(oven)

behavior start_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
            # Select oven with ID 141
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and id[food_chicken] == 2050
            # Select chicken with ID 2050
        bind food_onion: item where:
            is_food_onion(food_onion)
            # Select a food onion

        put_in_oven(food_chicken, food_onion, oven)
        start_oven(oven)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior put_in_oven(food_chicken:item, food_onion:item, oven:item):
    body:
        achieve_once open(oven)
        achieve_once inside(food_chicken, oven)
        achieve_once inside(food_onion, oven)
        achieve_once closed(oven)

behavior start_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
            # Select oven with ID 141
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and id[food_chicken] == 2050
            # Select chicken with ID 2050
        bind food_onion: item where:
            is_food_onion(food_onion)
            # Select a food onion

        put_in_oven(food_chicken, food_onion, oven)
        start_oven(oven)

##############################
From agent.py-> find a plan in act()
switchoff_executor(oven_141)open_executor(oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
switchoff_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned off. 
##############################
From agent.py
open_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
close_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is closed. 
##############################
From agent.py
switchon_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the food onion in the oven along with the chicken and ensure the oven is turned on to roast both together.
##############################
From agent.py
Human Instruction: You need to put the food onion in the oven along with the chicken and ensure the oven is turned on to roast both together.

Human Guidance: Put the chicken and onion in the oven. Then turn on the oven.
The actions you have taken:
Action 1: Walk to oven_141.
Action 2: Open oven_141.
Action 3: look for food_chicken_2050 around oven_141.
Action 4: Walk to fridge_140.
Action 5: Switch off fridge_140.
Action 6: Open fridge_140.
Action 7: look for food_chicken_2050 around fridge_140.
Action 8: Grab food_chicken_2050.
Action 9: Walk to oven_141.
Action 10: Put food_chicken_2050 into oven_141.
Action 11: Close oven_141.
Action 12: Switch on oven_141.
Action 13: Switch off oven_141.
Action 14: Open oven_141.
Action 15: Close oven_141.
Action 16: Switch on oven_141.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior roast_chicken_with_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        roast_chicken_with_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation

def has_chicken_or_onion(oven:item):
    # Function to check if there are chicken or onions in a specified oven
    symbol has_chicken_or_onion = exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and inside(o, oven))
    return has_chicken_or_onion

behavior put_in_oven(o:item, oven:item):
    body:
        achieve_once inside(o, oven) # Place the item inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once closed(oven) # Close the oven door
        achieve_once is_on(oven) # Turn on the oven

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select oven with ID 141
        foreach o: item:
        # Load chicken and onions into the oven if not already inside
            if (is_food_chicken(o) or is_food_onion(o)) and not inside(o, oven):
                put_in_oven(o, oven)
        start_oven(oven) # Start the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_or_onion_inside(oven: item):
    # Function to check if there is chicken or onion inside the oven
    symbol has_chicken_or_onion = exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and inside(o, oven))
    return has_chicken_or_onion

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select oven with ID 141
        
        if not has_chicken_or_onion_inside(oven):
            foreach o: item:
                if (is_food_chicken(o) or is_food_onion(o)) and not inside(o, oven):
                    achieve_once inside(o, oven)
                    # Place chicken or onion inside the oven
        
        achieve is_on(oven)
        # Ensure the oven is on to roast the contents

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

def is_oven_for_roasting(oven:item):
    symbol is_oven_for_roasting= is_oven(oven) and has_switch(oven)
    return is_oven_for_roasting

behavior place_food_in_oven(food:item, oven:item):
    body:
        achieve_once inside(food, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven_for_roasting(oven)
        place_food_in_oven(chicken, oven)
        place_food_in_oven(onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)
        roast_chicken_with_onion(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)
        roast_chicken_with_onion(chicken, onion, oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "roast chicken with onion in the oven." ?
Answer: Put the chicken and onion in the oven. Then turn on the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven) # Place the chicken inside the oven
        achieve_once inside(onion, oven) # Place the onion inside the oven
        
behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven) # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select the oven with ID 141
        
        achieve_once open(oven) # Open the oven
        
        place_in_oven(chicken, onion, oven) # Place chicken and onion in the oven
        
        achieve_once closed(oven) # Close the oven
        
        turn_on_oven(oven) # Turn on the oven

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven) # Place the chicken inside the oven
        achieve_once inside(onion, oven) # Place the onion inside the oven
        
behavior turn_on_oven(oven:item):
    body:
        achieve_once is_on(oven) # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select the oven with ID 141
        
        achieve_once open(oven) # Open the oven
        
        place_in_oven(chicken, onion, oven) # Place chicken and onion in the oven
        
        achieve_once closed(oven) # Close the oven
        
        turn_on_oven(oven) # Turn on the oven

##############################
From agent.py-> find a plan in act()
switchoff_executor(oven_141)open_executor(oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
switchoff_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned off. 
##############################
From agent.py
open_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
close_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is closed. 
##############################
From agent.py
switchon_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the food onion in the oven along with the chicken, as the onion has not yet been placed in the oven. Ensure the oven is turned on afterward to roast them together.
##############################
From agent.py
Human Instruction: You need to put the food onion in the oven along with the chicken, as the onion has not yet been placed in the oven. Ensure the oven is turned on afterward to roast them together.

Human Guidance: Put the chicken and onion in the oven. Then turn on the oven.
The actions you have taken:
Action 1: Walk to oven_141.
Action 2: Open oven_141.
Action 3: look for food_chicken_2050 around oven_141.
Action 4: Walk to fridge_140.
Action 5: Switch off fridge_140.
Action 6: Open fridge_140.
Action 7: look for food_chicken_2050 around fridge_140.
Action 8: Grab food_chicken_2050.
Action 9: Walk to oven_141.
Action 10: Put food_chicken_2050 into oven_141.
Action 11: Close oven_141.
Action 12: Switch on oven_141.
Action 13: Switch off oven_141.
Action 14: Open oven_141.
Action 15: Close oven_141.
Action 16: Switch on oven_141.
Action 17: Switch off oven_141.
Action 18: Open oven_141.
Action 19: Close oven_141.
Action 20: Switch on oven_141.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_roast_in_oven(oven:item, chicken:item, onion:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven)
        # assumes the chicken is already near the oven

        bind onion: item where:
            is_food_onion(onion)
        
        prepare_roast_in_oven(oven, chicken, onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven) # Temporarily place the chicken inside the oven
        achieve_once inside(onion, oven) # Temporarily place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven) # Ensure the oven is turned on

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken to be roasted
        
        bind onion: item where:
            is_food_onion(onion)
        # Select onion to accompany the chicken

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)
        # Place the chicken and onion in the oven

        turn_on_oven(oven)
        # Turn on the oven to start roasting

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_chicken_and_onion_inside(oven:item):
    # Function to check if there is chicken and onion inside a specified oven
    symbol has_chicken_and_onion= exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and inside(o, oven))
    return has_chicken_and_onion

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select oven with ID 141

        if not has_chicken_and_onion_inside(oven):
            # Check if any of food_chicken_2050 and food_onion are inside oven_141
            bind chicken: item where:
                is_food_chicken(chicken)
            # Select the chicken
            bind onion: item where:
                is_food_onion(onion)
            # Select the onion
            
            achieve_once inside(chicken, oven)
            # Place the chicken inside the oven
            achieve_once inside(onion, oven)
            # Place the onion inside the oven

        achieve is_on(oven)
        # Ensure the oven is turned on to roast the chicken and onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_129(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_laptop_2015_around_home_office_161(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laptop,home_office_instance)
        else:
            exp(laptop,home_office_instance)
    eff:
        unknown[laptop]=False
        close[laptop,home_office_instance]=True
        close[home_office_instance,laptop]=True
    

#exp_behavior_end

#goal_representation

behavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)
        roast_chicken_with_onion(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_kitchen_counter_129(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven) 
        # Place chicken inside the oven
        achieve_once inside(onion, oven) 
        # Place onion inside the oven

behavior ensure_oven_operational(oven:item):
    body:
        achieve is_on(oven) 
        # Ensure the oven is turned on for roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_food_in_oven(chicken, onion, oven)
        ensure_oven_operational(oven)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)
        place_chicken_and_onion_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "roast chicken with onion in the oven." ?
Answer: Put the chicken and onion in the oven. Then turn on the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_and_onion_in_oven(oven: item):
    # Function to check if both chicken and onion are inside the specified oven
    symbol has_chicken_and_onion= exists o1: item, o2: item : (is_food_chicken(o1) and is_food_onion(o2) and inside(o1, oven) and inside(o2, oven))
    return has_chicken_and_onion

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and not has_chicken_and_onion_in_oven(oven)
        # Choose an oven that doesnt have both chicken and onion inside
        
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Choose the chicken to be placed in the oven
        
        bind food_onion: item where:
            is_food_onion(food_onion)
        # Choose the onion to be placed in the oven
        
        achieve_once inside(food_chicken, oven)
        # Place the chicken inside the oven

        achieve_once inside(food_onion, oven)
        # Place the onion inside the oven

        achieve is_on(oven)
        # Ensure the oven is turned on to start roasting

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior put_in_oven(item:item, oven:item):
    body:
        achieve_once inside(item, oven)
        # Place the item inside the oven

behavior roast_oven(oven:item):
    body:
        achieve_once closed(oven) # Ensure the oven is closed
        achieve is_on(oven) # Turn on the oven to roast

behavior prepare_oven(item1:item, item2:item, oven:item):
    body:
        put_in_oven(item1, oven)
        put_in_oven(item2, oven)
        roast_oven(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        prepare_oven(chicken, onion, oven)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_129(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        # Achieve the chicken and onion being inside the oven
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

behavior turn_on_oven(oven:item):
    body:
        # Ensure the oven is turned on
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Bind the onion item

        bind oven: item where:
            is_oven(oven)
        # Bind the oven item

        place_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_homework_2011_around_bookshelf_260(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(homework,bookshelf_instance)
        else:
            exp(homework,bookshelf_instance)
    eff:
        unknown[homework]=False
        close[homework,bookshelf_instance]=True
        close[bookshelf_instance,homework]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        bind oven: item where:
            is_oven(oven)
        # Select an oven
        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven
        achieve_once inside(onion, oven)
        # Place the onion inside the oven
        achieve is_on(oven)
        # Ensure that the oven is turned on
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(o:item, oven:item):
    body:
        achieve_once inside(o, oven)

behavior start_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        
        put_in_oven(chicken, oven)
        put_in_oven(onion, oven)
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_129(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

behavior start_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)
        place_in_oven(chicken, onion, oven)
        start_oven(oven)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_onion_inside_oven(onion: item, oven: item):
    body:
        achieve_once inside(onion, oven)
        # Place the onion inside the oven

behavior start_oven(oven: item):
    body:
        achieve is_on(oven)
        # Turn on the oven to start roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven_141)
        # Select the chicken that is already inside oven 141
        
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141

        bind onion: item where:
            is_food_onion(onion)
        # Select an onion

        put_onion_inside_oven(onion, oven)
        # Place the onion inside the oven
        
        start_oven(oven)
        # Start roasting by turning on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fork_2104_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def is_stored_in_oven(o:item, oven:item):
    symbol stored_in_oven = exists c: item : ((is_food_chicken(c) or is_food_onion(c)) and inside(c, oven))
    return stored_in_oven

behavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)
        achieve_once closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind oven: item where:
            is_oven(oven)
        if not is_stored_in_oven(chicken, oven) or not is_stored_in_oven(onion, oven):
            roast_chicken_with_onion(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior put_chicken_and_onion_in_oven(chicken: item, onion: item, oven: item):
    body:
        achieve_once inside(chicken, oven) 
        # Place the chicken inside the oven
        achieve_once inside(onion, oven) 
        # Place the onion inside the oven

behavior start_oven(oven: item):
    body:
        achieve_once closed(oven)
        # Close the oven door
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind a chicken item
        bind onion: item where:
            is_food_onion(onion)
        # Bind an onion item
        bind oven: item where:
            is_oven(oven)
        # Bind an oven item
        put_chicken_and_onion_in_oven(chicken, onion, oven)
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven)
        # Select the chicken already placed inside the oven

        bind onion: item where:
            is_food_onion(onion)
        # Select an onion to place inside the oven
        
        achieve_once inside(onion, oven)
        # Place the onion inside the oven
        
        achieve is_on(oven)
        # Make sure the oven is turned on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_129(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven
        achieve_once inside(onion, oven)
        # Place the onion inside the oven

behavior start_oven(oven:item):
    body:
        achieve_once closed(oven)
        # Close the oven door
        achieve_once is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to roast
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion to roast

        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select the oven with ID 141

        roast_chicken_with_onion(chicken, onion, oven)
        # Place chicken and onion in the oven
        start_oven(oven)
        # Start the oven to roast the chicken and onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven) 
        achieve_once inside(onion, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven) and plugged(oven) and closed(oven)
        # Select the oven Assume its plugged and closed

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven
        achieve_once inside(onion, oven)
        # Place the onion inside the oven
        achieve_once closed(oven)
        # Close the oven door
        achieve is_on(oven)
        # Turn on the oven to start roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141

        roast_chicken_with_onion(chicken, onion, oven)
        # Roast the chicken and onion in the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def has_onion_in_oven(oven:item):
    # Function to check if there is onion in the specified oven
    symbol has_onion=exists o: item : (is_food_onion(o) and inside(o, oven))
    return has_onion

behavior roast_chicken_with_onion(oven:item, chicken:item, onion:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select oven with ID 141
        
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven)
        # Assume the chicken is already inside the oven

        if not has_onion_in_oven(oven):
            # If the onion is not inside the oven
            bind onion: item where:
                is_food_onion(onion)
            # Bind the onion item
            achieve_once inside(onion, oven)
        
        roast_chicken_with_onion(oven, chicken, onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_129(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_onion_in_oven(onion:item, oven:item): 
    body: 
        achieve_once inside(onion, oven) 
        # Place the onion inside the oven 

behavior ensure_chicken_in_oven(chicken:item, oven:item): 
    body: 
        achieve_once inside(chicken, oven) 
        # Place the chicken inside the oven 

behavior roast_items(oven:item): 
    body: 
        achieve_once closed(oven) 
        # Close the oven door 
        achieve is_on(oven) 
        # Turn on the oven to start roasting

behavior __goal__(): 
    body: 
        bind chicken: item where: 
            is_food_chicken(chicken)
        # Select chicken 

        bind onion: item where: 
            is_food_onion(onion)
        # Select onion 

        bind oven: item where: 
            is_oven(oven) and id[oven]==141 
        # Select oven with ID 141 

        ensure_onion_in_oven(onion, oven) 
        ensure_chicken_in_oven(chicken, oven) 
        roast_items(oven) 
        # Roast chicken with onion in the oven
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_in_oven(chicken: item, onion: item, oven: item):
    body:
        achieve_once inside(chicken, oven) # Put the chicken in the oven
        achieve_once inside(onion, oven)  # Put the onion in the oven

behavior turn_on_oven(oven: item):
    body:
        achieve is_on(oven) # Turn on the oven to start roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a food item of chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select an onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_items_in_oven(chicken, onion, oven) # Call the behavior to put chicken and onion in the oven
        turn_on_oven(oven) # Call the behavior to turn on the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_and_onion_inside(oven:item):
    # Function to check if there is chicken and onion inside the specified oven
    symbol has_chicken_and_onion = exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and inside(o, oven))
    return has_chicken_and_onion

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select oven with ID 141
            
        if not has_chicken_and_onion_inside(oven):
            # If the chicken and onion still need to be added
            foreach item: item:
                if (is_food_chicken(item) or is_food_onion(item)) and not inside(item, oven):
                    achieve_once inside(item, oven)
                    # Put the item inside the oven

        achieve is_on(oven)
        # Ensure the oven is turned on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_and_onion_inside(oven:item):
    symbol is_chicken=exists o: item : (is_food_chicken(o) and inside(o, oven))
    symbol is_onion=exists o: item : (is_food_onion(o) and inside(o, oven))
    return is_chicken and is_onion

behavior prep_chicken_and_onion(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

behavior roast_chicken_and_onion(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven to roast

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and visited(oven)
        if not is_chicken_and_onion_inside(oven):
            bind chicken: item where:
                is_food_chicken(chicken)
            bind onion: item where:
                is_food_onion(onion)
            prep_chicken_and_onion(chicken, onion, oven)
        roast_chicken_and_onion(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(oven_141)', 'open_executor(oven_141)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_chicken_2050)', 'walk_executor(oven_141)', 'putin_executor(food_chicken_2050, oven_141)', 'close_executor(oven_141)', 'switchon_executor(oven_141)', 'switchoff_executor(oven_141)', 'open_executor(oven_141)', 'close_executor(oven_141)', 'switchon_executor(oven_141)', 'switchoff_executor(oven_141)', 'open_executor(oven_141)', 'close_executor(oven_141)', 'switchon_executor(oven_141)']
Time info:
Time consume: 787 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 0
goal generate times: 52
goal correct times: 0
action_num: 18

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
