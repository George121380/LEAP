From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind water: item where:
            has_water(pot)
        # Ensure the pot has water

        achieve_once inside(egg, pot)
        # Place the egg inside the pot

        achieve plugged(stove)
        achieve is_on(stove)
        # Plug in and turn on the stove to boil the egg

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_chair_138_around_bookshelf_136(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(chair,bookshelf_instance)
        else:
            exp(chair,bookshelf_instance)
    eff:
        unknown[chair]=False
        close[chair,bookshelf_instance]=True
        close[bookshelf_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(water_container:item, stove:item, egg:item):
    body:
        achieve has_water(water_container) # Ensure the container has water
        achieve_once inside(egg, water_container) # Place the egg inside the container
        achieve_once is_on(stove) # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind water_container: item where:
            is_pot(water_container) or is_bowl(water_container) # Select a container for boiling with water
        
        bind stove: item where:
            is_stove(stove) # Select a stove for boiling the egg

        bind egg: item where:
            is_food_egg(egg) # Select the egg to be boiled
        
        boil_egg(water_container, stove, egg) # Execute the boiling process

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_egg(water_container:item, stove:item, egg:item):
    body:
        achieve has_water(water_container) # Ensure the container has water
        achieve_once inside(egg, water_container) # Place the egg inside the container
        achieve_once is_on(stove) # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind water_container: item where:
            is_pot(water_container) or is_bowl(water_container) # Select a container for boiling with water
        
        bind stove: item where:
            is_stove(stove) # Select a stove for boiling the egg

        bind egg: item where:
            is_food_egg(egg) # Select the egg to be boiled
        
        boil_egg(water_container, stove, egg) # Execute the boiling process

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_2093. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_2093. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_2093. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the pot_2093. Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the pot_2093. Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the food_egg_2053. 
##############################
From agent.py
putin_executor(food_egg_2053, pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the food_egg_2053. food_egg_2053 is close pot_2093. pot_2093 is close food_egg_2053. food_egg_2053 is inside pot_2093. food_egg_2053 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot has water before boiling the egg. The current actions indicate the egg is in the pot and the stove is turned on, but there is no information that water has been added to the pot. Fill the pot with water to complete the sub-task.
##############################
From agent.py
Human Instruction: You need to ensure that the pot has water before boiling the egg. The current actions indicate the egg is in the pot and the stove is turned on, but there is no information that water has been added to the pot. Fill the pot with water to complete the sub-task.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to pot_2093.
Action 5: Open pot_2093.
Action 6: Grab pot_2093.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for food_egg_2053 around fridge_140.
Action 13: Walk to faucet_308.
Action 14: Switch off faucet_308.
Action 15: Walk to food_egg_2053.
Action 16: Grab food_egg_2053.
Action 17: Walk to pot_2093.
Action 18: Put food_egg_2053 into pot_2093.
Action 19: Walk to stove_2090.
Action 20: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2094_around_dishwasher_143(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(vacuum_cleaner,dishwasher_instance)
        else:
            exp(vacuum_cleaner,dishwasher_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,dishwasher_instance]=True
        close[dishwasher_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        
        bind faucet: item where:
            is_faucet(faucet)
        
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        
        bind faucet: item where:
            is_faucet(faucet)
        
        fill_pot_with_water(pot, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before boiling the egg. Add water to the pot to complete the sub-task.
##############################
From agent.py
Human Instruction: You need to fill the pot with water before boiling the egg. Add water to the pot to complete the sub-task.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to pot_2093.
Action 5: Open pot_2093.
Action 6: Grab pot_2093.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for food_egg_2053 around fridge_140.
Action 13: Walk to faucet_308.
Action 14: Switch off faucet_308.
Action 15: Walk to food_egg_2053.
Action 16: Grab food_egg_2053.
Action 17: Walk to pot_2093.
Action 18: Put food_egg_2053 into pot_2093.
Action 19: Walk to stove_2090.
Action 20: Switch on stove_2090.
Action 21: Walk to faucet_134.
Action 22: Switch on faucet_134.
Action 23: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2094_around_dishwasher_143(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(vacuum_cleaner,dishwasher_instance)
        else:
            exp(vacuum_cleaner,dishwasher_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,dishwasher_instance]=True
        close[dishwasher_instance,vacuum_cleaner]=True
    

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling_egg(stove:item, pot:item, egg:item):
    body:
        achieve inside(egg, pot)
        achieve_once is_on(stove)
        # Ensure the egg is inside the pot
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        bind egg: item where:
            is_food_egg(egg) and id[egg]==2053
        # Select the egg with a known ID

        fill_pot_with_water(pot, faucet_134) # Fill the pot with water using faucet_134
        start_boiling_egg(stove, pot, egg) # Start boiling the egg

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: faucet_134; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_vacuum_cleaner_2094_around_dishwasher_143(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(vacuum_cleaner,dishwasher_instance)
        else:
            exp(vacuum_cleaner,dishwasher_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,dishwasher_instance]=True
        close[dishwasher_instance,vacuum_cleaner]=True
    

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling_egg(stove:item, pot:item, egg:item):
    body:
        achieve inside(egg, pot)
        achieve_once is_on(stove)
        # Ensure the egg is inside the pot
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        bind egg: item where:
            is_food_egg(egg) and id[egg]==2053
        # Select the egg with a known ID

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        fill_pot_with_water(pot, faucet) # Fill the pot with water using faucet 134
        start_boiling_egg(stove, pot, egg) # Start boiling the egg

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2094_around_bench_126(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==126
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(vacuum_cleaner,bench_instance)
        else:
            exp(vacuum_cleaner,bench_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,bench_instance]=True
        close[bench_instance,vacuum_cleaner]=True
    

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(pot:item, stove:item):
    body:
        achieve_once inside(food_egg, pot)
        # Place the egg inside the pot
        achieve_once is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind food_egg: item where:
            is_food_egg(food_egg)
        # Select the egg
        
        fill_pot_with_water(pot, faucet)
        boil_egg(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_egg; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_vacuum_cleaner_2094_around_ironing_board_2099(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(vacuum_cleaner,ironing_board_instance)
        else:
            exp(vacuum_cleaner,ironing_board_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,ironing_board_instance]=True
        close[ironing_board_instance,vacuum_cleaner]=True
    

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(food_egg:item, pot:item, stove:item):
    body:
        achieve_once inside(food_egg, pot)
        # Place the egg inside the pot
        achieve_once is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind food_egg: item where:
            is_food_egg(food_egg)
        # Select the egg
        
        fill_pot_with_water(pot, faucet)
        boil_egg(food_egg, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2094_around_dishwasher_143(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(vacuum_cleaner,dishwasher_instance)
        else:
            exp(vacuum_cleaner,dishwasher_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,dishwasher_instance]=True
        close[dishwasher_instance,vacuum_cleaner]=True
    

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior boil_egg(stove:item, pot:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_a_free_hand(char)
        # Select a pot and ensure a free hand is available

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water
        
        fill_pot_with_water(pot, faucet)

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the egg

        boil_egg(stove, pot)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil the egg." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve inside(egg, pot)
        # Place the egg inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select a faucet with ID 134 to fill the pot
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select a stove with ID 2090
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2053
        # Select an egg with ID 2053
        fill_pot_with_water(pot, faucet)
        boil_egg(pot, stove, egg)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve inside(egg, pot)
        # Place the egg inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select a faucet with ID 134 to fill the pot
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select a stove with ID 2090
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2053
        # Select an egg with ID 2053
        fill_pot_with_water(pot, faucet)
        boil_egg(pot, stove, egg)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before boiling the egg. Add water to the pot to complete the sub-task.
##############################
Task Summary:
Task Goal:
Boil egg.
Action History:
['walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(pot_2093)', 'putin_executor(food_egg_2053, pot_2093)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)']
Time info:
Time consume: 154 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 7
goal correct times: 0
action_num: 23

Task complete rate:
1
Scene_id: 2
##############################
