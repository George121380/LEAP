From agent.py
Reset goals: The sub-goals are: 
['1. Find potatoes.', '2. Wash, peel, and cut the potatoes into strips.', '3. Fry the potato strips until golden brown.', '4. Place the French fries on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2066_around_cupboard_131(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_potato,cupboard_instance)
        else:
            exp(food_potato,cupboard_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cupboard_instance]=True
        close[cupboard_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        foreach potato: item:
            if is_food_potato(potato) and not visited(potato):
                observe(potato, "Check if it is a potato")

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        foreach potato: item:
            if is_food_potato(potato) and not visited(potato):
                observe(potato, "Check if it is a potato")

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_potato_2066, cupboard_131)walk_executor(food_potato_2066)obs(food_potato_2066, Check if it is a potato)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_potato_2066, cupboard_131)
Fail to find food_potato_2066 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_potato_2066, cupboard_130)walk_executor(food_potato_2066)obs(food_potato_2066, Check if it is a potato)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_potato_2066, cupboard_130)
Fail to find food_potato_2066 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_potato_2066, kitchen_counter_132)walk_executor(food_potato_2066)obs(food_potato_2066, Check if it is a potato)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_potato_2066, kitchen_counter_132)
Fail to find food_potato_2066 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(food_potato_2066, kitchen_counter_128)walk_executor(food_potato_2066)obs(food_potato_2066, Check if it is a potato)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_potato_2066, kitchen_counter_128)
Fail to find food_potato_2066 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_potato_2066, fridge_140)walk_executor(food_potato_2066)obs(food_potato_2066, Check if it is a potato)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_potato_2066, fridge_140)
Find food_potato_2066. 
##############################
From agent.py-> find a plan in act()
obs(food_potato_2066, Check if it is a potato)
##############################
From agent.py
obs(food_potato_2066, Check if it is a potato)
Get this information:  food_potato_2066 is inside dining_room_1. food_potato_2066 is inside fridge_140. food_potato_2066 is close to fridge_140. food_potato_2066 is close to character_219. food_potato_2066 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_potato(potato:item):
    body:
        achieve_once clean(potato)
        # Clean the potato

behavior peel_potato(potato:item):
    body:
        achieve_once inhand(potato)
        achieve_once clean(potato)
        # Ensure the potato is clean before peeling
        # Peel the potato

behavior cut_potato_into_strips(potato:item, cutting_board:item, knife:item):
    body:
        achieve_once on(potato, cutting_board)
        # Place the potato on the cutting board for cutting
        achieve_once cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        clean_potato(potato)
        peel_potato(potato)
        cut_potato_into_strips(potato, cutting_board, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_potato(potato:item):
    body:
        achieve_once clean(potato)
        # Clean the potato

behavior peel_potato(potato:item):
    body:
        achieve_once inhand(potato)
        achieve_once clean(potato)
        # Ensure the potato is clean before peeling
        # Peel the potato

behavior cut_potato_into_strips(potato:item, cutting_board:item, knife:item):
    body:
        achieve_once on(potato, cutting_board)
        # Place the potato on the cutting board for cutting
        achieve_once cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        clean_potato(potato)
        peel_potato(potato)
        cut_potato_into_strips(potato, cutting_board, knife)

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2066)walk_executor(cutting_board_2080)put_executor(food_potato_2066, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_potato_2066)cut_executor(food_potato_2066)
##############################
From agent.py
grab_executor(food_potato_2066)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_potato_2066 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_potato_2066. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_potato_2066, cutting_board_2080)
Robot find: Robot is close to the food_potato_2066. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. cutting_board_2080 is close food_potato_2066. food_potato_2066 is close cutting_board_2080. food_potato_2066 is on cutting_board_2080. food_potato_2066 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(cutting_board_2080)put_executor(food_potato_2066, cutting_board_2080)walk_executor(bench_122)exp(knife_2036, bench_122)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_potato_2066)cut_executor(food_potato_2066)
##############################
From agent.py
walk_executor(food_potato_2066)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. 
##############################
From agent.py
grab_executor(food_potato_2066)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. Grabbing food_potato_2066 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_potato_2066, cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. Robot is close to the kitchen_counter_128. food_potato_2066 is close cutting_board_2080. food_potato_2066 is on cutting_board_2080. food_potato_2066 released by right hand. 
##############################
From agent.py
walk_executor(bench_122)
Robot find: mat_114, Robot is close to the bench_122. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: Locate knife_2036 inside dining_room_1. Specifically, you will find it inside dishwasher_143.
Re-decompose: None

##############################
From agent.py
Human Instruction: Locate knife_2036 inside dining_room_1. Specifically, you will find it inside dishwasher_143.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_potato_2066 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_potato_2066 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for food_potato_2066 around kitchen_counter_132.
Action 8: Walk to kitchen_counter_128.
Action 9: look for food_potato_2066 around kitchen_counter_128.
Action 10: Walk to fridge_140.
Action 11: Switch off fridge_140.
Action 12: Open fridge_140.
Action 13: look for food_potato_2066 around fridge_140.
Action 14: Observe around food_potato_2066 with the question of Check if it is a potato.
Action 15: Grab food_potato_2066.
Action 16: Walk to cutting_board_2080.
Action 17: Put food_potato_2066 on cutting_board_2080.
Action 18: Walk to knifeblock_52.
Action 19: look for knife_2036 around knifeblock_52.
Action 20: Walk to food_potato_2066.
Action 21: Grab food_potato_2066.
Action 22: Walk to cutting_board_2080.
Action 23: Put food_potato_2066 on cutting_board_2080.
Action 24: Walk to bench_122.

##############################
From agent.py
exp(knife_2036, bench_122)
Fail to find knife_2036 around bench_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(cutting_board_2080)put_executor(food_potato_2066, cutting_board_2080)walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_potato_2066)cut_executor(food_potato_2066)
##############################
From agent.py
walk_executor(food_potato_2066)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. 
##############################
From agent.py
grab_executor(food_potato_2066)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. Grabbing food_potato_2066 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_potato_2066, cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. Robot is close to the kitchen_counter_128. food_potato_2066 is close cutting_board_2080. food_potato_2066 is on cutting_board_2080. food_potato_2066 released by right hand. 
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(cutting_board_2080)put_executor(food_potato_2066, cutting_board_2080)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_potato_2066)cut_executor(food_potato_2066)
##############################
From agent.py
walk_executor(food_potato_2066)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. 
##############################
From agent.py
grab_executor(food_potato_2066)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. Grabbing food_potato_2066 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_potato_2066, cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. Robot is close to the kitchen_counter_128. food_potato_2066 is close cutting_board_2080. food_potato_2066 is on cutting_board_2080. food_potato_2066 released by right hand. 
##############################
From agent.py
walk_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. 
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2066)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. 
##############################
From agent.py
cut_executor(food_potato_2066)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to peel the potato. Although the potato has been cut into strips, there is no record of peeling the potato, which is part of this sub-task.
##############################
From agent.py
Human Instruction: The robot needs to peel the potato. Although the potato has been cut into strips, there is no record of peeling the potato, which is part of this sub-task.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_potato_2066 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_potato_2066 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for food_potato_2066 around kitchen_counter_132.
Action 8: Walk to kitchen_counter_128.
Action 9: look for food_potato_2066 around kitchen_counter_128.
Action 10: Walk to fridge_140.
Action 11: Switch off fridge_140.
Action 12: Open fridge_140.
Action 13: look for food_potato_2066 around fridge_140.
Action 14: Observe around food_potato_2066 with the question of Check if it is a potato.
Action 15: Grab food_potato_2066.
Action 16: Walk to cutting_board_2080.
Action 17: Put food_potato_2066 on cutting_board_2080.
Action 18: Walk to knifeblock_52.
Action 19: look for knife_2036 around knifeblock_52.
Action 20: Walk to food_potato_2066.
Action 21: Grab food_potato_2066.
Action 22: Walk to cutting_board_2080.
Action 23: Put food_potato_2066 on cutting_board_2080.
Action 24: Walk to bench_122.
Action 25: look for knife_2036 around bench_122.
Action 26: Walk to food_potato_2066.
Action 27: Grab food_potato_2066.
Action 28: Walk to cutting_board_2080.
Action 29: Put food_potato_2066 on cutting_board_2080.
Action 30: Walk to dishwasher_143.
Action 31: Open dishwasher_143.
Action 32: look for knife_2036 around dishwasher_143.
Action 33: Walk to food_potato_2066.
Action 34: Grab food_potato_2066.
Action 35: Walk to cutting_board_2080.
Action 36: Put food_potato_2066 on cutting_board_2080.
Action 37: Walk to knife_2036.
Action 38: Grab knife_2036.
Action 39: Walk to food_potato_2066.
Action 40: Cut food_potato_2066.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_microwave_149(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

behavior find_fork_2103_around_stove_2090(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fork,stove_instance)
        else:
            exp(fork,stove_instance)
    eff:
        unknown[fork]=False
        close[fork,stove_instance]=True
        close[stove_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_potato(potato:item):
    body:
        wash(potato)
        # Wash the potato

behavior peel_potato(potato:item):
    body:
        achieve_once has_a_free_hand(char) # Ensure the character has a free hand
        achieve_once inhand(potato)
        # Its necessary to hold the potato to peel it

behavior cut_potato(potato:item, cutting_board:item):
    body:
        achieve_once clean(cutting_board) # Ensure the cutting board is clean
        achieve_once on(potato, cutting_board) # Place the potato on the cutting board
        achieve cut(potato) 
        # Cut the potato into strips

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Ensure the potato is washed first
        wash_potato(potato)
        # Then peel the potato
        peel_potato(potato)
        # Finally, cut the potato into strips
        cut_potato(potato, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_potato(potato:item):
    body:
        wash(potato)
        # Wash the potato

behavior peel_potato(potato:item):
    body:
        achieve_once has_a_free_hand(char) # Ensure the character has a free hand
        achieve_once inhand(potato)
        # Its necessary to hold the potato to peel it

behavior cut_potato(potato:item, cutting_board:item):
    body:
        achieve_once clean(cutting_board) # Ensure the cutting board is clean
        achieve_once on(potato, cutting_board) # Place the potato on the cutting board
        achieve cut(potato) 
        # Cut the potato into strips

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Ensure the potato is washed first
        wash_potato(potato)
        # Then peel the potato
        peel_potato(potato)
        # Finally, cut the potato into strips
        cut_potato(potato, cutting_board)

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2066)wash_executor(food_potato_2066)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_potato_2066, cutting_board_2080)
##############################
From agent.py
grab_executor(food_potato_2066)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. Grabbing food_potato_2066 by left hand. 
##############################
From agent.py
wash_executor(food_potato_2066)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_potato_2066, cutting_board_2080)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_potato_2066 is close cutting_board_2080. food_potato_2066 is on cutting_board_2080. food_potato_2066 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to peel the potato. The actions have been taken to cut the potato into strips and to wash it, but peeling has not been completed yet.
##############################
From agent.py
Human Instruction: You need to peel the potato. The actions have been taken to cut the potato into strips and to wash it, but peeling has not been completed yet.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_potato_2066 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_potato_2066 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for food_potato_2066 around kitchen_counter_132.
Action 8: Walk to kitchen_counter_128.
Action 9: look for food_potato_2066 around kitchen_counter_128.
Action 10: Walk to fridge_140.
Action 11: Switch off fridge_140.
Action 12: Open fridge_140.
Action 13: look for food_potato_2066 around fridge_140.
Action 14: Observe around food_potato_2066 with the question of Check if it is a potato.
Action 15: Grab food_potato_2066.
Action 16: Walk to cutting_board_2080.
Action 17: Put food_potato_2066 on cutting_board_2080.
Action 18: Walk to knifeblock_52.
Action 19: look for knife_2036 around knifeblock_52.
Action 20: Walk to food_potato_2066.
Action 21: Grab food_potato_2066.
Action 22: Walk to cutting_board_2080.
Action 23: Put food_potato_2066 on cutting_board_2080.
Action 24: Walk to bench_122.
Action 25: look for knife_2036 around bench_122.
Action 26: Walk to food_potato_2066.
Action 27: Grab food_potato_2066.
Action 28: Walk to cutting_board_2080.
Action 29: Put food_potato_2066 on cutting_board_2080.
Action 30: Walk to dishwasher_143.
Action 31: Open dishwasher_143.
Action 32: look for knife_2036 around dishwasher_143.
Action 33: Walk to food_potato_2066.
Action 34: Grab food_potato_2066.
Action 35: Walk to cutting_board_2080.
Action 36: Put food_potato_2066 on cutting_board_2080.
Action 37: Walk to knife_2036.
Action 38: Grab knife_2036.
Action 39: Walk to food_potato_2066.
Action 40: Cut food_potato_2066.
Action 41: Grab food_potato_2066.
Action 42: Wash food_potato_2066.
Action 43: Walk to faucet_134.
Action 44: Switch off faucet_134.
Action 45: Walk to cutting_board_2080.
Action 46: Put food_potato_2066 on cutting_board_2080.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_potatoes(potatoes:item):
    body:
        achieve has_water(potatoes)
        # Potatoes should be washed with water

behavior peel_potatoes(potatoes:item):
    body:
        achieve cut(potatoes)
        # Cut indicates the potatoes have been peeled

behavior cut_potatoes(potatoes:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potatoes, cutting_board)
        # Place the potatoes on the cutting board for cutting
        achieve_once inhand(knife)
        # Knife must be in hand to cut the potatoes

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes)
        # Select the potatoes to process

        bind knife: item where:
            is_knife(knife)
        # Select a knife for peeling and cutting

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board for cutting the potatoes

        wash_potatoes(potatoes)
        peel_potatoes(potatoes)
        cut_potatoes(potatoes, knife, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_potatoes(potatoes:item):
    body:
        achieve has_water(potatoes)
        # Potatoes should be washed with water

behavior peel_potatoes(potatoes:item):
    body:
        achieve cut(potatoes)
        # Cut indicates the potatoes have been peeled

behavior cut_potatoes(potatoes:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potatoes, cutting_board)
        # Place the potatoes on the cutting board for cutting
        achieve_once inhand(knife)
        # Knife must be in hand to cut the potatoes

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes)
        # Select the potatoes to process

        bind knife: item where:
            is_knife(knife)
        # Select a knife for peeling and cutting

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board for cutting the potatoes

        wash_potatoes(potatoes)
        peel_potatoes(potatoes)
        cut_potatoes(potatoes, knife, cutting_board)

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2066)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(cutting_board_2080)put_executor(food_potato_2066, cutting_board_2080)
##############################
From agent.py
grab_executor(food_potato_2066)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. Grabbing food_potato_2066 by left hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_potato_2066, cutting_board_2080)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_potato_2066 is close cutting_board_2080. food_potato_2066 is on cutting_board_2080. food_potato_2066 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to peel the potatoes. The potato has been washed and cut, but not peeled.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_stove_2090(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_coin_2004_around_stove_2090(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(coin,stove_instance)
        else:
            exp(coin,stove_instance)
    eff:
        unknown[coin]=False
        close[coin,stove_instance]=True
        close[stove_instance,coin]=True
    

#exp_behavior_end

#goal_representation

behavior fry_potato_strips(o:item, stove:item, pan:item, oil:item):
    body:
        achieve_once inside(o, pan) # Place potato strips in the pan
        achieve_once inside(oil, pan) # Add oil to the pan
        achieve_once is_on(stove) # Turn on the stove to start frying
        achieve_once is_off(stove) # Turn off the stove after potato strips are golden brown

def cut_items(food:item):
    # Function to check if the food item is cut
    symbol is_food_cut= cut(food)
    return is_food_cut

def has_potato_strips_on_cutting_board(cutting_board:item):
    # Function to check if there are cut potato strips on the cutting board
    symbol has_potato_strips= exists o: item : (is_food_potato(o) and cut(o) and on(o, cutting_board))
    return has_potato_strips

behavior peel_food(food:item):
    body:
        achieve clean(food) # Ensure the potato is clean and peeled before frying

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind oil: item where:
            is_oil(oil)
        # Select oil for frying

        if has_potato_strips_on_cutting_board(cutting_board):
            bind potato_strips: item where:
                is_food_potato(potato_strips) and cut(potato_strips) and on(potato_strips, cutting_board)
            # Bind cut potato strips on the cutting board

            if not cut_items(potato_strips):
                # Try cutting the potato strips if it is not cut
                peel_food(potato_strips)

            fry_potato_strips(potato_strips, stove, pan, oil)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior fry_potato_strips(o:item, stove:item, pan:item, oil:item):
    body:
        achieve_once inside(o, pan) # Place potato strips in the pan
        achieve_once inside(oil, pan) # Add oil to the pan
        achieve_once is_on(stove) # Turn on the stove to start frying
        achieve_once is_off(stove) # Turn off the stove after potato strips are golden brown

def cut_items(food:item):
    # Function to check if the food item is cut
    symbol is_food_cut= cut(food)
    return is_food_cut

def has_potato_strips_on_cutting_board(cutting_board:item):
    # Function to check if there are cut potato strips on the cutting board
    symbol has_potato_strips= exists o: item : (is_food_potato(o) and cut(o) and on(o, cutting_board))
    return has_potato_strips

behavior peel_food(food:item):
    body:
        achieve clean(food) # Ensure the potato is clean and peeled before frying

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind oil: item where:
            is_oil(oil)
        # Select oil for frying

        if has_potato_strips_on_cutting_board(cutting_board):
            bind potato_strips: item where:
                is_food_potato(potato_strips) and cut(potato_strips) and on(potato_strips, cutting_board)
            # Bind cut potato strips on the cutting board

            if not cut_items(potato_strips):
                # Try cutting the potato strips if it is not cut
                peel_food(potato_strips)

            fry_potato_strips(potato_strips, stove, pan, oil)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(fryingpan_2107)putin_executor(food_potato_2066, fryingpan_2107)walk_executor(stove_2090)exp(oil_2102, stove_2090)walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(fryingpan_2107)putin_executor(oil_2102, fryingpan_2107)walk_executor(stove_2090)switchon_executor(stove_2090)switchoff_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(fryingpan_2107, stove_2090)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(fryingpan_2107)putin_executor(food_potato_2066, fryingpan_2107)walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(fryingpan_2107)putin_executor(oil_2102, fryingpan_2107)walk_executor(stove_2090)switchon_executor(stove_2090)switchoff_executor(stove_2090)
##############################
From agent.py
walk_executor(food_potato_2066)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. 
##############################
From agent.py
grab_executor(food_potato_2066)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_potato_2066. Grabbing food_potato_2066 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_potato_2066, fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. food_potato_2066 is inside fryingpan_2107. food_potato_2066 is close fryingpan_2107. fryingpan_2107 is close food_potato_2066. food_potato_2066 released by left hand. 
##############################
From agent.py
walk_executor(oil_2102)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. 
##############################
From agent.py
grab_executor(oil_2102)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Grabbing oil_2102 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(oil_2102, fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Robot is close to the fryingpan_2107. oil_2102 is close fryingpan_2107. oil_2102 is inside fryingpan_2107. fryingpan_2107 is close oil_2102. oil_2102 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_wallshelf_301(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_fries_on_plate(fries:item, plate:item):
    body:
        achieve_once on(fries, plate) # Place the fries on the plate

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select fries (potato that has been cut)
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_fries_on_plate(fries, plate)
        # Place the fries on the plate

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_fries_on_plate(fries:item, plate:item):
    body:
        achieve_once on(fries, plate) # Place the fries on the plate

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select fries (potato that has been cut)
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_fries_on_plate(fries, plate)
        # Place the fries on the plate

##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_301)exp(plate_2105, wallshelf_301)walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(plate_2105)put_executor(food_potato_2066, plate_2105)
##############################
From agent.py
walk_executor(wallshelf_301)
Robot find: towel_rack_299, towel_rack_300, Robot is close to the knife_2036. Robot is close to the wallshelf_301. 
##############################
From agent.py
exp(plate_2105, wallshelf_301)
Fail to find plate_2105 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(plate_2105, bookshelf_137)walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(plate_2105)put_executor(food_potato_2066, plate_2105)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, drawing_118, Robot is close to the knife_2036. Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the knife_2036. Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py
exp(plate_2105, bookshelf_137)
Fail to find plate_2105 around bookshelf_137. 
##############################
From agent.py-> find a plan in act()
walk_executor(drawing_296)exp(plate_2105, drawing_296)walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(plate_2105)put_executor(food_potato_2066, plate_2105)
##############################
From agent.py
walk_executor(drawing_296)
Robot find: mat_292, Robot is close to the knife_2036. Robot is close to the drawing_296. 
##############################
From agent.py
exp(plate_2105, drawing_296)
Fail to find plate_2105 around drawing_296. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(plate_2105, bookshelf_136)walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(plate_2105)put_executor(food_potato_2066, plate_2105)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the knife_2036. Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(plate_2105, bookshelf_136)
Fail to find plate_2105 around bookshelf_136. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(plate_2105, table_123)walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(plate_2105)put_executor(food_potato_2066, plate_2105)
##############################
From agent.py
walk_executor(table_123)
Robot find: homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, Robot is close to the knife_2036. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_2105 ?
Answer: The target item, plate_2105, is located inside dining_room_1. You will find it on top of table_127. Table_127 is positioned close to plate_2105 within the dining room.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to peel the potato. The actions have been taken to cut the potato into strips and to wash it, but peeling has not been completed yet.
The target item, plate_2105, is located inside dining_room_1. You will find it on top of table_127. Table_127 is positioned close to plate_2105 within the dining room.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_potato_2066 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_potato_2066 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for food_potato_2066 around kitchen_counter_132.
Action 8: Walk to kitchen_counter_128.
Action 9: look for food_potato_2066 around kitchen_counter_128.
Action 10: Walk to fridge_140.
Action 11: Switch off fridge_140.
Action 12: Open fridge_140.
Action 13: look for food_potato_2066 around fridge_140.
Action 14: Observe around food_potato_2066 with the question of Check if it is a potato.
Action 15: Grab food_potato_2066.
Action 16: Walk to cutting_board_2080.
Action 17: Put food_potato_2066 on cutting_board_2080.
Action 18: Walk to knifeblock_52.
Action 19: look for knife_2036 around knifeblock_52.
Action 20: Walk to food_potato_2066.
Action 21: Grab food_potato_2066.
Action 22: Walk to cutting_board_2080.
Action 23: Put food_potato_2066 on cutting_board_2080.
Action 24: Walk to bench_122.
Action 25: look for knife_2036 around bench_122.
Action 26: Walk to food_potato_2066.
Action 27: Grab food_potato_2066.
Action 28: Walk to cutting_board_2080.
Action 29: Put food_potato_2066 on cutting_board_2080.
Action 30: Walk to dishwasher_143.
Action 31: Open dishwasher_143.
Action 32: look for knife_2036 around dishwasher_143.
Action 33: Walk to food_potato_2066.
Action 34: Grab food_potato_2066.
Action 35: Walk to cutting_board_2080.
Action 36: Put food_potato_2066 on cutting_board_2080.
Action 37: Walk to knife_2036.
Action 38: Grab knife_2036.
Action 39: Walk to food_potato_2066.
Action 40: Cut food_potato_2066.
Action 41: Grab food_potato_2066.
Action 42: Wash food_potato_2066.
Action 43: Walk to faucet_134.
Action 44: Switch off faucet_134.
Action 45: Walk to cutting_board_2080.
Action 46: Put food_potato_2066 on cutting_board_2080.
Action 47: Grab food_potato_2066.
Action 48: Walk to faucet_308.
Action 49: Switch off faucet_308.
Action 50: Walk to cutting_board_2080.
Action 51: Put food_potato_2066 on cutting_board_2080.
Action 52: Walk to stove_2090.
Action 53: Open stove_2090.
Action 54: look for fryingpan_2107 around stove_2090.
Action 55: Walk to food_potato_2066.
Action 56: Grab food_potato_2066.
Action 57: Walk to fryingpan_2107.
Action 58: Put food_potato_2066 into fryingpan_2107.
Action 59: Walk to oil_2102.
Action 60: Grab oil_2102.
Action 61: Walk to fryingpan_2107.
Action 62: Put oil_2102 into fryingpan_2107.
Action 63: Walk to stove_2090.
Action 64: Switch on stove_2090.
Action 65: Switch off stove_2090.
Action 66: Walk to wallshelf_301.
Action 67: look for plate_2105 around wallshelf_301.
Action 68: Walk to bookshelf_137.
Action 69: Open bookshelf_137.
Action 70: look for plate_2105 around bookshelf_137.
Action 71: Walk to drawing_296.
Action 72: look for plate_2105 around drawing_296.
Action 73: Walk to bookshelf_136.
Action 74: look for plate_2105 around bookshelf_136.
Action 75: Walk to table_123.

##############################
From agent.py
exp(plate_2105, table_123)
Fail to find plate_2105 around table_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(plate_2105, table_127)walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(plate_2105)put_executor(food_potato_2066, plate_2105)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, Robot is close to the knife_2036. Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(plate_2105, table_127)
Find plate_2105. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2066)grab_executor(food_potato_2066)walk_executor(plate_2105)put_executor(food_potato_2066, plate_2105)
##############################
From agent.py
walk_executor(food_potato_2066)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(food_potato_2066)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the fryingpan_2107. Grabbing food_potato_2066 by left hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_potato_2066, plate_2105)
Robot find: Robot is close to the knife_2036. Robot is close to the food_potato_2066. Robot is close to the plate_2105. Robot is close to the table_127. plate_2105 is close food_potato_2066. food_potato_2066 is close plate_2105. food_potato_2066 is on plate_2105. food_potato_2066 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_132)', 'walk_executor(kitchen_counter_128)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_potato_2066)', 'walk_executor(cutting_board_2080)', 'put_executor(food_potato_2066, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(food_potato_2066)', 'grab_executor(food_potato_2066)', 'walk_executor(cutting_board_2080)', 'put_executor(food_potato_2066, cutting_board_2080)', 'walk_executor(bench_122)', 'walk_executor(food_potato_2066)', 'grab_executor(food_potato_2066)', 'walk_executor(cutting_board_2080)', 'put_executor(food_potato_2066, cutting_board_2080)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'walk_executor(food_potato_2066)', 'grab_executor(food_potato_2066)', 'walk_executor(cutting_board_2080)', 'put_executor(food_potato_2066, cutting_board_2080)', 'walk_executor(knife_2036)', 'grab_executor(knife_2036)', 'walk_executor(food_potato_2066)', 'cut_executor(food_potato_2066)', 'grab_executor(food_potato_2066)', 'wash_executor(food_potato_2066)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(cutting_board_2080)', 'put_executor(food_potato_2066, cutting_board_2080)', 'grab_executor(food_potato_2066)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(cutting_board_2080)', 'put_executor(food_potato_2066, cutting_board_2080)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(food_potato_2066)', 'grab_executor(food_potato_2066)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_potato_2066, fryingpan_2107)', 'walk_executor(oil_2102)', 'grab_executor(oil_2102)', 'walk_executor(fryingpan_2107)', 'putin_executor(oil_2102, fryingpan_2107)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'switchoff_executor(stove_2090)', 'walk_executor(wallshelf_301)', 'walk_executor(bookshelf_137)', 'open_executor(bookshelf_137)', 'walk_executor(drawing_296)', 'walk_executor(bookshelf_136)', 'walk_executor(table_123)', 'walk_executor(table_127)', 'walk_executor(food_potato_2066)', 'grab_executor(food_potato_2066)', 'walk_executor(plate_2105)', 'put_executor(food_potato_2066, plate_2105)']
Time info:
Time consume: 291 seconds
Exp_helper query times: 2
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 66

Task complete rate:
Keystate: k1 - Requires: 9 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
