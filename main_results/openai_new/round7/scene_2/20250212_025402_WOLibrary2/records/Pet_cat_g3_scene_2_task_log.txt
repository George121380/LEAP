From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water.', '2. Place the bowl on the table in the home office.', '3. Find the cat and put it on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_sink_133(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(tape,sink_instance)
        else:
            exp(tape,sink_instance)
    eff:
        unknown[tape]=False
        close[tape,sink_instance]=True
        close[sink_instance,tape]=True
    

behavior find_bowl_2097_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(faucet: item, bowl: item):
    body:
        achieve_once open(faucet)
        # Ensure the faucet is open to allow water flow
        achieve_once inside(bowl, sink)
        # Place the bowl inside the sink before filling it with water
        achieve has_water(bowl)
        # Ensure the bowl has water inside it

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        fill_bowl_with_water(faucet, bowl)
        # Fill the selected bowl with water

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: sink; available variables: [Variable<faucet: item>, Variable<bowl: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tape_2028_around_desk_261(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(tape,desk_instance)
        else:
            exp(tape,desk_instance)
    eff:
        unknown[tape]=False
        close[tape,desk_instance]=True
        close[desk_instance,tape]=True
    

behavior find_bowl_2097_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation

behavior fill_bowl_with_water(faucet: item, bowl: item, sink: item):
    body:
        achieve_once open(faucet)
        # Ensure the faucet is open to allow water flow
        achieve_once inside(bowl, sink)
        # Place the bowl inside the sink before filling it with water
        achieve has_water(bowl)
        # Ensure the bowl has water inside it

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        fill_bowl_with_water(faucet, bowl, sink)
        # Fill the selected bowl with water

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_stovefan_139(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==139
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(tape,stovefan_instance)
        else:
            exp(tape,stovefan_instance)
    eff:
        unknown[tape]=False
        close[tape,stovefan_instance]=True
        close[stovefan_instance,tape]=True
    

behavior find_bowl_2096_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl) # Fill the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        fill_bowl_with_water(bowl, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl) # Fill the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        fill_bowl_with_water(bowl, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(bowl_2095, cupboard_131)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(bowl_2095, cupboard_131)
Fail to find bowl_2095 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(bowl_2095, cupboard_130)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(bowl_2095, cupboard_130)
Fail to find bowl_2095 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(bowl_2095, kitchen_counter_132)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(bowl_2095, kitchen_counter_132)
Fail to find bowl_2095 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(bowl_2095, sink_133)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(bowl_2095, sink_133)
Fail to find bowl_2095 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_307)exp(bowl_2095, sink_307)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_307)
Robot find: detergent_2108, drawing_296, towel_rack_298, Robot is close to the bathroom_counter_306. Robot is close to the sink_307. 
##############################
From agent.py
exp(bowl_2095, sink_307)
Fail to find bowl_2095 around sink_307. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(bowl_2095, table_123)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(bowl_2095, table_123)
Find bowl_2095. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(bowl_2095)
Robot find: Robot is close to the table_123. Robot is close to the bowl_2095. 
##############################
From agent.py
grab_executor(bowl_2095)
Robot find: Robot is close to the table_123. Robot is close to the bowl_2095. Grabbing bowl_2095 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill bowl_2095 with water. Ensure the faucet is turned on to allow the water to fill the bowl.
##############################
From agent.py
Human Instruction: You need to fill bowl_2095 with water. Ensure the faucet is turned on to allow the water to fill the bowl.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for bowl_2095 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for bowl_2095 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for bowl_2095 around kitchen_counter_132.
Action 8: Walk to sink_133.
Action 9: look for bowl_2095 around sink_133.
Action 10: Walk to sink_307.
Action 11: look for bowl_2095 around sink_307.
Action 12: Walk to table_123.
Action 13: look for bowl_2095 around table_123.
Action 14: Walk to bowl_2095.
Action 15: Grab bowl_2095.
Action 16: Walk to faucet_134.
Action 17: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl) # Fill the bowl with water

behavior turn_on_faucet(faucet:item):
    body:
        achieve_once is_on(faucet) # Ensure the faucet is turned on to fill the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2095
        # Select the bowl with ID 2095
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134
        
        turn_on_faucet(faucet)
        fill_bowl_with_water(bowl, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl) # Fill the bowl with water

behavior turn_on_faucet(faucet:item):
    body:
        achieve_once is_on(faucet) # Ensure the faucet is turned on to fill the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2095
        # Select the bowl with ID 2095
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134
        
        turn_on_faucet(faucet)
        fill_bowl_with_water(bowl, faucet)

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The bowl was not explicitly filled with water in the provided actions. Ensure the bowl is under the faucet when it is turned on to fill it with water.
##############################
From agent.py
Human Instruction: The bowl was not explicitly filled with water in the provided actions. Ensure the bowl is under the faucet when it is turned on to fill it with water.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for bowl_2095 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for bowl_2095 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for bowl_2095 around kitchen_counter_132.
Action 8: Walk to sink_133.
Action 9: look for bowl_2095 around sink_133.
Action 10: Walk to sink_307.
Action 11: look for bowl_2095 around sink_307.
Action 12: Walk to table_123.
Action 13: look for bowl_2095 around table_123.
Action 14: Walk to bowl_2095.
Action 15: Grab bowl_2095.
Action 16: Walk to faucet_134.
Action 17: Switch off faucet_134.
Action 18: Switch on faucet_134.
Action 19: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl)
        # Fill the bowl with water from the faucet

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and inhand(bowl)
        # Select the bowl in hand

        bind faucet: item where:
            is_faucet(faucet) and is_off(faucet)
        # Select a faucet that is turned off

        fill_bowl_with_water(bowl, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_bathroom_cabinet_305(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tape,bathroom_cabinet_instance)
        else:
            exp(tape,bathroom_cabinet_instance)
    eff:
        unknown[tape]=False
        close[tape,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tape]=True
    

behavior find_bowl_2096_around_faucet_308(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==308
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(bowl,faucet_instance)
        else:
            exp(bowl,faucet_instance)
    eff:
        unknown[bowl]=False
        close[bowl,faucet_instance]=True
        close[faucet_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) # Ensure character is close to the faucet
        achieve_once close_char(char, bowl) # Ensure character is close to the bowl
        achieve has_water(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl
        
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet)
        # Select a faucet close to character
        
        fill_bowl_with_water(bowl, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_bookshelf_136(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(tape,bookshelf_instance)
        else:
            exp(tape,bookshelf_instance)
    eff:
        unknown[tape]=False
        close[tape,bookshelf_instance]=True
        close[bookshelf_instance,tape]=True
    

behavior find_bowl_2097_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve close_char(char, faucet) 
        achieve_once has_water(bowl) # Ensure that the bowl is filled with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        bind faucet: item where:
            is_faucet(faucet)
        fill_bowl_with_water(bowl, faucet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. fill a bowl with water." ?
Answer: Hold a bowl and get close to a faucet. Then turn on the faucet to fill the bowl with water.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_bathroom_cabinet_305(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tape,bathroom_cabinet_instance)
        else:
            exp(tape,bathroom_cabinet_instance)
    eff:
        unknown[tape]=False
        close[tape,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tape]=True
    

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once inhand(bowl)
        achieve_once is_on(faucet)
        achieve_once has_water(bowl)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and inhand(bowl)
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet)
        fill_bowl_with_water(bowl, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once inhand(bowl)
        achieve_once is_on(faucet)
        achieve_once has_water(bowl)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and inhand(bowl)
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet)
        fill_bowl_with_water(bowl, faucet)

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the bowl is under the faucet when you turn it on, so the bowl can be filled with water. After grabbing the bowl and walking to the faucet, make sure you hold the bowl under the faucet when you switch it on.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_bathroom_cabinet_305(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(bowl,bathroom_cabinet_instance)
        else:
            exp(bowl,bathroom_cabinet_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_bathroom_cabinet_305(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(bowl,bathroom_cabinet_instance)
        else:
            exp(bowl,bathroom_cabinet_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,bowl]=True
    

#goal_representation

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind table: item where:
            is_table(table) and inside(table, office)
        # Select the table in the home office

        bind office: item where:
            is_home_office(office)
        # Select the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tape_2028_around_bookshelf_136(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(tape,bookshelf_instance)
        else:
            exp(tape,bookshelf_instance)
    eff:
        unknown[tape]=False
        close[tape,bookshelf_instance]=True
        close[bookshelf_instance,tape]=True
    

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_bowl_2095_around_bookshelf_189(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

#goal_representation

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind office: item where:
            is_home_office(office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, office)
        # Select the table in the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind office: item where:
            is_home_office(office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, office)
        # Select the table in the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(table_193)put_executor(bowl_2095, table_193)
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the bowl_2095. Robot is close to the table_193. 
##############################
From agent.py
put_executor(bowl_2095, table_193)
Robot find: Robot is close to the bowl_2095. Robot is close to the table_193. table_193 is close bowl_2095. bowl_2095 is close table_193. bowl_2095 is on table_193. bowl_2095 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The bowl needs to be placed on the table in the home office. Currently, the bowl is on table_193, which is not confirmed to be in the home office. Furthermore, the instruction specifies that the bowl should be filled with water, but the actions taken do not ensure that the bowl was filled. First, ensure the bowl is filled with water by placing it under a faucet when it's turned on, then place the filled bowl on the table in the home office.
##############################
From agent.py
Human Instruction: The bowl needs to be placed on the table in the home office. Currently, the bowl is on table_193, which is not confirmed to be in the home office. Furthermore, the instruction specifies that the bowl should be filled with water, but the actions taken do not ensure that the bowl was filled. First, ensure the bowl is filled with water by placing it under a faucet when it's turned on, then place the filled bowl on the table in the home office.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for bowl_2095 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for bowl_2095 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for bowl_2095 around kitchen_counter_132.
Action 8: Walk to sink_133.
Action 9: look for bowl_2095 around sink_133.
Action 10: Walk to sink_307.
Action 11: look for bowl_2095 around sink_307.
Action 12: Walk to table_123.
Action 13: look for bowl_2095 around table_123.
Action 14: Walk to bowl_2095.
Action 15: Grab bowl_2095.
Action 16: Walk to faucet_134.
Action 17: Switch off faucet_134.
Action 18: Switch on faucet_134.
Action 19: Switch off faucet_134.
Action 20: Switch on faucet_134.
Action 21: Switch off faucet_134.
Action 22: Walk to table_193.
Action 23: Put bowl_2095 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_tablelamp_359(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==359
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(bowl,tablelamp_instance)
        else:
            exp(bowl,tablelamp_instance)
    eff:
        unknown[bowl]=False
        close[bowl,tablelamp_instance]=True
        close[tablelamp_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_bowl_filled(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl) # Ensure the bowl is filled with water

behavior move_to_office_table(bowl:item, home_office:item, table:item):
    body:
        achieve_once inside(table, home_office) # Ensure the table is in the home office
        achieve_once on(bowl, table) # Place the bowl on the table

def is_home_office_table(table:item):
    # Determine if the table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2095
        # Select bowl with ID 2095

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select a table in the home office

        ensure_bowl_filled(bowl, faucet)
        move_to_office_table(bowl, home_office, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
behavior ensure_bowl_filled(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl) # Ensure the bowl is filled with water

behavior move_to_office_table(bowl:item, home_office:item, table:item):
    body:
        achieve_once inside(table, home_office) # Ensure the table is in the home office
        achieve_once on(bowl, table) # Place the bowl on the table

def is_home_office_table(table:item):
    # Determine if the table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2095
        # Select bowl with ID 2095

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select a table in the home office

        ensure_bowl_filled(bowl, faucet)
        move_to_office_table(bowl, home_office, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_bookshelf_372(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

behavior find_tape_2028_around_bookshelf_372(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(tape,bookshelf_instance)
        else:
            exp(tape,bookshelf_instance)
    eff:
        unknown[tape]=False
        close[tape,bookshelf_instance]=True
        close[bookshelf_instance,tape]=True
    

#exp_behavior_end

#goal_representation
 
def in_home_office(table:item):
    # Function to check if a table is in the home office
    symbol in_office= exists room: item : (is_home_office(room) and inside(table, room))
    return in_office

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table) # Place the bowl on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and in_home_office(table) # Select a table in the home office
        
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) and on(bowl, table) # Use the condition to ensure correct bowl selection
        
        place_bowl_on_table(bowl, table) # Place the bowl on the correct table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_bookshelf_372(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(tape,bookshelf_instance)
        else:
            exp(tape,bookshelf_instance)
    eff:
        unknown[tape]=False
        close[tape,bookshelf_instance]=True
        close[bookshelf_instance,tape]=True
    

behavior find_fork_2104_around_knifeblock_52(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(fork,knifeblock_instance)
        else:
            exp(fork,knifeblock_instance)
    eff:
        unknown[fork]=False
        close[fork,knifeblock_instance]=True
        close[knifeblock_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_table(table:item):
    # Function to check if a table is located in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior move_bowl_to_target_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior refill_bowl_to_have_water(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl)
        # Ensure the bowl is filled with water
        
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl with water

        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select a table in the home office

        move_bowl_to_target_table(bowl, table)
        # Move the bowl to the table in the home office

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the bowl on the table in the home office." ?
Answer: Put the bowl on the table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_bathroom_cabinet_305(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tape,bathroom_cabinet_instance)
        else:
            exp(tape,bathroom_cabinet_instance)
    eff:
        unknown[tape]=False
        close[tape,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tape]=True
    

behavior find_alcohol_2002_around_fridge_140(alcohol:item):
    goal: not unknown(alcohol)
    body:
        assert is_alcohol(alcohol)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(alcohol,fridge_instance)
        else:
            exp(alcohol,fridge_instance)
    eff:
        unknown[alcohol]=False
        close[alcohol,fridge_instance]=True
        close[fridge_instance,alcohol]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_table(table:item):
    symbol is_home_office_table= exists room: item : (is_home_office(room) and inside(table, room))
    return is_home_office_table

behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table) # Place the bowl on the indicated table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has been filled with water

        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select the table in the home office

        move_bowl_to_table(bowl, table)
        # Move the bowl to the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

behavior find_tape_2028_around_bathroom_cabinet_305(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tape,bathroom_cabinet_instance)
        else:
            exp(tape,bathroom_cabinet_instance)
    eff:
        unknown[tape]=False
        close[tape,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tape]=True
    

#exp_behavior_end

#goal_representation

behavior ensure_bowl_has_water(bowl:item, faucet:item):
    body:
        achieve has_water(bowl)
        # Ensure the bowl is filled with water

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        ensure_bowl_has_water(bowl, faucet)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tape_2028_around_bathroom_cabinet_305(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tape,bathroom_cabinet_instance)
        else:
            exp(tape,bathroom_cabinet_instance)
    eff:
        unknown[tape]=False
        close[tape,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tape]=True
    

behavior find_bowl_2097_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

#goal_representation

behavior ensure_bowl_has_water(bowl:item, faucet:item):
    body:
        achieve has_water(bowl)
        # Ensure the bowl is filled with water

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        ensure_bowl_has_water(bowl, faucet)
        bind home_office: item where:
            is_home_office(home_office)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_tape_2028_around_bookshelf_372(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(tape,bookshelf_instance)
        else:
            exp(tape,bookshelf_instance)
    eff:
        unknown[tape]=False
        close[tape,bookshelf_instance]=True
        close[bookshelf_instance,tape]=True
    

behavior find_food_donut_2052_around_stove_2090(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_donut,stove_instance)
        else:
            exp(food_donut,stove_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,stove_instance]=True
        close[stove_instance,food_donut]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior ensure_bowl_has_water(bowl:item):
    body:
        achieve has_water(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)

        bind table: item where:
            is_table(table) and inside(table, home_office)
        
        ensure_bowl_has_water(bowl)
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tape_2028_around_bookshelf_372(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(tape,bookshelf_instance)
        else:
            exp(tape,bookshelf_instance)
    eff:
        unknown[tape]=False
        close[tape,bookshelf_instance]=True
        close[bookshelf_instance,tape]=True
    

behavior find_bowl_2097_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior ensure_bowl_has_water(bowl:item):
    body:
        achieve has_water(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)

        bind table: item where:
            is_table(table) and inside(table, office)
        
        ensure_bowl_has_water(bowl)
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_couch_192(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(bowl,couch_instance)
        else:
            exp(bowl,couch_instance)
    eff:
        unknown[bowl]=False
        close[bowl,couch_instance]=True
        close[couch_instance,bowl]=True
    

behavior find_tape_2028_around_bookshelf_372(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(tape,bookshelf_instance)
        else:
            exp(tape,bookshelf_instance)
    eff:
        unknown[tape]=False
        close[tape,bookshelf_instance]=True
        close[bookshelf_instance,tape]=True
    

#goal_representation

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior ensure_bowl_has_water(bowl:item):
    body:
        achieve has_water(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)

        bind table: item where:
            is_table(table) and inside(table, home_office)

        ensure_bowl_has_water(bowl)
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_132)', 'walk_executor(sink_133)', 'walk_executor(sink_307)', 'walk_executor(table_123)', 'walk_executor(bowl_2095)', 'grab_executor(bowl_2095)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(table_193)', 'put_executor(bowl_2095, table_193)']
Time info:
Time consume: 395 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 0
goal generate times: 14
goal correct times: 4
action_num: 17

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
