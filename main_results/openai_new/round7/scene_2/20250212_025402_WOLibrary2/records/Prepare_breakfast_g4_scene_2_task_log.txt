From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta.', '2. Mix the chicken with the pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2073_around_cupboard_131(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_fryingpan_2107_around_cupboard_131(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_kitchen_counter(item: item):
    # Function to check if an item is on the kitchen counter
    symbol in_kitchen_counter = exists counter: item : (is_kitchen_counter(counter) and on(item, counter))
    return in_kitchen_counter

behavior cook_chicken_and_pasta(chicken: item, pasta: item, stove: item, pot: item, fryingpan: item):
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        
        if not is_in_kitchen_counter(chicken):
            achieve_once on(chicken, kitchen_counter)
        if not is_in_kitchen_counter(pasta):
            achieve_once on(pasta, kitchen_counter)

        if not plugged(stove):
            achieve_once plugged(stove)
        achieve_once is_on(stove)

        achieve_once inside(chicken, fryingpan)
        achieve_once inside(pasta, pot)

        achieve is_on(fryingpan)
        achieve is_on(pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind pasta: item where:
            is_dry_pasta(pasta)
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        cook_chicken_and_pasta(chicken, pasta, stove, pot, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2073_around_cupboard_131(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_box_2023_around_kitchen_counter_132(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(box,kitchen_counter_instance)
        else:
            exp(box,kitchen_counter_instance)
    eff:
        unknown[box]=False
        close[box,kitchen_counter_instance]=True
        close[kitchen_counter_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
def has_pasta_or_chicken_on_stove(stove:item):
    # Function to check if there is pasta or chicken on the stove
    symbol has_pasta_or_chicken= exists o: item : ((is_food_chicken(o) or is_dry_pasta(o)) and on(o, stove))
    return has_pasta_or_chicken

behavior cook_food(o:item, stove:item):
    body:
        achieve_once on(o, stove) # Place the item on the stove for cooking

behavior start_stove(stove:item):
    body:
        achieve_once is_on(stove) # Turn on the stove to start cooking

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_pasta_or_chicken_on_stove(stove):
            # Check if there is no pasta or chicken on the stove
            foreach o: item:
                if (is_food_chicken(o) or is_dry_pasta(o)) and not on(o, stove):
                    cook_food(o, stove)
        start_stove(stove) # Start cooking the food on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_pasta_or_chicken_on_stove(stove:item):
    # Function to check if there is pasta or chicken on the stove
    symbol has_pasta_or_chicken= exists o: item : ((is_food_chicken(o) or is_dry_pasta(o)) and on(o, stove))
    return has_pasta_or_chicken

behavior cook_food(o:item, stove:item):
    body:
        achieve_once on(o, stove) # Place the item on the stove for cooking

behavior start_stove(stove:item):
    body:
        achieve_once is_on(stove) # Turn on the stove to start cooking

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_pasta_or_chicken_on_stove(stove):
            # Check if there is no pasta or chicken on the stove
            foreach o: item:
                if (is_food_chicken(o) or is_dry_pasta(o)) and not on(o, stove):
                    cook_food(o, stove)
        start_stove(stove) # Start cooking the food on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(stove_2090)put_executor(food_chicken_2050, stove_2090)walk_executor(cupboard_131)open_executor(cupboard_131)exp(dry_pasta_2073, cupboard_131)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(stove_2090)put_executor(dry_pasta_2073, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2050)walk_executor(stove_2090)put_executor(food_chicken_2050, stove_2090)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(stove_2090)put_executor(dry_pasta_2073, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(food_chicken_2050, stove_2090)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. food_chicken_2050 is close stove_2090. stove_2090 is close food_chicken_2050. food_chicken_2050 is on stove_2090. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(dry_pasta_2073)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(dry_pasta_2073)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the fridge_140. Grabbing dry_pasta_2073 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(dry_pasta_2073, stove_2090)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. dry_pasta_2073 is close stove_2090. dry_pasta_2073 is on stove_2090. stove_2090 is close dry_pasta_2073. dry_pasta_2073 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_chicken_pasta(chicken:item, pasta:item, plate:item):
    body:
        achieve_once on(chicken, plate)
        achieve_once on(pasta, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select any plate
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken as a food item
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta as a dry pasta item
        mix_chicken_pasta(chicken, pasta, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior mix_chicken_pasta(chicken:item, pasta:item, plate:item):
    body:
        achieve_once on(chicken, plate)
        achieve_once on(pasta, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select any plate
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken as a food item
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta as a dry pasta item
        mix_chicken_pasta(chicken, pasta, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(plate_2105, cupboard_131)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(plate_2105, cupboard_131)
Fail to find plate_2105 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(plate_2105, cupboard_130)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(plate_2105, cupboard_130)
Fail to find plate_2105 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(plate_2105, kitchen_counter_132)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(plate_2105, kitchen_counter_132)
Fail to find plate_2105 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(plate_2105, sink_133)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(plate_2105, sink_133)
Fail to find plate_2105 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_122)exp(plate_2105, bench_122)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)
##############################
From agent.py
walk_executor(bench_122)
Robot find: mat_114, Robot is close to the bench_122. 
##############################
From agent.py
exp(plate_2105, bench_122)
Fail to find plate_2105 around bench_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(plate_2105, table_123)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)
##############################
From agent.py
walk_executor(table_123)
Robot find: homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_2105 ?
Answer: Robot, locate dining_room_1. Once inside, identify table_127. You will find plate_2105 on top of table_127.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, locate dining_room_1. Once inside, identify table_127. You will find plate_2105 on top of table_127.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_chicken_2050 around fridge_140.
Action 5: Grab food_chicken_2050.
Action 6: Walk to stove_2090.
Action 7: Put food_chicken_2050 on stove_2090.
Action 8: Walk to dry_pasta_2073.
Action 9: Grab dry_pasta_2073.
Action 10: Walk to stove_2090.
Action 11: Put dry_pasta_2073 on stove_2090.
Action 12: Switch on stove_2090.
Action 13: Walk to cupboard_131.
Action 14: Open cupboard_131.
Action 15: look for plate_2105 around cupboard_131.
Action 16: Walk to cupboard_130.
Action 17: look for plate_2105 around cupboard_130.
Action 18: Walk to kitchen_counter_132.
Action 19: look for plate_2105 around kitchen_counter_132.
Action 20: Walk to sink_133.
Action 21: look for plate_2105 around sink_133.
Action 22: Walk to bench_122.
Action 23: look for plate_2105 around bench_122.
Action 24: Walk to table_123.

##############################
From agent.py
exp(plate_2105, table_123)
Fail to find plate_2105 around table_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(plate_2105, table_127)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(plate_2105, table_127)
Find plate_2105. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the stove_2090. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the stove_2090. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_chicken_2050, plate_2105)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the plate_2105. Robot is close to the table_127. food_chicken_2050 is close plate_2105. plate_2105 is close food_chicken_2050. food_chicken_2050 is on plate_2105. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(dry_pasta_2073)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the stove_2090. 
##############################
From agent.py
grab_executor(dry_pasta_2073)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the stove_2090. Grabbing dry_pasta_2073 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(dry_pasta_2073, plate_2105)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the plate_2105. Robot is close to the table_127. dry_pasta_2073 is close plate_2105. dry_pasta_2073 is on plate_2105. plate_2105 is close dry_pasta_2073. dry_pasta_2073 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make chicken pasta, put it in a plate.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_chicken_2050)', 'walk_executor(stove_2090)', 'put_executor(food_chicken_2050, stove_2090)', 'walk_executor(dry_pasta_2073)', 'grab_executor(dry_pasta_2073)', 'walk_executor(stove_2090)', 'put_executor(dry_pasta_2073, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_132)', 'walk_executor(sink_133)', 'walk_executor(bench_122)', 'walk_executor(table_123)', 'walk_executor(table_127)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(plate_2105)', 'put_executor(food_chicken_2050, plate_2105)', 'walk_executor(dry_pasta_2073)', 'grab_executor(dry_pasta_2073)', 'walk_executor(plate_2105)', 'put_executor(dry_pasta_2073, plate_2105)']
Time info:
Time consume: 250 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 3
goal correct times: 0
action_num: 27

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 11 steps
Keystate: k3 - Requires: 6 steps
Keystate: k4 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
