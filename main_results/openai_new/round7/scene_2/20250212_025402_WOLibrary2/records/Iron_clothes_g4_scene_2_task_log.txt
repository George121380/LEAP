From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt.', '2. Iron the shirt.', '3. Put the shirt on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation

def is_the_shirt(item:item):
    # Function to check if an item is a shirt
    symbol is_shirt= is_clothes_shirt(item)
    return is_shirt

behavior __goal__():
    body:
        if exists shirt: item : (is_the_shirt(shirt) and not visited(shirt)):
            # If there is an unvisited shirt, observe it to confirm
            bind shirt: item where:
                is_the_shirt(shirt) and not visited(shirt)
            observe(shirt,"Verify if this is the shirt you are looking for")
        else:
            # Explore all unvisited items and identify if its a shirt
            foreach item: item:
                if is_the_shirt(item) and not visited(item):
                    observe(item, "Verify if this is the shirt you are looking for")

#goal_representation_end

##############################
From agent.py->reset_goal

def is_the_shirt(item:item):
    # Function to check if an item is a shirt
    symbol is_shirt= is_clothes_shirt(item)
    return is_shirt

behavior __goal__():
    body:
        if exists shirt: item : (is_the_shirt(shirt) and not visited(shirt)):
            # If there is an unvisited shirt, observe it to confirm
            bind shirt: item where:
                is_the_shirt(shirt) and not visited(shirt)
            observe(shirt,"Verify if this is the shirt you are looking for")
        else:
            # Explore all unvisited items and identify if its a shirt
            foreach item: item:
                if is_the_shirt(item) and not visited(item):
                    observe(item, "Verify if this is the shirt you are looking for")

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2040)exp(clothes_shirt_2114, basket_for_clothes_2040)walk_executor(clothes_shirt_2114)obs(clothes_shirt_2114, Verify if this is the shirt you are looking for)
##############################
From agent.py
walk_executor(basket_for_clothes_2040)
Robot find: clothes_pants_2113, clothes_shirt_2114, clothes_socks_2115, clothes_skirt_2116, Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. 
##############################
From agent.py
exp(clothes_shirt_2114, basket_for_clothes_2040)
Find clothes_shirt_2114. 
##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2114, Verify if this is the shirt you are looking for)
##############################
From agent.py
obs(clothes_shirt_2114, Verify if this is the shirt you are looking for)
Get this information:  clothes_shirt_2114 is close to basket_for_clothes_2040. clothes_shirt_2114 is close to character_219. clothes_shirt_2114 is inside basket_for_clothes_2040. clothes_shirt_2114 is inside bathroom_265. clothes_shirt_2114 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_jacket_2078_around_bed_376(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_jacket,bed_instance)
        else:
            exp(clothes_jacket,bed_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,bed_instance]=True
        close[bed_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ironing(item: item, ironing_board: item, iron: item):
    body:
        achieve_once plugged(iron)
        achieve_once is_on(iron)
        achieve_once on(item, ironing_board)
        achieve close_char(char, ironing_board)

behavior perform_ironing(item: item):
    body:
        achieve clean(item)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind iron: item where:
            is_iron(iron)
        prepare_ironing(shirt, ironing_board, iron)
        perform_ironing(shirt)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_gloves_2077_around_dresser_377(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_gloves,dresser_instance)
        else:
            exp(clothes_gloves,dresser_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,dresser_instance]=True
        close[dresser_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ironing(iron: item, board: item):
    body:
        achieve_once plugged(iron) 
        # Ensure the iron is plugged in

        achieve_once is_on(iron) 
        # Turn the iron on
        
        achieve_once open(board) 
        # Set up the ironing board by opening it

behavior iron_the_shirt(shirt: item, iron: item, board: item):
    body:
        achieve_once on(shirt, board)
        # Place the shirt on the ironing board

        # Start ironing the shirt The specific ironing action is determined by the algorithm
        
        achieve_once clean(shirt)
        # Make sure the shirt is clean and ironed

behavior reset_after_ironing(iron: item, board: item):
    body:
        achieve_once is_off(iron)
        # Turn the iron off after ironing

        achieve_once unplugged(iron)
        # Unplug the iron

        achieve_once closed(board)
        # Close the ironing board when finished

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and has_plug(iron)
        # Select an iron with a plug

        bind board: item where:
            is_ironing_board(board)
        # Select an ironing board

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt that needs to be ironed

        prepare_ironing(iron, board)
        iron_the_shirt(shirt, iron, board)
        reset_after_ironing(iron, board)


#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_towel_rack_298_around_bathtub_297(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(towel_rack,bathtub_instance)
        else:
            exp(towel_rack,bathtub_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathtub_instance]=True
        close[bathtub_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation



behavior plug_in_iron(iron:item, socket: item):
    body:
        achieve_once plugged(iron)
        # Plug the iron into the socket

behavior prepare_iron(iron:item):
    body:
        achieve_once is_on(iron)
        # Turn on the iron

behavior start_ironing_shirt(shirt:item, iron:item, board:item):
    body:
        achieve_once clean(shirt)
        # The shirt should be clean
        achieve_once inhand(iron)
        # Hold the iron temporarily
        achieve_once on(shirt, board) 
        # Place the shirt on the ironing board for ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Bind clothes_shirt instance
        bind iron: item where:
            is_iron(iron)
        # Bind iron instance
        bind board: item where:
            is_ironing_board(board)
        # Bind ironing board instance
        bind socket: item where:
            is_powersocket(socket)
        # Bind power socket instance
        plug_in_iron(iron, socket)
        prepare_iron(iron)
        start_ironing_shirt(shirt, iron, board)


#goal_representation_end

##############################
From agent.py->reset_sub_goal



behavior plug_in_iron(iron:item, socket: item):
    body:
        achieve_once plugged(iron)
        # Plug the iron into the socket

behavior prepare_iron(iron:item):
    body:
        achieve_once is_on(iron)
        # Turn on the iron

behavior start_ironing_shirt(shirt:item, iron:item, board:item):
    body:
        achieve_once clean(shirt)
        # The shirt should be clean
        achieve_once inhand(iron)
        # Hold the iron temporarily
        achieve_once on(shirt, board) 
        # Place the shirt on the ironing board for ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Bind clothes_shirt instance
        bind iron: item where:
            is_iron(iron)
        # Bind iron instance
        bind board: item where:
            is_ironing_board(board)
        # Bind ironing board instance
        bind socket: item where:
            is_powersocket(socket)
        # Bind power socket instance
        plug_in_iron(iron, socket)
        prepare_iron(iron)
        start_ironing_shirt(shirt, iron, board)


##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2099)exp(iron_2117, ironing_board_2099)walk_executor(iron_2117)plugin_executor(iron_2117)switchon_executor(iron_2117)walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)wash_executor(clothes_shirt_2114)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(iron_2117)grab_executor(iron_2117)walk_executor(ironing_board_2099)put_executor(clothes_shirt_2114, ironing_board_2099)
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: iron_2117, Robot is close to the ironing_board_2099. 
##############################
From agent.py
exp(iron_2117, ironing_board_2099)
Find iron_2117. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2117)plugin_executor(iron_2117)switchon_executor(iron_2117)walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)wash_executor(clothes_shirt_2114)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(iron_2117)grab_executor(iron_2117)walk_executor(ironing_board_2099)put_executor(clothes_shirt_2114, ironing_board_2099)
##############################
From agent.py
walk_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. 
##############################
From agent.py
plugin_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. iron_2117 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. iron_2117 is turned on. 
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the basket_for_clothes_2040. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the basket_for_clothes_2040. Robot is close to the clothes_shirt_2114. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py
wash_executor(clothes_shirt_2114)
Robot find: Robot is close to the basket_for_clothes_2040. Robot is close to the clothes_shirt_2114. clothes_shirt_2114 is cleaned. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the clothes_shirt_2114. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(iron_2117)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. Robot is close to the iron_2117. 
##############################
From agent.py
grab_executor(iron_2117)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Grabbing iron_2117 by left hand. 
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. Robot is close to the iron_2117. 
##############################
From agent.py
put_executor(clothes_shirt_2114, ironing_board_2099)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. Robot is close to the iron_2117. ironing_board_2099 is close clothes_shirt_2114. clothes_shirt_2114 is close ironing_board_2099. clothes_shirt_2114 is on ironing_board_2099. clothes_shirt_2114 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to actually iron the shirt using the iron. Currently, the shirt has been washed and placed on the ironing board, and the iron is plugged in and switched on, but the ironing action itself has not been executed.
##############################
From agent.py
Human Instruction: You need to actually iron the shirt using the iron. Currently, the shirt has been washed and placed on the ironing board, and the iron is plugged in and switched on, but the ironing action itself has not been executed.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Observe around clothes_shirt_2114 with the question of Verify if this is the shirt you are looking for.
Action 4: Walk to ironing_board_2099.
Action 5: look for iron_2117 around ironing_board_2099.
Action 6: Walk to iron_2117.
Action 7: Plug in iron_2117.
Action 8: Switch on iron_2117.
Action 9: Walk to clothes_shirt_2114.
Action 10: Grab clothes_shirt_2114.
Action 11: Wash clothes_shirt_2114.
Action 12: Walk to faucet_134.
Action 13: Switch off faucet_134.
Action 14: Walk to iron_2117.
Action 15: Grab iron_2117.
Action 16: Walk to ironing_board_2099.
Action 17: Put clothes_shirt_2114 on ironing_board_2099.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_the_shirt(clothes_shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once inhand(iron)
        achieve_once close_char(char, ironing_board)
        achieve_once on(clothes_shirt, ironing_board)
        # Ensure the shirt is on the ironing board and use the iron to press the shirt
        
behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        # Select the shirt
        
        bind iron: item where:
            is_iron(iron) and is_on(iron) and plugged(iron)
        # Select the iron, ensuring its on and plugged in

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        iron_the_shirt(clothes_shirt, iron, ironing_board)
        # Iron the shirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior iron_shirt(shirt: item, ironing_board: item, iron: item):
    body:
        achieve_once on(shirt, ironing_board)
        # Ensure that the shirt is on the ironing board
        achieve_once is_on(iron)
        # Confirm that the iron is turned on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_shirt(shirt, ironing_board, iron)
        # Perform the task of ironing the shirt
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_dresser_377(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_scarf,dresser_instance)
        else:
            exp(clothes_scarf,dresser_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,dresser_instance]=True
        close[dresser_instance,clothes_scarf]=True
    

behavior find_clothes_underwear_2022_around_dresser_377(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_underwear,dresser_instance)
        else:
            exp(clothes_underwear,dresser_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,dresser_instance]=True
        close[dresser_instance,clothes_underwear]=True
    

behavior find_clothes_jacket_2078_around_couch_192(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(clothes_jacket,couch_instance)
        else:
            exp(clothes_jacket,couch_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,couch_instance]=True
        close[couch_instance,clothes_jacket]=True
    

behavior find_clothes_gloves_2077_around_dresser_377(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_gloves,dresser_instance)
        else:
            exp(clothes_gloves,dresser_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,dresser_instance]=True
        close[dresser_instance,clothes_gloves]=True
    

behavior find_clothes_dress_2075_around_dresser_377(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_clothes_hat_2076_around_dresser_377(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_hat,dresser_instance)
        else:
            exp(clothes_hat,dresser_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,dresser_instance]=True
        close[dresser_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once close_char(char, ironing_board)
        # Approach the ironing board with the shirt on it
        achieve_once inhand(iron)
        # Temporarily hold the iron
        achieve is_on(iron)
        # Ensure the iron is on
        achieve clean(shirt)
        # Iron the shirt until it is clean (ironed)
        achieve_once on(shirt, ironing_board)
        # Once ironed, leave the shirt on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Select the shirt on the ironing board
        
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the iron that is plugged in and switched on
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<shirt: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2098_around_cupboard_131(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once close_char(char, ironing_board)
        # Approach the ironing board with the shirt on it
        achieve_once inhand(iron)
        # Temporarily hold the iron
        achieve is_on(iron)
        # Ensure the iron is on
        achieve clean(shirt)
        # Iron the shirt until it is clean (ironed)
        achieve_once on(shirt, ironing_board)
        # Once ironed, leave the shirt on the ironing board

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Select the shirt on the ironing board
        
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the iron that is plugged in and switched on

        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. iron the shirt." ?
Answer: Put the shirt on the ironing board. Turn on the iron. Then put the iron on the shirt, push and pull it on the shirt.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior iron_shirt(clothes_shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(clothes_shirt, ironing_board) 
        # Ensure the shirt is placed on the ironing board
        achieve_once is_on(iron) 
        # Ensure the iron is on before proceeding with ironing
        achieve is_clothes(clothes_shirt)
        # Indicate that the target is indeed clothing
        
        # Additional actions to perform ironing will be planned by the algorithm

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and clean(clothes_shirt)
        # Bind to the cleaned shirt

        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Bind to the iron that is plugged in and on

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and surfaces(ironing_board)
        # Bind to a valid ironing board with a surface
        
        iron_shirt(clothes_shirt, iron, ironing_board)
        # Perform the behavior of ironing the shirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt: item, iron: item, board: item):
    body:
        achieve_once on(shirt, board) # Ensure the shirt is on the ironing board
        achieve_once plugged(iron) # Ensure the iron is plugged in
        achieve_once is_on(iron) # Ensure the iron is turned on for use

behavior __goal__():
    body: 
        bind shirt: item where:
            is_clothes_shirt(shirt) # Bind the shirt to be ironed

        bind iron: item where:
            is_iron(iron) # Bind the iron to be used

        bind board: item where:
            is_ironing_board(board) # Bind the ironing board

        iron_shirt(shirt, iron, board) # Execute the ironing behavior

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once inhand(iron)
        # Hold the iron in hand
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        achieve is_on(iron)
        # Keep the iron in the on state to perform ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind iron: item where:
            is_iron(iron)
        # Select the iron to be used

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        iron_shirt(shirt, iron, ironing_board)
        # Perform the ironing behavior

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board) # Ensure the shirt is on the ironing board
        achieve_once is_on(iron) # Ensure the iron is on
        achieve_once plugged(iron) # Ensure the iron is plugged in
        # The actual ironing action is implied as the goal requires ironing and the setup is ready

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) # Select a shirt item
        bind iron: item where:
            is_iron(iron) # Select an iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board) # Select an ironing board
        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, board:item):
    body:
        achieve on(shirt, board)
        # Ensure the shirt is placed on the ironing board
        achieve_once close_char(char, iron)
        # Position the character close to the iron for efficient ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select an item categorized as a shirt
        
        bind iron: item where:
            is_iron(iron)
        # Select an item categorized as an iron

        bind board: item where:
            is_ironing_board(board)
        # Select an item categorized as an ironing board

        iron_shirt(shirt, iron, board) # Pass the selected items to the ironing behavior

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve is_on(iron) # Ensure the iron is switched on
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve_once clean(shirt) # Assume the ironing action makes the shirt clean

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) 
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind iron: item where:
            is_iron(iron)
        iron_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. iron the shirt." ?
Answer: Put the shirt on the ironing board. Turn on the iron. Then put the iron on the shirt, push and pull it on the shirt.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(clothes_shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(clothes_shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        achieve_once is_on(iron)
        # Ensure the iron is turned on

        # Push and pull the iron over shirt on the ironing board

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        iron_shirt(clothes_shirt, iron, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation

 Define a behavior to iron the shirt
behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        achieve_once on(shirt, ironing_board)  Ensure the shirt is on the ironing board
        achieve_once is_on(iron)  Ensure the iron is on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)  Select the shirt to be ironed
        
        bind iron: item where:
            is_iron(iron)  Select the iron
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)  Select the ironing board
        
        iron_shirt(shirt, iron, ironing_board)  Iron the shirt

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected dedent to column 1. Expected dedent to 0
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_towel_2083_around_bathtub_297(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(towel,bathtub_instance)
        else:
            exp(towel,bathtub_instance)
    eff:
        unknown[towel]=False
        close[towel,bathtub_instance]=True
        close[bathtub_instance,towel]=True
    

#goal_representation

behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        achieve_once on(shirt, ironing_board)  # Ensure the shirt is on the ironing board
        achieve_once is_on(iron)  # Ensure the iron is on
        achieve_once on(iron, shirt)  # Put the iron on the shirt and iron it

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)  # Select the shirt to be ironed
        
        bind iron: item where:
            is_iron(iron)  # Select the iron
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)  # Select the ironing board
        
        iron_shirt(shirt, iron, ironing_board)  # Iron the shirt

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        achieve_once on(shirt, ironing_board)  # Ensure the shirt is on the ironing board
        achieve_once is_on(iron)  # Ensure the iron is on
        achieve_once on(iron, shirt)  # Put the iron on the shirt and iron it

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)  # Select the shirt to be ironed
        
        bind iron: item where:
            is_iron(iron)  # Select the iron
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)  # Select the ironing board
        
        iron_shirt(shirt, iron, ironing_board)  # Iron the shirt

##############################
From agent.py-> find a plan in act()
put_executor(iron_2117, clothes_shirt_2114)
##############################
From agent.py
put_executor(iron_2117, clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. Robot is close to the iron_2117. clothes_shirt_2114 is close iron_2117. iron_2117 is close clothes_shirt_2114. iron_2117 is on clothes_shirt_2114. iron_2117 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to perform the actual ironing action. The iron is on and placed on the shirt, but you need to push and pull the iron across the shirt to complete the ironing process.
##############################
From agent.py
Human Instruction: You need to perform the actual ironing action. The iron is on and placed on the shirt, but you need to push and pull the iron across the shirt to complete the ironing process.

Human Guidance: Put the shirt on the ironing board. Turn on the iron. Then put the iron on the shirt, push and pull it on the shirt.
The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Observe around clothes_shirt_2114 with the question of Verify if this is the shirt you are looking for.
Action 4: Walk to ironing_board_2099.
Action 5: look for iron_2117 around ironing_board_2099.
Action 6: Walk to iron_2117.
Action 7: Plug in iron_2117.
Action 8: Switch on iron_2117.
Action 9: Walk to clothes_shirt_2114.
Action 10: Grab clothes_shirt_2114.
Action 11: Wash clothes_shirt_2114.
Action 12: Walk to faucet_134.
Action 13: Switch off faucet_134.
Action 14: Walk to iron_2117.
Action 15: Grab iron_2117.
Action 16: Walk to ironing_board_2099.
Action 17: Put clothes_shirt_2114 on ironing_board_2099.
Action 18: Put iron_2117 on clothes_shirt_2114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        # Ensure the iron is on
        achieve is_on(iron)
        # Ensure the shirt is on the ironing board
        achieve on(shirt, ironing_board)
        # Move the iron over the shirt to iron it
        push(iron)
        pull(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed
        
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_shirt(iron, shirt, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        # Ensure the iron is on
        achieve is_on(iron)
        # Ensure the shirt is on the ironing board
        achieve on(shirt, ironing_board)
        # Move the iron over the shirt to iron it
        push(iron)
        pull(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed
        
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_shirt(iron, shirt, ironing_board)

##############################
From agent.py-> find a plan in act()
push_executor(iron_2117)pull_executor(iron_2117)
##############################
From agent.py
push_executor(iron_2117)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. Robot is close to the iron_2117. 
##############################
From agent.py
pull_executor(iron_2117)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. Robot is close to the iron_2117. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_368_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve_once on(shirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind bed: item where:
            is_bed(bed)
        # Select the bed

        put_shirt_on_bed(shirt, bed)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve_once on(shirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind bed: item where:
            is_bed(bed)
        # Select the bed

        put_shirt_on_bed(shirt, bed)

##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2114)walk_executor(bed_264)put_executor(clothes_shirt_2114, bed_264)
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py
walk_executor(bed_264)
Robot find: clothes_scarf_2079, pillow_239, clothes_dress_2075, pillow_240, clothes_jacket_2078, mat_237, drawing_238, Robot is close to the clothes_shirt_2114. Robot is close to the bed_264. 
##############################
From agent.py
put_executor(clothes_shirt_2114, bed_264)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the bed_264. bed_264 is close clothes_shirt_2114. clothes_shirt_2114 is close bed_264. clothes_shirt_2114 is on bed_264. clothes_shirt_2114 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Iron a shirt, and put it in on the bed.
Action History:
['walk_executor(basket_for_clothes_2040)', 'walk_executor(ironing_board_2099)', 'walk_executor(iron_2117)', 'plugin_executor(iron_2117)', 'switchon_executor(iron_2117)', 'walk_executor(clothes_shirt_2114)', 'grab_executor(clothes_shirt_2114)', 'wash_executor(clothes_shirt_2114)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(iron_2117)', 'grab_executor(iron_2117)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_shirt_2114, ironing_board_2099)', 'put_executor(iron_2117, clothes_shirt_2114)', 'push_executor(iron_2117)', 'pull_executor(iron_2117)', 'grab_executor(clothes_shirt_2114)', 'walk_executor(bed_264)', 'put_executor(clothes_shirt_2114, bed_264)']
Time info:
Time consume: 312 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 0
goal generate times: 17
goal correct times: 2
action_num: 20

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
