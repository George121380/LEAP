From agent.py
Reset goals: The sub-goals are: 
['1. Find a pot and fill it with water.', '2. Place the pot on the stove and bring the water to a boil.', '3. Add the vegetables to the boiling water.', '4. Boil the vegetables until cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_cupboard_131(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tape,cupboard_instance)
        else:
            exp(tape,cupboard_instance)
    eff:
        unknown[tape]=False
        close[tape,cupboard_instance]=True
        close[cupboard_instance,tape]=True
    

behavior find_pot_54_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inside_char(char, faucet)
        # The character should be near the faucet to fill the pot with water
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Bind a pot
        
        bind faucet: item where:
            is_faucet(faucet)
            # Bind a faucet
        
        fill_pot_with_water(pot, faucet)
        # Fill the pot with water from the faucet

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_cupboard_131(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tape,cupboard_instance)
        else:
            exp(tape,cupboard_instance)
    eff:
        unknown[tape]=False
        close[tape,cupboard_instance]=True
        close[cupboard_instance,tape]=True
    

behavior find_pot_54_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior find_pot(pot:item):
    body:
        observe(pot, "Find a pot")
        
behavior fill_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        find_pot(pot)
        fill_with_water(pot, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_pot(pot:item):
    body:
        observe(pot, "Find a pot")
        
behavior fill_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        find_pot(pot)
        fill_with_water(pot, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_2093, cupboard_131)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Find a pot)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(pot_2093, cupboard_131)
Fail to find pot_2093 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)obs(pot_54, Find a pot)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
obs(pot_54, Find a pot)
Get this information:  pot_54 is on oven_141. pot_54 is close to ceiling_33. pot_54 is close to wall_2. pot_54 is close to cupboard_130. pot_54 is close to kitchen_counter_132. pot_54 is close to sink_133. pot_54 is close to kitchen_counter_129. pot_54 is close to cupboard_131. pot_54 is close to wall_8. pot_54 is close to stovefan_139. pot_54 is close to oven_141. pot_54 is close to walllamp_46. pot_54 is close to tray_142. pot_54 is close to floor_16. pot_54 is close to knifeblock_52. pot_54 is close to floor_21. pot_54 is close to ceiling_28. pot_54 is close to character_219. pot_54 is inside dining_room_1. pot_54 is CLEAN. pot_54 is OPEN.
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water by turning on the faucet.
##############################
From agent.py
Human Instruction: You need to fill the pot with water by turning on the faucet.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Observe around pot_54 with the question of Find a pot.
Action 7: Grab pot_54.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_cupboard_130(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tape,cupboard_instance)
        else:
            exp(tape,cupboard_instance)
    eff:
        unknown[tape]=False
        close[tape,cupboard_instance]=True
        close[cupboard_instance,tape]=True
    

behavior find_pot_54_around_sink_133(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inhand(pot)
        achieve_once close_char(char, faucet)
        achieve is_on(faucet) # To indicate that the faucet should remain on during the filling process
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        find_and_fill_pot_with_water(pot, faucet)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior find_and_fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inhand(pot)
        achieve_once close_char(char, faucet)
        achieve is_on(faucet) # To indicate that the faucet should remain on during the filling process
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        find_and_fill_pot_with_water(pot, faucet)
##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_134)walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is actually filled with water. While you turned on the faucet, there is no confirmation that the pot contains water. Make sure the pot is filled by keeping it under the faucet when it is on, and then switch off the faucet.
##############################
From agent.py
Human Instruction: You need to ensure that the pot is actually filled with water. While you turned on the faucet, there is no confirmation that the pot contains water. Make sure the pot is filled by keeping it under the faucet when it is on, and then switch off the faucet.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Observe around pot_54 with the question of Find a pot.
Action 7: Grab pot_54.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Switch on faucet_134.
Action 11: Walk to faucet_308.
Action 12: Switch off faucet_308.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_cupboard_130(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tape,cupboard_instance)
        else:
            exp(tape,cupboard_instance)
    eff:
        unknown[tape]=False
        close[tape,cupboard_instance]=True
        close[cupboard_instance,tape]=True
    

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        achieve_once is_off(faucet)

behavior ensure_pot_inhand(pot:item):
    body:
        achieve_once inhand(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        ensure_pot_inhand(pot)
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_tape_2028_around_cupboard_130(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tape,cupboard_instance)
        else:
            exp(tape,cupboard_instance)
    eff:
        unknown[tape]=False
        close[tape,cupboard_instance]=True
        close[cupboard_instance,tape]=True
    

behavior find_tea_bag_2017_around_cupboard_130(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea_bag,cupboard_instance)
        else:
            exp(tea_bag,cupboard_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,cupboard_instance]=True
        close[cupboard_instance,tea_bag]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        # Select a pot that is currently in hand
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_cupboard_130(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tape,cupboard_instance)
        else:
            exp(tape,cupboard_instance)
    eff:
        unknown[tape]=False
        close[tape,cupboard_instance]=True
        close[cupboard_instance,tape]=True
    

behavior find_pot_54_around_sink_307(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_faucet_off(faucet:item):
    body:
        achieve_once is_off(faucet)

behavior ensure_faucet_on(faucet:item):
    body:
        achieve_once is_on(faucet)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        achieve_once close_char(char, faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        # Select the pot, assuming it is already in hand
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134
        ensure_faucet_off(faucet)
        ensure_faucet_on(faucet)
        fill_pot_with_water(pot, faucet)
        ensure_faucet_off(faucet) 

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_faucet_off(faucet:item):
    body:
        achieve_once is_off(faucet)

behavior ensure_faucet_on(faucet:item):
    body:
        achieve_once is_on(faucet)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        achieve_once close_char(char, faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        # Select the pot, assuming it is already in hand
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134
        ensure_faucet_off(faucet)
        ensure_faucet_on(faucet)
        fill_pot_with_water(pot, faucet)
        ensure_faucet_off(faucet) 

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchoff_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is actually filled with water. While you turned on the faucet, there is no confirmation that the pot contains water. Make sure the pot is filled by keeping it under the faucet when it is on and then switch off the faucet.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_box_2023_around_cupboard_130(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot onto the stove

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot onto the stove

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)


##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is actually filled with water. While you turned on and off the faucet multiple times, there is no confirmation that the pot contains water. Make sure the pot is filled by keeping it under the faucet when it is on, and then switch off the faucet.
##############################
From agent.py
Human Instruction: You need to ensure that the pot is actually filled with water. While you turned on and off the faucet multiple times, there is no confirmation that the pot contains water. Make sure the pot is filled by keeping it under the faucet when it is on, and then switch off the faucet.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Observe around pot_54 with the question of Find a pot.
Action 7: Grab pot_54.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Switch on faucet_134.
Action 11: Walk to faucet_308.
Action 12: Switch off faucet_308.
Action 13: Walk to faucet_134.
Action 14: Switch off faucet_134.
Action 15: Switch on faucet_134.
Action 16: Switch off faucet_134.
Action 17: Walk to stove_2090.
Action 18: Put pot_54 on stove_2090.
Action 19: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_curtain_304(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==304
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(tape,curtain_instance)
        else:
            exp(tape,curtain_instance)
    eff:
        unknown[tape]=False
        close[tape,curtain_instance]=True
        close[curtain_instance,tape]=True
    

behavior find_box_2023_around_cupboard_130(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
def pot_filled(pot:item):
    # Function to check if the pot is filled with water
    symbol has_water_in_pot= has_water(pot)
    return has_water_in_pot

behavior place_pot_and_bring_to_boil(pot:item, stove:item):
    body:
        achieve_once has_water(pot) # Ensure the pot is filled with water
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to bring water to a boil

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and pot_filled(pot)
        # Select a pot that is filled with water
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_and_bring_to_boil(pot, stove)
        # Execute behavior to place the pot on the stove and bring the water to a boil

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_cupboard_130(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tape,cupboard_instance)
        else:
            exp(tape,cupboard_instance)
    eff:
        unknown[tape]=False
        close[tape,cupboard_instance]=True
        close[cupboard_instance,tape]=True
    

behavior find_box_2023_around_pot_2093(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(box,pot_instance)
        else:
            exp(box,pot_instance)
    eff:
        unknown[box]=False
        close[box,pot_instance]=True
        close[pot_instance,box]=True
    

behavior find_tea_bag_2017_around_cupboard_130(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea_bag,cupboard_instance)
        else:
            exp(tea_bag,cupboard_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,cupboard_instance]=True
        close[cupboard_instance,tea_bag]=True
    

#exp_behavior_end

#goal_representation

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior bring_water_to_boil(pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once is_on(stove)
        # Turn on the stove to bring the water to a boil

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        put_pot_on_stove(pot, stove)
        bring_water_to_boil(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_inside_stove(pot:item, stove:item):
    # Function to check if the pot is on the stove
    symbol is_inside= exists o: item : (is_pot(o) and on(o, stove))
    return is_inside

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior bring_water_to_boil(stove:item):
    body:
        achieve is_on(stove) # Ensure the stove is on to bring the water to boil

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot filled with water
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        if not is_inside_stove(pot, stove):
            place_pot_on_stove(pot, stove) # Ensure the pot is placed on the stove

        bring_water_to_boil(stove) # Turn on the stove to bring the water to a boil

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the pot on the stove and bring the water to a boil." ?
Answer: Put the pot on the stove. Turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2073_around_cupboard_130(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior verify_water_in_pot(pot:item, faucet:item):
    body:
        if not has_water(pot):
            achieve_once has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        bind stove: item where:
            is_stove(stove) and close_char(char, stove)
        bind faucet: item where:
            is_faucet(faucet)
        verify_water_in_pot(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_cupboard_130(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tape,cupboard_instance)
        else:
            exp(tape,cupboard_instance)
    eff:
        unknown[tape]=False
        close[tape,cupboard_instance]=True
        close[cupboard_instance,tape]=True
    

behavior find_box_2023_around_pot_2093(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(box,pot_instance)
        else:
            exp(box,pot_instance)
    eff:
        unknown[box]=False
        close[box,pot_instance]=True
        close[pot_instance,box]=True
    

behavior find_tea_bag_2017_around_cupboard_130(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea_bag,cupboard_instance)
        else:
            exp(tea_bag,cupboard_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,cupboard_instance]=True
        close[cupboard_instance,tea_bag]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_pot_has_water(pot:item):
    # Function to check if the pot has water in it
    return has_water(pot)

behavior bring_water_to_boil(pot:item, stove: item):
    body:
        achieve inside(pot, stove)
        # Ensure the pot is placed on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and ensure_pot_has_water(pot)
        # Select a pot with water in it
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bring_water_to_boil(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def ensure_pot_has_water(pot:item):
    # Function to check if the pot has water in it
    return has_water(pot)

behavior bring_water_to_boil(pot:item, stove: item):
    body:
        achieve inside(pot, stove)
        # Ensure the pot is placed on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and ensure_pot_has_water(pot)
        # Select a pot with water in it
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bring_water_to_boil(pot, stove)

##############################
From agent.py-> find a plan in act()
switchoff_executor(stove_2090)open_executor(stove_2090)grab_executor(pot_54)putin_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned off. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
putin_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is close stove_2090. pot_54 is inside stove_2090. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water before it is placed on the stove and the stove is turned on to bring the water to a boil. Ensure the pot is under a working faucet when it is switched on, and then switch off the faucet once the pot is filled.
##############################
From agent.py
Human Instruction: The pot needs to be filled with water before it is placed on the stove and the stove is turned on to bring the water to a boil. Ensure the pot is under a working faucet when it is switched on, and then switch off the faucet once the pot is filled.

Human Guidance: Put the pot on the stove. Turn on the stove.
The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Observe around pot_54 with the question of Find a pot.
Action 7: Grab pot_54.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Switch on faucet_134.
Action 11: Walk to faucet_308.
Action 12: Switch off faucet_308.
Action 13: Walk to faucet_134.
Action 14: Switch off faucet_134.
Action 15: Switch on faucet_134.
Action 16: Switch off faucet_134.
Action 17: Walk to stove_2090.
Action 18: Put pot_54 on stove_2090.
Action 19: Switch on stove_2090.
Action 20: Switch off stove_2090.
Action 21: Open stove_2090.
Action 22: Grab pot_54.
Action 23: Put pot_54 into stove_2090.
Action 24: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_cupboard_130(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tape,cupboard_instance)
        else:
            exp(tape,cupboard_instance)
    eff:
        unknown[tape]=False
        close[tape,cupboard_instance]=True
        close[cupboard_instance,tape]=True
    

behavior find_box_2023_around_cupboard_130(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before placing it on the stove and turning on the stove to bring the water to a boil. Currently, the pot has not been filled with water.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_130(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_vegetables_to_boiling_water(pot:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2090) and has_water(pot)
        # Select the pot which is on the stove with water
        achieve is_on(stove_2090) # Ensure the stove is on so the water is boiling
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to be added to the pot
        
        add_vegetables_to_boiling_water(pot, vegetables)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2090; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_130(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

#goal_representation
 
behavior add_vegetables_to_boiling_water(pot:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables into the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind pot: item where:
            is_pot(pot) and on(pot, stove) and has_water(pot)
        # Select the pot which is on the stove with water

        achieve is_on(stove) # Ensure the stove is on so the water is boiling
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to be added to the pot
        
        add_vegetables_to_boiling_water(pot, vegetables)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_vegetables_to_boiling_water(pot:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables into the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind pot: item where:
            is_pot(pot) and on(pot, stove) and has_water(pot)
        # Select the pot which is on the stove with water

        achieve is_on(stove) # Ensure the stove is on so the water is boiling
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to be added to the pot
        
        add_vegetables_to_boiling_water(pot, vegetables)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_vegetable_2072, cupboard_130)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_vegetable_2072, cupboard_130)
Fail to find food_vegetable_2072 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(food_vegetable_2072, kitchen_counter_128)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_vegetable_2072, kitchen_counter_128)
Fail to find food_vegetable_2072 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_box_2023_around_pot_2093(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(box,pot_instance)
        else:
            exp(box,pot_instance)
    eff:
        unknown[box]=False
        close[box,pot_instance]=True
        close[pot_instance,box]=True
    

behavior find_clothes_hat_2076_around_basket_for_clothes_2040(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation

behavior is_vegetables_cooked(pot:item):
    body:
        achieve_once is_off(pot)
        # Ensure the stove is off

def has_boiling_water(pot:item):
    symbol has_water=has_water(pot)
    return has_water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_on(stove_2090)
        # Bind the pot that is on the stove and currently boiling 
        
        if has_boiling_water(pot):
            is_vegetables_cooked(pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2090; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2026_around_curtain_199(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==199
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_onion,curtain_instance)
        else:
            exp(food_onion,curtain_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,curtain_instance]=True
        close[curtain_instance,food_onion]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
 
behavior is_vegetables_cooked(pot:item):
    body:
        achieve_once is_off(pot)
        # Ensure the stove is off

def has_boiling_water(pot:item):
    symbol has_water=has_water(pot)
    return has_water

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Bind the stove with ID 2090

        bind pot: item where:
            is_pot(pot) and on(pot, stove) and is_on(stove)
        # Bind the pot that is on the stove and currently boiling

        if has_boiling_water(pot):
            is_vegetables_cooked(pot)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_dishwasher_143(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_onion,dishwasher_instance)
        else:
            exp(food_onion,dishwasher_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,dishwasher_instance]=True
        close[dishwasher_instance,food_onion]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
 
behavior monitor_boiling(pot:item):
    body:
        achieve is_on(stove) 

behavior check_if_cooked(pot:item, food:item):
    body:
        observe(pot, "Check if the vegetables are cooked")

behavior ensure_cooking_progress(pot:item, food:item):
    body:
        achieve inside(food, pot) 
        achieve has_water(pot)
        monitor_boiling(pot)
        check_if_cooked(pot, food)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind food: item where:
            is_food_vegetable(food) and inside(food, pot)
        ensure_cooking_progress(pot, food)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_coin_2004_around_pot_2093(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(coin,pot_instance)
        else:
            exp(coin,pot_instance)
    eff:
        unknown[coin]=False
        close[coin,pot_instance]=True
        close[pot_instance,coin]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation

behavior monitor_boiling(pot:item, stove:item):
    body:
        achieve is_on(stove) 

behavior check_if_cooked(pot:item, food:item):
    body:
        observe(pot, "Check if the vegetables are cooked")

behavior ensure_cooking_progress(pot:item, food:item, stove:item):
    body:
        achieve inside(food, pot) 
        achieve has_water(pot)
        monitor_boiling(pot, stove)
        check_if_cooked(pot, food)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind food: item where:
            is_food_vegetable(food) and inside(food, pot)
        bind stove: item where:
            is_stove(stove)
        ensure_cooking_progress(pot, food, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior monitor_boiling(pot:item, stove:item):
    body:
        achieve is_on(stove) 

behavior check_if_cooked(pot:item, food:item):
    body:
        observe(pot, "Check if the vegetables are cooked")

behavior ensure_cooking_progress(pot:item, food:item, stove:item):
    body:
        achieve inside(food, pot) 
        achieve has_water(pot)
        monitor_boiling(pot, stove)
        check_if_cooked(pot, food)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind food: item where:
            is_food_vegetable(food) and inside(food, pot)
        bind stove: item where:
            is_stove(stove)
        ensure_cooking_progress(pot, food, stove)

##############################
From agent.py-> find a plan in act()
obs(pot_54, Check if the vegetables are cooked)
##############################
From agent.py
obs(pot_54, Check if the vegetables are cooked)
Get this information:  pot_54 is on stove_2090. pot_54 is close to stove_2090. pot_54 is close to character_219. pot_54 is close to food_vegetable_2072. food_vegetable_2072 is inside pot_54. pot_54 is inside dining_room_1. pot_54 is CLEAN. pot_54 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot contains water, as the information collected does not confirm that the pot was filled before placing it on the stove. Then, place the pot on the stove and turn it on to start boiling the vegetables.
##############################
From agent.py
Human Instruction: You need to ensure that the pot contains water, as the information collected does not confirm that the pot was filled before placing it on the stove. Then, place the pot on the stove and turn it on to start boiling the vegetables.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Observe around pot_54 with the question of Find a pot.
Action 7: Grab pot_54.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Switch on faucet_134.
Action 11: Walk to faucet_308.
Action 12: Switch off faucet_308.
Action 13: Walk to faucet_134.
Action 14: Switch off faucet_134.
Action 15: Switch on faucet_134.
Action 16: Switch off faucet_134.
Action 17: Walk to stove_2090.
Action 18: Put pot_54 on stove_2090.
Action 19: Switch on stove_2090.
Action 20: Switch off stove_2090.
Action 21: Open stove_2090.
Action 22: Grab pot_54.
Action 23: Put pot_54 into stove_2090.
Action 24: Switch on stove_2090.
Action 25: Grab pot_54.
Action 26: Put pot_54 on stove_2090.
Action 27: Walk to cupboard_130.
Action 28: look for food_vegetable_2072 around cupboard_130.
Action 29: Walk to kitchen_counter_128.
Action 30: look for food_vegetable_2072 around kitchen_counter_128.
Action 31: Walk to fridge_140.
Action 32: Switch off fridge_140.
Action 33: Open fridge_140.
Action 34: look for food_vegetable_2072 around fridge_140.
Action 35: Grab food_vegetable_2072.
Action 36: Walk to pot_54.
Action 37: Put food_vegetable_2072 into pot_54.
Action 38: Observe around pot_54 with the question of Check if the vegetables are cooked.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
 
behavior check_if_vegetables_are_cooked(pot:item):
    body:
        observe(pot, "Check if the vegetables are cooked")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2090)
        # Select pot on the stove with ID 2090
        
        achieve is_on(stove_2090)
        # Ensure the stove is turned on to boil the vegetables
        
        achieve has_water(pot)
        # Ensure the pot has water for boiling

        check_if_vegetables_are_cooked(pot)
        # Observe if the vegetables are cooked

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2090; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_coin_2004_around_dishwasher_143(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coin,dishwasher_instance)
        else:
            exp(coin,dishwasher_instance)
    eff:
        unknown[coin]=False
        close[coin,dishwasher_instance]=True
        close[dishwasher_instance,coin]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
behavior check_if_vegetables_are_cooked(pot:item):
    body:
        observe(pot, "Check if the vegetables are cooked")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select pot on the stove
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        
        achieve is_on(stove)
        # Ensure the stove is turned on to boil the vegetables
        
        achieve has_water(pot)
        # Ensure the pot has water for boiling

        check_if_vegetables_are_cooked(pot)
        # Observe if the vegetables are cooked
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
 
behavior check_if_vegetables_are_cooked(pot:item):
    body:
        observe(pot, "Check if the vegetables are cooked")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select pot on the stove
        
        achieve is_on(stove)
        # Ensure the stove is turned on to boil the vegetables
        
        achieve has_water(pot)
        # Ensure the pot has water for boiling

        check_if_vegetables_are_cooked(pot)
        # Observe if the vegetables are cooked

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior check_if_vegetables_are_cooked(pot:item):
    body:
        observe(pot, "Check if the vegetables are cooked")

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select pot on the stove
        
        achieve is_on(stove)
        # Ensure the stove is turned on to boil the vegetables
        
        achieve has_water(pot)
        # Ensure the pot has water for boiling

        check_if_vegetables_are_cooked(pot)
        # Observe if the vegetables are cooked

##############################
From agent.py-> find a plan in act()
obs(pot_54, Check if the vegetables are cooked)
##############################
From agent.py
obs(pot_54, Check if the vegetables are cooked)
Get this information:  pot_54 is on stove_2090. pot_54 is close to stove_2090. pot_54 is close to character_219. pot_54 is close to food_vegetable_2072. food_vegetable_2072 is inside pot_54. pot_54 is inside dining_room_1. pot_54 is CLEAN. pot_54 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot contains water before placing it on the stove and turning it on. Then, observe to check if the vegetables are cooked.
##############################
From agent.py
Human Instruction: You need to ensure that the pot contains water before placing it on the stove and turning it on. Then, observe to check if the vegetables are cooked.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Observe around pot_54 with the question of Find a pot.
Action 7: Grab pot_54.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Switch on faucet_134.
Action 11: Walk to faucet_308.
Action 12: Switch off faucet_308.
Action 13: Walk to faucet_134.
Action 14: Switch off faucet_134.
Action 15: Switch on faucet_134.
Action 16: Switch off faucet_134.
Action 17: Walk to stove_2090.
Action 18: Put pot_54 on stove_2090.
Action 19: Switch on stove_2090.
Action 20: Switch off stove_2090.
Action 21: Open stove_2090.
Action 22: Grab pot_54.
Action 23: Put pot_54 into stove_2090.
Action 24: Switch on stove_2090.
Action 25: Grab pot_54.
Action 26: Put pot_54 on stove_2090.
Action 27: Walk to cupboard_130.
Action 28: look for food_vegetable_2072 around cupboard_130.
Action 29: Walk to kitchen_counter_128.
Action 30: look for food_vegetable_2072 around kitchen_counter_128.
Action 31: Walk to fridge_140.
Action 32: Switch off fridge_140.
Action 33: Open fridge_140.
Action 34: look for food_vegetable_2072 around fridge_140.
Action 35: Grab food_vegetable_2072.
Action 36: Walk to pot_54.
Action 37: Put food_vegetable_2072 into pot_54.
Action 38: Observe around pot_54 with the question of Check if the vegetables are cooked.
Action 39: Observe around pot_54 with the question of Check if the vegetables are cooked.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_coin_2004_around_pot_2093(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(coin,pot_instance)
        else:
            exp(coin,pot_instance)
    eff:
        unknown[coin]=False
        close[coin,pot_instance]=True
        close[pot_instance,coin]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_until_cooked(pot:item):
    body:
        achieve_once visited(pot)
        # Observe the pot to determine if the vegetables are cooked

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2090) and has_water(pot)
        # Select the pot on stove_2090 that contains water
        boil_until_cooked(pot)
        # Boil the vegetables until they are cooked

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2090; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
 
behavior boil_until_cooked(pot:item, stove:item):
    body:
        achieve_once visited(pot) 
        # Observe the pot to determine if the vegetables are cooked

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot on stove_2090 that contains water
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        boil_until_cooked(pot, stove)
        # Boil the vegetables until they are cooked

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot)
        # Select the vegetables inside the pot

        achieve is_on(stove)
        # Ensure that the stove is on to boil the vegetables

        observe(pot, "Check if the vegetables are cooked")
        # Observe the pot to check if the vegetables are cooked
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot)
        # Select the vegetables inside the pot

        achieve is_on(stove)
        # Ensure that the stove is on to boil the vegetables

        observe(pot, "Check if the vegetables are cooked")
        # Observe the pot to check if the vegetables are cooked
##############################
From agent.py-> find a plan in act()
obs(pot_54, Check if the vegetables are cooked)
##############################
From agent.py
obs(pot_54, Check if the vegetables are cooked)
Get this information:  pot_54 is on stove_2090. pot_54 is close to stove_2090. pot_54 is close to character_219. pot_54 is close to food_vegetable_2072. food_vegetable_2072 is inside pot_54. pot_54 is inside dining_room_1. pot_54 is CLEAN. pot_54 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the stove is turned on to boil the vegetables, as required by the task, before checking if they are cooked. Make sure the stove remains on during cooking.
##############################
Task Summary:
Task Goal:
Boil vegetables with a pot on the stove.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'switchon_executor(faucet_134)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'switchoff_executor(stove_2090)', 'open_executor(stove_2090)', 'grab_executor(pot_54)', 'putin_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'grab_executor(pot_54)', 'put_executor(pot_54, stove_2090)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_128)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_vegetable_2072)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)']
Time info:
Time consume: 434 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 19
goal correct times: 4
action_num: 32

Task complete rate:
Keystate: k1 - Requires: 7 steps
Keystate: k2 - Requires: 2 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
