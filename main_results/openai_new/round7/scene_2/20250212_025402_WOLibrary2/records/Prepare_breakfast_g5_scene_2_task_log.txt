From agent.py
Reset goals: The sub-goals are: 
['1. Find the milk and cereal.  ', '2. Pour the milk into a cup and heat it.  ', '3. Add the cereal into the heated milk.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cereal_2048_around_cupboard_131(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_or_cereal(item:item):
    # Function to check if an item is milk or cereal
    return is_milk(item) or is_food_cereal(item)

behavior observe_unvisited_items():
    body:
        foreach item: item:
            if not visited(item) and is_milk_or_cereal(item):
                observe(item, "Locate milk and cereal if present")

behavior close_to_milk_or_cereal(item:item):
    body:
        if is_milk_or_cereal(item):
            achieve close_char(char, item)

behavior __goal__():
    body:
        if exists item: item: (is_milk_or_cereal(item) and visited(item)):
            # If milk or cereal is already visited, approach it
            bind item: item where:
                is_milk_or_cereal(item) and visited(item)
            close_to_milk_or_cereal(item)
        else:
            # Observe unvisited items to locate milk or cereal
            observe_unvisited_items()


#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_milk_or_cereal(item:item):
    # Function to check if an item is milk or cereal
    return is_milk(item) or is_food_cereal(item)

behavior observe_unvisited_items():
    body:
        foreach item: item:
            if not visited(item) and is_milk_or_cereal(item):
                observe(item, "Locate milk and cereal if present")

behavior close_to_milk_or_cereal(item:item):
    body:
        if is_milk_or_cereal(item):
            achieve close_char(char, item)

behavior __goal__():
    body:
        if exists item: item: (is_milk_or_cereal(item) and visited(item)):
            # If milk or cereal is already visited, approach it
            bind item: item where:
                is_milk_or_cereal(item) and visited(item)
            close_to_milk_or_cereal(item)
        else:
            # Observe unvisited items to locate milk or cereal
            observe_unvisited_items()


##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_cereal_2048, cupboard_131)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, Locate milk and cereal if present)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)obs(milk_2074, Locate milk and cereal if present)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_cereal_2048, cupboard_131)
Fail to find food_cereal_2048 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_cereal_2048, cupboard_130)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, Locate milk and cereal if present)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)obs(milk_2074, Locate milk and cereal if present)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_cereal_2048, cupboard_130)
Fail to find food_cereal_2048 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_cereal_2048, kitchen_counter_132)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, Locate milk and cereal if present)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)obs(milk_2074, Locate milk and cereal if present)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_cereal_2048, kitchen_counter_132)
Fail to find food_cereal_2048 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_cereal_2048, fridge_140)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, Locate milk and cereal if present)walk_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)obs(milk_2074, Locate milk and cereal if present)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_cereal_2048, fridge_140)
Find food_cereal_2048. 
##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2048)obs(food_cereal_2048, Locate milk and cereal if present)walk_executor(milk_2074)obs(milk_2074, Locate milk and cereal if present)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_stove_2090(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_food_butter_2018_around_bookshelf_136(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(food_butter,bookshelf_instance)
        else:
            exp(food_butter,bookshelf_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,bookshelf_instance]=True
        close[bookshelf_instance,food_butter]=True
    

behavior find_food_orange_2008_around_oven_141(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_orange,oven_instance)
        else:
            exp(food_orange,oven_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,oven_instance]=True
        close[oven_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal(item:item):
    # Function to check if there is milk or cereal inside an item
    symbol has_milk_or_cereal= exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, item))
    return has_milk_or_cereal

behavior __goal__():
    body:
        if exists item: item : (has_milk_or_cereal(item)):
            # Check if milk or cereal is already found in any known item
            bind item: item where:
                has_milk_or_cereal(item) # The condition has_milk_or_cereal can only be used when you are certain of the items presence
            achieve close_char(char, item) 
            # Move the character closer to the item containing milk or cereal

        else: 
           # If no milk or cereal is found, initiate exploration to locate them
            foreach item: item:
                if not visited(item):
                    # Check all unvisited items
                    observe(item,"Check is there any milk or cereal in this item")
                    # Observe whether each item has milk or cereal

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_food_onion_2026_around_stove_2090(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        if exists item: item : (is_milk(item) or is_food_cereal(item)):
            # If milk or cereal is already located, move close to it
            bind item: item where:
                is_milk(item) or is_food_cereal(item)
            achieve close_char(char, item)

        else:
            # Search for milk and cereal in available locations
            foreach location: item:
                if (is_cupboard(location) or is_fridge(location) or is_kitchen_counter(location)) and not visited(location):
                    observe(location, "Check for the presence of milk or cereal")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_stove_2090(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_food_bread_2016_around_cutting_board_2080(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_bread,cutting_board_instance)
        else:
            exp(food_bread,cutting_board_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cutting_board_instance]=True
        close[cutting_board_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def can_access_milk_cereal(milk:item, cereal:item):
    symbol accessible_milk=exists o: item : (is_milk(o) and inside(o, milk))
    symbol accessible_cereal=exists o: item : (is_food_cereal(o) and inside(o, cereal))
    return accessible_milk and accessible_cereal

behavior find_milk_cereal():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        bind char: character where:
            close_char(char, fridge)
        close_char(char, fridge)

behavior check_cereal_milk(fridge:item):
    body:
        if can_access_milk_cereal(fridge, fridge):
            bind cereal:item where:
                is_food_cereal(cereal) and inside(cereal, fridge)
            bind milk:item where:
                is_milk(milk) and inside(milk, fridge)
            achieve_once inhand(cereal)
            achieve_once inhand(milk)
        else:
            observe(fridge, "Check for milk and cereal inside")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        find_milk_cereal()
        check_cereal_milk(fridge)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2016_around_toaster_144(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_bread,toaster_instance)
        else:
            exp(food_bread,toaster_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,toaster_instance]=True
        close[toaster_instance,food_bread]=True
    

behavior find_bowl_2097_around_ironing_board_2099(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(bowl,ironing_board_instance)
        else:
            exp(bowl,ironing_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,ironing_board_instance]=True
        close[ironing_board_instance,bowl]=True
    

#goal_representation
 
def can_access_milk_cereal(milk:item, cereal:item):
    symbol accessible_milk=exists o: item : (is_milk(o) and inside(o, milk))
    symbol accessible_cereal=exists o: item : (is_food_cereal(o) and inside(o, cereal))
    return accessible_milk and accessible_cereal

behavior find_milk_cereal(char:character, fridge:item):
    body:
        achieve close_char(char, fridge)

behavior check_cereal_milk(fridge:item, char:character):
    body:
        if can_access_milk_cereal(fridge, fridge):
            bind cereal:item where:
                is_food_cereal(cereal) and inside(cereal, fridge)
            bind milk:item where:
                is_milk(milk) and inside(milk, fridge)
            achieve_once inhand(cereal)
            achieve_once inhand(milk)
        else:
            observe(fridge, "Check for milk and cereal inside")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        find_milk_cereal(char, fridge)
        check_cereal_milk(fridge, char)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def can_access_milk_cereal(milk:item, cereal:item):
    symbol accessible_milk=exists o: item : (is_milk(o) and inside(o, milk))
    symbol accessible_cereal=exists o: item : (is_food_cereal(o) and inside(o, cereal))
    return accessible_milk and accessible_cereal

behavior find_milk_cereal(char:character, fridge:item):
    body:
        achieve close_char(char, fridge)

behavior check_cereal_milk(fridge:item, char:character):
    body:
        if can_access_milk_cereal(fridge, fridge):
            bind cereal:item where:
                is_food_cereal(cereal) and inside(cereal, fridge)
            bind milk:item where:
                is_milk(milk) and inside(milk, fridge)
            achieve_once inhand(cereal)
            achieve_once inhand(milk)
        else:
            observe(fridge, "Check for milk and cereal inside")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        find_milk_cereal(char, fridge)
        check_cereal_milk(fridge, char)

##############################
From agent.py-> find a plan in act()
obs(fridge_140, Check for milk and cereal inside)
##############################
From agent.py
obs(fridge_140, Check for milk and cereal inside)
Get this information:  food_rice_2067 is inside fridge_140. food_jam_2059 is inside fridge_140. food_sugar_2070 is inside fridge_140. food_apple_2043 is inside fridge_140. food_dessert_2051 is inside fridge_140. food_noodles_2062 is inside fridge_140. fridge_140 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_pizza_2065 is inside fridge_140. food_cake_2046 is inside fridge_140. food_hamburger_2057 is inside fridge_140. food_salt_2068 is inside fridge_140. food_cheese_2049 is inside fridge_140. food_kiwi_2060 is inside fridge_140. food_donut_2052 is inside fridge_140. food_turkey_2071 is inside fridge_140. food_bacon_2044 is inside fridge_140. sauce_2101 is inside fridge_140. food_oatmeal_2063 is inside fridge_140. dry_pasta_2073 is on fridge_140. food_food_2055 is inside fridge_140. food_carrot_2047 is inside fridge_140. food_potato_2066 is inside fridge_140. food_ice_cream_2058 is inside fridge_140. food_snack_2069 is inside fridge_140. food_chicken_2050 is inside fridge_140. food_lemon_2061 is inside fridge_140. food_vegetable_2072 is inside fridge_140. fridge_140 is close to food_cereal_2048. fridge_140 is close to food_cheese_2049. fridge_140 is close to food_chicken_2050. fridge_140 is close to food_dessert_2051. fridge_140 is close to food_donut_2052. fridge_140 is close to food_egg_2053. fridge_140 is close to food_fish_2054. fridge_140 is close to food_food_2055. fridge_140 is close to food_fruit_2056. fridge_140 is close to food_hamburger_2057. fridge_140 is close to food_ice_cream_2058. fridge_140 is close to food_jam_2059. fridge_140 is close to food_kiwi_2060. fridge_140 is close to food_lemon_2061. fridge_140 is close to food_noodles_2062. fridge_140 is close to food_oatmeal_2063. fridge_140 is close to food_peanut_butter_2064. fridge_140 is close to food_pizza_2065. fridge_140 is close to food_potato_2066. fridge_140 is close to food_rice_2067. fridge_140 is close to food_salt_2068. fridge_140 is close to food_snack_2069. fridge_140 is close to food_sugar_2070. fridge_140 is close to food_turkey_2071. fridge_140 is close to food_vegetable_2072. fridge_140 is close to dry_pasta_2073. fridge_140 is close to milk_2074. fridge_140 is close to cupboard_131. fridge_140 is close to floor_22. fridge_140 is close to ceiling_34. fridge_140 is close to wall_7. fridge_140 is close to wall_8. fridge_140 is close to kitchen_counter_129. fridge_140 is close to sauce_2101. fridge_140 is close to chair_138. fridge_140 is close to toaster_144. fridge_140 is close to food_steak_2042. fridge_140 is close to food_apple_2043. fridge_140 is close to food_bacon_2044. fridge_140 is close to food_banana_2045. fridge_140 is close to food_cake_2046. fridge_140 is close to food_carrot_2047. fridge_140 is close to character_219. food_steak_2042 is inside fridge_140. food_egg_2053 is inside fridge_140. fridge_140 is on floor_22. food_peanut_butter_2064 is inside fridge_140. milk_2074 is on fridge_140. food_banana_2045 is inside fridge_140. food_fruit_2056 is inside fridge_140. food_cereal_2048 is inside fridge_140. fridge_140 is OFF. fridge_140 is PLUGGED_IN. fridge_140 is CLEAN. fridge_140 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_sink_307(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_plate_2105_around_sink_307(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(plate,sink_instance)
        else:
            exp(plate,sink_instance)
    eff:
        unknown[plate]=False
        close[plate,sink_instance]=True
        close[sink_instance,plate]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_needs_heating(milk:item):
    # Check if the milk needs to be heated
    symbol needs_heating=not exists o: item : (is_hot(o) and inside(o, milk))
    return needs_heating

def close_cupboard_if_open(cupboard:item):
    # Define a behavior to close the cupboard if its open
    if open(cupboard):
        achieve_once closed(cupboard)

behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Pour the milk into the cup

behavior heat_milk(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave) 
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind cup: item where:
            is_cup(cup)
        bind cupboard: item where:
            is_cupboard(cupboard)
        bind microwave: item where:
            is_microwave(microwave) and close_char(char, microwave)
        # ensure char is close to the microwave
        if is_food_needs_heating(milk):
            close_cupboard_if_open(cupboard)
            pour_milk_into_cup(milk, cup)
            heat_milk(cup, microwave)
        else:
            pour_milk_into_cup(milk, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5923, column 37.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2089_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_bowl_2097_around_sink_307(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#goal_representation
 
def is_food_needs_heating(milk:item):
    # Check if the milk needs to be heated
    symbol needs_heating= not exists o: item : (is_hot(o) and inside(milk, o))
    return needs_heating

def close_cupboard_if_open(cupboard:item):
    # Define a behavior to close the cupboard if its open
    if open(cupboard):
        achieve_once closed(cupboard)

behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Pour the milk into the cup

behavior heat_milk(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave) 
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind cup: item where:
            is_cup(cup)
        bind cupboard: item where:
            is_cupboard(cupboard)
        bind microwave: item where:
            is_microwave(microwave) and close_char(char, microwave)
        # ensure char is close to the microwave
        if is_food_needs_heating(milk):
            close_cupboard_if_open(cupboard)
            pour_milk_into_cup(milk, cup)
            heat_milk(cup, microwave)
        else:
            pour_milk_into_cup(milk, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5905, column 38.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2087_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_bowl_2095_around_sink_133(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#goal_representation
 
def is_food_needs_heating(milk:item):
    # Check if the milk needs to be heated
    symbol needs_heating = not exists o: item : (is_hot(o) and inside(milk, o))
    return needs_heating

def close_cupboard_if_open(cupboard:item):
    # Define a behavior to close the cupboard if its open
    if open(cupboard):
        achieve_once closed(cupboard)

behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Pour the milk into the cup

behavior heat_milk(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave) 
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind cup: item where:
            is_cup(cup)
        bind cupboard: item where:
            is_cupboard(cupboard)
        bind microwave: item where:
            is_microwave(microwave) and close_char(char, microwave)
        # Ensure char is close to the microwave
        if is_food_needs_heating(milk):
            close_cupboard_if_open(cupboard)
            pour_milk_into_cup(milk, cup)
            heat_milk(cup, microwave)
        else:
            pour_milk_into_cup(milk, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_sink_307(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk(item:item):
    # Function to check if an item is milk
    return is_milk(item)

behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Pour the milk into the cup

behavior heat_milk(milk:item, microwave:item):
    body:
        achieve_once inside(milk, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)
        # Heat the milk by putting it inside the microwave, closing it, and turning it on

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        pour_milk_into_cup(milk, cup)
        heat_milk(milk, microwave)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_milk(item:item):
    # Function to check if an item is milk
    return is_milk(item)

behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Pour the milk into the cup

behavior heat_milk(milk:item, microwave:item):
    body:
        achieve_once inside(milk, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)
        # Heat the milk by putting it inside the microwave, closing it, and turning it on

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        pour_milk_into_cup(milk, cup)
        heat_milk(milk, microwave)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_307)exp(cup_2087, sink_307)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(microwave_149)putin_executor(milk_2074, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)
##############################
From agent.py
walk_executor(sink_307)
Robot find: detergent_2108, drawing_296, towel_rack_298, Robot is close to the bathroom_counter_306. Robot is close to the sink_307. 
##############################
From agent.py
exp(cup_2087, sink_307)
Fail to find cup_2087 around sink_307. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(cup_2087, sink_133)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(microwave_149)putin_executor(milk_2074, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(cup_2087, sink_133)
Fail to find cup_2087 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(curtain_390)open_executor(curtain_390)exp(cup_2087, curtain_390)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(microwave_149)putin_executor(milk_2074, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)
##############################
From agent.py
walk_executor(curtain_390)
Robot find: pillow_370, mat_386, pillow_368, drawing_388, Robot is close to the curtain_390. 
##############################
From agent.py
open_executor(curtain_390)
Robot find: Robot is close to the curtain_390. Robot is close to the curtain_391. curtain_390 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Go to the dining_room_1. Locate table_123, and you will find cup_2087 on top of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining_room_1. Locate table_123, and you will find cup_2087 on top of it.

Trial and Error: You can not open food_cereal_2048
The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_cereal_2048 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_cereal_2048 around cupboard_130.
Action 6: Walk to kitchen_counter_132.
Action 7: look for food_cereal_2048 around kitchen_counter_132.
Action 8: Walk to fridge_140.
Action 9: Switch off fridge_140.
Action 10: Open fridge_140.
Action 11: look for food_cereal_2048 around fridge_140.
Action 12: Observe around fridge_140 with the question of Check for milk and cereal inside.
Action 13: Walk to sink_307.
Action 14: look for cup_2087 around sink_307.
Action 15: Walk to sink_133.
Action 16: look for cup_2087 around sink_133.
Action 17: Walk to curtain_390.
Action 18: Open curtain_390.

##############################
From agent.py
exp(cup_2087, curtain_390)
Fail to find cup_2087 around curtain_390. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(microwave_149)putin_executor(milk_2074, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(microwave_149)putin_executor(milk_2074, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the fridge_140. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
putin_executor(milk_2074, cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. milk_2074 is close cup_2087. milk_2074 is inside cup_2087. cup_2087 is close milk_2074. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the cup_2087. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the cup_2087. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
putin_executor(milk_2074, microwave_149)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is close milk_2074. milk_2074 is close microwave_149. milk_2074 is inside microwave_149. milk_2074 released by right hand. 
##############################
From agent.py
close_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is closed. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_bowl_2097_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_milk(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
      
behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal that needs to be added
        
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087, which contains the heated milk
        
        add_cereal_to_milk(cereal, cup)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_cereal_to_milk(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
      
behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal that needs to be added
        
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087, which contains the heated milk
        
        add_cereal_to_milk(cereal, cup)
 
##############################
From agent.py-> find a plan in act()
walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the fridge_140. Grabbing food_cereal_2048 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
putin_executor(food_cereal_2048, cup_2087)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the table_123. Robot is close to the cup_2087. food_cereal_2048 is close cup_2087. cup_2087 is close food_cereal_2048. food_cereal_2048 is inside cup_2087. food_cereal_2048 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_132)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(sink_307)', 'walk_executor(sink_133)', 'walk_executor(curtain_390)', 'open_executor(curtain_390)', 'walk_executor(table_123)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(cup_2087)', 'putin_executor(milk_2074, cup_2087)', 'walk_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(microwave_149)', 'putin_executor(milk_2074, microwave_149)', 'close_executor(microwave_149)', 'switchon_executor(microwave_149)', 'walk_executor(food_cereal_2048)', 'grab_executor(food_cereal_2048)', 'walk_executor(cup_2087)', 'putin_executor(food_cereal_2048, cup_2087)']
Time info:
Time consume: 237 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 7
goal correct times: 1
action_num: 29

Task complete rate:
Keystate: k1 - Requires: 12 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
