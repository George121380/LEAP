From agent.py
Reset goals: The sub-goals are: 
['1. Identify the coffee table in the home office.', '2. Find the book and place it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_table_123(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_dessert,table_instance)
        else:
            exp(food_dessert,table_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,table_instance]=True
        close[table_instance,food_dessert]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office in the current environment

        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Identify if this table is the coffee table")
                # Observe each unvisited table to determine if it is the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_goal

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office in the current environment

        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Identify if this table is the coffee table")
                # Observe each unvisited table to determine if it is the coffee table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)obs(table_123, Identify if this table is the coffee table)walk_executor(table_127)obs(table_127, Identify if this table is the coffee table)walk_executor(table_193)obs(table_193, Identify if this table is the coffee table)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
obs(table_123, Identify if this table is the coffee table)
Get this information:  cup_2088 is on table_123. laptop_2015 is on table_123. table_123 is inside dining_room_1. table_123 is close to wall_5. table_123 is close to cup_2087. table_123 is close to cup_2088. table_123 is close to ceilinglamp_41. table_123 is close to floor_12. table_123 is close to floor_13. table_123 is close to floor_14. table_123 is close to bowl_2095. table_123 is close to floor_17. table_123 is close to mat_114. table_123 is close to floor_18. table_123 is close to mouse_2003. table_123 is close to fork_2103. table_123 is close to bench_122. table_123 is close to homework_2011. table_123 is close to bench_124. table_123 is close to laptop_2015. table_123 is close to character_219. fork_2103 is on table_123. table_123 is on floor_17. table_123 is on mat_114. bowl_2095 is on table_123. cup_2087 is on table_123. homework_2011 is on table_123. mouse_2003 is on table_123. table_123 is facing drawing_118. table_123 is CLEAN.
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
obs(table_127, Identify if this table is the coffee table)
Get this information:  fork_2104 is on table_127. table_127 is close to wall_11. table_127 is close to console_2027. table_127 is close to crayon_2030. table_127 is close to bowl_2096. table_127 is close to bowl_2097. table_127 is close to mat_115. table_127 is close to floor_20. table_127 is close to floor_19. table_127 is close to napkin_2014. table_127 is close to floor_23. table_127 is close to fork_2104. table_127 is close to plate_2105. table_127 is close to bench_126. table_127 is close to bench_125. table_127 is close to floor_24. table_127 is close to character_219. bowl_2096 is on table_127. table_127 is on mat_115. table_127 is on floor_20. plate_2105 is on table_127. table_127 is facing drawing_118. bowl_2097 is on table_127. console_2027 is on table_127. table_127 is inside dining_room_1. crayon_2030 is on table_127. napkin_2014 is on table_127. table_127 is CLEAN.
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the table_193. 
##############################
From agent.py
obs(table_193, Identify if this table is the coffee table)
Get this information:  computer_2110 is on table_193. table_193 is close to mouse_2112. table_193 is close to couch_192. table_193 is close to pillow_195. table_193 is close to floor_164. table_193 is close to floor_165. table_193 is close to chair_2119. table_193 is close to curtain_199. table_193 is close to orchid_200. table_193 is close to floor_168. table_193 is close to wall_170. table_193 is close to floor_167. table_193 is close to mat_201. table_193 is close to laser_pointer_2025. table_193 is close to wall_174. table_193 is close to dvd_player_2000. table_193 is close to oil_2005. table_193 is close to computer_2110. table_193 is close to keyboard_2111. table_193 is close to character_219. table_193 is facing drawing_196. keyboard_2111 is on table_193. oil_2005 is on table_193. orchid_200 is on table_193. table_193 is inside home_office_161. dvd_player_2000 is on table_193. mouse_2112 is on table_193. laser_pointer_2025 is on table_193. table_193 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)
        # Place the book on the coffee table

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and visited(coffee_table)
        # Select the identified coffee table in the home office

        bind book: item where:
            is_book(book)
        # Select a book to be placed on the coffee table
        
        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)
        # Place the book on the coffee table

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and visited(coffee_table)
        # Select the identified coffee table in the home office

        bind book: item where:
            is_book(book)
        # Select a book to be placed on the coffee table
        
        place_book_on_coffee_table(book, coffee_table)

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(table: item):
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior find_and_place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and is_in_home_office(coffee_table) and visited(coffee_table)
        # Select a table in the home office that is identified as the coffee table

        foreach book: item:
            if is_book(book) and not on(book, coffee_table) and not visited(book):
                observe(book, "Is this the book I need to find")
                # Check if you have found the correct book
                if not visited(book):
                    continue # Skip the book if it is not the one you are looking for
                find_and_place_book_on_coffee_table(book, coffee_table)
                # Place the identified book on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: continue; available variables: [Variable<book: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
 
def is_in_home_office(table: item):
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior find_and_place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and is_in_home_office(coffee_table) and visited(coffee_table)
        # Select a table in the home office that is identified as the coffee table

        foreach book: item:
            if is_book(book) and not on(book, coffee_table) and not visited(book):
                observe(book, "Is this the book I need to find")
                # Check if you have found the correct book
                if visited(book):
                    find_and_place_book_on_coffee_table(book, coffee_table)
                    # Place the identified book on the coffee table

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def on_coffee_table(book:item, coffee_table:item):
    # Check if the book is on the coffee table
    symbol is_on_coffee_table= on(book, coffee_table)
    return is_on_coffee_table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        foreach coffee_table: item:
        # Check if the table is the coffee table in the home office
            if is_table(coffee_table) and inside(coffee_table, home_office) and not visited(coffee_table):
                observe(coffee_table, "Identify if this table is the coffee table")

        bind coffee_table: item where:
            is_table(coffee_table) and visited(coffee_table) and inside(coffee_table, home_office)

        foreach book: item:
        # Check all items to find the book
            if is_book(book) and not on_coffee_table(book, coffee_table) and not visited(book):
                observe(book, "Check if this book should be placed on the coffee table")

        foreach book: item:
        # Place books on the coffee table
            if is_book(book) and not on_coffee_table(book, coffee_table):
                achieve_once on(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def on_coffee_table(book:item, coffee_table:item):
    # Check if the book is on the coffee table
    symbol is_on_coffee_table= on(book, coffee_table)
    return is_on_coffee_table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        foreach coffee_table: item:
        # Check if the table is the coffee table in the home office
            if is_table(coffee_table) and inside(coffee_table, home_office) and not visited(coffee_table):
                observe(coffee_table, "Identify if this table is the coffee table")

        bind coffee_table: item where:
            is_table(coffee_table) and visited(coffee_table) and inside(coffee_table, home_office)

        foreach book: item:
        # Check all items to find the book
            if is_book(book) and not on_coffee_table(book, coffee_table) and not visited(book):
                observe(book, "Check if this book should be placed on the coffee table")

        foreach book: item:
        # Place books on the coffee table
            if is_book(book) and not on_coffee_table(book, coffee_table):
                achieve_once on(book, coffee_table)

##############################
From agent.py-> find a plan in act()
obs(table_193, Identify if this table is the coffee table)walk_executor(bookshelf_260)open_executor(bookshelf_260)exp(book_2091, bookshelf_260)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if this book should be placed on the coffee table)walk_executor(bookshelf_260)exp(book_2092, bookshelf_260)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this book should be placed on the coffee table)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)walk_executor(book_2092)grab_executor(book_2092)walk_executor(table_193)put_executor(book_2092, table_193)
##############################
From agent.py
obs(table_193, Identify if this table is the coffee table)
Get this information:  computer_2110 is on table_193. table_193 is close to mouse_2112. table_193 is close to couch_192. table_193 is close to pillow_195. table_193 is close to floor_164. table_193 is close to floor_165. table_193 is close to chair_2119. table_193 is close to curtain_199. table_193 is close to orchid_200. table_193 is close to floor_168. table_193 is close to wall_170. table_193 is close to floor_167. table_193 is close to mat_201. table_193 is close to laser_pointer_2025. table_193 is close to wall_174. table_193 is close to dvd_player_2000. table_193 is close to oil_2005. table_193 is close to computer_2110. table_193 is close to keyboard_2111. table_193 is close to character_219. table_193 is facing drawing_196. keyboard_2111 is on table_193. oil_2005 is on table_193. orchid_200 is on table_193. table_193 is inside home_office_161. dvd_player_2000 is on table_193. mouse_2112 is on table_193. laser_pointer_2025 is on table_193. table_193 is CLEAN.
##############################
From agent.py
walk_executor(bookshelf_260)
Robot find: drawing_238, chair_263, mat_237, Robot is close to the bookshelf_260. 
##############################
From agent.py
open_executor(bookshelf_260)
Robot find: Robot is close to the bookshelf_260. Robot is close to the photoframe_246. bookshelf_260 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_260)
Fail to find book_2091 around bookshelf_260. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if this book should be placed on the coffee table)walk_executor(bookshelf_136)exp(book_2092, bookshelf_136)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this book should be placed on the coffee table)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)walk_executor(book_2092)grab_executor(book_2092)walk_executor(table_193)put_executor(book_2092, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if this book should be placed on the coffee table)walk_executor(bookshelf_136)exp(book_2092, bookshelf_136)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this book should be placed on the coffee table)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)walk_executor(book_2092)grab_executor(book_2092)walk_executor(table_193)put_executor(book_2092, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
open_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. book_2091 is opened. 
##############################
From agent.py
obs(book_2091, Check if this book should be placed on the coffee table)
Get this information:  book_2091 is on bookshelf_136. book_2091 is close to bookshelf_136. book_2091 is close to character_219. book_2091 is inside dining_room_1. book_2091 is OPEN.
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2092, bookshelf_136)
Fail to find book_2092 around bookshelf_136. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(book_2092, bookshelf_137)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this book should be placed on the coffee table)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)walk_executor(book_2092)grab_executor(book_2092)walk_executor(table_193)put_executor(book_2092, table_193)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py
exp(book_2092, bookshelf_137)
Find book_2092. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if this book should be placed on the coffee table)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)walk_executor(book_2092)grab_executor(book_2092)walk_executor(table_193)put_executor(book_2092, table_193)
##############################
From agent.py
walk_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. 
##############################
From agent.py
open_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. book_2092 is opened. 
##############################
From agent.py
obs(book_2092, Check if this book should be placed on the coffee table)
Get this information:  book_2092 is inside dining_room_1. book_2092 is close to bookshelf_137. book_2092 is close to character_219. book_2092 is on bookshelf_137. book_2092 is OPEN.
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py
walk_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. 
##############################
From agent.py
grab_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. Grabbing book_2092 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the book_2092. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2092, table_193)
Robot find: Robot is close to the book_2092. Robot is close to the table_193. table_193 is close book_2092. book_2092 is close table_193. book_2092 is on table_193. book_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffee table in home office.
Action History:
['walk_executor(table_123)', 'walk_executor(table_127)', 'walk_executor(table_193)', 'walk_executor(bookshelf_260)', 'open_executor(bookshelf_260)', 'walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'open_executor(book_2091)', 'walk_executor(bookshelf_136)', 'walk_executor(bookshelf_137)', 'open_executor(bookshelf_137)', 'walk_executor(book_2092)', 'open_executor(book_2092)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)', 'walk_executor(book_2092)', 'grab_executor(book_2092)', 'walk_executor(table_193)', 'put_executor(book_2092, table_193)']
Time info:
Time consume: 112 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 21

Task complete rate:
1
Scene_id: 2
##############################
