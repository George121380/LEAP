From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt to be washed.', '2. Hand wash the shirt.', '3. Iron the shirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        foreach shirt: item:
            if is_clothes_shirt(shirt) and not visited(shirt):
                observe(shirt, "Check if this is the shirt to be washed")

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        foreach shirt: item:
            if is_clothes_shirt(shirt) and not visited(shirt):
                observe(shirt, "Check if this is the shirt to be washed")

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2040)exp(clothes_shirt_2114, basket_for_clothes_2040)walk_executor(clothes_shirt_2114)obs(clothes_shirt_2114, Check if this is the shirt to be washed)
##############################
From agent.py
walk_executor(basket_for_clothes_2040)
Robot find: clothes_pants_2113, clothes_shirt_2114, clothes_socks_2115, clothes_skirt_2116, Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. 
##############################
From agent.py
exp(clothes_shirt_2114, basket_for_clothes_2040)
Find clothes_shirt_2114. 
##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2114, Check if this is the shirt to be washed)
##############################
From agent.py
obs(clothes_shirt_2114, Check if this is the shirt to be washed)
Get this information:  clothes_shirt_2114 is close to basket_for_clothes_2040. clothes_shirt_2114 is close to character_219. clothes_shirt_2114 is inside basket_for_clothes_2040. clothes_shirt_2114 is inside bathroom_265. clothes_shirt_2114 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_shirt(shirt:item, detergent:item, sink:item):
    body:
        achieve_once dirty(shirt) # Precondition: The shirt is initially dirty
        achieve_once inside(shirt, sink) # Place the shirt in the sink
        achieve_once has_water(sink) # The sink needs to have water
        achieve_once inhand(detergent) # The detergent is held to wash the shirt
        wash(shirt) # Wash the shirt by hand
        rinse(shirt) # Rinse the shirt to remove detergent
        achieve_once clean(shirt) # Final state: The shirt is clean

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and dirty(shirt)
        # The shirt to wash
        
        bind detergent: item where:
            is_detergent(detergent)
        # The detergent for the washing process
        
        bind sink: item where:
            is_sink(sink) and has_water(sink)
        # A sink that has water
        
        wash_shirt(shirt, detergent, sink)
        # Perform the washing of the shirt

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_shirt(shirt:item):
    body:
        wash(shirt)
        scrub(shirt)
        rinse(shirt)
        squeeze(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        wash_shirt(shirt)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_shirt(shirt:item):
    body:
        wash(shirt)
        scrub(shirt)
        rinse(shirt)
        squeeze(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        wash_shirt(shirt)

##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2114)wash_executor(clothes_shirt_2114)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(clothes_shirt_2114)scrub_executor(clothes_shirt_2114)rinse_executor(clothes_shirt_2114)
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py
wash_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. clothes_shirt_2114 is cleaned. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the clothes_shirt_2114. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
scrub_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
rinse_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot should squeeze the clothes_shirt_2114 to complete the hand washing process.
##############################
From agent.py
Human Instruction: The robot should squeeze the clothes_shirt_2114 to complete the hand washing process.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Observe around clothes_shirt_2114 with the question of Check if this is the shirt to be washed.
Action 4: Grab clothes_shirt_2114.
Action 5: Wash clothes_shirt_2114.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to clothes_shirt_2114.
Action 9: Scrub clothes_shirt_2114.
Action 10: Rinse clothes_shirt_2114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior finish_hand_washing_shirt(shirt:item):
    body:
        scrub(shirt)
        rinse(shirt)
        squeeze(shirt)
        # Scrub, rinse, and squeeze the shirt to complete the handwashing process

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2114
        # Select the shirt with ID 2114
        finish_hand_washing_shirt(shirt)
        # Complete the handwashing process for the selected shirt

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior finish_hand_washing_shirt(shirt:item):
    body:
        scrub(shirt)
        rinse(shirt)
        squeeze(shirt)
        # Scrub, rinse, and squeeze the shirt to complete the handwashing process

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2114
        # Select the shirt with ID 2114
        finish_hand_washing_shirt(shirt)
        # Complete the handwashing process for the selected shirt

##############################
From agent.py-> find a plan in act()
scrub_executor(clothes_shirt_2114)rinse_executor(clothes_shirt_2114)
##############################
From agent.py
scrub_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
rinse_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to squeeze the clothes_shirt_2114 to complete the hand washing process, as specified in the human instruction.
##############################
From agent.py
Human Instruction: The robot needs to squeeze the clothes_shirt_2114 to complete the hand washing process, as specified in the human instruction.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Observe around clothes_shirt_2114 with the question of Check if this is the shirt to be washed.
Action 4: Grab clothes_shirt_2114.
Action 5: Wash clothes_shirt_2114.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to clothes_shirt_2114.
Action 9: Scrub clothes_shirt_2114.
Action 10: Rinse clothes_shirt_2114.
Action 11: Scrub clothes_shirt_2114.
Action 12: Rinse clothes_shirt_2114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation

behavior squeeze_shirt(shirt:item):
    body:
        achieve_once squeeze(shirt) # Squeeze the shirt to complete the hand washing process

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2114
        # Select clothes_shirt_2114 to perform the hand washing
        squeeze_shirt(clothes_shirt)

#goal_representation_end

##############################
Error is:
Unknown expression type: <class 'concepts.dm.crow.behavior.CrowBehaviorApplicationExpression'>.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior squeeze_shirt(shirt: item):
    body:
        squeeze(shirt)
        # Squeeze the shirt to complete the hand washing process

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        # Select the specific shirt with ID 2114
        squeeze_shirt(shirt)
        # Complete the hand washing by squeezing the shirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_clothes_shirt(clothes_shirt:item):
    body:
        squeeze(clothes_shirt)

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2114
        # Select the shirt with ID 2114
        squeeze_clothes_shirt(clothes_shirt)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. hand wash the shirt." ?
Answer: Put the shirt in a sink and hand wash it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_towel_2083_around_sink_133(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_sink(shirt:item, sink:item):
    body:
        achieve_once inside(shirt, sink)

behavior manually_clean_shirt(shirt:item):
    body:
        wash(shirt)
        scrub(shirt)
        rinse(shirt)
        scrub(shirt)
        rinse(shirt)
        squeeze(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2114
        # Select the specified shirt

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        place_in_sink(shirt, sink)
        manually_clean_shirt(shirt)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_in_sink(shirt:item, sink:item):
    body:
        achieve_once inside(shirt, sink)

behavior manually_clean_shirt(shirt:item):
    body:
        wash(shirt)
        scrub(shirt)
        rinse(shirt)
        scrub(shirt)
        rinse(shirt)
        squeeze(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2114
        # Select the specified shirt

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        place_in_sink(shirt, sink)
        manually_clean_shirt(shirt)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)putin_executor(clothes_shirt_2114, sink_133)walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)wash_executor(clothes_shirt_2114)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(clothes_shirt_2114)scrub_executor(clothes_shirt_2114)rinse_executor(clothes_shirt_2114)scrub_executor(clothes_shirt_2114)rinse_executor(clothes_shirt_2114)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the clothes_shirt_2114. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
putin_executor(clothes_shirt_2114, sink_133)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. sink_133 is close clothes_shirt_2114. clothes_shirt_2114 is close sink_133. clothes_shirt_2114 is inside sink_133. clothes_shirt_2114 released by right hand. 
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the sink_133. 
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the sink_133. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py
wash_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the clothes_shirt_2114. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
scrub_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
rinse_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
scrub_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
rinse_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_shirt_2114. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to squeeze the clothes_shirt_2114 to complete the hand washing process as specified in the human instruction and the goal representation.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Turn on the iron
        achieve clean(shirt)
        # The goal is to gently iron the shirt to achieve a clean state

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2114
        # Select the shirt with ID 2114
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Turn on the iron
        achieve clean(shirt)
        # The goal is to gently iron the shirt to achieve a clean state

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2114
        # Select the shirt with ID 2114
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        iron_shirt(shirt, iron, ironing_board)

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2099)put_executor(clothes_shirt_2114, ironing_board_2099)exp(iron_2117, ironing_board_2099)walk_executor(iron_2117)plugin_executor(iron_2117)switchon_executor(iron_2117)
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: iron_2117, Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. 
##############################
From agent.py
put_executor(clothes_shirt_2114, ironing_board_2099)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. ironing_board_2099 is close clothes_shirt_2114. clothes_shirt_2114 is close ironing_board_2099. clothes_shirt_2114 is on ironing_board_2099. clothes_shirt_2114 released by right hand. 
##############################
From agent.py
exp(iron_2117, ironing_board_2099)
Find iron_2117. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2117)plugin_executor(iron_2117)switchon_executor(iron_2117)
##############################
From agent.py
walk_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. 
##############################
From agent.py
plugin_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. iron_2117 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. iron_2117 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to iron clothes_shirt_2114 since the actions indicate that the shirt has been prepared for ironing (placed on the board, iron plugged in and turned on), but the ironing itself has not been performed.
##############################
From agent.py
Human Instruction: You need to iron clothes_shirt_2114 since the actions indicate that the shirt has been prepared for ironing (placed on the board, iron plugged in and turned on), but the ironing itself has not been performed.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Observe around clothes_shirt_2114 with the question of Check if this is the shirt to be washed.
Action 4: Grab clothes_shirt_2114.
Action 5: Wash clothes_shirt_2114.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to clothes_shirt_2114.
Action 9: Scrub clothes_shirt_2114.
Action 10: Rinse clothes_shirt_2114.
Action 11: Scrub clothes_shirt_2114.
Action 12: Rinse clothes_shirt_2114.
Action 13: Walk to sink_133.
Action 14: Put clothes_shirt_2114 into sink_133.
Action 15: Walk to clothes_shirt_2114.
Action 16: Grab clothes_shirt_2114.
Action 17: Wash clothes_shirt_2114.
Action 18: Walk to faucet_308.
Action 19: Switch off faucet_308.
Action 20: Walk to clothes_shirt_2114.
Action 21: Scrub clothes_shirt_2114.
Action 22: Rinse clothes_shirt_2114.
Action 23: Scrub clothes_shirt_2114.
Action 24: Rinse clothes_shirt_2114.
Action 25: Walk to ironing_board_2099.
Action 26: Put clothes_shirt_2114 on ironing_board_2099.
Action 27: look for iron_2117 around ironing_board_2099.
Action 28: Walk to iron_2117.
Action 29: Plug in iron_2117.
Action 30: Switch on iron_2117.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_stove_2090(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def iron_shirt(shirt:item, ironing_board:item, iron:item):
    # Define the behavior to iron the shirt No need to check conditions as shirt is already prepared
    body:
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2114
        # Select the shirt to be ironed
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the pluggedin and turnedon iron
        iron_shirt(shirt, ironing_board, iron)
        # Iron the shirt

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5810, column 9.
Expected one of: 
	* SLASH
	* NOT_EQ
	* AND
	* __ANON_4
	* RSHIFT
	* LESSTHAN
	* OR
	* VBAR
	* CIRCUMFLEX
	* __ANON_8
	* __ANON_7
	* FLOORDIV
	* MINUS
	* MORETHAN
	* __ANON_2
	* LESS_EQ
	* IF
	* __ANON_0
	* _NEWLINE
	* GREATER_EQ
	* COMMA
	* STAR
	* EQUAL
	* __ANON_1
	* DOUBLE_EQUAL
	* PERCENT
	* __ANON_3
	* PLUS
	* SEMICOLON
	* AT
	* __ANON_5
	* AMPERSAND
	* LSHIFT
	* __ANON_6

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board) # Ensure shirt is on the ironing board
        # Code to iron the shirt can be added here

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2114
        # Select the shirt to be ironed
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the plugged in and turned on iron
        iron_shirt(shirt, ironing_board, iron)
        # Iron the shirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt_on_board(shirt:item, iron:item, board:item):
    body:
        achieve plugged(iron) 
        # Ensure the iron is plugged in
        achieve is_on(iron) 
        # Ensure the iron is turned on
        achieve on(shirt, board) 
        # Ensure the shirt is on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        # Select clothes_shirt_2114
        
        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select iron_2117
        
        bind board: item where:
            is_ironing_board(board) and id[board] == 2099
        # Select ironing_board_2099
        
        iron_shirt_on_board(shirt, iron, board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_towel_rack_300_around_shower_303(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==303
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel_rack,shower_instance)
        else:
            exp(towel_rack,shower_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,shower_instance]=True
        close[shower_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        # Select the shirt with ID 2114
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and on(shirt, ironing_board)
        # Select the ironing board with the shirt on it
        bind iron: item where:
            is_iron(iron) and is_on(iron) and plugged(iron)
        # Select the iron that is plugged in and on
        achieve clean(shirt)
        # Ensure the shirt is clean after ironing

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. iron the shirt." ?
Answer: Put the shirt on the ironing board, turn on the iron, then put the iron on the shirt, and push and pull the iron on the shirt.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_food_banana_2045_around_fridge_140(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_iron(iron: item):
    body:
        achieve is_on(iron)
        achieve plugged(iron)

behavior iron_shirt(shirt: item, ironing_board: item):
    body:
        achieve_once on(shirt, ironing_board)
        achieve clean(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        prepare_iron(iron)
        iron_shirt(shirt, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is placed on the ironing board
        achieve is_on(iron)
        # Ensure the iron is on
        achieve_once close_char(char, ironing_board)
        # Position yourself close to the ironing board for better visibility and control while ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        # Select the shirt with ID 2114
        
        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select the iron with ID 2117
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        # Select the ironing board with ID 2099
        
        iron_shirt(shirt, iron, ironing_board)
        # Iron the shirt
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_keyboard_2111_around_desk_261(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_soap_2038_around_sink_307(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board) # Ensure the shirt is on the ironing board
        achieve is_on(iron) # Ensure the iron is turned on
        achieve plugged(iron) # Ensure the iron is plugged in

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2114
        # Select clothes_shirt_2114
        bind iron: item where:
            is_iron(iron) and id[iron]==2117
        # Select iron_2117
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2099
        # Select ironing_board_2099
        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_195_around_bed_264(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve is_on(iron)
        # Ensure the iron is on
        achieve_once on(iron, shirt)
        # Iron the shirt by placing the iron on it and moving

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        # Select the shirt with ID 2114
        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select the iron with ID 2117
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        # Select the ironing board with ID 2099
        iron_shirt(shirt, iron, ironing_board)
        # Conduct the ironing action
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve is_on(iron)
        # Ensure the iron is on
        achieve_once on(iron, shirt)
        # Iron the shirt by placing the iron on it and moving

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        # Select the shirt with ID 2114
        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select the iron with ID 2117
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        # Select the ironing board with ID 2099
        iron_shirt(shirt, iron, ironing_board)
        # Conduct the ironing action
##############################
From agent.py-> find a plan in act()
grab_executor(iron_2117)walk_executor(clothes_shirt_2114)put_executor(iron_2117, clothes_shirt_2114)
##############################
From agent.py
grab_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Grabbing iron_2117 by right hand. 
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
put_executor(iron_2117, clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Robot is close to the clothes_shirt_2114. clothes_shirt_2114 is close iron_2117. iron_2117 is close clothes_shirt_2114. iron_2117 is on clothes_shirt_2114. iron_2117 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to push and pull the iron on the shirt to complete the ironing action.
##############################
From agent.py
Human Instruction: You need to push and pull the iron on the shirt to complete the ironing action.

Human Guidance: Put the shirt on the ironing board, turn on the iron, then put the iron on the shirt, and push and pull the iron on the shirt.
The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Observe around clothes_shirt_2114 with the question of Check if this is the shirt to be washed.
Action 4: Grab clothes_shirt_2114.
Action 5: Wash clothes_shirt_2114.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to clothes_shirt_2114.
Action 9: Scrub clothes_shirt_2114.
Action 10: Rinse clothes_shirt_2114.
Action 11: Scrub clothes_shirt_2114.
Action 12: Rinse clothes_shirt_2114.
Action 13: Walk to sink_133.
Action 14: Put clothes_shirt_2114 into sink_133.
Action 15: Walk to clothes_shirt_2114.
Action 16: Grab clothes_shirt_2114.
Action 17: Wash clothes_shirt_2114.
Action 18: Walk to faucet_308.
Action 19: Switch off faucet_308.
Action 20: Walk to clothes_shirt_2114.
Action 21: Scrub clothes_shirt_2114.
Action 22: Rinse clothes_shirt_2114.
Action 23: Scrub clothes_shirt_2114.
Action 24: Rinse clothes_shirt_2114.
Action 25: Walk to ironing_board_2099.
Action 26: Put clothes_shirt_2114 on ironing_board_2099.
Action 27: look for iron_2117 around ironing_board_2099.
Action 28: Walk to iron_2117.
Action 29: Plug in iron_2117.
Action 30: Switch on iron_2117.
Action 31: Grab iron_2117.
Action 32: Walk to clothes_shirt_2114.
Action 33: Put iron_2117 on clothes_shirt_2114.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_the_shirt(shirt:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        achieve_once plugged(iron) # Ensure the iron is plugged in
        achieve_once is_on(iron) # Ensure the iron is turned on
        achieve_once inhand(iron) # Hold the iron to perform the ironing action
        achieve_once on(iron, shirt) # Place the iron on the shirt for ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the specific shirt for ironing

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_the_shirt(shirt, iron)
        # Execute the behavior to iron the shirt

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<shirt: item>, Variable<iron: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior iron_the_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board) # Ensure the shirt is placed on the ironing board
        achieve_once plugged(iron) # Ensure the iron is plugged in
        achieve_once is_on(iron) # Ensure the iron is turned on
        achieve_once inhand(iron) # Hold the iron to perform the ironing action
        achieve_once on(iron, shirt) # Place the iron on the shirt for ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the specific shirt for ironing

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_the_shirt(shirt, ironing_board, iron)
        # Execute the behavior to iron the shirt

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_the_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board) # Ensure the shirt is placed on the ironing board
        achieve_once plugged(iron) # Ensure the iron is plugged in
        achieve_once is_on(iron) # Ensure the iron is turned on
        achieve_once inhand(iron) # Hold the iron to perform the ironing action
        achieve_once on(iron, shirt) # Place the iron on the shirt for ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the specific shirt for ironing

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_the_shirt(shirt, ironing_board, iron)
        # Execute the behavior to iron the shirt

##############################
From agent.py-> find a plan in act()
grab_executor(iron_2117)put_executor(iron_2117, clothes_shirt_2114)
##############################
From agent.py
grab_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Robot is close to the clothes_shirt_2114. Grabbing iron_2117 by right hand. 
##############################
From agent.py
put_executor(iron_2117, clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Robot is close to the clothes_shirt_2114. iron_2117 is close clothes_shirt_2114. iron_2117 is on clothes_shirt_2114. iron_2117 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to push and pull the iron on the shirt to complete the ironing action.
##############################
Task Summary:
Task Goal:
Hand wash a shirt and iron this shirt.
Action History:
['walk_executor(basket_for_clothes_2040)', 'grab_executor(clothes_shirt_2114)', 'wash_executor(clothes_shirt_2114)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(clothes_shirt_2114)', 'scrub_executor(clothes_shirt_2114)', 'rinse_executor(clothes_shirt_2114)', 'scrub_executor(clothes_shirt_2114)', 'rinse_executor(clothes_shirt_2114)', 'walk_executor(sink_133)', 'putin_executor(clothes_shirt_2114, sink_133)', 'walk_executor(clothes_shirt_2114)', 'grab_executor(clothes_shirt_2114)', 'wash_executor(clothes_shirt_2114)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(clothes_shirt_2114)', 'scrub_executor(clothes_shirt_2114)', 'rinse_executor(clothes_shirt_2114)', 'scrub_executor(clothes_shirt_2114)', 'rinse_executor(clothes_shirt_2114)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_shirt_2114, ironing_board_2099)', 'walk_executor(iron_2117)', 'plugin_executor(iron_2117)', 'switchon_executor(iron_2117)', 'grab_executor(iron_2117)', 'walk_executor(clothes_shirt_2114)', 'put_executor(iron_2117, clothes_shirt_2114)', 'grab_executor(iron_2117)', 'put_executor(iron_2117, clothes_shirt_2114)']
Time info:
Time consume: 294 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 0
goal generate times: 17
goal correct times: 1
action_num: 32

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
