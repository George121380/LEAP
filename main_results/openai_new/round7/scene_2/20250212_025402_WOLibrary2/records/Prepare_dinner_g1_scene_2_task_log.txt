From agent.py
Reset goals: The sub-goals are: 
['Boil some rice by pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_pot_2093_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_box_2023_around_cupboard_131(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_in_pot(pot:item):
    # Function to check if there is any food inside the pot
    symbol food_in_pot=exists o: item : (is_food(o) and inside(o, pot))
    return food_in_pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_water(pot):
            # If pot doesnt have water, fill it with water
            achieve has_water(pot)

        if not is_on(stove):
            # Ensure the stove is turned on
            achieve is_on(stove)

        if not is_food_in_pot(pot):
            # If no food is in the pot, place rice in it
            foreach rice: item:
                if is_food_rice(rice) and not inside(rice, pot):
                    achieve_once inside(rice, pot)

        achieve inside(pot, stove)
        # Place the pot on the stove for cooking

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_pot_2093_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_box_2023_around_cupboard_131(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

#exp_behavior_end

#goal_representation

behavior fill_water(pot: item, faucet: item):
    body:
        achieve close_char(char, faucet) # Move character close to the faucet
        achieve has_water(pot) # Fill the pot with water

behavior place_rice_in_pot(rice: item, pot: item):
    body:
        achieve_once inside(rice, pot) # Place the rice inside the pot

behavior heat_up(stove: item, pot: item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to heat the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        fill_water(pot, faucet) # Fill the pot with water using the faucet
        place_rice_in_pot(rice, pot) # Place rice into the pot
        heat_up(stove, pot) # Heat up the pot on the stove

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tape_2028_around_bookshelf_372(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(tape,bookshelf_instance)
        else:
            exp(tape,bookshelf_instance)
    eff:
        unknown[tape]=False
        close[tape,bookshelf_instance]=True
        close[bookshelf_instance,tape]=True
    

behavior find_box_2023_around_cupboard_131(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

behavior find_keyboard_382_around_desk_261(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_pot_2093_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind rice: item where:
            is_food_rice(rice)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        
        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(rice, pot)
        start_boiling(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind rice: item where:
            is_food_rice(rice)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        
        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(rice, pot)
        start_boiling(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_2093, cupboard_131)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(cupboard_131)exp(food_rice_2067, cupboard_131)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(pot_2093, cupboard_131)
Fail to find pot_2093 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(cupboard_130)exp(food_rice_2067, cupboard_130)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_54)putin_executor(food_rice_2067, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the pot_54. Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_rice_2067, cupboard_130)
Fail to find food_rice_2067 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(kitchen_counter_128)exp(food_rice_2067, kitchen_counter_128)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_54)putin_executor(food_rice_2067, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the pot_54. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_rice_2067, kitchen_counter_128)
Fail to find food_rice_2067 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_rice_2067, fridge_140)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_54)putin_executor(food_rice_2067, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_rice_2067, fridge_140)
Find food_rice_2067. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2067)putin_executor(food_rice_2067, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_rice_2067 by left hand. 
##############################
From agent.py
putin_executor(food_rice_2067, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. food_rice_2067 is inside pot_54. pot_54 is close food_rice_2067. food_rice_2067 is close pot_54. food_rice_2067 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the pot with water before it can boil the rice. The actions indicate that the faucet was turned on and off, but there is no action showing that the pot was filled with water. Ensure pot_54 is filled with water using faucet_134 or another available faucet.
##############################
From agent.py
Human Instruction: The robot needs to fill the pot with water before it can boil the rice. The actions indicate that the faucet was turned on and off, but there is no action showing that the pot was filled with water. Ensure pot_54 is filled with water using faucet_134 or another available faucet.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to cupboard_130.
Action 10: look for food_rice_2067 around cupboard_130.
Action 11: Walk to faucet_308.
Action 12: Switch off faucet_308.
Action 13: Walk to kitchen_counter_128.
Action 14: look for food_rice_2067 around kitchen_counter_128.
Action 15: Walk to faucet_134.
Action 16: Switch on faucet_134.
Action 17: Switch off faucet_134.
Action 18: Walk to fridge_140.
Action 19: Switch off fridge_140.
Action 20: Open fridge_140.
Action 21: look for food_rice_2067 around fridge_140.
Action 22: Grab food_rice_2067.
Action 23: Put food_rice_2067 into pot_54.
Action 24: Walk to stove_2090.
Action 25: Put pot_54 on stove_2090.
Action 26: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior start_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090
        
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_rice(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_table_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_fork_2103_around_sink_307(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(fork,sink_instance)
        else:
            exp(fork,sink_instance)
    eff:
        unknown[fork]=False
        close[fork,sink_instance]=True
        close[sink_instance,fork]=True
    

behavior find_napkin_2014_around_bookshelf_372(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(napkin,bookshelf_instance)
        else:
            exp(napkin,bookshelf_instance)
    eff:
        unknown[napkin]=False
        close[napkin,bookshelf_instance]=True
        close[bookshelf_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_rice_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        fill_pot_with_water(pot, faucet)
        boil_rice_on_stove(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil some rice by pot." ?
Answer: Fill the pot with water. Put the rice into the pot. Put the pot on the stove and turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_coin_2004_around_pot_2093(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(coin,pot_instance)
        else:
            exp(coin,pot_instance)
    eff:
        unknown[coin]=False
        close[coin,pot_instance]=True
        close[pot_instance,coin]=True
    

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve is_on(faucet)
        # The faucet should be turned on
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior boil_rice_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the specific pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the specific faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the specific stove with ID 2090

        fill_pot_with_water(pot, faucet) 
        # Fill the pot with water using faucet 134
        
        boil_rice_on_stove(pot, stove)
        # Boil the rice by placing the pot on the stove and turning it on

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve is_on(faucet)
        # The faucet should be turned on
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior boil_rice_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the specific pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the specific faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the specific stove with ID 2090

        fill_pot_with_water(pot, faucet) 
        # Fill the pot with water using faucet 134
        
        boil_rice_on_stove(pot, stove)
        # Boil the rice by placing the pot on the stove and turning it on

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that pot_54 is filled with water using faucet_134 or another available faucet before boiling the rice.
##############################
From agent.py
Human Instruction: You need to ensure that pot_54 is filled with water using faucet_134 or another available faucet before boiling the rice.

Human Guidance: Fill the pot with water. Put the rice into the pot. Put the pot on the stove and turn on the stove.
The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to cupboard_130.
Action 10: look for food_rice_2067 around cupboard_130.
Action 11: Walk to faucet_308.
Action 12: Switch off faucet_308.
Action 13: Walk to kitchen_counter_128.
Action 14: look for food_rice_2067 around kitchen_counter_128.
Action 15: Walk to faucet_134.
Action 16: Switch on faucet_134.
Action 17: Switch off faucet_134.
Action 18: Walk to fridge_140.
Action 19: Switch off fridge_140.
Action 20: Open fridge_140.
Action 21: look for food_rice_2067 around fridge_140.
Action 22: Grab food_rice_2067.
Action 23: Put food_rice_2067 into pot_54.
Action 24: Walk to stove_2090.
Action 25: Put pot_54 on stove_2090.
Action 26: Switch on stove_2090.
Action 27: Walk to faucet_134.
Action 28: Switch on faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2095_around_wallshelf_301(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill pot with water using the specified faucet

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)
        # Add rice into the pot

behavior boil_rice(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot with rice and water on the stove
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        bind rice: item where:
            is_food_rice(rice) and id[rice]==2067
        # Select rice with ID 2067
        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(rice, pot)
        boil_rice(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_box_2023_around_pot_2093(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(box,pot_instance)
        else:
            exp(box,pot_instance)
    eff:
        unknown[box]=False
        close[box,pot_instance]=True
        close[pot_instance,box]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior cook_rice(pot:item, stove:item, rice:item):
    body:
        achieve_once inside(rice, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2067
        # Select the rice with ID 2067
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the faucet with ID 134
        
        fill_pot_with_water(pot, faucet)
        cook_rice(pot, stove, rice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_wallshelf_301(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior boil_rice_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        bind rice: item where:
            is_food_rice(rice) and id[rice]==2067
        # Select rice with ID 2067

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        
        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(rice, pot)
        boil_rice_on_stove(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil some rice by pot." ?
Answer: Fill the pot with water. Put the rice into the pot. Put the pot on the stove and turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_sink_133(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)
        # Put the rice into the pot

behavior boil_rice_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)
        # Put the pot on the stove and boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(rice, pot)
        boil_rice_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coin_2004_around_pot_2093(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(coin,pot_instance)
        else:
            exp(coin,pot_instance)
    eff:
        unknown[coin]=False
        close[coin,pot_instance]=True
        close[pot_instance,coin]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_full_with_water(pot:item):
    # Function to check if the pot is filled with water
    symbol is_filled= exists o: item : (is_water(o) and inside(o, pot))
    return is_filled

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once open(pot) # Ensure the pot is open to fill water
        achieve_once has_water(pot) # Fill the pot with water
        achieve_once is_off(faucet) # Turn off the faucet after filling the water

behavior boil_rice(pot:item, stove:item, rice:item):
    body:
        achieve_once inside(rice, pot) # Put the rice into the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2067
        # Select rice with ID 2067

        if not is_pot_full_with_water(pot):
            fill_pot_with_water(pot, faucet) 
        # Fill the pot with water using faucet_134, if its not already filled

        boil_rice(pot, stove, rice)
        # Execute rice boiling procedure seeing the pot is filled with water

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pot_full_with_water(pot:item):
    # Function to check if the pot is filled with water
    symbol is_filled= exists o: item : (is_water(o) and inside(o, pot))
    return is_filled

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once open(pot) # Ensure the pot is open to fill water
        achieve_once has_water(pot) # Fill the pot with water
        achieve_once is_off(faucet) # Turn off the faucet after filling the water

behavior boil_rice(pot:item, stove:item, rice:item):
    body:
        achieve_once inside(rice, pot) # Put the rice into the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2067
        # Select rice with ID 2067

        if not is_pot_full_with_water(pot):
            fill_pot_with_water(pot, faucet) 
        # Fill the pot with water using faucet_134, if its not already filled

        boil_rice(pot, stove, rice)
        # Execute rice boiling procedure seeing the pot is filled with water

##############################
From agent.py-> find a plan in act()
switchoff_executor(faucet_134)
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot_54 is filled with water from faucet_134 before placing it on the stove to boil the rice. The pot was put on the stove and rice was added, but the action to fill the pot with water has not been completed.
##############################
Task Summary:
Task Goal:
Boil some rice by pot.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(cupboard_130)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(kitchen_counter_128)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_rice_2067)', 'putin_executor(food_rice_2067, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)']
Time info:
Time consume: 263 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 0
goal generate times: 12
goal correct times: 0
action_num: 25

Task complete rate:
1
Scene_id: 2
##############################
