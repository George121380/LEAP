From agent.py
Reset goals: The sub-goals are: 
['1. Find the spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2106_around_couch_192(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(spectacles,couch_instance)
        else:
            exp(spectacles,couch_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,couch_instance]=True
        close[couch_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_spectacles_and_place(spectacles: item, coffee_table: item):
    body:
        achieve_once inhand(spectacles) # Pick up the spectacles
        achieve_once on(spectacles, coffee_table) # Place spectacles on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table in the home office
        
        find_spectacles_and_place(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_spectacles_2106_around_couch_192(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(spectacles,couch_instance)
        else:
            exp(spectacles,couch_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,couch_instance]=True
        close[couch_instance,spectacles]=True
    

#goal_representation
 
behavior find_spectacles_and_place(spectacles: item, coffee_table: item, home_office: item):
    body:
        achieve_once inhand(spectacles) # Pick up the spectacles
        achieve_once on(spectacles, coffee_table) # Place spectacles on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table in the home office
        
        find_spectacles_and_place(spectacles, coffee_table, home_office)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_spectacles_and_place(spectacles: item, coffee_table: item, home_office: item):
    body:
        achieve_once inhand(spectacles) # Pick up the spectacles
        achieve_once on(spectacles, coffee_table) # Place spectacles on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table in the home office
        
        find_spectacles_and_place(spectacles, coffee_table, home_office)

##############################
From agent.py-> find a plan in act()
walk_executor(couch_192)exp(spectacles_2106, couch_192)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(couch_192)
Robot find: pillow_195, vacuum_cleaner_2094, drawing_196, cat_2082, Robot is close to the couch_192. 
##############################
From agent.py
exp(spectacles_2106, couch_192)
Fail to find spectacles_2106 around couch_192. 
##############################
From agent.py-> find a plan in act()
walk_executor(bed_376)exp(spectacles_2106, bed_376)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(bed_376)
Robot find: mat_386, pillow_370, drawing_389, drawing_388, pillow_368, Robot is close to the bed_376. Robot is close to the mat_386. 
##############################
From agent.py
exp(spectacles_2106, bed_376)
Fail to find spectacles_2106 around bed_376. 
##############################
From agent.py-> find a plan in act()
walk_executor(nightstand_373)exp(spectacles_2106, nightstand_373)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(nightstand_373)
Robot find: coin_2004, Robot is close to the nightstand_373. 
##############################
From agent.py
exp(spectacles_2106, nightstand_373)
Fail to find spectacles_2106 around nightstand_373. 
##############################
From agent.py-> find a plan in act()
walk_executor(dresser_377)exp(spectacles_2106, dresser_377)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(dresser_377)
Robot find: novel_2010, pajamas_2039, drawing_387, Robot is close to the dresser_377. Robot is close to the novel_2010. Robot is close to the pajamas_2039. 
##############################
From agent.py
exp(spectacles_2106, dresser_377)
Fail to find spectacles_2106 around dresser_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_260)open_executor(bookshelf_260)exp(spectacles_2106, bookshelf_260)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(bookshelf_260)
Robot find: drawing_238, chair_263, mat_237, Robot is close to the bookshelf_260. 
##############################
From agent.py
open_executor(bookshelf_260)
Robot find: Robot is close to the bookshelf_260. Robot is close to the photoframe_246. bookshelf_260 is opened. 
##############################
From agent.py
exp(spectacles_2106, bookshelf_260)
Fail to find spectacles_2106 around bookshelf_260. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(spectacles_2106, bookshelf_188)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. 
##############################
From agent.py
open_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. bookshelf_188 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find spectacles_2106 ?
Answer: Robot, please go to dining_room_1. Look for kitchen_counter_128. The spectacles_2106 are located on top of kitchen_counter_128.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, please go to dining_room_1. Look for kitchen_counter_128. The spectacles_2106 are located on top of kitchen_counter_128.

The actions you have taken:
Action 1: Walk to couch_192.
Action 2: look for spectacles_2106 around couch_192.
Action 3: Walk to bed_376.
Action 4: look for spectacles_2106 around bed_376.
Action 5: Walk to nightstand_373.
Action 6: look for spectacles_2106 around nightstand_373.
Action 7: Walk to dresser_377.
Action 8: look for spectacles_2106 around dresser_377.
Action 9: Walk to bookshelf_260.
Action 10: Open bookshelf_260.
Action 11: look for spectacles_2106 around bookshelf_260.
Action 12: Walk to bookshelf_188.
Action 13: Open bookshelf_188.

##############################
From agent.py
exp(spectacles_2106, bookshelf_188)
Fail to find spectacles_2106 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(spectacles_2106, kitchen_counter_128)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(spectacles_2106, kitchen_counter_128)
Find spectacles_2106. 
##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. 
##############################
From agent.py
grab_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. Grabbing spectacles_2106 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, Robot is close to the spectacles_2106. Robot is close to the table_193. 
##############################
From agent.py
put_executor(spectacles_2106, table_193)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. table_193 is close spectacles_2106. spectacles_2106 is close table_193. spectacles_2106 is on table_193. spectacles_2106 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def in_home_office(table:item):
    # Function to check if a table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior place_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and in_home_office(coffee_table)
        # Select a coffee table in the home office
        
        foreach book: item:
            if is_book(book) and not visited(book):
                observe(book,"Determine if the book needs to be moved to the coffee table")
                place_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def in_home_office(table:item):
    # Function to check if a table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior place_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and in_home_office(coffee_table)
        # Select a coffee table in the home office
        
        foreach book: item:
            if is_book(book) and not visited(book):
                observe(book,"Determine if the book needs to be moved to the coffee table")
                place_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Determine if the book needs to be moved to the coffee table)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)walk_executor(bookshelf_136)exp(book_2092, bookshelf_136)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Determine if the book needs to be moved to the coffee table)grab_executor(book_2092)walk_executor(table_193)put_executor(book_2092, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Determine if the book needs to be moved to the coffee table)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)walk_executor(bookshelf_136)exp(book_2092, bookshelf_136)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Determine if the book needs to be moved to the coffee table)grab_executor(book_2092)walk_executor(table_193)put_executor(book_2092, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
open_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. book_2091 is opened. 
##############################
From agent.py
obs(book_2091, Determine if the book needs to be moved to the coffee table)
Get this information:  book_2091 is on bookshelf_136. book_2091 is close to bookshelf_136. book_2091 is close to character_219. book_2091 is inside dining_room_1. book_2091 is OPEN.
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2092, bookshelf_136)
Fail to find book_2092 around bookshelf_136. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_desk_261(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(book,desk_instance)
        else:
            exp(book,desk_instance)
    eff:
        unknown[book]=False
        close[book,desk_instance]=True
        close[desk_instance,book]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table]==193
        # Select the coffee table with ID 193
        
        achieve_once on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office(table: item):
    # Function to check if a table is in the home office
    symbol home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return home_office

behavior put_on_coffee_table(book: item, table: item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office(table)
        # Select a table in the home office
        bind book: item where:
            is_book(book)
        # Select a book
        put_on_coffee_table(book, table) # Place the book on the coffee table in the home office

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_curtain_121(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==121
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(book,curtain_instance)
        else:
            exp(book,curtain_instance)
    eff:
        unknown[book]=False
        close[book,curtain_instance]=True
        close[curtain_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_place_book_on_table(book:item, bookshelf:item, table:item):
    body:
        achieve_once visited(bookshelf)
        # Ensure the bookshelf is visited to find the book
        achieve_once close_char(char, book)
        # Approach the book
        achieve_once inhand(book)
        # Pick up the book
        achieve_once on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind bookshelf: item where:
            is_bookshelf(bookshelf) and not visited(bookshelf)
        # Select an unvisited bookshelf
        
        bind book: item where:
            is_book(book) and visited(bookshelf)
        # Select a book after visiting the bookshelf

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the coffee table located in the home office

        find_and_place_book_on_table(book, bookshelf, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_desk_261(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(book,desk_instance)
        else:
            exp(book,desk_instance)
    eff:
        unknown[book]=False
        close[book,desk_instance]=True
        close[desk_instance,book]=True
    

#goal_representation
 
behavior find_and_place_book_on_table(book:item, bookshelf:item, table:item):
    body:
        achieve_once visited(bookshelf)
        # Ensure the bookshelf is visited to find the book
        achieve_once close_char(char, book)
        # Approach the book
        achieve_once inhand(book)
        # Pick up the book
        achieve_once on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office as an item location
        
        bind bookshelf: item where:
            is_bookshelf(bookshelf) and not visited(bookshelf)
        # Select an unvisited bookshelf
        
        bind book: item where:
            is_book(book) and visited(bookshelf)
        # Select a book after visiting the bookshelf

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the coffee table located in the home office

        find_and_place_book_on_table(book, bookshelf, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. find the book and put it on the coffee table in the home office." ?
Answer: Find the book on the bookshelf and put it on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_the_book_and_place(item_book:item, item_table:item):
    body:
        achieve_once on(item_book, item_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Look for the item that is a book
        
        bind table: item where:
            is_table(table) and surfaces(table)
        # Look for a table with a surface, acting as the coffee table in the task
        
        find_the_book_and_place(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_book_on_bookshelf(book:item, bookshelf:item):
    # Function to check if the book is on a specific bookshelf
    symbol is_on_bookshelf = exists o: item : (is_book(o) and on(o, bookshelf))
    return is_on_bookshelf

behavior place_on_coffee_table(o:item, coffee_table:item):
    body:
        achieve_once on(o, coffee_table) # Place the item on the coffee table

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office(coffee_table)
        # Select the coffee table in the home office
        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        # Select a bookshelf
        
        foreach book: item:
            if is_book(book) and is_book_on_bookshelf(book, bookshelf):
                place_on_coffee_table(book, coffee_table)


#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    # A behavior to place the book on the specified table
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        # Select a bookshelf

        bind book: item where:
            is_book(book) and inside(book, bookshelf)
        # Select a book inside the bookshelf

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        achieve_once inhand(book)
        # Temporarily achieve the state of holding the book in hand

        place_book_on_table(book, table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        # Select a bookshelf

        bind book: item where:
            is_book(book) and inside(book, bookshelf)
        # Select a book inside the bookshelf

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        achieve_once inhand(book)
        # Temporarily achieve the state of holding the book in hand

        place_book_on_table(book, table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function place_book_on_table not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation

behavior pick_up_book(book:item):
    body:
        achieve_once inhand(book)

behavior put_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        # Select a bookshelf

        bind book: item where:
            is_book(book) and inside(book, bookshelf)
        # Select a book inside the bookshelf

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        pick_up_book(book)
        put_book_on_table(book, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table) # Place the item on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and visited(book)
        # Select the book that has already been found
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table located in the home office
        put_on_table(book, coffee_table) # Place the book on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table) # Place the item on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and visited(book)
        # Select the book that has already been found
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table located in the home office
        put_on_table(book, coffee_table) # Place the book on the coffee table

bind home_office: item where:
    is_home_office(home_office)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BIND', 'bind') at line 5879, column 1.
Expected one of: 
	* INCLUDE
	* IMPORT
	* CONTROLLER
	* OBJECTS
	* DEF
	* _PRAGMA_KEYWORD
	* UNDIRECTED_GENERATOR
	* _NEWLINE
	* TYPEDEF
	* FEATURE
	* $END
	* INIT
	* GOAL
	* BEHAVIOR
	* DOMAIN
	* GENERATOR
Previous tokens: [Token('_NEWLINE', '# Place the book on the coffee table\n\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table) # Place the item on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and visited(book)
        # Select the book that has already been found
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table located in the home office
        put_on_table(book, coffee_table) # Place the book on the coffee table

        bind home_office: item where:
            is_home_office(home_office)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book(book:item):
    body:
        achieve_once visited(book)
        # Mark the book as visited to verify its location

behavior put_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)
        # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Bind the instance of book
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table]==193
        # Bind coffee table with ID 193
        
        foreach o: item:
            if is_book(o) and not visited(o):
                find_book(o)
                # Find and visit the book

        put_on_coffee_table(book, coffee_table)
        # Place the book on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_book(book:item):
    body:
        achieve_once visited(book)
        # Mark the book as visited to verify its location

behavior put_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)
        # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Bind the instance of book
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table]==193
        # Bind coffee table with ID 193
        
        foreach o: item:
            if is_book(o) and not visited(o):
                find_book(o)
                # Find and visit the book

        put_on_coffee_table(book, coffee_table)
        # Place the book on the coffee table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)obs(book_2091, look around this place)walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(book_2092, bookshelf_189)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, look around this place)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the table_193. Robot is close to the book_2091. 
##############################
From agent.py
obs(book_2091, look around this place)
Get this information:  book_2091 is on table_193. book_2091 is close to table_193. book_2091 is close to character_219. book_2091 is inside home_office_161. book_2091 is OPEN.
##############################
From agent.py
walk_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. 
##############################
From agent.py
open_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. bookshelf_189 is opened. 
##############################
From agent.py
exp(book_2092, bookshelf_189)
Fail to find book_2092 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(book_2092, bookshelf_137)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, look around this place)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, drawing_118, Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py
exp(book_2092, bookshelf_137)
Find book_2092. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2092)open_executor(book_2092)obs(book_2092, look around this place)
##############################
From agent.py
walk_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. 
##############################
From agent.py
open_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. book_2092 is opened. 
##############################
From agent.py
obs(book_2092, look around this place)
Get this information:  book_2092 is inside dining_room_1. book_2092 is close to bookshelf_137. book_2092 is close to character_219. book_2092 is on bookshelf_137. book_2092 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find my spectacles and put it on the coffe table in home office. Then find the book and put it on the coffe table in home office.
Action History:
['walk_executor(couch_192)', 'walk_executor(bed_376)', 'walk_executor(nightstand_373)', 'walk_executor(dresser_377)', 'walk_executor(bookshelf_260)', 'open_executor(bookshelf_260)', 'walk_executor(bookshelf_188)', 'open_executor(bookshelf_188)', 'walk_executor(kitchen_counter_128)', 'walk_executor(spectacles_2106)', 'grab_executor(spectacles_2106)', 'walk_executor(table_193)', 'put_executor(spectacles_2106, table_193)', 'walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'open_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)', 'walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'walk_executor(bookshelf_189)', 'open_executor(bookshelf_189)', 'walk_executor(bookshelf_137)', 'open_executor(bookshelf_137)', 'walk_executor(book_2092)', 'open_executor(book_2092)']
Time info:
Time consume: 303 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 0
goal generate times: 10
goal correct times: 4
action_num: 27

Task complete rate:
1
Scene_id: 2
##############################
