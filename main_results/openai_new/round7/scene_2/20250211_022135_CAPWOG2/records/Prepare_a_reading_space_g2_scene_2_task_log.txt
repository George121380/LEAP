From agent.py
Reset goals: The sub-goals are: 
['1. Find the book.', '2. Put the book on the table in the home office.', '3. Turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book_and_put_on_table(book:item, table:item):
    body:
        if not inhand(book):
            grab(book)
            # Grab the book
        if not on(book, table):
            put_on(book, table)
            # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and not visited(book)
        # Select a book that has not been visited
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office
        observe(book, "Locate the book")
        walk_to(book)
        find_book_and_put_on_table(book, table)
        # Locate the book and place it on the table inside the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_188(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def is_book_in_home_office(book:item):
    # Function to check if a book is inside the home office
    symbol is_in_home_office=exists room: item : (is_home_office(room) and inside(book, room))
    return is_in_home_office

behavior __goal__():
    body:
        if exists book: item : is_book(book) and is_book_in_home_office(book):
            # If we have already found the book in the home office, we can directly approach it
            bind book: item where:
                is_book(book) and is_book_in_home_office(book)
            walk_to(book)

        else:
            # Check all books that have not been visited to see if they are in the home office
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book,"Check if the book is in the home office")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_book_in_home_office(book:item):
    # Function to check if a book is inside the home office
    symbol is_in_home_office=exists room: item : (is_home_office(room) and inside(book, room))
    return is_in_home_office

behavior __goal__():
    body:
        if exists book: item : is_book(book) and is_book_in_home_office(book):
            # If we have already found the book in the home office, we can directly approach it
            bind book: item where:
                is_book(book) and is_book_in_home_office(book)
            walk_to(book)

        else:
            # Check all books that have not been visited to see if they are in the home office
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book,"Check if the book is in the home office")

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(book_2091, bookshelf_188)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office)walk_executor(bookshelf_188)exp(book_2092, bookshelf_188)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if the book is in the home office)
##############################
From agent.py
walk_executor(bookshelf_188)
Robot find: drawing_196, Robot is close to the bookshelf_188. 
##############################
From agent.py
open_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. bookshelf_188 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_188)
Fail to find book_2091 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(book_2091, bookshelf_189)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office)walk_executor(bookshelf_189)exp(book_2092, bookshelf_189)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if the book is in the home office)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. 
##############################
From agent.py
open_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. bookshelf_189 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_189)
Fail to find book_2091 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(book_2091, bookshelf_137)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office)walk_executor(bookshelf_137)exp(book_2092, bookshelf_137)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if the book is in the home office)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, drawing_118, Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_137)
Fail to find book_2091 around bookshelf_137. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_372)open_executor(bookshelf_372)exp(book_2091, bookshelf_372)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office)walk_executor(book_2092)open_executor(book_2092)obs(book_2092, Check if the book is in the home office)
##############################
From agent.py
walk_executor(bookshelf_372)
Robot find: stamp_2031, drawing_389, Robot is close to the bookshelf_372. 
##############################
From agent.py
open_executor(bookshelf_372)
Robot find: Robot is close to the bookshelf_372. bookshelf_372 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_372)
Fail to find book_2091 around bookshelf_372. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2092)open_executor(book_2092)exp(book_2091, book_2092)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office)walk_executor(book_2092)obs(book_2092, Check if the book is in the home office)
##############################
From agent.py
walk_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. 
##############################
From agent.py
open_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. book_2092 is opened. 
##############################
From agent.py
exp(book_2091, book_2092)
Fail to find book_2091 around book_2092. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(book_2091, home_office_161)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office)walk_executor(book_2092)obs(book_2092, Check if the book is in the home office)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find book_2091 ?
Answer: Robot, please locate book_2091 on bookshelf_136 in dining_room_1. You will find bookshelf_136 situated in the dining room, and book_2091 is directly placed on this shelf among other items. Look for the bookshelf in this room, and the target book will be positioned there.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, please locate book_2091 on bookshelf_136 in dining_room_1. You will find bookshelf_136 situated in the dining room, and book_2091 is directly placed on this shelf among other items. Look for the bookshelf in this room, and the target book will be positioned there.

The actions you have taken:
Action 1: Walk to bookshelf_188.
Action 2: Open bookshelf_188.
Action 3: look for book_2091 around bookshelf_188.
Action 4: Walk to bookshelf_189.
Action 5: Open bookshelf_189.
Action 6: look for book_2091 around bookshelf_189.
Action 7: Walk to bookshelf_137.
Action 8: Open bookshelf_137.
Action 9: look for book_2091 around bookshelf_137.
Action 10: Walk to bookshelf_372.
Action 11: Open bookshelf_372.
Action 12: look for book_2091 around bookshelf_372.
Action 13: Walk to book_2092.
Action 14: Open book_2092.
Action 15: look for book_2091 around book_2092.
Action 16: Walk to home_office_161.

##############################
From agent.py
exp(book_2091, home_office_161)
Fail to find book_2091 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(book_2091, home_office_161)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office)walk_executor(book_2092)obs(book_2092, Check if the book is in the home office)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(book_2091, home_office_161)
Fail to find book_2091 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(book_2091, home_office_161)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office)walk_executor(book_2092)obs(book_2092, Check if the book is in the home office)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(book_2091, home_office_161)
Fail to find book_2091 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(book_2091, home_office_161)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office)walk_executor(book_2092)obs(book_2092, Check if the book is in the home office)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(book_2091, home_office_161)
Fail to find book_2091 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office)walk_executor(book_2092)obs(book_2092, Check if the book is in the home office)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check if the book is in the home office)walk_executor(book_2092)obs(book_2092, Check if the book is in the home office)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
open_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. book_2091 is opened. 
##############################
From agent.py
obs(book_2091, Check if the book is in the home office)
Get this information:  book_2091 is on bookshelf_136. book_2091 is close to bookshelf_136. book_2091 is close to character_219. book_2091 is inside dining_room_1. book_2091 is OPEN.
##############################
From agent.py
walk_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. 
##############################
From agent.py
obs(book_2092, Check if the book is in the home office)
Get this information:  book_2092 is inside dining_room_1. book_2092 is close to bookshelf_137. book_2092 is close to character_219. book_2092 is on bookshelf_137. book_2092 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def in_home_office(item: item):
    # Determine if the item is inside the home office
    symbol inside_home_office = exists room: item : (is_home_office(room) and inside(item, room))
    return inside_home_office

behavior place_book_on_table(book:item, table:item):
    body:
        if not on(book, table):
            put_on(book, table)
            # Place the book on the home office table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select book with ID 2091

        bind table: item where:
            is_table(table)
            
        observe(table, "Check if the table is in the home office")
        # Check whether the table is inside the home office

        if in_home_office(table):
            place_book_on_table(book, table)
            # Execute placing the book on the table if the table is in the home office
        else:
            # If no appropriate table is found, observe all unvisited tables in the home office
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check if the table is in the home office")
                    if in_home_office(table):
                        place_book_on_table(book, table)
                        break

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        # Select book with ID 2091
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select table inside the home office

        put_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091

        bind table: item where:
            is_table(table) and inside(table, home_office)

        put_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        bind home_office: item where:
            is_home_office(home_office) and inside_char(char, home_office)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        put_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_table_123(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(novel,table_instance)
        else:
            exp(novel,table_instance)
    eff:
        unknown[novel]=False
        close[novel,table_instance]=True
        close[table_instance,novel]=True
    

behavior find_chair_2119_around_home_office_161(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        # Select the book with ID 2091

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        put_book_on_table(book, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_book_on_table(book:item, table:item):
    body:
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        # Select the book with ID 2091

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        put_book_on_table(book, table)

##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_home_office_161(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(phone,home_office_instance)
        else:
            exp(phone,home_office_instance)
    eff:
        unknown[phone]=False
        close[phone,home_office_instance]=True
        close[home_office_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind home_office_light: item where:
            is_light(home_office_light) and inside(home_office_light, inside_char(char, home_office_161))
        # Select the light inside the home office
        if is_off(home_office_light):
            walk_to(home_office_light)
            switch_on(home_office_light)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_kitchen_counter_132(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(blender,kitchen_counter_instance)
        else:
            exp(blender,kitchen_counter_instance)
    eff:
        unknown[blender]=False
        close[blender,kitchen_counter_instance]=True
        close[kitchen_counter_instance,blender]=True
    

behavior find_dvd_player_2085_around_home_office_161(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(dvd_player,home_office_instance)
        else:
            exp(dvd_player,home_office_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,home_office_instance]=True
        close[home_office_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation
 
def has_light_in_home_office(home_office: item):
    # Function to check if there is a light inside the home office
    symbol has_light = exists x: item : (is_light(x) and inside(x, home_office))
    return has_light

def is_light_on(light: item):
    # Check if a light is on
    return is_on(light)

behavior turn_on_light(light: item):
    body:
        if is_off(light):
            switch_on(light)
            # Turn the light on

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        if exists light: item : is_light(light) and inside(light, home_office) and not is_on(light):
            bind light: item where:
                is_light(light) and inside(light, home_office)
                # Select a light in the home office
            if not is_on(light):
                turn_on_light(light)
        else:
            foreach light: item:
                if is_light(light) and not visited(light):
                    observe(light, "Check if the light is inside the home office")


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_light_in_home_office(home_office: item):
    # Function to check if there is a light inside the home office
    symbol has_light = exists x: item : (is_light(x) and inside(x, home_office))
    return has_light

def is_light_on(light: item):
    # Check if a light is on
    return is_on(light)

behavior turn_on_light(light: item):
    body:
        if is_off(light):
            switch_on(light)
            # Turn the light on

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        if exists light: item : is_light(light) and inside(light, home_office) and not is_on(light):
            bind light: item where:
                is_light(light) and inside(light, home_office)
                # Select a light in the home office
            if not is_on(light):
                turn_on_light(light)
        else:
            foreach light: item:
                if is_light(light) and not visited(light):
                    observe(light, "Check if the light is inside the home office")


##############################
From agent.py-> find a plan in act()
walk_executor(light_217)switchon_executor(light_217)
##############################
From agent.py
walk_executor(light_217)
Robot find: Robot is close to the light_217. 
##############################
From agent.py
switchon_executor(light_217)
Robot find: Robot is close to the light_217. light_217 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the table in home office. Then turn on the light in the home office.
Action History:
['walk_executor(bookshelf_188)', 'open_executor(bookshelf_188)', 'walk_executor(bookshelf_189)', 'open_executor(bookshelf_189)', 'walk_executor(bookshelf_137)', 'open_executor(bookshelf_137)', 'walk_executor(bookshelf_372)', 'open_executor(bookshelf_372)', 'walk_executor(book_2092)', 'open_executor(book_2092)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'open_executor(book_2091)', 'walk_executor(book_2092)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)', 'walk_executor(light_217)', 'switchon_executor(light_217)']
Time info:
Time consume: 226 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 9
goal correct times: 0
action_num: 24

Task complete rate:
1
Scene_id: 2
##############################
