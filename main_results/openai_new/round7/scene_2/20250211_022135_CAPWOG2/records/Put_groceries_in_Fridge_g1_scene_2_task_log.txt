From agent.py
Reset goals: The sub-goals are: 
['1. Locate milk, turkey, egg, fish, and chicken in the environment.', '2. Put them on one of the tables in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item(food:item):
    # Function to determine if an object is one of the target food items
    symbol is_target_food = is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)
    return is_target_food

behavior locate_food_item(food:item):
    body:
        if not visited(food):
            observe(food, "Check if this is a target food item")

behavior __goal__():
    body:
        foreach food: item:
            if is_food_item(food):
                locate_food_item(food)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_food_item(food:item):
    # Function to determine if an object is one of the target food items
    symbol is_target_food = is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)
    return is_target_food

behavior locate_food_item(food:item):
    body:
        if not visited(food):
            observe(food, "Check if this is a target food item")

behavior __goal__():
    body:
        foreach food: item:
            if is_food_item(food):
                locate_food_item(food)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)obs(food_chicken_2050, Check if this is a target food item)walk_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)obs(food_egg_2053, Check if this is a target food item)walk_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)obs(food_fish_2054, Check if this is a target food item)walk_executor(fridge_140)exp(food_turkey_2071, fridge_140)walk_executor(food_turkey_2071)obs(food_turkey_2071, Check if this is a target food item)walk_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)obs(milk_2074, Check if this is a target food item)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
obs(food_chicken_2050, Check if this is a target food item)obs(food_egg_2053, Check if this is a target food item)obs(food_fish_2054, Check if this is a target food item)obs(food_turkey_2071, Check if this is a target food item)walk_executor(milk_2074)obs(milk_2074, Check if this is a target food item)
##############################
From agent.py
obs(food_chicken_2050, Check if this is a target food item)
Get this information:  food_chicken_2050 is close to fridge_140. food_chicken_2050 is close to character_219. food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside fridge_140. food_chicken_2050 is CLEAN.
##############################
From agent.py
obs(food_egg_2053, Check if this is a target food item)
Get this information:  food_egg_2053 is close to fridge_140. food_egg_2053 is close to character_219. food_egg_2053 is inside dining_room_1. food_egg_2053 is inside fridge_140. food_egg_2053 is CLEAN.
##############################
From agent.py
obs(food_fish_2054, Check if this is a target food item)
Get this information:  food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is DIRTY.
##############################
From agent.py
obs(food_turkey_2071, Check if this is a target food item)
Get this information:  food_turkey_2071 is inside dining_room_1. food_turkey_2071 is inside fridge_140. food_turkey_2071 is close to fridge_140. food_turkey_2071 is close to character_219. food_turkey_2071 is CLEAN.
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, Check if this is a target food item)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dvd_player_2000_around_tvstand_135(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

behavior find_stereo_2007_around_table_127(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(stereo,table_instance)
        else:
            exp(stereo,table_instance)
    eff:
        unknown[stereo]=False
        close[stereo,table_instance]=True
        close[table_instance,stereo]=True
    

behavior find_fork_2104_around_table_127(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_food_butter_2018_around_table_127(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_butter,table_instance)
        else:
            exp(food_butter,table_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,table_instance]=True
        close[table_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_items_on_table(item1: item, item2: item, item3: item, item4: item, item5: item, table: item):
    body:
        if not on(item1, table):
            put_on(item1, table)
        if not on(item2, table):
            put_on(item2, table)
        if not on(item3, table):
            put_on(item3, table)
        if not on(item4, table):
            put_on(item4, table)
        if not on(item5, table):
            put_on(item5, table)


behavior __goal__():
    body:
        bind dining_room_table: item where:
            is_table(dining_room_table) 
        # Binding items to their respective IDs
        bind milk: item where:
            is_milk(milk)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind egg: item where:
            is_food_egg(egg)
        bind fish: item where:
            is_food_fish(fish)
        bind turkey: item where:
            is_food_turkey(turkey)
        
        walk_to(dining_room_table)
        put_items_on_table(milk, chicken, egg, fish, turkey, dining_room_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_items_on_table(item1: item, item2: item, item3: item, item4: item, item5: item, table: item):
    body:
        if not on(item1, table):
            put_on(item1, table)
        if not on(item2, table):
            put_on(item2, table)
        if not on(item3, table):
            put_on(item3, table)
        if not on(item4, table):
            put_on(item4, table)
        if not on(item5, table):
            put_on(item5, table)


behavior __goal__():
    body:
        bind dining_room_table: item where:
            is_table(dining_room_table) 
        # Binding items to their respective IDs
        bind milk: item where:
            is_milk(milk)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind egg: item where:
            is_food_egg(egg)
        bind fish: item where:
            is_food_fish(fish)
        bind turkey: item where:
            is_food_turkey(turkey)
        
        walk_to(dining_room_table)
        put_items_on_table(milk, chicken, egg, fish, turkey, dining_room_table)

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_123)put_executor(milk_2074, table_123)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(table_123)put_executor(food_chicken_2050, table_123)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(table_123)put_executor(food_egg_2053, table_123)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(table_123)put_executor(food_fish_2054, table_123)walk_executor(food_turkey_2071)grab_executor(food_turkey_2071)walk_executor(table_123)put_executor(food_turkey_2071, table_123)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the fridge_140. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the milk_2074. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(milk_2074, table_123)
Robot find: Robot is close to the milk_2074. Robot is close to the mat_114. Robot is close to the table_123. milk_2074 is close table_123. table_123 is close milk_2074. milk_2074 is on table_123. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(food_chicken_2050, table_123)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the mat_114. Robot is close to the table_123. food_chicken_2050 is close table_123. table_123 is close food_chicken_2050. food_chicken_2050 is on table_123. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the food_egg_2053. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(food_egg_2053, table_123)
Robot find: Robot is close to the food_egg_2053. Robot is close to the mat_114. Robot is close to the table_123. food_egg_2053 is close table_123. table_123 is close food_egg_2053. food_egg_2053 is on table_123. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_fish_2054)
Robot find: Robot is close to the fridge_140. Robot is close to the food_fish_2054. 
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the fridge_140. Robot is close to the food_fish_2054. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(food_fish_2054, table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the mat_114. Robot is close to the table_123. table_123 is close food_fish_2054. food_fish_2054 is close table_123. food_fish_2054 is on table_123. food_fish_2054 released by right hand. 
##############################
From agent.py
walk_executor(food_turkey_2071)
Robot find: Robot is close to the fridge_140. Robot is close to the food_turkey_2071. 
##############################
From agent.py
grab_executor(food_turkey_2071)
Robot find: Robot is close to the fridge_140. Robot is close to the food_turkey_2071. Grabbing food_turkey_2071 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the food_turkey_2071. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(food_turkey_2071, table_123)
Robot find: Robot is close to the food_turkey_2071. Robot is close to the mat_114. Robot is close to the table_123. table_123 is close food_turkey_2071. food_turkey_2071 is close table_123. food_turkey_2071 is on table_123. food_turkey_2071 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put milk, turkey, egg, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(milk_2074)', 'walk_executor(table_123)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(table_123)', 'put_executor(milk_2074, table_123)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(table_123)', 'put_executor(food_chicken_2050, table_123)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(table_123)', 'put_executor(food_egg_2053, table_123)', 'walk_executor(food_fish_2054)', 'grab_executor(food_fish_2054)', 'walk_executor(table_123)', 'put_executor(food_fish_2054, table_123)', 'walk_executor(food_turkey_2071)', 'grab_executor(food_turkey_2071)', 'walk_executor(table_123)', 'put_executor(food_turkey_2071, table_123)']
Time info:
Time consume: 105 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 2
goal correct times: 0
action_num: 25

Task complete rate:
1
Scene_id: 2
##############################
