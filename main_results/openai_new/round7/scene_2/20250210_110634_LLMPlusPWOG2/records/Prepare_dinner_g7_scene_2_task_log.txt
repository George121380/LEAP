From agent.py
Reset goals: The sub-goals are: 
['Cook a pot of fish soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_plate_2105_around_kitchen_counter_129(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior add_ingredient_to_pot(ingredient:item, pot:item):
    body:
        achieve_once inside(ingredient, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_soup(pot:item):
    body:
        achieve has_water(pot) # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind fish: item where:
            is_food_fish(fish)
        # Select fish as it is required for fish soup

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        add_ingredient_to_pot(fish, pot) # Add the fish to the pot
        place_pot_on_stove(pot, stove) # Place the pot on the stove
        turn_on_stove(stove) # Turn on the stove
        cook_soup(pot) # Initiate the cooking process

#goal_representation_end

##############################
From agent.py->reset_goal

behavior add_ingredient_to_pot(ingredient:item, pot:item):
    body:
        achieve_once inside(ingredient, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_soup(pot:item):
    body:
        achieve has_water(pot) # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind fish: item where:
            is_food_fish(fish)
        # Select fish as it is required for fish soup

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        add_ingredient_to_pot(fish, pot) # Add the fish to the pot
        place_pot_on_stove(pot, stove) # Place the pot on the stove
        turn_on_stove(stove) # Turn on the stove
        cook_soup(pot) # Initiate the cooking process

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(pot_54, kitchen_counter_129)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(pot_54, kitchen_counter_129)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_fish_2054, fridge_140)
Find food_fish_2054. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(food_fish_2054)
Robot find: Robot is close to the fridge_140. Robot is close to the food_fish_2054. 
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the fridge_140. Robot is close to the food_fish_2054. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_fish_2054, pot_54)
Robot find: Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the pot_54. food_fish_2054 is inside pot_54. pot_54 is close food_fish_2054. food_fish_2054 is close pot_54. food_fish_2054 released by right hand. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the stove_2090. Robot is close to the food_fish_2054. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the stove_2090. Robot is close to the food_fish_2054. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is filled with water as part of the 'cook_soup' behavior. This was not achieved in the actions taken.
##############################
From agent.py
Human Instruction: You need to ensure that the pot is filled with water as part of the 'cook_soup' behavior. This was not achieved in the actions taken.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for pot_54 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_fish_2054 around fridge_140.
Action 7: Walk to pot_54.
Action 8: Open pot_54.
Action 9: Walk to food_fish_2054.
Action 10: Grab food_fish_2054.
Action 11: Walk to pot_54.
Action 12: Put food_fish_2054 into pot_54.
Action 13: Grab pot_54.
Action 14: Walk to stove_2090.
Action 15: Put pot_54 on stove_2090.
Action 16: Switch on stove_2090.
Action 17: Walk to pot_54.
Action 18: Grab pot_54.
Action 19: Walk to faucet_134.
Action 20: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_console_2027_around_computer_2110(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(console,computer_instance)
        else:
            exp(console,computer_instance)
    eff:
        unknown[console]=False
        close[console,computer_instance]=True
        close[computer_instance,console]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2097_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_food_in_pot(food:item, pot:item):
    body:
        achieve_once inside(food, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        bind food_fish: item where:
            is_food_fish(food_fish) and id[food_fish]==2054
        
        fill_pot_with_water(pot, faucet)
        place_food_in_pot(food_fish, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_food_in_pot(food:item, pot:item):
    body:
        achieve_once inside(food, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        bind food_fish: item where:
            is_food_fish(food_fish) and id[food_fish]==2054
        
        fill_pot_with_water(pot, faucet)
        place_food_in_pot(food_fish, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before completing the task of cooking a pot of fish soup. This action has not been carried out yet.
##############################
From agent.py
Human Instruction: You need to fill the pot with water before completing the task of cooking a pot of fish soup. This action has not been carried out yet.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for pot_54 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_fish_2054 around fridge_140.
Action 7: Walk to pot_54.
Action 8: Open pot_54.
Action 9: Walk to food_fish_2054.
Action 10: Grab food_fish_2054.
Action 11: Walk to pot_54.
Action 12: Put food_fish_2054 into pot_54.
Action 13: Grab pot_54.
Action 14: Walk to stove_2090.
Action 15: Put pot_54 on stove_2090.
Action 16: Switch on stove_2090.
Action 17: Walk to pot_54.
Action 18: Grab pot_54.
Action 19: Walk to faucet_134.
Action 20: Switch off faucet_134.
Action 21: Walk to faucet_308.
Action 22: Switch off faucet_308.
Action 23: Walk to stove_2090.
Action 24: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_kitchen_counter_128(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(blender,kitchen_counter_instance)
        else:
            exp(blender,kitchen_counter_instance)
    eff:
        unknown[blender]=False
        close[blender,kitchen_counter_instance]=True
        close[kitchen_counter_instance,blender]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior start_cooking(pot:item, stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on while the pot is placed on it for cooking

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and (id[faucet] == 134 or id[faucet] == 308)
        # Select one of the faucets with ID 134 or 308

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the selected faucet

        start_cooking(pot, stove)
        # Begin cooking the pot of fish soup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior start_cooking(pot:item, stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on while the pot is placed on it for cooking

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and (id[faucet] == 134 or id[faucet] == 308)
        # Select one of the faucets with ID 134 or 308

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the selected faucet

        start_cooking(pot, stove)
        # Begin cooking the pot of fish soup

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before completing the task of cooking a pot of fish soup. This step has not been carried out yet. Ensure that the pot is filled with water using one of the faucets and then proceed to ensure the stove is on with the pot placed on it for cooking.
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(kitchen_counter_129)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(food_fish_2054)', 'grab_executor(food_fish_2054)', 'walk_executor(pot_54)', 'putin_executor(food_fish_2054, pot_54)', 'grab_executor(pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)']
Time info:
Time consume: 109 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 3
goal correct times: 0
action_num: 26

Task complete rate:
Keystate: k1 - Requires: 20 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
