From agent.py
Reset goals: The sub-goals are: 
['Boil some vegetables. Then cool them in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_carrot_2047_around_kitchen_counter_129(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_bowl_2095_around_kitchen_counter_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item):
    body:
        achieve has_water(pot)
        achieve is_on(pot)

behavior cool_vegetables_in_bowl(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil vegetables
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to be boiled
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to cool the vegetables
        boil_vegetables(pot)
        # Boil vegetables in the pot
        achieve_once inside(vegetables, pot)
        # Place vegetables inside the pot
        cool_vegetables_in_bowl(vegetables, bowl)
        # Cool vegetables in a bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_bowl_2095_around_kitchen_counter_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water
        achieve_once inside(is_food_vegetable(), pot)
        # Put vegetables into the pot
        achieve_once is_on(stove)
        # Turn on the stove to boil the pot

behavior cool_vegetables(vegetables: item, bowl: item):
    body:
        achieve_once inside(vegetables, bowl)
        # Transfer the boiled vegetables into the bowl
        achieve is_off(stove)
        # Turn off the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a cooking pot
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to cool the vegetables

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling

        boil_vegetables(pot)
        # Execute boiling of vegetables in the pot
        
        foreach vegetables: item:
            if is_food_vegetable(vegetables) and inside(vegetables, pot):
                cool_vegetables(vegetables, bowl)
                # Transfer boiled vegetables to the bowl for cooling

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_bowl_2095_around_kitchen_counter_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(vegetable:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water
        achieve_once inside(vegetable, pot)
        # Place the vegetables inside the pot
        achieve plugged(stove)
        # Plug in the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior cool_vegetables(vegetable:item, bowl:item):
    body:
        achieve_once inside(vegetable, bowl)
        # Move the boiled vegetables to the bowl to cool

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable item
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        boil_vegetables(vegetable, pot, stove)
        # Perform the boiling process
        
        cool_vegetables(vegetable, bowl)
        # Cool the boiled vegetables in a bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_carrot_2047_around_kitchen_counter_129(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_bowl_2095_around_kitchen_counter_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item, stove:item, veggies:item):
    body:
        achieve_once inside(veggies, pot)
        # Add vegetables into the pot
        achieve has_water(pot)
        # Ensure the pot has water
        achieve on(pot, stove)
        # Place pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior cool_vegetables(bowl:item, veggies:item):
    body:
        achieve_once inside(veggies, bowl)
        # Place boiled vegetables into the bowl

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind veggies: item where:
            is_food_vegetable(veggies)
        # Select vegetables to boil
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl for cooling vegetables

        boil_vegetables(pot, stove, veggies)
        cool_vegetables(bowl, veggies)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_vegetables(pot:item, stove:item, veggies:item):
    body:
        achieve_once inside(veggies, pot)
        # Add vegetables into the pot
        achieve has_water(pot)
        # Ensure the pot has water
        achieve on(pot, stove)
        # Place pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior cool_vegetables(bowl:item, veggies:item):
    body:
        achieve_once inside(veggies, bowl)
        # Place boiled vegetables into the bowl

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind veggies: item where:
            is_food_vegetable(veggies)
        # Select vegetables to boil
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl for cooling vegetables

        boil_vegetables(pot, stove, veggies)
        cool_vegetables(bowl, veggies)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(pot_54, kitchen_counter_129)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)walk_executor(kitchen_counter_129)exp(bowl_2096, kitchen_counter_129)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(pot_54, kitchen_counter_129)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)walk_executor(kitchen_counter_129)exp(bowl_2096, kitchen_counter_129)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)walk_executor(kitchen_counter_129)exp(bowl_2096, kitchen_counter_129)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(bowl_2096, kitchen_counter_129)
Fail to find bowl_2096 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)walk_executor(cupboard_130)exp(bowl_2096, cupboard_130)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(bowl_2096, cupboard_130)
Fail to find bowl_2096 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)walk_executor(photoframe_246)exp(bowl_2096, photoframe_246)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py
walk_executor(photoframe_246)
Robot find: drawing_238, chair_263, mat_237, Robot is close to the bookshelf_260. 
##############################
From agent.py
exp(bowl_2096, photoframe_246)
Fail to find bowl_2096 around photoframe_246. 
##############################
From agent.py-> find a plan in act()
walk_executor(photoframe_246)exp(bowl_2096, photoframe_246)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(photoframe_246)
Robot find: Robot is close to the bookshelf_260. 
##############################
From agent.py
exp(bowl_2096, photoframe_246)
Fail to find bowl_2096 around photoframe_246. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(bowl_2096, kitchen_counter_128)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(bowl_2096, kitchen_counter_128)
Fail to find bowl_2096 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(photoframe_246)exp(bowl_2096, photoframe_246)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(photoframe_246)
Robot find: Robot is close to the bookshelf_260. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2096 ?
Answer: Robot, please locate bowl_2096. It is inside dining_room_1, placed on top of table_127.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, please locate bowl_2096. It is inside dining_room_1, placed on top of table_127.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for pot_54 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_vegetable_2072 around fridge_140.
Action 7: Walk to pot_54.
Action 8: Open pot_54.
Action 9: Walk to food_vegetable_2072.
Action 10: Grab food_vegetable_2072.
Action 11: Walk to pot_54.
Action 12: Put food_vegetable_2072 into pot_54.
Action 13: Grab pot_54.
Action 14: Walk to faucet_134.
Action 15: Switch off faucet_134.
Action 16: Walk to stove_2090.
Action 17: Put pot_54 on stove_2090.
Action 18: Switch on stove_2090.
Action 19: Walk to kitchen_counter_129.
Action 20: look for bowl_2096 around kitchen_counter_129.
Action 21: Walk to pot_54.
Action 22: Grab pot_54.
Action 23: Walk to faucet_308.
Action 24: Switch off faucet_308.
Action 25: Walk to stove_2090.
Action 26: Put pot_54 on stove_2090.
Action 27: Walk to cupboard_130.
Action 28: look for bowl_2096 around cupboard_130.
Action 29: Walk to pot_54.
Action 30: Grab pot_54.
Action 31: Walk to faucet_134.
Action 32: Switch on faucet_134.
Action 33: Switch off faucet_134.
Action 34: Walk to stove_2090.
Action 35: Put pot_54 on stove_2090.
Action 36: Walk to photoframe_246.
Action 37: look for bowl_2096 around photoframe_246.
Action 38: Walk to photoframe_246.
Action 39: look for bowl_2096 around photoframe_246.
Action 40: Walk to kitchen_counter_128.
Action 41: look for bowl_2096 around kitchen_counter_128.
Action 42: Walk to photoframe_246.

##############################
From agent.py
exp(bowl_2096, photoframe_246)
Fail to find bowl_2096 around photoframe_246. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(bowl_2096, table_127)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(bowl_2096, table_127)
Find bowl_2096. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
From agent.py
putin_executor(food_vegetable_2072, bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. food_vegetable_2072 is close bowl_2096. bowl_2096 is close food_vegetable_2072. food_vegetable_2072 is inside bowl_2096. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the pot with water to ensure the pot has water for boiling the vegetables.
##############################
From agent.py
Human Instruction: The robot needs to fill the pot with water to ensure the pot has water for boiling the vegetables.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for pot_54 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_vegetable_2072 around fridge_140.
Action 7: Walk to pot_54.
Action 8: Open pot_54.
Action 9: Walk to food_vegetable_2072.
Action 10: Grab food_vegetable_2072.
Action 11: Walk to pot_54.
Action 12: Put food_vegetable_2072 into pot_54.
Action 13: Grab pot_54.
Action 14: Walk to faucet_134.
Action 15: Switch off faucet_134.
Action 16: Walk to stove_2090.
Action 17: Put pot_54 on stove_2090.
Action 18: Switch on stove_2090.
Action 19: Walk to kitchen_counter_129.
Action 20: look for bowl_2096 around kitchen_counter_129.
Action 21: Walk to pot_54.
Action 22: Grab pot_54.
Action 23: Walk to faucet_308.
Action 24: Switch off faucet_308.
Action 25: Walk to stove_2090.
Action 26: Put pot_54 on stove_2090.
Action 27: Walk to cupboard_130.
Action 28: look for bowl_2096 around cupboard_130.
Action 29: Walk to pot_54.
Action 30: Grab pot_54.
Action 31: Walk to faucet_134.
Action 32: Switch on faucet_134.
Action 33: Switch off faucet_134.
Action 34: Walk to stove_2090.
Action 35: Put pot_54 on stove_2090.
Action 36: Walk to photoframe_246.
Action 37: look for bowl_2096 around photoframe_246.
Action 38: Walk to photoframe_246.
Action 39: look for bowl_2096 around photoframe_246.
Action 40: Walk to kitchen_counter_128.
Action 41: look for bowl_2096 around kitchen_counter_128.
Action 42: Walk to photoframe_246.
Action 43: look for bowl_2096 around photoframe_246.
Action 44: Walk to table_127.
Action 45: look for bowl_2096 around table_127.
Action 46: Walk to food_vegetable_2072.
Action 47: Grab food_vegetable_2072.
Action 48: Walk to bowl_2096.
Action 49: Put food_vegetable_2072 into bowl_2096.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_wallshelf_187(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_onion,wallshelf_instance)
        else:
            exp(food_onion,wallshelf_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,wallshelf_instance]=True
        close[wallshelf_instance,food_onion]=True
    

behavior find_oil_2005_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_in_pot(pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water in it
        achieve_once inside(food_vegetable, pot)
        # Place the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior cool_vegetables_in_bowl(pot:item, bowl:item):
    body:
        achieve_once inside(food_vegetable, bowl)
        # Transfer the boiled vegetables to the bowl for cooling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Bind a pot instance
        
        bind stove: item where:
            is_stove(stove)

        # Bind a stove instance
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)

        # Bind the vegetable instance
        bind bowl: item where:
            is_bowl(bowl)
        # Bind a bowl instance
        
        boil_vegetables_in_pot(pot, stove)
        cool_vegetables_in_bowl(pot, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2082_around_photoframe_246(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==246
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(cat,photoframe_instance)
        else:
            exp(cat,photoframe_instance)
    eff:
        unknown[cat]=False
        close[cat,photoframe_instance]=True
        close[photoframe_instance,cat]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2096_around_photoframe_246(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==246
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(bowl,photoframe_instance)
        else:
            exp(bowl,photoframe_instance)
    eff:
        unknown[bowl]=False
        close[bowl,photoframe_instance]=True
        close[photoframe_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve inside(food_vegetable_2072, pot)
        achieve_once closed(pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)
        
behavior cool_vegetables(bowl:item, pot:item):
    body:
        achieve_once inside(food_vegetable_2072, bowl)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the faucet with ID 134
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2096
        # Select the bowl with ID 2096
        
        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove)
        cool_vegetables(bowl, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_video_game_controller_2019_around_console_2027(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind console_instance:item where:
            is_console(console_instance) and id[console_instance]==2027
        achieve close_char(char,console_instance)
        if can_open(console_instance):
            achieve_once open(console_instance)
            exp(video_game_controller,console_instance)
        else:
            exp(video_game_controller,console_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,console_instance]=True
        close[console_instance,video_game_controller]=True
    

behavior find_oil_2005_around_wallshelf_187(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with ID 54
        
        achieve has_water(pot)
        # Ensure that the pot has water for boiling vegetables
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090
        
        achieve_once on(pot, stove)
        # Put the pot on the stove
        
        achieve is_on(stove)
        # Turn on the stove

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable]==2072
        # Select the vegetable with ID 2072
        
        achieve_once inside(vegetable, pot)
        # Place the vegetables inside the pot for boiling
        
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2096
        # Select bowl with ID 2096

        achieve_once inside(vegetable, bowl)
        # Move the boiled vegetables into the bowl for cooling

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with ID 54
        
        achieve has_water(pot)
        # Ensure that the pot has water for boiling vegetables
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090
        
        achieve_once on(pot, stove)
        # Put the pot on the stove
        
        achieve is_on(stove)
        # Turn on the stove

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable]==2072
        # Select the vegetable with ID 2072
        
        achieve_once inside(vegetable, pot)
        # Place the vegetables inside the pot for boiling
        
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2096
        # Select bowl with ID 2096

        achieve_once inside(vegetable, bowl)
        # Move the boiled vegetables into the bowl for cooling

##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
From agent.py
putin_executor(food_vegetable_2072, bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. food_vegetable_2072 is close bowl_2096. food_vegetable_2072 is inside bowl_2096. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot was not filled with water before putting the vegetables inside. To complete the sub-task, ensure the pot has water for boiling the vegetables.
##############################
From agent.py
Human Instruction: The pot was not filled with water before putting the vegetables inside. To complete the sub-task, ensure the pot has water for boiling the vegetables.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for pot_54 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_vegetable_2072 around fridge_140.
Action 7: Walk to pot_54.
Action 8: Open pot_54.
Action 9: Walk to food_vegetable_2072.
Action 10: Grab food_vegetable_2072.
Action 11: Walk to pot_54.
Action 12: Put food_vegetable_2072 into pot_54.
Action 13: Grab pot_54.
Action 14: Walk to faucet_134.
Action 15: Switch off faucet_134.
Action 16: Walk to stove_2090.
Action 17: Put pot_54 on stove_2090.
Action 18: Switch on stove_2090.
Action 19: Walk to kitchen_counter_129.
Action 20: look for bowl_2096 around kitchen_counter_129.
Action 21: Walk to pot_54.
Action 22: Grab pot_54.
Action 23: Walk to faucet_308.
Action 24: Switch off faucet_308.
Action 25: Walk to stove_2090.
Action 26: Put pot_54 on stove_2090.
Action 27: Walk to cupboard_130.
Action 28: look for bowl_2096 around cupboard_130.
Action 29: Walk to pot_54.
Action 30: Grab pot_54.
Action 31: Walk to faucet_134.
Action 32: Switch on faucet_134.
Action 33: Switch off faucet_134.
Action 34: Walk to stove_2090.
Action 35: Put pot_54 on stove_2090.
Action 36: Walk to photoframe_246.
Action 37: look for bowl_2096 around photoframe_246.
Action 38: Walk to photoframe_246.
Action 39: look for bowl_2096 around photoframe_246.
Action 40: Walk to kitchen_counter_128.
Action 41: look for bowl_2096 around kitchen_counter_128.
Action 42: Walk to photoframe_246.
Action 43: look for bowl_2096 around photoframe_246.
Action 44: Walk to table_127.
Action 45: look for bowl_2096 around table_127.
Action 46: Walk to food_vegetable_2072.
Action 47: Grab food_vegetable_2072.
Action 48: Walk to bowl_2096.
Action 49: Put food_vegetable_2072 into bowl_2096.
Action 50: Grab food_vegetable_2072.
Action 51: Walk to pot_54.
Action 52: Put food_vegetable_2072 into pot_54.
Action 53: Walk to food_vegetable_2072.
Action 54: Grab food_vegetable_2072.
Action 55: Walk to bowl_2096.
Action 56: Put food_vegetable_2072 into bowl_2096.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_photoframe_246(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==246
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(cup,photoframe_instance)
        else:
            exp(cup,photoframe_instance)
    eff:
        unknown[cup]=False
        close[cup,photoframe_instance]=True
        close[photoframe_instance,cup]=True
    

behavior find_oil_2005_around_wallshelf_187(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot: item, stove: item):
    body:
        achieve has_water(pot) # Ensure the pot is filled with water
        achieve_once inside(food_vegetable_2072, pot) # Place vegetables inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to start boiling

behavior cool_vegetables(pot: item, bowl: item):
    body:
        achieve_once inside(food_vegetable_2072, bowl) # Transfer the boiled vegetables to a bowl

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind food_vegetable_2072: item where:
            is_food_vegetable(food_vegetable_2072)
        bind bowl: item where:
            is_bowl(bowl)
        boil_vegetables(pot, stove) # Boil the vegetables
        cool_vegetables(pot, bowl) # Cool the vegetables in a bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_chair_263_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_bowl_2095_around_photoframe_246(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==246
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(bowl,photoframe_instance)
        else:
            exp(bowl,photoframe_instance)
    eff:
        unknown[bowl]=False
        close[bowl,photoframe_instance]=True
        close[photoframe_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once open(pot) # Open the pot to allow filling
        achieve_once has_water(pot) # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item, food_vegetable:item):
    body:
        achieve_once inside(food_vegetable, pot) # Place the vegetables inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve_once is_on(stove) # Turn on the stove to start boiling the vegetables

behavior cool_vegetables_in_bowl(pot:item, bowl:item):
    body:
        achieve_once inside(food_vegetable, bowl) # Transfer the boiled vegetables into the bowl

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        # Select the vegetables

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, food_vegetable)
        cool_vegetables_in_bowl(pot, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_video_game_controller_2019_around_photoframe_246(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==246
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(video_game_controller,photoframe_instance)
        else:
            exp(video_game_controller,photoframe_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,photoframe_instance]=True
        close[photoframe_instance,video_game_controller]=True
    

behavior find_chair_374_around_nightstand_373(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==373
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(chair,nightstand_instance)
        else:
            exp(chair,nightstand_instance)
    eff:
        unknown[chair]=False
        close[chair,nightstand_instance]=True
        close[nightstand_instance,chair]=True
    

behavior find_bowl_2095_around_desk_375(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(bowl,desk_instance)
        else:
            exp(bowl,desk_instance)
    eff:
        unknown[bowl]=False
        close[bowl,desk_instance]=True
        close[desk_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(pot:item, faucet:item):
    body:
        achieve_once open(pot)
        # Open the pot
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve_once is_on(stove)
        # Turn on the stove to boil the vegetables

behavior cool_vegetables(bowl:item, pot:item):
    body:
        achieve_once empty_bowl(bowl)
        # Ensure the bowl is empty before adding the vegetables
        achieve_once inside(vegetables, bowl)
        # Move the boiled vegetables into the bowl to cool

def empty_bowl(bowl:item):
    # Function to check if the bowl is empty
    symbol is_empty = not exists o:item: (inside(o, bowl))
    return is_empty

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        fill_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)
        cool_vegetables(bowl, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_video_game_controller_2019_around_photoframe_246(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==246
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(video_game_controller,photoframe_instance)
        else:
            exp(video_game_controller,photoframe_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,photoframe_instance]=True
        close[photoframe_instance,video_game_controller]=True
    

behavior find_chair_138_around_chair_138(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==138
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_bowl_2096_around_walllamp_291(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==291
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(bowl,walllamp_instance)
        else:
            exp(bowl,walllamp_instance)
    eff:
        unknown[bowl]=False
        close[bowl,walllamp_instance]=True
        close[walllamp_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Ensure the pot has water in it

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve is_on(stove) # Turn on the stove to boil water in the pot
        achieve inside(food_vegetable, pot) # Put the vegetables inside the pot to boil

behavior cool_vegetables(bowl:item, pot:item):
    body:
        achieve_once inside(food_vegetable, bowl) # Move the boiled vegetables into the bowl for cooling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        bind bowl: item where:
            is_bowl(bowl)

        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove)
        cool_vegetables(bowl, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_video_game_controller_2019_around_photoframe_246(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==246
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(video_game_controller,photoframe_instance)
        else:
            exp(video_game_controller,photoframe_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,photoframe_instance]=True
        close[photoframe_instance,video_game_controller]=True
    

behavior find_bowl_2097_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_water(pot:item):
    # Function to check if the pot has water
    symbol has_water=has_water(pot)
    return has_water

def vegetables_inside_pot(pot:item):
    # Function to check if there are vegetables inside the pot
    symbol in_pot= exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return in_pot

def are_vegetables_cooked():
    # Simple function to determine if vegetables are cooked
    # Here, we assume vegetables are cooked after boiling for some time
    return True 
    
behavior fill_pot_with_water(pot:item):
    body:
        achieve_once has_water(pot)

behavior cook_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)
        # We assume the vegetables are cooked after this step

behavior move_to_bowl(pot:item, bowl:item):
    body:
        if vegetables_inside_pot(pot) and are_vegetables_cooked():
            # Check if the pot has cooked vegetables
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and inside(vegetable, pot):
                    achieve_once inside(vegetable, bowl)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        if not pot_has_water(pot):
            fill_pot_with_water(pot)

        cook_vegetables(pot, stove)
        move_to_bowl(pot, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_video_game_controller_2019_around_photoframe_246(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==246
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(video_game_controller,photoframe_instance)
        else:
            exp(video_game_controller,photoframe_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,photoframe_instance]=True
        close[photoframe_instance,video_game_controller]=True
    

behavior find_chair_138_around_chair_138(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==138
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_bowl_2096_around_walllamp_291(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==291
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(bowl,walllamp_instance)
        else:
            exp(bowl,walllamp_instance)
    eff:
        unknown[bowl]=False
        close[bowl,walllamp_instance]=True
        close[walllamp_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve is_on(faucet) # Ensure the faucet is on for water flow
        achieve_once has_water(pot) # Fill the pot with water
        achieve_once is_off(faucet) # Switch off the faucet after filling the pot

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the vegetables

behavior cool_boiled_vegetables(pot:item, bowl:item):
    body:
        achieve_once inside(food_vegetable, bowl) # Transfer the vegetables from the pot to the bowl to cool

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, pot)
        # Select a faucet close to the pot
        fill_pot_with_water(pot, faucet)
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_vegetables(pot, stove)

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and inside(food_vegetable, pot)
        # Select vegetables in the pot
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        cool_boiled_vegetables(pot, bowl)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_129)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(kitchen_counter_129)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(cupboard_130)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(photoframe_246)', 'walk_executor(photoframe_246)', 'walk_executor(kitchen_counter_128)', 'walk_executor(photoframe_246)', 'walk_executor(table_127)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(bowl_2096)', 'putin_executor(food_vegetable_2072, bowl_2096)', 'grab_executor(food_vegetable_2072)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(bowl_2096)', 'putin_executor(food_vegetable_2072, bowl_2096)']
Time info:
Time consume: 425 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 13
goal correct times: 0
action_num: 47

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 10 steps
Keystate: k3 - Requires: 2 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
