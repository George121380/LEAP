From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

def observe_coffee_maker_for_plug_and_switch(coffee_maker: item):
    # Function to observe the coffee maker for plug status and switch status
    observe(coffee_maker, "Check if the coffee maker is plugged in and has a switch")

def observe_cup_for_availability():
    # Function to observe if there is a cup available
    observe(char, "Check if there is a cup available")

behavior use_coffee_maker(coffee_maker: item, cup: item):
    body:
        if unplugged(coffee_maker) or not has_switch(coffee_maker):
            observe_coffee_maker_for_plug_and_switch(coffee_maker)
        if unplugged(coffee_maker):
            plugin(coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)
        if not has_water(coffee_maker):
            get_water(coffee_maker)
        if not inside(cup, coffee_maker):
            put_inside(cup, coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior finish_coffee(cup: item):
    body:
        if not drinkable(cup):
            observe(cup, "Check if the cup contains drinkable coffee")
        drink(cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup) and not visited(cup)
        observe_cup_for_availability()
        use_coffee_maker(coffee_maker, cup)
        finish_coffee(cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2035_around_cupboard_131(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

def ensure_coffee_maker_ready(coffee_maker:item):
    # Function to ensure the coffee maker is ready for use
    if not plugged(coffee_maker):
        plugin(coffee_maker)
    if is_off(coffee_maker):
        switch_on(coffee_maker)

behavior prepare_coffee_maker(coffee_maker:item, cup:item, coffee_filter:item):
    body:
        ensure_coffee_maker_ready(coffee_maker)
        if not inside(cup, coffee_maker):
            put_inside(cup, coffee_maker)
        if not inside(coffee_filter, coffee_maker):
            put_inside(coffee_filter, coffee_maker)

def is_coffee_maker_ready(coffee_maker:item):
    # Check if the coffee maker is ready with a cup and filter inside
    symbol has_cup_and_filter=exists cup: item : (is_cup(cup) and inside(cup, coffee_maker)) and exists filter: item : (is_coffee_filter(filter) and inside(filter, coffee_maker))
    return has_cup_and_filter

behavior make_coffee(coffee_maker:item):
    body:
        if is_coffee_maker_ready(coffee_maker):
            switch_on(coffee_maker) # Start brewing coffee

behavior serve_coffee(cup:item):
    body:
        if inside(cup, coffee_maker):
            grab(cup)
            empty_a_hand() # Serve the coffee by removing the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        prepare_coffee_maker(coffee_maker, cup, coffee_filter)
        make_coffee(coffee_maker)
        serve_coffee(cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2035_around_wallshelf_187(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee_maker(coffee_maker: item):
    body:
        if unplugged(coffee_maker):
            plugin(coffee_maker) # Plug in the coffee maker
        if is_off(coffee_maker) and has_switch(coffee_maker):
            switch_on(coffee_maker) # Turn on the coffee maker

behavior make_coffee(coffee_maker: item, coffee_cup: item):
    body:
        if closed(coffee_cup):
            opens(coffee_cup) # Ensure the cup is open to receive coffee
        if not has_water(coffee_maker):
            observe(coffee_maker, "Check water level") # Check if the coffee maker has water
        observe(coffee_maker, "Start coffee brewing process with water") # Start the brewing process if conditions are met

behavior brew_coffee(coffee_maker: item, coffee_cup: item):
    body:
        prepare_coffee_maker(coffee_maker)
        make_coffee(coffee_maker, coffee_cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Find a coffee maker
        bind coffee_cup: item where:
            is_cup(coffee_cup)
        # Find a cup
        brew_coffee(coffee_maker, coffee_cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_coffee_maker(coffee_maker: item):
    body:
        if unplugged(coffee_maker):
            plugin(coffee_maker) # Plug in the coffee maker
        if is_off(coffee_maker) and has_switch(coffee_maker):
            switch_on(coffee_maker) # Turn on the coffee maker

behavior make_coffee(coffee_maker: item, coffee_cup: item):
    body:
        if closed(coffee_cup):
            opens(coffee_cup) # Ensure the cup is open to receive coffee
        if not has_water(coffee_maker):
            observe(coffee_maker, "Check water level") # Check if the coffee maker has water
        observe(coffee_maker, "Start coffee brewing process with water") # Start the brewing process if conditions are met

behavior brew_coffee(coffee_maker: item, coffee_cup: item):
    body:
        prepare_coffee_maker(coffee_maker)
        make_coffee(coffee_maker, coffee_cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Find a coffee maker
        bind coffee_cup: item where:
            is_cup(coffee_cup)
        # Find a cup
        brew_coffee(coffee_maker, coffee_cup)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)switchon_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)obs(coffe_maker_147, Check water level)obs(coffe_maker_147, Start coffee brewing process with water)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is opened. 
##############################
From agent.py
obs(coffe_maker_147, Check water level)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN.
##############################
From agent.py
obs(coffe_maker_147, Start coffee brewing process with water)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The sub-task of making a cup of coffee using the coffee maker is not complete. You need to switch the coffee maker on and ensure that the brewing process is started. Additionally, check and confirm if there is a cup ready to receive the coffee and ensure the coffee maker has water if it hasn't been checked already.
##############################
From agent.py
Human Instruction: The sub-task of making a cup of coffee using the coffee maker is not complete. You need to switch the coffee maker on and ensure that the brewing process is started. Additionally, check and confirm if there is a cup ready to receive the coffee and ensure the coffee maker has water if it hasn't been checked already.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Switch off coffe_maker_147.
Action 4: Open coffe_maker_147.
Action 5: Observe around coffe_maker_147 with the question of Check water level.
Action 6: Observe around coffe_maker_147 with the question of Start coffee brewing process with water.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_132(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

def is_cup_ready(coffee_maker:item):
    # Function to check if there is a cup ready to receive coffee from the coffee maker
    symbol cup_ready=exists cup_instance: item : (is_cup(cup_instance) and close(cup_instance, coffee_maker))
    return cup_ready

behavior ensure_water_and_cup_ready(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            observe(coffee_maker, "Check water level")

        if not is_cup_ready(coffee_maker):
            observe(coffee_maker, "Check for cup readiness")

behavior start_brewing(coffee_maker:item):
    body:
        ensure_water_and_cup_ready(coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)
        observe(coffee_maker, "Start coffee brewing process with water")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        walk_to(coffee_maker)
        start_brewing(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_cup_ready(coffee_maker:item):
    # Function to check if there is a cup ready to receive coffee from the coffee maker
    symbol cup_ready=exists cup_instance: item : (is_cup(cup_instance) and close(cup_instance, coffee_maker))
    return cup_ready

behavior ensure_water_and_cup_ready(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            observe(coffee_maker, "Check water level")

        if not is_cup_ready(coffee_maker):
            observe(coffee_maker, "Check for cup readiness")

behavior start_brewing(coffee_maker:item):
    body:
        ensure_water_and_cup_ready(coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)
        observe(coffee_maker, "Start coffee brewing process with water")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        walk_to(coffee_maker)
        start_brewing(coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)obs(coffe_maker_147, Check water level)obs(coffe_maker_147, Check for cup readiness)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)obs(coffe_maker_147, Start coffee brewing process with water)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
obs(coffe_maker_147, Check water level)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN.
##############################
From agent.py
obs(coffe_maker_147, Check for cup readiness)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN.
##############################
From agent.py
close_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is opened. 
##############################
From agent.py
obs(coffe_maker_147, Start coffee brewing process with water)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the coffee maker is switched on and that the brewing process has been started. Confirm the coffee maker has water and there is a cup ready to receive the coffee.
##############################
From agent.py
Human Instruction: You need to ensure that the coffee maker is switched on and that the brewing process has been started. Confirm the coffee maker has water and there is a cup ready to receive the coffee.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Switch off coffe_maker_147.
Action 4: Open coffe_maker_147.
Action 5: Observe around coffe_maker_147 with the question of Check water level.
Action 6: Observe around coffe_maker_147 with the question of Start coffee brewing process with water.
Action 7: Walk to coffe_maker_147.
Action 8: Observe around coffe_maker_147 with the question of Check water level.
Action 9: Observe around coffe_maker_147 with the question of Check for cup readiness.
Action 10: Close coffe_maker_147.
Action 11: Switch on coffe_maker_147.
Action 12: Switch off coffe_maker_147.
Action 13: Open coffe_maker_147.
Action 14: Observe around coffe_maker_147 with the question of Start coffee brewing process with water.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_132(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water
    symbol has_water=exists water: item : (has_water(coffee_maker))
    return has_water

def cup_ready_near_coffee_maker(coffee_maker:item):
    # Function to check if there is a cup ready to receive coffee from the coffee maker
    symbol ready_cup=exists cup: item : (is_cup(cup) and close(cup, coffee_maker))
    return ready_cup

behavior switch_on_coffee_maker(coffee_maker:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior start_brewing_process(coffee_maker:item):
    body:
        if is_on(coffee_maker) and has_water_in_coffee_maker(coffee_maker):
            observe(coffee_maker, "Start coffee brewing process with water")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        if not visited(coffee_maker):
            observe(coffee_maker, "Check for coffee maker readiness")
        
        if has_water_in_coffee_maker(coffee_maker) and cup_ready_near_coffee_maker(coffee_maker):
            switch_on_coffee_maker(coffee_maker)
            start_brewing_process(coffee_maker)
        else:
            if not has_water_in_coffee_maker(coffee_maker):
                observe(coffee_maker, "Check water level and fill if necessary")
            if not cup_ready_near_coffee_maker(coffee_maker):
                observe(coffee_maker, "Check for cup readiness")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_132(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

def has_water_inside(coffee_maker:item):
    symbol has_water=exists o: item : (is_coffe_maker(o) and has_water(o))
    return has_water 

def cup_ready_for_coffee(coffee_maker:item):
    symbol has_cup_ready=exists cup: item : (is_cup(cup) and close(cup, coffee_maker))
    return has_cup_ready

behavior start_coffee_brewing(coffee_maker:item):
    body:
        if closed(coffee_maker) and is_on(coffee_maker):
            observe(coffee_maker, "Start coffee brewing process with water")
            # Initiate brewing if the coffee maker is closed and on

behavior prepare_and_brew_coffee(coffee_maker:item):
    body:
        if not closed(coffee_maker):
            closes(coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)
        start_coffee_brewing(coffee_maker)
          
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        if not has_water_inside(coffee_maker):
            observe(coffee_maker, "Check water level")
        if not cup_ready_for_coffee(coffee_maker):
            observe(coffee_maker, "Check for cup readiness")
        prepare_and_brew_coffee(coffee_maker) 

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def has_water_inside(coffee_maker:item):
    symbol has_water=exists o: item : (is_coffe_maker(o) and has_water(o))
    return has_water 

def cup_ready_for_coffee(coffee_maker:item):
    symbol has_cup_ready=exists cup: item : (is_cup(cup) and close(cup, coffee_maker))
    return has_cup_ready

behavior start_coffee_brewing(coffee_maker:item):
    body:
        if closed(coffee_maker) and is_on(coffee_maker):
            observe(coffee_maker, "Start coffee brewing process with water")
            # Initiate brewing if the coffee maker is closed and on

behavior prepare_and_brew_coffee(coffee_maker:item):
    body:
        if not closed(coffee_maker):
            closes(coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)
        start_coffee_brewing(coffee_maker)
          
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        if not has_water_inside(coffee_maker):
            observe(coffee_maker, "Check water level")
        if not cup_ready_for_coffee(coffee_maker):
            observe(coffee_maker, "Check for cup readiness")
        prepare_and_brew_coffee(coffee_maker) 

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_147, Check water level)obs(coffe_maker_147, Check for cup readiness)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)obs(coffe_maker_147, Start coffee brewing process with water)
##############################
From agent.py
obs(coffe_maker_147, Check water level)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN.
##############################
From agent.py
obs(coffe_maker_147, Check for cup readiness)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN.
##############################
From agent.py
close_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is opened. 
##############################
From agent.py
obs(coffe_maker_147, Start coffee brewing process with water)
Get this information:  coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The coffee maker must be turned on and closed to initiate brewing. Ensure the coffee maker has water inside and there is a cup ready to receive the coffee. Confirm these conditions and perform the necessary actions (close the coffee maker, ensure it is on) to start the brewing process.
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'switchoff_executor(coffe_maker_147)', 'open_executor(coffe_maker_147)', 'walk_executor(coffe_maker_147)', 'close_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'switchoff_executor(coffe_maker_147)', 'open_executor(coffe_maker_147)', 'close_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'switchoff_executor(coffe_maker_147)', 'open_executor(coffe_maker_147)']
Time info:
Time consume: 132 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
