From agent.py
Reset goals: The sub-goals are: 
['1. Find and collect rice and eggs in the kitchen.', '2. Cook the rice.', '3. Fry the egg and the cooked rice together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_kitchen_counter_129(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def find_item_in_kitchen(item: item):
    # Function to check if an item is in the kitchen
    symbol is_in_kitchen = exists location: item : (is_kitchen(location) and inside(item, location))
    return is_in_kitchen

behavior collect_2_items(item1: item, item2: item):
    body:
        if not inhand(item1) and has_a_free_hand(char):
            grab(item1)
            # Grab the first item if a hand is free
        if not inhand(item2) and has_a_free_hand(char):
            grab(item2)
            # Grab the second item if the other hand is free

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and find_item_in_kitchen(rice)
        # Select rice in the kitchen
        bind eggs: item where:
            is_food_egg(eggs) and find_item_in_kitchen(eggs)
        # Select eggs in the kitchen
        walk_to(rice)
        # Move close to the rice
        collect_2_items(rice, eggs)
        # Collect the rice and eggs

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_kitchen_counter_129(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item(x: item):
    # Check if the item is either rice or egg
    return is_food_rice(x) or is_food_egg(x)

behavior find_and_collect_items():
    body:
        foreach item: item:
            if is_food_item(item) and not inhand(item):
                grab(item)

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Approach the kitchen area
        walk_to(kitchen)
        # Find and collect rice and eggs
        find_and_collect_items()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_food_item(x: item):
    # Check if the item is either rice or egg
    return is_food_rice(x) or is_food_egg(x)

behavior find_and_collect_items():
    body:
        foreach item: item:
            if is_food_item(item) and not inhand(item):
                grab(item)

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Approach the kitchen area
        walk_to(kitchen)
        # Find and collect rice and eggs
        find_and_collect_items()

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(kitchen_counter_129)exp(food_rice_2067, kitchen_counter_129)walk_executor(food_rice_2067)grab_executor(food_rice_2067)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(food_rice_2067)grab_executor(food_rice_2067)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: Robot is close to the kitchen_counter_128. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. Robot is close to the food_rice_2067. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. Robot is close to the food_rice_2067. Grabbing food_rice_2067 by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_pot_2093_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice(rice: item, pot: item, stove: item):
    body:
        if not inside(rice, pot):
            put_inside(rice, pot)
            # Place the rice inside the pot
        
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove
        
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to cook the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
            # Select rice from known information

        bind pot: item where:
            is_pot(pot)
            # Select a pot from known information

        bind stove: item where:
            is_stove(stove)
            # Select a stove from known information
        
        cook_rice(rice, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_rice(rice: item, pot: item, stove: item):
    body:
        if not inside(rice, pot):
            put_inside(rice, pot)
            # Place the rice inside the pot
        
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove
        
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to cook the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
            # Select rice from known information

        bind pot: item where:
            is_pot(pot)
            # Select a pot from known information

        bind stove: item where:
            is_stove(stove)
            # Select a stove from known information
        
        cook_rice(rice, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(pot_2093, kitchen_counter_129)put_executor(food_egg_2053, kitchen_counter_129)walk_executor(pot_2093)open_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the food_egg_2053. Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(pot_2093, kitchen_counter_129)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
put_executor(food_egg_2053, kitchen_counter_129)walk_executor(pot_2093)open_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
put_executor(food_egg_2053, kitchen_counter_129)
Robot find: Robot is close to the food_egg_2053. Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. food_egg_2053 is close kitchen_counter_129. kitchen_counter_129 is close food_egg_2053. food_egg_2053 is on kitchen_counter_129. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
putin_executor(food_rice_2067, pot_2093)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. food_rice_2067 is inside pot_2093. food_rice_2067 is close pot_2093. pot_2093 is close food_rice_2067. food_rice_2067 released by left hand. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2005_around_cupboard_131(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior grab_food(item: item):
    body:
        if not inhand(item):
            grab(item)

behavior fry_item_on_stove(item: item, stove: item):
    body:
        if is_off(stove):
            switch_on(stove)
        put_on(item, stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind stove: item where:
            is_stove(stove)

        grab_food(rice)
        fry_item_on_stove(rice, stove)
        
        grab_food(egg)
        fry_item_on_stove(egg, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior grab_food(item: item):
    body:
        if not inhand(item):
            grab(item)

behavior fry_item_on_stove(item: item, stove: item):
    body:
        if is_off(stove):
            switch_on(stove)
        put_on(item, stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind stove: item where:
            is_stove(stove)

        grab_food(rice)
        fry_item_on_stove(rice, stove)
        
        grab_food(egg)
        fry_item_on_stove(egg, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(stove_2090)put_executor(food_rice_2067, stove_2090)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(stove_2090)put_executor(food_egg_2053, stove_2090)
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. Grabbing food_rice_2067 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(food_rice_2067, stove_2090)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. food_rice_2067 is close stove_2090. stove_2090 is close food_rice_2067. food_rice_2067 is on stove_2090. food_rice_2067 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_egg_2053. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(food_egg_2053, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_egg_2053. Robot is close to the stove_2090. food_egg_2053 is close stove_2090. stove_2090 is close food_egg_2053. food_egg_2053 is on stove_2090. food_egg_2053 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(kitchen_counter_128)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(kitchen_counter_128)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(food_rice_2067)', 'grab_executor(food_rice_2067)', 'walk_executor(kitchen_counter_129)', 'put_executor(food_egg_2053, kitchen_counter_129)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'putin_executor(food_rice_2067, pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(food_rice_2067)', 'grab_executor(food_rice_2067)', 'walk_executor(stove_2090)', 'put_executor(food_rice_2067, stove_2090)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(stove_2090)', 'put_executor(food_egg_2053, stove_2090)']
Time info:
Time consume: 147 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 26

Task complete rate:
Keystate: k1 - Requires: 10 steps
Keystate: k2 - Requires: 15 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
