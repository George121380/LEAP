From agent.py
Reset goals: The sub-goals are: 
['1. Find the pizza and hamburger.', '2. Place the pizza and hamburger on a plate.', '3. Heat them in the microwave.', '4. Put the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2057_around_kitchen_counter_129(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
def has_pizza_or_hamburger(obj: item):
    # Function to check if the item is a pizza or hamburger
    symbol is_pizza_or_hamburger = is_food_pizza(obj) or is_food_hamburger(obj)
    return is_pizza_or_hamburger

behavior __goal__():
    body:
        # Check all items in the scene that have not been visited
        foreach obj: item:
            if not visited(obj):
                if has_pizza_or_hamburger(obj):
                    # If the object is a pizza or hamburger, observe it to check further details
                    observe(obj, "Check if it is the pizza or hamburger were looking for")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_pizza_or_hamburger(obj: item):
    # Function to check if the item is a pizza or hamburger
    symbol is_pizza_or_hamburger = is_food_pizza(obj) or is_food_hamburger(obj)
    return is_pizza_or_hamburger

behavior __goal__():
    body:
        # Check all items in the scene that have not been visited
        foreach obj: item:
            if not visited(obj):
                if has_pizza_or_hamburger(obj):
                    # If the object is a pizza or hamburger, observe it to check further details
                    observe(obj, "Check if it is the pizza or hamburger were looking for")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(food_hamburger_2057, kitchen_counter_129)walk_executor(food_hamburger_2057)obs(food_hamburger_2057, Check if it is the pizza or hamburger were looking for)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_pizza_2065, fridge_140)walk_executor(food_pizza_2065)obs(food_pizza_2065, Check if it is the pizza or hamburger were looking for)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(food_hamburger_2057, kitchen_counter_129)
Fail to find food_hamburger_2057 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_hamburger_2057, fridge_140)walk_executor(food_hamburger_2057)obs(food_hamburger_2057, Check if it is the pizza or hamburger were looking for)walk_executor(fridge_140)exp(food_pizza_2065, fridge_140)walk_executor(food_pizza_2065)obs(food_pizza_2065, Check if it is the pizza or hamburger were looking for)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_hamburger_2057, fridge_140)
Find food_hamburger_2057. 
##############################
From agent.py-> find a plan in act()
obs(food_hamburger_2057, Check if it is the pizza or hamburger were looking for)obs(food_pizza_2065, Check if it is the pizza or hamburger were looking for)
##############################
From agent.py
obs(food_hamburger_2057, Check if it is the pizza or hamburger were looking for)
Get this information:  food_hamburger_2057 is inside dining_room_1. food_hamburger_2057 is inside fridge_140. food_hamburger_2057 is close to fridge_140. food_hamburger_2057 is close to character_219. food_hamburger_2057 is CLEAN.
##############################
From agent.py
obs(food_pizza_2065, Check if it is the pizza or hamburger were looking for)
Get this information:  food_pizza_2065 is inside dining_room_1. food_pizza_2065 is inside fridge_140. food_pizza_2065 is close to fridge_140. food_pizza_2065 is close to character_219. food_pizza_2065 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_132(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Bind to the item recognized as a plate

        bind pizza: item where:
            is_food_pizza(pizza)
        # Bind to the item recognized as a pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Bind to the item recognized as a hamburger

        grab(pizza)
        # Grab the pizza

        put_on(pizza, plate)
        # Place the pizza on the plate

        grab(hamburger)
        # Grab the hamburger

        put_on(hamburger, plate)
        # Place the hamburger on the plate

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Bind to the item recognized as a plate

        bind pizza: item where:
            is_food_pizza(pizza)
        # Bind to the item recognized as a pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Bind to the item recognized as a hamburger

        grab(pizza)
        # Grab the pizza

        put_on(pizza, plate)
        # Place the pizza on the plate

        grab(hamburger)
        # Grab the hamburger

        put_on(hamburger, plate)
        # Place the hamburger on the plate

##############################
From agent.py-> find a plan in act()
grab_executor(food_pizza_2065)walk_executor(kitchen_counter_132)exp(plate_2105, kitchen_counter_132)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
grab_executor(food_pizza_2065)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_pizza_2065 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(plate_2105, kitchen_counter_132)
Fail to find plate_2105 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_pizza_2065)walk_executor(cupboard_131)open_executor(cupboard_131)exp(plate_2105, cupboard_131)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
grab_executor(food_pizza_2065)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the kitchen_counter_132. Grabbing food_pizza_2065 by left hand. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the cupboard_131. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_filing_cabinet_378(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(plate,filing_cabinet_instance)
        else:
            exp(plate,filing_cabinet_instance)
    eff:
        unknown[plate]=False
        close[plate,filing_cabinet_instance]=True
        close[filing_cabinet_instance,plate]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cup_2089_around_cupboard_130(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_plate(o:item, plate:item):
    body:
        if not on(o, plate):
            put_on(o, plate)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza object

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger object

        bind plate: item where:
            is_plate(plate)
        # Select a plate object

        place_on_plate(pizza, plate)
        place_on_plate(hamburger, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_on_plate(o:item, plate:item):
    body:
        if not on(o, plate):
            put_on(o, plate)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza object

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger object

        bind plate: item where:
            is_plate(plate)
        # Select a plate object

        place_on_plate(pizza, plate)
        place_on_plate(hamburger, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(filing_cabinet_378)exp(plate_2105, filing_cabinet_378)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
walk_executor(filing_cabinet_378)
Robot find: food_bread_2016, crayon_2020, needle_2024, check_2033, alcohol_2002, coffee_filter_2035, soap_2037, bills_2009, drawing_387, Robot is close to the food_pizza_2065. Robot is close to the food_bread_2016. Robot is close to the crayon_2020. Robot is close to the needle_2024. Robot is close to the check_2033. Robot is close to the alcohol_2002. Robot is close to the coffee_filter_2035. Robot is close to the soap_2037. Robot is close to the bills_2009. Robot is close to the filing_cabinet_378. 
##############################
From agent.py
exp(plate_2105, filing_cabinet_378)
Fail to find plate_2105 around filing_cabinet_378. 
##############################
From agent.py-> find a plan in act()
walk_executor(walllamp_183)exp(plate_2105, walllamp_183)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
walk_executor(walllamp_183)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the walllamp_183. 
##############################
From agent.py
exp(plate_2105, walllamp_183)
Fail to find plate_2105 around walllamp_183. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_301)exp(plate_2105, wallshelf_301)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
walk_executor(wallshelf_301)
Robot find: towel_rack_299, towel_rack_300, drawing_296, Robot is close to the food_pizza_2065. Robot is close to the wallshelf_301. 
##############################
From agent.py
exp(plate_2105, wallshelf_301)
Fail to find plate_2105 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_187)exp(plate_2105, wallshelf_187)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
walk_executor(wallshelf_187)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the wallshelf_187. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_2105 ?
Answer: Robot, locate dining_room_1. Inside, look for table_127. Plate_2105 is on table_127, close to it. Retrieve plate_2105 from the surface of table_127.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, locate dining_room_1. Inside, look for table_127. Plate_2105 is on table_127, close to it. Retrieve plate_2105 from the surface of table_127.

Trial and Error: You can not open cupboard_131
The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for food_hamburger_2057 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_hamburger_2057 around fridge_140.
Action 7: Observe around food_hamburger_2057 with the question of Check if it is the pizza or hamburger were looking for.
Action 8: Observe around food_pizza_2065 with the question of Check if it is the pizza or hamburger were looking for.
Action 9: Grab food_pizza_2065.
Action 10: Walk to kitchen_counter_132.
Action 11: look for plate_2105 around kitchen_counter_132.
Action 12: Grab food_pizza_2065.
Action 13: Walk to cupboard_131.
Action 14: Walk to filing_cabinet_378.
Action 15: look for plate_2105 around filing_cabinet_378.
Action 16: Walk to walllamp_183.
Action 17: look for plate_2105 around walllamp_183.
Action 18: Walk to wallshelf_301.
Action 19: look for plate_2105 around wallshelf_301.
Action 20: Walk to wallshelf_187.

##############################
From agent.py
exp(plate_2105, wallshelf_187)
Fail to find plate_2105 around wallshelf_187. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(plate_2105, table_127)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the food_pizza_2065. Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(plate_2105, table_127)
Find plate_2105. 
##############################
From agent.py-> find a plan in act()
walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the table_127. Robot is close to the plate_2105. 
##############################
From agent.py
put_executor(food_pizza_2065, plate_2105)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the table_127. Robot is close to the plate_2105. plate_2105 is close food_pizza_2065. food_pizza_2065 is close plate_2105. food_pizza_2065 is on plate_2105. food_pizza_2065 released by left hand. food_pizza_2065 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2057)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_hamburger_2057)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the fridge_140. Grabbing food_hamburger_2057 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_hamburger_2057, plate_2105)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. Robot is close to the table_127. plate_2105 is close food_hamburger_2057. food_hamburger_2057 is close plate_2105. food_hamburger_2057 is on plate_2105. food_hamburger_2057 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_kitchen_counter_128(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(blender,kitchen_counter_instance)
        else:
            exp(blender,kitchen_counter_instance)
    eff:
        unknown[blender]=False
        close[blender,kitchen_counter_instance]=True
        close[kitchen_counter_instance,blender]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_on_plate(plate:item):
    # Function to check if there is food on a specified plate
    symbol has_food=exists o: item : (is_food(o) and on(o, plate))
    return has_food

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        if not inside(plate, microwave):
            put_inside(plate, microwave)
            # Place the plate with food inside the microwave
        if open(microwave):
            closes(microwave)
            # Close the microwave door
        if is_off(microwave):
            switch_on(microwave)
            # Turn on the microwave to heat the food

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and is_food_on_plate(plate)
        # Select a plate with food on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)
        # Heat the food on the plate using the microwave

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_on_plate(plate:item):
    # Function to check if there is food on a specified plate
    symbol has_food=exists o: item : (is_food(o) and on(o, plate))
    return has_food

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        if not inside(plate, microwave):
            put_inside(plate, microwave)
            # Place the plate with food inside the microwave
        if open(microwave):
            closes(microwave)
            # Close the microwave door
        if is_off(microwave):
            switch_on(microwave)
            # Turn on the microwave to heat the food

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and is_food_on_plate(plate)
        # Select a plate with food on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)
        # Heat the food on the plate using the microwave

##############################
From agent.py-> find a plan in act()
walk_executor(microwave_149)open_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(microwave_149)putin_executor(plate_2105, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
grab_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the table_127. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
putin_executor(plate_2105, microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. plate_2105 is inside microwave_149. microwave_149 is close plate_2105. plate_2105 is close microwave_149. plate_2105 released by right hand. 
##############################
From agent.py
close_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is closed. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_nightstand_262(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==262
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(chair,nightstand_instance)
        else:
            exp(chair,nightstand_instance)
    eff:
        unknown[chair]=False
        close[chair,nightstand_instance]=True
        close[nightstand_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior walk_to_dining_room(dining_room: item):
    body:
        if not inside_char(char, dining_room):
            walk_to(dining_room)

behavior find_table_in_dining_room(dining_room: item):
    body:
        foreach table: item:
            if is_table(table) and inside(table, dining_room):
                observe(table, "Locate table with ID 127 within the dining room")

behavior place_plate_on_table(plate: item, table: item):
    body:
        if not on(plate, table):
            put_on(plate, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and id[table] == 127
        
        bind plate: item where:
            is_plate(plate) and id[plate] == 2105
        
        walk_to_dining_room(dining_room)
        find_table_in_dining_room(dining_room)
        place_plate_on_table(plate, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior walk_to_dining_room(dining_room: item):
    body:
        if not inside_char(char, dining_room):
            walk_to(dining_room)

behavior find_table_in_dining_room(dining_room: item):
    body:
        foreach table: item:
            if is_table(table) and inside(table, dining_room):
                observe(table, "Locate table with ID 127 within the dining room")

behavior place_plate_on_table(plate: item, table: item):
    body:
        if not on(plate, table):
            put_on(plate, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and id[table] == 127
        
        bind plate: item where:
            is_plate(plate) and id[plate] == 2105
        
        walk_to_dining_room(dining_room)
        find_table_in_dining_room(dining_room)
        place_plate_on_table(plate, table)

##############################
From agent.py-> find a plan in act()
walk_executor(dining_room_1)walk_executor(table_123)obs(table_123, Locate table with ID 127 within the dining room)walk_executor(table_127)obs(table_127, Locate table with ID 127 within the dining room)walk_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_127)put_executor(plate_2105, table_127)
##############################
From agent.py
walk_executor(dining_room_1)

##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
obs(table_123, Locate table with ID 127 within the dining room)
Get this information:  cup_2088 is on table_123. laptop_2015 is on table_123. table_123 is inside dining_room_1. table_123 is close to wall_5. table_123 is close to cup_2087. table_123 is close to cup_2088. table_123 is close to ceilinglamp_41. table_123 is close to floor_12. table_123 is close to floor_13. table_123 is close to floor_14. table_123 is close to bowl_2095. table_123 is close to floor_17. table_123 is close to mat_114. table_123 is close to floor_18. table_123 is close to mouse_2003. table_123 is close to fork_2103. table_123 is close to bench_122. table_123 is close to homework_2011. table_123 is close to bench_124. table_123 is close to laptop_2015. table_123 is close to character_219. fork_2103 is on table_123. table_123 is on floor_17. table_123 is on mat_114. bowl_2095 is on table_123. cup_2087 is on table_123. homework_2011 is on table_123. mouse_2003 is on table_123. table_123 is facing drawing_118. table_123 is CLEAN.
##############################
From agent.py
walk_executor(table_127)
Robot find: Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
obs(table_127, Locate table with ID 127 within the dining room)
Get this information:  fork_2104 is on table_127. table_127 is close to wall_11. table_127 is close to console_2027. table_127 is close to crayon_2030. table_127 is close to bowl_2096. table_127 is close to bowl_2097. table_127 is close to mat_115. table_127 is close to floor_20. table_127 is close to floor_19. table_127 is close to napkin_2014. table_127 is close to floor_23. table_127 is close to fork_2104. table_127 is close to plate_2105. table_127 is close to bench_126. table_127 is close to bench_125. table_127 is close to floor_24. table_127 is close to character_219. bowl_2096 is on table_127. table_127 is on mat_115. table_127 is on floor_20. table_127 is facing drawing_118. bowl_2097 is on table_127. console_2027 is on table_127. table_127 is inside dining_room_1. crayon_2030 is on table_127. napkin_2014 is on table_127. table_127 is CLEAN.
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
switchoff_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned off. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the microwave_149. 
##############################
From agent.py
grab_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the microwave_149. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(table_127)
Robot find: Robot is close to the plate_2105. Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
put_executor(plate_2105, table_127)
Robot find: Robot is close to the plate_2105. Robot is close to the mat_115. Robot is close to the table_127. plate_2105 is on table_127. plate_2105 is close table_127. plate_2105 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(kitchen_counter_129)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_pizza_2065)', 'walk_executor(kitchen_counter_132)', 'grab_executor(food_pizza_2065)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131) (Failed)', 'walk_executor(filing_cabinet_378)', 'walk_executor(walllamp_183)', 'walk_executor(wallshelf_301)', 'walk_executor(wallshelf_187)', 'walk_executor(table_127)', 'walk_executor(plate_2105)', 'put_executor(food_pizza_2065, plate_2105)', 'walk_executor(food_hamburger_2057)', 'grab_executor(food_hamburger_2057)', 'walk_executor(plate_2105)', 'put_executor(food_hamburger_2057, plate_2105)', 'walk_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(plate_2105)', 'grab_executor(plate_2105)', 'walk_executor(microwave_149)', 'putin_executor(plate_2105, microwave_149)', 'close_executor(microwave_149)', 'switchon_executor(microwave_149)', 'walk_executor(dining_room_1)', 'walk_executor(table_123)', 'walk_executor(table_127)', 'walk_executor(microwave_149)', 'switchoff_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(plate_2105)', 'grab_executor(plate_2105)', 'walk_executor(table_127)', 'put_executor(plate_2105, table_127)']
Time info:
Time consume: 225 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0
action_num: 38

Task complete rate:
1
Scene_id: 2
##############################
