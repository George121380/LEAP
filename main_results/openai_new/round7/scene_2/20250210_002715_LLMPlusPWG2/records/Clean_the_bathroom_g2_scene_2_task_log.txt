From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation

behavior make_soapy_water(sink:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom) # Identify the sink in the bathroom
        make_soapy_water(sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation

behavior fill_sink_with_soapy_water(sink:item, soap:item):
    body:
        achieve_once inhand(soap)
        # Assume we need to hold the soap temporarily to create soapy water
        achieve close_char(char, sink)
        # Ensure the character is close to the sink to interact with it
        achieve has_water(sink)
        # Fill the sink with water
        achieve cleanse(sink)
        # Use the soap to create soapy water in the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink in the bathroom
        
        bind soap: item where:
            is_soap(soap)
        # Select a soap item
        
        fill_sink_with_soapy_water(sink, soap)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_phone_47_around_dresser_377(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(phone,dresser_instance)
        else:
            exp(phone,dresser_instance)
    eff:
        unknown[phone]=False
        close[phone,dresser_instance]=True
        close[dresser_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
bind bathroom: item where:
    is_bathroom(bathroom)

bind sink: item where:
    is_sink(sink) and inside(sink, bathroom)

bind faucet: item where:
    is_faucet(faucet) and close(faucet, sink)

bind cleaning_solution: item where:
    is_cleaning_solution(cleaning_solution)

behavior prepare_soapy_water(sink:item, faucet:item, cleaning_solution:item):
    body:
        achieve_once has_water(sink)
        achieve_once inside(cleaning_solution, sink)

behavior __goal__():
    body:
        prepare_soapy_water(sink, faucet, cleaning_solution)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_dresser_377(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(phone,dresser_instance)
        else:
            exp(phone,dresser_instance)
    eff:
        unknown[phone]=False
        close[phone,dresser_instance]=True
        close[dresser_instance,phone]=True
    

behavior find_soap_2037_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_bathroom(sink)
        # Select a sink in the bathroom
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind soap: item where:
            is_soap(soap)
        # Select soap

        achieve_once has_water(sink)
        # Fill the sink with water
        
        achieve_once clean(soap)
        # Add soap to the water
        

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
def is_in_bathroom(sink:item):
    # Function to check if a sink is in the bathroom
    symbol in_bathroom=exists room: item : (is_bathroom(room) and inside(sink, room))
    return in_bathroom

behavior prepare_soapy_water(sink:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_in_bathroom(sink)
        # Select a sink in the bathroom
        prepare_soapy_water(sink)

#goal_representation_end

##############################
From agent.py->reset_goal
def is_in_bathroom(sink:item):
    # Function to check if a sink is in the bathroom
    symbol in_bathroom=exists room: item : (is_bathroom(room) and inside(sink, room))
    return in_bathroom

behavior prepare_soapy_water(sink:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_in_bathroom(sink)
        # Select a sink in the bathroom
        prepare_soapy_water(sink)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the sink with water and add soap to prepare soapy water in the bathroom. Make sure the faucet is turned on until the sink is filled.
##############################
From agent.py
Human Instruction: You need to fill the sink with water and add soap to prepare soapy water in the bathroom. Make sure the faucet is turned on until the sink is filled.

The actions you have taken:
Action 1: Walk to faucet_308.
Action 2: Switch off faucet_308.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_bathroom_cabinet_305(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(phone,bathroom_cabinet_instance)
        else:
            exp(phone,bathroom_cabinet_instance)
    eff:
        unknown[phone]=False
        close[phone,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,phone]=True
    

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_soapy_water(sink: item, faucet: item, soap: item):
    body:
        achieve_once is_on(faucet) # Turn on the faucet to fill the sink with water
        achieve_once has_water(sink) # Ensure the sink is filled with water
        achieve_once inside(soap, sink) # Add soap to the sink to prepare soapy water
        achieve_once is_off(faucet) # Turn off the faucet after filling the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_bathroom(sink)
        # Select a sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the bathroom sink

        bind soap: item where:
            is_soap(soap)
        # Select a soap item
        
        prepare_soapy_water(sink, faucet, soap)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water_and_soap(sink:item, faucet:item, soap:item):
    body:
        achieve_once is_on(faucet)
        # Turn on the faucet
        achieve_once has_water(sink)
        # Fill the sink with water
        achieve_once is_off(faucet)
        # Turn off the faucet
        achieve_once inside(soap, sink)
        # Add soap into the sink

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select the faucet with ID 308
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        bind soap: item where:
            is_soap(soap)
        # Select a soap
        
        fill_sink_with_water_and_soap(sink, faucet, soap)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_sink_with_water_and_soap(sink:item, faucet:item, soap:item):
    body:
        achieve_once is_on(faucet)
        # Turn on the faucet
        achieve_once has_water(sink)
        # Fill the sink with water
        achieve_once is_off(faucet)
        # Turn off the faucet
        achieve_once inside(soap, sink)
        # Add soap into the sink

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select the faucet with ID 308
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        bind soap: item where:
            is_soap(soap)
        # Select a soap
        
        fill_sink_with_water_and_soap(sink, faucet, soap)

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(bathroom_cabinet_305)open_executor(bathroom_cabinet_305)exp(soap_2037, bathroom_cabinet_305)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
switchon_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(bathroom_cabinet_305)
Robot find: Robot is close to the bathroom_cabinet_305. 
##############################
From agent.py
open_executor(bathroom_cabinet_305)
Robot find: soap_2038, Robot is close to the bathroom_cabinet_305. Robot is close to the soap_2038. bathroom_cabinet_305 is opened. 
##############################
From agent.py
exp(soap_2037, bathroom_cabinet_305)
Fail to find soap_2037 around bathroom_cabinet_305. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchon_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(soap_2038)grab_executor(soap_2038)walk_executor(sink_307)putin_executor(soap_2038, sink_307)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchon_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(soap_2038)
Robot find: Robot is close to the bathroom_cabinet_305. Robot is close to the soap_2038. 
##############################
From agent.py
grab_executor(soap_2038)
Robot find: Robot is close to the bathroom_cabinet_305. Robot is close to the soap_2038. Grabbing soap_2038 by right hand. 
##############################
From agent.py
walk_executor(sink_307)
Robot find: detergent_2108, Robot is close to the soap_2038. Robot is close to the bathroom_counter_306. Robot is close to the sink_307. 
##############################
From agent.py
putin_executor(soap_2038, sink_307)
Robot find: Robot is close to the soap_2038. Robot is close to the bathroom_counter_306. Robot is close to the sink_307. soap_2038 is close sink_307. sink_307 is close soap_2038. soap_2038 is inside sink_307. soap_2038 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the sink is filled with water by turning on the faucet and ensuring it stays on until the sink is filled before turning it off again.
##############################
From agent.py
Human Instruction: You need to ensure that the sink is filled with water by turning on the faucet and ensuring it stays on until the sink is filled before turning it off again.

The actions you have taken:
Action 1: Walk to faucet_308.
Action 2: Switch off faucet_308.
Action 3: Switch on faucet_308.
Action 4: Switch off faucet_308.
Action 5: Walk to bathroom_cabinet_305.
Action 6: Open bathroom_cabinet_305.
Action 7: look for soap_2037 around bathroom_cabinet_305.
Action 8: Walk to faucet_308.
Action 9: Switch on faucet_308.
Action 10: Switch off faucet_308.
Action 11: Walk to soap_2038.
Action 12: Grab soap_2038.
Action 13: Walk to sink_307.
Action 14: Put soap_2038 into sink_307.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_home_office_161(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(phone,home_office_instance)
        else:
            exp(phone,home_office_instance)
    eff:
        unknown[phone]=False
        close[phone,home_office_instance]=True
        close[home_office_instance,phone]=True
    

behavior find_soap_2037_around_cupboard_130(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(soap,cupboard_instance)
        else:
            exp(soap,cupboard_instance)
    eff:
        unknown[soap]=False
        close[soap,cupboard_instance]=True
        close[cupboard_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_sink(bathroom:item, sink:item, faucet:item, soap:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the sink with water
        achieve has_water(sink)
        # Ensure the sink is full
        achieve_once is_off(faucet)
        # Turn off the faucet after the sink is filled
        achieve_once on(soap, sink)
        # Place the soap into the sink to make it soapy

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom
        bind faucet: item where:
            is_faucet(faucet) and close(sink, faucet)
        # Select the faucet close to the sink
        bind soap: item where:
            is_soap(soap) and close(soap, sink)
        # Select the soap close to the sink
        prepare_sink(bathroom, sink, faucet, soap)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior prepare_sink(bathroom:item, sink:item, faucet:item, soap:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the sink with water
        achieve has_water(sink)
        # Ensure the sink is full
        achieve_once is_off(faucet)
        # Turn off the faucet after the sink is filled
        achieve_once on(soap, sink)
        # Place the soap into the sink to make it soapy

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom
        bind faucet: item where:
            is_faucet(faucet) and close(sink, faucet)
        # Select the faucet close to the sink
        bind soap: item where:
            is_soap(soap) and close(soap, sink)
        # Select the soap close to the sink
        prepare_sink(bathroom, sink, faucet, soap)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchon_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(soap_2038)grab_executor(soap_2038)put_executor(soap_2038, sink_307)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchon_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(soap_2038)
Robot find: Robot is close to the sink_307. Robot is close to the soap_2038. 
##############################
From agent.py
grab_executor(soap_2038)
Robot find: Robot is close to the sink_307. Robot is close to the soap_2038. Grabbing soap_2038 by right hand. 
##############################
From agent.py
put_executor(soap_2038, sink_307)
Robot find: Robot is close to the sink_307. Robot is close to the soap_2038. soap_2038 is close sink_307. soap_2038 is on sink_307. soap_2038 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The sink needs to be filled with water. You have not yet allowed the faucet to remain on long enough to ensure the sink is filled before turning it off again. Ensure this is done to complete the task.
##############################
Task Summary:
Task Goal:
Prepare a sink of soapy water in the bathroom.
Action History:
['walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'switchon_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(bathroom_cabinet_305)', 'open_executor(bathroom_cabinet_305)', 'walk_executor(faucet_308)', 'switchon_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(soap_2038)', 'grab_executor(soap_2038)', 'walk_executor(sink_307)', 'putin_executor(soap_2038, sink_307)', 'walk_executor(faucet_308)', 'switchon_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(soap_2038)', 'grab_executor(soap_2038)', 'put_executor(soap_2038, sink_307)']
Time info:
Time consume: 135 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 8
goal correct times: 0
action_num: 19

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
