From agent.py
Reset goals: The sub-goals are: 
['Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_129(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_food_in_microwave(plate:item, microwave:item):
    body:
        achieve inside(plate, microwave)
        achieve_once is_on(microwave)

behavior move_plate_to_dining_table(plate:item, dining_table:item, dining_room:item):
    body:
        achieve inside(dining_table, dining_room)
        achieve_once on(plate, dining_table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        bind dining_table: item where:
            is_table(dining_table)
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining table and its room
        
        place_food_on_plate(pizza, hamburger, plate)
        heat_food_in_microwave(plate, microwave)
        move_plate_to_dining_table(plate, dining_table, dining_room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_hamburger_2057_around_kitchen_counter_129(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)
        achieve_once is_off(microwave)

behavior place_plate_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        bind plate: item where:
            is_plate(plate)
        bind microwave: item where:
            is_microwave(microwave)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        place_food_on_plate(pizza, plate)
        place_food_on_plate(hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_plate_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_plate(o:item, plate:item):
    body:
        achieve_once on(o, plate) # Place the item on the plate

behavior heat_in_microwave(o:item, microwave:item):
    body:
        achieve_once inside(o, microwave) # Place the item inside the microwave
        achieve_once is_on(microwave) # Turn on the microwave to heat

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table) # Place the plate on the table

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and inside(table, room) and is_dining_room(room)
        # Select a table that is in the dining room

        put_on_plate(pizza, plate)
        put_on_plate(hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate) # Place pizza on the plate
        achieve_once on(hamburger, plate) # Place hamburger on the plate

behavior heat_in_microwave(item:item, microwave:item):
    body:
        achieve_once inside(item, microwave) # Place the item inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        place_food_on_plate(pizza, hamburger, plate)
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        heat_in_microwave(plate, microwave)

        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        # Select a table in the dining room
        place_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_food_in_microwave(plate:item, microwave:item):
    body:
        bind food: item where:
            is_food_pizza(food) or is_food_hamburger(food)
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior move_plate_to_dining_room(plate:item, dining_room:item, table:item):
    body:
        achieve_once inside(plate, dining_room)
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        bind plate: item where:
            is_plate(plate)
        bind microwave: item where:
            is_microwave(microwave)
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
            
        place_food_on_plate(pizza, hamburger, plate)
        heat_food_in_microwave(plate, microwave)
        move_plate_to_dining_room(plate, dining_room, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2065_around_kitchen_counter_129(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        # Place the pizza on the plate
        achieve_once on(hamburger, plate)
        # Place the hamburger on the plate

behavior heat_food_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with food inside the microwave
        achieve_once is_on(microwave)
        # Turn on the microwave

behavior place_plate_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)
        # Place the plate on the table

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza item

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger item

        bind plate: item where:
            is_plate(plate)
        # Select a plate item

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table located in the dining room

        place_food_on_plate(pizza, hamburger, plate)
        heat_food_in_microwave(plate, microwave)
        place_plate_on_table(plate, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put pizza and hamburger on a plate. then hot them in the microwave. then put them on a table in dinning room." ?
Answer: Find a plate to put the pizza and hamburger on. Then put them in the microwave. Turn on the microwave. After that, put the plate on the table in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_cupboard_130(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_hamburger_2057_around_kitchen_counter_129(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_food_pizza_2065_around_fridge_140(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve_once on(pizza, plate)
        achieve_once on(hamburger, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once is_on(microwave)

behavior move_plate_to_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza item

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger item

        bind plate: item where:
            is_plate(plate)
        # Select a plate item

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        bind dining_table: item where:
            is_table(dining_table) and exists room: item : (is_dining_room(room) and inside(dining_table, room))
        # Select a table in the dining room

        place_food_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        move_plate_to_table(plate, dining_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_hamburger_2057_around_fridge_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2065_around_kitchen_counter_128(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_plate(o1:item, o2:item, plate:item):
    body:
        achieve_once on(o1, plate)
        achieve_once on(o2, plate)

behavior heat_in_microwave(o1:item, o2:item, microwave:item):
    body:
        achieve_once inside(o1, microwave)
        achieve_once inside(o2, microwave)
        achieve_once is_on(microwave)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        put_on_plate(pizza, hamburger, plate)
        heat_in_microwave(pizza, hamburger, microwave)
        achieve_once on(plate, table)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(plate_2105, kitchen_counter_128)exp(food_pizza_2065, kitchen_counter_128)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_hamburger_2057, fridge_140)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(microwave_149)putin_executor(food_pizza_2065, microwave_149)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(microwave_149)putin_executor(food_hamburger_2057, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(plate_2105, kitchen_counter_128)
Fail to find plate_2105 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(plate_2105, cupboard_130)walk_executor(kitchen_counter_129)exp(food_pizza_2065, kitchen_counter_129)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(kitchen_counter_129)exp(food_hamburger_2057, kitchen_counter_129)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(microwave_149)putin_executor(food_pizza_2065, microwave_149)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(microwave_149)putin_executor(food_hamburger_2057, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(plate_2105, cupboard_130)
Fail to find plate_2105 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(plate_2105, cupboard_131)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_pizza_2065, fridge_140)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(fridge_140)exp(food_hamburger_2057, fridge_140)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(microwave_149)putin_executor(food_pizza_2065, microwave_149)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(microwave_149)putin_executor(food_hamburger_2057, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(plate_2105, cupboard_131)
Fail to find plate_2105 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(nightstand_373)exp(plate_2105, nightstand_373)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_pizza_2065, fridge_140)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(fridge_140)exp(food_hamburger_2057, fridge_140)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(microwave_149)putin_executor(food_pizza_2065, microwave_149)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(microwave_149)putin_executor(food_hamburger_2057, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
walk_executor(nightstand_373)
Robot find: drawing_389, coin_2004, mat_386, pillow_368, Robot is close to the nightstand_373. 
##############################
From agent.py
exp(plate_2105, nightstand_373)
Fail to find plate_2105 around nightstand_373. 
##############################
From agent.py-> find a plan in act()
walk_executor(doorjamb_37)exp(plate_2105, doorjamb_37)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_pizza_2065, fridge_140)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(fridge_140)exp(food_hamburger_2057, fridge_140)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(microwave_149)putin_executor(food_pizza_2065, microwave_149)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(microwave_149)putin_executor(food_hamburger_2057, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
walk_executor(doorjamb_37)
Robot find: phone_47, Robot is close to the doorjamb_37. 
##############################
From agent.py
exp(plate_2105, doorjamb_37)
Fail to find plate_2105 around doorjamb_37. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(plate_2105, kitchen_counter_129)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_pizza_2065, fridge_140)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(fridge_140)exp(food_hamburger_2057, fridge_140)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(microwave_149)putin_executor(food_pizza_2065, microwave_149)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(microwave_149)putin_executor(food_hamburger_2057, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_2105 ?
Answer: Go to dining_room_1. Locate table_127. You will find plate_2105 on top of table_127.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1. Locate table_127. You will find plate_2105 on top of table_127.

Human Guidance: Find a plate to put the pizza and hamburger on. Then put them in the microwave. Turn on the microwave. After that, put the plate on the table in the dining room.
The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for plate_2105 around kitchen_counter_128.
Action 3: Walk to cupboard_130.
Action 4: look for plate_2105 around cupboard_130.
Action 5: Walk to cupboard_131.
Action 6: Open cupboard_131.
Action 7: look for plate_2105 around cupboard_131.
Action 8: Walk to nightstand_373.
Action 9: look for plate_2105 around nightstand_373.
Action 10: Walk to doorjamb_37.
Action 11: look for plate_2105 around doorjamb_37.
Action 12: Walk to kitchen_counter_129.

##############################
From agent.py
exp(plate_2105, kitchen_counter_129)
Fail to find plate_2105 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(plate_2105, table_127)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_pizza_2065, fridge_140)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(fridge_140)exp(food_hamburger_2057, fridge_140)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(microwave_149)putin_executor(food_pizza_2065, microwave_149)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(microwave_149)putin_executor(food_hamburger_2057, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(plate_2105, table_127)
Find plate_2105. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_pizza_2065, fridge_140)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(fridge_140)exp(food_hamburger_2057, fridge_140)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(microwave_149)putin_executor(food_pizza_2065, microwave_149)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(microwave_149)putin_executor(food_hamburger_2057, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_pizza_2065, fridge_140)
Find food_pizza_2065. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)walk_executor(microwave_149)open_executor(microwave_149)walk_executor(food_pizza_2065)grab_executor(food_pizza_2065)walk_executor(microwave_149)putin_executor(food_pizza_2065, microwave_149)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(microwave_149)putin_executor(food_hamburger_2057, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)
##############################
From agent.py
grab_executor(food_pizza_2065)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_pizza_2065 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_pizza_2065, plate_2105)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the plate_2105. Robot is close to the table_127. plate_2105 is close food_pizza_2065. food_pizza_2065 is close plate_2105. food_pizza_2065 is on plate_2105. food_pizza_2065 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2057)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_hamburger_2057)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the fridge_140. Grabbing food_hamburger_2057 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_hamburger_2057, plate_2105)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. Robot is close to the table_127. plate_2105 is close food_hamburger_2057. food_hamburger_2057 is close plate_2105. food_hamburger_2057 is on plate_2105. food_hamburger_2057 released by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(food_pizza_2065)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the plate_2105. 
##############################
From agent.py
grab_executor(food_pizza_2065)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the plate_2105. Grabbing food_pizza_2065 by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
putin_executor(food_pizza_2065, microwave_149)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is close food_pizza_2065. food_pizza_2065 is inside microwave_149. food_pizza_2065 is close microwave_149. food_pizza_2065 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2057)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. 
##############################
From agent.py
grab_executor(food_hamburger_2057)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. Grabbing food_hamburger_2057 by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the food_pizza_2065. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
putin_executor(food_hamburger_2057, microwave_149)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the food_pizza_2065. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is close food_hamburger_2057. food_hamburger_2057 is inside microwave_149. food_hamburger_2057 is close microwave_149. food_hamburger_2057 released by right hand. 
##############################
From agent.py
close_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is closed. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to take the pizza and hamburger out of the microwave and put them on a plate. Then place the plate with the pizza and hamburger on the table in the dining room.
##############################
From agent.py
Human Instruction: You need to take the pizza and hamburger out of the microwave and put them on a plate. Then place the plate with the pizza and hamburger on the table in the dining room.

Human Guidance: Find a plate to put the pizza and hamburger on. Then put them in the microwave. Turn on the microwave. After that, put the plate on the table in the dining room.
The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for plate_2105 around kitchen_counter_128.
Action 3: Walk to cupboard_130.
Action 4: look for plate_2105 around cupboard_130.
Action 5: Walk to cupboard_131.
Action 6: Open cupboard_131.
Action 7: look for plate_2105 around cupboard_131.
Action 8: Walk to nightstand_373.
Action 9: look for plate_2105 around nightstand_373.
Action 10: Walk to doorjamb_37.
Action 11: look for plate_2105 around doorjamb_37.
Action 12: Walk to kitchen_counter_129.
Action 13: look for plate_2105 around kitchen_counter_129.
Action 14: Walk to table_127.
Action 15: look for plate_2105 around table_127.
Action 16: Walk to fridge_140.
Action 17: Switch off fridge_140.
Action 18: Open fridge_140.
Action 19: look for food_pizza_2065 around fridge_140.
Action 20: Grab food_pizza_2065.
Action 21: Walk to plate_2105.
Action 22: Put food_pizza_2065 on plate_2105.
Action 23: Walk to food_hamburger_2057.
Action 24: Grab food_hamburger_2057.
Action 25: Walk to plate_2105.
Action 26: Put food_hamburger_2057 on plate_2105.
Action 27: Walk to microwave_149.
Action 28: Open microwave_149.
Action 29: Walk to food_pizza_2065.
Action 30: Grab food_pizza_2065.
Action 31: Walk to microwave_149.
Action 32: Put food_pizza_2065 into microwave_149.
Action 33: Walk to food_hamburger_2057.
Action 34: Grab food_hamburger_2057.
Action 35: Walk to microwave_149.
Action 36: Put food_hamburger_2057 into microwave_149.
Action 37: Close microwave_149.
Action 38: Switch on microwave_149.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_142_around_dishwasher_143(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate) # Place the food on the plate

behavior heat_in_microwave(food:item, microwave:item):
    body:
        achieve_once inside(food, microwave) # Place the food in the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave to heat the food
        achieve_once open(microwave) # Open the microwave door after heating

behavior put_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table) # Place the plate on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and close_char(char, plate)
        # Select a plate close to the character

        bind pizza: item where:
            is_food_pizza(pizza) and close_char(char, pizza)
        # Select a pizza that is close to the character

        bind hamburger: item where:
            is_food_hamburger(hamburger) and close_char(char, hamburger)
        # Select a hamburger that is close to the character

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and close_char(char, table)
        # Select a table close to the character

        put_on_plate(pizza, plate)
        put_on_plate(hamburger, plate)
        
        heat_in_microwave(pizza, microwave)
        heat_in_microwave(hamburger, microwave)
        
        put_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_142_around_dishwasher_143(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

behavior find_bowl_2095_around_bowl_2097(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2097
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(bowl,bowl_instance)
        else:
            exp(bowl,bowl_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bowl_instance]=True
        close[bowl_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate)

behavior heat_food_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        
        bind microwave: item where:
            is_microwave(microwave)
        bind table: item where:
            is_table(table)
        
        place_food_on_plate(food_pizza, plate)
        place_food_on_plate(food_hamburger, plate)
        heat_food_in_microwave(plate, microwave)
        place_on_table(plate, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate)

behavior heat_food_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        
        bind microwave: item where:
            is_microwave(microwave)
        bind table: item where:
            is_table(table)
        
        place_food_on_plate(food_pizza, plate)
        place_food_on_plate(food_hamburger, plate)
        heat_food_in_microwave(plate, microwave)
        place_on_table(plate, table)

##############################
From agent.py-> find a plan in act()
switchoff_executor(microwave_149)open_executor(microwave_149)grab_executor(food_pizza_2065)walk_executor(plate_2105)put_executor(food_pizza_2065, plate_2105)walk_executor(food_hamburger_2057)grab_executor(food_hamburger_2057)walk_executor(plate_2105)put_executor(food_hamburger_2057, plate_2105)grab_executor(plate_2105)walk_executor(microwave_149)putin_executor(plate_2105, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(table_123)put_executor(plate_2105, table_123)
##############################
From agent.py
switchoff_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned off. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the food_pizza_2065. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
grab_executor(food_pizza_2065)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the food_pizza_2065. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. Grabbing food_pizza_2065 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_pizza_2065, plate_2105)
Robot find: Robot is close to the food_pizza_2065. Robot is close to the plate_2105. Robot is close to the table_127. food_pizza_2065 is close plate_2105. food_pizza_2065 is on plate_2105. food_pizza_2065 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2057)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the microwave_149. 
##############################
From agent.py
grab_executor(food_hamburger_2057)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the microwave_149. Grabbing food_hamburger_2057 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_hamburger_2057, plate_2105)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. Robot is close to the table_127. food_hamburger_2057 is close plate_2105. food_hamburger_2057 is on plate_2105. food_hamburger_2057 released by right hand. 
##############################
From agent.py
grab_executor(plate_2105)
Robot find: Robot is close to the food_hamburger_2057. Robot is close to the plate_2105. Robot is close to the table_127. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
putin_executor(plate_2105, microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. plate_2105 is inside microwave_149. microwave_149 is close plate_2105. plate_2105 is close microwave_149. plate_2105 released by right hand. 
##############################
From agent.py
close_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is closed. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned on. 
##############################
From agent.py
switchoff_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned off. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the plate_2105. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the microwave_149. 
##############################
From agent.py
grab_executor(plate_2105)
Robot find: Robot is close to the plate_2105. Robot is close to the microwave_149. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, Robot is close to the plate_2105. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(plate_2105, table_123)
Robot find: Robot is close to the plate_2105. Robot is close to the mat_114. Robot is close to the table_123. plate_2105 is on table_123. table_123 is close plate_2105. plate_2105 is close table_123. plate_2105 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(kitchen_counter_128)', 'walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(nightstand_373)', 'walk_executor(doorjamb_37)', 'walk_executor(kitchen_counter_129)', 'walk_executor(table_127)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_pizza_2065)', 'walk_executor(plate_2105)', 'put_executor(food_pizza_2065, plate_2105)', 'walk_executor(food_hamburger_2057)', 'grab_executor(food_hamburger_2057)', 'walk_executor(plate_2105)', 'put_executor(food_hamburger_2057, plate_2105)', 'walk_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(food_pizza_2065)', 'grab_executor(food_pizza_2065)', 'walk_executor(microwave_149)', 'putin_executor(food_pizza_2065, microwave_149)', 'walk_executor(food_hamburger_2057)', 'grab_executor(food_hamburger_2057)', 'walk_executor(microwave_149)', 'putin_executor(food_hamburger_2057, microwave_149)', 'close_executor(microwave_149)', 'switchon_executor(microwave_149)', 'switchoff_executor(microwave_149)', 'open_executor(microwave_149)', 'grab_executor(food_pizza_2065)', 'walk_executor(plate_2105)', 'put_executor(food_pizza_2065, plate_2105)', 'walk_executor(food_hamburger_2057)', 'grab_executor(food_hamburger_2057)', 'walk_executor(plate_2105)', 'put_executor(food_hamburger_2057, plate_2105)', 'grab_executor(plate_2105)', 'walk_executor(microwave_149)', 'putin_executor(plate_2105, microwave_149)', 'close_executor(microwave_149)', 'switchon_executor(microwave_149)', 'switchoff_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(plate_2105)', 'grab_executor(plate_2105)', 'walk_executor(table_123)', 'put_executor(plate_2105, table_123)']
Time info:
Time consume: 434 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 0
goal generate times: 10
goal correct times: 0
action_num: 50

Task complete rate:
1
Scene_id: 2
##############################
