From agent.py
Reset goals: The sub-goals are: 
['Cook a pot of fish soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_vegetable_2072_around_kitchen_counter_128(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_kitchen(item: item):
    # Function to check if an item is in the kitchen
    symbol in_kitchen = exists room: item : (is_kitchen(room) and inside(item, room))
    return in_kitchen

behavior cut_ingredients(ingredients: list, cutting_board: item):
    body:
        foreach ingredient: item:
            if ingredient in ingredients:
                achieve_once on(ingredient, cutting_board)
                achieve_once cut(ingredient)

behavior cook_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind vegetable1: item where:
            is_food_vegetable(vegetable1)
        bind vegetable2: item where:
            is_food_vegetable(vegetable2) and vegetable1 = vegetable2
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a stove in the kitchen
        bind stove: item where:
            is_stove(stove) and is_in_kitchen(stove)
        # Select a pot
        bind pot: item where:
            is_pot(pot)
        # Perform actions to cut the fish and vegetables
        cut_ingredients([fish, vegetable1, vegetable2], cutting_board)
        # Note: Water needs to be added before cooking, assume has_water(pot) is achieved somewhere
        achieve has_water(pot)
        # Place everything into the pot and cook it on the stove
        achieve_once inside(fish, pot)
        achieve_once inside(vegetable1, pot)
        achieve_once inside(vegetable2, pot)
        cook_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_vegetable_2072_around_kitchen_counter_129(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_juice_2034_around_fridge_140(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(juice,fridge_instance)
        else:
            exp(juice,fridge_instance)
    eff:
        unknown[juice]=False
        close[juice,fridge_instance]=True
        close[fridge_instance,juice]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cheese_2049_around_fridge_140(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cheese,fridge_instance)
        else:
            exp(food_cheese,fridge_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,fridge_instance]=True
        close[fridge_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ingredients(fish:item, vegetables:item, water:item, pot:item):
    body:
        achieve_once inside(fish, pot) # Add fish inside the pot
        achieve_once inside(vegetables, pot) # Add vegetables inside the pot
        achieve has_water(pot) # Ensure the pot is filled with water

behavior boil_soup(stove:item, pot:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve plugged(stove) # Ensure the stove is plugged in
        achieve is_on(stove) # Turn the stove on to boil the soup

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables
        bind water: item where:
            is_juice(water) or is_milk(water)
        # Select water or equivalent liquid
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        prepare_ingredients(fish, vegetables, water, pot) # Prepare the ingredients in the pot
        boil_soup(stove, pot) # Boil the soup on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once has_water(pot)

behavior add_ingredients_to_pot(fish:item, pot:item):
    body:
        achieve_once inside(fish, pot)

behavior cook_soup_on_stove(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        fill_pot_with_water(pot, sink)
        # Fill the pot with water from the sink
        
        add_ingredients_to_pot(fish, pot)
        # Add fish to the pot
        
        cook_soup_on_stove(pot, stove)
        # Cook the soup on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once has_water(pot)

behavior add_ingredients_to_pot(fish:item, pot:item):
    body:
        achieve_once inside(fish, pot)

behavior cook_soup_on_stove(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        fill_pot_with_water(pot, sink)
        # Fill the pot with water from the sink
        
        add_ingredients_to_pot(fish, pot)
        # Add fish to the pot
        
        cook_soup_on_stove(pot, stove)
        # Cook the soup on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(pot_54, kitchen_counter_128)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(pot_54, kitchen_counter_128)
Fail to find pot_54 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_54, cupboard_130)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(pot_54, cupboard_130)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_fish_2054, fridge_140)
Find food_fish_2054. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(food_fish_2054)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_fish_2054. 
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_fish_2054. Grabbing food_fish_2054 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_fish_2054. 
##############################
From agent.py
putin_executor(food_fish_2054, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_fish_2054. food_fish_2054 is inside pot_54. pot_54 is close food_fish_2054. food_fish_2054 is close pot_54. food_fish_2054 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Fill the pot with water from a sink, as this step is missing. The fish has been added to the pot and the pot is placed on the stove, but it is not filled with water yet.
##############################
From agent.py
Human Instruction: Fill the pot with water from a sink, as this step is missing. The fish has been added to the pot and the pot is placed on the stove, but it is not filled with water yet.

The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for pot_54 around kitchen_counter_128.
Action 3: Walk to cupboard_130.
Action 4: look for pot_54 around cupboard_130.
Action 5: Walk to pot_54.
Action 6: Open pot_54.
Action 7: Grab pot_54.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Walk to fridge_140.
Action 11: Switch off fridge_140.
Action 12: Open fridge_140.
Action 13: look for food_fish_2054 around fridge_140.
Action 14: Walk to faucet_308.
Action 15: Switch off faucet_308.
Action 16: Walk to food_fish_2054.
Action 17: Grab food_fish_2054.
Action 18: Walk to pot_54.
Action 19: Put food_fish_2054 into pot_54.
Action 20: Walk to stove_2090.
Action 21: Switch on stove_2090.
Action 22: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2077_around_washing_machine_2041(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_gloves,washing_machine_instance)
        else:
            exp(clothes_gloves,washing_machine_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,washing_machine_instance]=True
        close[washing_machine_instance,clothes_gloves]=True
    

behavior find_keyboard_2111_around_computer_2110(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select the faucet to fill the pot with water

        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with the fish already added

        achieve_once has_water(pot)
        # Ensure the pot is filled with water

        achieve is_on(stove)
        # Make sure the stove is turned on to cook the soup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2077_around_washing_machine_2041(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_gloves,washing_machine_instance)
        else:
            exp(clothes_gloves,washing_machine_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,washing_machine_instance]=True
        close[washing_machine_instance,clothes_gloves]=True
    

behavior find_keyboard_382_around_computer_2110(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior heat_pot(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)
        # Heat the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot with the fish already placed on the stove
        
        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        # Select the stove where the pot is placed

        fill_pot_with_water(pot)
        heat_pot(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

behavior find_keyboard_382_around_computer_2110(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet to proceed with filling water
        achieve_once open(pot)
        # Open the pot before filling it with water
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2090)
        # Select the pot that is on the stove with ID 2090
        
        bind faucet: item where:
            is_faucet(faucet) and (not is_off(faucet))
        # Select a faucet that is not turned off
        
        fill_pot_with_water(pot, faucet)
        # Fill the pot with water from the faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Add water to the pot from the faucet

behavior heat_soup(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Ensure the pot is on the stove
        achieve is_on(stove) # Turn on the stove to heat the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        bind faucet: item where:
            is_faucet(faucet) and (id[faucet] == 134 or id[faucet] == 308)
        # Select a faucet to fill the pot
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        
        fill_pot_with_water(pot, faucet)
        heat_soup(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Add water to the pot from the faucet

behavior heat_soup(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Ensure the pot is on the stove
        achieve is_on(stove) # Turn on the stove to heat the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        bind faucet: item where:
            is_faucet(faucet) and (id[faucet] == 134 or id[faucet] == 308)
        # Select a faucet to fill the pot
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        
        fill_pot_with_water(pot, faucet)
        heat_soup(pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Fill the pot with water from the faucet before placing it on the stove and switching on the stove for cooking.
##############################
From agent.py
Human Instruction: Fill the pot with water from the faucet before placing it on the stove and switching on the stove for cooking.

The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for pot_54 around kitchen_counter_128.
Action 3: Walk to cupboard_130.
Action 4: look for pot_54 around cupboard_130.
Action 5: Walk to pot_54.
Action 6: Open pot_54.
Action 7: Grab pot_54.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Walk to fridge_140.
Action 11: Switch off fridge_140.
Action 12: Open fridge_140.
Action 13: look for food_fish_2054 around fridge_140.
Action 14: Walk to faucet_308.
Action 15: Switch off faucet_308.
Action 16: Walk to food_fish_2054.
Action 17: Grab food_fish_2054.
Action 18: Walk to pot_54.
Action 19: Put food_fish_2054 into pot_54.
Action 20: Walk to stove_2090.
Action 21: Switch on stove_2090.
Action 22: Put pot_54 on stove_2090.
Action 23: Grab pot_54.
Action 24: Walk to faucet_134.
Action 25: Switch on faucet_134.
Action 26: Switch off faucet_134.
Action 27: Walk to stove_2090.
Action 28: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2077_around_washing_machine_2041(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_gloves,washing_machine_instance)
        else:
            exp(clothes_gloves,washing_machine_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,washing_machine_instance]=True
        close[washing_machine_instance,clothes_gloves]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot to use
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet to use
        bind stove: item where:
            is_stove(stove)
        # Select the stove to use
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        achieve is_on(stove)
        # Ensure the stove is turned on for cooking

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_butter_2018_around_nightstand_262(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==262
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(food_butter,nightstand_instance)
        else:
            exp(food_butter,nightstand_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,nightstand_instance]=True
        close[nightstand_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior cook_fish_soup(pot:item, stove:item):
    body:
        achieve inside(food_fish, pot)
        # Place the fish inside the pot
        achieve inside(pot, stove)
        # Place the pot on the stove for cooking
        achieve is_on(stove)
        # Ensure the stove is on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind food_fish: item where:
            is_food_fish(food_fish)
        # Select fish
        fill_pot_with_water(pot, faucet)
        cook_fish_soup(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior start_stove(stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove

behavior add_fish_to_pot(fish:item, pot:item):
    body:
        achieve_once inside(fish, pot)
        # Add fish to the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish for the soup
        
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_stove(stove)
        add_fish_to_pot(fish, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot(pot: item, water_source: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior cook_on_stove(item: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior put_fish_in_pot(fish: item, pot: item):
    body:
        achieve_once inside(fish, pot)
        # Put the fish into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind fish: item where:
            is_food_fish(fish)

        bind faucet: item where:
            is_faucet(faucet)

        fill_pot(pot, faucet)
        put_fish_in_pot(fish, pot)
        place_pot_on_stove(pot, stove)
        cook_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_bowl_2096_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior cook_fish(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)
        # Place the pot with fish soup on the stove and turn it on for cooking

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        bind food_fish: item where:
            is_food_fish(food_fish) and id[food_fish] == 2054
        bind stove: item where:
            is_stove(stove)
        fill_pot_with_water(pot, faucet)
        # Fill the pot with water
        achieve_once inside(food_fish, pot)
        # Put fish into the pot
        cook_fish(pot, stove)
        # Cook the fish soup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2077_around_washing_machine_2041(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_gloves,washing_machine_instance)
        else:
            exp(clothes_gloves,washing_machine_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,washing_machine_instance]=True
        close[washing_machine_instance,clothes_gloves]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water

behavior cook_fish_soup(pot:item, stove:item):
    body:
        achieve_once inside(food_fish, pot) # Place the fish into the pot
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Ensure the stove is on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        bind food_fish: item where:
            is_food_fish(food_fish)
        fill_with_water(pot, faucet) # Fill the pot with water
        cook_fish_soup(pot, stove) # Cook the fish soup on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "cook a pot of fish soup." ?
Answer: Clean the fish by washing it in a sink. Then cut the fish into pieces. Find a pot and fill it with water. Then put the pot on a stove and turn on the stove. Put the fish in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior clean_fish(fish:item):
    body:
        achieve clean(fish)

behavior cut_fish(fish:item):
    body:
        achieve cut(fish)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve has_water(pot)
        
behavior place_fish_in_pot(fish:item, pot:item):
    body:
        achieve_once inside(fish, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior start_cooking_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
            # Select the fish
        clean_fish(fish)
        cut_fish(fish)
          
        bind pot: item where:
            is_pot(pot)
            # Select the pot
        bind faucet: item where:
            is_faucet(faucet)
            # Select the faucet
        fill_pot_with_water(pot, faucet)

        bind stove: item where:
            is_stove(stove)
            # Select the stove
        place_fish_in_pot(fish, pot)
        place_pot_on_stove(pot, stove)
        start_cooking_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)

behavior cut_fish(fish:item):
    body:
        achieve_once cut(fish)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior cook_fish_soup(pot:item, fish:item, stove:item):
    body:
        achieve inside(fish, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            
        bind fish: item where:
            is_food_fish(fish)
            
        bind faucet: item where:
            is_faucet(faucet)
            
        bind stove: item where:
            is_stove(stove)
            
        wash_fish(fish)
        cut_fish(fish)
        fill_pot_with_water(pot, faucet)
        cook_fish_soup(pot, fish, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)

behavior cut_fish(fish:item):
    body:
        achieve_once cut(fish)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior cook_fish_soup(pot:item, fish:item, stove:item):
    body:
        achieve inside(fish, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            
        bind fish: item where:
            is_food_fish(fish)
            
        bind faucet: item where:
            is_faucet(faucet)
            
        bind stove: item where:
            is_stove(stove)
            
        wash_fish(fish)
        cut_fish(fish)
        fill_pot_with_water(pot, faucet)
        cook_fish_soup(pot, fish, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_fish_2054)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_fish_2054, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_fish_2054)cut_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)
##############################
From agent.py
walk_executor(food_fish_2054)
Robot find: Robot is close to the pot_54. Robot is close to the food_fish_2054. 
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the pot_54. Robot is close to the food_fish_2054. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2054)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. food_fish_2054 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_fish_2054. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_fish_2054, cutting_board_2080)
Robot find: Robot is close to the food_fish_2054. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. cutting_board_2080 is close food_fish_2054. food_fish_2054 is close cutting_board_2080. food_fish_2054 is on cutting_board_2080. food_fish_2054 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(walllamp_289)exp(knife_2036, walllamp_289)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_fish_2054)cut_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)
##############################
From agent.py
walk_executor(walllamp_289)
Robot find: towel_rack_300, Robot is close to the walllamp_289. 
##############################
From agent.py
exp(knife_2036, walllamp_289)
Fail to find knife_2036 around walllamp_289. 
##############################
From agent.py-> find a plan in act()
walk_executor(doorjamb_39)exp(knife_2036, doorjamb_39)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_fish_2054)cut_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)
##############################
From agent.py
walk_executor(doorjamb_39)
Robot find: drawing_118, Robot is close to the doorjamb_39. 
##############################
From agent.py
exp(knife_2036, doorjamb_39)
Fail to find knife_2036 around doorjamb_39. 
##############################
From agent.py-> find a plan in act()
walk_executor(photoframe_246)exp(knife_2036, photoframe_246)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_fish_2054)cut_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)
##############################
From agent.py
walk_executor(photoframe_246)
Robot find: drawing_238, chair_263, mat_237, Robot is close to the bookshelf_260. 
##############################
From agent.py
exp(knife_2036, photoframe_246)
Fail to find knife_2036 around photoframe_246. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_2110)exp(knife_2036, computer_2110)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_fish_2054)cut_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)
##############################
From agent.py
walk_executor(computer_2110)
Robot find: dvd_player_2000, mouse_2112, chair_2119, keyboard_2111, pillow_195, laser_pointer_2025, mat_201, oil_2005, drawing_196, Robot is close to the table_193. Robot is close to the computer_2110. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: Go to dining_room_1 and locate dishwasher_143. Knife_2036 is inside dishwasher_143. Look carefully inside the dishwasher to find and retrieve knife_2036.
Re-decompose: None

##############################
From agent.py
Human Instruction: Fill the pot with water from the faucet before placing it on the stove and switching on the stove for cooking.
Go to dining_room_1 and locate dishwasher_143. Knife_2036 is inside dishwasher_143. Look carefully inside the dishwasher to find and retrieve knife_2036.

Human Guidance: Clean the fish by washing it in a sink. Then cut the fish into pieces. Find a pot and fill it with water. Then put the pot on a stove and turn on the stove. Put the fish in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for pot_54 around kitchen_counter_128.
Action 3: Walk to cupboard_130.
Action 4: look for pot_54 around cupboard_130.
Action 5: Walk to pot_54.
Action 6: Open pot_54.
Action 7: Grab pot_54.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Walk to fridge_140.
Action 11: Switch off fridge_140.
Action 12: Open fridge_140.
Action 13: look for food_fish_2054 around fridge_140.
Action 14: Walk to faucet_308.
Action 15: Switch off faucet_308.
Action 16: Walk to food_fish_2054.
Action 17: Grab food_fish_2054.
Action 18: Walk to pot_54.
Action 19: Put food_fish_2054 into pot_54.
Action 20: Walk to stove_2090.
Action 21: Switch on stove_2090.
Action 22: Put pot_54 on stove_2090.
Action 23: Grab pot_54.
Action 24: Walk to faucet_134.
Action 25: Switch on faucet_134.
Action 26: Switch off faucet_134.
Action 27: Walk to stove_2090.
Action 28: Put pot_54 on stove_2090.
Action 29: Walk to food_fish_2054.
Action 30: Grab food_fish_2054.
Action 31: Walk to faucet_134.
Action 32: Switch on faucet_134.
Action 33: Wash food_fish_2054.
Action 34: Switch off faucet_134.
Action 35: Walk to cutting_board_2080.
Action 36: Put food_fish_2054 on cutting_board_2080.
Action 37: Walk to knifeblock_52.
Action 38: look for knife_2036 around knifeblock_52.
Action 39: Walk to walllamp_289.
Action 40: look for knife_2036 around walllamp_289.
Action 41: Walk to doorjamb_39.
Action 42: look for knife_2036 around doorjamb_39.
Action 43: Walk to photoframe_246.
Action 44: look for knife_2036 around photoframe_246.
Action 45: Walk to computer_2110.

##############################
From agent.py
exp(knife_2036, computer_2110)
Fail to find knife_2036 around computer_2110. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_fish_2054)cut_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2036)walk_executor(food_fish_2054)cut_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_fish_2054)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_fish_2054. 
##############################
From agent.py
cut_executor(food_fish_2054)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_fish_2054. 
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_fish_2054. Grabbing food_fish_2054 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the knife_2036. Robot is close to the food_fish_2054. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_fish_2054, pot_54)
Robot find: Robot is close to the knife_2036. Robot is close to the food_fish_2054. Robot is close to the stove_2090. Robot is close to the pot_54. food_fish_2054 is inside pot_54. pot_54 is close food_fish_2054. food_fish_2054 is close pot_54. food_fish_2054 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the pot with water before it can complete the task of cooking the fish soup. Ensure the pot is filled with water by fetching water from a faucet.
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(kitchen_counter_128)', 'walk_executor(cupboard_130)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(food_fish_2054)', 'grab_executor(food_fish_2054)', 'walk_executor(pot_54)', 'putin_executor(food_fish_2054, pot_54)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(food_fish_2054)', 'grab_executor(food_fish_2054)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'wash_executor(food_fish_2054)', 'switchoff_executor(faucet_134)', 'walk_executor(cutting_board_2080)', 'put_executor(food_fish_2054, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(walllamp_289)', 'walk_executor(doorjamb_39)', 'walk_executor(photoframe_246)', 'walk_executor(computer_2110)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'grab_executor(knife_2036)', 'walk_executor(food_fish_2054)', 'cut_executor(food_fish_2054)', 'grab_executor(food_fish_2054)', 'walk_executor(pot_54)', 'putin_executor(food_fish_2054, pot_54)']
Time info:
Time consume: 391 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 0
goal generate times: 15
goal correct times: 0
action_num: 46

Task complete rate:
1
Scene_id: 2
##############################
