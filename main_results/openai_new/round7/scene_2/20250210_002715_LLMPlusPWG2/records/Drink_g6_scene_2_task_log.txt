From agent.py
Reset goals: The sub-goals are: 
['Make a cup of lemon water with additional sugar.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2070_around_kitchen_counter_128(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_lemon_2061_around_kitchen_counter_128(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_cup_2087_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_and_prepare_ingredients(cup:item, lemon:item, sugar:item, water_source:item):
    body:
        observe(lemon, "Check if its suitable for creating lemon water")
        observe(sugar, "Check if its the right type for lemon water")
        achieve_once has_water(cup)
        # Fill the cup with water

behavior make_lemon_water(cup:item, lemon:item, sugar:item):
    body:
        achieve_once cut(lemon)
        # Cut the lemon to extract juice
        achieve_once inside(lemon, cup)
        # Add lemon juice to the water
        achieve_once inside(sugar, cup)
        # Add sugar to the lemon water

behavior stir_lemon_water(cup:item):
    body:
        achieve_once is_on(spoon) and inside(spoon, cup)
        # Stir the lemon water to mix all ingredients

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select some sugar
        bind water_source: item where:
            is_sink(water_source) or is_faucet(water_source)
        # Select a water source (sink or faucet)
        
        observe_and_prepare_ingredients(cup, lemon, sugar, water_source)
        # Observe the ingredients and prepare the cup with water
        make_lemon_water(cup, lemon, sugar)
        # Make lemon water by cutting lemon, and adding lemon and sugar into the cup
        stir_lemon_water(cup)
        # Stir the lemon water in the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2070_around_kitchen_counter_128(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_lemon_2061_around_kitchen_counter_128(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_cup_2087_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior squeeze_lemon_and_make_lemon_water(cup:item, lemon:item, water_source:item, sugar:item):
    body:
        bind water_faucet: item where:
            is_faucet(water_faucet) and on(water_faucet, water_source)
        achieve_once cut(lemon) # Cut the lemon to prepare it for squeezing
        achieve_once inside(lemon, cup) # Squeeze the lemon juice into the cup
        achieve_once has_water(cup) # Make sure the cup has water
        achieve_once inside(sugar, cup) # Add sugar into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind water_source: item where:
            is_sink(water_source) or is_water_container(water_source)
        bind sugar: item where:
            is_food_sugar(sugar)
        squeeze_lemon_and_make_lemon_water(cup, lemon, water_source, sugar)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2070_around_kitchen_counter_128(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_lemon_2061_around_kitchen_counter_128(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_cup_2088_around_kitchen_counter_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_lemon(lemon:item, question:string):
    body:
        observe(lemon, "question")

behavior cut_lemon(lemon:item):
    body:
        achieve_once cut(lemon)

behavior squeeze_lemon(lemon:item, cup:item):
    body:
        achieve_once inside(lemon, cup)

behavior add_sugar(sugar:item, cup:item):
    body:
        achieve_once inside(sugar, cup)

behavior add_water(cup:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        observe_lemon(lemon, Check if the lemon is fresh)
        cut_lemon(lemon)
        squeeze_lemon(lemon, cup)
        add_sugar(sugar, cup)
        add_water(cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2070_around_kitchen_counter_128(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_lemon_2061_around_kitchen_counter_128(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_cup_2089_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon(lemon:item):
    body:
        achieve_once cut(lemon)
        # Assume cutting before squeezing lemon
        achieve_once is_sink(x) # Placeholder for defining a state where squeezing occurs

behavior add_sugar(water:item, sugar:item):
    body:
        achieve_once inside(sugar, water)
        # Add sugar to the water

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        bind sugar: item where:
            is_food_sugar(sugar)
        bind cup: item where:
            is_cup(cup)
        # Select cup, lemon, and sugar
        
        achieve_once has_water(cup)
        # Fill the cup with water
        
        squeeze_lemon(lemon)
        # Squeeze lemon into the water
        
        add_sugar(cup, sugar)
        # Add sugar to lemon water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2070_around_kitchen_counter_128(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_lemon_2061_around_kitchen_counter_128(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_cup_2006_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_items_for_lemon_water(lemon:item, sugar:item, cup:item):
    body:
        achieve_once cut(lemon)
        # Cut the lemon
        achieve_once inside(sugar, cup)
        # Place the sugar inside the cup

behavior make_lemon_water_with_sugar(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Fill the cup with water

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select lemon
        
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill water
        
        observe_items_for_lemon_water(lemon, sugar, cup)
        make_lemon_water_with_sugar(cup, faucet)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2070_around_kitchen_counter_128(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_lemon_2061_around_kitchen_counter_128(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_cup_2088_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon(lemon:item):
    body:
        achieve_once cut(lemon)
        # Cut the lemon to prepare it for squeezing
        achieve_once inhand(lemon)
        # Hold the lemon for squeezing
        squeeze(lemon)
        # Squeeze the lemon

behavior add_water(cup:item):
    body:
        achieve has_water(cup)
        # Fill the cup with water

behavior add_sugar(cup:item, sugar:item):
    body:
        achieve_once inside(sugar, cup)
        # Put sugar inside the cup

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind cup: item where:
            is_cup(cup)
        # Select a cup for the drink

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar to add to the drink

        squeeze_lemon(lemon)
        # Squeeze the lemon

        add_water(cup)
        # Add water to the cup

        add_sugar(cup, sugar)
        # Add sugar to the cup

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of lemon water with additional sugar." ?
Answer: Clean a lemon and cut it into pieces. Find a cup and fill it with water. Then put the lemon pieces in the cup. Put sugar to the cup.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2070_around_kitchen_counter_128(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_lemon_2061_around_kitchen_counter_128(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_cup_2006_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior clean_lemon(lemon:item):
    body:
        achieve_once clean(lemon)

behavior cut_lemon(lemon:item):
    body:
        achieve_once cut(lemon)

behavior squeeze_lemon(lemon:item, cup:item):
    body:
        achieve_once inside(lemon, cup)

behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior add_sugar(cup:item, sugar:item):
    body:
        achieve_once inside(sugar, cup)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        
        bind cup: item where:
            is_cup(cup)
        
        bind sugar: item where:
            is_food_sugar(sugar)
        
        clean_lemon(lemon)
        cut_lemon(lemon)
        fill_cup_with_water(cup)
        squeeze_lemon(lemon, cup)
        add_sugar(cup, sugar)
#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(food_lemon_2061, kitchen_counter_128)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)wash_executor(food_lemon_2061)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)walk_executor(kitchen_counter_132)put_executor(cup_2087, kitchen_counter_132)switchoff_executor(faucet_134)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cup_2087)putin_executor(food_lemon_2061, cup_2087)walk_executor(kitchen_counter_128)exp(food_sugar_2070, kitchen_counter_128)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(cup_2087)putin_executor(food_sugar_2070, cup_2087)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_lemon_2061, kitchen_counter_128)
Fail to find food_lemon_2061 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_lemon_2061, cupboard_130)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)wash_executor(food_lemon_2061)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)walk_executor(kitchen_counter_132)put_executor(cup_2087, kitchen_counter_132)switchoff_executor(faucet_134)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cup_2087)putin_executor(food_lemon_2061, cup_2087)walk_executor(cupboard_130)exp(food_sugar_2070, cupboard_130)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(cup_2087)putin_executor(food_sugar_2070, cup_2087)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_lemon_2061, cupboard_130)
Fail to find food_lemon_2061 around cupboard_130. 
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_128)', 'walk_executor(cupboard_130)']
Time info:
Time consume: 204 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 7
goal correct times: 0
action_num: 2

Task complete rate:
Keystate: k1 - Requires: 15 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
