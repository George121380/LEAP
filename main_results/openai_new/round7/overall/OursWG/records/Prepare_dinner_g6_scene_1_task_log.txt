From agent.py
Reset goals: The sub-goals are: 
['1. Find the pizza and hamburger.', '2. Put the pizza and hamburger on a plate.', '3. Heat the pizza and hamburger in the microwave.', '4. Put the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2096_around_kitchen_counter_122(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_food_pizza_2106_around_kitchen_counter_122(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
def is_pizza_or_hamburger(item:item):
    # Function to determine if an item is a pizza or hamburger
    return is_food_pizza(item) or is_food_hamburger(item)

behavior __goal__():
    body:
        if exists item: item : (is_pizza_or_hamburger(item) and not visited(item)):
            # If we have already found an unvisited pizza or hamburger, move close to it
            bind item: item where:
                is_pizza_or_hamburger(item) and not visited(item)
            achieve close_char(char, item)
        else:
            # Check all items to find pizza or hamburger if not found initially
            foreach item: item:
                if is_pizza_or_hamburger(item) and not visited(item):
                    observe(item, "Find the pizza or hamburger")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_pizza_or_hamburger(item:item):
    # Function to determine if an item is a pizza or hamburger
    return is_food_pizza(item) or is_food_hamburger(item)

behavior __goal__():
    body:
        if exists item: item : (is_pizza_or_hamburger(item) and not visited(item)):
            # If we have already found an unvisited pizza or hamburger, move close to it
            bind item: item where:
                is_pizza_or_hamburger(item) and not visited(item)
            achieve close_char(char, item)
        else:
            # Check all items to find pizza or hamburger if not found initially
            foreach item: item:
                if is_pizza_or_hamburger(item) and not visited(item):
                    observe(item, "Find the pizza or hamburger")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_hamburger_2096, kitchen_counter_122)walk_executor(food_hamburger_2096)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_hamburger_2096, kitchen_counter_122)
Fail to find food_hamburger_2096 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_hamburger_2096, fridge_126)walk_executor(food_hamburger_2096)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_hamburger_2096, fridge_126)
Find food_hamburger_2096. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the pizza and hamburger on a plate.', '2. Heat the plate with the pizza and hamburger in the microwave.', '3. Put the heated plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_cupboard_117(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_food_food_2001_around_cupboard_117(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

behavior find_plate_2152_around_cupboard_117(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior place_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate) # Place the food on the plate

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger

        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza
        
        place_food_on_plate(hamburger, plate)
        place_food_on_plate(pizza, plate)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior place_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate) # Place the food on the plate

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger

        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza
        
        place_food_on_plate(hamburger, plate)
        place_food_on_plate(pizza, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(plate_2152, cupboard_117)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(plate_2152, cupboard_117)
Fail to find plate_2152 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(plate_2152, cupboard_118)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(plate_2152, cupboard_118)
Fail to find plate_2152 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)exp(plate_2152, fryingpan_2154)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(plate_2152, fryingpan_2154)
Fail to find plate_2152 around fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(walllamp_34)exp(plate_2152, walllamp_34)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)
##############################
From agent.py
walk_executor(walllamp_34)
Robot find: drawing_33, Robot is close to the walllamp_34. 
##############################
From agent.py
exp(plate_2152, walllamp_34)
Fail to find plate_2152 around walllamp_34. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)open_executor(microwave_135)exp(plate_2152, microwave_135)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_2152 ?
Answer: Go to the dining room (dining_room_41). There, you will find the kitchen counter (kitchen_counter_119). The target item, plate_2152, is on the kitchen counter.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining room (dining_room_41). There, you will find the kitchen counter (kitchen_counter_119). The target item, plate_2152, is on the kitchen counter.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for food_hamburger_2096 around kitchen_counter_122.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_hamburger_2096 around fridge_126.
Action 7: Walk to cupboard_117.
Action 8: look for plate_2152 around cupboard_117.
Action 9: Walk to cupboard_118.
Action 10: Open cupboard_118.
Action 11: look for plate_2152 around cupboard_118.
Action 12: Walk to fryingpan_2154.
Action 13: look for plate_2152 around fryingpan_2154.
Action 14: Walk to walllamp_34.
Action 15: look for plate_2152 around walllamp_34.
Action 16: Walk to microwave_135.
Action 17: Open microwave_135.

##############################
From agent.py
exp(plate_2152, microwave_135)
Fail to find plate_2152 around microwave_135. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(plate_2152, kitchen_counter_119)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(plate_2152, kitchen_counter_119)
Find plate_2152. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)
##############################
From agent.py
walk_executor(food_hamburger_2096)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_hamburger_2096)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the fridge_126. Grabbing food_hamburger_2096 by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_hamburger_2096, plate_2152)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. food_hamburger_2096 is close plate_2152. plate_2152 is close food_hamburger_2096. food_hamburger_2096 is on plate_2152. food_hamburger_2096 released by right hand. 
##############################
From agent.py
walk_executor(food_pizza_2106)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_pizza_2106)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the fridge_126. Grabbing food_pizza_2106 by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_pizza_2106, plate_2152)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. plate_2152 is close food_pizza_2106. food_pizza_2106 is close plate_2152. food_pizza_2106 is on plate_2152. food_pizza_2106 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def in_kitchen(table: item):
    symbol in_kitchen = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_kitchen

behavior heat_plate_with_food(plate: item, microwave: item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with food inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2152
        # Select the plate with ID 2152

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_plate_with_food(plate, microwave)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def in_kitchen(table: item):
    symbol in_kitchen = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_kitchen

behavior heat_plate_with_food(plate: item, microwave: item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with food inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2152
        # Select the plate with ID 2152

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_plate_with_food(plate, microwave)

##############################
From agent.py-> find a plan in act()
grab_executor(plate_2152)walk_executor(microwave_135)putin_executor(plate_2152, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
grab_executor(plate_2152)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the plate_2152. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
putin_executor(plate_2152, microwave_135)
Robot find: Robot is close to the plate_2152. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is close plate_2152. plate_2152 is inside microwave_135. plate_2152 is close microwave_135. plate_2152 released by right hand. 
##############################
From agent.py
close_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is closed. 
##############################
From agent.py
switchon_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_dishwasher_129(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(milk,dishwasher_instance)
        else:
            exp(milk,dishwasher_instance)
    eff:
        unknown[milk]=False
        close[milk,dishwasher_instance]=True
        close[dishwasher_instance,milk]=True
    

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior relocate_plate_to_dining_room_table(plate: item, table: item):
    body:
        achieve_once on(plate, table) # Place the heated plate on the dining room table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        bind plate: item where:
            is_plate(plate) and id[plate] == 2152
        # Select the heated plate

        achieve_once inhand(plate) # Temporarily hold the plate
        relocate_plate_to_dining_room_table(plate, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior relocate_plate_to_dining_room_table(plate: item, table: item):
    body:
        achieve_once on(plate, table) # Place the heated plate on the dining room table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        bind plate: item where:
            is_plate(plate) and id[plate] == 2152
        # Select the heated plate

        achieve_once inhand(plate) # Temporarily hold the plate
        relocate_plate_to_dining_room_table(plate, table)

##############################
From agent.py-> find a plan in act()
switchoff_executor(microwave_135)open_executor(microwave_135)grab_executor(plate_2152)walk_executor(table_114)put_executor(plate_2152, table_114)
##############################
From agent.py
switchoff_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is turned off. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: Robot is close to the plate_2152. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
grab_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the plate_2152. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(plate_2152, table_114)
Robot find: Robot is close to the plate_2152. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close plate_2152. plate_2152 is close table_114. plate_2152 is on table_114. plate_2152 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fryingpan_2154)', 'walk_executor(walllamp_34)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(kitchen_counter_119)', 'walk_executor(food_hamburger_2096)', 'grab_executor(food_hamburger_2096)', 'walk_executor(plate_2152)', 'put_executor(food_hamburger_2096, plate_2152)', 'walk_executor(food_pizza_2106)', 'grab_executor(food_pizza_2106)', 'walk_executor(plate_2152)', 'put_executor(food_pizza_2106, plate_2152)', 'grab_executor(plate_2152)', 'walk_executor(microwave_135)', 'putin_executor(plate_2152, microwave_135)', 'close_executor(microwave_135)', 'switchon_executor(microwave_135)', 'switchoff_executor(microwave_135)', 'open_executor(microwave_135)', 'grab_executor(plate_2152)', 'walk_executor(table_114)', 'put_executor(plate_2152, table_114)']
Time info:
Time consume: 174 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 19
goal generate times: 4
goal correct times: 0
action_num: 30

Task complete rate:
1
Scene_id: 1
##############################
