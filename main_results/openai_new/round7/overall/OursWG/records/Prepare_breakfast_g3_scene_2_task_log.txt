From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_salt_2068_around_cupboard_130(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

#exp_behavior_end

#goal_representation
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove
#goal_representation_end

##############################
From agent.py->reset_goal
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_2093, cupboard_130)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(pot_2093, cupboard_130)
Fail to find pot_2093 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_54)putin_executor(food_egg_2053, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_54)putin_executor(food_egg_2053, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_egg_2053. 
##############################
From agent.py
putin_executor(food_egg_2053, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_egg_2053. food_egg_2053 is close pot_54. pot_54 is close food_egg_2053. food_egg_2053 is inside pot_54. food_egg_2053 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Add water to the pot to meet the goal of having water in the pot.
##############################
From agent.py
Human Instruction: Add water to the pot to meet the goal of having water in the pot.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to fridge_140.
Action 9: Switch off fridge_140.
Action 10: Open fridge_140.
Action 11: look for food_egg_2053 around fridge_140.
Action 12: Walk to faucet_308.
Action 13: Switch off faucet_308.
Action 14: Walk to food_egg_2053.
Action 15: Grab food_egg_2053.
Action 16: Walk to pot_54.
Action 17: Put food_egg_2053 into pot_54.
Action 18: Walk to stove_2090.
Action 19: Put pot_54 on stove_2090.
Action 20: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Add water to the pot before attempting to boil the egg.
##############################
From agent.py
Human Instruction: Add water to the pot before attempting to boil the egg.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to fridge_140.
Action 9: Switch off fridge_140.
Action 10: Open fridge_140.
Action 11: look for food_egg_2053 around fridge_140.
Action 12: Walk to faucet_308.
Action 13: Switch off faucet_308.
Action 14: Walk to food_egg_2053.
Action 15: Grab food_egg_2053.
Action 16: Walk to pot_54.
Action 17: Put food_egg_2053 into pot_54.
Action 18: Walk to stove_2090.
Action 19: Put pot_54 on stove_2090.
Action 20: Switch on stove_2090.
Action 21: Grab pot_54.
Action 22: Walk to faucet_134.
Action 23: Switch on faucet_134.
Action 24: Switch off faucet_134.
Action 25: Walk to stove_2090.
Action 26: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2095_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_check_2033_around_wallshelf_187(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(check,wallshelf_instance)
        else:
            exp(check,wallshelf_instance)
    eff:
        unknown[check]=False
        close[check,wallshelf_instance]=True
        close[wallshelf_instance,check]=True
    

behavior find_oil_2102_around_wallshelf_301(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil the egg." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_wallshelf_301(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_onion,wallshelf_instance)
        else:
            exp(food_onion,wallshelf_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,wallshelf_instance]=True
        close[wallshelf_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the egg by filling the pot with water, putting the pot on the stove, turning on the stove, and placing the egg in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_368_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, pot)
        # Select a faucet close to the pot

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_egg(egg, pot, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil the egg by filling the pot with water, putting the pot on the stove, turning on the stove, and placing the egg in the pot." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_check_2033_around_washing_machine_2041(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(check,washing_machine_instance)
        else:
            exp(check,washing_machine_instance)
    eff:
        unknown[check]=False
        close[check,washing_machine_instance]=True
        close[washing_machine_instance,check]=True
    

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_wallshelf_301(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water and put it on the stove.', '2. Turn on the stove and put the egg in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_195_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_check_2033_around_wallshelf_301(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(check,wallshelf_instance)
        else:
            exp(check,wallshelf_instance)
    eff:
        unknown[check]=False
        close[check,wallshelf_instance]=True
        close[wallshelf_instance,check]=True
    

behavior find_clothes_jacket_2078_around_basket_for_clothes_2040(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_jacket,basket_for_clothes_instance)
        else:
            exp(clothes_jacket,basket_for_clothes_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_and_place_pot_on_stove(pot:item, faucet:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, pot)
        # Select a faucet close to the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_and_place_pot_on_stove(pot, faucet, stove)
        # Fill the pot with water and place it on the stove

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_195_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_check_2033_around_washing_machine_2041(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(check,washing_machine_instance)
        else:
            exp(check,washing_machine_instance)
    eff:
        unknown[check]=False
        close[check,washing_machine_instance]=True
        close[washing_machine_instance,check]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water_and_place_on_stove(pot:item, faucet:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for the task

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet to fill water

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water_and_place_on_stove(pot, faucet, stove)
        # Fill the pot with water and place it on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, pot)
        # Select the faucet close to the pot

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
 
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. fill the pot with water and put it on the stove." ?
Answer: Fill the pot with water. Put the pot on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_370_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_check_2033_around_tvstand_186(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(check,tvstand_instance)
        else:
            exp(check,tvstand_instance)
    eff:
        unknown[check]=False
        close[check,tvstand_instance]=True
        close[tvstand_instance,check]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_water_in_pot(pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_water_in_pot(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_239_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_check_2033_around_tvstand_186(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(check,tvstand_instance)
        else:
            exp(check,tvstand_instance)
    eff:
        unknown[check]=False
        close[check,tvstand_instance]=True
        close[tvstand_instance,check]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water_and_place_on_stove(pot: item, stove: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water_and_place_on_stove(pot, stove, faucet)
        # Fill the pot with water and place it on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_check_2033_around_washing_machine_2041(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(check,washing_machine_instance)
        else:
            exp(check,washing_machine_instance)
    eff:
        unknown[check]=False
        close[check,washing_machine_instance]=True
        close[washing_machine_instance,check]=True
    

behavior find_pillow_370_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot with water
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select pot with ID 54

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet close to the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        place_pot_on_stove(pot, stove)
        # Put pot on stove

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot still needs to be filled with water. You should ensure the pot contains water before moving on to the next sub-task.
##############################
From agent.py
Human Instruction: The pot still needs to be filled with water. You should ensure the pot contains water before moving on to the next sub-task.

Human Guidance: Fill the pot with water. Put the pot on the stove.
The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to fridge_140.
Action 9: Switch off fridge_140.
Action 10: Open fridge_140.
Action 11: look for food_egg_2053 around fridge_140.
Action 12: Walk to faucet_308.
Action 13: Switch off faucet_308.
Action 14: Walk to food_egg_2053.
Action 15: Grab food_egg_2053.
Action 16: Walk to pot_54.
Action 17: Put food_egg_2053 into pot_54.
Action 18: Walk to stove_2090.
Action 19: Put pot_54 on stove_2090.
Action 20: Switch on stove_2090.
Action 21: Grab pot_54.
Action 22: Walk to faucet_134.
Action 23: Switch on faucet_134.
Action 24: Switch off faucet_134.
Action 25: Walk to stove_2090.
Action 26: Put pot_54 on stove_2090.
Action 27: Walk to faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_368_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_check_2033_around_sink_133(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(check,sink_instance)
        else:
            exp(check,sink_instance)
    eff:
        unknown[check]=False
        close[check,sink_instance]=True
        close[sink_instance,check]=True
    

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        put_pot_on_stove(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_370_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_check_2033_around_sink_133(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(check,sink_instance)
        else:
            exp(check,sink_instance)
    eff:
        unknown[check]=False
        close[check,sink_instance]=True
        close[sink_instance,check]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water_and_place_on_stove(pot:item, faucet:item, stove:item):
    body:
        achieve_once close_char(char, faucet) # Approach the faucet
        achieve has_water(pot) # Fill the pot with water
        achieve_once on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet close to the stove
        
        fill_pot_with_water_and_place_on_stove(pot, faucet, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_195_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_check_2033_around_sink_133(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(check,sink_instance)
        else:
            exp(check,sink_instance)
    eff:
        unknown[check]=False
        close[check,sink_instance]=True
        close[sink_instance,check]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Move close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Put the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, faucet)
        put_pot_on_stove(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Fill the pot with water, put it on the stove, and boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_370_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_check_2033_around_washing_machine_2041(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(check,washing_machine_instance)
        else:
            exp(check,washing_machine_instance)
    eff:
        unknown[check]=False
        close[check,washing_machine_instance]=True
        close[washing_machine_instance,check]=True
    

behavior find_novel_2010_around_bookshelf_188(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove_and_boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove_and_boil_egg(pot, stove, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_239_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select the pot
            
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        fill_pot_with_water(pot, faucet)
        # Fill the pot with water from the faucet

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_195_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_check_2033_around_doorjamb_285(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==285
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(check,doorjamb_instance)
        else:
            exp(check,doorjamb_instance)
    eff:
        unknown[check]=False
        close[check,doorjamb_instance]=True
        close[doorjamb_instance,check]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select a pot that needs water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water from faucet

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select a pot that needs water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water from faucet

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        boil_egg(egg, pot, stove)
        # Boil the egg in the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the pot_54. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the pot_2093. 
##############################
From agent.py
putin_executor(food_egg_2053, pot_2093)
Robot find: Robot is close to the food_egg_2053. Robot is close to the stove_2090. Robot is close to the pot_2093. food_egg_2053 is close pot_2093. pot_2093 is close food_egg_2053. food_egg_2053 is inside pot_2093. food_egg_2053 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water before proceeding. Ensure that the pot contains water.
##############################
From agent.py
Human Instruction: The pot needs to be filled with water before proceeding. Ensure that the pot contains water.

Human Guidance: Fill the pot with water. Put the pot on the stove.
The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to fridge_140.
Action 9: Switch off fridge_140.
Action 10: Open fridge_140.
Action 11: look for food_egg_2053 around fridge_140.
Action 12: Walk to faucet_308.
Action 13: Switch off faucet_308.
Action 14: Walk to food_egg_2053.
Action 15: Grab food_egg_2053.
Action 16: Walk to pot_54.
Action 17: Put food_egg_2053 into pot_54.
Action 18: Walk to stove_2090.
Action 19: Put pot_54 on stove_2090.
Action 20: Switch on stove_2090.
Action 21: Grab pot_54.
Action 22: Walk to faucet_134.
Action 23: Switch on faucet_134.
Action 24: Switch off faucet_134.
Action 25: Walk to stove_2090.
Action 26: Put pot_54 on stove_2090.
Action 27: Walk to faucet_134.
Action 28: Walk to pot_2093.
Action 29: Open pot_2093.
Action 30: Grab pot_2093.
Action 31: Walk to faucet_134.
Action 32: Switch on faucet_134.
Action 33: Switch off faucet_134.
Action 34: Walk to stove_2090.
Action 35: Put pot_2093 on stove_2090.
Action 36: Walk to food_egg_2053.
Action 37: Grab food_egg_2053.
Action 38: Walk to pot_2093.
Action 39: Put food_egg_2053 into pot_2093.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select a specific pot

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select a specific faucet

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select a specific stove

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2053
        # Select a specific egg

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_egg(egg, pot, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select a specific pot

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select a specific faucet

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select a specific stove

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2053
        # Select a specific egg

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_egg(egg, pot, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil egg.
Action History:
['walk_executor(cupboard_130)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(pot_54)', 'putin_executor(food_egg_2053, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(faucet_134)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(pot_2093)', 'putin_executor(food_egg_2053, pot_2093)', 'walk_executor(faucet_134)']
Time info:
Time consume: 418 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 179
goal generate times: 27
goal correct times: 0
action_num: 38

Task complete rate:
1
Scene_id: 2
##############################
