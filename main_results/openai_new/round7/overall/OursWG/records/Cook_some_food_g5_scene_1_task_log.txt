From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the sliced bananas in the pan until golden brown.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_kitchen_counter_122(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

behavior find_knife_2035_around_kitchen_counter_122(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board) # Place the banana on the cutting board
        achieve cut(banana) # Peel and slice the banana

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_and_slice_bananas(banana, cutting_board, knife)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board) # Place the banana on the cutting board
        achieve cut(banana) # Peel and slice the banana

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_and_slice_bananas(banana, cutting_board, knife)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_banana_2083, kitchen_counter_122)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(kitchen_counter_122)exp(knife_2122, kitchen_counter_122)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_banana_2083, kitchen_counter_122)
Fail to find food_banana_2083 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_banana_2083, kitchen_counter_123)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_banana_2083, kitchen_counter_123)
Fail to find food_banana_2083 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_banana_2083, kitchen_counter_119)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_banana_2083, kitchen_counter_119)
Fail to find food_banana_2083 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_banana_2083, fridge_126)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_banana_2083, fridge_126)
Find food_banana_2083. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_banana_2083 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_banana_2083, cutting_board_2123)
Robot find: Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_banana_2083. food_banana_2083 is close cutting_board_2123. food_banana_2083 is on cutting_board_2123. food_banana_2083 released by right hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
cut_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_pot_78_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_ice_2024_around_table_114(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(ice,table_instance)
        else:
            exp(ice,table_instance)
    eff:
        unknown[ice]=False
        close[ice,table_instance]=True
        close[table_instance,ice]=True
    

#exp_behavior_end

#goal_representation
behavior heat_oil_in_pan(oil:item, pan:item, stove:item):
    body:
        achieve_once inside(oil, pan)
        # Pour oil into the frying pan
        achieve_once on(pan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the oil

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_oil_in_pan(oil, pan, stove)
        # Heat oil in the frying pan on the stove
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior heat_oil_in_pan(oil:item, pan:item, stove:item):
    body:
        achieve_once inside(oil, pan)
        # Pour oil into the frying pan
        achieve_once on(pan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the oil

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_oil_in_pan(oil, pan, stove)
        # Heat oil in the frying pan on the stove
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. oil_2149 is inside fryingpan_2154. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. Grabbing fryingpan_2154 by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(bananas, fryingpan)
        # Place the bananas inside the frying pan
        achieve_once on(fryingpan, stove)
        # Ensure the frying pan is on the stove
        achieve is_on(stove)
        # Ensure the stove is on to fry the bananas

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_bananas(bananas, fryingpan, stove)
        # Fry the bananas until they are golden brown
 
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(bananas, fryingpan)
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_bananas(bananas, fryingpan, stove)
        # Fry the sliced bananas until they are golden brown

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_bananas(bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(bananas, fryingpan)
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_bananas(bananas, fryingpan, stove)
        # Fry the sliced bananas until they are golden brown

##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(fryingpan_2154)putin_executor(food_banana_2083, fryingpan_2154)
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. Grabbing food_banana_2083 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_banana_2083, fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. food_banana_2083 is inside fryingpan_2154. food_banana_2083 is close fryingpan_2154. fryingpan_2154 is close food_banana_2083. food_banana_2083 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the sliced bananas are fried until golden brown. The current actions indicate that the bananas have been placed in the frying pan, but it does not confirm that they have been fried until the desired condition.
##############################
From agent.py
Human Instruction: The robot needs to ensure that the sliced bananas are fried until golden brown. The current actions indicate that the bananas have been placed in the frying pan, but it does not confirm that they have been fried until the desired condition.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for food_banana_2083 around kitchen_counter_122.
Action 3: Walk to kitchen_counter_123.
Action 4: look for food_banana_2083 around kitchen_counter_123.
Action 5: Walk to kitchen_counter_119.
Action 6: look for food_banana_2083 around kitchen_counter_119.
Action 7: Walk to fridge_126.
Action 8: Switch off fridge_126.
Action 9: Open fridge_126.
Action 10: look for food_banana_2083 around fridge_126.
Action 11: Grab food_banana_2083.
Action 12: Walk to cutting_board_2123.
Action 13: Put food_banana_2083 on cutting_board_2123.
Action 14: Walk to knife_2035.
Action 15: Grab knife_2035.
Action 16: Walk to food_banana_2083.
Action 17: Cut food_banana_2083.
Action 18: Walk to oil_2149.
Action 19: Grab oil_2149.
Action 20: Walk to fryingpan_2154.
Action 21: Put oil_2149 into fryingpan_2154.
Action 22: Grab fryingpan_2154.
Action 23: Walk to stove_2135.
Action 24: Put fryingpan_2154 on stove_2135.
Action 25: Switch on stove_2135.
Action 26: Walk to food_banana_2083.
Action 27: Grab food_banana_2083.
Action 28: Walk to fryingpan_2154.
Action 29: Put food_banana_2083 into fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_ice_2024_around_bathroom_counter_18(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(ice,bathroom_counter_instance)
        else:
            exp(ice,bathroom_counter_instance)
    eff:
        unknown[ice]=False
        close[ice,bathroom_counter_instance]=True
        close[bathroom_counter_instance,ice]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(bananas, fryingpan)
        # Place the sliced bananas inside the frying pan
        achieve_once on(fryingpan, stove)
        # Ensure the frying pan is on the stove
        achieve is_on(stove)
        # Ensure the stove is on to fry the bananas

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_bananas(bananas, fryingpan, stove)
        # Fry the bananas until they are golden brown

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior fry_bananas(bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(bananas, fryingpan)
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_bananas(bananas, fryingpan, stove)
        # Fry the bananas until they are golden brown
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(bananas, fryingpan)
        # Ensure the sliced bananas are placed inside the frying pan
        achieve_once on(fryingpan, stove)
        # Ensure the frying pan is on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on to fry the bananas

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_bananas(bananas, fryingpan, stove)
        # Fry the bananas until they are golden brown

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the sliced bananas in the pan until golden brown." ?
Answer: Put the banana in the frying pan with oil.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the banana in the frying pan with oil.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_toilet_15(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

behavior find_instrument_guitar_2028_around_bookshelf_196(instrument_guitar:item):
    goal: not unknown(instrument_guitar)
    body:
        assert is_instrument_guitar(instrument_guitar)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(instrument_guitar,bookshelf_instance)
        else:
            exp(instrument_guitar,bookshelf_instance)
    eff:
        unknown[instrument_guitar]=False
        close[instrument_guitar,bookshelf_instance]=True
        close[bookshelf_instance,instrument_guitar]=True
    

behavior find_oil_2149_around_bookshelf_196(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(oil,bookshelf_instance)
        else:
            exp(oil,bookshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,bookshelf_instance]=True
        close[bookshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_banana_in_fryingpan_with_oil(banana:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(banana, fryingpan)
        # Place the banana in the frying pan
        achieve_once on(fryingpan, stove)
        # Ensure the frying pan is on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the sliced banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        put_banana_in_fryingpan_with_oil(banana, fryingpan, stove)
        # Place the banana in the frying pan with oil on the stove

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_banana_in_oil(banana:item, oil:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)
        # Place the banana in the frying pan with oil

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select a cut banana

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and inside(oil, fryingpan)
        # Select the frying pan with oil

        place_banana_in_oil(banana, oil, fryingpan)
        # Place the banana in the frying pan with oil

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_bookshelf_196(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(oil,bookshelf_instance)
        else:
            exp(oil,bookshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,bookshelf_instance]=True
        close[bookshelf_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        achieve_once inside(banana, fryingpan)
        # Put the banana in the frying pan

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the sliced bananas in the frying pan with oil.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_pot_78(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(oil,pot_instance)
        else:
            exp(oil,pot_instance)
    eff:
        unknown[oil]=False
        close[oil,pot_instance]=True
        close[pot_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_sliced_bananas_in_frying_pan(bananas:item, fryingpan:item):
    body:
        achieve_once inside(bananas, fryingpan)
        # Place the sliced bananas into the frying pan

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        ensure_sliced_bananas_in_frying_pan(bananas, fryingpan)
        # Ensure the sliced bananas are in the frying pan with oil
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_banana_in_frying_pan(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        place_banana_in_frying_pan(banana, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_sliced_bananas(bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(bananas, fryingpan)
        achieve on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_sliced_bananas(bananas, fryingpan, stove)
        # Fry the sliced bananas in the frying pan on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put the sliced bananas in the frying pan with oil." ?
Answer: Put the banana in the frying pan.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_mousepad_279(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(oil,mousepad_instance)
        else:
            exp(oil,mousepad_instance)
    eff:
        unknown[oil]=False
        close[oil,mousepad_instance]=True
        close[mousepad_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        achieve inside(bananas, fryingpan)
        # Place the sliced bananas in the frying pan

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_bookshelf_196(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(oil,bookshelf_instance)
        else:
            exp(oil,bookshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,bookshelf_instance]=True
        close[bookshelf_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_sliced_bananas(bananas:item, frying_pan:item, stove:item):
    body:
        achieve_once inside(bananas, frying_pan)
        # Place the sliced bananas in the frying pan
        achieve_once on(frying_pan, stove)
        # Ensure the frying pan is on the stove
        achieve is_on(stove)
        # Ensure the stove is on to fry the bananas

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the sliced bananas

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_sliced_bananas(bananas, frying_pan, stove)
        # Fry the sliced bananas until they are golden brown

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_sliced_bananas(bananas:item, fryingpan:item):
    body:
        achieve_once inside(bananas, fryingpan)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        fry_sliced_bananas(bananas, fryingpan)
        # Put the sliced bananas in the frying pan with oil

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the sliced bananas in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select the frying pan that is on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        achieve_once inside(sliced_bananas, fryingpan)
        # Place the sliced bananas in the frying pan
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_bookshelf_196(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(oil,bookshelf_instance)
        else:
            exp(oil,bookshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,bookshelf_instance]=True
        close[bookshelf_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation

behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select the frying pan that is on the stove

        bind stove_2135: item where:
            is_stove(stove_2135) and id[stove_2135] == 2135
        # Select the stove with ID 2135

        achieve_once inside(sliced_bananas, fryingpan)
        # Place the sliced bananas in the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation

behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select the frying pan that is on the stove

        achieve_once inside(sliced_bananas, fryingpan)
        # Place the sliced bananas in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the sliced bananas
        
        achieve_once inside(bananas, fryingpan)
        # Place the sliced bananas into the frying pan on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior place_bananas_in_fryingpan(bananas:item, fryingpan:item):
    body:
        achieve_once inside(bananas, fryingpan)
        # Place the sliced bananas in the frying pan

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        place_bananas_in_fryingpan(bananas, fryingpan)
        # Place the sliced bananas in the frying pan
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put the sliced bananas in the frying pan." ?
Answer: Put the peeled sliced bananas in the frying pan.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2149_around_bookshelf_196(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(oil,bookshelf_instance)
        else:
            exp(oil,bookshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,bookshelf_instance]=True
        close[bookshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select the sliced bananas that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        achieve_once inside(sliced_bananas, fryingpan)
        # Temporarily place the sliced bananas in the frying pan

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_bookshelf_196(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(oil,bookshelf_instance)
        else:
            exp(oil,bookshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,bookshelf_instance]=True
        close[bookshelf_instance,oil]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_bananas_in_fryingpan(bananas:item, fryingpan:item):
    body:
        achieve_once inside(bananas, fryingpan)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and id[bananas] == 2083
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select the frying pan

        put_bananas_in_fryingpan(bananas, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior place_bananas_in_fryingpan(sliced_bananas: item, fryingpan: item):
    body:
        achieve_once inside(sliced_bananas, fryingpan)
        # Place the sliced bananas in the frying pan

behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        place_bananas_in_fryingpan(sliced_bananas, fryingpan)
        # Place the sliced bananas into the frying pan
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the peeled sliced bananas in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2149_around_tray_2068(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(oil,tray_instance)
        else:
            exp(oil,tray_instance)
    eff:
        unknown[oil]=False
        close[oil,tray_instance]=True
        close[tray_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bananas_in_fryingpan(bananas:item, fryingpan:item):
    body:
        achieve_once inside(bananas, fryingpan)
        # Place the peeled sliced bananas into the frying pan

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the peeled sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        place_bananas_in_fryingpan(bananas, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2149_around_bookshelf_196(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(oil,bookshelf_instance)
        else:
            exp(oil,bookshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,bookshelf_instance]=True
        close[bookshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_bananas_in_fryingpan(bananas:item, fryingpan:item):
    body:
        achieve_once inside(bananas, fryingpan)
        # Place the peeled sliced bananas in the frying pan

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select the peeled sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        put_bananas_in_fryingpan(bananas, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_bookshelf_196(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(oil,bookshelf_instance)
        else:
            exp(oil,bookshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,bookshelf_instance]=True
        close[bookshelf_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bananas_in_fryingpan(bananas:item, fryingpan:item):
    body:
        achieve_once inside(bananas, fryingpan)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the peeled sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        place_bananas_in_fryingpan(bananas, fryingpan)
        # Place the peeled sliced bananas in the frying pan

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the peeled sliced bananas in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_bookshelf_196(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(oil,bookshelf_instance)
        else:
            exp(oil,bookshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,bookshelf_instance]=True
        close[bookshelf_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior place_bananas_in_fryingpan(bananas:item, fryingpan:item):
    body:
        achieve_once inside(bananas, fryingpan)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas)
        # Select the peeled sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        place_bananas_in_fryingpan(bananas, fryingpan)
        # Put the peeled sliced bananas in the frying pan
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_tray_2068(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(oil,tray_instance)
        else:
            exp(oil,tray_instance)
    eff:
        unknown[oil]=False
        close[oil,tray_instance]=True
        close[tray_instance,oil]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bananas_in_frying_pan(bananas: item, fryingpan: item):
    body:
        achieve_once inside(bananas, fryingpan)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        place_bananas_in_frying_pan(bananas, fryingpan)
        # Place the peeled sliced bananas in the frying pan

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior put_sliced_bananas_in_fryingpan(bananas:item, fryingpan:item):
    body:
        achieve_once inside(bananas, fryingpan)

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select the peeled and sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        put_sliced_bananas_in_fryingpan(bananas, fryingpan)
        # Put the peeled sliced bananas in the frying pan
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_banana_2083)', 'walk_executor(cutting_board_2123)', 'put_executor(food_banana_2083, cutting_board_2123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_banana_2083)', 'cut_executor(food_banana_2083)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2149, fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_banana_2083)', 'grab_executor(food_banana_2083)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_banana_2083, fryingpan_2154)']
Time info:
Time consume: 491 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 188
goal generate times: 28
goal correct times: 0
action_num: 25

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
