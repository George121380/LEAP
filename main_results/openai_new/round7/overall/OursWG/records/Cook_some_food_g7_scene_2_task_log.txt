From agent.py
Reset goals: The sub-goals are: 
['1. Find a bowl and scoop ice cream into it.', '2. Add some jam on top of the ice cream.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_ice_cream_2058_around_fridge_140(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

behavior find_bowl_2095_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

def is_bowl_and_scoop_ice_cream(bowl:item):
    # Function to check if an item is a bowl and to verify if the ice cream is scooped into it
    symbol is_bowl_instance = is_bowl(bowl) and exists ice_cream: item : (is_food_ice_cream(ice_cream) and inside(ice_cream, bowl))
    return is_bowl_instance

behavior find_bowl_and_scoop_ice_cream(bowl:item, ice_cream:item):
    body:
        achieve_once inside(ice_cream, bowl)
        # Place the ice cream inside the bowl

behavior __goal__():
    body:
        if not exists bowl: item : (is_bowl_and_scoop_ice_cream(bowl)):
            # If a suitable bowl with ice cream scooped into it is not yet found, bind bowl and ice cream
            bind bowl: item where:
                is_bowl(bowl)
            # Select a bowl

            bind ice_cream: item where:
                is_food_ice_cream(ice_cream)
            # Select the ice cream

            find_bowl_and_scoop_ice_cream(bowl, ice_cream)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'ice_cream') at line 5754, column 56.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_ice_cream_2058_around_fridge_140(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

behavior find_bowl_2095_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
def is_bowl_and_scoop_ice_cream(bowl:item):
    # Function to check if an item is a bowl and to verify if the ice cream is scooped into it
    symbol is_bowl_instance = is_bowl(bowl) and exists ice_cream: item : (is_food_ice_cream(ice_cream) and inside(ice_cream, bowl))
    return is_bowl_instance

behavior find_bowl_and_scoop_ice_cream(bowl:item, ice_cream:item):
    body:
        achieve_once inside(ice_cream, bowl)
        # Place the ice cream inside the bowl

behavior __goal__():
    body:
        if not exists bowl: item : (is_bowl_and_scoop_ice_cream(bowl)):
            # If a suitable bowl with ice cream scooped into it is not yet found, bind bowl and ice cream
            bind bowl: item where:
                is_bowl(bowl)
            # Select a bowl

            bind ice_cream: item where:
                is_food_ice_cream(ice_cream)
            # Select the ice cream

            find_bowl_and_scoop_ice_cream(bowl, ice_cream)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'ice_cream') at line 5754, column 56.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_ice_cream_2058_around_fridge_140(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

behavior find_bowl_2095_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
def is_bowl_and_scoop_ice_cream(bowl: item, ice_cream: item):
    # Function to check if an item is a bowl and to verify if the ice cream is scooped into it
    symbol is_bowl_instance = is_bowl(bowl) and is_food_ice_cream(ice_cream) and inside(ice_cream, bowl)
    return is_bowl_instance

behavior find_bowl_and_scoop_ice_cream(bowl: item, ice_cream: item):
    body:
        achieve_once inside(ice_cream, bowl)
        # Place the ice cream inside the bowl

behavior __goal__():
    body:
        if not exists bowl: item, ice_cream: item : (is_bowl_and_scoop_ice_cream(bowl, ice_cream)):
            # If a suitable bowl with ice cream scooped into it is not yet found, bind bowl and ice cream
            bind bowl: item where:
                is_bowl(bowl)
            # Select a bowl

            bind ice_cream: item where:
                is_food_ice_cream(ice_cream)
            # Select the ice cream

            find_bowl_and_scoop_ice_cream(bowl, ice_cream)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_ice_cream_2058_around_fridge_140(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

behavior find_bowl_2096_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_ice_cream(bowl:item):
    # Function to check if the bowl contains ice cream
    symbol has_ice_cream= exists ice_cream: item : (is_food_ice_cream(ice_cream) and inside(ice_cream, bowl))
    return has_ice_cream

behavior scoop_ice_cream(bowl:item):
    body:
        achieve_once inside(food_ice_cream_1001, bowl)
        # Place the ice cream into the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        if not has_ice_cream(bowl):
            scoop_ice_cream(bowl)
        # Scoop ice cream into the bowl if it doesnt already have ice cream

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_ice_cream_1001; available variables: [Variable<bowl: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_ice_cream_2058_around_fridge_140(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

behavior find_bowl_2095_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
def has_ice_cream(bowl:item):
    # Function to check if the bowl contains ice cream
    symbol has_ice_cream= exists ice_cream: item : (is_food_ice_cream(ice_cream) and inside(ice_cream, bowl))
    return has_ice_cream

behavior scoop_ice_cream(bowl:item, ice_cream:item):
    body:
        achieve_once inside(ice_cream, bowl)
        # Place the ice cream into the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind ice_cream: item where:
            is_food_ice_cream(ice_cream)
        # Select the ice cream

        if not has_ice_cream(bowl):
            scoop_ice_cream(bowl, ice_cream)
        # Scoop ice cream into the bowl if it doesnt already have ice cream

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_ice_cream(bowl:item):
    # Function to check if the bowl contains ice cream
    symbol has_ice_cream= exists ice_cream: item : (is_food_ice_cream(ice_cream) and inside(ice_cream, bowl))
    return has_ice_cream

behavior scoop_ice_cream(bowl:item, ice_cream:item):
    body:
        achieve_once inside(ice_cream, bowl)
        # Place the ice cream into the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind ice_cream: item where:
            is_food_ice_cream(ice_cream)
        # Select the ice cream

        if not has_ice_cream(bowl):
            scoop_ice_cream(bowl, ice_cream)
        # Scoop ice cream into the bowl if it doesnt already have ice cream

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(bowl_2095, kitchen_counter_128)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_ice_cream_2058, fridge_140)walk_executor(food_ice_cream_2058)grab_executor(food_ice_cream_2058)walk_executor(bowl_2095)putin_executor(food_ice_cream_2058, bowl_2095)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(bowl_2095, kitchen_counter_128)
Fail to find bowl_2095 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(bowl_2095, table_123)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_ice_cream_2058, fridge_140)walk_executor(food_ice_cream_2058)grab_executor(food_ice_cream_2058)walk_executor(bowl_2095)putin_executor(food_ice_cream_2058, bowl_2095)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(bowl_2095, table_123)
Find bowl_2095. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_ice_cream_2058, fridge_140)walk_executor(food_ice_cream_2058)grab_executor(food_ice_cream_2058)walk_executor(bowl_2095)putin_executor(food_ice_cream_2058, bowl_2095)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_ice_cream_2058, fridge_140)
Find food_ice_cream_2058. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_ice_cream_2058)walk_executor(bowl_2095)putin_executor(food_ice_cream_2058, bowl_2095)
##############################
From agent.py
grab_executor(food_ice_cream_2058)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_ice_cream_2058 by right hand. 
##############################
From agent.py
walk_executor(bowl_2095)
Robot find: Robot is close to the food_ice_cream_2058. Robot is close to the table_123. Robot is close to the bowl_2095. 
##############################
From agent.py
putin_executor(food_ice_cream_2058, bowl_2095)
Robot find: Robot is close to the food_ice_cream_2058. Robot is close to the table_123. Robot is close to the bowl_2095. food_ice_cream_2058 is close bowl_2095. bowl_2095 is close food_ice_cream_2058. food_ice_cream_2058 is inside bowl_2095. food_ice_cream_2058 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior add_jam_to_ice_cream(jam: item, bowl: item):
    body:
        achieve_once inside(jam, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and inside(food_ice_cream_2058, bowl)
        # Select the bowl with ice cream

        bind jam: item where:
            is_food_jam(jam)
        # Select the jam

        add_jam_to_ice_cream(jam, bowl)
        # Add jam on top of the ice cream in the bowl
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_ice_cream_2058; available variables: [Variable<bowl: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#goal_representation
behavior add_jam_to_ice_cream(jam: item, bowl: item):
    body:
        achieve_once inside(jam, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and exists ice_cream: item : (is_food_ice_cream(ice_cream) and inside(ice_cream, bowl))
        # Select the bowl with ice cream

        bind jam: item where:
            is_food_jam(jam)
        # Select the jam

        add_jam_to_ice_cream(jam, bowl)
        # Add jam on top of the ice cream in the bowl
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'ice_cream') at line 5899, column 38.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2026_around_table_127(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_onion,table_instance)
        else:
            exp(food_onion,table_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,table_instance]=True
        close[table_instance,food_onion]=True
    

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
behavior add_jam_to_ice_cream(jam: item, bowl: item):
    body:
        achieve_once inside(jam, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and exists ice_cream: item : (is_food_ice_cream(ice_cream) and inside(ice_cream, bowl))
        # Select the bowl with ice cream

        bind jam: item where:
            is_food_jam(jam)
        # Select the jam

        add_jam_to_ice_cream(jam, bowl)
        # Add jam on top of the ice cream in the bowl
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_cupboard_131(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def find_jam(jam:item):
    # Function to determine if a given item is jam
    symbol is_jam_instance = is_food_jam(jam)
    return is_jam_instance

behavior add_jam_on_ice_cream(jam:item, ice_cream:item, bowl:item):
    body:
        achieve_once inside(jam, bowl)
        # Add jam to the ice cream in the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the bowl with ID 2095
        
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream) and inside(ice_cream, bowl)
        # Reference to the ice cream in the selected bowl

        if exists jam: item : (find_jam(jam) and not visited(jam)):
            # If we have already found an unvisited jam, use it
            bind jam: item where:
                find_jam(jam) and not visited(jam)
            add_jam_on_ice_cream(jam, ice_cream, bowl)
        else:
            # Check all items to find the jam if not found initially
            foreach jam: item:
                if find_jam(jam) and not visited(jam):
                    observe(jam, "Find the jam")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_jam(jam:item):
    # Function to determine if a given item is jam
    symbol is_jam_instance = is_food_jam(jam)
    return is_jam_instance

behavior add_jam_on_ice_cream(jam:item, ice_cream:item, bowl:item):
    body:
        achieve_once inside(jam, bowl)
        # Add jam to the ice cream in the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the bowl with ID 2095
        
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream) and inside(ice_cream, bowl)
        # Reference to the ice cream in the selected bowl

        if exists jam: item : (find_jam(jam) and not visited(jam)):
            # If we have already found an unvisited jam, use it
            bind jam: item where:
                find_jam(jam) and not visited(jam)
            add_jam_on_ice_cream(jam, ice_cream, bowl)
        else:
            # Check all items to find the jam if not found initially
            foreach jam: item:
                if find_jam(jam) and not visited(jam):
                    observe(jam, "Find the jam")

##############################
From agent.py-> find a plan in act()
walk_executor(food_jam_2059)grab_executor(food_jam_2059)walk_executor(bowl_2095)putin_executor(food_jam_2059, bowl_2095)
##############################
From agent.py
walk_executor(food_jam_2059)
Robot find: Robot is close to the food_jam_2059. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_jam_2059)
Robot find: Robot is close to the food_jam_2059. Robot is close to the fridge_140. Grabbing food_jam_2059 by right hand. 
##############################
From agent.py
walk_executor(bowl_2095)
Robot find: Robot is close to the food_jam_2059. Robot is close to the table_123. Robot is close to the bowl_2095. 
##############################
From agent.py
putin_executor(food_jam_2059, bowl_2095)
Robot find: Robot is close to the food_jam_2059. Robot is close to the table_123. Robot is close to the bowl_2095. food_jam_2059 is inside bowl_2095. bowl_2095 is close food_jam_2059. food_jam_2059 is close bowl_2095. food_jam_2059 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Get a bowl of ice cream and add some jam on the top.
Action History:
['walk_executor(kitchen_counter_128)', 'walk_executor(table_123)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_ice_cream_2058)', 'walk_executor(bowl_2095)', 'putin_executor(food_ice_cream_2058, bowl_2095)', 'walk_executor(food_jam_2059)', 'grab_executor(food_jam_2059)', 'walk_executor(bowl_2095)', 'putin_executor(food_jam_2059, bowl_2095)']
Time info:
Time consume: 161 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 109
goal generate times: 4
goal correct times: 1
action_num: 12

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
