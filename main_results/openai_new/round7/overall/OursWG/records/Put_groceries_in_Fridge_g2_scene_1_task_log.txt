From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Identify the table in the dining room.', '3. Put the milk, turkey, eggs, fish, and chicken on the identified table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_fish_2093_around_cutting_board_2123(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_fish,cutting_board_instance)
        else:
            exp(food_fish,cutting_board_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,cutting_board_instance]=True
        close[cutting_board_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve clean(fish)
        wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        
        wash_fish(fish)
        # Wash the selected fish

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_fish(fish:item):
    body:
        achieve clean(fish)
        wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        
        wash_fish(fish)
        # Wash the selected fish

##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2123)exp(food_fish_2093, cutting_board_2123)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_fish_2093, cutting_board_2123)
Fail to find food_fish_2093 around cutting_board_2123. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_fish_2093 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_couch_198(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

behavior find_cup_2133_around_table_199(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_table_cloth_2005_around_table_199(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and find_table_in_dining_room(table) and not visited(table)):
            # Check if there is a table in the dining room
            bind table: item where:
                is_table(table) and find_table_in_dining_room(table) and not visited(table)
            achieve close_char(char, table)
            # Move the character closer to the table

        else:
            # If no table is found yet, check all potential tables in the scene
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check if this is a table in the dining room")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and find_table_in_dining_room(table) and not visited(table)):
            # Check if there is a table in the dining room
            bind table: item where:
                is_table(table) and find_table_in_dining_room(table) and not visited(table)
            achieve close_char(char, table)
            # Move the character closer to the table

        else:
            # If no table is found yet, check all potential tables in the scene
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check if this is a table in the dining room")

##############################
From agent.py-> find a plan in act()
walk_executor(table_114)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2077_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_detergent_2011_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_food_2064_around_cupboard_117(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(milk_2115, table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the milk_2115. Grabbing milk_2115 by left hand. 
##############################
From agent.py
walk_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the milk_2115. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2077_around_cupboard_117(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_pot_78(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_carrot,pot_instance)
        else:
            exp(food_carrot,pot_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,pot_instance]=True
        close[pot_instance,food_carrot]=True
    

behavior find_food_cheese_2072_around_cupboard_117(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cheese,cupboard_instance)
        else:
            exp(food_cheese,cupboard_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,cupboard_instance]=True
        close[cupboard_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)put_executor(milk_2115, kitchen_counter_119)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the food_fish_2093. Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(milk_2115, kitchen_counter_119)
Robot find: Robot is close to the food_fish_2093. Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. milk_2115 is close kitchen_counter_119. kitchen_counter_119 is close milk_2115. milk_2115 is on kitchen_counter_119. milk_2115 released by left hand. 
##############################
From agent.py
walk_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. Grabbing food_turkey_2112 by left hand. 
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2011_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and inside(table, dining_room_1)
        # Select a table in the dining room
        
        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room_1; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2155_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_carrot_2086_around_kitchen_counter_122(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_cheese_2072_around_cupboard_117(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cheese,cupboard_instance)
        else:
            exp(food_cheese,cupboard_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,cupboard_instance]=True
        close[cupboard_instance,food_cheese]=True
    

#goal_representation

def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room
        
        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room
        
        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(food_turkey_2112, kitchen_counter_119)grab_executor(milk_2115)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(milk_2115, table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
put_executor(food_turkey_2112, kitchen_counter_119)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. food_turkey_2112 is close kitchen_counter_119. kitchen_counter_119 is close food_turkey_2112. food_turkey_2112 is on kitchen_counter_119. food_turkey_2112 released by left hand. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. Grabbing milk_2115 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2011_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_knife_2122_around_knife_2122(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2122
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and is_dining_room(room) and inside(table, room)
        # Select the identified table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the identified table in the dining room
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2124_around_television_281(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==281
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(remote_control,television_instance)
        else:
            exp(remote_control,television_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,television_instance]=True
        close[television_instance,remote_control]=True
    

behavior find_food_peanut_butter_2105_around_cupboard_118(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_cheese_2088_around_cupboard_117(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cheese,cupboard_instance)
        else:
            exp(food_cheese,cupboard_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,cupboard_instance]=True
        close[cupboard_instance,food_cheese]=True
    

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select the identified table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the identified table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select the identified table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the identified table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(milk_2115, kitchen_counter_119)grab_executor(food_turkey_2112)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
put_executor(milk_2115, kitchen_counter_119)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. milk_2115 is close kitchen_counter_119. milk_2115 is on kitchen_counter_119. milk_2115 released by left hand. 
##############################
From agent.py
grab_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. Grabbing food_turkey_2112 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2077_around_cupboard_117(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

behavior find_detergent_2155_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(food_turkey_2112, kitchen_counter_119)grab_executor(milk_2115)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(milk_2115, table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
put_executor(food_turkey_2112, kitchen_counter_119)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. food_turkey_2112 is close kitchen_counter_119. food_turkey_2112 is on kitchen_counter_119. food_turkey_2112 released by left hand. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. Grabbing milk_2115 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2077_around_cupboard_117(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_carrot_2086_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place all items on the table in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_peanut_butter_2077_around_kitchen_counter_123(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_carrot_2086_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_cheese_2088_around_cupboard_117(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cheese,cupboard_instance)
        else:
            exp(food_cheese,cupboard_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,cupboard_instance]=True
        close[cupboard_instance,food_cheese]=True
    

behavior find_food_food_2001_around_kitchen_counter_122(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#goal_representation

def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the milk_2115. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(milk_2115, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the milk_2115. Robot is close to the table_114. Robot is close to the mat_102. milk_2115 is close table_114. milk_2115 is on table_114. milk_2115 released by left hand. 
##############################
From agent.py
walk_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the kitchen_counter_119. Grabbing food_turkey_2112 by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_turkey_2112, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the table_114. Robot is close to the mat_102. food_turkey_2112 is close table_114. table_114 is close food_turkey_2112. food_turkey_2112 is on table_114. food_turkey_2112 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_egg_2092, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_egg_2092. food_egg_2092 is close table_114. food_egg_2092 is on table_114. food_egg_2092 released by left hand. 
##############################
From agent.py
put_executor(food_fish_2093, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_fish_2093. food_fish_2093 is close table_114. food_fish_2093 is on table_114. food_fish_2093 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_chicken_2089, table_114)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_chicken_2089. food_chicken_2089 is close table_114. food_chicken_2089 is on table_114. food_chicken_2089 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(cutting_board_2123)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_fish_2093)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_fish_2093)', 'switchoff_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_fish_2093)', 'switchoff_executor(faucet_20)', 'walk_executor(table_114)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(food_turkey_2112)', 'grab_executor(food_turkey_2112) (Failed)', 'walk_executor(kitchen_counter_119)', 'put_executor(milk_2115, kitchen_counter_119)', 'walk_executor(food_turkey_2112)', 'grab_executor(food_turkey_2112)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115) (Failed)', 'put_executor(food_turkey_2112, kitchen_counter_119)', 'grab_executor(milk_2115)', 'grab_executor(food_turkey_2112) (Failed)', 'put_executor(milk_2115, kitchen_counter_119)', 'grab_executor(food_turkey_2112)', 'grab_executor(milk_2115) (Failed)', 'put_executor(food_turkey_2112, kitchen_counter_119)', 'grab_executor(milk_2115)', 'grab_executor(food_turkey_2112) (Failed)', 'walk_executor(table_114)', 'put_executor(milk_2115, table_114)', 'walk_executor(food_turkey_2112)', 'grab_executor(food_turkey_2112)', 'walk_executor(table_114)', 'put_executor(food_turkey_2112, table_114)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(table_114)', 'put_executor(food_egg_2092, table_114)', 'put_executor(food_fish_2093, table_114)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(table_114)', 'put_executor(food_chicken_2089, table_114)']
Time info:
Time consume: 324 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 136
goal generate times: 8
goal correct times: 3
action_num: 47

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
