From agent.py
Reset goals: The sub-goals are: 
['1. Find the fish.', '2. Wash the fish.', '3. Find the milk, turkey, eggs, and chicken.', '4. Put the milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
def is_fish(item:item):
    # Function to check if the item is fish
    symbol is_fish_instance = is_food_fish(item)
    return is_fish_instance

behavior __goal__():
    body:
        if exists fish: item : (is_fish(fish) and not visited(fish)):
            # If a fish is found and not visited yet
            bind fish: item where:
                is_fish(fish) and not visited(fish)
            achieve close_char(char, fish)
        else:
            # Check all items to locate fish if not found initially
            foreach fish: item:
                if is_fish(fish) and not visited(fish):
                    observe(fish, "Check if this item is fish")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_fish(item:item):
    # Function to check if the item is fish
    symbol is_fish_instance = is_food_fish(item)
    return is_fish_instance

behavior __goal__():
    body:
        if exists fish: item : (is_fish(fish) and not visited(fish)):
            # If a fish is found and not visited yet
            bind fish: item where:
                is_fish(fish) and not visited(fish)
            achieve close_char(char, fish)
        else:
            # Check all items to locate fish if not found initially
            foreach fish: item:
                if is_fish(fish) and not visited(fish):
                    observe(fish, "Check if this item is fish")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_fish_2021, fridge_289)walk_executor(food_fish_2021)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_fish_2021, fridge_289)
Find food_fish_2021. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Put milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_towel_2057_around_bathroom_counter_41(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item, sink:item):
    body:
        achieve_once inhand(fish) # Temporarily hold the fish for washing
        achieve_once inside(fish, sink) # Place the fish in the sink for washing
        wash(fish) # Wash the fish

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        wash_fish(fish, sink)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_fish(fish:item, sink:item):
    body:
        achieve_once inhand(fish) # Temporarily hold the fish for washing
        achieve_once inside(fish, sink) # Place the fish in the sink for washing
        wash(fish) # Wash the fish

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        wash_fish(fish, sink)

##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2021)walk_executor(sink_42)putin_executor(food_fish_2021, sink_42)walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_fish_2021)switchoff_executor(faucet_43)
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
putin_executor(food_fish_2021, sink_42)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. food_fish_2021 is inside sink_42. food_fish_2021 is close sink_42. sink_42 is close food_fish_2021. food_fish_2021 released by right hand. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. Robot is close to the sink_42. 
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. Robot is close to the sink_42. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_fish_2021 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(food_turkey_2040)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the milk_2043. Grabbing milk_2043 by left hand. 
##############################
From agent.py
walk_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the milk_2043. Robot is close to the food_turkey_2040. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function find_dining_room_table not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_table_in_dining_room(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_table_in_dining_room(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(milk_2043, kitchen_counter_230)walk_executor(food_turkey_2040)grab_executor(food_turkey_2040)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_fish_2021. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(milk_2043, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close milk_2043. milk_2043 is close kitchen_counter_230. milk_2043 is on kitchen_counter_230. milk_2043 released by left hand. 
##############################
From agent.py
walk_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the fridge_289. Grabbing food_turkey_2040 by left hand. 
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(food_turkey_2040, kitchen_counter_230)grab_executor(milk_2043)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(food_turkey_2040, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_turkey_2040. food_turkey_2040 is close kitchen_counter_230. food_turkey_2040 is on kitchen_counter_230. food_turkey_2040 released by left hand. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing milk_2043 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(milk_2043, kitchen_counter_230)grab_executor(food_turkey_2040)grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(milk_2043, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. milk_2043 is close kitchen_counter_230. milk_2043 is on kitchen_counter_230. milk_2043 released by left hand. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing food_turkey_2040 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(food_turkey_2040, kitchen_counter_230)grab_executor(milk_2043)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(food_turkey_2040, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. food_turkey_2040 is close kitchen_counter_230. food_turkey_2040 is on kitchen_counter_230. food_turkey_2040 released by left hand. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing milk_2043 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(milk_2043, kitchen_counter_230)grab_executor(food_turkey_2040)grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(milk_2043, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. milk_2043 is close kitchen_counter_230. milk_2043 is on kitchen_counter_230. milk_2043 released by left hand. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing food_turkey_2040 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

##############################
From agent.py-> find a plan in act()
put_executor(food_turkey_2040, kitchen_counter_230)grab_executor(milk_2043)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(food_turkey_2040, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. food_turkey_2040 is close kitchen_counter_230. food_turkey_2040 is on kitchen_counter_230. food_turkey_2040 released by left hand. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing milk_2043 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(milk_2043, kitchen_counter_230)grab_executor(food_turkey_2040)grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(milk_2043, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. milk_2043 is close kitchen_counter_230. milk_2043 is on kitchen_counter_230. milk_2043 released by left hand. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing food_turkey_2040 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_cupboard_229(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tray,cupboard_instance)
        else:
            exp(tray,cupboard_instance)
    eff:
        unknown[tray]=False
        close[tray,cupboard_instance]=True
        close[cupboard_instance,tray]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table: item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(food_turkey_2040, kitchen_counter_230)grab_executor(milk_2043)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(food_turkey_2040, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. food_turkey_2040 is close kitchen_counter_230. food_turkey_2040 is on kitchen_counter_230. food_turkey_2040 released by left hand. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing milk_2043 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(milk_2043, kitchen_counter_230)grab_executor(food_turkey_2040)grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(milk_2043, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. milk_2043 is close kitchen_counter_230. milk_2043 is on kitchen_counter_230. milk_2043 released by left hand. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing food_turkey_2040 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation

 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function find_dining_room_table not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_table_in_dining_room(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_table_in_dining_room(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(food_turkey_2040, kitchen_counter_230)grab_executor(milk_2043)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(food_turkey_2040, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. food_turkey_2040 is close kitchen_counter_230. food_turkey_2040 is on kitchen_counter_230. food_turkey_2040 released by left hand. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing milk_2043 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(milk_2043, kitchen_counter_230)grab_executor(food_turkey_2040)grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(milk_2043, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. milk_2043 is close kitchen_counter_230. milk_2043 is on kitchen_counter_230. milk_2043 released by left hand. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing food_turkey_2040 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(food_turkey_2040, kitchen_counter_230)grab_executor(milk_2043)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(food_turkey_2040, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. food_turkey_2040 is close kitchen_counter_230. food_turkey_2040 is on kitchen_counter_230. food_turkey_2040 released by left hand. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing milk_2043 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(milk_2043, kitchen_counter_230)grab_executor(food_turkey_2040)grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(milk_2043, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. milk_2043 is close kitchen_counter_230. milk_2043 is on kitchen_counter_230. milk_2043 released by left hand. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing food_turkey_2040 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_dining_room_table(table:item):
    # Function to determine if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and is_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)
        # Place the milk, turkey, eggs, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_dining_room_table(table:item):
    # Function to determine if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and is_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)
        # Place the milk, turkey, eggs, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(food_turkey_2040, kitchen_counter_230)grab_executor(milk_2043)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(food_turkey_2040, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. food_turkey_2040 is close kitchen_counter_230. food_turkey_2040 is on kitchen_counter_230. food_turkey_2040 released by left hand. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing milk_2043 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function find_dining_room_table not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_103_around_nightstand_102(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(chair,nightstand_instance)
        else:
            exp(chair,nightstand_instance)
    eff:
        unknown[chair]=False
        close[chair,nightstand_instance]=True
        close[nightstand_instance,chair]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(milk_2043, kitchen_counter_230)grab_executor(food_turkey_2040)grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(milk_2043, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. milk_2043 is close kitchen_counter_230. milk_2043 is on kitchen_counter_230. milk_2043 released by left hand. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing food_turkey_2040 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function find_dining_room_table not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_mouse_166_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_table_in_dining_room(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_table_in_dining_room(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
put_executor(food_turkey_2040, kitchen_counter_230)grab_executor(milk_2043)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(food_turkey_2040, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. food_turkey_2040 is close kitchen_counter_230. food_turkey_2040 is on kitchen_counter_230. food_turkey_2040 released by left hand. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing milk_2043 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_cupboard_229(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tray,cupboard_instance)
        else:
            exp(tray,cupboard_instance)
    eff:
        unknown[tray]=False
        close[tray,cupboard_instance]=True
        close[cupboard_instance,tray]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_hanger_130_around_closetdrawer_116(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)

##############################
From agent.py-> find a plan in act()
put_executor(milk_2043, kitchen_counter_230)grab_executor(food_turkey_2040)grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(milk_2043, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. milk_2043 is close kitchen_counter_230. milk_2043 is on kitchen_counter_230. milk_2043 released by left hand. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing food_turkey_2040 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room
 
##############################
From agent.py-> find a plan in act()
put_executor(food_turkey_2040, kitchen_counter_230)grab_executor(milk_2043)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(milk_2043, table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
put_executor(food_turkey_2040, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. food_turkey_2040 is close kitchen_counter_230. food_turkey_2040 is on kitchen_counter_230. food_turkey_2040 released by left hand. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Grabbing milk_2043 by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        # Temporarily hold the milk

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place all items on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        # Temporarily hold the milk

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place all items on the table in the dining room

##############################
From agent.py-> find a plan in act()
walk_executor(table_226)put_executor(milk_2043, table_226)walk_executor(food_turkey_2040)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the food_fish_2021. Robot is close to the milk_2043. Robot is close to the table_226. 
##############################
From agent.py
put_executor(milk_2043, table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the milk_2043. Robot is close to the table_226. milk_2043 is close table_226. table_226 is close milk_2043. milk_2043 is on table_226. milk_2043 released by left hand. 
##############################
From agent.py
walk_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the kitchen_counter_230. Grabbing food_turkey_2040 by left hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_turkey_2040, table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the table_226. food_turkey_2040 is close table_226. table_226 is close food_turkey_2040. food_turkey_2040 is on table_226. food_turkey_2040 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_egg_2020. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_egg_2020, table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_egg_2020. Robot is close to the table_226. food_egg_2020 is close table_226. table_226 is close food_egg_2020. food_egg_2020 is on table_226. food_egg_2020 released by left hand. 
##############################
From agent.py
put_executor(food_fish_2021, table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_egg_2020. Robot is close to the table_226. food_fish_2021 is close table_226. table_226 is close food_fish_2021. food_fish_2021 is on table_226. food_fish_2021 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_chicken_2017, table_226)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the table_226. food_chicken_2017 is close table_226. table_226 is close food_chicken_2017. food_chicken_2017 is on table_226. food_chicken_2017 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_fish_2021)', 'walk_executor(sink_42)', 'putin_executor(food_fish_2021, sink_42)', 'walk_executor(food_fish_2021)', 'grab_executor(food_fish_2021)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_fish_2021)', 'switchoff_executor(faucet_43)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(food_turkey_2040)', 'grab_executor(food_turkey_2040) (Failed)', 'walk_executor(kitchen_counter_230)', 'put_executor(milk_2043, kitchen_counter_230)', 'walk_executor(food_turkey_2040)', 'grab_executor(food_turkey_2040)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043) (Failed)', 'put_executor(food_turkey_2040, kitchen_counter_230)', 'grab_executor(milk_2043)', 'grab_executor(food_turkey_2040) (Failed)', 'put_executor(milk_2043, kitchen_counter_230)', 'grab_executor(food_turkey_2040)', 'grab_executor(milk_2043) (Failed)', 'put_executor(food_turkey_2040, kitchen_counter_230)', 'grab_executor(milk_2043)', 'grab_executor(food_turkey_2040) (Failed)', 'put_executor(milk_2043, kitchen_counter_230)', 'grab_executor(food_turkey_2040)', 'grab_executor(milk_2043) (Failed)', 'put_executor(food_turkey_2040, kitchen_counter_230)', 'grab_executor(milk_2043)', 'grab_executor(food_turkey_2040) (Failed)', 'put_executor(milk_2043, kitchen_counter_230)', 'grab_executor(food_turkey_2040)', 'grab_executor(milk_2043) (Failed)', 'put_executor(food_turkey_2040, kitchen_counter_230)', 'grab_executor(milk_2043)', 'grab_executor(food_turkey_2040) (Failed)', 'put_executor(milk_2043, kitchen_counter_230)', 'grab_executor(food_turkey_2040)', 'grab_executor(milk_2043) (Failed)', 'put_executor(food_turkey_2040, kitchen_counter_230)', 'grab_executor(milk_2043)', 'grab_executor(food_turkey_2040) (Failed)', 'put_executor(milk_2043, kitchen_counter_230)', 'grab_executor(food_turkey_2040)', 'grab_executor(milk_2043) (Failed)', 'put_executor(food_turkey_2040, kitchen_counter_230)', 'grab_executor(milk_2043)', 'grab_executor(food_turkey_2040) (Failed)', 'put_executor(milk_2043, kitchen_counter_230)', 'grab_executor(food_turkey_2040)', 'grab_executor(milk_2043) (Failed)', 'put_executor(food_turkey_2040, kitchen_counter_230)', 'grab_executor(milk_2043)', 'grab_executor(food_turkey_2040) (Failed)', 'put_executor(milk_2043, kitchen_counter_230)', 'grab_executor(food_turkey_2040)', 'grab_executor(milk_2043) (Failed)', 'put_executor(food_turkey_2040, kitchen_counter_230)', 'grab_executor(milk_2043)', 'grab_executor(food_turkey_2040) (Failed)', 'put_executor(milk_2043, kitchen_counter_230)', 'grab_executor(food_turkey_2040)', 'grab_executor(milk_2043) (Failed)', 'put_executor(food_turkey_2040, kitchen_counter_230)', 'grab_executor(milk_2043)', 'grab_executor(food_turkey_2040) (Failed)', 'walk_executor(table_226)', 'put_executor(milk_2043, table_226)', 'walk_executor(food_turkey_2040)', 'grab_executor(food_turkey_2040)', 'walk_executor(table_226)', 'put_executor(food_turkey_2040, table_226)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(table_226)', 'put_executor(food_egg_2020, table_226)', 'put_executor(food_fish_2021, table_226)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(table_226)', 'put_executor(food_chicken_2017, table_226)']
Time info:
Time consume: 686 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 188
goal generate times: 22
goal correct times: 5
action_num: 88

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
