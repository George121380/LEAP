From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Cool them in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_128(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_towel_rack_298_around_bathroom_counter_306(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel_rack,bathroom_counter_instance)
        else:
            exp(towel_rack,bathroom_counter_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
def is_vegetable_or_pot(item: item):
    # Check if the item is a vegetable or a pot
    symbol is_target_item = is_food_vegetable(item) or is_pot(item)
    return is_target_item

behavior fill_pot_with_water_and_vegetables(pot: item, vegetables: list):
    body:
        achieve has_water(pot) 
        foreach vegetable: item in vegetables:
            achieve_once inside(vegetable, pot)

behavior boil_vegetables(pot: item, stove: item):
    body:
        achieve_once on(pot, stove) 
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        vegetables = []
        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                vegetablesappend(vegetable)

        fill_pot_with_water_and_vegetables(pot, vegetables)
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5778, column 33.
Expected one of: 
	* COMMA
	* LSQB
	* COLON
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_128(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_towel_rack_300_around_wallshelf_301(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(towel_rack,wallshelf_instance)
        else:
            exp(towel_rack,wallshelf_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,wallshelf_instance]=True
        close[wallshelf_instance,towel_rack]=True
    

#goal_representation
 
def is_vegetable_or_pot(item: item):
    # Check if the item is a vegetable or a pot
    symbol is_target_item = is_food_vegetable(item) or is_pot(item)
    return is_target_item

behavior fill_pot_with_water_and_vegetables(pot: item, vegetables: list):
    body:
        achieve has_water(pot)
        foreach vegetable: item in vegetables:
            achieve_once inside(vegetable, pot)

behavior boil_vegetables(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        vegetables = []
        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                vegetablesappend(vegetable)

        fill_pot_with_water_and_vegetables(pot, vegetables)
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5778, column 33.
Expected one of: 
	* COMMA
	* LSQB
	* COLON
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_potato_2066_around_kitchen_counter_128(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_vegetable_2072_around_kitchen_counter_128(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2093_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_towel_rack_299_around_shower_303(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==303
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel_rack,shower_instance)
        else:
            exp(towel_rack,shower_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,shower_instance]=True
        close[shower_instance,towel_rack]=True
    

#goal_representation
 
def is_vegetable_or_pot(item: item):
    # Check if the item is a vegetable or a pot
    symbol is_target_item = is_food_vegetable(item) or is_pot(item)
    return is_target_item

behavior fill_pot_with_water_and_vegetables(pot: item, vegetables: list):
    body:
        achieve has_water(pot)
        foreach vegetable: item in vegetables:
            achieve_once inside(vegetable, pot)

behavior boil_vegetables(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        vegetables = []
        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                vegetablesappend(vegetable)

        fill_pot_with_water_and_vegetables(pot, vegetables)
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_128(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_towel_rack_298_around_bathroom_counter_306(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel_rack,bathroom_counter_instance)
        else:
            exp(towel_rack,bathroom_counter_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_vegetables(vegetables, pot, stove)
        # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_vegetables(vegetables, pot, stove)
        # Boil the vegetables in the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_54, stove_2090)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_128)exp(food_vegetable_2072, kitchen_counter_128)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(pot_54, stove_2090)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_128)exp(food_vegetable_2072, kitchen_counter_128)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the pot_54. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_vegetable_2072, kitchen_counter_128)
Fail to find food_vegetable_2072 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(cutting_board_2080)exp(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the pot_54. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_vegetable_2072, cutting_board_2080)
Fail to find food_vegetable_2072 around cutting_board_2080. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(table_123)exp(food_vegetable_2072, table_123)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the pot_54. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(food_vegetable_2072, table_123)
Fail to find food_vegetable_2072 around table_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2095)exp(food_vegetable_2072, bowl_2095)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(bowl_2095)
Robot find: Robot is close to the pot_54. Robot is close to the table_123. Robot is close to the bowl_2095. 
##############################
From agent.py
exp(food_vegetable_2072, bowl_2095)
Fail to find food_vegetable_2072 around bowl_2095. 
##############################
From agent.py-> find a plan in act()
walk_executor(curtain_199)open_executor(curtain_199)exp(food_vegetable_2072, curtain_199)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(curtain_199)
Robot find: drawing_196, Robot is close to the pot_54. Robot is close to the curtain_199. 
##############################
From agent.py
open_executor(curtain_199)
Robot find: Robot is close to the pot_54. Robot is close to the curtain_199. curtain_199 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, curtain_199)
Fail to find food_vegetable_2072 around curtain_199. 
##############################
From agent.py-> find a plan in act()
walk_executor(window_181)open_executor(window_181)exp(food_vegetable_2072, window_181)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(window_181)
Robot find: Robot is close to the pot_54. Robot is close to the window_181. 
##############################
From agent.py
open_executor(window_181)
Robot find: Robot is close to the pot_54. Robot is close to the window_181. window_181 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find food_vegetable_2072 ?
Answer: The target item, food_vegetable_2072, is located inside fridge_140. To find it, go to dining_room_1. Inside this room, locate fridge_140, and food_vegetable_2072 will be inside this fridge.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, food_vegetable_2072, is located inside fridge_140. To find it, go to dining_room_1. Inside this room, locate fridge_140, and food_vegetable_2072 will be inside this fridge.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_54 around stove_2090.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to kitchen_counter_128.
Action 10: look for food_vegetable_2072 around kitchen_counter_128.
Action 11: Walk to faucet_308.
Action 12: Switch off faucet_308.
Action 13: Walk to cutting_board_2080.
Action 14: look for food_vegetable_2072 around cutting_board_2080.
Action 15: Walk to faucet_134.
Action 16: Switch on faucet_134.
Action 17: Switch off faucet_134.
Action 18: Walk to table_123.
Action 19: look for food_vegetable_2072 around table_123.
Action 20: Walk to bowl_2095.
Action 21: look for food_vegetable_2072 around bowl_2095.
Action 22: Walk to curtain_199.
Action 23: Open curtain_199.
Action 24: look for food_vegetable_2072 around curtain_199.
Action 25: Walk to window_181.
Action 26: Open window_181.

##############################
From agent.py
exp(food_vegetable_2072, window_181)
Fail to find food_vegetable_2072 around window_181. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2072)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that there is water inside pot_54 before boiling the vegetables. The action list does not mention adding water to the pot, which is a necessary step for boiling.
##############################
From agent.py
Human Instruction: The robot needs to ensure that there is water inside pot_54 before boiling the vegetables. The action list does not mention adding water to the pot, which is a necessary step for boiling.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_54 around stove_2090.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to kitchen_counter_128.
Action 10: look for food_vegetable_2072 around kitchen_counter_128.
Action 11: Walk to faucet_308.
Action 12: Switch off faucet_308.
Action 13: Walk to cutting_board_2080.
Action 14: look for food_vegetable_2072 around cutting_board_2080.
Action 15: Walk to faucet_134.
Action 16: Switch on faucet_134.
Action 17: Switch off faucet_134.
Action 18: Walk to table_123.
Action 19: look for food_vegetable_2072 around table_123.
Action 20: Walk to bowl_2095.
Action 21: look for food_vegetable_2072 around bowl_2095.
Action 22: Walk to curtain_199.
Action 23: Open curtain_199.
Action 24: look for food_vegetable_2072 around curtain_199.
Action 25: Walk to window_181.
Action 26: Open window_181.
Action 27: look for food_vegetable_2072 around window_181.
Action 28: Walk to fridge_140.
Action 29: Switch off fridge_140.
Action 30: Open fridge_140.
Action 31: look for food_vegetable_2072 around fridge_140.
Action 32: Grab food_vegetable_2072.
Action 33: Put food_vegetable_2072 into pot_54.
Action 34: Walk to stove_2090.
Action 35: Put pot_54 on stove_2090.
Action 36: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_needle_2012_around_orchid_200(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind orchid_instance:item where:
            is_orchid(orchid_instance) and id[orchid_instance]==200
        achieve close_char(char,orchid_instance)
        if can_open(orchid_instance):
            achieve_once open(orchid_instance)
            exp(needle,orchid_instance)
        else:
            exp(needle,orchid_instance)
    eff:
        unknown[needle]=False
        close[needle,orchid_instance]=True
        close[orchid_instance,needle]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) 
        # Ensure the pot has water before boiling

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        # Select vegetables with ID 2072

        ensure_pot_has_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_bookshelf_372(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(food_onion,bookshelf_instance)
        else:
            exp(food_onion,bookshelf_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bookshelf_instance]=True
        close[bookshelf_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if a pot has water
    symbol has_water = has_water(pot)
    return has_water

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetables: item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior boil_vegetables(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        # Select vegetables with ID 2072

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)

        place_vegetables_in_pot(vegetables, pot)
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_dishwasher_143(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(blender,dishwasher_instance)
        else:
            exp(blender,dishwasher_instance)
    eff:
        unknown[blender]=False
        close[blender,dishwasher_instance]=True
        close[dishwasher_instance,blender]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        # Select vegetables item with ID 2072
        
        boil_vegetables(vegetables, pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the vegetables." ?
Answer: Wash the vegetables. Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables in the pot. Then turn off the stove.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash the vegetables.', '2. Fill a pot with water and put it on the stove.', '3. Turn on the stove and put the vegetables in the pot.', '4. Turn off the stove and cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_dishwasher_143(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(blender,dishwasher_instance)
        else:
            exp(blender,dishwasher_instance)
    eff:
        unknown[blender]=False
        close[blender,dishwasher_instance]=True
        close[dishwasher_instance,blender]=True
    

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_soap_2037_around_shower_303(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==303
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior wash_vegetables(vegetables:item, sink:item):
    body:
        achieve_once inside(vegetables, sink)
        # Place the vegetables inside the sink
        wash(vegetables)
        # Wash the vegetables

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Approach the faucet to fill the pot with water
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select pot with ID 54

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet close to the sink

        wash_vegetables(vegetables, sink)
        fill_pot_with_water(pot, faucet)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior wash_vegetables(vegetables:item, sink:item):
    body:
        achieve_once inside(vegetables, sink)
        # Place the vegetables inside the sink
        wash(vegetables)
        # Wash the vegetables

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Approach the faucet to fill the pot with water
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select pot with ID 54

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet close to the sink

        wash_vegetables(vegetables, sink)
        fill_pot_with_water(pot, faucet)
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(sink_133)putin_executor(food_vegetable_2072, sink_133)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
putin_executor(food_vegetable_2072, sink_133)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. food_vegetable_2072 is close sink_133. sink_133 is close food_vegetable_2072. food_vegetable_2072 is inside sink_133. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the sink_133. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the sink_133. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. food_vegetable_2072 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_microwave_149(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(blender,microwave_instance)
        else:
            exp(blender,microwave_instance)
    eff:
        unknown[blender]=False
        close[blender,microwave_instance]=True
        close[microwave_instance,blender]=True
    

behavior find_stereo_2007_around_tvstand_186(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water_and_place_on_stove(pot: item, faucet: item, stove: item):
    body:
        achieve has_water(pot)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water_and_place_on_stove(pot, faucet, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_microwave_149(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(blender,microwave_instance)
        else:
            exp(blender,microwave_instance)
    eff:
        unknown[blender]=False
        close[blender,microwave_instance]=True
        close[microwave_instance,blender]=True
    

behavior find_stereo_2007_around_tvstand_135(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_toaster_144(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(blender,toaster_instance)
        else:
            exp(blender,toaster_instance)
    eff:
        unknown[blender]=False
        close[blender,toaster_instance]=True
        close[toaster_instance,blender]=True
    

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, pot)
        # Ensure the character is close to the pot
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet)
        # Select a faucet close to the character

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, pot)
        # Ensure the character is close to the pot
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet)
        # Select a faucet close to the character

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that there is water inside pot_54 before placing it on stove_2090. The current actions do not mention filling the pot with water, which is a necessary step for this sub-task. You should fill the pot with water from the faucet and then place it on the stove.
##############################
From agent.py
Human Instruction: The robot needs to ensure that there is water inside pot_54 before placing it on stove_2090. The current actions do not mention filling the pot with water, which is a necessary step for this sub-task. You should fill the pot with water from the faucet and then place it on the stove.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_54 around stove_2090.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to kitchen_counter_128.
Action 10: look for food_vegetable_2072 around kitchen_counter_128.
Action 11: Walk to faucet_308.
Action 12: Switch off faucet_308.
Action 13: Walk to cutting_board_2080.
Action 14: look for food_vegetable_2072 around cutting_board_2080.
Action 15: Walk to faucet_134.
Action 16: Switch on faucet_134.
Action 17: Switch off faucet_134.
Action 18: Walk to table_123.
Action 19: look for food_vegetable_2072 around table_123.
Action 20: Walk to bowl_2095.
Action 21: look for food_vegetable_2072 around bowl_2095.
Action 22: Walk to curtain_199.
Action 23: Open curtain_199.
Action 24: look for food_vegetable_2072 around curtain_199.
Action 25: Walk to window_181.
Action 26: Open window_181.
Action 27: look for food_vegetable_2072 around window_181.
Action 28: Walk to fridge_140.
Action 29: Switch off fridge_140.
Action 30: Open fridge_140.
Action 31: look for food_vegetable_2072 around fridge_140.
Action 32: Grab food_vegetable_2072.
Action 33: Put food_vegetable_2072 into pot_54.
Action 34: Walk to stove_2090.
Action 35: Put pot_54 on stove_2090.
Action 36: Switch on stove_2090.
Action 37: Walk to food_vegetable_2072.
Action 38: Grab food_vegetable_2072.
Action 39: Walk to sink_133.
Action 40: Put food_vegetable_2072 into sink_133.
Action 41: Walk to food_vegetable_2072.
Action 42: Grab food_vegetable_2072.
Action 43: Walk to faucet_134.
Action 44: Switch on faucet_134.
Action 45: Wash food_vegetable_2072.
Action 46: Switch off faucet_134.
Action 47: Walk to pot_54.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_coffe_maker_147(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(blender,coffe_maker_instance)
        else:
            exp(blender,coffe_maker_instance)
    eff:
        unknown[blender]=False
        close[blender,coffe_maker_instance]=True
        close[coffe_maker_instance,blender]=True
    

behavior find_stereo_2007_around_tvstand_135(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

behavior find_keyboard_2111_around_computer_379(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot_54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet_134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove_2090

        fill_pot(pot, faucet)
        place_pot_on_stove(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_coffe_maker_147(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(blender,coffe_maker_instance)
        else:
            exp(blender,coffe_maker_instance)
    eff:
        unknown[blender]=False
        close[blender,coffe_maker_instance]=True
        close[coffe_maker_instance,blender]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water_and_place_on_stove(pot:item, stove:item, faucet:item):
    body:
        achieve has_water(pot)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling the pot

        fill_pot_with_water_and_place_on_stove(pot, stove, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_microwave_149(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(blender,microwave_instance)
        else:
            exp(blender,microwave_instance)
    eff:
        unknown[blender]=False
        close[blender,microwave_instance]=True
        close[microwave_instance,blender]=True
    

behavior find_keyboard_2111_around_computer_379(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_stereo_2007_around_tvstand_186(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inside(pot, faucet)
        # Place the pot underon the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the faucet with ID 134

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. fill a pot with water and put it on the stove." ?
Answer: Fill a pot with water. Put the pot on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_microwave_149(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(blender,microwave_instance)
        else:
            exp(blender,microwave_instance)
    eff:
        unknown[blender]=False
        close[blender,microwave_instance]=True
        close[microwave_instance,blender]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Fill the pot with water from the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)   # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        fill_pot_with_water(pot, faucet) # Fill the pot with water
        place_pot_on_stove(pot, stove)   # Place the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_cupboard_131(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(blender,cupboard_instance)
        else:
            exp(blender,cupboard_instance)
    eff:
        unknown[blender]=False
        close[blender,cupboard_instance]=True
        close[cupboard_instance,blender]=True
    

behavior find_stereo_2007_around_tvstand_135(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_toaster_144(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(blender,toaster_instance)
        else:
            exp(blender,toaster_instance)
    eff:
        unknown[blender]=False
        close[blender,toaster_instance]=True
        close[toaster_instance,blender]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) 
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_and_place_pot_on_stove(pot:item, faucet:item, stove:item):
    body:
        achieve_once inside(pot, faucet) # Place the pot under the faucet
        achieve has_water(pot) # Fill the pot with water
        achieve_once on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        fill_and_place_pot_on_stove(pot, faucet, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_cupboard_131(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(blender,cupboard_instance)
        else:
            exp(blender,cupboard_instance)
    eff:
        unknown[blender]=False
        close[blender,cupboard_instance]=True
        close[cupboard_instance,blender]=True
    

behavior find_stereo_2007_around_couch_192(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(stereo,couch_instance)
        else:
            exp(stereo,couch_instance)
    eff:
        unknown[stereo]=False
        close[stereo,couch_instance]=True
        close[couch_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water from the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        if not has_water(pot):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet to fill the pot with water
            fill_pot_with_water(pot, faucet)
        
        place_pot_on_stove(pot, stove)
        # Place the filled pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_microwave_149(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(blender,microwave_instance)
        else:
            exp(blender,microwave_instance)
    eff:
        unknown[blender]=False
        close[blender,microwave_instance]=True
        close[microwave_instance,blender]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water_and_put_on_stove(pot:item, stove:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve has_water(pot)
        achieve close_char(char, stove)
        achieve once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling the pot with water

        fill_pot_with_water_and_put_on_stove(pot, stove, faucet)
        # Fill the pot with water and put it on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'on') at line 5942, column 22.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_blender_2032_around_microwave_149(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(blender,microwave_instance)
        else:
            exp(blender,microwave_instance)
    eff:
        unknown[blender]=False
        close[blender,microwave_instance]=True
        close[microwave_instance,blender]=True
    

#goal_representation
 
behavior fill_pot_with_water_and_put_on_stove(pot:item, stove:item, faucet:item):
    body:
        achieve has_water(pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling the pot with water

        fill_pot_with_water_and_put_on_stove(pot, stove, faucet)
        # Fill the pot with water and put it on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. fill a pot with water and put it on the stove." ?
Answer: Fill a pot with water. Put the pot on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_dishwasher_143(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(blender,dishwasher_instance)
        else:
            exp(blender,dishwasher_instance)
    eff:
        unknown[blender]=False
        close[blender,dishwasher_instance]=True
        close[dishwasher_instance,blender]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_microwave_149(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(blender,microwave_instance)
        else:
            exp(blender,microwave_instance)
    eff:
        unknown[blender]=False
        close[blender,microwave_instance]=True
        close[microwave_instance,blender]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inhand(pot) # Temporarily hold the pot for filling
        achieve has_water(pot) # Ensure the pot is filled with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select a specific pot by ID 54

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select a stove with ID 2090

        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inhand(pot) # Temporarily hold the pot for filling
        achieve has_water(pot) # Ensure the pot is filled with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select a specific pot by ID 54

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select a stove with ID 2090

        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. Grabbing pot_54 by left hand. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill pot_54 with water from a faucet before placing it on the stove.
##############################
From agent.py
Human Instruction: The robot needs to fill pot_54 with water from a faucet before placing it on the stove.

Human Guidance: Fill a pot with water. Put the pot on the stove.
The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_54 around stove_2090.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to kitchen_counter_128.
Action 10: look for food_vegetable_2072 around kitchen_counter_128.
Action 11: Walk to faucet_308.
Action 12: Switch off faucet_308.
Action 13: Walk to cutting_board_2080.
Action 14: look for food_vegetable_2072 around cutting_board_2080.
Action 15: Walk to faucet_134.
Action 16: Switch on faucet_134.
Action 17: Switch off faucet_134.
Action 18: Walk to table_123.
Action 19: look for food_vegetable_2072 around table_123.
Action 20: Walk to bowl_2095.
Action 21: look for food_vegetable_2072 around bowl_2095.
Action 22: Walk to curtain_199.
Action 23: Open curtain_199.
Action 24: look for food_vegetable_2072 around curtain_199.
Action 25: Walk to window_181.
Action 26: Open window_181.
Action 27: look for food_vegetable_2072 around window_181.
Action 28: Walk to fridge_140.
Action 29: Switch off fridge_140.
Action 30: Open fridge_140.
Action 31: look for food_vegetable_2072 around fridge_140.
Action 32: Grab food_vegetable_2072.
Action 33: Put food_vegetable_2072 into pot_54.
Action 34: Walk to stove_2090.
Action 35: Put pot_54 on stove_2090.
Action 36: Switch on stove_2090.
Action 37: Walk to food_vegetable_2072.
Action 38: Grab food_vegetable_2072.
Action 39: Walk to sink_133.
Action 40: Put food_vegetable_2072 into sink_133.
Action 41: Walk to food_vegetable_2072.
Action 42: Grab food_vegetable_2072.
Action 43: Walk to faucet_134.
Action 44: Switch on faucet_134.
Action 45: Wash food_vegetable_2072.
Action 46: Switch off faucet_134.
Action 47: Walk to pot_54.
Action 48: Grab pot_54.
Action 49: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_coffe_maker_147(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(blender,coffe_maker_instance)
        else:
            exp(blender,coffe_maker_instance)
    eff:
        unknown[blender]=False
        close[blender,coffe_maker_instance]=True
        close[coffe_maker_instance,blender]=True
    

behavior find_stereo_2007_around_tvstand_135(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water_and_place_on_stove(pot:item, faucet:item, stove:item):
    body:
        achieve_once close_char(char, pot) 
        # Move closer to the pot
        
        achieve_once inhand(pot) 
        # Hold pot_54 to move it to sink or faucet
        
        achieve has_water(pot)
        # Ensure the pot is filled with water

        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot_54
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet_134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove_2090
        
        fill_pot_with_water_and_place_on_stove(pot, faucet, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water_and_place_on_stove(pot:item, faucet:item, stove:item):
    body:
        achieve_once close_char(char, pot) 
        # Move closer to the pot
        
        achieve_once inhand(pot) 
        # Hold pot_54 to move it to sink or faucet
        
        achieve has_water(pot)
        # Ensure the pot is filled with water

        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot_54
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet_134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove_2090
        
        fill_pot_with_water_and_place_on_stove(pot, faucet, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. Grabbing pot_54 by left hand. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot_54 is filled with water after being grabbed. Perform the action to fill pot_54 with water from faucet_134 before placing it on the stove.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_tvstand_135(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(food_onion,tvstand_instance)
        else:
            exp(food_onion,tvstand_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,tvstand_instance]=True
        close[tvstand_instance,food_onion]=True
    

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_vegetables_to_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Add the vegetables to the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        add_vegetables_to_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_vegetables_to_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Add the vegetables to the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        add_vegetables_to_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
 
##############################
From agent.py-> find a plan in act()
putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)

behavior transfer_and_cool_vegetables_in_bowl(vegetables:item, pot:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot_54)
        # Select the boiled vegetables inside pot_54

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the bowl with ID 2095

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        turn_off_stove(stove)
        transfer_and_cool_vegetables_in_bowl(vegetables, pot_54, bowl)
        # Turn off the stove and transfer the vegetables to the bowl for cooling

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot_54; available variables: [Variable<vegetables: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_after_shave_2029(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind after_shave_instance:item where:
            is_after_shave(after_shave_instance) and id[after_shave_instance]==2029
        achieve close_char(char,after_shave_instance)
        if can_open(after_shave_instance):
            achieve_once open(after_shave_instance)
            exp(bowl,after_shave_instance)
        else:
            exp(bowl,after_shave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,after_shave_instance]=True
        close[after_shave_instance,bowl]=True
    

#goal_representation
behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)

behavior transfer_and_cool_vegetables_in_bowl(vegetables:item, pot:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot)
        # Select the boiled vegetables inside the pot

        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the bowl with ID 2095

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        turn_off_stove(stove)
        transfer_and_cool_vegetables_in_bowl(vegetables, pot, bowl)
        # Turn off the stove and transfer the vegetables to the bowl for cooling
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<vegetables: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)

behavior transfer_and_cool_vegetables_in_bowl(vegetables:item, pot:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot) and id[pot] == 54 and inside(vegetables, pot)
        # Select the pot with ID 54 and ensure that vegetables are inside it

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the bowl with ID 2095

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        turn_off_stove(stove)
        transfer_and_cool_vegetables_in_bowl(vegetables, pot, bowl)
        # Turn off the stove and transfer the vegetables to the bowl for cooling

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_after_shave_2029(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind after_shave_instance:item where:
            is_after_shave(after_shave_instance) and id[after_shave_instance]==2029
        achieve close_char(char,after_shave_instance)
        if can_open(after_shave_instance):
            achieve_once open(after_shave_instance)
            exp(bowl,after_shave_instance)
        else:
            exp(bowl,after_shave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,after_shave_instance]=True
        close[after_shave_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_boiled_vegetables(pot:item):
    symbol has_vegetables = exists veg: item : (is_food_vegetable(veg) and inside(veg, pot))
    return has_vegetables

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove)

behavior cool_boiled_vegetables(vegetable:item, bowl:item):
    body:
        achieve_once inside(vegetable, bowl)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        if has_boiled_vegetables(pot):
            turn_off_stove(stove)
        
        bind bowl: item where:
            is_bowl(bowl)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and inside(vegetable, pot):
                cool_boiled_vegetables(vegetable, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stereo_2007_around_tvstand_135(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_off_stove_and_cool_vegetables(stove: item, bowl: item, pot: item):
    body:
        achieve_once is_off(stove) # Ensure the stove is turned off
        achieve_once inside(pot, bowl) # Once boiling is done, transfer the pot to the bowl for cooling

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the same pot that was used to boil the vegetables

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the bowl with ID 2095

        turn_off_stove_and_cool_vegetables(stove, bowl, pot)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "4. turn off the stove and cool the boiled vegetables in a bowl." ?
Answer: Turn off the stove. Then, put the vegetables in a bowl.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_stereo_2007_around_bookshelf_260(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(stereo,bookshelf_instance)
        else:
            exp(stereo,bookshelf_instance)
    eff:
        unknown[stereo]=False
        close[stereo,bookshelf_instance]=True
        close[bookshelf_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_off_stove(stove:item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove

behavior cool_vegetables_in_bowl(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Cool the vegetables in a bowl

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl for cooling the vegetables

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove which is currently on

        turn_off_stove(stove)
        cool_vegetables_in_bowl(vegetables, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_off_stove(stove:item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove

behavior cool_vegetables_in_bowl(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Cool the vegetables in a bowl

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl for cooling the vegetables

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove which is currently on

        turn_off_stove(stove)
        cool_vegetables_in_bowl(vegetables, bowl)

##############################
From agent.py-> find a plan in act()
switchoff_executor(stove_2090)walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(bowl_2096, dishwasher_143)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. stove_2090 is turned off. 
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(bowl_2096, dishwasher_143)
Fail to find bowl_2096 around dishwasher_143. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_after_shave_2029(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind after_shave_instance:item where:
            is_after_shave(after_shave_instance) and id[after_shave_instance]==2029
        achieve close_char(char,after_shave_instance)
        if can_open(after_shave_instance):
            achieve_once open(after_shave_instance)
            exp(bowl,after_shave_instance)
        else:
            exp(bowl,after_shave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,after_shave_instance]=True
        close[after_shave_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_off_stove_and_cool_vegetables(stove:item, pot:item, bowl:item):
    body:
        achieve_once is_off(stove)
        achieve_once inside(pot, bowl)
        # This achieves the goal of transferring the boiled vegetables to a bowl to cool

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the specific stove for boiling

        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the specific pot used for boiling the vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl for cooling the vegetables

        turn_off_stove_and_cool_vegetables(stove, pot, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_off_stove_and_cool_vegetables(stove:item, pot:item, bowl:item):
    body:
        achieve_once is_off(stove)
        achieve_once inside(pot, bowl)
        # This achieves the goal of transferring the boiled vegetables to a bowl to cool

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the specific stove for boiling

        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the specific pot used for boiling the vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl for cooling the vegetables

        turn_off_stove_and_cool_vegetables(stove, pot, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(after_shave_2029)exp(bowl_2096, after_shave_2029)walk_executor(pot_54)grab_executor(pot_54)walk_executor(bowl_2096)putin_executor(pot_54, bowl_2096)
##############################
From agent.py
walk_executor(after_shave_2029)
Robot find: Robot is close to the after_shave_2029. Robot is close to the sink_133. 
##############################
From agent.py
exp(bowl_2096, after_shave_2029)
Fail to find bowl_2096 around after_shave_2029. 
##############################
From agent.py-> find a plan in act()
walk_executor(doorjamb_39)exp(bowl_2096, doorjamb_39)walk_executor(pot_54)grab_executor(pot_54)walk_executor(bowl_2096)putin_executor(pot_54, bowl_2096)
##############################
From agent.py
walk_executor(doorjamb_39)
Robot find: Robot is close to the doorjamb_39. 
##############################
From agent.py
exp(bowl_2096, doorjamb_39)
Fail to find bowl_2096 around doorjamb_39. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)exp(bowl_2096, cup_2087)walk_executor(pot_54)grab_executor(pot_54)walk_executor(bowl_2096)putin_executor(pot_54, bowl_2096)
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
exp(bowl_2096, cup_2087)
Fail to find bowl_2096 around cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(bowl_2096, table_127)walk_executor(pot_54)grab_executor(pot_54)walk_executor(bowl_2096)putin_executor(pot_54, bowl_2096)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(bowl_2096, table_127)
Find bowl_2096. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)grab_executor(pot_54)walk_executor(bowl_2096)putin_executor(pot_54, bowl_2096)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the pot_54. Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_microwave_149(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(blender,microwave_instance)
        else:
            exp(blender,microwave_instance)
    eff:
        unknown[blender]=False
        close[blender,microwave_instance]=True
        close[microwave_instance,blender]=True
    

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_glue_2013_around_milk_2074(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind milk_instance:item where:
            is_milk(milk_instance) and id[milk_instance]==2074
        achieve close_char(char,milk_instance)
        if can_open(milk_instance):
            achieve_once open(milk_instance)
            exp(glue,milk_instance)
        else:
            exp(glue,milk_instance)
    eff:
        unknown[glue]=False
        close[glue,milk_instance]=True
        close[milk_instance,glue]=True
    

behavior find_food_butter_2018_around_bathtub_297(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(food_butter,bathtub_instance)
        else:
            exp(food_butter,bathtub_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,bathtub_instance]=True
        close[bathtub_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior cool_boiled_vegetables(pot:item, bowl:item):
    body:
        achieve_once inside(pot, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the bowl with ID 2095

        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        achieve is_off(stove_2090)
        # Ensure the stove is turned off

        cool_boiled_vegetables(pot, bowl)
        # Cool the boiled vegetables in the bowl

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2090; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior turn_off_stove_and_cool_vegetables(pot:item, bowl:item, stove:item, bowl2:item):
    body:
        achieve_once is_off(stove)
        # Ensure the stove is turned off
        achieve_once inside(pot, bowl)
        # Cool the boiled vegetables by placing them in bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the bowl with ID 2095

        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        bind bowl2: item where:
            is_bowl(bowl2) and id[bowl2] == 2096
        # Select the bowl with ID 2096

        turn_off_stove_and_cool_vegetables(pot, bowl, stove, bowl2)
        # Turn off the stove and cool the boiled vegetables

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_food_onion_2026_around_microwave_149(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_off_stove_and_cool_vegetables(pot:item, stove:item, bowl:item):
    body:
        achieve_once is_off(stove)
        achieve_once inside(pot, bowl)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2096
        # Select the bowl with ID 2096

        turn_off_stove_and_cool_vegetables(pot, stove, bowl)
        # Turn off the stove and cool the boiled vegetables in the bowl

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_off_stove_and_cool_vegetables(pot:item, stove:item, bowl:item):
    body:
        achieve_once is_off(stove)
        achieve_once inside(pot, bowl)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2096
        # Select the bowl with ID 2096

        turn_off_stove_and_cool_vegetables(pot, stove, bowl)
        # Turn off the stove and cool the boiled vegetables in the bowl

##############################
From agent.py-> find a plan in act()
putin_executor(pot_54, bowl_2096)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_off_stove_and_cool_vegetables(pot:item, stove:item, bowl:item):
    body:
        achieve_once inside(pot, stove)
        achieve is_off(stove)
        achieve_once inside_char(char, bowl) 
        achieve_once inside(pot, bowl)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot on the stove

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2096
        # Select the bowl with ID 2096

        turn_off_stove_and_cool_vegetables(pot, stove, bowl)
        # Turn off the stove and move the vegetables to cool them in the bowl

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_off_stove_and_cool_vegetables(stove:item, pot:item, bowl:item):
    body:
        achieve is_off(stove) # Ensure the stove is turned off
        achieve_once inside(pot, bowl) # Transfer the vegetables from the pot to the bowl

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot on the stove

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2096
        # Select the bowl with ID 2096

        turn_off_stove_and_cool_vegetables(stove, pot, bowl)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_glue_2013_around_curtain_198(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==198
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(glue,curtain_instance)
        else:
            exp(glue,curtain_instance)
    eff:
        unknown[glue]=False
        close[glue,curtain_instance]=True
        close[curtain_instance,glue]=True
    

#exp_behavior_end

#goal_representation
behavior turn_off_stove(stove:item):
    body:
        achieve_once is_off(stove)

behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot on the stove

        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot)
        # Select the boiled vegetables inside the pot

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        turn_off_stove(stove)
        cool_boiled_vegetables(vegetables, bowl)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_pot_2093(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_onion,pot_instance)
        else:
            exp(food_onion,pot_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,pot_instance]=True
        close[pot_instance,food_onion]=True
    

behavior find_food_bread_2016_around_toaster_144(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_bread,toaster_instance)
        else:
            exp(food_bread,toaster_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,toaster_instance]=True
        close[toaster_instance,food_bread]=True
    

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_off_stove_and_cool_vegetables(stove:item, pot:item, bowl:item, vegetables:item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove
        achieve_once inside(vegetables, bowl)
        # Move the boiled vegetables into the bowl to cool

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2096
        # Select the bowl with ID 2096

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        turn_off_stove_and_cool_vegetables(stove, pot, bowl, vegetables)
        # Execute the behavior to turn off the stove and cool vegetables

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_off_stove_and_cool_vegetables(stove:item, pot:item, bowl:item, vegetables:item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove
        achieve_once inside(vegetables, bowl)
        # Move the boiled vegetables into the bowl to cool

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2096
        # Select the bowl with ID 2096

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        turn_off_stove_and_cool_vegetables(stove, pot, bowl, vegetables)
        # Execute the behavior to turn off the stove and cool vegetables

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
From agent.py
putin_executor(food_vegetable_2072, bowl_2096)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. food_vegetable_2072 is close bowl_2096. bowl_2096 is close food_vegetable_2072. food_vegetable_2072 is inside bowl_2096. food_vegetable_2072 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables. Then cool them in a bowl.
Action History:
['walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(kitchen_counter_128)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(cutting_board_2080)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(table_123)', 'walk_executor(bowl_2095)', 'walk_executor(curtain_199)', 'open_executor(curtain_199)', 'walk_executor(window_181)', 'open_executor(window_181)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_vegetable_2072)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(sink_133)', 'putin_executor(food_vegetable_2072, sink_133)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'wash_executor(food_vegetable_2072)', 'switchoff_executor(faucet_134)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'put_executor(pot_54, stove_2090)', 'grab_executor(pot_54)', 'put_executor(pot_54, stove_2090)', 'putin_executor(food_vegetable_2072, pot_54)', 'switchoff_executor(stove_2090)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'walk_executor(after_shave_2029)', 'walk_executor(doorjamb_39)', 'walk_executor(cup_2087)', 'walk_executor(table_127)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(bowl_2096)', 'putin_executor(pot_54, bowl_2096) (Failed)', 'putin_executor(pot_54, bowl_2096) (Failed)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(bowl_2096)', 'putin_executor(food_vegetable_2072, bowl_2096)']
Time info:
Time consume: 842 seconds
Exp_helper query times: 1
Guidance query times: 4
library scale: 165
goal generate times: 33
goal correct times: 1
action_num: 60

Task complete rate:
1
Scene_id: 2
##############################
