From agent.py
Reset goals: The sub-goals are: 
['1. Fry the steak.', '2. Cut the steak.', '3. Put the steak on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_orange_2008_around_fridge_140(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

behavior find_food_steak_2042_around_fridge_140(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_steak(steak:item):
    # Function to check if a given item is the target steak
    symbol is_steak_instance = is_food_steak(steak)
    return is_steak_instance

behavior fry_steak(steak:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(steak, fryingpan)
        # Place the steak inside the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove

behavior heat_stove(stove:item):
    body:
        achieve plugged(stove)
        # Ensure the stove is plugged in
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind steak: item where:
            is_target_steak(steak)
        # Select the target steak
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        fry_steak(steak, fryingpan, stove)
        heat_stove(stove)
        # Fry the steak on the frying pan placed on the stove

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_steak_2042_around_fridge_140(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_towel_rack_298_around_bathtub_297(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(towel_rack,bathtub_instance)
        else:
            exp(towel_rack,bathtub_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathtub_instance]=True
        close[bathtub_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_the_steak(steak: item, frying_pan: item, stove: item):
    body:
        achieve_once inside(steak, frying_pan)
        # Place the steak inside the frying pan
        achieve_once on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to fry the steak

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_the_steak(steak, frying_pan, stove)
        # Fry the steak in the frying pan on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fry_the_steak(steak: item, frying_pan: item, stove: item):
    body:
        achieve_once inside(steak, frying_pan)
        # Place the steak inside the frying pan
        achieve_once on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to fry the steak

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_the_steak(steak, frying_pan, stove)
        # Fry the steak in the frying pan on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_steak_2042, fridge_140)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(fryingpan_2107)putin_executor(food_steak_2042, fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(fryingpan_2107, stove_2090)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_steak_2042, fridge_140)walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(fryingpan_2107)putin_executor(food_steak_2042, fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_steak_2042, fridge_140)
Find food_steak_2042. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2042)walk_executor(fryingpan_2107)putin_executor(food_steak_2042, fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(food_steak_2042)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_steak_2042 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_steak_2042. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_steak_2042, fryingpan_2107)
Robot find: Robot is close to the food_steak_2042. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. food_steak_2042 is close fryingpan_2107. food_steak_2042 is inside fryingpan_2107. fryingpan_2107 is close food_steak_2042. food_steak_2042 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot find: Robot is close to the food_steak_2042. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Grabbing fryingpan_2107 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(fryingpan_2107, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. fryingpan_2107 is on stove_2090. stove_2090 is close fryingpan_2107. fryingpan_2107 is close stove_2090. fryingpan_2107 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_board():
    # Function to check if there is a cutting board present
    symbol has_cutting_board = exists o: item : (is_cutting_board(o))
    return has_cutting_board

behavior cut_steak(steak:item, cutting_board:item, knife:item):
    body:
        achieve_once on(steak, cutting_board) # Place the steak on the cutting board
        achieve cut(steak) # Cut the steak

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cuttable(steak)
        # Select the food steak for cutting

        if has_cutting_board(): 
            bind cutting_board: item where:
                is_cutting_board(cutting_board)
            # Select the cutting board if available

            bind knife: item where:
                is_knife(knife)
            # Select a knife for cutting

            cut_steak(steak, cutting_board, knife)
        else:
            achieve_once on(steak, cutting_board) # Assume arbitrary cutting surface

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cutting_board; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def has_cutting_board():
    # Function to check if there is a cutting board present
    symbol has_cutting_board = exists o: item : (is_cutting_board(o))
    return has_cutting_board

behavior cut_steak(steak:item, cutting_board:item, knife:item):
    body:
        achieve_once on(steak, cutting_board) # Place the steak on the cutting board
        achieve cut(steak) # Cut the steak

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cuttable(steak)
        # Select the food steak for cutting

        if has_cutting_board(): 
            bind cutting_board: item where:
                is_cutting_board(cutting_board)
            # Select the cutting board if available

            bind knife: item where:
                is_knife(knife)
            # Select a knife for cutting

            cut_steak(steak, cutting_board, knife)
        else:
            bind cutting_surface: item where:
                surfaces(cutting_surface)
            # Select an arbitrary cutting surface

            bind knife: item where:
                is_knife(knife)
            # Select a knife for cutting

            achieve_once on(steak, cutting_surface) # Place the steak on the arbitrary cutting surface
            achieve cut(steak) # Cut the steak

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_cutting_board():
    # Function to check if there is a cutting board present
    symbol has_cutting_board = exists o: item : (is_cutting_board(o))
    return has_cutting_board

behavior cut_steak(steak:item, cutting_board:item, knife:item):
    body:
        achieve_once on(steak, cutting_board) # Place the steak on the cutting board
        achieve cut(steak) # Cut the steak

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cuttable(steak)
        # Select the food steak for cutting

        if has_cutting_board(): 
            bind cutting_board: item where:
                is_cutting_board(cutting_board)
            # Select the cutting board if available

            bind knife: item where:
                is_knife(knife)
            # Select a knife for cutting

            cut_steak(steak, cutting_board, knife)
        else:
            bind cutting_surface: item where:
                surfaces(cutting_surface)
            # Select an arbitrary cutting surface

            bind knife: item where:
                is_knife(knife)
            # Select a knife for cutting

            achieve_once on(steak, cutting_surface) # Place the steak on the arbitrary cutting surface
            achieve cut(steak) # Cut the steak

##############################
From agent.py-> find a plan in act()
walk_executor(food_steak_2042)grab_executor(food_steak_2042)walk_executor(cutting_board_2080)put_executor(food_steak_2042, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(food_steak_2042)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_steak_2042. 
##############################
From agent.py
grab_executor(food_steak_2042)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_steak_2042. Grabbing food_steak_2042 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_steak_2042. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_steak_2042, cutting_board_2080)
Robot find: Robot is close to the food_steak_2042. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. cutting_board_2080 is close food_steak_2042. food_steak_2042 is close cutting_board_2080. food_steak_2042 is on cutting_board_2080. food_steak_2042 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(ceilinglamp_288)exp(knife_2036, ceilinglamp_288)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(ceilinglamp_288)
Robot find: drawing_296, Robot is close to the ceilinglamp_288. 
##############################
From agent.py
exp(knife_2036, ceilinglamp_288)
Fail to find knife_2036 around ceilinglamp_288. 
##############################
From agent.py-> find a plan in act()
walk_executor(bed_376)exp(knife_2036, bed_376)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(bed_376)
Robot find: mat_386, clothes_underwear_2022, pillow_370, drawing_389, pillow_368, drawing_388, Robot is close to the bed_376. Robot is close to the mat_386. 
##############################
From agent.py
exp(knife_2036, bed_376)
Fail to find knife_2036 around bed_376. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(knife_2036, kitchen_counter_132)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(knife_2036, kitchen_counter_132)
Fail to find knife_2036 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(knife_2036, table_127)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(knife_2036, table_127)
Fail to find knife_2036 around table_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(knife_2036, bookshelf_137)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: Go to dining_room_1 and locate dishwasher_143. Knife_2036 is inside dishwasher_143.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1 and locate dishwasher_143. Knife_2036 is inside dishwasher_143.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for fryingpan_2107 around stove_2090.
Action 4: Walk to fridge_140.
Action 5: Switch off fridge_140.
Action 6: Open fridge_140.
Action 7: look for food_steak_2042 around fridge_140.
Action 8: Grab food_steak_2042.
Action 9: Walk to fryingpan_2107.
Action 10: Put food_steak_2042 into fryingpan_2107.
Action 11: Grab fryingpan_2107.
Action 12: Walk to stove_2090.
Action 13: Put fryingpan_2107 on stove_2090.
Action 14: Switch on stove_2090.
Action 15: Walk to food_steak_2042.
Action 16: Grab food_steak_2042.
Action 17: Walk to cutting_board_2080.
Action 18: Put food_steak_2042 on cutting_board_2080.
Action 19: Walk to knifeblock_52.
Action 20: look for knife_2036 around knifeblock_52.
Action 21: Walk to ceilinglamp_288.
Action 22: look for knife_2036 around ceilinglamp_288.
Action 23: Walk to bed_376.
Action 24: look for knife_2036 around bed_376.
Action 25: Walk to kitchen_counter_132.
Action 26: look for knife_2036 around kitchen_counter_132.
Action 27: Walk to table_127.
Action 28: look for knife_2036 around table_127.
Action 29: Walk to bookshelf_137.
Action 30: Open bookshelf_137.

##############################
From agent.py
exp(knife_2036, bookshelf_137)
Fail to find knife_2036 around bookshelf_137. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2036)walk_executor(food_steak_2042)cut_executor(food_steak_2042)
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_steak_2042)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_steak_2042. 
##############################
From agent.py
cut_executor(food_steak_2042)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_steak_2042. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_bowl_2097(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2097
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(bowl,bowl_instance)
        else:
            exp(bowl,bowl_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bowl_instance]=True
        close[bowl_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior place_steak_on_plate(steak: item, plate: item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_on_plate(steak, plate)
        # Place the steak on the plate
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_steak_on_plate(steak: item, plate: item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_on_plate(steak, plate)
        # Place the steak on the plate
##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2042)walk_executor(plate_2105)put_executor(food_steak_2042, plate_2105)
##############################
From agent.py
grab_executor(food_steak_2042)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_steak_2042. Grabbing food_steak_2042 by left hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the knife_2036. Robot is close to the food_steak_2042. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_steak_2042, plate_2105)
Robot find: Robot is close to the knife_2036. Robot is close to the food_steak_2042. Robot is close to the plate_2105. Robot is close to the table_127. food_steak_2042 is close plate_2105. plate_2105 is close food_steak_2042. food_steak_2042 is on plate_2105. food_steak_2042 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried a steak. Then cut it and put it on a plate.
Action History:
['walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_steak_2042)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_steak_2042, fryingpan_2107)', 'grab_executor(fryingpan_2107)', 'walk_executor(stove_2090)', 'put_executor(fryingpan_2107, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(food_steak_2042)', 'grab_executor(food_steak_2042)', 'walk_executor(cutting_board_2080)', 'put_executor(food_steak_2042, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(ceilinglamp_288)', 'walk_executor(bed_376)', 'walk_executor(kitchen_counter_132)', 'walk_executor(table_127)', 'walk_executor(bookshelf_137)', 'open_executor(bookshelf_137)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'grab_executor(knife_2036)', 'walk_executor(food_steak_2042)', 'cut_executor(food_steak_2042)', 'grab_executor(food_steak_2042)', 'walk_executor(plate_2105)', 'put_executor(food_steak_2042, plate_2105)']
Time info:
Time consume: 203 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 121
goal generate times: 4
goal correct times: 1
action_num: 31

Task complete rate:
Keystate: k1 - Requires: 8 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
