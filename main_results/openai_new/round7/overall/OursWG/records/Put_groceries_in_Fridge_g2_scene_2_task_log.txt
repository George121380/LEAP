From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Find a table in the dining room.', '3. Place the milk, turkey, eggs, fish, and chicken on the table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        wash(fish) # Wash the fish

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish to wash
        
        wash_fish(fish)
        # Wash the fish

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_fish(fish:item):
    body:
        wash(fish) # Wash the fish

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish to wash
        
        wash_fish(fish)
        # Wash the fish

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)grab_executor(food_fish_2054)wash_executor(food_fish_2054)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_fish_2054, fridge_140)
Find food_fish_2054. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2054)wash_executor(food_fish_2054)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
wash_executor(food_fish_2054)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. food_fish_2054 is cleaned. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_374_around_table_127(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and find_table_in_dining_room(table)):
            # If a table in the dining room is found, move closer to it
            bind table: item where:
                is_table(table) and find_table_in_dining_room(table)
            achieve close_char(char, table)
        else:
            # Check all tables to find one in the dining room if not found initially
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check if the table is in the dining room")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_table_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and find_table_in_dining_room(table)):
            # If a table in the dining room is found, move closer to it
            bind table: item where:
                is_table(table) and find_table_in_dining_room(table)
            achieve close_char(char, table)
        else:
            # Check all tables to find one in the dining room if not found initially
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check if the table is in the dining room")

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the food_fish_2054. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_dough_2021_around_cupboard_131(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dough,cupboard_instance)
        else:
            exp(dough,cupboard_instance)
    eff:
        unknown[dough]=False
        close[dough,cupboard_instance]=True
        close[cupboard_instance,dough]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        achieve_once inhand(turkey)
        # Temporarily hold the milk and turkey

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(food_turkey_2071)grab_executor(food_turkey_2071)walk_executor(table_123)put_executor(milk_2074, table_123)put_executor(food_turkey_2071, table_123)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(table_123)put_executor(food_egg_2053, table_123)put_executor(food_fish_2054, table_123)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(table_123)put_executor(food_chicken_2050, table_123)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the food_fish_2054. Robot is close to the milk_2074. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the food_fish_2054. Robot is close to the milk_2074. Robot is close to the fridge_140. Grabbing milk_2074 by left hand. 
##############################
From agent.py
walk_executor(food_turkey_2071)
Robot find: Robot is close to the food_fish_2054. Robot is close to the milk_2074. Robot is close to the fridge_140. Robot is close to the food_turkey_2071. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pajamas_2039_around_basket_for_clothes_2040(pajamas:item):
    goal: not unknown(pajamas)
    body:
        assert is_pajamas(pajamas)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(pajamas,basket_for_clothes_instance)
        else:
            exp(pajamas,basket_for_clothes_instance)
    eff:
        unknown[pajamas]=False
        close[pajamas,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,pajamas]=True
    

behavior find_bowl_2097_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def find_dining_room_table(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_items_on_table(milk:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and visited(milk)
        # Select the milk
        
        bind egg: item where:
            is_food_egg(egg) and visited(egg)
        # Select the egg
        
        bind fish: item where:
            is_food_fish(fish) and visited(fish)
        # Select the fish
        
        bind chicken: item where:
            is_food_chicken(chicken) and visited(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and find_dining_room_table(table)
        # Select a table in the dining room

        achieve_once inhand(milk)
        # Temporarily hold the milk

        place_items_on_table(milk, egg, fish, chicken, table)
        # Place the milk, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_food_onion_2026_around_kitchen_counter_129(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_fork_2103_around_fork_2103(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind fork_instance:item where:
            is_fork(fork_instance) and id[fork_instance]==2103
        achieve close_char(char,fork_instance)
        if can_open(fork_instance):
            achieve_once open(fork_instance)
            exp(fork,fork_instance)
        else:
            exp(fork,fork_instance)
    eff:
        unknown[fork]=False
        close[fork,fork_instance]=True
        close[fork_instance,fork]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        achieve_once inhand(fish)
        # Temporarily hold the fish

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2016_around_kitchen_counter_129(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_pajamas_2039_around_bed_264(pajamas:item):
    goal: not unknown(pajamas)
    body:
        assert is_pajamas(pajamas)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pajamas,bed_instance)
        else:
            exp(pajamas,bed_instance)
    eff:
        unknown[pajamas]=False
        close[pajamas,bed_instance]=True
        close[bed_instance,pajamas]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_plate_2105_around_table_193(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation
 
def find_dining_room(room:item):
    # Function to check if a room is a dining room
    symbol is_dining_room_instance = is_dining_room(room)
    return is_dining_room_instance

behavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind dining_room: item where:
            find_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        achieve_once inhand(fish)
        # Temporarily hold the fish

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_dining_room(room:item):
    # Function to check if a room is a dining room
    symbol is_dining_room_instance = is_dining_room(room)
    return is_dining_room_instance

behavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind dining_room: item where:
            find_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        achieve_once inhand(fish)
        # Temporarily hold the fish

        place_items_on_table(milk, turkey, egg, fish, chicken, table)
        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)put_executor(milk_2074, table_123)walk_executor(food_turkey_2071)grab_executor(food_turkey_2071)walk_executor(table_123)put_executor(food_turkey_2071, table_123)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(table_123)put_executor(food_egg_2053, table_123)put_executor(food_fish_2054, table_123)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(table_123)put_executor(food_chicken_2050, table_123)
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the milk_2074. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(milk_2074, table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the milk_2074. Robot is close to the mat_114. Robot is close to the table_123. milk_2074 is close table_123. table_123 is close milk_2074. milk_2074 is on table_123. milk_2074 released by left hand. 
##############################
From agent.py
walk_executor(food_turkey_2071)
Robot find: Robot is close to the food_fish_2054. Robot is close to the fridge_140. Robot is close to the food_turkey_2071. 
##############################
From agent.py
grab_executor(food_turkey_2071)
Robot find: Robot is close to the food_fish_2054. Robot is close to the fridge_140. Robot is close to the food_turkey_2071. Grabbing food_turkey_2071 by left hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_turkey_2071. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(food_turkey_2071, table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_turkey_2071. Robot is close to the mat_114. Robot is close to the table_123. table_123 is close food_turkey_2071. food_turkey_2071 is close table_123. food_turkey_2071 is on table_123. food_turkey_2071 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_fish_2054. Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_fish_2054. Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_egg_2053. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(food_egg_2053, table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_egg_2053. Robot is close to the mat_114. Robot is close to the table_123. food_egg_2053 is close table_123. table_123 is close food_egg_2053. food_egg_2053 is on table_123. food_egg_2053 released by left hand. 
##############################
From agent.py
put_executor(food_fish_2054, table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_egg_2053. Robot is close to the mat_114. Robot is close to the table_123. table_123 is close food_fish_2054. food_fish_2054 is close table_123. food_fish_2054 is on table_123. food_fish_2054 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(food_chicken_2050, table_123)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the mat_114. Robot is close to the table_123. food_chicken_2050 is close table_123. table_123 is close food_chicken_2050. food_chicken_2050 is on table_123. food_chicken_2050 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_fish_2054)', 'wash_executor(food_fish_2054)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(table_123)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(food_turkey_2071)', 'grab_executor(food_turkey_2071) (Failed)', 'walk_executor(table_123)', 'put_executor(milk_2074, table_123)', 'walk_executor(food_turkey_2071)', 'grab_executor(food_turkey_2071)', 'walk_executor(table_123)', 'put_executor(food_turkey_2071, table_123)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(table_123)', 'put_executor(food_egg_2053, table_123)', 'put_executor(food_fish_2054, table_123)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(table_123)', 'put_executor(food_chicken_2050, table_123)']
Time info:
Time consume: 190 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 60
goal generate times: 5
goal correct times: 1
action_num: 27

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
