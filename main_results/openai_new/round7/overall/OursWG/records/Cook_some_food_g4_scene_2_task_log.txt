From agent.py
Reset goals: The sub-goals are: 
['1. Find a pot and fill it with water.', '2. Identify the vegetables to be boiled.', '3. Boil the vegetables in the pot.', '4. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_fill_pot(pot:item, sink:item):
    body:
        achieve_once inhand(pot) # Temporarily hold the pot
        achieve has_water(pot) # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        find_and_fill_pot(pot, sink)
        # Find the pot and fill it with water

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_fill_pot(pot:item, sink:item):
    body:
        achieve_once inhand(pot) # Temporarily hold the pot
        achieve has_water(pot) # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        find_and_fill_pot(pot, sink)
        # Find the pot and fill it with water

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_2093, cupboard_131)walk_executor(pot_2093)grab_executor(pot_2093)open_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(pot_2093, cupboard_131)
Fail to find pot_2093 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)grab_executor(pot_54)open_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill pot_54 with water. The pot has been found and is being held, but the faucet needs to be switched on to fill the pot with water.
##############################
From agent.py
Human Instruction: You need to fill pot_54 with water. The pot has been found and is being held, but the faucet needs to be switched on to fill the pot with water.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Grab pot_54.
Action 6: Open pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2084_around_tvstand_186(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cd_player,tvstand_instance)
        else:
            exp(cd_player,tvstand_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,tvstand_instance]=True
        close[tvstand_instance,cd_player]=True
    

behavior find_pot_54_around_faucet_308(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==308
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(pot,faucet_instance)
        else:
            exp(pot,faucet_instance)
    eff:
        unknown[pot]=False
        close[pot,faucet_instance]=True
        close[faucet_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        achieve is_on(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the specific pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the specific faucet with ID 134
        
        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        achieve is_on(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the specific pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the specific faucet with ID 134
        
        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_134)switchoff_executor(faucet_134)switchon_executor(faucet_134)
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_onion_2026_around_fridge_140(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_potato_2066_around_fridge_140(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
def is_vegetable(item: item):
    # Function to check if the item is a vegetable
    symbol is_target_vegetable = is_food_vegetable(item)
    return is_target_vegetable

behavior __goal__():
    body:
        foreach item: item:
            if is_vegetable(item) and not visited(item):
                # Check all unvisited items to identify vegetables to be boiled
                observe(item, "Check if this item is a vegetable for boiling")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_vegetable(item: item):
    # Function to check if the item is a vegetable
    symbol is_target_vegetable = is_food_vegetable(item)
    return is_target_vegetable

behavior __goal__():
    body:
        foreach item: item:
            if is_vegetable(item) and not visited(item):
                # Check all unvisited items to identify vegetables to be boiled
                observe(item, "Check if this item is a vegetable for boiling")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)obs(food_vegetable_2072, Check if this item is a vegetable for boiling)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
obs(food_vegetable_2072, Check if this item is a vegetable for boiling)
##############################
From agent.py
obs(food_vegetable_2072, Check if this item is a vegetable for boiling)
Get this information:  food_vegetable_2072 is close to fridge_140. food_vegetable_2072 is close to character_219. food_vegetable_2072 is inside dining_room_1. food_vegetable_2072 is inside fridge_140. food_vegetable_2072 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_after_shave_2029_around_bathroom_cabinet_305(after_shave:item):
    goal: not unknown(after_shave)
    body:
        assert is_after_shave(after_shave)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(after_shave,bathroom_cabinet_instance)
        else:
            exp(after_shave,bathroom_cabinet_instance)
    eff:
        unknown[after_shave]=False
        close[after_shave,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,after_shave]=True
    

behavior find_food_onion_2026_around_walllamp_44(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==44
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(food_onion,walllamp_instance)
        else:
            exp(food_onion,walllamp_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,walllamp_instance]=True
        close[walllamp_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_in_pot(vegetables:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the water and vegetables

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables identified for boiling
        
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        boil_vegetables_in_pot(vegetables, pot, stove)
        # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_vegetables_in_pot(vegetables:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the water and vegetables

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables identified for boiling
        
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        boil_vegetables_in_pot(vegetables, pot, stove)
        # Boil the vegetables in the pot on the stove

##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2072)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to confirm that pot_54 contains water before boiling, as filling the pot with water was not clearly indicated. Ensure the vegetables are not dirty before boiling. Make sure these steps are completed to achieve the sub-task.
##############################
From agent.py
Human Instruction: You need to confirm that pot_54 contains water before boiling, as filling the pot with water was not clearly indicated. Ensure the vegetables are not dirty before boiling. Make sure these steps are completed to achieve the sub-task.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Grab pot_54.
Action 6: Open pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Switch on faucet_134.
Action 10: Switch off faucet_134.
Action 11: Switch on faucet_134.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for food_vegetable_2072 around fridge_140.
Action 16: Observe around food_vegetable_2072 with the question of Check if this item is a vegetable for boiling.
Action 17: Grab food_vegetable_2072.
Action 18: Put food_vegetable_2072 into pot_54.
Action 19: Walk to stove_2090.
Action 20: Put pot_54 on stove_2090.
Action 21: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_water(pot:item):
    # Function to check if the pot contains water
    symbol has_water = has_water(pot)
    return has_water

def is_vegetable_clean(vegetable:item):
    # Function to check if the vegetable is clean
    symbol is_clean = clean(vegetable)
    return is_clean

behavior boil_vegetables_in_pot(pot: item, vegetables: item, stove: item):
    body:
        if not pot_has_water(pot):
            achieve has_water(pot) # Ensure the pot is filled with water

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not is_vegetable_clean(vegetable):
                wash(vegetable)
                # Wash the vegetable if its not clean

        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot

        achieve_once on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the specific stove with ID 2090

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        # Select the specific vegetables with ID 2072

        boil_vegetables_in_pot(pot, vegetables, stove)
        # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def pot_has_water(pot:item):
    # Function to check if the pot contains water
    symbol has_water = has_water(pot)
    return has_water

def is_vegetable_clean(vegetable:item):
    # Function to check if the vegetable is clean
    symbol is_clean = clean(vegetable)
    return is_clean

behavior boil_vegetables_in_pot(pot: item, vegetables: item, stove: item):
    body:
        if not pot_has_water(pot):
            achieve has_water(pot) # Ensure the pot is filled with water

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not is_vegetable_clean(vegetable):
                wash(vegetable)
                # Wash the vegetable if its not clean

        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot

        achieve_once on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the specific stove with ID 2090

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        # Select the specific vegetables with ID 2072

        boil_vegetables_in_pot(pot, vegetables, stove)
        # Boil the vegetables in the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. food_vegetable_2072 is cleaned. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to confirm that pot_54 contains water. The actions list does not show that the pot was filled with water before the vegetables were boiled on the stove. Additionally, ensure the vegetables are clean before boiling them on the stove.
##############################
From agent.py
Human Instruction: You need to confirm that pot_54 contains water. The actions list does not show that the pot was filled with water before the vegetables were boiled on the stove. Additionally, ensure the vegetables are clean before boiling them on the stove.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Grab pot_54.
Action 6: Open pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Switch on faucet_134.
Action 10: Switch off faucet_134.
Action 11: Switch on faucet_134.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for food_vegetable_2072 around fridge_140.
Action 16: Observe around food_vegetable_2072 with the question of Check if this item is a vegetable for boiling.
Action 17: Grab food_vegetable_2072.
Action 18: Put food_vegetable_2072 into pot_54.
Action 19: Walk to stove_2090.
Action 20: Put pot_54 on stove_2090.
Action 21: Switch on stove_2090.
Action 22: Walk to food_vegetable_2072.
Action 23: Grab food_vegetable_2072.
Action 24: Wash food_vegetable_2072.
Action 25: Walk to faucet_134.
Action 26: Switch off faucet_134.
Action 27: Walk to pot_54.
Action 28: Put food_vegetable_2072 into pot_54.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_pot_has_water(pot: item):
    # Function to ensure pot has water
    symbol pot_has_water = has_water(pot)
    return pot_has_water

behavior boil_vegetables_in_pot(pot: item, stove: item):
    body:
        achieve_once has_water(pot) # Ensure pot contains water before putting it on stove
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Ensure the stove is on for boiling

behavior wash_vegetables(vegetables: item):
    body:
        achieve clean(vegetables) # Ensure the vegetables are clean

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        # Select the vegetables with ID 2072

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        if not ensure_pot_has_water(pot):
            observe(pot, "Check if the pot contains water")

        if dirty(vegetables):
            wash_vegetables(vegetables)

        achieve_once inside(vegetables, pot)
        # Place vegetables inside pot for boiling

        boil_vegetables_in_pot(pot, stove)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_clothes_dress_2075_around_basket_for_clothes_2040(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if the pot contains water
    symbol contains_water = has_water(pot)
    return contains_water

def is_stove_on(stove:item):
    # Function to check if the stove is on
    symbol stove_on = is_on(stove)
    return stove_on

behavior boil_vegetables_in_pot(vegetables:item, pot:item, stove:item):
    body:
        if not has_water_in_pot(pot):
            achieve has_water(pot)
            # Ensure the pot is filled with water

        achieve_once on(pot, stove)
        # Place the pot on the stove

        if not is_stove_on(stove):
            achieve is_on(stove)
            # Ensure the stove is turned on

        achieve_once inside(vegetables, pot)
        # Place the vegetables in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with known ID

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        # Select the identified vegetables

        boil_vegetables_in_pot(vegetables, pot, stove)
        # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_clothes_dress_2075_around_basket_for_clothes_2040(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if the pot has water
    symbol has_water= has_water(pot)
    return has_water

behavior boil_vegetables_in_pot(pot:item, vegetables:item, stove:item):
    body:
        # Ensure the vegetables are clean before placing them in the pot
        achieve_once clean(vegetables)
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot_54

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable] == 2072
        # Select food_vegetable_2072

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove_2090

        if not has_water_in_pot(pot):
            # If pot_54 does not have water, ensure water is added
            achieve has_water(pot)

        boil_vegetables_in_pot(pot, food_vegetable, stove)
        # Boil the vegetables in pot_54 on stove_2090

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. boil the vegetables in the pot." ?
Answer: Put the pot on the stove. Turn on the stove. Put the vegetables inside the pot. Then turn off the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_dough_2021_around_cupboard_130(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dough,cupboard_instance)
        else:
            exp(dough,cupboard_instance)
    eff:
        unknown[dough]=False
        close[dough,cupboard_instance]=True
        close[cupboard_instance,dough]=True
    

behavior find_food_onion_2026_around_photoframe_361(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==361
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(food_onion,photoframe_instance)
        else:
            exp(food_onion,photoframe_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,photoframe_instance]=True
        close[photoframe_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior confirm_water_in_pot(pot:item):
    body:
        if not has_water(pot):
            # Ensure the pot has water by observing it
            observe(pot, "Confirm that the pot contains water")
            
behavior clean_vegetables(vegetables:item, sink:item):
    body:
        achieve_once has_water(sink)
        wash(vegetables)
        # Clean the vegetables before boiling

behavior boil_vegetables(pot:item, vegetables:item, stove:item):
    body:
        confirm_water_in_pot(pot)
        clean_vegetables(vegetables, pot)
        achieve has_water(pot)
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables]==2072
        # Select the vegetables to be boiled

        boil_vegetables(pot, vegetables, stove)
        # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior confirm_water_in_pot(pot:item):
    body:
        if not has_water(pot):
            # Ensure the pot has water by observing it
            observe(pot, "Confirm that the pot contains water")
            
behavior clean_vegetables(vegetables:item, sink:item):
    body:
        achieve_once has_water(sink)
        wash(vegetables)
        # Clean the vegetables before boiling

behavior boil_vegetables(pot:item, vegetables:item, stove:item):
    body:
        confirm_water_in_pot(pot)
        clean_vegetables(vegetables, pot)
        achieve has_water(pot)
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables]==2072
        # Select the vegetables to be boiled

        boil_vegetables(pot, vegetables, stove)
        # Boil the vegetables in the pot on the stove

##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the food_vegetable_2072. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot must confirm that pot_54 contains water, as it is not clear from the actions listed. Additionally, the vegetables must be definitively placed inside the pot with water on the stove for boiling after being washed. Make sure to either observe or ensure the pot has water before attempting to boil.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_after_shave_2029_around_bathroom_cabinet_305(after_shave:item):
    goal: not unknown(after_shave)
    body:
        assert is_after_shave(after_shave)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(after_shave,bathroom_cabinet_instance)
        else:
            exp(after_shave,bathroom_cabinet_instance)
    eff:
        unknown[after_shave]=False
        close[after_shave,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,after_shave]=True
    

#exp_behavior_end

#goal_representation
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior close_the_fridge(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        store_pot_in_fridge(pot, fridge)
        close_the_fridge(fridge)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior close_the_fridge(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        store_pot_in_fridge(pot, fridge)
        close_the_fridge(fridge)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(fridge_140)putin_executor(pot_54, fridge_140)close_executor(fridge_140)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. 
##############################
From agent.py
putin_executor(pot_54, fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. pot_54 is close fridge_140. fridge_140 is close pot_54. pot_54 is inside fridge_140. pot_54 released by right hand. 
##############################
From agent.py
close_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables with pot. Then store the whole pot in the fridge.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'switchon_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_vegetable_2072)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'wash_executor(food_vegetable_2072)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'grab_executor(food_vegetable_2072)', 'wash_executor(food_vegetable_2072)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'grab_executor(pot_54)', 'walk_executor(fridge_140)', 'putin_executor(pot_54, fridge_140)', 'close_executor(fridge_140)']
Time info:
Time consume: 388 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 53
goal generate times: 10
goal correct times: 0
action_num: 35

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 10 steps
Keystate: k3 - Requires: 2 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
