From agent.py
Reset goals: The sub-goals are: 
['1. Find the book.', '2. Put the book on the table in the home office.', '3. Turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book(book:item):
    body:
        achieve close_char(char, book)

behavior __goal__():
    body:
        if exists book: item : (is_book(book) and not visited(book)):
            # If a book is found and not yet visited
            bind book: item where:
                is_book(book) and not visited(book)
            find_book(book)
        else:
            # If the book isnt found yet, explore the location
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Find the book")

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_book(book:item):
    body:
        achieve close_char(char, book)

behavior __goal__():
    body:
        if exists book: item : (is_book(book) and not visited(book)):
            # If a book is found and not yet visited
            bind book: item where:
                is_book(book) and not visited(book)
            find_book(book)
        else:
            # If the book isnt found yet, explore the location
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Find the book")

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(book_2091, bookshelf_189)walk_executor(book_2091)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. 
##############################
From agent.py
open_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. bookshelf_189 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_189)
Fail to find book_2091 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(book_2091, bookshelf_188)walk_executor(book_2091)
##############################
From agent.py
walk_executor(bookshelf_188)
Robot find: drawing_196, Robot is close to the bookshelf_188. 
##############################
From agent.py
open_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. bookshelf_188 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_188)
Fail to find book_2091 around bookshelf_188. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the table in the home office.', '2. Turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_book_on_table(book, table)
        # Place the book on the table in the home office
#goal_representation_end

##############################
From agent.py->reset_goal
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_book_on_table(book, table)
        # Place the book on the table in the home office
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(book_2091, bookshelf_137)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, drawing_118, Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_137)
Fail to find book_2091 around bookshelf_137. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2092)grab_executor(book_2092)walk_executor(table_193)put_executor(book_2092, table_193)
##############################
From agent.py
walk_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. 
##############################
From agent.py
grab_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. Grabbing book_2092 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, Robot is close to the book_2092. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2092, table_193)
Robot find: Robot is close to the book_2092. Robot is close to the table_193. table_193 is close book_2092. book_2092 is close table_193. book_2092 is on table_193. book_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bills_2009_around_filing_cabinet_378(bills:item):
    goal: not unknown(bills)
    body:
        assert is_bills(bills)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(bills,filing_cabinet_instance)
        else:
            exp(bills,filing_cabinet_instance)
    eff:
        unknown[bills]=False
        close[bills,filing_cabinet_instance]=True
        close[filing_cabinet_instance,bills]=True
    

behavior find_phone_47_around_table_127(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(phone,table_instance)
        else:
            exp(phone,table_instance)
    eff:
        unknown[phone]=False
        close[phone,table_instance]=True
        close[table_instance,phone]=True
    

behavior find_remote_control_2081_around_desk_375(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(remote_control,desk_instance)
        else:
            exp(remote_control,desk_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,desk_instance]=True
        close[desk_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select the light inside the home office

        achieve is_on(light)
        # Turn on the light in the home office
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select the light inside the home office

        achieve is_on(light)
        # Turn on the light in the home office
##############################
From agent.py-> find a plan in act()
walk_executor(light_217)switchon_executor(light_217)
##############################
From agent.py
walk_executor(light_217)
Robot find: Robot is close to the light_217. 
##############################
From agent.py
switchon_executor(light_217)
Robot find: Robot is close to the light_217. light_217 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the table in home office. Then turn on the light in the home office.
Action History:
['walk_executor(bookshelf_189)', 'open_executor(bookshelf_189)', 'walk_executor(bookshelf_188)', 'open_executor(bookshelf_188)', 'walk_executor(bookshelf_137)', 'open_executor(bookshelf_137)', 'walk_executor(book_2092)', 'grab_executor(book_2092)', 'walk_executor(table_193)', 'put_executor(book_2092, table_193)', 'walk_executor(light_217)', 'switchon_executor(light_217)']
Time info:
Time consume: 92 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 174
goal generate times: 3
goal correct times: 0
action_num: 12

Task complete rate:
1
Scene_id: 2
##############################
