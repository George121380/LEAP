From agent.py
Reset goals: The sub-goals are: 
['Boil some rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_cd_player_2060_around_computer_417(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(cd_player,computer_instance)
        else:
            exp(cd_player,computer_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,computer_instance]=True
        close[computer_instance,cd_player]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_in_pot(pot:item):
    # Function to check if there is rice in a specified pot
    symbol has_rice=exists o: item : (is_food_rice(o) and inside(o, pot))
    return has_rice

behavior boil_rice(pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Achieve state where the pot has water
        achieve_once inside(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil water with rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_rice_in_pot(pot)
        # Select a pot with rice in it

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_rice(pot, stove)
        # Boil rice using the pot and stove

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_cd_player_2060_around_computer_170(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(cd_player,computer_instance)
        else:
            exp(cd_player,computer_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,computer_instance]=True
        close[computer_instance,cd_player]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_rice_in_pot(pot: item, stove: item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once inside(food_rice, pot) # Place rice inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind food_rice: item where:
            is_food_rice(food_rice)
        # Select rice

        boil_rice_in_pot(pot, stove)
        # Boil the rice in the pot on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_rice; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_cd_player_2060_around_desk_104(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(cd_player,desk_instance)
        else:
            exp(cd_player,desk_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,desk_instance]=True
        close[desk_instance,cd_player]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
behavior boil_rice_in_pot(pot: item, stove: item, food_rice: item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once inside(food_rice, pot) # Place rice inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind food_rice: item where:
            is_food_rice(food_rice)
        # Select rice

        boil_rice_in_pot(pot, stove, food_rice)
        # Boil the rice in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_rice_in_pot(pot: item, stove: item, food_rice: item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once inside(food_rice, pot) # Place rice inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind food_rice: item where:
            is_food_rice(food_rice)
        # Select rice

        boil_rice_in_pot(pot, stove, food_rice)
        # Boil the rice in the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(kitchen_counter_230)exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(kitchen_counter_230)exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_rice_2036, kitchen_counter_230)
Fail to find food_rice_2036 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_rice_2036, fridge_289)
Find food_rice_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2036)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_rice_2036 by left hand. 
##############################
From agent.py
putin_executor(food_rice_2036, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. pot_2069 is close food_rice_2036. food_rice_2036 is inside pot_2069. food_rice_2036 is close pot_2069. food_rice_2036 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure water is added to pot_2069, as the goal "achieve has_water(pot)" requires the pot to have water before boiling the rice on the stove.
##############################
From agent.py
Human Instruction: Ensure water is added to pot_2069, as the goal "achieve has_water(pot)" requires the pot to have water before boiling the rice on the stove.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to kitchen_counter_230.
Action 10: look for food_rice_2036 around kitchen_counter_230.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_rice_2036 around fridge_289.
Action 15: Grab food_rice_2036.
Action 16: Put food_rice_2036 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior boil_rice_in_pot(pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once inside(food_rice_2036, pot) # Put the rice inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove with ID 2065

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select rice with ID 2036

        boil_rice_in_pot(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior boil_rice_in_pot(pot:item, stove:item, rice:item):
    body:
        achieve has_water(pot)
        achieve_once inside(rice, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065
        
        bind rice: item where:
            is_food_rice(rice) and id[rice]==2036
        # Select the rice with ID 2036

        boil_rice_in_pot(pot, stove, rice)
        # Boil some rice in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior boil_rice_in_pot(pot:item, stove:item, rice:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once inside(rice, pot) # Add rice to the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        bind rice: item where:
            is_food_rice(rice) and id[rice]==2036
        # Select the rice with ID 2036

        boil_rice_in_pot(pot, stove, rice)
        # Boil the rice in the pot on the stove
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil some rice in a pot." ?
Answer: Fill the pot with water. Put the rice into the pot. Put the pot on the stove and turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve once has_water(pot)
        # Fill pot with water

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve once inside(rice, pot)
        # Place the rice inside the pot

behavior boil_rice_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) 
        achieve is_on(stove) 
        # Place the pot on the stove and turn it on to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        add_water_to_pot(pot, faucet)
        add_rice_to_pot(rice, pot)
        boil_rice_on_stove(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'has_water') at line 5784, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_cd_player_2060_around_computer_170(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(cd_player,computer_instance)
        else:
            exp(cd_player,computer_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,computer_instance]=True
        close[computer_instance,cd_player]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_117(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#goal_representation
 
behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill pot with water

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)
        # Place the rice inside the pot

behavior boil_rice_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) 
        achieve is_on(stove) 
        # Place the pot on the stove and turn it on to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        add_water_to_pot(pot, faucet)
        add_rice_to_pot(rice, pot)
        boil_rice_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Ensure the pot is filled with water

behavior place_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot) # Place the rice inside the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) # Turn on the stove to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select pot

        bind stove: item where:
            is_stove(stove)
        # Select stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select faucet

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        fill_pot_with_water(pot, faucet)
        place_rice_in_pot(rice, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation

behavior boil_rice_in_pot(pot:item, stove:item, rice:item):
    body:
        achieve has_water(pot)
        achieve_once inside(rice, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot with ID 2069
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove with ID 2065
        
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select rice with ID 2036

        boil_rice_in_pot(pot, stove, rice)
        # Boil the rice in the pot on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water.', '2. Put the rice into the pot.', '3. Put the pot on the stove and turn on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve open(faucet)
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water from the faucet
 
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_392(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once open(pot)
        # Open the pot to fill with water
        achieve_once close_char(char, faucet)
        # Move close to the faucet to fill the pot
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once open(pot)
        # Open the pot to fill with water
        achieve_once close_char(char, faucet)
        # Move close to the faucet to fill the pot
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        fill_pot_with_water(pot, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has not completed the task of filling the pot with water. While the faucet was turned on and off, there is no indication that water was actually added to pot_2069. Ensure that the pot is positioned under faucet_43 when it's turned on to fill it with water.
##############################
From agent.py
Human Instruction: The robot has not completed the task of filling the pot with water. While the faucet was turned on and off, there is no indication that water was actually added to pot_2069. Ensure that the pot is positioned under faucet_43 when it's turned on to fill it with water.

Human Guidance: Fill the pot with water. Put the rice into the pot. Put the pot on the stove and turn on the stove.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to kitchen_counter_230.
Action 10: look for food_rice_2036 around kitchen_counter_230.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_rice_2036 around fridge_289.
Action 15: Grab food_rice_2036.
Action 16: Put food_rice_2036 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_pot_under_faucet(pot: item, faucet: item):
    # Function to check if the pot is positioned under the faucet
    symbol is_under_faucet = close(pot, faucet)
    return is_under_faucet

behavior position_pot_under_faucet(pot: item, faucet: item):
    body:
        achieve is_pot_under_faucet(pot, faucet)

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet with ID 43

        if not is_pot_under_faucet(pot, faucet):
            position_pot_under_faucet(pot, faucet)
        
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_117(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once close(pot, faucet)
        # Ensure the pot is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the selected faucet

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once close(pot, faucet)
        # Ensure the pot is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the selected faucet

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)put_executor(pot_2069, faucet_43)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the stove_2065. Robot is close to the food_rice_2036. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the stove_2065. Robot is close to the food_rice_2036. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
put_executor(pot_2069, faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. pot_2069 is close faucet_43. faucet_43 is close pot_2069. pot_2069 is on faucet_43. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure that the pot 2069 is positioned correctly under faucet 43 and then switch on the faucet to fill the pot with water. Make sure the pot is close to the faucet when it is turned on so that water is actually added to the pot.
##############################
From agent.py
Human Instruction: Ensure that the pot 2069 is positioned correctly under faucet 43 and then switch on the faucet to fill the pot with water. Make sure the pot is close to the faucet when it is turned on so that water is actually added to the pot.

Human Guidance: Fill the pot with water. Put the rice into the pot. Put the pot on the stove and turn on the stove.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to kitchen_counter_230.
Action 10: look for food_rice_2036 around kitchen_counter_230.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_rice_2036 around fridge_289.
Action 15: Grab food_rice_2036.
Action 16: Put food_rice_2036 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to faucet_43.
Action 21: Walk to pot_2069.
Action 22: Grab pot_2069.
Action 23: Walk to faucet_43.
Action 24: Put pot_2069 on faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_392(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close(pot, faucet)
        achieve_once has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water from the faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_405_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior position_pot_under_faucet(pot:item, faucet:item):
    body:
        achieve_once close(pot, faucet)
        # Ensure the pot is close to the faucet

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the specific pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the specific faucet with ID 43

        position_pot_under_faucet(pot, faucet)
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close(pot, faucet)
        # Ensure the pot is close to the faucet
        achieve_once has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet with ID 43

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. fill the pot with water." ?
Answer: Fill the pot with water.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_117(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close(pot, faucet)
        # Ensure the pot is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_392(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior position_pot_under_faucet(pot: item, faucet: item):
    body:
        achieve_once close(pot, faucet)

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet with ID 43

        position_pot_under_faucet(pot, faucet)
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close(pot, faucet)
        # Ensure the pot is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet with ID 43

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Fill the pot with water, then boil the rice.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Ensure the character is close to the faucet to fill the pot with water
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_rice_in_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove to boil the rice
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the specific pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the specific faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the specific stove with ID 2065

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

        boil_rice_in_pot(pot, stove)
        # Boil the rice in the pot on the stove

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_dresser_123(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(pillow,dresser_instance)
        else:
            exp(pillow,dresser_instance)
    eff:
        unknown[pillow]=False
        close[pillow,dresser_instance]=True
        close[dresser_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_close_to_faucet(pot: item, faucet: item):
    # Function to ensure the pot is close to the faucet
    symbol is_close= close(pot, faucet)
    return is_close

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if ensure_close_to_faucet(pot, faucet):
            # Check if the pot is close to the faucet
            achieve has_water(pot)

behavior boil_rice_in_pot(pot: item, stove: item, rice: item):
    body:
        achieve_once inside(rice, pot) # Add rice to the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Ensure the stove is on for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot 2069
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet 43

        fill_pot_with_water(pot, faucet)

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select rice 2036

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove 2065

        boil_rice_in_pot(pot, stove, rice)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def ensure_close_to_faucet(pot: item, faucet: item):
    # Function to ensure the pot is close to the faucet
    symbol is_close= close(pot, faucet)
    return is_close

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if ensure_close_to_faucet(pot, faucet):
            # Check if the pot is close to the faucet
            achieve has_water(pot)

behavior boil_rice_in_pot(pot: item, stove: item, rice: item):
    body:
        achieve_once inside(rice, pot) # Add rice to the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Ensure the stove is on for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot 2069
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet 43

        fill_pot_with_water(pot, faucet)

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select rice 2036

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove 2065

        boil_rice_in_pot(pot, stove, rice)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is filled with water while it is positioned under the faucet. The actions performed did not adequately fill the pot with water, as the faucet was not turned on while the pot was under it. You should position the pot under the faucet, turn on the faucet to fill the pot with water, and then continue with the boiling process.
##############################
From agent.py
Human Instruction: You need to ensure that the pot is filled with water while it is positioned under the faucet. The actions performed did not adequately fill the pot with water, as the faucet was not turned on while the pot was under it. You should position the pot under the faucet, turn on the faucet to fill the pot with water, and then continue with the boiling process.

Human Guidance: Fill the pot with water.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to kitchen_counter_230.
Action 10: look for food_rice_2036 around kitchen_counter_230.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_rice_2036 around fridge_289.
Action 15: Grab food_rice_2036.
Action 16: Put food_rice_2036 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to faucet_43.
Action 21: Walk to pot_2069.
Action 22: Grab pot_2069.
Action 23: Walk to faucet_43.
Action 24: Put pot_2069 on faucet_43.
Action 25: Grab pot_2069.
Action 26: Walk to stove_2065.
Action 27: Put pot_2069 on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, pot) # Approach the pot
        achieve close_char(char, faucet) # Position near the faucet
        achieve has_water(pot) # Fill the pot with water

behavior boil_rice_in_pot(pot:item, rice:item, stove:item):
    body:
        achieve_once inside(rice, pot) # Place rice inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        
        fill_pot_with_water(pot, faucet)
        boil_rice_in_pot(pot, rice, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, pot) # Approach the pot
        achieve close_char(char, faucet) # Position near the faucet
        achieve has_water(pot) # Fill the pot with water

behavior boil_rice_in_pot(pot:item, rice:item, stove:item):
    body:
        achieve_once inside(rice, pot) # Place rice inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        
        fill_pot_with_water(pot, faucet)
        boil_rice_in_pot(pot, rice, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is filled with water. Position the pot under the faucet and turn on the faucet to fill the pot with water. After the pot is filled, place it on the stove to proceed with boiling the rice.
##############################
From agent.py
Human Instruction: You need to ensure that the pot is filled with water. Position the pot under the faucet and turn on the faucet to fill the pot with water. After the pot is filled, place it on the stove to proceed with boiling the rice.

Human Guidance: Fill the pot with water.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to kitchen_counter_230.
Action 10: look for food_rice_2036 around kitchen_counter_230.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_rice_2036 around fridge_289.
Action 15: Grab food_rice_2036.
Action 16: Put food_rice_2036 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to faucet_43.
Action 21: Walk to pot_2069.
Action 22: Grab pot_2069.
Action 23: Walk to faucet_43.
Action 24: Put pot_2069 on faucet_43.
Action 25: Grab pot_2069.
Action 26: Walk to stove_2065.
Action 27: Put pot_2069 on stove_2065.
Action 28: Walk to faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water_and_boil_rice(pot:item, faucet:item, stove:item, rice:item):
    body:
        achieve has_water(pot) # Fill the pot with water
        achieve_once inside(rice, pot) # Add the rice to the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        fill_pot_with_water_and_boil_rice(pot, faucet, stove, rice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet) 
        achieve has_water(pot)

behavior boil_rice_in_pot(pot:item, stove:item):
    body:
        achieve_once inside(food_rice, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind food_rice: item where:
            is_food_rice(food_rice) and id[food_rice] == 2036
        # Select the rice with ID 2036

        fill_pot_with_water(pot, faucet)
        boil_rice_in_pot(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_rice; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet) 
        achieve has_water(pot)

behavior boil_rice_in_pot(pot:item, stove:item, food_rice:item):
    body:
        achieve_once inside(food_rice, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind food_rice: item where:
            is_food_rice(food_rice) and id[food_rice] == 2036
        # Select the rice with ID 2036

        fill_pot_with_water(pot, faucet)
        boil_rice_in_pot(pot, stove, food_rice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve has_water(pot) # Fill the pot with water using the faucet

behavior boil_rice_in_pot(pot:item, stove:item, rice:item):
    body:
        achieve_once inside(rice, pot) # Place the rice inside the pot
        achieve_once on(pot, stove) # Put the pot on the stove
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select the rice with ID 2036

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        fill_pot_with_water(pot, faucet) # Fill the pot with water
        boil_rice_in_pot(pot, stove, rice) # Proceed to boil the rice in the pot on the stove
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "fill the pot with water, then boil the rice." ?
Answer: Fill the pot with water. Put the rice into the pot. Put the pot on the stove and turn on the stove.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water.', '2. Put the rice into the pot.', '3. Put the pot on the stove and turn on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_182_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        achieve_once close_char(char, pot)
        achieve_once close_char(char, faucet)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        achieve_once close_char(char, pot)
        achieve_once close_char(char, faucet)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)walk_executor(faucet_43)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the stove_2065. Robot is close to the food_rice_2036. Robot is close to the pot_2069. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to position the pot under the faucet, turn on the faucet to fill the pot with water, and then ensure the pot is placed back on the stove. The actions indicate the robot turned the faucet on and off, but it's unclear if the pot was filled with water since the task requires positioning the pot under the faucet while it is on.
##############################
From agent.py
Human Instruction: You need to position the pot under the faucet, turn on the faucet to fill the pot with water, and then ensure the pot is placed back on the stove. The actions indicate the robot turned the faucet on and off, but it's unclear if the pot was filled with water since the task requires positioning the pot under the faucet while it is on.

Human Guidance: Fill the pot with water. Put the rice into the pot. Put the pot on the stove and turn on the stove.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to kitchen_counter_230.
Action 10: look for food_rice_2036 around kitchen_counter_230.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_rice_2036 around fridge_289.
Action 15: Grab food_rice_2036.
Action 16: Put food_rice_2036 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to faucet_43.
Action 21: Walk to pot_2069.
Action 22: Grab pot_2069.
Action 23: Walk to faucet_43.
Action 24: Put pot_2069 on faucet_43.
Action 25: Grab pot_2069.
Action 26: Walk to stove_2065.
Action 27: Put pot_2069 on stove_2065.
Action 28: Walk to faucet_43.
Action 29: Walk to pot_2069.
Action 30: Walk to faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item, stove:item):
    body:
        achieve_once close_char(char, pot) # Ensure the character is close to the pot
        achieve_once close_char(char, faucet) # Ensure the character is close to the faucet
        achieve_once has_water(pot) # Fill the pot with water
        achieve_once on(pot, stove) # Move the pot back to the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, faucet, stove)
        # Fill the pot with water and return it to the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item, stove:item):
    body:
        achieve_once close_char(char, pot) # Ensure the character is close to the pot
        achieve_once close_char(char, faucet) # Ensure the character is close to the faucet
        achieve_once has_water(pot) # Fill the pot with water
        achieve_once on(pot, stove) # Move the pot back to the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, faucet, stove)
        # Fill the pot with water and return it to the stove

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)walk_executor(faucet_43)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the stove_2065. Robot is close to the food_rice_2036. Robot is close to the pot_2069. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The actions show that the robot turned the faucet on and off, but the pot was not positioned under the faucet when it was turned on to ensure that the pot is filled with water. Ensure you first position the pot under the faucet while it is turned on to fill it with water, and then place it back on the stove.
##############################
From agent.py
Human Instruction: The actions show that the robot turned the faucet on and off, but the pot was not positioned under the faucet when it was turned on to ensure that the pot is filled with water. Ensure you first position the pot under the faucet while it is turned on to fill it with water, and then place it back on the stove.

Human Guidance: Fill the pot with water. Put the rice into the pot. Put the pot on the stove and turn on the stove.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to kitchen_counter_230.
Action 10: look for food_rice_2036 around kitchen_counter_230.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_rice_2036 around fridge_289.
Action 15: Grab food_rice_2036.
Action 16: Put food_rice_2036 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to faucet_43.
Action 21: Walk to pot_2069.
Action 22: Grab pot_2069.
Action 23: Walk to faucet_43.
Action 24: Put pot_2069 on faucet_43.
Action 25: Grab pot_2069.
Action 26: Walk to stove_2065.
Action 27: Put pot_2069 on stove_2065.
Action 28: Walk to faucet_43.
Action 29: Walk to pot_2069.
Action 30: Walk to faucet_43.
Action 31: Walk to pot_2069.
Action 32: Walk to faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior position_pot_and_fill_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, pot) # Approach the pot
        achieve_once inhand(pot) # Temporarily hold the pot
        achieve_once close_char(char, faucet) # Approach the faucet
        achieve_once has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        position_pot_and_fill_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior position_pot_and_fill_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, pot) # Approach the pot
        achieve_once inhand(pot) # Temporarily hold the pot
        achieve_once close_char(char, faucet) # Approach the faucet
        achieve_once has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        position_pot_and_fill_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the stove_2065. Robot is close to the food_rice_2036. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the stove_2065. Robot is close to the food_rice_2036. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure the pot is under the faucet when it is turned on to fill it with water. Currently, the pot was not positioned properly when the faucet was activated, so the pot remains empty. After filling the pot with water, you can then move on to the next sub-task.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_148(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_405_around_dresser_123(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(pillow,dresser_instance)
        else:
            exp(pillow,dresser_instance)
    eff:
        unknown[pillow]=False
        close[pillow,dresser_instance]=True
        close[dresser_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that has water

        place_rice_in_pot(rice, pot)
        # Place the rice into the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_182_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_117(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        place_rice_in_pot(rice, pot)
        # Place the rice into the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        achieve_once inside(rice, pot)
        # Put the rice into the pot

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the rice into the pot." ?
Answer: Put the rice into the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_rice_into_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water in it

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        put_rice_into_pot(rice, pot)
        # Put the rice into the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that already has water

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        place_rice_in_pot(rice, pot)
        # Place the rice into the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        achieve_once inside(rice, pot)
        # Ensure the rice is placed inside the pot

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water

        place_rice_in_pot(rice, pot)
        # Place the rice into the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        put_rice_in_pot(rice, pot)
        # Place the rice into the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_182_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_rice_into_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        put_rice_into_pot(rice, pot)
        # Put the rice into the pot

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_rice_into_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        achieve_once inhand(rice)
        # Temporarily hold the rice

        put_rice_into_pot(rice, pot)
        # Put the rice into the pot

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_rice_into_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        achieve_once inhand(rice)
        # Temporarily hold the rice

        put_rice_into_pot(rice, pot)
        # Put the rice into the pot

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2036)grab_executor(food_rice_2036)putin_executor(food_rice_2036, pot_2069)
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the pot_2069. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the pot_2069. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
putin_executor(food_rice_2036, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_rice_2036. pot_2069 is close food_rice_2036. food_rice_2036 is inside pot_2069. food_rice_2036 is close pot_2069. food_rice_2036 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_182_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot, which has water and rice

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove_and_turn_on(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Position the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_on_stove_and_turn_on(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_water(pot:item):
    # Function to check if the pot has water
    return exists obj: item : (is_pot(pot) and has_water(pot))

def is_pot_on_stove(pot:item, stove:item):
    # Function to check if the pot is placed on the stove
    return on(pot, stove)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve once on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069 and has_water(pot)
        # Select the pot with ID 2069 that has water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'on') at line 5793, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pillow_182_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#goal_representation
 
def has_water(pot:item):
    # Function to check if the pot has water
    return exists obj: item : (is_pot(obj) and obj == pot and has_water(obj))

def is_pot_on_stove(pot:item, stove:item):
    # Function to check if the pot is placed on the stove
    return on(pot, stove)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069 and has_water(pot)
        # Select the pot with ID 2069 that has water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. put the pot on the stove and turn on the stove." ?
Answer: Put the pot on the stove and turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_183_around_dresser_123(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(pillow,dresser_instance)
        else:
            exp(pillow,dresser_instance)
    eff:
        unknown[pillow]=False
        close[pillow,dresser_instance]=True
        close[dresser_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        put_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_pot_on_stove_and_turn_on(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        put_pot_on_stove_and_turn_on(pot, stove)
        # Put the pot on the stove and turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_182_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove_and_turn_on(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Put the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_on_stove_and_turn_on(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_pot_on_stove_and_turn_on(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        put_pot_on_stove_and_turn_on(pot, stove)
        # Put the pot on the stove and turn it on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove_and_turn_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Temporarily place the pot on the stove
        achieve is_on(stove) # Turn on the stove and keep it on until the task is completed

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_on_stove_and_turn_on_stove(pot, stove)
        # Place the pot on the stove and turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_406_around_dresser_123(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(pillow,dresser_instance)
        else:
            exp(pillow,dresser_instance)
    eff:
        unknown[pillow]=False
        close[pillow,dresser_instance]=True
        close[dresser_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_stove(stove: item):
    # Function to check if the stove is the target
    symbol is_stove_instance = is_stove(stove)
    return is_stove_instance

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_target_stove(stove)
        # Select the stove

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        put_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove_and_turn_on(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_on_stove_and_turn_on(pot, stove)
        # Place the pot on the stove and turn it on

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Boil some rice by pot.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_rice_2036)', 'putin_executor(food_rice_2036, pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(faucet_43)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'put_executor(pot_2069, faucet_43)', 'grab_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'walk_executor(faucet_43)', 'walk_executor(pot_2069)', 'walk_executor(faucet_43)', 'walk_executor(pot_2069)', 'walk_executor(faucet_43)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'putin_executor(food_rice_2036, pot_2069)']
Time info:
Time consume: 725 seconds
Exp_helper query times: 0
Guidance query times: 5
library scale: 29
goal generate times: 49
goal correct times: 2
action_num: 37

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
