From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water.', '2. Put the bowl on the table in the home office.', '3. Find the cat and place it on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_bowl_2141_around_kitchen_counter_122(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior fill_bowl_with_water(bowl:item, sink:item):
    body:
        achieve_once inside(bowl, sink)
        # Place the bowl inside the sink
        achieve has_water(bowl)
        # Fill the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        fill_bowl_with_water(bowl, sink)
        # Fill the selected bowl with water in the sink
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_bowl_with_water(bowl:item, sink:item):
    body:
        achieve_once inside(bowl, sink)
        # Place the bowl inside the sink
        achieve has_water(bowl)
        # Fill the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        fill_bowl_with_water(bowl, sink)
        # Fill the selected bowl with water in the sink
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(bowl_2140, kitchen_counter_122)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(sink_19)putin_executor(bowl_2140, sink_19)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_122)
Fail to find bowl_2140 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(bowl_2140, kitchen_counter_123)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(sink_19)putin_executor(bowl_2140, sink_19)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_123)
Fail to find bowl_2140 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2123)exp(bowl_2140, cutting_board_2123)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(sink_19)putin_executor(bowl_2140, sink_19)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, cutting_board_2123)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(sink_19)putin_executor(bowl_2140, sink_19)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. 
##############################
From agent.py
grab_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, mat_32, phone_2029, cleaning_solution_2143, drawing_33, Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
putin_executor(bowl_2140, sink_19)
Robot find: Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the sink_19. bowl_2140 is close sink_19. sink_19 is close bowl_2140. bowl_2140 is inside sink_19. bowl_2140 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the bowl_2140. Robot is close to the sink_19. 
##############################
From agent.py
grab_executor(bowl_2140)
Robot find: Robot is close to the bowl_2140. Robot is close to the sink_19. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_108_around_nightstand_192(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(pillow,nightstand_instance)
        else:
            exp(pillow,nightstand_instance)
    eff:
        unknown[pillow]=False
        close[pillow,nightstand_instance]=True
        close[nightstand_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140
        # Select the bowl with ID 2140

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140
        # Select the bowl with ID 2140

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office
##############################
From agent.py-> find a plan in act()
walk_executor(table_270)put_executor(bowl_2140, table_270)
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the bowl_2140. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(bowl_2140, table_270)
Robot find: Robot is close to the bowl_2140. Robot is close to the couch_269. Robot is close to the table_270. bowl_2140 is close table_270. bowl_2140 is on table_270. table_270 is close bowl_2140. bowl_2140 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_laser_pointer_2034_around_computer_209(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(laser_pointer,computer_instance)
        else:
            exp(laser_pointer,computer_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,computer_instance]=True
        close[computer_instance,laser_pointer]=True
    

#exp_behavior_end

#goal_representation
 
def is_cat_placed_on_table(cat:item, table:item):
    # Function to check if the cat is on the table
    symbol is_placed= on(cat, table)
    return is_placed

behavior find_cat_and_place(cat:item, table:item):
    body:
        if not is_cat_placed_on_table(cat, table):
            # Ensure the cat is placed on the table if its not already there
            achieve close_char(char, cat)
            achieve_once inhand(cat)
            achieve once on(cat, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        if exists cat: item : (is_cat(cat) and not visited(cat) and not is_cat_placed_on_table(cat, table)):
            bind cat: item where:
                is_cat(cat) and not visited(cat)
            find_cat_and_place(cat, table)
        else:
            foreach cat: item where:
                if is_cat(cat) and not visited(cat):
                    observe(cat, "Finding the cat")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'on') at line 5327, column 26.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_laser_pointer_2034_around_bathroom_cabinet_17(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(laser_pointer,bathroom_cabinet_instance)
        else:
            exp(laser_pointer,bathroom_cabinet_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,laser_pointer]=True
    

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#goal_representation
 
def is_cat_placed_on_table(cat:item, table:item):
    # Function to check if the cat is on the table
    symbol is_placed = exists item: item : (is_cat(cat) and on(cat, table))
    return is_placed

behavior find_cat_and_place(cat:item, table:item):
    body:
        if not is_cat_placed_on_table(cat, table):
            # Ensure the cat is placed on the table if it is not already there
            achieve close_char(char, cat)
            achieve_once inhand(cat)
            achieve_once on(cat, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        if exists cat: item : (is_cat(cat) and not visited(cat) and not is_cat_placed_on_table(cat, table)):
            bind cat: item where:
                is_cat(cat) and not visited(cat)
            find_cat_and_place(cat, table)
        else:
            foreach cat: item:
                if is_cat(cat) and not visited(cat):
                    observe(cat, "Finding the cat")

#goal_representation_end

##############################
Error is:
tuple.index(x): x not in tuple
##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_desk_193(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laser_pointer,desk_instance)
        else:
            exp(laser_pointer,desk_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,desk_instance]=True
        close[desk_instance,laser_pointer]=True
    

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
def find_cat(cat:item):
    # Function to determine if a given item is the cat
    symbol is_cat_instance= is_cat(cat)
    return is_cat_instance

behavior find_and_place_cat_on_table(cat:item, table:item):
    body:
        achieve_once on(cat, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        if exists cat: item : (find_cat(cat) and not visited(cat)):
            # If we have already found an unvisited cat, move close to it
            bind cat: item where:
                find_cat(cat) and not visited(cat)
            find_and_place_cat_on_table(cat, table)
        else:
            # Check all items to find the cat if not found initially
            foreach cat: item:
                if is_cat(cat) and not visited(cat):
                    observe(cat, "Find the cat")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_cat(cat:item):
    # Function to determine if a given item is the cat
    symbol is_cat_instance= is_cat(cat)
    return is_cat_instance

behavior find_and_place_cat_on_table(cat:item, table:item):
    body:
        achieve_once on(cat, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        if exists cat: item : (find_cat(cat) and not visited(cat)):
            # If we have already found an unvisited cat, move close to it
            bind cat: item where:
                find_cat(cat) and not visited(cat)
            find_and_place_cat_on_table(cat, table)
        else:
            # Check all items to find the cat if not found initially
            foreach cat: item:
                if is_cat(cat) and not visited(cat):
                    observe(cat, "Find the cat")

##############################
From agent.py-> find a plan in act()
walk_executor(couch_198)exp(cat_2069, couch_198)walk_executor(cat_2069)grab_executor(cat_2069)walk_executor(table_270)put_executor(cat_2069, table_270)
##############################
From agent.py
walk_executor(couch_198)
Robot find: chair_2003, instrument_guitar_2028, rag_2052, mat_203, phone_2016, clothes_jacket_2119, Robot is close to the couch_198. 
##############################
From agent.py
exp(cat_2069, couch_198)
Fail to find cat_2069 around couch_198. 
##############################
From agent.py-> find a plan in act()
walk_executor(filing_cabinet_200)open_executor(filing_cabinet_200)exp(cat_2069, filing_cabinet_200)walk_executor(cat_2069)grab_executor(cat_2069)walk_executor(table_270)put_executor(cat_2069, table_270)
##############################
From agent.py
walk_executor(filing_cabinet_200)
Robot find: drawing_202, Robot is close to the filing_cabinet_200. 
##############################
From agent.py
open_executor(filing_cabinet_200)
Robot find: envelope_2018, stereo_2050, after_shave_2051, food_food_2074, rag_2025, cd_2030, scrabble_2031, diary_2008, after_shave_2042, homework_2047, Robot is close to the envelope_2018. Robot is close to the stereo_2050. Robot is close to the after_shave_2051. Robot is close to the food_food_2074. Robot is close to the filing_cabinet_200. Robot is close to the rag_2025. Robot is close to the cd_2030. Robot is close to the scrabble_2031. Robot is close to the diary_2008. Robot is close to the after_shave_2042. Robot is close to the homework_2047. filing_cabinet_200 is opened. 
##############################
From agent.py
exp(cat_2069, filing_cabinet_200)
Fail to find cat_2069 around filing_cabinet_200. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_273)exp(cat_2069, tvstand_273)walk_executor(cat_2069)grab_executor(cat_2069)walk_executor(table_270)put_executor(cat_2069, table_270)
##############################
From agent.py
walk_executor(tvstand_273)
Robot find: cd_2145, headset_2131, cd_player_2129, remote_control_2124, dvd_player_2130, mat_284, Robot is close to the tvstand_273. 
##############################
From agent.py
exp(cat_2069, tvstand_273)
Fail to find cat_2069 around tvstand_273. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_275)exp(cat_2069, bookshelf_275)walk_executor(cat_2069)grab_executor(cat_2069)walk_executor(table_270)put_executor(cat_2069, table_270)
##############################
From agent.py
walk_executor(bookshelf_275)
Robot find: pencil_2020, Robot is close to the bookshelf_275. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cat_2069 ?
Answer: Robot, locate the target item cat_2069 inside the home_office_241. It is inside dresser_274. You can find cat_2069 by opening the dresser_274, as it is both inside and close to this dresser.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, locate the target item cat_2069 inside the home_office_241. It is inside dresser_274. You can find cat_2069 by opening the dresser_274, as it is both inside and close to this dresser.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for bowl_2140 around kitchen_counter_122.
Action 3: Walk to kitchen_counter_123.
Action 4: look for bowl_2140 around kitchen_counter_123.
Action 5: Walk to cutting_board_2123.
Action 6: look for bowl_2140 around cutting_board_2123.
Action 7: Walk to bowl_2140.
Action 8: Grab bowl_2140.
Action 9: Walk to sink_19.
Action 10: Put bowl_2140 into sink_19.
Action 11: Walk to bowl_2140.
Action 12: Grab bowl_2140.
Action 13: Walk to faucet_20.
Action 14: Switch on faucet_20.
Action 15: Switch off faucet_20.
Action 16: Walk to table_270.
Action 17: Put bowl_2140 on table_270.
Action 18: Walk to couch_198.
Action 19: look for cat_2069 around couch_198.
Action 20: Walk to filing_cabinet_200.
Action 21: Open filing_cabinet_200.
Action 22: look for cat_2069 around filing_cabinet_200.
Action 23: Walk to tvstand_273.
Action 24: look for cat_2069 around tvstand_273.
Action 25: Walk to bookshelf_275.

##############################
From agent.py
exp(cat_2069, bookshelf_275)
Fail to find cat_2069 around bookshelf_275. 
##############################
From agent.py-> find a plan in act()
walk_executor(dresser_274)open_executor(dresser_274)exp(cat_2069, dresser_274)walk_executor(cat_2069)grab_executor(cat_2069)walk_executor(table_270)put_executor(cat_2069, table_270)
##############################
From agent.py
walk_executor(dresser_274)
Robot find: Robot is close to the dresser_274. 
##############################
From agent.py
open_executor(dresser_274)
Robot find: hanger_292, hanger_293, hanger_294, blow_dryer_2057, cat_2069, check_2075, clothes_pants_2036, Robot is close to the hanger_292. Robot is close to the hanger_293. Robot is close to the hanger_294. Robot is close to the blow_dryer_2057. Robot is close to the dresser_274. Robot is close to the cat_2069. Robot is close to the check_2075. dresser_274 is opened. 
##############################
From agent.py
exp(cat_2069, dresser_274)
Find cat_2069. 
##############################
From agent.py-> find a plan in act()
grab_executor(cat_2069)walk_executor(table_270)put_executor(cat_2069, table_270)
##############################
From agent.py
grab_executor(cat_2069)
Robot find: Robot is close to the hanger_292. Robot is close to the hanger_293. Robot is close to the hanger_294. Robot is close to the blow_dryer_2057. Robot is close to the dresser_274. Robot is close to the cat_2069. Robot is close to the check_2075. Grabbing cat_2069 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: Robot is close to the cat_2069. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(cat_2069, table_270)
Robot find: Robot is close to the cat_2069. Robot is close to the couch_269. Robot is close to the table_270. cat_2069 is close table_270. table_270 is close cat_2069. cat_2069 is on table_270. cat_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a bowl of water and put the bowl on the table in home office. Then find my cat put it on the table.
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(kitchen_counter_123)', 'walk_executor(cutting_board_2123)', 'walk_executor(bowl_2140)', 'grab_executor(bowl_2140)', 'walk_executor(sink_19)', 'putin_executor(bowl_2140, sink_19)', 'walk_executor(bowl_2140)', 'grab_executor(bowl_2140)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(table_270)', 'put_executor(bowl_2140, table_270)', 'walk_executor(couch_198)', 'walk_executor(filing_cabinet_200)', 'open_executor(filing_cabinet_200)', 'walk_executor(tvstand_273)', 'walk_executor(bookshelf_275)', 'walk_executor(dresser_274)', 'open_executor(dresser_274)', 'grab_executor(cat_2069)', 'walk_executor(table_270)', 'put_executor(cat_2069, table_270)']
Time info:
Time consume: 171 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 108
goal generate times: 4
goal correct times: 0
action_num: 24

Task complete rate:
1
Scene_id: 1
##############################
