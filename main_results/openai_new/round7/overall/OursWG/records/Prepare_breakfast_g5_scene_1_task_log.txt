From agent.py
Reset goals: The sub-goals are: 
['1. Heat the milk.', '2. Add cereal to the hot milk in a cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_clothes_socks_2159_around_basket_for_clothes_2078(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk: item, stove: item, pot: item):
    body:
        achieve_once inside(milk, pot)
        # Pour the milk into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        heat_milk(milk, stove, pot)
        # Heat the milk on the stove with the pot

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior heat_milk(milk: item, stove: item, pot: item):
    body:
        achieve_once inside(milk, pot)
        # Pour the milk into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        heat_milk(milk, stove, pot)
        # Heat the milk on the stove with the pot

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(pot_2138, stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(pot_2138)putin_executor(milk_2115, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(pot_2138, stove_2135)
Find pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(pot_78)putin_executor(milk_2115, pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(milk_2115, fridge_126)
Fail to find milk_2115 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(door_61)exp(milk_2115, door_61)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(pot_78)putin_executor(milk_2115, pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(door_61)
Robot find: Robot is close to the door_61. 
##############################
From agent.py
exp(milk_2115, door_61)
Fail to find milk_2115 around door_61. 
##############################
From agent.py-> find a plan in act()
walk_executor(powersocket_282)exp(milk_2115, powersocket_282)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(pot_78)putin_executor(milk_2115, pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(powersocket_282)
Robot find: mat_284, Robot is close to the powersocket_282. 
##############################
From agent.py
exp(milk_2115, powersocket_282)
Fail to find milk_2115 around powersocket_282. 
##############################
From agent.py-> find a plan in act()
walk_executor(door_38)exp(milk_2115, door_38)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(pot_78)putin_executor(milk_2115, pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(door_38)
Robot find: Robot is close to the door_38. 
##############################
From agent.py
exp(milk_2115, door_38)
Fail to find milk_2115 around door_38. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)open_executor(pot_2138)exp(milk_2115, pot_2138)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(pot_2138)putin_executor(milk_2115, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_2138)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
open_executor(pot_2138)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. pot_2138 is opened. 
##############################
From agent.py
exp(milk_2115, pot_2138)
Fail to find milk_2115 around pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(shower_16)exp(milk_2115, shower_16)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(pot_2138)putin_executor(milk_2115, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(shower_16)
Robot find: mat_32, drawing_33, Robot is close to the shower_16. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find milk_2115 ?
Answer: The target item, milk_2115, is located inside dining_room_41. It is on table_114. Look for table_114, and you will find milk_2115 placed on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, milk_2115, is located inside dining_room_41. It is on table_114. Look for table_114, and you will find milk_2115 placed on it.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: look for pot_2138 around stove_2135.
Action 4: Walk to fridge_126.
Action 5: Switch off fridge_126.
Action 6: Open fridge_126.
Action 7: look for milk_2115 around fridge_126.
Action 8: Walk to door_61.
Action 9: look for milk_2115 around door_61.
Action 10: Walk to powersocket_282.
Action 11: look for milk_2115 around powersocket_282.
Action 12: Walk to door_38.
Action 13: look for milk_2115 around door_38.
Action 14: Walk to pot_2138.
Action 15: Open pot_2138.
Action 16: look for milk_2115 around pot_2138.
Action 17: Walk to shower_16.

##############################
From agent.py
exp(milk_2115, shower_16)
Fail to find milk_2115 around shower_16. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(milk_2115, table_114)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(pot_2138)putin_executor(milk_2115, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(milk_2115, table_114)
Find milk_2115. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(pot_2138)putin_executor(milk_2115, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(pot_2138)
Robot find: Robot is close to the milk_2115. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(milk_2115, pot_2138)
Robot find: Robot is close to the milk_2115. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. milk_2115 is close pot_2138. pot_2138 is close milk_2115. milk_2115 is inside pot_2138. milk_2115 released by right hand. 
##############################
From agent.py
grab_executor(pot_2138)
Robot find: Robot is close to the milk_2115. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_2138, stove_2135)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close pot_2138. pot_2138 is close stove_2135. pot_2138 is on stove_2135. pot_2138 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_cupboard_117(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_cereal(cereal:item):
    # Function to check if the item is cereal
    symbol is_target_cereal = is_food_cereal(cereal)
    return is_target_cereal

behavior add_cereal_to_milk(cup:item, cereal:item):
    body:
        achieve_once inside(cereal, cup) # Add the cereal into the cup with hot milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with hot milk, where the cup ID is 2087

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        add_cereal_to_milk(cup, cereal)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2073_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_measuring_cup_2012_around_cup_2134(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2134
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(measuring_cup,cup_instance)
        else:
            exp(measuring_cup,cup_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cup_instance]=True
        close[cup_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
behavior add_cereal_to_hot_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        # Place the cereal inside the cup with hot milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        bind cup: item where:
            is_cup(cup) and inside(milk_2115, cup)
        # Select the cup containing the hot milk

        add_cereal_to_hot_milk(cereal, milk_2115, cup)
        # Add the cereal to the hot milk in the cup
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: milk_2115; available variables: [Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior add_cereal_to_hot_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        # Place the cereal inside the cup with hot milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the milk with ID 2115

        bind cup: item where:
            is_cup(cup) and inside(milk, cup)
        # Select the cup containing the hot milk

        add_cereal_to_hot_milk(cereal, milk, cup)
        # Add the cereal to the hot milk in the cup
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_food_2074_around_cutting_board_2123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_food,cutting_board_instance)
        else:
            exp(food_food,cutting_board_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cutting_board_instance]=True
        close[cutting_board_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def has_hot_milk(cup: item):
    symbol hot_milk_inside = is_milk(cup) and id[cup] == 2115
    return hot_milk_inside

behavior add_cereal_to_milk(cereal: item, cup: item):
    body:
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_hot_milk(cup)
        # Select the cup with hot milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        add_cereal_to_milk(cereal, cup)
        # Add cereal to the hot milk in the cup

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. add cereal to the hot milk in a cup." ?
Answer: Find a cup to put the milk in, then add cereal into the cup.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Find a cup to put the hot milk in, then add cereal into the cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2105_around_cupboard_117(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

behavior find_measuring_cup_2012_around_cup_2132(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2132
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(measuring_cup,cup_instance)
        else:
            exp(measuring_cup,cup_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cup_instance]=True
        close[cup_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
def find_cereal(cereal:item):
    # Function to check if the item is cereal
    symbol is_target_cereal = is_food_cereal(cereal)
    return is_target_cereal

behavior add_cereal_to_cup(cereal: item, cup: item):
    body:
        achieve_once inside(cereal, cup)
        # Add cereal into the cup

behavior __goal__():
    body:
        if not exists cup: item : (is_cup(cup) and not visited(cup)):
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Find the cup")
        else:
            bind cup: item where:
                is_cup(cup) and not visited(cup)
            achieve close_char(char, cup)

        if not exists cereal: item : (find_cereal(cereal) and not visited(cereal)):
            foreach cereal: item:
                if find_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Find the cereal")
        else:
            bind cereal: item where:
                find_cereal(cereal) and not visited(cereal)
            add_cereal_to_cup(cereal, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cup') at line 5456, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_measuring_cup_2012_around_cup_2134(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2134
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(measuring_cup,cup_instance)
        else:
            exp(measuring_cup,cup_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cup_instance]=True
        close[cup_instance,measuring_cup]=True
    

behavior find_food_food_2094_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#goal_representation
 
behavior add_cereal_to_cup(cereal: item, cup: item):
    body:
        achieve_once inside(cereal, cup)
        # Add cereal into the cup

behavior __goal__():
    body:
        if not exists cup: item : (is_cup(cup) and not visited(cup)):
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Find the cup")
        else:
            bind cup: item where:
                is_cup(cup) and not visited(cup)
            achieve close_char(char, cup)

        if not exists cereal: item : (is_food_cereal(cereal) and not visited(cereal)):
            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Find the cereal")
        else:
            bind cereal: item where:
                is_food_cereal(cereal) and not visited(cereal)
            add_cereal_to_cup(cereal, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cup') at line 5451, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_measuring_cup_2012_around_cup_2049(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2049
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(measuring_cup,cup_instance)
        else:
            exp(measuring_cup,cup_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cup_instance]=True
        close[cup_instance,measuring_cup]=True
    

behavior find_food_food_1000_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#goal_representation
 
behavior add_cereal_to_cup(cereal: item, cup: item):
    body:
        achieve_once inside(cereal, cup)
        # Add cereal into the cup

behavior __goal__():
    body:
        if not exists cup: item : (is_cup(cup) and not visited(cup)):
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Find the cup")
        else:
            bind cup: item where:
                is_cup(cup) and not visited(cup)
            achieve close_char(char, cup)

        if not exists cereal: item : (is_food_cereal(cereal) and not visited(cereal)):
            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Find the cereal")
        else:
            bind cereal: item where:
                is_food_cereal(cereal) and not visited(cereal)
            add_cereal_to_cup(cereal, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_cup_2134(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2134
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(measuring_cup,cup_instance)
        else:
            exp(measuring_cup,cup_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cup_instance]=True
        close[cup_instance,measuring_cup]=True
    

behavior find_food_food_2094_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_add_cereal_to_cup(cup:item, cereal:item):
    body:
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to put the milk in

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal to add to the cup

        find_and_add_cereal_to_cup(cup, cereal)
        # Add cereal to the cup
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior find_and_add_cereal_to_cup(cup:item, cereal:item):
    body:
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to put the milk in

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal to add to the cup

        find_and_add_cereal_to_cup(cup, cereal)
        # Add cereal to the cup
##############################
From agent.py-> find a plan in act()
walk_executor(food_cereal_2087)grab_executor(food_cereal_2087)walk_executor(cup_2132)putin_executor(food_cereal_2087, cup_2132)
##############################
From agent.py
walk_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. 
##############################
From agent.py
grab_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. Grabbing food_cereal_2087 by right hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the food_cereal_2087. Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
putin_executor(food_cereal_2087, cup_2132)
Robot find: Robot is close to the food_cereal_2087. Robot is close to the table_114. Robot is close to the cup_2132. cup_2132 is close food_cereal_2087. food_cereal_2087 is inside cup_2132. food_cereal_2087 is close cup_2132. food_cereal_2087 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(door_61)', 'walk_executor(powersocket_282)', 'walk_executor(door_38)', 'walk_executor(pot_2138)', 'open_executor(pot_2138)', 'walk_executor(shower_16)', 'walk_executor(table_114)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(pot_2138)', 'putin_executor(milk_2115, pot_2138)', 'grab_executor(pot_2138)', 'walk_executor(stove_2135)', 'put_executor(pot_2138, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_cereal_2087)', 'grab_executor(food_cereal_2087)', 'walk_executor(cup_2132)', 'putin_executor(food_cereal_2087, cup_2132)']
Time info:
Time consume: 223 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 121
goal generate times: 6
goal correct times: 0
action_num: 24

Task complete rate:
Keystate: k1 - Requires: 12 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
