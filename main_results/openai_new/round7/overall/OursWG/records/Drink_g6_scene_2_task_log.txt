From agent.py
Reset goals: The sub-goals are: 
['1. Find and prepare a lemon by washing and slicing it.', '2. Boil water and dissolve the sugar in it.', '3. Add the sliced lemon to the water.', '4. Pour the lemon water into a cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_lemon(lemon:item, cutting_board:item, knife:item, sink:item):
    body:
        achieve_once inhand(lemon) # Temporarily hold the lemon for washing
        achieve_once inside(lemon, sink) # Put the lemon in the sink for washing
        wash(lemon) # Wash the lemon
        achieve_once on(lemon, cutting_board) # Place the cleaned lemon on the cutting board
        achieve cut(lemon) # Cut the lemon

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        prepare_lemon(lemon, cutting_board, knife, sink)
        # Find and prepare the lemon by washing and slicing it

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_lemon(lemon:item, cutting_board:item, knife:item, sink:item):
    body:
        achieve_once inhand(lemon) # Temporarily hold the lemon for washing
        achieve_once inside(lemon, sink) # Put the lemon in the sink for washing
        wash(lemon) # Wash the lemon
        achieve_once on(lemon, cutting_board) # Place the cleaned lemon on the cutting board
        achieve cut(lemon) # Cut the lemon

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        prepare_lemon(lemon, cutting_board, knife, sink)
        # Find and prepare the lemon by washing and slicing it

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_lemon_2061, fridge_140)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(sink_133)putin_executor(food_lemon_2061, sink_133)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)wash_executor(food_lemon_2061)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_lemon_2061, fridge_140)
Find food_lemon_2061. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_lemon_2061)walk_executor(sink_133)putin_executor(food_lemon_2061, sink_133)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)wash_executor(food_lemon_2061)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, pot_54, Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
putin_executor(food_lemon_2061, sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. food_lemon_2061 is close sink_133. sink_133 is close food_lemon_2061. food_lemon_2061 is inside sink_133. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
wash_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_lemon_2061, cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_lemon_2061 is close cutting_board_2080. cutting_board_2080 is close food_lemon_2061. food_lemon_2061 is on cutting_board_2080. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(sink_133)putin_executor(food_lemon_2061, sink_133)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)wash_executor(food_lemon_2061)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(milk_2074)exp(knife_2036, milk_2074)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
putin_executor(food_lemon_2061, sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. food_lemon_2061 is close sink_133. food_lemon_2061 is inside sink_133. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
wash_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the food_lemon_2061. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_lemon_2061, cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_lemon_2061 is close cutting_board_2080. food_lemon_2061 is on cutting_board_2080. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the fridge_140. 
##############################
From agent.py
exp(knife_2036, milk_2074)
Fail to find knife_2036 around milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(sink_133)putin_executor(food_lemon_2061, sink_133)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_lemon_2061)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(walllamp_291)exp(knife_2036, walllamp_291)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
putin_executor(food_lemon_2061, sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. food_lemon_2061 is close sink_133. food_lemon_2061 is inside sink_133. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_lemon_2061, cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_lemon_2061 is close cutting_board_2080. food_lemon_2061 is on cutting_board_2080. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(walllamp_291)
Robot find: Robot is close to the walllamp_291. 
##############################
From agent.py
exp(knife_2036, walllamp_291)
Fail to find knife_2036 around walllamp_291. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(sink_133)putin_executor(food_lemon_2061, sink_133)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_lemon_2061)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(stove_2090)open_executor(stove_2090)exp(knife_2036, stove_2090)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
putin_executor(food_lemon_2061, sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. food_lemon_2061 is close sink_133. food_lemon_2061 is inside sink_133. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_lemon_2061, cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_lemon_2061 is close cutting_board_2080. food_lemon_2061 is on cutting_board_2080. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(knife_2036, stove_2090)
Fail to find knife_2036 around stove_2090. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(sink_133)putin_executor(food_lemon_2061, sink_133)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_lemon_2061)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(table_127)exp(knife_2036, table_127)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
putin_executor(food_lemon_2061, sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. food_lemon_2061 is close sink_133. food_lemon_2061 is inside sink_133. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_lemon_2061, cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_lemon_2061 is close cutting_board_2080. food_lemon_2061 is on cutting_board_2080. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(knife_2036, table_127)
Fail to find knife_2036 around table_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(sink_133)putin_executor(food_lemon_2061, sink_133)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_lemon_2061)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
putin_executor(food_lemon_2061, sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. food_lemon_2061 is close sink_133. food_lemon_2061 is inside sink_133. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_lemon_2061, cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_lemon_2061 is close cutting_board_2080. food_lemon_2061 is on cutting_board_2080. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(sink_133)putin_executor(food_lemon_2061, sink_133)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_lemon_2061)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_lemon_2061)cut_executor(food_lemon_2061)
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
putin_executor(food_lemon_2061, sink_133)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. food_lemon_2061 is close sink_133. food_lemon_2061 is inside sink_133. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the sink_133. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_lemon_2061, cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_lemon_2061 is close cutting_board_2080. food_lemon_2061 is on cutting_board_2080. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. 
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. 
##############################
From agent.py
cut_executor(food_lemon_2061)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_oven_141(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(blender,oven_instance)
        else:
            exp(blender,oven_instance)
    eff:
        unknown[blender]=False
        close[blender,oven_instance]=True
        close[oven_instance,blender]=True
    

behavior find_crayon_2020_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_water_and_dissolve_sugar(pot:item, stove:item, sugar:item):
    body:
        achieve has_water(pot)
        achieve_once inside(sugar, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        boil_water_and_dissolve_sugar(pot, stove, sugar)
        # Boil water in the pot and dissolve sugar in it using the stove
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_water_and_dissolve_sugar(pot:item, stove:item, sugar:item):
    body:
        achieve has_water(pot)
        achieve_once inside(sugar, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        boil_water_and_dissolve_sugar(pot, stove, sugar)
        # Boil water in the pot and dissolve sugar in it using the stove
 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(pot_2093)putin_executor(food_sugar_2070, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by left hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the knife_2036. Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the knife_2036. Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the knife_2036. Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(food_sugar_2070)
Robot find: Robot is close to the knife_2036. Robot is close to the pot_2093. Robot is close to the fridge_140. Robot is close to the food_sugar_2070. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_oven_141(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(blender,oven_instance)
        else:
            exp(blender,oven_instance)
    eff:
        unknown[blender]=False
        close[blender,oven_instance]=True
        close[oven_instance,blender]=True
    

behavior find_stereo_2007_around_bookshelf_260(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(stereo,bookshelf_instance)
        else:
            exp(stereo,bookshelf_instance)
    eff:
        unknown[stereo]=False
        close[stereo,bookshelf_instance]=True
        close[bookshelf_instance,stereo]=True
    

behavior find_crayon_2020_around_bookshelf_260(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(crayon,bookshelf_instance)
        else:
            exp(crayon,bookshelf_instance)
    eff:
        unknown[crayon]=False
        close[crayon,bookshelf_instance]=True
        close[bookshelf_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
def prepare_sugar_in_boiling_water(pot: item, stove: item, sugar: item):
    achieve has_water(pot)
    achieve_once inside(sugar, pot)
    achieve_once on(pot, stove)
    achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        prepare_sugar_in_boiling_water(pot, stove, sugar)
        # Boil water and dissolve the sugar in it using the pot on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_stereo_2007_around_tvstand_135(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#goal_representation
 
behavior boil_water_and_dissolve_sugar(pot:item, stove:item, sugar:item):
    body:
        achieve has_water(pot)
        achieve_once inside(sugar, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        boil_water_and_dissolve_sugar(pot, stove, sugar)
        # Boil water and dissolve the sugar in it using the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_water_and_dissolve_sugar(pot:item, stove:item, sugar:item):
    body:
        achieve has_water(pot)
        achieve_once inside(sugar, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        boil_water_and_dissolve_sugar(pot, stove, sugar)
        # Boil water and dissolve the sugar in it using the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)put_executor(knife_2036, kitchen_counter_128)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(pot_2093)putin_executor(food_sugar_2070, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: Robot is close to the knife_2036. Robot is close to the pot_2093. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(knife_2036, kitchen_counter_128)
Robot find: Robot is close to the knife_2036. Robot is close to the pot_2093. Robot is close to the kitchen_counter_128. knife_2036 is close kitchen_counter_128. kitchen_counter_128 is close knife_2036. knife_2036 is on kitchen_counter_128. knife_2036 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2070)
Robot find: Robot is close to the pot_2093. Robot is close to the fridge_140. Robot is close to the food_sugar_2070. 
##############################
From agent.py
grab_executor(food_sugar_2070)
Robot find: Robot is close to the pot_2093. Robot is close to the fridge_140. Robot is close to the food_sugar_2070. Grabbing food_sugar_2070 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the food_sugar_2070. 
##############################
From agent.py
putin_executor(food_sugar_2070, pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the food_sugar_2070. food_sugar_2070 is inside pot_2093. food_sugar_2070 is close pot_2093. pot_2093 is close food_sugar_2070. food_sugar_2070 released by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_2111_around_computer_2110(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon) and id[lemon] == 2061
        # Select the sliced lemon with ID 2061

        bind water: item where:
            has_water(water) and id[water] == 2093
        # Select the water container with ID 2093

        achieve_once inside(lemon, water)
        # Add the sliced lemon into the water

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon) and id[lemon] == 2061
        # Select the sliced lemon with ID 2061

        bind water: item where:
            has_water(water) and id[water] == 2093
        # Select the water container with ID 2093

        achieve_once inside(lemon, water)
        # Add the sliced lemon into the water

##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(pot_2093)putin_executor(food_lemon_2061, pot_2093)
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the stove_2090. Robot is close to the pot_2093. Robot is close to the food_sugar_2070. 
##############################
From agent.py
putin_executor(food_lemon_2061, pot_2093)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the stove_2090. Robot is close to the pot_2093. Robot is close to the food_sugar_2070. food_lemon_2061 is close pot_2093. food_lemon_2061 is inside pot_2093. pot_2093 is close food_lemon_2061. food_lemon_2061 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_table_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_bowl_2096_around_bowl_2096(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2096
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(bowl,bowl_instance)
        else:
            exp(bowl,bowl_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bowl_instance]=True
        close[bowl_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_lemon_water_into_cup(lemon_water:item, cup:item):
    body:
        achieve_once inside(lemon_water, cup)

behavior __goal__():
    body:
        bind lemon_water: item where:
            is_pot(lemon_water) and has_water(lemon_water)
        # Select the pot with lemon water

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        pour_lemon_water_into_cup(lemon_water, cup)
        # Pour the lemon water into the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_lemon_water_into_cup(lemon_water:item, cup:item):
    body:
        achieve_once inside(lemon_water, cup)

behavior __goal__():
    body:
        bind lemon_water: item where:
            is_pot(lemon_water) and has_water(lemon_water)
        # Select the pot with lemon water

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        pour_lemon_water_into_cup(lemon_water, cup)
        # Pour the lemon water into the cup

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(cup_2087)putin_executor(pot_2093, cup_2087)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(cup_2087)putin_executor(pot_2093, cup_2087)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the stove_2090. Robot is close to the pot_2093. Robot is close to the food_sugar_2070. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the stove_2090. Robot is close to the pot_2093. Robot is close to the food_sugar_2070. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the pot_2093. Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
putin_executor(pot_2093, cup_2087)
Robot find: Robot is close to the pot_2093. Robot is close to the table_123. Robot is close to the cup_2087. pot_2093 is inside cup_2087. cup_2087 is close pot_2093. pot_2093 is close cup_2087. pot_2093 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to pour the contents of the pot into the cup. Instead, it mistakenly put the pot inside the cup.
##############################
From agent.py
Human Instruction: The robot needs to pour the contents of the pot into the cup. Instead, it mistakenly put the pot inside the cup.

Trial and Error: You can not grab food_sugar_2070
The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_lemon_2061 around fridge_140.
Action 5: Grab food_lemon_2061.
Action 6: Walk to sink_133.
Action 7: Put food_lemon_2061 into sink_133.
Action 8: Walk to food_lemon_2061.
Action 9: Grab food_lemon_2061.
Action 10: Wash food_lemon_2061.
Action 11: Walk to faucet_134.
Action 12: Switch off faucet_134.
Action 13: Walk to cutting_board_2080.
Action 14: Put food_lemon_2061 on cutting_board_2080.
Action 15: Walk to knifeblock_52.
Action 16: look for knife_2036 around knifeblock_52.
Action 17: Walk to food_lemon_2061.
Action 18: Grab food_lemon_2061.
Action 19: Walk to sink_133.
Action 20: Put food_lemon_2061 into sink_133.
Action 21: Walk to food_lemon_2061.
Action 22: Grab food_lemon_2061.
Action 23: Wash food_lemon_2061.
Action 24: Walk to faucet_308.
Action 25: Switch off faucet_308.
Action 26: Walk to cutting_board_2080.
Action 27: Put food_lemon_2061 on cutting_board_2080.
Action 28: Walk to milk_2074.
Action 29: look for knife_2036 around milk_2074.
Action 30: Walk to food_lemon_2061.
Action 31: Grab food_lemon_2061.
Action 32: Walk to sink_133.
Action 33: Put food_lemon_2061 into sink_133.
Action 34: Walk to food_lemon_2061.
Action 35: Grab food_lemon_2061.
Action 36: Walk to faucet_134.
Action 37: Switch on faucet_134.
Action 38: Wash food_lemon_2061.
Action 39: Switch off faucet_134.
Action 40: Walk to cutting_board_2080.
Action 41: Put food_lemon_2061 on cutting_board_2080.
Action 42: Walk to walllamp_291.
Action 43: look for knife_2036 around walllamp_291.
Action 44: Walk to food_lemon_2061.
Action 45: Grab food_lemon_2061.
Action 46: Walk to sink_133.
Action 47: Put food_lemon_2061 into sink_133.
Action 48: Walk to food_lemon_2061.
Action 49: Grab food_lemon_2061.
Action 50: Walk to faucet_134.
Action 51: Switch on faucet_134.
Action 52: Wash food_lemon_2061.
Action 53: Switch off faucet_134.
Action 54: Walk to cutting_board_2080.
Action 55: Put food_lemon_2061 on cutting_board_2080.
Action 56: Walk to stove_2090.
Action 57: Open stove_2090.
Action 58: look for knife_2036 around stove_2090.
Action 59: Walk to food_lemon_2061.
Action 60: Grab food_lemon_2061.
Action 61: Walk to sink_133.
Action 62: Put food_lemon_2061 into sink_133.
Action 63: Walk to food_lemon_2061.
Action 64: Grab food_lemon_2061.
Action 65: Walk to faucet_134.
Action 66: Switch on faucet_134.
Action 67: Wash food_lemon_2061.
Action 68: Switch off faucet_134.
Action 69: Walk to cutting_board_2080.
Action 70: Put food_lemon_2061 on cutting_board_2080.
Action 71: Walk to table_127.
Action 72: look for knife_2036 around table_127.
Action 73: Walk to food_lemon_2061.
Action 74: Grab food_lemon_2061.
Action 75: Walk to sink_133.
Action 76: Put food_lemon_2061 into sink_133.
Action 77: Walk to food_lemon_2061.
Action 78: Grab food_lemon_2061.
Action 79: Walk to faucet_134.
Action 80: Switch on faucet_134.
Action 81: Wash food_lemon_2061.
Action 82: Switch off faucet_134.
Action 83: Walk to cutting_board_2080.
Action 84: Put food_lemon_2061 on cutting_board_2080.
Action 85: Walk to dishwasher_143.
Action 86: Open dishwasher_143.
Action 87: look for knife_2036 around dishwasher_143.
Action 88: Walk to food_lemon_2061.
Action 89: Grab food_lemon_2061.
Action 90: Walk to sink_133.
Action 91: Put food_lemon_2061 into sink_133.
Action 92: Walk to food_lemon_2061.
Action 93: Grab food_lemon_2061.
Action 94: Walk to faucet_134.
Action 95: Switch on faucet_134.
Action 96: Wash food_lemon_2061.
Action 97: Switch off faucet_134.
Action 98: Walk to cutting_board_2080.
Action 99: Put food_lemon_2061 on cutting_board_2080.
Action 100: Walk to knife_2036.
Action 101: Grab knife_2036.
Action 102: Walk to food_lemon_2061.
Action 103: Cut food_lemon_2061.
Action 104: Walk to pot_2093.
Action 105: Open pot_2093.
Action 106: Grab pot_2093.
Action 107: Walk to faucet_134.
Action 108: Switch on faucet_134.
Action 109: Switch off faucet_134.
Action 110: Walk to food_sugar_2070.
Action 111: Walk to kitchen_counter_128.
Action 112: Put knife_2036 on kitchen_counter_128.
Action 113: Walk to food_sugar_2070.
Action 114: Grab food_sugar_2070.
Action 115: Walk to pot_2093.
Action 116: Put food_sugar_2070 into pot_2093.
Action 117: Walk to stove_2090.
Action 118: Put pot_2093 on stove_2090.
Action 119: Switch on stove_2090.
Action 120: Walk to food_lemon_2061.
Action 121: Grab food_lemon_2061.
Action 122: Walk to pot_2093.
Action 123: Put food_lemon_2061 into pot_2093.
Action 124: Walk to table_123.
Action 125: look for cup_2087 around table_123.
Action 126: Walk to pot_2093.
Action 127: Grab pot_2093.
Action 128: Walk to cup_2087.
Action 129: Put pot_2093 into cup_2087.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_lemon_water_into_cup(pot:item, cup:item):
    body:
        achieve_once inside(pot, cup)
        # Temporarily position the pot to pour the contents into the cup
      
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inside(pot, cup_2087)
        # Select the pot not already inside the cup
        
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087
        
        pour_lemon_water_into_cup(pot, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup_2087; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_scarf_2079_around_tablelamp_236(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==236
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(clothes_scarf,tablelamp_instance)
        else:
            exp(clothes_scarf,tablelamp_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,tablelamp_instance]=True
        close[tablelamp_instance,clothes_scarf]=True
    

behavior find_cup_2087_around_tablelamp_358(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==358
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(cup,tablelamp_instance)
        else:
            exp(cup,tablelamp_instance)
    eff:
        unknown[cup]=False
        close[cup,tablelamp_instance]=True
        close[tablelamp_instance,cup]=True
    

#goal_representation
behavior pour_lemon_water_into_cup(pot:item, cup:item):
    body:
        achieve_once inside(pot, cup)
        # Temporarily position the pot to pour the contents into the cup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087
        
        pour_lemon_water_into_cup(pot, cup)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_oven_141(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(cup,oven_instance)
        else:
            exp(cup,oven_instance)
    eff:
        unknown[cup]=False
        close[cup,oven_instance]=True
        close[oven_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def find_cup_on_table(cup:item):
    # Function to check if there is a cup on the table
    symbol has_cup= exists o: item : (is_cup(o) and on(o, table))
    return has_cup

behavior pour_lemon_water_into_cup(pot:item, cup:item):
    body:
        achieve_once inside(lemon_water, cup)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inside(pot, kitchen_counter_128)
        # Select the pot

        bind table: item where:
            is_table(table) and inside(table, kitchen)
        # Select a table in the kitchen

        if exists cup: item : (is_cup(cup) and find_cup_on_table(table)):
            bind cup: item where:
                is_cup(cup) and find_cup_on_table(table)
            pour_lemon_water_into_cup(pot, cup)
        else:
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check if this is a cup for lemon water")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: table; available variables: [Variable<cup: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2089_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#goal_representation
 
def find_cup_on_table(table:item):
    # Function to check if there is a cup on the table
    symbol has_cup= exists o: item : (is_cup(o) and on(o, table))
    return has_cup

behavior pour_lemon_water_into_cup(pot:item, cup:item):
    body:
        achieve_once inside(lemon_water, cup)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inside(pot, kitchen_counter_128)
        # Select the pot

        bind table: item where:
            is_table(table) and inside(table, kitchen)
        # Select a table in the kitchen

        if exists cup: item : (is_cup(cup) and find_cup_on_table(table)):
            bind cup: item where:
                is_cup(cup) and find_cup_on_table(table)
            pour_lemon_water_into_cup(pot, cup)
        else:
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check if this is a cup for lemon water")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: lemon_water; available variables: [Variable<pot: item>, Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_cup_2006_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#goal_representation
 
def find_cup_on_table(table:item):
    # Function to check if there is a cup on the table
    symbol has_cup= exists o: item : (is_cup(o) and on(o, table))
    return has_cup

behavior pour_lemon_water_into_cup(pot:item, lemon_water:item, cup:item):
    body:
        achieve_once inside(lemon_water, cup)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inside(pot, kitchen_counter_128)
        # Select the pot

        bind table: item where:
            is_table(table) and inside(table, kitchen)
        # Select a table in the kitchen

        bind lemon_water: item where:
            is_food_food(lemon_water) and inside(lemon_water, pot)
        # Select the lemon water inside the pot

        if exists cup: item : (is_cup(cup) and find_cup_on_table(table)):
            bind cup: item where:
                is_cup(cup) and find_cup_on_table(table)
            pour_lemon_water_into_cup(pot, lemon_water, cup)
        else:
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check if this is a cup for lemon water")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior pour_lemon_water(pot:item, cup:item):
    body:
        achieve_once inside(pot, cup)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot containing lemon water

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        pour_lemon_water(pot, cup)
        # Pour the lemon water from the pot into the cup
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "4. pour the lemon water into a cup." ?
Answer: Find a cup and pour the lemon water, which already contains the sliced lemon and dissolved sugar, into the cup.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Find a cup and pour the lemon water into it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_a_cup(cup:item):
    body:
        achieve close_char(char, cup)

behavior pour_lemon_water_into_cup(pot:item, cup:item):
    body:
        achieve_once inside(pot, cup)

behavior __goal__():
    body:
        if exists cup: item : (is_cup(cup) and not visited(cup)):
            bind cup: item where:
                is_cup(cup) and not visited(cup)
            find_a_cup(cup)
        else:
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Find a cup")
        
        bind pot: item where:
            is_pot(pot)
        # Select the pot containing lemon water

        pour_lemon_water_into_cup(pot, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2087_around_washing_machine_2041(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cup,washing_machine_instance)
        else:
            exp(cup,washing_machine_instance)
    eff:
        unknown[cup]=False
        close[cup,washing_machine_instance]=True
        close[washing_machine_instance,cup]=True
    

#goal_representation
behavior find_a_cup(cup:item):
    body:
        achieve close_char(char, cup)

behavior pour_lemon_water_into_cup(pot:item, cup:item):
    body:
        achieve_once inside(pot, cup)

behavior __goal__():
    body:
        if exists cup: item : (is_cup(cup) and not visited(cup)):
            bind cup: item where:
                is_cup(cup) and not visited(cup)
            find_a_cup(cup)
        else:
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Find a cup")
        
        bind pot: item where:
            is_pot(pot)
        # Select the pot containing lemon water

        pour_lemon_water_into_cup(pot, cup)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2087_around_washing_machine_2041(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cup,washing_machine_instance)
        else:
            exp(cup,washing_machine_instance)
    eff:
        unknown[cup]=False
        close[cup,washing_machine_instance]=True
        close[washing_machine_instance,cup]=True
    

#goal_representation
 
behavior find_a_cup(cup:item):
    body:
        achieve close_char(char, cup)

behavior pour_lemon_water_into_cup(pot:item, cup:item):
    body:
        achieve_once inside(pot, cup)

behavior __goal__():
    body:
        if exists cup: item : (is_cup(cup) and not visited(cup)):
            bind cup: item where:
                is_cup(cup) and not visited(cup)
            find_a_cup(cup)
        else:
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Find a cup")
        
        bind pot: item where:
            is_pot(pot)
        # Select the pot containing lemon water

        pour_lemon_water_into_cup(pot, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind lemon_water_pot: item where:
            is_pot(lemon_water_pot) and has_water(lemon_water_pot) and inside(food_sugar_2070, lemon_water_pot)
        # Select the pot with lemon water and sugar

        achieve_once on(lemon_water_pot, cup)
        # Pour the lemon water from the pot into the selected cup
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_sugar_2070; available variables: [Variable<lemon_water_pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2087_around_washing_machine_2041(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cup,washing_machine_instance)
        else:
            exp(cup,washing_machine_instance)
    eff:
        unknown[cup]=False
        close[cup,washing_machine_instance]=True
        close[washing_machine_instance,cup]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind lemon_water_pot: item where:
            is_pot(lemon_water_pot) and has_water(lemon_water_pot)
        # Select the pot with lemon water

        bind sugar: item where:
            is_food_sugar(sugar) and inside(sugar, lemon_water_pot)
        # Bind sugar to ensure it is inside the lemon water pot

        achieve_once on(lemon_water_pot, cup)
        # Pour the lemon water from the pot into the selected cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind lemon_water_pot: item where:
            is_pot(lemon_water_pot) and has_water(lemon_water_pot)
        # Select the pot with lemon water

        bind sugar: item where:
            is_food_sugar(sugar) and inside(sugar, lemon_water_pot)
        # Bind sugar to ensure it is inside the lemon water pot

        achieve_once on(lemon_water_pot, cup)
        # Pour the lemon water from the pot into the selected cup

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)put_executor(pot_2093, cup_2087)
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the table_123. Robot is close to the cup_2087. Grabbing pot_2093 by right hand. 
##############################
From agent.py
put_executor(pot_2093, cup_2087)
Robot find: Robot is close to the pot_2093. Robot is close to the table_123. Robot is close to the cup_2087. pot_2093 is close cup_2087. pot_2093 is on cup_2087. pot_2093 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to correctly pour the lemon water from the pot into the cup. It mistakenly placed the pot inside or on the cup, which does not fulfill the task requirement of pouring the contents. Amend the process to ensure the contents are poured.
##############################
From agent.py
Human Instruction: The robot needs to correctly pour the lemon water from the pot into the cup. It mistakenly placed the pot inside or on the cup, which does not fulfill the task requirement of pouring the contents. Amend the process to ensure the contents are poured.

Human Guidance: Find a cup and pour the lemon water, which already contains the sliced lemon and dissolved sugar, into the cup.
Trial and Error: You can not grab food_sugar_2070
The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_lemon_2061 around fridge_140.
Action 5: Grab food_lemon_2061.
Action 6: Walk to sink_133.
Action 7: Put food_lemon_2061 into sink_133.
Action 8: Walk to food_lemon_2061.
Action 9: Grab food_lemon_2061.
Action 10: Wash food_lemon_2061.
Action 11: Walk to faucet_134.
Action 12: Switch off faucet_134.
Action 13: Walk to cutting_board_2080.
Action 14: Put food_lemon_2061 on cutting_board_2080.
Action 15: Walk to knifeblock_52.
Action 16: look for knife_2036 around knifeblock_52.
Action 17: Walk to food_lemon_2061.
Action 18: Grab food_lemon_2061.
Action 19: Walk to sink_133.
Action 20: Put food_lemon_2061 into sink_133.
Action 21: Walk to food_lemon_2061.
Action 22: Grab food_lemon_2061.
Action 23: Wash food_lemon_2061.
Action 24: Walk to faucet_308.
Action 25: Switch off faucet_308.
Action 26: Walk to cutting_board_2080.
Action 27: Put food_lemon_2061 on cutting_board_2080.
Action 28: Walk to milk_2074.
Action 29: look for knife_2036 around milk_2074.
Action 30: Walk to food_lemon_2061.
Action 31: Grab food_lemon_2061.
Action 32: Walk to sink_133.
Action 33: Put food_lemon_2061 into sink_133.
Action 34: Walk to food_lemon_2061.
Action 35: Grab food_lemon_2061.
Action 36: Walk to faucet_134.
Action 37: Switch on faucet_134.
Action 38: Wash food_lemon_2061.
Action 39: Switch off faucet_134.
Action 40: Walk to cutting_board_2080.
Action 41: Put food_lemon_2061 on cutting_board_2080.
Action 42: Walk to walllamp_291.
Action 43: look for knife_2036 around walllamp_291.
Action 44: Walk to food_lemon_2061.
Action 45: Grab food_lemon_2061.
Action 46: Walk to sink_133.
Action 47: Put food_lemon_2061 into sink_133.
Action 48: Walk to food_lemon_2061.
Action 49: Grab food_lemon_2061.
Action 50: Walk to faucet_134.
Action 51: Switch on faucet_134.
Action 52: Wash food_lemon_2061.
Action 53: Switch off faucet_134.
Action 54: Walk to cutting_board_2080.
Action 55: Put food_lemon_2061 on cutting_board_2080.
Action 56: Walk to stove_2090.
Action 57: Open stove_2090.
Action 58: look for knife_2036 around stove_2090.
Action 59: Walk to food_lemon_2061.
Action 60: Grab food_lemon_2061.
Action 61: Walk to sink_133.
Action 62: Put food_lemon_2061 into sink_133.
Action 63: Walk to food_lemon_2061.
Action 64: Grab food_lemon_2061.
Action 65: Walk to faucet_134.
Action 66: Switch on faucet_134.
Action 67: Wash food_lemon_2061.
Action 68: Switch off faucet_134.
Action 69: Walk to cutting_board_2080.
Action 70: Put food_lemon_2061 on cutting_board_2080.
Action 71: Walk to table_127.
Action 72: look for knife_2036 around table_127.
Action 73: Walk to food_lemon_2061.
Action 74: Grab food_lemon_2061.
Action 75: Walk to sink_133.
Action 76: Put food_lemon_2061 into sink_133.
Action 77: Walk to food_lemon_2061.
Action 78: Grab food_lemon_2061.
Action 79: Walk to faucet_134.
Action 80: Switch on faucet_134.
Action 81: Wash food_lemon_2061.
Action 82: Switch off faucet_134.
Action 83: Walk to cutting_board_2080.
Action 84: Put food_lemon_2061 on cutting_board_2080.
Action 85: Walk to dishwasher_143.
Action 86: Open dishwasher_143.
Action 87: look for knife_2036 around dishwasher_143.
Action 88: Walk to food_lemon_2061.
Action 89: Grab food_lemon_2061.
Action 90: Walk to sink_133.
Action 91: Put food_lemon_2061 into sink_133.
Action 92: Walk to food_lemon_2061.
Action 93: Grab food_lemon_2061.
Action 94: Walk to faucet_134.
Action 95: Switch on faucet_134.
Action 96: Wash food_lemon_2061.
Action 97: Switch off faucet_134.
Action 98: Walk to cutting_board_2080.
Action 99: Put food_lemon_2061 on cutting_board_2080.
Action 100: Walk to knife_2036.
Action 101: Grab knife_2036.
Action 102: Walk to food_lemon_2061.
Action 103: Cut food_lemon_2061.
Action 104: Walk to pot_2093.
Action 105: Open pot_2093.
Action 106: Grab pot_2093.
Action 107: Walk to faucet_134.
Action 108: Switch on faucet_134.
Action 109: Switch off faucet_134.
Action 110: Walk to food_sugar_2070.
Action 111: Walk to kitchen_counter_128.
Action 112: Put knife_2036 on kitchen_counter_128.
Action 113: Walk to food_sugar_2070.
Action 114: Grab food_sugar_2070.
Action 115: Walk to pot_2093.
Action 116: Put food_sugar_2070 into pot_2093.
Action 117: Walk to stove_2090.
Action 118: Put pot_2093 on stove_2090.
Action 119: Switch on stove_2090.
Action 120: Walk to food_lemon_2061.
Action 121: Grab food_lemon_2061.
Action 122: Walk to pot_2093.
Action 123: Put food_lemon_2061 into pot_2093.
Action 124: Walk to table_123.
Action 125: look for cup_2087 around table_123.
Action 126: Walk to pot_2093.
Action 127: Grab pot_2093.
Action 128: Walk to cup_2087.
Action 129: Put pot_2093 into cup_2087.
Action 130: Grab pot_2093.
Action 131: Put pot_2093 on cup_2087.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_washing_machine_2041(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cup,washing_machine_instance)
        else:
            exp(cup,washing_machine_instance)
    eff:
        unknown[cup]=False
        close[cup,washing_machine_instance]=True
        close[washing_machine_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def find_cup_with_water(cup: item):
    # Function to check if the cup already contains lemon water with sugar
    symbol has_lemon_water= has_water(cup)
    return has_lemon_water

behavior pour_lemon_water_into_cup(pot: item, cup: item):
    body:
        achieve_once inside(pot, cup)
        # Pour lemon water from the pot into the cup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot containing lemon water

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        if not find_cup_with_water(cup):
            pour_lemon_water_into_cup(pot, cup)
        # Only pour the lemon water if the cup is not water filled

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_cup_with_water(cup: item):
    # Function to check if the cup already contains lemon water with sugar
    symbol has_lemon_water= has_water(cup)
    return has_lemon_water

behavior pour_lemon_water_into_cup(pot: item, cup: item):
    body:
        achieve_once inside(pot, cup)
        # Pour lemon water from the pot into the cup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot containing lemon water

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        if not find_cup_with_water(cup):
            pour_lemon_water_into_cup(pot, cup)
        # Only pour the lemon water if the cup is not water filled

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)putin_executor(pot_2093, cup_2087)
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the table_123. Robot is close to the cup_2087. Grabbing pot_2093 by right hand. 
##############################
From agent.py
putin_executor(pot_2093, cup_2087)
Robot find: Robot is close to the pot_2093. Robot is close to the table_123. Robot is close to the cup_2087. pot_2093 is inside cup_2087. pot_2093 is close cup_2087. pot_2093 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot containing lemon water with sugar was incorrectly placed inside the cup instead of the contents being poured from the pot into the cup. You need to pour the contents of the pot into cup_2087 to properly complete the task.
##############################
From agent.py
Human Instruction: The pot containing lemon water with sugar was incorrectly placed inside the cup instead of the contents being poured from the pot into the cup. You need to pour the contents of the pot into cup_2087 to properly complete the task.

Human Guidance: Find a cup and pour the lemon water, which already contains the sliced lemon and dissolved sugar, into the cup.
Trial and Error: You can not grab food_sugar_2070
The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_lemon_2061 around fridge_140.
Action 5: Grab food_lemon_2061.
Action 6: Walk to sink_133.
Action 7: Put food_lemon_2061 into sink_133.
Action 8: Walk to food_lemon_2061.
Action 9: Grab food_lemon_2061.
Action 10: Wash food_lemon_2061.
Action 11: Walk to faucet_134.
Action 12: Switch off faucet_134.
Action 13: Walk to cutting_board_2080.
Action 14: Put food_lemon_2061 on cutting_board_2080.
Action 15: Walk to knifeblock_52.
Action 16: look for knife_2036 around knifeblock_52.
Action 17: Walk to food_lemon_2061.
Action 18: Grab food_lemon_2061.
Action 19: Walk to sink_133.
Action 20: Put food_lemon_2061 into sink_133.
Action 21: Walk to food_lemon_2061.
Action 22: Grab food_lemon_2061.
Action 23: Wash food_lemon_2061.
Action 24: Walk to faucet_308.
Action 25: Switch off faucet_308.
Action 26: Walk to cutting_board_2080.
Action 27: Put food_lemon_2061 on cutting_board_2080.
Action 28: Walk to milk_2074.
Action 29: look for knife_2036 around milk_2074.
Action 30: Walk to food_lemon_2061.
Action 31: Grab food_lemon_2061.
Action 32: Walk to sink_133.
Action 33: Put food_lemon_2061 into sink_133.
Action 34: Walk to food_lemon_2061.
Action 35: Grab food_lemon_2061.
Action 36: Walk to faucet_134.
Action 37: Switch on faucet_134.
Action 38: Wash food_lemon_2061.
Action 39: Switch off faucet_134.
Action 40: Walk to cutting_board_2080.
Action 41: Put food_lemon_2061 on cutting_board_2080.
Action 42: Walk to walllamp_291.
Action 43: look for knife_2036 around walllamp_291.
Action 44: Walk to food_lemon_2061.
Action 45: Grab food_lemon_2061.
Action 46: Walk to sink_133.
Action 47: Put food_lemon_2061 into sink_133.
Action 48: Walk to food_lemon_2061.
Action 49: Grab food_lemon_2061.
Action 50: Walk to faucet_134.
Action 51: Switch on faucet_134.
Action 52: Wash food_lemon_2061.
Action 53: Switch off faucet_134.
Action 54: Walk to cutting_board_2080.
Action 55: Put food_lemon_2061 on cutting_board_2080.
Action 56: Walk to stove_2090.
Action 57: Open stove_2090.
Action 58: look for knife_2036 around stove_2090.
Action 59: Walk to food_lemon_2061.
Action 60: Grab food_lemon_2061.
Action 61: Walk to sink_133.
Action 62: Put food_lemon_2061 into sink_133.
Action 63: Walk to food_lemon_2061.
Action 64: Grab food_lemon_2061.
Action 65: Walk to faucet_134.
Action 66: Switch on faucet_134.
Action 67: Wash food_lemon_2061.
Action 68: Switch off faucet_134.
Action 69: Walk to cutting_board_2080.
Action 70: Put food_lemon_2061 on cutting_board_2080.
Action 71: Walk to table_127.
Action 72: look for knife_2036 around table_127.
Action 73: Walk to food_lemon_2061.
Action 74: Grab food_lemon_2061.
Action 75: Walk to sink_133.
Action 76: Put food_lemon_2061 into sink_133.
Action 77: Walk to food_lemon_2061.
Action 78: Grab food_lemon_2061.
Action 79: Walk to faucet_134.
Action 80: Switch on faucet_134.
Action 81: Wash food_lemon_2061.
Action 82: Switch off faucet_134.
Action 83: Walk to cutting_board_2080.
Action 84: Put food_lemon_2061 on cutting_board_2080.
Action 85: Walk to dishwasher_143.
Action 86: Open dishwasher_143.
Action 87: look for knife_2036 around dishwasher_143.
Action 88: Walk to food_lemon_2061.
Action 89: Grab food_lemon_2061.
Action 90: Walk to sink_133.
Action 91: Put food_lemon_2061 into sink_133.
Action 92: Walk to food_lemon_2061.
Action 93: Grab food_lemon_2061.
Action 94: Walk to faucet_134.
Action 95: Switch on faucet_134.
Action 96: Wash food_lemon_2061.
Action 97: Switch off faucet_134.
Action 98: Walk to cutting_board_2080.
Action 99: Put food_lemon_2061 on cutting_board_2080.
Action 100: Walk to knife_2036.
Action 101: Grab knife_2036.
Action 102: Walk to food_lemon_2061.
Action 103: Cut food_lemon_2061.
Action 104: Walk to pot_2093.
Action 105: Open pot_2093.
Action 106: Grab pot_2093.
Action 107: Walk to faucet_134.
Action 108: Switch on faucet_134.
Action 109: Switch off faucet_134.
Action 110: Walk to food_sugar_2070.
Action 111: Walk to kitchen_counter_128.
Action 112: Put knife_2036 on kitchen_counter_128.
Action 113: Walk to food_sugar_2070.
Action 114: Grab food_sugar_2070.
Action 115: Walk to pot_2093.
Action 116: Put food_sugar_2070 into pot_2093.
Action 117: Walk to stove_2090.
Action 118: Put pot_2093 on stove_2090.
Action 119: Switch on stove_2090.
Action 120: Walk to food_lemon_2061.
Action 121: Grab food_lemon_2061.
Action 122: Walk to pot_2093.
Action 123: Put food_lemon_2061 into pot_2093.
Action 124: Walk to table_123.
Action 125: look for cup_2087 around table_123.
Action 126: Walk to pot_2093.
Action 127: Grab pot_2093.
Action 128: Walk to cup_2087.
Action 129: Put pot_2093 into cup_2087.
Action 130: Grab pot_2093.
Action 131: Put pot_2093 on cup_2087.
Action 132: Grab pot_2093.
Action 133: Put pot_2093 into cup_2087.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_washing_machine_2041(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cup,washing_machine_instance)
        else:
            exp(cup,washing_machine_instance)
    eff:
        unknown[cup]=False
        close[cup,washing_machine_instance]=True
        close[washing_machine_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_pour_lemon_water(cup:item, pot:item):
    body:
        if not inside(pot, cup):
            achieve_once inside(pot, cup)
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Bind to the specific cup with ID 2087

        bind pot: item where:
            is_pot(pot) and inside(pot, cup)
        # Bind to the pot which is inside the cup
        
        find_and_pour_lemon_water(cup, pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_pour_lemon_water(cup:item, pot:item):
    body:
        if not inside(pot, cup):
            achieve_once inside(pot, cup)
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Bind to the specific cup with ID 2087

        bind pot: item where:
            is_pot(pot) and inside(pot, cup)
        # Bind to the pot which is inside the cup
        
        find_and_pour_lemon_water(cup, pot)

##############################
From agent.py-> find a plan in act()
grab_executor(cup_2087)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the pot_2093. Robot is close to the table_123. Robot is close to the cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot containing the lemon water with sugar was placed inside the cup instead of pouring the contents from the pot into the cup. You need to pour the contents of the pot into cup_2087 to properly complete the task.
##############################
Task Summary:
Task Goal:
Make a cup of lemon water with additional sugar.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_lemon_2061)', 'walk_executor(sink_133)', 'putin_executor(food_lemon_2061, sink_133)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'wash_executor(food_lemon_2061)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(cutting_board_2080)', 'put_executor(food_lemon_2061, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(sink_133)', 'putin_executor(food_lemon_2061, sink_133)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'wash_executor(food_lemon_2061)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(cutting_board_2080)', 'put_executor(food_lemon_2061, cutting_board_2080)', 'walk_executor(milk_2074)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(sink_133)', 'putin_executor(food_lemon_2061, sink_133)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'wash_executor(food_lemon_2061)', 'switchoff_executor(faucet_134)', 'walk_executor(cutting_board_2080)', 'put_executor(food_lemon_2061, cutting_board_2080)', 'walk_executor(walllamp_291)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(sink_133)', 'putin_executor(food_lemon_2061, sink_133)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'wash_executor(food_lemon_2061)', 'switchoff_executor(faucet_134)', 'walk_executor(cutting_board_2080)', 'put_executor(food_lemon_2061, cutting_board_2080)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(sink_133)', 'putin_executor(food_lemon_2061, sink_133)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'wash_executor(food_lemon_2061)', 'switchoff_executor(faucet_134)', 'walk_executor(cutting_board_2080)', 'put_executor(food_lemon_2061, cutting_board_2080)', 'walk_executor(table_127)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(sink_133)', 'putin_executor(food_lemon_2061, sink_133)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'wash_executor(food_lemon_2061)', 'switchoff_executor(faucet_134)', 'walk_executor(cutting_board_2080)', 'put_executor(food_lemon_2061, cutting_board_2080)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(sink_133)', 'putin_executor(food_lemon_2061, sink_133)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'wash_executor(food_lemon_2061)', 'switchoff_executor(faucet_134)', 'walk_executor(cutting_board_2080)', 'put_executor(food_lemon_2061, cutting_board_2080)', 'walk_executor(knife_2036)', 'grab_executor(knife_2036)', 'walk_executor(food_lemon_2061)', 'cut_executor(food_lemon_2061)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(food_sugar_2070)', 'grab_executor(food_sugar_2070) (Failed)', 'walk_executor(kitchen_counter_128)', 'put_executor(knife_2036, kitchen_counter_128)', 'walk_executor(food_sugar_2070)', 'grab_executor(food_sugar_2070)', 'walk_executor(pot_2093)', 'putin_executor(food_sugar_2070, pot_2093)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(pot_2093)', 'putin_executor(food_lemon_2061, pot_2093)', 'walk_executor(table_123)', 'walk_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(cup_2087)', 'putin_executor(pot_2093, cup_2087)', 'grab_executor(pot_2093)', 'put_executor(pot_2093, cup_2087)', 'grab_executor(pot_2093)', 'putin_executor(pot_2093, cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)']
Time info:
Time consume: 489 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 128
goal generate times: 12
goal correct times: 2
action_num: 130

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
