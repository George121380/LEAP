From agent.py
Reset goals: The sub-goals are: 
['1. Identify and gather appropriate vegetables and rice.', '2. Wash and prepare the vegetables.', '3. Cook the rice.', '4. Scramble the egg separately.', '5. Stir-fry the rice, vegetables, and scrambled egg together in a pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2107_around_kitchen_counter_119(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_119(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2009_around_kitchen_counter_119(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_kitchen_counter_119(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_rice_2108_around_kitchen_counter_119(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient(item:item):
    # Function to check if an item is rice or a vegetable
    symbol is_ingredient= is_food_rice(item) or is_food_vegetable(item)
    return is_ingredient

behavior __goal__():
    body:
        foreach item: item:
            if is_ingredient(item) and not visited(item):
                # Check all unvisited items to find rice and vegetables
                observe(item, "Check if this is rice or a vegetable")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_ingredient(item:item):
    # Function to check if an item is rice or a vegetable
    symbol is_ingredient= is_food_rice(item) or is_food_vegetable(item)
    return is_ingredient

behavior __goal__():
    body:
        foreach item: item:
            if is_ingredient(item) and not visited(item):
                # Check all unvisited items to find rice and vegetables
                observe(item, "Check if this is rice or a vegetable")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_rice_2108, kitchen_counter_119)walk_executor(food_rice_2108)obs(food_rice_2108, Check if this is rice or a vegetable)walk_executor(kitchen_counter_119)exp(food_vegetable_2113, kitchen_counter_119)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Check if this is rice or a vegetable)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_rice_2108, kitchen_counter_119)
Fail to find food_rice_2108 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(food_rice_2108, stove_2135)walk_executor(food_rice_2108)obs(food_rice_2108, Check if this is rice or a vegetable)walk_executor(cutting_board_2123)exp(food_vegetable_2113, cutting_board_2123)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Check if this is rice or a vegetable)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(food_rice_2108, stove_2135)
Fail to find food_rice_2108 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_rice_2108, kitchen_counter_123)walk_executor(food_rice_2108)obs(food_rice_2108, Check if this is rice or a vegetable)walk_executor(cutting_board_2123)exp(food_vegetable_2113, cutting_board_2123)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Check if this is rice or a vegetable)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_rice_2108, kitchen_counter_123)
Fail to find food_rice_2108 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_rice_2108, kitchen_counter_122)walk_executor(food_rice_2108)obs(food_rice_2108, Check if this is rice or a vegetable)walk_executor(cutting_board_2123)exp(food_vegetable_2113, cutting_board_2123)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Check if this is rice or a vegetable)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_rice_2108, kitchen_counter_122)
Fail to find food_rice_2108 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)open_executor(pot_2138)exp(food_rice_2108, pot_2138)walk_executor(food_rice_2108)obs(food_rice_2108, Check if this is rice or a vegetable)walk_executor(cutting_board_2123)exp(food_vegetable_2113, cutting_board_2123)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Check if this is rice or a vegetable)
##############################
From agent.py
walk_executor(pot_2138)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
open_executor(pot_2138)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. pot_2138 is opened. 
##############################
From agent.py
exp(food_rice_2108, pot_2138)
Fail to find food_rice_2108 around pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)exp(food_rice_2108, pot_78)walk_executor(food_rice_2108)obs(food_rice_2108, Check if this is rice or a vegetable)walk_executor(cutting_board_2123)exp(food_vegetable_2113, cutting_board_2123)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Check if this is rice or a vegetable)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find food_rice_2108 ?
Answer: Go to the dining room, which is labeled as dining_room_41. Inside this room, locate fridge_126. The target item, food_rice_2108, is inside this fridge. The rice is near other items, but your main focus should be fridge_126, as the food_rice_2108 is specifically located inside of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining room, which is labeled as dining_room_41. Inside this room, locate fridge_126. The target item, food_rice_2108, is inside this fridge. The rice is near other items, but your main focus should be fridge_126, as the food_rice_2108 is specifically located inside of it.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_rice_2108 around kitchen_counter_119.
Action 3: Walk to stove_2135.
Action 4: Open stove_2135.
Action 5: look for food_rice_2108 around stove_2135.
Action 6: Walk to kitchen_counter_123.
Action 7: look for food_rice_2108 around kitchen_counter_123.
Action 8: Walk to kitchen_counter_122.
Action 9: look for food_rice_2108 around kitchen_counter_122.
Action 10: Walk to pot_2138.
Action 11: Open pot_2138.
Action 12: look for food_rice_2108 around pot_2138.
Action 13: Walk to pot_78.

##############################
From agent.py
exp(food_rice_2108, pot_78)
Fail to find food_rice_2108 around pot_78. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash the rice and any additional ingredients you plan to use.', "2. Cook the rice if it's not already cooked.", '3. Prepare the egg by beating it and any other needed preparations.', '4. Fry the rice with the egg and any additional ingredients.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind fridge: item where:
            is_fridge(fridge) and inside(fridge, dining_room) and id[fridge]==126
        # Select fridge_126 inside the dining room

        bind rice: item where:
            is_food_rice(rice) and inside(rice, fridge) and id[rice] == 2108
        # Select food_rice_2108 inside the fridge

        if not visited(fridge):
            achieve close_char(char, fridge)
        # Move the character closer to fridge_126 if not already visited

behavior wash_rice(rice:item):
    body:
        wash(rice)
        # Wash the rice

behavior __goal__():
    body:
        wash_rice(rice)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: rice; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_potato_2107_around_cutting_board_2123(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_potato,cutting_board_instance)
        else:
            exp(food_potato,cutting_board_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cutting_board_instance]=True
        close[cutting_board_instance,food_potato]=True
    

#goal_representation

behavior navigate_to_fridge(fridge:item):
    body:
        if not visited(fridge):
            achieve close_char(char, fridge)

behavior wash_rice(rice:item):
    body:
        wash(rice)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind fridge: item where:
            is_fridge(fridge) and inside(fridge, dining_room) and id[fridge] == 126
        # Select fridge_126 inside the dining room

        bind rice: item where:
            is_food_rice(rice) and inside(rice, fridge) and id[rice] == 2108
        # Select food_rice_2108 inside the fridge

        navigate_to_fridge(fridge)
        wash_rice(rice)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_potato_2107_around_cutting_board_2123(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_potato,cutting_board_instance)
        else:
            exp(food_potato,cutting_board_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cutting_board_instance]=True
        close[cutting_board_instance,food_potato]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior wash_food(food:item):
    body:
        wash(food)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind fridge: item where:
            is_fridge(fridge) and inside(fridge, dining_room)
        # Select the fridge inside the dining room

        bind rice: item where:
            is_food_rice(rice) and inside(rice, fridge)
        # Select the specific rice inside the fridge

        achieve_once inhand(rice)
        # Temporarily hold the rice to wash

        achieve visited(fridge)
        # Ensure the fridge is visited to search for the rice

        wash_food(rice)
        # Wash the rice
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_fridge_for_rice(fridge:item):
    body:
        observe(fridge, "Check if food_rice_2108 is inside the fridge")

behavior wash_rice(rice:item, water_source:item):
    body:
        achieve_once inside(rice, water_source)
        wash(rice)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room) and id[dining_room] == 41
        # Select dining room 41
        
        bind fridge: item where:
            is_fridge(fridge) and inside(fridge, dining_room) and id[fridge] == 126
        # Select fridge 126 inside the dining_room 41
        
        if not visited(fridge):
            observe_fridge_for_rice(fridge)
        
        bind food_rice: item where:
            is_food_rice(food_rice) and inside(food_rice, fridge) and id[food_rice] == 2108
        # Select food_rice_2108 inside the fridge

        bind water_source: item where:
            is_sink(water_source)
        # Select a water source (sink)
        
        wash_rice(food_rice, water_source)
        # Wash the rice

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. wash the rice and any additional ingredients you plan to use." ?
Answer: To wash the rice and any additional ingredients, fill a pot or a bowl with water, then add the rice and rinse it to remove any impurities or excess starch. Repeat the process until the water runs clear. Do the same for any additional ingredients you plan to use.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Rinse the rice and any additional ingredients in water until the water runs clear.', '2. Cook the rice and ingredients together to make fried rice with egg.', '3. Serve the fried rice on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_pot_78_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior rinse_rice_and_ingredients(rice:item, pot:item, fridge:item):
    body:
        achieve_once inside(rice, pot)
        achieve has_water(pot)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select the fridge with ID 126

        bind rice: item where:
            is_food_rice(rice) and inside(rice, fridge)
        # Select the rice inside the fridge

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        achieve close_char(char, fridge)
        # Move close to the fridge

        rinse_rice_and_ingredients(rice, pot, fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_inside(fridge:item):
    # Function to check if food_rice_2108 is inside the specified fridge
    symbol has_rice=exists rice: item : (is_food_rice(rice) and inside(rice, fridge))
    return has_rice

def has_pot_or_bowl():
    # Function to check if there is an available pot or bowl
    symbol has_pot_bowl = exists o: item : (is_pot(o) or is_bowl(o))
    return has_pot_bowl

behavior rinse_rice(rice:item, pot:item):
    body:
        achieve_once close_char(char, pot)
        achieve has_water(pot)
        achieve_once inside(rice, pot)
        rinse(rice) # Rinse the rice until the water runs clear

behavior find_pot_or_bowl_and_rinse_rice(fridge:item):
    body:
        if has_pot_or_bowl():
            bind rice: item where:
                is_food_rice(rice) and inside(rice, fridge)
            # Select the rice inside the fridge

            bind pot_or_bowl: item where:
                is_pot(pot_or_bowl) or is_bowl(pot_or_bowl) and id[pot_or_bowl] = 2138 and id[pot_or_bowl] = 78
            # Select a pot or a bowl

            rinse_rice(rice, pot_or_bowl)
        else:
            # If no pot or bowl is found, check all items to find one
            foreach o: item:
                if (is_pot(o) or is_bowl(o)) and not visited(o):
                    observe(o, "Check if this is a suitable pot or bowl")

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room) and id[dining_room] == 41
        # Select the dining room

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126 and inside(fridge, dining_room) and has_rice_inside(fridge)
        # Select the fridge with rice inside
        
        find_pot_or_bowl_and_rinse_rice(fridge)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5311, column 81.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#goal_representation
 
def has_rice_inside(fridge:item):
    # Function to check if food_rice_2108 is inside the specified fridge
    symbol has_rice=exists rice: item : (is_food_rice(rice) and inside(rice, fridge))
    return has_rice

def has_pot_or_bowl():
    # Function to check if there is an available pot or bowl
    symbol has_pot_bowl = exists o: item : (is_pot(o) or is_bowl(o))
    return has_pot_bowl

behavior rinse_rice(rice:item, pot:item):
    body:
        achieve_once close_char(char, pot)
        achieve has_water(pot)
        achieve_once inside(rice, pot)
        rinse(rice) # Rinse the rice until the water runs clear

behavior find_pot_or_bowl_and_rinse_rice(fridge:item):
    body:
        if has_pot_or_bowl():
            bind rice: item where:
                is_food_rice(rice) and inside(rice, fridge)
            # Select the rice inside the fridge

            bind pot_or_bowl: item where:
                (is_pot(pot_or_bowl) or is_bowl(pot_or_bowl)) and (id[pot_or_bowl] == 2138 or id[pot_or_bowl] == 78)
            # Select a pot or a bowl

            rinse_rice(rice, pot_or_bowl)
        else:
            # If no pot or bowl is found, check all items to find one
            foreach o: item:
                if (is_pot(o) or is_bowl(o)) and not visited(o):
                    observe(o, "Check if this is a suitable pot or bowl")

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room) and id[dining_room] == 41
        # Select the dining room

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126 and inside(fridge, dining_room) and has_rice_inside(fridge)
        # Select the fridge with rice inside
        
        find_pot_or_bowl_and_rinse_rice(fridge)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior rinse_rice_and_ingredients(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)
        rinse(rice) # Rinse the rice until the water runs clear

def is_destination_fridge(target:item, fridge:item):
    # Check if the target item is inside the specified fridge
    symbol is_inside_fridge = inside(target, fridge)
    return is_inside_fridge

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room) and id[dining_room] == 41
        # Locate the dining room with ID 41

        bind fridge: item where:
            is_fridge(fridge) and inside(fridge, dining_room) and id[fridge] == 126
        # Find the specified fridge inside the dining room with ID 126

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2108 and is_destination_fridge(rice, fridge)
        # Select the rice from the specified fridge

        bind pot: item where:
            is_pot(pot)
        # Select a pot for rinsing the rice

        rinse_rice_and_ingredients(rice, pot)
        # Rinse the rice inside the pot until the water runs clear

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash the rice and any additional ingredients until the water runs clear.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_pot_2138_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def find_fridge_in_dining_room(fridge:item):
    # Function to check if a fridge is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(fridge, room))
    return in_dining_room

def has_rice_inside(fridge:item):
    # Function to check if the fridge contains rice
    symbol has_rice = exists item: item : (is_food_rice(item) and inside(item, fridge))
    return has_rice

behavior find_rice_in_fridge(fridge:item, rice:item):
    body:
        achieve_once inside_char(char, dining_room_41)
        achieve_once visited(fridge)
        achieve_once inside(rice, fridge)

behavior wash_rice_and_ingredients(rice:item, water_source:item):
    body:
        achieve_once inhand(rice)
        achieve has_water(water_source)
        rinse(rice) # Rinse the rice
        wash(rice) # Wash the rice until the water runs clear

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[contains(fridge, dining_room_41)]
        if not find_fridge_in_dining_room(fridge):
            observe(fridge, "Identify fridge in the dining room")
        
        if not has_rice_inside(fridge):
            observe(fridge, "Check if there is rice in the fridge")
        
        bind rice: item where:
            is_food_rice(rice) and inside(rice, fridge)
        
        find_rice_in_fridge(fridge, rice)

        bind sink: item where:
            is_sink(sink)
        
        wash_rice_and_ingredients(rice, sink)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room_41; available variables: [Variable<fridge: item>, Variable<rice: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_measuring_cup_2012_around_sink_120(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(measuring_cup,sink_instance)
        else:
            exp(measuring_cup,sink_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,sink_instance]=True
        close[sink_instance,measuring_cup]=True
    

#goal_representation
 
def find_fridge_in_dining_room(fridge:item):
    # Function to check if a fridge is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(fridge, room))
    return in_dining_room

def has_rice_inside(fridge:item):
    # Function to check if the fridge contains rice
    symbol has_rice = exists item: item : (is_food_rice(item) and inside(item, fridge))
    return has_rice

behavior find_rice_in_fridge(fridge:item, rice:item):
    body:
        achieve_once inside_char(char, dining_room)
        achieve_once visited(fridge)
        achieve_once inside(rice, fridge)

behavior wash_rice_and_ingredients(rice:item, water_source:item):
    body:
        achieve_once inhand(rice)
        achieve has_water(water_source)
        rinse(rice) # Rinse the rice
        wash(rice) # Wash the rice until the water runs clear

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind fridge: item where:
            is_fridge(fridge) and inside(fridge, dining_room)
        
        if not find_fridge_in_dining_room(fridge):
            observe(fridge, "Identify fridge in the dining room")
        
        if not has_rice_inside(fridge):
            observe(fridge, "Check if there is rice in the fridge")
        
        bind rice: item where:
            is_food_rice(rice) and inside(rice, fridge)
        
        find_rice_in_fridge(fridge, rice)

        bind sink: item where:
            is_sink(sink)
        
        wash_rice_and_ingredients(rice, sink)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<fridge: item>, Variable<rice: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#goal_representation
 
def find_fridge_in_dining_room(fridge:item, dining_room:item):
    # Function to check if a fridge is in the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(fridge, room))
    return in_dining_room

def has_rice_inside(fridge:item):
    # Function to check if the fridge contains rice
    symbol has_rice = exists item: item : (is_food_rice(item) and inside(item, fridge))
    return has_rice

behavior find_rice_in_fridge(fridge:item, rice:item):
    body:
        achieve_once inside_char(char, dining_room)
        achieve_once visited(fridge)
        achieve_once inside(rice, fridge)

behavior wash_rice_and_ingredients(rice:item, water_source:item):
    body:
        achieve_once inhand(rice)
        achieve has_water(water_source)
        rinse(rice) # Rinse the rice
        wash(rice) # Wash the rice until the water runs clear

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind fridge: item where:
            is_fridge(fridge) and inside(fridge, dining_room)
        
        if not find_fridge_in_dining_room(fridge, dining_room):
            observe(fridge, "Identify fridge in the dining room")
        
        if not has_rice_inside(fridge):
            observe(fridge, "Check if there is rice in the fridge")
        
        bind rice: item where:
            is_food_rice(rice) and inside(rice, fridge)
        
        find_rice_in_fridge(fridge, rice)

        bind sink: item where:
            is_sink(sink)
        
        wash_rice_and_ingredients(rice, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_or_ingredients(rice_fridge:item):
    # Function to check if the food_rice_2108 is inside the fridge
    symbol rice_or_ingredients=exists o: item : (is_food_rice(o) and inside(o, rice_fridge))
    return rice_or_ingredients

behavior observe_and_wash_rice(rice_fridge:item, bowl:item):
    body:
        if not visited(rice_fridge):
            # Look inside the fridge to find food_rice_2108
            observe(rice_fridge, "Check if food_rice_2108 is located inside")
        if has_rice_or_ingredients(rice_fridge):
            bind rice: item where:
                is_food_rice(rice) 
            achieve_once inside(rice, bowl)
            # Place rice in the bowl for washing
            rinse(rice)
            # Rinse the rice repeatedly until clean

behavior __goal__():
    body:
        bind rice_fridge: item where:
            is_fridge(rice_fridge) and id[rice_fridge] == 126
        # Select fridge_126 to find food_rice_2108

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        observe_and_wash_rice(rice_fridge, bowl)
        # Observe fridge for location of food_rice_2108 and then wash the rice
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_rice_or_ingredients(rice_fridge:item):
    # Function to check if the food_rice_2108 is inside the fridge
    symbol rice_or_ingredients=exists o: item : (is_food_rice(o) and inside(o, rice_fridge))
    return rice_or_ingredients

behavior observe_and_wash_rice(rice_fridge:item, bowl:item):
    body:
        if not visited(rice_fridge):
            # Look inside the fridge to find food_rice_2108
            observe(rice_fridge, "Check if food_rice_2108 is located inside")
        if has_rice_or_ingredients(rice_fridge):
            bind rice: item where:
                is_food_rice(rice) 
            achieve_once inside(rice, bowl)
            # Place rice in the bowl for washing
            rinse(rice)
            # Rinse the rice repeatedly until clean

behavior __goal__():
    body:
        bind rice_fridge: item where:
            is_fridge(rice_fridge) and id[rice_fridge] == 126
        # Select fridge_126 to find food_rice_2108

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        observe_and_wash_rice(rice_fridge, bowl)
        # Observe fridge for location of food_rice_2108 and then wash the rice
 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)obs(fridge_126, Check if food_rice_2108 is located inside)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
obs(fridge_126, Check if food_rice_2108 is located inside)
Get this information:  sauce_2148 is inside fridge_126. food_snack_2110 is inside fridge_126. fridge_126 is on floor_44. food_steak_2080 is inside fridge_126. food_donut_2091 is inside fridge_126. food_oatmeal_2102 is inside fridge_126. food_banana_2083 is inside fridge_126. food_food_2094 is inside fridge_126. food_vegetable_2113 is inside fridge_126. food_carrot_2086 is inside fridge_126. food_onion_2048 is inside fridge_126. food_peanut_butter_2105 is inside fridge_126. fridge_126 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_ice_cream_2097 is inside fridge_126. food_rice_2108 is inside fridge_126. food_apple_2081 is inside fridge_126. food_lemon_2100 is inside fridge_126. food_sugar_2111 is inside fridge_126. food_food_2073 is inside fridge_126. food_egg_2092 is inside fridge_126. food_orange_2103 is inside fridge_126. food_food_2046 is inside fridge_126. food_fruit_2095 is inside fridge_126. food_pizza_2106 is inside fridge_126. food_cereal_2087 is inside fridge_126. food_jam_2098 is inside fridge_126. food_dessert_2090 is inside fridge_126. food_salt_2109 is inside fridge_126. food_bacon_2082 is inside fridge_126. food_fish_2093 is inside fridge_126. food_noodles_2101 is inside fridge_126. food_turkey_2112 is inside fridge_126. fridge_126 is close to food_onion_2048. fridge_126 is close to wall_179. fridge_126 is close to ceilinglamp_137. fridge_126 is close to ceiling_53. fridge_126 is close to ceiling_54. fridge_126 is close to food_food_2073. fridge_126 is close to basket_for_clothes_2078. fridge_126 is close to washing_machine_2079. fridge_126 is close to food_steak_2080. fridge_126 is close to food_apple_2081. fridge_126 is close to food_bacon_2082. fridge_126 is close to food_banana_2083. fridge_126 is close to floor_163. fridge_126 is close to food_cake_2085. fridge_126 is close to food_carrot_2086. fridge_126 is close to food_cereal_2087. fridge_126 is close to food_cheese_2088. fridge_126 is close to food_chicken_2089. fridge_126 is close to food_dessert_2090. fridge_126 is close to food_donut_2091. fridge_126 is close to food_egg_2092. fridge_126 is close to food_fish_2093. fridge_126 is close to food_food_2094. fridge_126 is close to food_fruit_2095. fridge_126 is close to food_hamburger_2096. fridge_126 is close to food_ice_cream_2097. fridge_126 is close to food_jam_2098. fridge_126 is close to food_lemon_2100. fridge_126 is close to food_noodles_2101. fridge_126 is close to food_oatmeal_2102. fridge_126 is close to food_orange_2103. fridge_126 is close to food_onion_2104. fridge_126 is close to food_peanut_butter_2105. fridge_126 is close to food_pizza_2106. fridge_126 is close to food_potato_2107. fridge_126 is close to food_rice_2108. fridge_126 is close to food_salt_2109. fridge_126 is close to food_snack_2110. fridge_126 is close to food_sugar_2111. fridge_126 is close to food_turkey_2112. fridge_126 is close to food_vegetable_2113. fridge_126 is close to floor_164. fridge_126 is close to door_61. fridge_126 is close to doorjamb_190. fridge_126 is close to desk_193. fridge_126 is close to wall_66. fridge_126 is close to wall_67. fridge_126 is close to powersocket_72. fridge_126 is close to light_73. fridge_126 is close to computer_209. fridge_126 is close to cpuscreen_210. fridge_126 is close to floor_169. fridge_126 is close to keyboard_211. fridge_126 is close to light_212. fridge_126 is close to mouse_213. fridge_126 is close to mousepad_214. fridge_126 is close to food_food_2001. fridge_126 is close to floor_44. fridge_126 is close to floor_45. fridge_126 is close to sauce_2148. fridge_126 is close to food_food_1000. fridge_126 is close to wall_175. fridge_126 is close to food_food_2046. fridge_126 is close to character_240. food_cake_2085 is inside fridge_126. food_onion_2104 is inside fridge_126. food_hamburger_2096 is inside fridge_126. food_potato_2107 is inside fridge_126. food_food_2001 is inside fridge_126. food_cheese_2088 is inside fridge_126. fridge_126 is CLEAN. fridge_126 is OFF. fridge_126 is PLUGGED_IN. fridge_126 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the food_rice_2108 into a bowl or pot and rinse it until the water runs clear. The collected information shows that food_rice_2108 was found in fridge_126, but no actions to wash the rice have been completed.
##############################
From agent.py
Human Instruction: You need to place the food_rice_2108 into a bowl or pot and rinse it until the water runs clear. The collected information shows that food_rice_2108 was found in fridge_126, but no actions to wash the rice have been completed.

Human Guidance: To wash the rice and any additional ingredients, fill a pot or a bowl with water, then add the rice and rinse it to remove any impurities or excess starch. Repeat the process until the water runs clear. Do the same for any additional ingredients you plan to use.
The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_rice_2108 around kitchen_counter_119.
Action 3: Walk to stove_2135.
Action 4: Open stove_2135.
Action 5: look for food_rice_2108 around stove_2135.
Action 6: Walk to kitchen_counter_123.
Action 7: look for food_rice_2108 around kitchen_counter_123.
Action 8: Walk to kitchen_counter_122.
Action 9: look for food_rice_2108 around kitchen_counter_122.
Action 10: Walk to pot_2138.
Action 11: Open pot_2138.
Action 12: look for food_rice_2108 around pot_2138.
Action 13: Walk to pot_78.
Action 14: look for food_rice_2108 around pot_78.
Action 15: Walk to fridge_126.
Action 16: Switch off fridge_126.
Action 17: Open fridge_126.
Action 18: Observe around fridge_126 with the question of Check if food_rice_2108 is located inside.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_food_onion_2048_around_cutting_board_2123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior wash_rice_and_ingredients(rice:item, pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water for rinsing
        achieve_once inside(rice, pot)
        # Place the rice in the pot of water
        rinse(rice)
        # Rinse the rice until the water runs clear

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2108
        # Select rice with ID 2108

        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        wash_rice_and_ingredients(rice, pot)
        # Wash the rice and any additional ingredients in the pot
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior wash_rice_and_ingredients(rice:item, pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water for rinsing
        achieve_once inside(rice, pot)
        # Place the rice in the pot of water
        rinse(rice)
        # Rinse the rice until the water runs clear

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2108
        # Select rice with ID 2108

        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        wash_rice_and_ingredients(rice, pot)
        # Wash the rice and any additional ingredients in the pot
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_2138)putin_executor(food_rice_2108, pot_2138)walk_executor(food_rice_2108)rinse_executor(food_rice_2108)
##############################
From agent.py
walk_executor(pot_2138)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(pot_2138)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_2138. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_2138. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_2138. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot find: Robot is close to the pot_2138. Robot is close to the food_rice_2108. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_rice_2108)
Robot find: Robot is close to the pot_2138. Robot is close to the food_rice_2108. Robot is close to the fridge_126. Grabbing food_rice_2108 by left hand. 
##############################
From agent.py
walk_executor(pot_2138)
Robot find: Robot is close to the pot_2138. Robot is close to the food_rice_2108. 
##############################
From agent.py
putin_executor(food_rice_2108, pot_2138)
Robot find: Robot is close to the pot_2138. Robot is close to the food_rice_2108. food_rice_2108 is inside pot_2138. food_rice_2108 is close pot_2138. pot_2138 is close food_rice_2108. food_rice_2108 released by left hand. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot find: Robot is close to the pot_2138. Robot is close to the food_rice_2108. 
##############################
From agent.py
rinse_executor(food_rice_2108)
Robot find: Robot is close to the pot_2138. Robot is close to the food_rice_2108. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_122)', 'walk_executor(pot_2138)', 'open_executor(pot_2138)', 'walk_executor(pot_78)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(pot_2138)', 'grab_executor(pot_2138)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(food_rice_2108)', 'grab_executor(food_rice_2108)', 'walk_executor(pot_2138)', 'putin_executor(food_rice_2108, pot_2138)', 'walk_executor(food_rice_2108)', 'rinse_executor(food_rice_2108)']
Time info:
Time consume: 444 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 82
goal generate times: 10
goal correct times: 0
action_num: 22

Task complete rate:
Keystate: k1 - Requires: 3 steps
Keystate: k2 - Requires: 17 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
