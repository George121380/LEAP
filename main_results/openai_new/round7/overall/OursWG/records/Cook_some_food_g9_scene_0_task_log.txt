From agent.py
Reset goals: The sub-goals are: 
['1. Find potatoes and wash them.', '2. Cut the potatoes into fries.', '3. Fry the potato pieces until golden brown.', '4. Drain the fries to remove excess oil.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation

behavior wash_potato(obj:item):
    body:
        wash(obj)

behavior find_and_wash_potato(potato: item):
    body:
        if dirty(potato):
            wash_potato(potato)

behavior observe_location_and_fetch_potato():
    body:
        foreach potato: item:
            if is_food_potato(potato) and not visited(potato):
                observe(potato, "Locate and check if the potato is dirty")
                find_and_wash_potato(potato)

behavior __goal__():
    body:
        observe_location_and_fetch_potato()

#goal_representation_end

##############################
From agent.py->reset_goal

behavior wash_potato(obj:item):
    body:
        wash(obj)

behavior find_and_wash_potato(potato: item):
    body:
        if dirty(potato):
            wash_potato(potato)

behavior observe_location_and_fetch_potato():
    body:
        foreach potato: item:
            if is_food_potato(potato) and not visited(potato):
                observe(potato, "Locate and check if the potato is dirty")
                find_and_wash_potato(potato)

behavior __goal__():
    body:
        observe_location_and_fetch_potato()

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_potato_2035, kitchen_counter_230)walk_executor(food_potato_2035)obs(food_potato_2035, Locate and check if the potato is dirty)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_potato_2035, kitchen_counter_230)
Fail to find food_potato_2035 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_potato_2035, fridge_289)walk_executor(food_potato_2035)obs(food_potato_2035, Locate and check if the potato is dirty)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_potato_2035, fridge_289)
Find food_potato_2035. 
##############################
From agent.py-> find a plan in act()
obs(food_potato_2035, Locate and check if the potato is dirty)
##############################
From agent.py
obs(food_potato_2035, Locate and check if the potato is dirty)
Get this information:  food_potato_2035 is inside fridge_289. food_potato_2035 is inside dining_room_201. food_potato_2035 is close to fridge_289. food_potato_2035 is close to character_65. food_potato_2035 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_cupboard_229(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tray,cupboard_instance)
        else:
            exp(tray,cupboard_instance)
    eff:
        unknown[tray]=False
        close[tray,cupboard_instance]=True
        close[cupboard_instance,tray]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_potatoes(potatoes:item, cutting_board:item, knife:item):
    body:
        achieve_once on(potatoes, cutting_board) # Place the potatoes on the cutting board
        achieve cut(potatoes) # Cut the potatoes into fries

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes)
        # Select the potatoes

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_potatoes(potatoes, cutting_board, knife)
        # Cut the potatoes into fries

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cut_potatoes(potatoes:item, cutting_board:item, knife:item):
    body:
        achieve_once on(potatoes, cutting_board) # Place the potatoes on the cutting board
        achieve cut(potatoes) # Cut the potatoes into fries

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes)
        # Select the potatoes

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_potatoes(potatoes, cutting_board, knife)
        # Cut the potatoes into fries

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_potato_2035 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_potato_2035. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
cut_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hairbrush_2002_around_bathroom_counter_41(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(hairbrush,bathroom_counter_instance)
        else:
            exp(hairbrush,bathroom_counter_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,hairbrush]=True
    

#exp_behavior_end

#goal_representation
behavior fry_potato_pieces(potatoes:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(potatoes, fryingpan)
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes)
        # Select the cut potato pieces

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_potato_pieces(potatoes, fryingpan, stove)
        # Fry the potato pieces until golden brown
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fry_potato_pieces(potatoes:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(potatoes, fryingpan)
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes)
        # Select the cut potato pieces

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_potato_pieces(potatoes, fryingpan, stove)
        # Fry the potato pieces until golden brown
##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_potato_2035, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_potato_2035 is inside fryingpan_2083. fryingpan_2083 is close food_potato_2035. food_potato_2035 is close fryingpan_2083. food_potato_2035 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2056_around_closetdrawer_116(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(towel,closetdrawer_instance)
        else:
            exp(towel,closetdrawer_instance)
    eff:
        unknown[towel]=False
        close[towel,closetdrawer_instance]=True
        close[closetdrawer_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior drain_fries(fries:item, towel:item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold a towel for draining
        achieve_once close_char(char, fries)
        # Approach the fries to drain them
        observe(fries, "Check if the fries have excess oil that needs to be drained")

behavior __goal__():
    body:
        bind fries: item where:
            is_food_food(fries) and on(fries, fryingpan_2083)
        # Select the fries in the frying pan

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        drain_fries(fries, towel)
        # Drain the fries to remove excess oil using a towel
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fryingpan_2083; available variables: [Variable<fries: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2056_around_bathroom_counter_41(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

#goal_representation
behavior drain_fries(fries:item, towel:item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold a towel for draining
        achieve_once close_char(char, fries)
        # Approach the fries to drain them
        observe(fries, "Check if the fries have excess oil that needs to be drained")

behavior __goal__():
    body:
        bind fries: item where:
            is_food_food(fries) and on(fries, fryingpan_2083)
        # Select the fries in the frying pan

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        bind fryingpan_2083: item where:
            is_fryingpan(fryingpan_2083)
        # Define the frying pan with ID 2083

        drain_fries(fries, towel)
        # Drain the fries to remove excess oil using a towel
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fryingpan_2083; available variables: [Variable<fries: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2057_around_sink_231(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

#goal_representation
behavior drain_fries(fries:item, towel:item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold a towel for draining
        achieve_once close_char(char, fries)
        # Approach the fries to drain them
        observe(fries, "Check if the fries have excess oil that needs to be drained")

behavior __goal__():
    body:
        bind fries: item where:
            is_food_food(fries) and on(fries, fryingpan_2083)
        # Select the fries in the frying pan

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        bind fryingpan_2083: item where:
            is_fryingpan(fryingpan_2083)
        # Define the frying pan with ID 2083

        drain_fries(fries, towel)
        # Drain the fries to remove excess oil using a towel
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_sink_231(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(tray,sink_instance)
        else:
            exp(tray,sink_instance)
    eff:
        unknown[tray]=False
        close[tray,sink_instance]=True
        close[sink_instance,tray]=True
    

behavior find_bowl_2072_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior drain_fries(fries:item, surface:item):
    body:
        achieve_once on(fries, surface) # Place the fries on the surface to drain

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and has_water(fries)
        # Select the fries that need to be drained

        bind surface: item where:
            surfaces(surface)
        # Select a surface for draining

        drain_fries(fries, surface)
        # Drain the fries to remove excess oil on the selected surface
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_sink_231(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior drain_fries(fries:item, towel:item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold the towel for draining
        achieve_once has_water(fries)
        # Ensure the fries are being drained

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select the cut potato fries

        bind towel: item where:
            is_towel(towel)
        # Select a towel for draining the fries

        drain_fries(fries, towel)
        # Drain the fries to remove excess oil using a towel
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior drain_fries(fries:item, towel:item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold the towel for draining
        achieve_once has_water(fries)
        # Ensure the fries are being drained

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select the cut potato fries

        bind towel: item where:
            is_towel(towel)
        # Select a towel for draining the fries

        drain_fries(fries, towel)
        # Drain the fries to remove excess oil using a towel
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(towel_2056, sink_231)walk_executor(towel_2056)grab_executor(towel_2056)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(food_potato_2035, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(towel_2056, sink_231)
Fail to find towel_2056 around sink_231. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(towel_2056, dishwasher_1001)walk_executor(towel_2056)grab_executor(towel_2056)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(food_potato_2035, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the knife_2050. Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the knife_2050. Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(towel_2056, dishwasher_1001)
Fail to find towel_2056 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(towel_2056, sink_42)walk_executor(towel_2056)grab_executor(towel_2056)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(food_potato_2035, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the knife_2050. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
exp(towel_2056, sink_42)
Fail to find towel_2056 around sink_42. 
##############################
From agent.py-> find a plan in act()
walk_executor(towel_rack_32)exp(towel_2056, towel_rack_32)walk_executor(towel_2056)grab_executor(towel_2056)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(food_potato_2035, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(towel_rack_32)
Robot find: towel_2057, Robot is close to the knife_2050. Robot is close to the towel_rack_32. 
##############################
From agent.py
exp(towel_2056, towel_rack_32)
Fail to find towel_2056 around towel_rack_32. 
##############################
From agent.py-> find a plan in act()
walk_executor(towel_2057)grab_executor(towel_2057)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(faucet_232)walk_executor(kitchen_counter_230)put_executor(food_potato_2035, kitchen_counter_230)switchon_executor(faucet_232)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(towel_2057)
Robot find: Robot is close to the knife_2050. Robot is close to the towel_rack_32. Robot is close to the towel_2057. 
##############################
From agent.py
grab_executor(towel_2057)
Robot find: Robot is close to the knife_2050. Robot is close to the towel_rack_32. Robot is close to the towel_2057. Grabbing towel_2057 by left hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the towel_2057. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior drain_fries(fries:item, towel:item):
    body:
        achieve_once inhand(towel) # Temporarily hold the towel for draining
        achieve clean(fries) # Drain excess oil from the fries using the towel

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select fries that are sliced

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        drain_fries(fries, towel)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_towel_2058_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior drain_fried_fries_friespan(fries:item, towel:item, fryingpan:item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold towel to assist in draining fries
        achieve_once on(fries, fryingpan)
        # Ensure fries are in the frying pan to prepare for draining

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select the fries

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and inside(fries, fryingpan)
        # Select the frying pan with the fries in it

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        drain_fried_fries_friespan(fries, towel, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior drain_fried_fries_friespan(fries:item, towel:item, fryingpan:item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold towel to assist in draining fries
        achieve_once on(fries, fryingpan)
        # Ensure fries are in the frying pan to prepare for draining

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select the fries

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and inside(fries, fryingpan)
        # Select the frying pan with the fries in it

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        drain_fried_fries_friespan(fries, towel, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(food_potato_2035)grab_executor(food_potato_2035)put_executor(food_potato_2035, fryingpan_2083)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the towel_2057. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the towel_2057. Robot is close to the kitchen_counter_230. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by right hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the towel_2057. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the towel_2057. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by right hand. 
##############################
From agent.py
put_executor(food_potato_2035, fryingpan_2083)
Robot find: Robot is close to the towel_2057. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. fryingpan_2083 is close food_potato_2035. food_potato_2035 is close fryingpan_2083. food_potato_2035 is on fryingpan_2083. food_potato_2035 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to achieve the goal of having the fries drained. Currently, the fries are placed back in the frying pan, but the action of using the towel in conjunction with the frying pan to drain the excess oil from the fries has not been performed. The robot should use the towel to assist in the draining process to complete the sub-task.
##############################
From agent.py
Human Instruction: The robot needs to achieve the goal of having the fries drained. Currently, the fries are placed back in the frying pan, but the action of using the towel in conjunction with the frying pan to drain the excess oil from the fries has not been performed. The robot should use the towel to assist in the draining process to complete the sub-task.

Trial and Error: You can not grab food_potato_2035
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_potato_2035 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_potato_2035 around fridge_289.
Action 7: Observe around food_potato_2035 with the question of Locate and check if the potato is dirty.
Action 8: Grab food_potato_2035.
Action 9: Walk to cutting_board_2051.
Action 10: Put food_potato_2035 on cutting_board_2051.
Action 11: Walk to knife_2050.
Action 12: Grab knife_2050.
Action 13: Walk to food_potato_2035.
Action 14: Cut food_potato_2035.
Action 15: Grab food_potato_2035.
Action 16: Walk to fryingpan_2083.
Action 17: Put food_potato_2035 into fryingpan_2083.
Action 18: Grab fryingpan_2083.
Action 19: Walk to stove_2065.
Action 20: Put fryingpan_2083 on stove_2065.
Action 21: Switch on stove_2065.
Action 22: Walk to sink_231.
Action 23: look for towel_2056 around sink_231.
Action 24: Walk to dishwasher_1001.
Action 25: Open dishwasher_1001.
Action 26: look for towel_2056 around dishwasher_1001.
Action 27: Walk to sink_42.
Action 28: look for towel_2056 around sink_42.
Action 29: Walk to towel_rack_32.
Action 30: look for towel_2056 around towel_rack_32.
Action 31: Walk to towel_2057.
Action 32: Grab towel_2057.
Action 33: Walk to food_potato_2035.
Action 34: Walk to kitchen_counter_230.
Action 35: Put knife_2050 on kitchen_counter_230.
Action 36: Walk to food_potato_2035.
Action 37: Grab food_potato_2035.
Action 38: Put food_potato_2035 on fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2057_around_dresser_358(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(towel,dresser_instance)
        else:
            exp(towel,dresser_instance)
    eff:
        unknown[towel]=False
        close[towel,dresser_instance]=True
        close[dresser_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior drain_fries(fries:item, towel:item, fryingpan:item):
    body:
        achieve_once inhand(towel) # Temporarily hold the towel to assist in draining
        achieve_once on(fries, fryingpan) # Ensure fries are in the frying pan
        achieve_once clean(fries) # Remove excess oil from fries

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries)
        # Select the fries

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        drain_fries(fries, towel, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_towel_2056_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior drain_fries(fries: item, towel: item, fryingpan: item):
    body:
        achieve_once inhand(towel) # Temporarily hold the towel for draining
        achieve_once on(fries, fryingpan) # Ensure fries are in the frying pan
        wipe(fries) # Use the towel to wipe the fries and remove excess oil

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries)
        # Select the fries
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        
        bind towel: item where:
            is_towel(towel) and id[towel] == 2057
        # Select the towel with ID 2057

        achieve close_char(char, fryingpan)
        # Ensure you are close to the frying pan where the fries are located

        drain_fries(fries, towel, fryingpan)
        # Drain the fries using the towel

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2059_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior drain_fries(fries:item, fryingpan:item, towel:item):
    body:
        achieve_once close_char(char, fryingpan)  # Approach the frying pan to access the fries
        achieve_once close_char(char, towel)  # Approach the towel to use it
        achieve_once inhand(towel)  # Temporarily hold the towel
        wipe(fryingpan)  # Use the towel to wipe the frying pan and drain excess oil from the fries

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries)
        # Select the fries

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind towel: item where:
            is_towel(towel)
        # Select the towel

        drain_fries(fries, fryingpan, towel)
        # Drain the fries using the towel to remove excess oil in the frying pan
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "4. drain the fries to remove excess oil." ?
Answer: For draining the fries to remove excess oil, you should use a method like placing the fries on a rack or using paper towels after frying. Reevaluate the current subgoal to match this method.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Drain the fries using paper towels or a rack to remove excess oil.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def check_fry_ready_for_draining(fries:item, fryingpan:item):
    symbol is_fry_ready= exists o: item : ((is_food_potato(o)) and inside(o, fryingpan))
    return is_fry_ready

behavior drain_fries_with_towel(fries:item, towel:item, fryingpan:item):
    body:
        if check_fry_ready_for_draining(fries, fryingpan):
            crunchiness_check(fries)
        achieve_once on(fries, towel)

behavior __goal__():
    body:
        bind towel: item where:
            is_towel(towel)
        # Select a towel
        
        bind fryingpan: item where:
           is_fryingpan(fryingpan)
        # Select frying pan

        bind fries: item where:
            is_food_potato(fries)
        # Select the fries

        drain_fries_with_towel(fries, towel, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function crunchiness_check not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2056_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_tray_296_around_cupboard_229(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tray,cupboard_instance)
        else:
            exp(tray,cupboard_instance)
    eff:
        unknown[tray]=False
        close[tray,cupboard_instance]=True
        close[cupboard_instance,tray]=True
    

#goal_representation
behavior drain_fries_with_towel(fries:item, towel:item, fryingpan:item):
    body:
        achieve_once on(fries, towel)

behavior __goal__():
    body:
        bind towel: item where:
            is_towel(towel)
        # Select a towel
        
        bind fryingpan: item where:
           is_fryingpan(fryingpan)
        # Select frying pan

        bind fries: item where:
            is_food_potato(fries)
        # Select the fries

        drain_fries_with_towel(fries, towel, fryingpan)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior drain_fries_with_towel(fries:item, towel:item, fryingpan:item):
    body:
        achieve_once on(fries, towel)

behavior __goal__():
    body:
        bind towel: item where:
            is_towel(towel)
        # Select a towel
        
        bind fryingpan: item where:
           is_fryingpan(fryingpan)
        # Select frying pan

        bind fries: item where:
            is_food_potato(fries)
        # Select the fries

        drain_fries_with_towel(fries, towel, fryingpan)
##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)put_executor(food_potato_2035, towel_2057)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the towel_2057. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by right hand. 
##############################
From agent.py
put_executor(food_potato_2035, towel_2057)
Robot find: Robot is close to the towel_2057. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. towel_2057 is close food_potato_2035. food_potato_2035 is close towel_2057. food_potato_2035 is on towel_2057. food_potato_2035 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_potato_2035)', 'cut_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_potato_2035, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(sink_231)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(sink_42)', 'walk_executor(towel_rack_32)', 'walk_executor(towel_2057)', 'grab_executor(towel_2057)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035) (Failed)', 'walk_executor(kitchen_counter_230)', 'put_executor(knife_2050, kitchen_counter_230)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'put_executor(food_potato_2035, fryingpan_2083)', 'grab_executor(food_potato_2035)', 'put_executor(food_potato_2035, towel_2057)']
Time info:
Time consume: 295 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 187
goal generate times: 12
goal correct times: 1
action_num: 34

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
