From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee_with_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve plugged(coffee_maker) 
        # Ensure the coffee maker is plugged in
        achieve_once has_water(coffee_maker) 
        # Ensure the coffee maker has water
        achieve_once on(cup, coffee_maker) 
        # Place the cup on the coffee makers output tray
        achieve is_on(coffee_maker) 
        # Turn on the coffee maker to start making coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        make_coffee_with_coffee_maker(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior make_coffee_with_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve plugged(coffee_maker) 
        # Ensure the coffee maker is plugged in
        achieve_once has_water(coffee_maker) 
        # Ensure the coffee maker has water
        achieve_once on(cup, coffee_maker) 
        # Place the cup on the coffee makers output tray
        achieve is_on(coffee_maker) 
        # Turn on the coffee maker to start making coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        make_coffee_with_coffee_maker(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffee_table_2068)exp(cup_2063, coffee_table_2068)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(faucet_232)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(cup_2063, coffee_table_2068)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. 
##############################
From agent.py
put_executor(cup_2063, coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is close cup_2063. cup_2063 is close coffe_maker_290. cup_2063 is on coffe_maker_290. cup_2063 released by right hand. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The coffee maker needs to be plugged in to make coffee, but there is no action indicating that the coffee maker was plugged. Therefore, plug in the coffee maker to complete the task.
##############################
From agent.py
Human Instruction: The coffee maker needs to be plugged in to make coffee, but there is no action indicating that the coffee maker was plugged. Therefore, plug in the coffee maker to complete the task.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffee_table_2068.
Action 5: look for cup_2063 around coffee_table_2068.
Action 6: Walk to cup_2063.
Action 7: Grab cup_2063.
Action 8: Walk to coffe_maker_290.
Action 9: Put cup_2063 on coffe_maker_290.
Action 10: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_116(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior plug_in_coffee_maker(coffee_maker: item, powersocket: item):
    body:
        achieve_once plugged(coffee_maker)

behavior make_coffee(coffee_maker: item, cup: item):
    body:
        achieve has_water(coffee_maker)
        achieve on(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup) and on(cup, coffee_maker)
        # Select the cup on the coffee maker

        bind powersocket: item where:
            is_powersocket(powersocket)
        # Select the power socket

        plug_in_coffee_maker(coffee_maker, powersocket)
        make_coffee(coffee_maker, cup)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_116(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item, power_socket:item):
    body:
        achieve_once close_char(char, coffee_maker) # Approach the coffee maker
        achieve plugged(coffee_maker) # Plug in the coffee maker

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once on(cup, coffee_maker) # Place the cup on the coffee maker
        achieve is_on(coffee_maker) # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select a power socket

        plug_in_coffee_maker(coffee_maker, power_socket) # Plug the coffee maker into the power socket

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the specific cup with ID 2063

        make_coffee(coffee_maker, cup)
        # Make coffee using the coffee maker, placing the cup on it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_116(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Plug the coffee maker into the power source

behavior make_coffee_with_coffee_maker(coffee_maker:item, cup:item, powersocket:item):
    body:
        achieve_once on(cup, coffee_maker)
        # Place the cup on the coffee maker
        plug_in_coffee_maker(coffee_maker)
        # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind powersocket: item where:
            is_powersocket(powersocket)
        # Select a power socket for the coffee maker

        make_coffee_with_coffee_maker(coffee_maker, cup, powersocket)
        # Make a cup of coffee using the coffee maker

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker." ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_116(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_and_start_coffee_maker(coffee_maker: item):
    body:
        achieve_once plugged(coffee_maker)
        # Ensure the coffee maker is plugged in
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a suitably sized cup

        achieve_once on(cup, coffee_maker)
        # Place the cup onto the coffee maker

        plug_and_start_coffee_maker(coffee_maker)
        # Plug in and start the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_dishwasher_1001(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_ready(coffee_maker:item, cup:item):
    # Check if the coffee maker is on with a cup properly placed
    symbol is_ready = is_on(coffee_maker) and on(cup, coffee_maker)
    return is_ready

behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)
    
behavior place_cup_on_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select the cup

        if not is_coffee_ready(coffee_maker, cup):
            plug_in_coffee_maker(coffee_maker)
            place_cup_on_coffee_maker(cup, coffee_maker)
            start_coffee_maker(coffee_maker)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker: item, power_socket: item):
    body:
        achieve_once plugged(coffee_maker)

behavior place_cup_on_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve_once on(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the specific cup with ID 2063

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select the power socket

        plug_in_coffee_maker(coffee_maker, power_socket)
        place_cup_on_coffee_maker(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put a suitably sized cup into the coffee machine and start it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee_machine(cup:item, coffe_maker:item):
    body:
        achieve_once on(cup, coffe_maker)
        achieve is_on(coffe_maker)

behavior plug_in_coffe_maker(coffe_maker:item, powersocket:item):
    body:
        achieve plugged(coffe_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select the coffee maker

        bind powersocket: item where:
            is_powersocket(powersocket)
        # Select a power socket

        if not plugged(coffe_maker):
            plug_in_coffe_maker(coffe_maker, powersocket)
        
        prepare_coffee_machine(cup, coffe_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_powered(coffee_maker:item):
    # Function to check if the coffee maker is plugged in
    symbol is_powered= plugged(coffee_maker)
    return is_powered

behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        if not is_coffee_maker_powered(coffee_maker):
            # If the coffee maker is not plugged in, assume necessary actions will be taken to plug it
            observe(coffee_maker, "Check if the coffee maker needs to be plugged in")

behavior position_cup_and_start(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        ensure_coffee_maker_ready(coffee_maker)
        # Ensure the coffee maker is ready to use

        position_cup_and_start(cup, coffee_maker)
        # Place the cup in the coffee maker and start it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker_to_start(coffee_maker:item, powersocket:item):
    body:
        achieve_once plugged(coffee_maker)
        # Plug in the coffee maker

behavior start_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve_once on(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind powersocket: item where:
            is_powersocket(powersocket)
        # Select a power socket

        plug_in_coffee_maker_to_start(coffee_maker, powersocket)
        start_coffee_maker(coffee_maker, cup)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put a suitably sized cup into the coffee machine and start it." ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item, power_socket:item):
    body:
        achieve_once plugged(coffee_maker) # Plug in the coffee maker

behavior place_cup_and_start_machine(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker) # Place the cup on the coffee maker
        achieve is_on(coffee_maker) # Start the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a suitable cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select the power socket

        plug_in_coffee_maker(coffee_maker, power_socket)
        # Plug in the coffee maker

        place_cup_and_start_machine(cup, coffee_maker)
        # Place the cup on the coffee maker and start it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior insert_cup(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        # Place the cup into the coffee machine

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker)
        # Start the coffee machine

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup) and on(cup, coffee_table_2068)
        # Select a cup that is on the coffee table

        insert_cup(cup, coffee_maker)
        # Put the cup into the coffee machine

        start_coffee_maker(coffee_maker)
        # Start the coffee maker

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffee_table_2068; available variables: [Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
behavior insert_cup(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        # Place the cup into the coffee machine

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker)
        # Start the coffee machine

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        insert_cup(cup, coffee_maker)
        # Put the cup into the coffee machine

        start_coffee_maker(coffee_maker)
        # Start the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee_maker(coffe_maker: item, cup: item, powersocket: item):
    body:
        achieve_once plugged(coffe_maker)
        # Plug in the coffee maker to the power socket
        achieve_once on(cup, coffe_maker)
        # Place the cup on the coffee maker
        achieve is_on(coffe_maker)
        # Start the coffee maker

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind powersocket: item where:
            is_powersocket(powersocket)
        # Select a power socket

        prepare_coffee_maker(coffe_maker, cup, powersocket)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put a suitably sized cup into the coffee machine and start it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_cup(cup: item):
    # Function to determine if a cup is suitable for use with a coffee maker
    symbol is_appropriate_cup = is_cup(cup)
    return is_appropriate_cup

def is_coffee_maker_ready(coffee_maker: item):
    # Check if the coffee maker is plugged in and has a switch
    return plugged(coffee_maker) and has_switch(coffee_maker)

behavior plug_in_coffee_maker(coffee_maker: item):
    body:
        achieve_once plugged(coffee_maker)
        # Plug in the coffee maker

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_target_cup(cup)
        # Select a suitable cup

        if not is_coffee_maker_ready(coffee_maker):
            plug_in_coffee_maker(coffee_maker)
            # Plug in the coffee maker if it is not ready

        achieve_once on(cup, coffee_maker)
        # Place the cup in the coffee maker

        start_coffee_maker(coffee_maker)
        # Start the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_116(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cup_on_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)

behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a suitably sized cup

        bind coffee_maker: item where:
            is_coffee_maker(coffee_maker)
        # Select the coffee maker

        place_cup_on_coffee_maker(cup, coffee_maker)
        plug_in_coffee_maker(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_coffee_maker not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
behavior place_cup_on_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)

behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a suitably sized cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        place_cup_on_coffee_maker(cup, coffee_maker)
        plug_in_coffee_maker(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior add_cup_and_start_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a suitable cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        plug_in_coffee_maker(coffee_maker)
        add_cup_and_start_coffee_maker(cup, coffee_maker)
        # Put the cup in the coffee maker and start it

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put a suitably sized cup into the coffee machine and start it." ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_drawing_400_around_drawing_240(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==240
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item, power_socket:item):
    body:
        achieve_once plugged(coffee_maker)
        # Plug in the coffee maker to the power source

behavior place_cup_on_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        # Place the cup on the coffee maker

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select a power socket

        plug_in_coffee_maker(coffee_maker, power_socket)

        bind cup: item where:
            is_cup(cup) and grabbable(cup)
        # Select a grabbable cup

        place_cup_on_coffee_maker(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_cup_and_start_coffee_machine(cup:item, coffe_maker:item):
    body:
        achieve_once on(cup, coffe_maker)
        achieve_once is_on(coffe_maker)

behavior plug_in_coffee_maker(coffe_maker:item, powersocket: item):
    body:
        achieve_once plugged(coffe_maker)
        # Plug in the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup with ID 2063
        
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 290
        # Select coffee maker with ID 290

        bind powersocket: item where:
            is_powersocket(powersocket)
        # Select a powersocket available

        plug_in_coffee_maker(coffe_maker, powersocket)
        # Plug in the coffee maker

        put_cup_and_start_coffee_machine(cup, coffe_maker)
        # Put the cup on the coffee maker and start it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffeemaker(coffe_maker:item):
    body:
        achieve plugged(coffe_maker)

behavior place_cup_and_start_coffeemaker(cup:item, coffeemaker:item):
    body:
        achieve_once on(cup, coffeemaker)
        achieve is_on(coffeemaker)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)

        bind cup: item where:
            is_cup(cup)

        plug_in_coffeemaker(coffe_maker)
        place_cup_and_start_coffeemaker(cup, coffe_maker)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put a suitably sized cup into the coffee machine and start it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_dishwasher_1001(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cup_and_start_coffee_machine(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior plug_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a suitably sized cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        plug_coffee_maker(coffee_maker)
        # Plug in the coffee maker

        place_cup_and_start_coffee_machine(cup, coffee_maker)
        # Put the cup on the coffee machine and start it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker: item):
    # Check if the coffee maker is properly plugged in
    symbol ready = plugged(coffee_maker)
    return ready

behavior ensure_coffee_maker_setup(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)
        # Plug in the coffee maker if not already plugged

behavior put_cup_and_start(coffee_maker: item, cup: item):
    body:
        achieve_once on(cup, coffee_maker)
        # Place the cup on the coffee maker
        achieve is_on(coffee_maker)
        # Start the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a suitably sized cup

        if not is_coffee_maker_ready(coffee_maker):
            ensure_coffee_maker_setup(coffee_maker)
        put_cup_and_start(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior place_cup_and_start_machine(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        # Place the cup on the coffee maker
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a suitably sized cup

        plug_in_coffee_maker(coffee_maker)
        place_cup_and_start_machine(cup, coffee_maker)


#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put a suitably sized cup into the coffee machine and start it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_116(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_coffee_maker_plugged_in(coffee_maker:item):
    # Function to ensure the coffee maker is plugged in
    symbol plugged_in = plugged(coffee_maker)
    return plugged_in

behavior plug_in_coffee_maker(coffee_maker:item, power_socket:item):
    body:
        achieve_once plugged(coffee_maker)
        # Plug the coffee maker into the power socket

behavior place_cup_and_start_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        # Place the cup on the coffee maker
        achieve_once is_on(coffee_maker)
        # Start the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        if not ensure_coffee_maker_plugged_in(coffee_maker):
            bind power_socket: item where:
                is_powersocket(power_socket)
            # Select a power socket
            
            plug_in_coffee_maker(coffee_maker, power_socket)
        
        place_cup_and_start_coffee_maker(cup, coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_dishwasher_1001(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_suitably_sized_cup_for_coffee_maker(cup: item, coffee_maker: item):
    # Function to check if a cup is suitably sized for the coffee maker
    symbol is_suitable= on(cup, coffee_maker)
    return is_suitable

behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and is_suitably_sized_cup_for_coffee_maker(cup, coffe_maker_290)
        # Select a suitably sized cup that is on the coffee maker

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        plug_in_coffee_maker(coffee_maker)
        start_coffee_maker(coffee_maker)
 
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffe_maker_290; available variables: [Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_suitably_sized_cup_for_coffee_maker(cup: item, coffee_maker: item):
    # Function to check if a cup is suitably sized for the coffee maker
    symbol is_suitable= on(cup, coffee_maker)
    return is_suitable

behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and is_suitably_sized_cup_for_coffee_maker(cup, coffee_maker_290)
        # Select a suitably sized cup that is on the coffee maker

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        plug_in_coffee_maker(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffee_maker_290; available variables: [Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_oven_295(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(coffee_filter,oven_instance)
        else:
            exp(coffee_filter,oven_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,oven_instance]=True
        close[oven_instance,coffee_filter]=True
    

#goal_representation
 
def is_suitably_sized_cup_for_coffee_maker(cup: item, coffee_maker: item):
    # Function to check if a cup is suitably sized for the coffee maker
    symbol is_suitable= on(cup, coffee_maker)
    return is_suitable

behavior plug_in_coffee_maker(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and is_suitably_sized_cup_for_coffee_maker(cup, coffee_maker_290)
        # Select a suitably sized cup that is on the coffee maker

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        plug_in_coffee_maker(coffee_maker)
        start_coffee_maker(coffee_maker)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_382(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_coffee_maker_on(coffee_maker: item):
    body:
        achieve_once plugged(coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a suitable cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        achieve_once on(cup, coffee_maker)
        # Place the cup on the coffee maker

        ensure_coffee_maker_on(coffee_maker)
        # Ensure the coffee maker is plugged in and then turn it on

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(coffee_table_2068)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(coffe_maker_290)', 'put_executor(cup_2063, coffe_maker_290)', 'switchon_executor(coffe_maker_290)']
Time info:
Time consume: 419 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 65
goal generate times: 25
goal correct times: 0
action_num: 9

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
