From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup of milk.', '2. Heat the cup of milk in the microwave.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2115_around_kitchen_counter_122(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior find_milk(milk: item):
    body:
        achieve close_char(char, milk)

behavior __goal__():
    body:
        if exists milk: item : (is_milk(milk) and not visited(milk)):
            # If a cup of milk is found, move closer to it
            bind milk: item where:
                is_milk(milk) and not visited(milk)
            find_milk(milk)
        else:
            # Check all items to find a cup of milk if not found initially
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    observe(milk, "Find the cup of milk")
#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_milk(milk: item):
    body:
        achieve close_char(char, milk)

behavior __goal__():
    body:
        if exists milk: item : (is_milk(milk) and not visited(milk)):
            # If a cup of milk is found, move closer to it
            bind milk: item where:
                is_milk(milk) and not visited(milk)
            find_milk(milk)
        else:
            # Check all items to find a cup of milk if not found initially
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    observe(milk, "Find the cup of milk")
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(milk_2115, kitchen_counter_122)walk_executor(milk_2115)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_122)
Fail to find milk_2115 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(milk_2115, fridge_126)
Fail to find milk_2115 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_food_1000)exp(milk_2115, food_food_1000)walk_executor(milk_2115)
##############################
From agent.py
walk_executor(food_food_1000)
Robot find: Robot is close to the food_food_1000. 
##############################
From agent.py
exp(milk_2115, food_food_1000)
Fail to find milk_2115 around food_food_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(door_62)exp(milk_2115, door_62)walk_executor(milk_2115)
##############################
From agent.py
walk_executor(door_62)
Robot find: phone_71, drawing_111, Robot is close to the door_62. 
##############################
From agent.py
exp(milk_2115, door_62)
Fail to find milk_2115 around door_62. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)exp(milk_2115, oven_127)walk_executor(milk_2115)
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
exp(milk_2115, oven_127)
Fail to find milk_2115 around oven_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)exp(milk_2115, sink_19)walk_executor(milk_2115)
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, mat_32, phone_2029, cleaning_solution_2143, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find milk_2115 ?
Answer: Go to dining_room_41. Look for table_114, and you will find milk_2115 on the table.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_41. Look for table_114, and you will find milk_2115 on the table.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for milk_2115 around kitchen_counter_122.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for milk_2115 around fridge_126.
Action 7: Walk to food_food_1000.
Action 8: look for milk_2115 around food_food_1000.
Action 9: Walk to door_62.
Action 10: look for milk_2115 around door_62.
Action 11: Walk to oven_127.
Action 12: Open oven_127.
Action 13: look for milk_2115 around oven_127.
Action 14: Walk to sink_19.

##############################
From agent.py
exp(milk_2115, sink_19)
Fail to find milk_2115 around sink_19. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(milk_2115, table_114)walk_executor(milk_2115)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(milk_2115, table_114)
Find milk_2115. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2141_around_table_270(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup of milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind milk_cup: item where:
            is_cup(milk_cup) and id[milk_cup] == 2115
        # Select the cup of milk with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(milk_cup, microwave)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_toilet_15(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

behavior find_bowl_2141_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior heat_cup_of_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_cup_of_milk_in_microwave(cup, microwave)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2141_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. heat the cup of milk in the microwave." ?
Answer: Put the cup of milk inside the microwave, then turn the microwave on to heat.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2142_around_pot_78(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the specific cup with ID 2063

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk_in_microwave(cup: item, microwave: item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior heat_cup_of_milk(cup: item, microwave: item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_cup_of_milk(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_table_270(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        achieve_once closed(microwave)
        achieve is_on(microwave)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        bind microwave: item where:
            is_microwave(microwave)
        heat_milk_in_microwave(cup, microwave)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. heat the cup of milk in the microwave." ?
Answer: Put the cup inside the microwave and turn the microwave on to heat.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_check_2075_around_basket_for_clothes_2078(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(check,basket_for_clothes_instance)
        else:
            exp(check,basket_for_clothes_instance)
    eff:
        unknown[check]=False
        close[check,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,check]=True
    

behavior find_tea_2066_around_box_2038(tea:item):
    goal: not unknown(tea)
    body:
        assert is_tea(tea)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(tea,box_instance)
        else:
            exp(tea,box_instance)
    eff:
        unknown[tea]=False
        close[tea,box_instance]=True
        close[box_instance,tea]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the cup with milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
        # Heat the cup of milk in the microwave
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_table_270(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_oil_2013_around_fryingpan_2154(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(oil,fryingpan_instance)
        else:
            exp(oil,fryingpan_instance)
    eff:
        unknown[oil]=False
        close[oil,fryingpan_instance]=True
        close[fryingpan_instance,oil]=True
    

behavior find_measuring_cup_2012_around_microwave_135(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(measuring_cup,microwave_instance)
        else:
            exp(measuring_cup,microwave_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,microwave_instance]=True
        close[microwave_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup of milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2141_around_table_270(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_oil_2149_around_fryingpan_2154(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(oil,fryingpan_instance)
        else:
            exp(oil,fryingpan_instance)
    eff:
        unknown[oil]=False
        close[oil,fryingpan_instance]=True
        close[fryingpan_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2142_around_ironing_board_2144(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(bowl,ironing_board_instance)
        else:
            exp(bowl,ironing_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,ironing_board_instance]=True
        close[ironing_board_instance,bowl]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the specific cup with ID 2063

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. heat the cup of milk in the microwave." ?
Answer: Put the cup inside the microwave and turn the microwave on to heat.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2142_around_fryingpan_2154(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(bowl,fryingpan_instance)
        else:
            exp(bowl,fryingpan_instance)
    eff:
        unknown[bowl]=False
        close[bowl,fryingpan_instance]=True
        close[fryingpan_instance,bowl]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2141_around_table_270(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the specific cup with ID 2063

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_microwave_135(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(bowl,microwave_instance)
        else:
            exp(bowl,microwave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,microwave_instance]=True
        close[microwave_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_mousepad_214(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(bowl,mousepad_instance)
        else:
            exp(bowl,mousepad_instance)
    eff:
        unknown[bowl]=False
        close[bowl,mousepad_instance]=True
        close[mousepad_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_fryingpan_2154(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(wooden_spoon,fryingpan_instance)
        else:
            exp(wooden_spoon,fryingpan_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,fryingpan_instance]=True
        close[fryingpan_instance,wooden_spoon]=True
    

behavior find_bowl_2142_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_cup_of_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with milk having ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_cup_of_milk_in_microwave(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_128_around_kitchen_counter_123(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tray,kitchen_counter_instance)
        else:
            exp(tray,kitchen_counter_instance)
    eff:
        unknown[tray]=False
        close[tray,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tray]=True
    

behavior find_bowl_2141_around_table_270(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_bowl_2141_around_table_270(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_plate_2152_around_table_270(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the specific cup with ID 2063

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_envelope_2055_around_nightstand_192(envelope:item):
    goal: not unknown(envelope)
    body:
        assert is_envelope(envelope)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(envelope,nightstand_instance)
        else:
            exp(envelope,nightstand_instance)
    eff:
        unknown[envelope]=False
        close[envelope,nightstand_instance]=True
        close[nightstand_instance,envelope]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2115
        # Select the specific cup with ID 2115

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Get a cup of milk and heat it by microwave.
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(food_food_1000)', 'walk_executor(door_62)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'walk_executor(sink_19)', 'walk_executor(table_114)', 'walk_executor(milk_2115)']
Time info:
Time consume: 384 seconds
Exp_helper query times: 1
Guidance query times: 3
library scale: 191
goal generate times: 25
goal correct times: 0
action_num: 11

Task complete rate:
Keystate: k1 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
