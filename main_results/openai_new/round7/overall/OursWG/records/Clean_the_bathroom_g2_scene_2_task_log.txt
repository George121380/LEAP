From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_soap_2037_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve is_on(faucet)
        achieve has_water(sink)

behavior make_soapy_water(sink:item, soap:item):
    body:
        achieve_once inhand(soap)
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42 in the bathroom
        
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the bathroom sink
        
        bind soap: item where:
            is_soap(soap) and id[soap] == 2053
        # Select the soap with ID 2053

        fill_sink_with_water(sink, faucet)
        make_soapy_water(sink, soap)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_soap_2037_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior fill_sink_with_water(sink: item, faucet: item):
    body:
        achieve is_on(faucet)
        achieve has_water(sink)

behavior make_soapy_water(sink: item, soap: item):
    body:
        achieve_once inhand(soap)
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42 in the bathroom
        
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the bathroom sink
        
        bind soap: item where:
            is_soap(soap) and id[soap] == 2053
        # Select the soap with ID 2053

        fill_sink_with_water(sink, faucet)
        make_soapy_water(sink, soap)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_soap_2038_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water using the faucet

behavior add_soap_to_sink(soap:item, sink:item):
    body:
        achieve_once inside(soap, sink)
        # Add soap to the sink to create soapy water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select the soap

        fill_sink_with_water(sink, faucet)
        # Fill the sink with water

        add_soap_to_sink(soap, sink)
        # Add soap to create soapy water in the sink
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water using the faucet

behavior add_soap_to_sink(soap:item, sink:item):
    body:
        achieve_once inside(soap, sink)
        # Add soap to the sink to create soapy water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select the soap

        fill_sink_with_water(sink, faucet)
        # Fill the sink with water

        add_soap_to_sink(soap, sink)
        # Add soap to create soapy water in the sink
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(bathroom_counter_306)exp(soap_2037, bathroom_counter_306)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_133)putin_executor(soap_2037, sink_133)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(bathroom_counter_306)
Robot find: towel_rack_298, drawing_296, Robot is close to the bathroom_counter_306. 
##############################
From agent.py
exp(soap_2037, bathroom_counter_306)
Fail to find soap_2037 around bathroom_counter_306. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(bathroom_cabinet_305)open_executor(bathroom_cabinet_305)exp(soap_2037, bathroom_cabinet_305)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(bathroom_cabinet_305)
Robot find: Robot is close to the bathroom_cabinet_305. 
##############################
From agent.py
open_executor(bathroom_cabinet_305)
Robot find: soap_2038, Robot is close to the bathroom_cabinet_305. Robot is close to the soap_2038. bathroom_cabinet_305 is opened. 
##############################
From agent.py
exp(soap_2037, bathroom_cabinet_305)
Fail to find soap_2037 around bathroom_cabinet_305. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(soap_2038)grab_executor(soap_2038)walk_executor(sink_133)putin_executor(soap_2038, sink_133)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(soap_2038)
Robot find: Robot is close to the bathroom_cabinet_305. Robot is close to the soap_2038. 
##############################
From agent.py
grab_executor(soap_2038)
Robot find: Robot is close to the bathroom_cabinet_305. Robot is close to the soap_2038. Grabbing soap_2038 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the soap_2038. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
putin_executor(soap_2038, sink_133)
Robot find: Robot is close to the soap_2038. Robot is close to the kitchen_counter_132. Robot is close to the sink_133. soap_2038 is close sink_133. sink_133 is close soap_2038. soap_2038 is inside sink_133. soap_2038 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the sink with water using the faucet to complete the preparation of a sink of soapy water in the bathroom.
##############################
From agent.py
Human Instruction: You need to fill the sink with water using the faucet to complete the preparation of a sink of soapy water in the bathroom.

The actions you have taken:
Action 1: Walk to faucet_134.
Action 2: Switch off faucet_134.
Action 3: Walk to bathroom_counter_306.
Action 4: look for soap_2037 around bathroom_counter_306.
Action 5: Walk to faucet_308.
Action 6: Switch off faucet_308.
Action 7: Walk to bathroom_cabinet_305.
Action 8: Open bathroom_cabinet_305.
Action 9: look for soap_2037 around bathroom_cabinet_305.
Action 10: Walk to faucet_134.
Action 11: Switch on faucet_134.
Action 12: Switch off faucet_134.
Action 13: Walk to soap_2038.
Action 14: Grab soap_2038.
Action 15: Walk to sink_133.
Action 16: Put soap_2038 into sink_133.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_window_346(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==346
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(soap,window_instance)
        else:
            exp(soap,window_instance)
    eff:
        unknown[soap]=False
        close[soap,window_instance]=True
        close[window_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve is_on(faucet) # Turn on the faucet
        achieve has_water(sink) # Fill the sink with water

behavior make_soapy_water(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink) # Add soap into the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 133
        # Select the sink with ID 133 in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the bathroom sink

        bind soap: item where:
            is_soap(soap) and id[soap] == 2038
        # Select the soap with ID 2038

        fill_sink_with_water(sink, faucet)
        make_soapy_water(sink, soap)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve is_on(faucet) # Turn on the faucet
        achieve has_water(sink) # Fill the sink with water

behavior make_soapy_water(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink) # Add soap into the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 133
        # Select the sink with ID 133 in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the bathroom sink

        bind soap: item where:
            is_soap(soap) and id[soap] == 2038
        # Select the soap with ID 2038

        fill_sink_with_water(sink, faucet)
        make_soapy_water(sink, soap)


##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a sink of soapy water in the bathroom.
Action History:
['walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(bathroom_counter_306)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(bathroom_cabinet_305)', 'open_executor(bathroom_cabinet_305)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(soap_2038)', 'grab_executor(soap_2038)', 'walk_executor(sink_133)', 'putin_executor(soap_2038, sink_133)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)']
Time info:
Time consume: 93 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 108
goal generate times: 4
goal correct times: 0
action_num: 16

Task complete rate:
Keystate: k1 - Requires: 4 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
