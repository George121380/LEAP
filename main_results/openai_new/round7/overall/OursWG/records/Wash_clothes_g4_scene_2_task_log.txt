From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the underwear with soap in the bathroom sink.', '2. Put the underwear in the washing machine.', '3. Add detergent to the washing machine for a thorough clean.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

behavior find_soap_2037_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_bathroom_sink_with_underwear(sink:item):
    # Function to check if the sink in the bathroom contains underwear
    symbol has_underwear = exists underwear: item : (is_clothes_underwear(underwear) and inside(underwear, sink))
    return has_underwear

behavior wash_underwear_with_soap(underwear:item, soap:item, sink:item):
    body:
        achieve_once inhand(underwear)
        # Temporarily hold the underwear for washing
        achieve_once inside(underwear, sink)
        # Place the underwear inside the sink
        wash(underwear)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink inside the bathroom

        if is_bathroom_sink_with_underwear(sink):
            bind underwear: item where:
                is_clothes_underwear(underwear) and inside(underwear, sink)
            bind soap: item where:
                is_soap(soap)
            wash_underwear_with_soap(underwear, soap, sink)
        else: 
            # Search for the underwear in the known but unvisited sinks
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if there is underwear in the bathroom sink")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_bathroom_sink_with_underwear(sink:item):
    # Function to check if the sink in the bathroom contains underwear
    symbol has_underwear = exists underwear: item : (is_clothes_underwear(underwear) and inside(underwear, sink))
    return has_underwear

behavior wash_underwear_with_soap(underwear:item, soap:item, sink:item):
    body:
        achieve_once inhand(underwear)
        # Temporarily hold the underwear for washing
        achieve_once inside(underwear, sink)
        # Place the underwear inside the sink
        wash(underwear)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink inside the bathroom

        if is_bathroom_sink_with_underwear(sink):
            bind underwear: item where:
                is_clothes_underwear(underwear) and inside(underwear, sink)
            bind soap: item where:
                is_soap(soap)
            wash_underwear_with_soap(underwear, soap, sink)
        else: 
            # Search for the underwear in the known but unvisited sinks
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if there is underwear in the bathroom sink")

##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)obs(sink_133, Check if there is underwear in the bathroom sink)walk_executor(sink_307)obs(sink_307, Check if there is underwear in the bathroom sink)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, pot_54, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
obs(sink_133, Check if there is underwear in the bathroom sink)
Get this information:  after_shave_2029 is inside sink_133. sink_133 is close to kitchen_counter_128. sink_133 is close to wall_2. sink_133 is close to cupboard_130. sink_133 is close to kitchen_counter_132. sink_133 is close to faucet_134. sink_133 is close to wall_6. sink_133 is close to walllamp_45. sink_133 is close to after_shave_2029. sink_133 is close to floor_15. sink_133 is close to floor_16. sink_133 is close to cleaning_solution_2098. sink_133 is close to juice_2034. sink_133 is close to knifeblock_52. sink_133 is close to microwave_149. sink_133 is close to pot_54. sink_133 is close to character_219. cleaning_solution_2098 is on sink_133. juice_2034 is inside sink_133. sink_133 is inside dining_room_1. sink_133 is inside kitchen_counter_132. sink_133 is DIRTY.
##############################
From agent.py
walk_executor(sink_307)
Robot find: detergent_2108, drawing_296, towel_rack_298, Robot is close to the bathroom_counter_306. Robot is close to the sink_307. 
##############################
From agent.py
obs(sink_307, Check if there is underwear in the bathroom sink)
Get this information:  sink_307 is close to walllamp_290. sink_307 is close to wall_266. sink_307 is close to wall_269. sink_307 is close to floor_272. sink_307 is close to bathroom_cabinet_305. sink_307 is close to bathroom_counter_306. sink_307 is close to floor_273. sink_307 is close to faucet_308. sink_307 is close to floor_274. sink_307 is close to detergent_2108. sink_307 is close to character_219. sink_307 is facing drawing_296. detergent_2108 is on sink_307. sink_307 is inside bathroom_265. sink_307 is inside bathroom_counter_306. sink_307 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to check if there is any underwear in the bathroom sink (sink_307). If underwear is found, it should wash it with soap.
##############################
From agent.py
Human Instruction: The robot needs to check if there is any underwear in the bathroom sink (sink_307). If underwear is found, it should wash it with soap.

The actions you have taken:
Action 1: Walk to sink_133.
Action 2: Observe around sink_133 with the question of Check if there is underwear in the bathroom sink.
Action 3: Walk to sink_307.
Action 4: Observe around sink_307 with the question of Check if there is underwear in the bathroom sink.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

behavior find_soap_2037_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_underwear_in_sink(sink:item):
    # Function to check if there is underwear in the specified sink
    symbol has_underwear = exists item: item : (is_clothes_underwear(item) and inside(item, sink))
    return has_underwear

behavior wash_underwear(underwear:item, soap:item, sink:item):
    body:
        achieve_once inhand(soap) # Temporarily hold the soap
        wash(underwear) # Wash the underwear with soap

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 307
        # Select the bathroom sink with ID 307

        bind soap: item where:
            is_soap(soap)
        # Select soap

        if exists underwear: item : (is_clothes_underwear(underwear) and inside(underwear, sink) and is_underwear_in_sink(sink)):
            # Check if there is underwear in the sink based on the available information
            bind underwear: item where:
                is_clothes_underwear(underwear) and inside(underwear, sink)
            # Select the underwear inside the sink
            
            wash_underwear(underwear, soap, sink)
        else:
            # If no underwear is found in the sink, initiate observation to verify
            observe(sink, "Check if there is any underwear in the bathroom sink")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_underwear_in_sink(sink:item):
    # Function to check if there is underwear in the specified sink
    symbol has_underwear = exists item: item : (is_clothes_underwear(item) and inside(item, sink))
    return has_underwear

behavior wash_underwear(underwear:item, soap:item, sink:item):
    body:
        achieve_once inhand(soap) # Temporarily hold the soap
        wash(underwear) # Wash the underwear with soap

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 307
        # Select the bathroom sink with ID 307

        bind soap: item where:
            is_soap(soap)
        # Select soap

        if exists underwear: item : (is_clothes_underwear(underwear) and inside(underwear, sink) and is_underwear_in_sink(sink)):
            # Check if there is underwear in the sink based on the available information
            bind underwear: item where:
                is_clothes_underwear(underwear) and inside(underwear, sink)
            # Select the underwear inside the sink
            
            wash_underwear(underwear, soap, sink)
        else:
            # If no underwear is found in the sink, initiate observation to verify
            observe(sink, "Check if there is any underwear in the bathroom sink")

##############################
From agent.py-> find a plan in act()
obs(sink_307, Check if there is any underwear in the bathroom sink)
##############################
From agent.py
obs(sink_307, Check if there is any underwear in the bathroom sink)
Get this information:  sink_307 is close to walllamp_290. sink_307 is close to wall_266. sink_307 is close to wall_269. sink_307 is close to floor_272. sink_307 is close to bathroom_cabinet_305. sink_307 is close to bathroom_counter_306. sink_307 is close to floor_273. sink_307 is close to faucet_308. sink_307 is close to floor_274. sink_307 is close to detergent_2108. sink_307 is close to character_219. sink_307 is facing drawing_296. detergent_2108 is on sink_307. sink_307 is inside bathroom_265. sink_307 is inside bathroom_counter_306. sink_307 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to verify if there is any underwear in the bathroom sink (sink_307), as the actions performed have only involved observing and have not confirmed the presence or absence of underwear. If underwear is found, wash it with soap.
##############################
From agent.py
Human Instruction: You need to verify if there is any underwear in the bathroom sink (sink_307), as the actions performed have only involved observing and have not confirmed the presence or absence of underwear. If underwear is found, wash it with soap.

The actions you have taken:
Action 1: Walk to sink_133.
Action 2: Observe around sink_133 with the question of Check if there is underwear in the bathroom sink.
Action 3: Walk to sink_307.
Action 4: Observe around sink_307 with the question of Check if there is underwear in the bathroom sink.
Action 5: Observe around sink_307 with the question of Check if there is any underwear in the bathroom sink.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_underwear_in_sink(sink:item):
    # Function to check if there is underwear in the specified sink
    symbol exists_underwear = exists item: item : (is_clothes_underwear(item) and inside(item, sink))
    return exists_underwear

behavior hand_wash_underwear(underwear:item, sink:item, soap:item):
    body:
        achieve_once inhand(soap)
        achieve_once has_water(sink) # Ensure the sink is filled with water
        wash(underwear) # Wash the underwear in the sink with soap

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 307
        # Select sink_307

        bind soap: item where:
            is_soap(soap)
        # Select soap

        if exists underwear: item : (is_clothes_underwear(underwear) and inside(underwear, sink)):
            bind underwear: item where:
                is_clothes_underwear(underwear) and inside(underwear, sink)
            # If underwear is found in sink_307, wash it
            hand_wash_underwear(underwear, sink, soap)
        else:
            observe(sink, "Check if there is any underwear in the bathroom sink")
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_underwear_in_sink(sink:item):
    # Function to check if there is underwear in the specified sink
    symbol exists_underwear = exists item: item : (is_clothes_underwear(item) and inside(item, sink))
    return exists_underwear

behavior hand_wash_underwear(underwear:item, sink:item, soap:item):
    body:
        achieve_once inhand(soap)
        achieve_once has_water(sink) # Ensure the sink is filled with water
        wash(underwear) # Wash the underwear in the sink with soap

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 307
        # Select sink_307

        bind soap: item where:
            is_soap(soap)
        # Select soap

        if exists underwear: item : (is_clothes_underwear(underwear) and inside(underwear, sink)):
            bind underwear: item where:
                is_clothes_underwear(underwear) and inside(underwear, sink)
            # If underwear is found in sink_307, wash it
            hand_wash_underwear(underwear, sink, soap)
        else:
            observe(sink, "Check if there is any underwear in the bathroom sink")
 
##############################
From agent.py-> find a plan in act()
obs(sink_307, Check if there is any underwear in the bathroom sink)
##############################
From agent.py
obs(sink_307, Check if there is any underwear in the bathroom sink)
Get this information:  sink_307 is close to walllamp_290. sink_307 is close to wall_266. sink_307 is close to wall_269. sink_307 is close to floor_272. sink_307 is close to bathroom_cabinet_305. sink_307 is close to bathroom_counter_306. sink_307 is close to floor_273. sink_307 is close to faucet_308. sink_307 is close to floor_274. sink_307 is close to detergent_2108. sink_307 is close to character_219. sink_307 is facing drawing_296. detergent_2108 is on sink_307. sink_307 is inside bathroom_265. sink_307 is inside bathroom_counter_306. sink_307 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to confirm the presence of underwear in the bathroom sink (sink_307), as this has not been established yet. If underwear is found, proceed to wash it with soap.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2022_around_curtain_198(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==198
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(clothes_underwear,curtain_instance)
        else:
            exp(clothes_underwear,curtain_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,curtain_instance]=True
        close[curtain_instance,clothes_underwear]=True
    

behavior find_soap_2038_around_basket_for_clothes_2040(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(soap,basket_for_clothes_instance)
        else:
            exp(soap,basket_for_clothes_instance)
    eff:
        unknown[soap]=False
        close[soap,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_underwear_in_washing_machine(underwear:item, washing_machine:item):
    body:
        achieve_once inside(underwear, washing_machine)

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink inside the bathroom

        foreach underwear: item:
        # Move the underwear from the sink to the washing machine
            if is_clothes_underwear(underwear) and inside(underwear, sink):
                place_underwear_in_washing_machine(underwear, washing_machine)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation

behavior put_underwear_in_washing_machine(underwear:item, washing_machine:item):
    body:
        achieve_once inside(underwear, washing_machine)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 307
        # Select the sink with ID 307

        bind underwear: item where:
            is_clothes_underwear(underwear) and inside(underwear, sink)
        # Select the underwear located in the specified sink

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select a washing machine

        observe(sink, "Check if there is any underwear in the bathroom sink")
        # Ensure there is underwear in the sink

        put_underwear_in_washing_machine(underwear, washing_machine)
        # Place the underwear in the washing machine


#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2022_around_shower_303(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==303
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(clothes_underwear,shower_instance)
        else:
            exp(clothes_underwear,shower_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,shower_instance]=True
        close[shower_instance,clothes_underwear]=True
    

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind underwear: item where:
            is_clothes_underwear(underwear)
        # Select the underwear

        bind sink: item where:
            is_sink(sink) and id[sink] == 307
        # Select sink with ID 307

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        if not exists underwear_item: item : (is_clothes_underwear(underwear_item) and inside(underwear_item, sink)):
            observe(sink, "Check if there is underwear in the bathroom sink")
        
        achieve_once inside(underwear, washing_machine)
        # Place the underwear into the washing machine
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'underwear_item') at line 5788, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#goal_representation

behavior __goal__():
    body:
        bind underwear: item where:
            is_clothes_underwear(underwear)
        # Select the underwear

        bind sink: item where:
            is_sink(sink) and id[sink] == 307
        # Select sink with ID 307

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        if not exists underwear_item: item : (is_clothes_underwear(underwear_item) and inside(underwear_item, sink)):
            observe(sink, "Check if there is underwear in the bathroom sink")

        achieve_once inside(underwear, washing_machine)
        # Place the underwear into the washing machine

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'underwear_item') at line 5789, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

behavior find_soap_2038_around_basket_for_clothes_2040(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(soap,basket_for_clothes_instance)
        else:
            exp(soap,basket_for_clothes_instance)
    eff:
        unknown[soap]=False
        close[soap,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,soap]=True
    

#goal_representation
 
behavior place_underwear_in_washing_machine(underwear:item, washing_machine:item):
    body:
        achieve_once inside(underwear, washing_machine)
        # Place the underwear into the washing machine

behavior __goal__():
    body:
        bind underwear: item where:
            is_clothes_underwear(underwear)
        # Select the underwear

        bind sink: item where:
            is_sink(sink) and id[sink] == 307
        # Select sink with ID 307

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        if not exists underwear_item: item : (is_clothes_underwear(underwear_item) and inside(underwear_item, sink)):
            observe(sink, "Check if there is underwear in the bathroom sink")

        place_underwear_in_washing_machine(underwear, washing_machine)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the underwear in the washing machine." ?
Answer: Put the underwear in the washing machine.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2022_around_washing_machine_2041(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_underwear,washing_machine_instance)
        else:
            exp(clothes_underwear,washing_machine_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,washing_machine_instance]=True
        close[washing_machine_instance,clothes_underwear]=True
    

behavior find_soap_2037_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind underwear: item where:
            is_clothes_underwear(underwear)
        # Select the underwear

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        achieve_once inside(underwear, washing_machine)
        # Place the underwear in the washing machine

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind underwear: item where:
            is_clothes_underwear(underwear)
        # Select the underwear

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        achieve_once inside(underwear, washing_machine)
        # Place the underwear in the washing machine

##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2041)open_executor(washing_machine_2041)exp(clothes_underwear_2022, washing_machine_2041)walk_executor(clothes_underwear_2022)grab_executor(clothes_underwear_2022)walk_executor(washing_machine_2041)putin_executor(clothes_underwear_2022, washing_machine_2041)
##############################
From agent.py
walk_executor(washing_machine_2041)
Robot find: Robot is close to the washing_machine_2041. 
##############################
From agent.py
open_executor(washing_machine_2041)
Robot find: Robot is close to the washing_machine_2041. washing_machine_2041 is opened. 
##############################
From agent.py
exp(clothes_underwear_2022, washing_machine_2041)
Fail to find clothes_underwear_2022 around washing_machine_2041. 
##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2040)exp(clothes_underwear_2022, basket_for_clothes_2040)walk_executor(clothes_underwear_2022)grab_executor(clothes_underwear_2022)walk_executor(washing_machine_2041)putin_executor(clothes_underwear_2022, washing_machine_2041)
##############################
From agent.py
walk_executor(basket_for_clothes_2040)
Robot find: clothes_pants_2113, clothes_shirt_2114, clothes_socks_2115, clothes_skirt_2116, Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. 
##############################
From agent.py
exp(clothes_underwear_2022, basket_for_clothes_2040)
Fail to find clothes_underwear_2022 around basket_for_clothes_2040. 
##############################
From agent.py-> find a plan in act()
walk_executor(tablelamp_358)exp(clothes_underwear_2022, tablelamp_358)walk_executor(clothes_underwear_2022)grab_executor(clothes_underwear_2022)walk_executor(washing_machine_2041)putin_executor(clothes_underwear_2022, washing_machine_2041)
##############################
From agent.py
walk_executor(tablelamp_358)
Robot find: clothes_underwear_2022, mat_386, pillow_368, pillow_370, drawing_388, drawing_389, Robot is close to the bed_376. Robot is close to the tablelamp_358. 
##############################
From agent.py
exp(clothes_underwear_2022, tablelamp_358)
Find clothes_underwear_2022. 
##############################
From agent.py-> find a plan in act()
walk_executor(clothes_underwear_2022)grab_executor(clothes_underwear_2022)walk_executor(washing_machine_2041)putin_executor(clothes_underwear_2022, washing_machine_2041)
##############################
From agent.py
walk_executor(clothes_underwear_2022)
Robot find: Robot is close to the bed_376. Robot is close to the clothes_underwear_2022. 
##############################
From agent.py
grab_executor(clothes_underwear_2022)
Robot find: Robot is close to the bed_376. Robot is close to the clothes_underwear_2022. Grabbing clothes_underwear_2022 by right hand. 
##############################
From agent.py
walk_executor(washing_machine_2041)
Robot find: Robot is close to the clothes_underwear_2022. Robot is close to the washing_machine_2041. 
##############################
From agent.py
putin_executor(clothes_underwear_2022, washing_machine_2041)
Robot find: Robot is close to the clothes_underwear_2022. Robot is close to the washing_machine_2041. clothes_underwear_2022 is close washing_machine_2041. washing_machine_2041 is close clothes_underwear_2022. clothes_underwear_2022 is inside washing_machine_2041. clothes_underwear_2022 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_detergent_2108(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(soap,detergent_instance)
        else:
            exp(soap,detergent_instance)
    eff:
        unknown[soap]=False
        close[soap,detergent_instance]=True
        close[detergent_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior add_detergent_to_washing_machine(detergent:item, washing_machine:item):
    body:
        achieve_once inside(detergent, washing_machine)
        # Add detergent to the washing machine for a thorough clean

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine] == 2041
        # Select the washing machine with ID 2041

        bind detergent: item where:
            is_detergent(detergent)
        # Select some detergent

        add_detergent_to_washing_machine(detergent, washing_machine)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior add_detergent_to_washing_machine(detergent:item, washing_machine:item):
    body:
        achieve_once inside(detergent, washing_machine)
        # Add detergent to the washing machine for a thorough clean

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine] == 2041
        # Select the washing machine with ID 2041

        bind detergent: item where:
            is_detergent(detergent)
        # Select some detergent

        add_detergent_to_washing_machine(detergent, washing_machine)
##############################
From agent.py-> find a plan in act()
walk_executor(detergent_2108)grab_executor(detergent_2108)walk_executor(washing_machine_2041)putin_executor(detergent_2108, washing_machine_2041)
##############################
From agent.py
walk_executor(detergent_2108)
Robot find: Robot is close to the sink_307. Robot is close to the detergent_2108. 
##############################
From agent.py
grab_executor(detergent_2108)
Robot find: Robot is close to the sink_307. Robot is close to the detergent_2108. Grabbing detergent_2108 by right hand. 
##############################
From agent.py
walk_executor(washing_machine_2041)
Robot find: Robot is close to the detergent_2108. Robot is close to the washing_machine_2041. Robot is close to the clothes_underwear_2022. 
##############################
From agent.py
putin_executor(detergent_2108, washing_machine_2041)
Robot find: Robot is close to the detergent_2108. Robot is close to the washing_machine_2041. Robot is close to the clothes_underwear_2022. washing_machine_2041 is close detergent_2108. detergent_2108 is inside washing_machine_2041. detergent_2108 is close washing_machine_2041. detergent_2108 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
First, hand wash the underwear with soap in the sink in the bathroom, then put it in the washing machine, add some detergent for a thorough clean.
Action History:
['walk_executor(sink_133)', 'walk_executor(sink_307)', 'walk_executor(washing_machine_2041)', 'open_executor(washing_machine_2041)', 'walk_executor(basket_for_clothes_2040)', 'walk_executor(tablelamp_358)', 'walk_executor(clothes_underwear_2022)', 'grab_executor(clothes_underwear_2022)', 'walk_executor(washing_machine_2041)', 'putin_executor(clothes_underwear_2022, washing_machine_2041)', 'walk_executor(detergent_2108)', 'grab_executor(detergent_2108)', 'walk_executor(washing_machine_2041)', 'putin_executor(detergent_2108, washing_machine_2041)']
Time info:
Time consume: 192 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 111
goal generate times: 8
goal correct times: 2
action_num: 14

Task complete rate:
Keystate: k1 - Requires: 6 steps
Keystate: k2 - Requires: 3 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
