From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Put the boiled vegetables in a bowl to cool.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2107_around_kitchen_counter_119(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_119(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2040_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_clothes_socks_2159_around_basket_for_clothes_2078(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_vegetable(vegetable:item):
    # Function to check if an item is a vegetable
    symbol is_vegetable = is_food_vegetable(vegetable)
    return is_vegetable

behavior boil_vegetables(vegetable:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(vegetable, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_target_vegetable(vegetable) and not visited(vegetable):
                # Ensure you find and use all vegetables in the scene
                observe(vegetable, "Check if this is a vegetable")

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the ingredients

        foreach vegetable: item:
            if is_target_vegetable(vegetable):
                # Boil each vegetable
                boil_vegetables(vegetable, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_target_vegetable(vegetable:item):
    # Function to check if an item is a vegetable
    symbol is_vegetable = is_food_vegetable(vegetable)
    return is_vegetable

behavior boil_vegetables(vegetable:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once inside(vegetable, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_target_vegetable(vegetable) and not visited(vegetable):
                # Ensure you find and use all vegetables in the scene
                observe(vegetable, "Check if this is a vegetable")

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the ingredients

        foreach vegetable: item:
            if is_target_vegetable(vegetable):
                # Boil each vegetable
                boil_vegetables(vegetable, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_vegetable_2113, kitchen_counter_119)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Check if this is a vegetable)walk_executor(stove_2135)open_executor(stove_2135)exp(pot_78, stove_2135)walk_executor(pot_78)open_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_vegetable_2113, kitchen_counter_119)
Fail to find food_vegetable_2113 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Check if this is a vegetable)walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_vegetable_2113, fridge_126)
Find food_vegetable_2113. 
##############################
From agent.py-> find a plan in act()
obs(food_vegetable_2113, Check if this is a vegetable)walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
obs(food_vegetable_2113, Check if this is a vegetable)
Get this information:  food_vegetable_2113 is inside dining_room_41. food_vegetable_2113 is inside fridge_126. food_vegetable_2113 is close to fridge_126. food_vegetable_2113 is close to character_240. food_vegetable_2113 is DIRTY.
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. 
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. food_vegetable_2113 is inside pot_78. pot_78 is close food_vegetable_2113. food_vegetable_2113 is close pot_78. food_vegetable_2113 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has filled the pot with water, put the vegetables in it, placed the pot on the stove, and turned on the stove. However, the vegetables were identified as dirty. Before boiling, you must wash the vegetables.
##############################
From agent.py
Human Instruction: The robot has filled the pot with water, put the vegetables in it, placed the pot on the stove, and turned on the stove. However, the vegetables were identified as dirty. Before boiling, you must wash the vegetables.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_vegetable_2113 around kitchen_counter_119.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_vegetable_2113 around fridge_126.
Action 7: Observe around food_vegetable_2113 with the question of Check if this is a vegetable.
Action 8: Walk to pot_78.
Action 9: Grab pot_78.
Action 10: Walk to faucet_20.
Action 11: Switch on faucet_20.
Action 12: Switch off faucet_20.
Action 13: Walk to food_vegetable_2113.
Action 14: Grab food_vegetable_2113.
Action 15: Walk to pot_78.
Action 16: Put food_vegetable_2113 into pot_78.
Action 17: Walk to stove_2135.
Action 18: Put pot_78 on stove_2135.
Action 19: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_filing_cabinet_200(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==200
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(pot,filing_cabinet_instance)
        else:
            exp(pot,filing_cabinet_instance)
    eff:
        unknown[pot]=False
        close[pot,filing_cabinet_instance]=True
        close[filing_cabinet_instance,pot]=True
    

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_soap_2125_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior clean_vegetables(vegetable:item):
    body:
        wash(vegetable)
        # Wash the vegetables to ensure they are clean before boiling

behavior boil_vegetables_in_pot(pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure that the pot is filled with water
        achieve_once inside(food_vegetable_2113, pot)
        # Put the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2113
        # Select the vegetables with ID 2113

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the vegetables

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the vegetables

        if dirty(vegetable):
            clean_vegetables(vegetable)

        boil_vegetables_in_pot(pot, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_vegetable_2113; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_cutting_board_2123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(pot,cutting_board_instance)
        else:
            exp(pot,cutting_board_instance)
    eff:
        unknown[pot]=False
        close[pot,cutting_board_instance]=True
        close[cutting_board_instance,pot]=True
    

behavior find_soap_2010_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#goal_representation
behavior clean_vegetables(vegetable:item):
    body:
        wash(vegetable)
        # Wash the vegetables to ensure they are clean before boiling

behavior boil_vegetables_in_pot(vegetable:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure that the pot is filled with water
        achieve_once inside(vegetable, pot)
        # Put the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2113
        # Select the vegetables with ID 2113

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the vegetables

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the vegetables

        if dirty(vegetable):
            clean_vegetables(vegetable)

        boil_vegetables_in_pot(vegetable, pot, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior clean_vegetables(vegetable:item):
    body:
        wash(vegetable)
        # Wash the vegetables to ensure they are clean before boiling

behavior boil_vegetables_in_pot(vegetable:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure that the pot is filled with water
        achieve_once inside(vegetable, pot)
        # Put the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2113
        # Select the vegetables with ID 2113

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the vegetables

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the vegetables

        if dirty(vegetable):
            clean_vegetables(vegetable)

        boil_vegetables_in_pot(vegetable, pot, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the pot_78. Robot is close to the food_vegetable_2113. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_vegetable_2113 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. food_vegetable_2113 is inside pot_78. pot_78 is close food_vegetable_2113. food_vegetable_2113 is close pot_78. food_vegetable_2113 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_kitchen_counter_122(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Place boiled vegetables inside the bowl to cool

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)
        # Select clean boiled vegetables

        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)
        # Select an appropriate bowl for cooling

        cool_boiled_vegetables(vegetables, bowl)
        # Place the vegetables in the bowl to cool
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Place boiled vegetables inside the bowl to cool

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)
        # Select clean boiled vegetables

        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)
        # Select an appropriate bowl for cooling

        cool_boiled_vegetables(vegetables, bowl)
        # Place the vegetables in the bowl to cool
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2113)walk_executor(bowl_2141)putin_executor(food_vegetable_2113, bowl_2141)
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_vegetable_2113, bowl_2141)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. food_vegetable_2113 is inside bowl_2141. food_vegetable_2113 is close bowl_2141. bowl_2141 is close food_vegetable_2113. food_vegetable_2113 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables. Then cool them in a bowl.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(pot_78)', 'putin_executor(food_vegetable_2113, pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_vegetable_2113)', 'switchoff_executor(faucet_20)', 'walk_executor(pot_78)', 'putin_executor(food_vegetable_2113, pot_78)', 'grab_executor(food_vegetable_2113)', 'walk_executor(bowl_2141)', 'putin_executor(food_vegetable_2113, bowl_2141)']
Time info:
Time consume: 171 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 91
goal generate times: 3
goal correct times: 1
action_num: 27

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 10 steps
Keystate: k3 - Requires: 2 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
