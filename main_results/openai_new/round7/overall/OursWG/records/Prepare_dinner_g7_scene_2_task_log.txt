From agent.py
Reset goals: The sub-goals are: 
['1. Find and prepare the fish and any other ingredients necessary for the soup.', '2. Cook the fish and additional ingredients in a pot with water to make the soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2066_around_kitchen_counter_128(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_vegetable_2072_around_kitchen_counter_128(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_carrot_2047_around_kitchen_counter_128(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_sauce_2101_around_fridge_140(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
behavior find_ingredients(fish:item, ingredient:item, kitchen_counter:item):
    body:
        achieve close_char(char, kitchen_counter)
        observe(kitchen_counter, "Check if there are fish or necessary soup ingredients on the counter")

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        foreach item: item:
            if (is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)) and not visited(item):
                find_ingredients(item, item, kitchen_counter)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_ingredients(fish:item, ingredient:item, kitchen_counter:item):
    body:
        achieve close_char(char, kitchen_counter)
        observe(kitchen_counter, "Check if there are fish or necessary soup ingredients on the counter")

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        foreach item: item:
            if (is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)) and not visited(item):
                find_ingredients(item, item, kitchen_counter)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)obs(kitchen_counter_128, Check if there are fish or necessary soup ingredients on the counter)obs(kitchen_counter_128, Check if there are fish or necessary soup ingredients on the counter)obs(kitchen_counter_128, Check if there are fish or necessary soup ingredients on the counter)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
obs(kitchen_counter_128, Check if there are fish or necessary soup ingredients on the counter)
Get this information:  kitchen_counter_128 is inside dining_room_1. cutting_board_2080 is on kitchen_counter_128. kitchen_counter_128 is close to cutting_board_2080. kitchen_counter_128 is close to cupboard_130. kitchen_counter_128 is close to kitchen_counter_132. kitchen_counter_128 is close to sink_133. kitchen_counter_128 is close to wall_6. kitchen_counter_128 is close to floor_167. kitchen_counter_128 is close to floor_165. kitchen_counter_128 is close to wall_172. kitchen_counter_128 is close to wall_174. kitchen_counter_128 is close to floor_15. kitchen_counter_128 is close to microwave_149. kitchen_counter_128 is close to food_orange_2008. kitchen_counter_128 is close to spectacles_2106. kitchen_counter_128 is close to ceiling_27. kitchen_counter_128 is close to bookshelf_188. kitchen_counter_128 is close to bookshelf_189. kitchen_counter_128 is close to character_219. kitchen_counter_128 is on floor_15. food_orange_2008 is on kitchen_counter_128. spectacles_2106 is on kitchen_counter_128. kitchen_counter_128 is CLEAN. kitchen_counter_128 is CLOSED.
##############################
From agent.py
obs(kitchen_counter_128, Check if there are fish or necessary soup ingredients on the counter)
Get this information:  kitchen_counter_128 is inside dining_room_1. cutting_board_2080 is on kitchen_counter_128. kitchen_counter_128 is close to cutting_board_2080. kitchen_counter_128 is close to cupboard_130. kitchen_counter_128 is close to kitchen_counter_132. kitchen_counter_128 is close to sink_133. kitchen_counter_128 is close to wall_6. kitchen_counter_128 is close to floor_167. kitchen_counter_128 is close to floor_165. kitchen_counter_128 is close to wall_172. kitchen_counter_128 is close to wall_174. kitchen_counter_128 is close to floor_15. kitchen_counter_128 is close to microwave_149. kitchen_counter_128 is close to food_orange_2008. kitchen_counter_128 is close to spectacles_2106. kitchen_counter_128 is close to ceiling_27. kitchen_counter_128 is close to bookshelf_188. kitchen_counter_128 is close to bookshelf_189. kitchen_counter_128 is close to character_219. kitchen_counter_128 is on floor_15. food_orange_2008 is on kitchen_counter_128. spectacles_2106 is on kitchen_counter_128. kitchen_counter_128 is CLEAN. kitchen_counter_128 is CLOSED.
##############################
From agent.py
obs(kitchen_counter_128, Check if there are fish or necessary soup ingredients on the counter)
Get this information:  kitchen_counter_128 is inside dining_room_1. cutting_board_2080 is on kitchen_counter_128. kitchen_counter_128 is close to cutting_board_2080. kitchen_counter_128 is close to cupboard_130. kitchen_counter_128 is close to kitchen_counter_132. kitchen_counter_128 is close to sink_133. kitchen_counter_128 is close to wall_6. kitchen_counter_128 is close to floor_167. kitchen_counter_128 is close to floor_165. kitchen_counter_128 is close to wall_172. kitchen_counter_128 is close to wall_174. kitchen_counter_128 is close to floor_15. kitchen_counter_128 is close to microwave_149. kitchen_counter_128 is close to food_orange_2008. kitchen_counter_128 is close to spectacles_2106. kitchen_counter_128 is close to ceiling_27. kitchen_counter_128 is close to bookshelf_188. kitchen_counter_128 is close to bookshelf_189. kitchen_counter_128 is close to character_219. kitchen_counter_128 is on floor_15. food_orange_2008 is on kitchen_counter_128. spectacles_2106 is on kitchen_counter_128. kitchen_counter_128 is CLEAN. kitchen_counter_128 is CLOSED.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to locate and prepare the fish and necessary soup ingredients. The actions taken so far have only involved observing the area around the kitchen counter, but no fish or other necessary soup ingredients have been found or prepared yet. Continue searching for and gathering these items.
##############################
From agent.py
Human Instruction: You need to locate and prepare the fish and necessary soup ingredients. The actions taken so far have only involved observing the area around the kitchen counter, but no fish or other necessary soup ingredients have been found or prepared yet. Continue searching for and gathering these items.

The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: Observe around kitchen_counter_128 with the question of Check if there are fish or necessary soup ingredients on the counter.
Action 3: Observe around kitchen_counter_128 with the question of Check if there are fish or necessary soup ingredients on the counter.
Action 4: Observe around kitchen_counter_128 with the question of Check if there are fish or necessary soup ingredients on the counter.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2066_around_cutting_board_2080(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_potato,cutting_board_instance)
        else:
            exp(food_potato,cutting_board_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cutting_board_instance]=True
        close[cutting_board_instance,food_potato]=True
    

behavior find_food_vegetable_2072_around_stove_2090(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_vegetable,stove_instance)
        else:
            exp(food_vegetable,stove_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,stove_instance]=True
        close[stove_instance,food_vegetable]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_food_onion_2026_around_stove_2090(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_oil_2005_around_fridge_140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_area_for_ingredients(area:item):
    body:
        observe(area, "Check if there are fish or necessary soup ingredients")

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 128
        # Select the kitchen counter with ID 128

        if not visited(kitchen_counter):
            observe_area_for_ingredients(kitchen_counter)
        else:
            foreach item: item:
                if not visited(item):
                    observe(item, "Check if it is fish or necessary ingredient for the soup")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2066_around_stove_2090(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_potato,stove_instance)
        else:
            exp(food_potato,stove_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,stove_instance]=True
        close[stove_instance,food_potato]=True
    

behavior find_food_vegetable_2072_around_stove_2090(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_vegetable,stove_instance)
        else:
            exp(food_vegetable,stove_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,stove_instance]=True
        close[stove_instance,food_vegetable]=True
    

behavior find_oil_2102_around_stove_2090(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_food_carrot_2047_around_cutting_board_2080(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_carrot,cutting_board_instance)
        else:
            exp(food_carrot,cutting_board_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cutting_board_instance]=True
        close[cutting_board_instance,food_carrot]=True
    

behavior find_sauce_2101_around_fridge_140(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
def is_fish_or_ingredient(item: item):
    # Check if the item is a fish or a necessary ingredient (eg, vegetable, sauce, etc)
    symbol is_necessary = is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)
    return is_necessary

behavior __goal__():
    body:
        foreach item: item:
            if is_fish_or_ingredient(item) and not visited(item):
                # Check all unvisited items to find fish and other necessary ingredients
                observe(item, "Check if this is a fish or necessary ingredient for the soup")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_fish_or_ingredient(item: item):
    # Check if the item is a fish or a necessary ingredient (eg, vegetable, sauce, etc)
    symbol is_necessary = is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)
    return is_necessary

behavior __goal__():
    body:
        foreach item: item:
            if is_fish_or_ingredient(item) and not visited(item):
                # Check all unvisited items to find fish and other necessary ingredients
                observe(item, "Check if this is a fish or necessary ingredient for the soup")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)obs(food_fish_2054, Check if this is a fish or necessary ingredient for the soup)walk_executor(stove_2090)open_executor(stove_2090)exp(food_vegetable_2072, stove_2090)walk_executor(food_vegetable_2072)obs(food_vegetable_2072, Check if this is a fish or necessary ingredient for the soup)walk_executor(fridge_140)exp(sauce_2101, fridge_140)walk_executor(sauce_2101)obs(sauce_2101, Check if this is a fish or necessary ingredient for the soup)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_fish_2054, fridge_140)
Find food_fish_2054. 
##############################
From agent.py-> find a plan in act()
obs(food_fish_2054, Check if this is a fish or necessary ingredient for the soup)obs(food_vegetable_2072, Check if this is a fish or necessary ingredient for the soup)obs(sauce_2101, Check if this is a fish or necessary ingredient for the soup)
##############################
From agent.py
obs(food_fish_2054, Check if this is a fish or necessary ingredient for the soup)
Get this information:  food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is DIRTY.
##############################
From agent.py
obs(food_vegetable_2072, Check if this is a fish or necessary ingredient for the soup)
Get this information:  food_vegetable_2072 is close to fridge_140. food_vegetable_2072 is close to character_219. food_vegetable_2072 is inside dining_room_1. food_vegetable_2072 is inside fridge_140. food_vegetable_2072 is DIRTY.
##############################
From agent.py
obs(sauce_2101, Check if this is a fish or necessary ingredient for the soup)
Get this information:  sauce_2101 is close to fridge_140. sauce_2101 is close to character_219. sauce_2101 is inside dining_room_1. sauce_2101 is inside fridge_140.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to prepare the fish and necessary ingredients for the soup. While you have identified food_fish_2054, food_vegetable_2072, and sauce_2101 as necessary ingredients, these items have not been gathered or cleaned. Proceed to gather, clean, and prepare these ingredients.
##############################
From agent.py
Human Instruction: You need to prepare the fish and necessary ingredients for the soup. While you have identified food_fish_2054, food_vegetable_2072, and sauce_2101 as necessary ingredients, these items have not been gathered or cleaned. Proceed to gather, clean, and prepare these ingredients.

The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: Observe around kitchen_counter_128 with the question of Check if there are fish or necessary soup ingredients on the counter.
Action 3: Observe around kitchen_counter_128 with the question of Check if there are fish or necessary soup ingredients on the counter.
Action 4: Observe around kitchen_counter_128 with the question of Check if there are fish or necessary soup ingredients on the counter.
Action 5: Walk to fridge_140.
Action 6: Switch off fridge_140.
Action 7: Open fridge_140.
Action 8: look for food_fish_2054 around fridge_140.
Action 9: Observe around food_fish_2054 with the question of Check if this is a fish or necessary ingredient for the soup.
Action 10: Observe around food_vegetable_2072 with the question of Check if this is a fish or necessary ingredient for the soup.
Action 11: Observe around sauce_2101 with the question of Check if this is a fish or necessary ingredient for the soup.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_oil_2102_around_stove_2090(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
def is_fish_or_ingredient(item: item):
    # Check if the item is a fish or a necessary ingredient (eg, vegetable, sauce)
    symbol is_necessary = is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)
    return is_necessary

behavior __goal__():
    body:
        foreach item: item:
            if is_fish_or_ingredient(item) and not visited(item):
                # Check all unvisited items to find fish and other necessary ingredients
                observe(item, "Check if this is a fish or necessary ingredient for the soup")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_necessary_ingredient(item: item):
    # Function to check if an item is a necessary ingredient
    symbol is_ingredient = is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)
    return is_ingredient

behavior observe_fish_and_ingredients():
    body:
        if exists item: item : (is_necessary_ingredient(item) and not visited(item)):
            # Check and observe each item to ensure it is a necessary ingredient
            foreach item: item:
                if is_necessary_ingredient(item) and not visited(item):
                    observe(item, "Check if this is a fish or necessary ingredient for the soup")

behavior gather_fish_and_ingredients(fish: item, vegetable: item, sauce: item):
    body:
        # Gather the necessary ingredients, ensuring they are washed and prepared
        if dirty(fish):
            achieve_once clean(fish)
        if dirty(vegetable):
            achieve_once clean(vegetable)
        if dirty(sauce):
            achieve_once clean(sauce)

behavior __goal__():
    body:
        # Ensure fish and necessary ingredients are identified and prepared
        observe_fish_and_ingredients()
        
        bind fish: item where:
            is_food_fish(fish) and not inhand(fish)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and not inhand(vegetable)
        bind sauce: item where:
            is_sauce(sauce) and not inhand(sauce)
        
        achieve_once inhand(fish)
        achieve_once inhand(vegetable)
        
        gather_fish_and_ingredients(fish, vegetable, sauce)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_necessary_ingredient(item: item):
    # Function to check if an item is a necessary ingredient
    symbol is_ingredient = is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)
    return is_ingredient

behavior observe_fish_and_ingredients():
    body:
        if exists item: item : (is_necessary_ingredient(item) and not visited(item)):
            # Check and observe each item to ensure it is a necessary ingredient
            foreach item: item:
                if is_necessary_ingredient(item) and not visited(item):
                    observe(item, "Check if this is a fish or necessary ingredient for the soup")

behavior gather_fish_and_ingredients(fish: item, vegetable: item, sauce: item):
    body:
        # Gather the necessary ingredients, ensuring they are washed and prepared
        if dirty(fish):
            achieve_once clean(fish)
        if dirty(vegetable):
            achieve_once clean(vegetable)
        if dirty(sauce):
            achieve_once clean(sauce)

behavior __goal__():
    body:
        # Ensure fish and necessary ingredients are identified and prepared
        observe_fish_and_ingredients()
        
        bind fish: item where:
            is_food_fish(fish) and not inhand(fish)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and not inhand(vegetable)
        bind sauce: item where:
            is_sauce(sauce) and not inhand(sauce)
        
        achieve_once inhand(fish)
        achieve_once inhand(vegetable)
        
        gather_fish_and_ingredients(fish, vegetable, sauce)

##############################
From agent.py-> find a plan in act()
obs(food_fish_2054, Check if this is a fish or necessary ingredient for the soup)obs(food_vegetable_2072, Check if this is a fish or necessary ingredient for the soup)obs(sauce_2101, Check if this is a fish or necessary ingredient for the soup)grab_executor(food_fish_2054)grab_executor(food_vegetable_2072)wash_executor(food_fish_2054)walk_executor(kitchen_counter_132)put_executor(food_vegetable_2072, kitchen_counter_132)switchoff_executor(faucet_134)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(kitchen_counter_128)put_executor(food_fish_2054, kitchen_counter_128)walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
obs(food_fish_2054, Check if this is a fish or necessary ingredient for the soup)
Get this information:  food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is DIRTY.
##############################
From agent.py
obs(food_vegetable_2072, Check if this is a fish or necessary ingredient for the soup)
Get this information:  food_vegetable_2072 is close to fridge_140. food_vegetable_2072 is close to character_219. food_vegetable_2072 is inside dining_room_1. food_vegetable_2072 is inside fridge_140. food_vegetable_2072 is DIRTY.
##############################
From agent.py
obs(sauce_2101, Check if this is a fish or necessary ingredient for the soup)
Get this information:  sauce_2101 is close to fridge_140. sauce_2101 is close to character_219. sauce_2101 is inside dining_room_1. sauce_2101 is inside fridge_140.
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
wash_executor(food_fish_2054)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. food_fish_2054 is cleaned. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. 
##############################
From agent.py
put_executor(food_vegetable_2072, kitchen_counter_132)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. food_vegetable_2072 is close kitchen_counter_132. kitchen_counter_132 is close food_vegetable_2072. food_vegetable_2072 is on kitchen_counter_132. food_vegetable_2072 released by left hand. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. food_vegetable_2072 is cleaned. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_fish_2054, kitchen_counter_128)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_128. kitchen_counter_128 is close food_fish_2054. food_fish_2054 is close kitchen_counter_128. food_fish_2054 is on kitchen_counter_128. food_fish_2054 released by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the food_vegetable_2072. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to gather the sauce (sauce_2101), identify it as necessary for the soup, and if it is dirty, ensure it is cleaned. Currently, the fish and vegetable are washed and placed on kitchen_counter_128, but the sauce has not been addressed. Complete this step to finalize the ingredient preparation.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
behavior cook_fish_soup(fish: item, vegetable: item, sauce: item, pot: item, stove: item):
    body:
        achieve has_water(pot)
        achieve_once inside(fish, pot)
        achieve_once inside(vegetable, pot)
        achieve_once inside(sauce, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable

        bind sauce: item where:
            is_sauce(sauce)
        # Select the sauce

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        cook_fish_soup(fish, vegetable, sauce, pot, stove)
        # Cook the fish and additional ingredients to make the soup in a pot on the stove
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior cook_fish_soup(fish: item, vegetable: item, sauce: item, pot: item, stove: item):
    body:
        achieve has_water(pot)
        achieve_once inside(fish, pot)
        achieve_once inside(vegetable, pot)
        achieve_once inside(sauce, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable

        bind sauce: item where:
            is_sauce(sauce)
        # Select the sauce

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        cook_fish_soup(fish, vegetable, sauce, pot, stove)
        # Cook the fish and additional ingredients to make the soup in a pot on the stove
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)walk_executor(kitchen_counter_132)put_executor(pot_54, kitchen_counter_132)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(sauce_2101)grab_executor(sauce_2101)walk_executor(pot_54)putin_executor(sauce_2101, pot_54)grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. 
##############################
From agent.py
put_executor(pot_54, kitchen_counter_132)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. pot_54 is on kitchen_counter_132. pot_54 is close kitchen_counter_132. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(food_fish_2054)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_128. Robot is close to the food_fish_2054. 
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_128. Robot is close to the food_fish_2054. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_fish_2054, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the pot_54. food_fish_2054 is inside pot_54. pot_54 is close food_fish_2054. food_fish_2054 is close pot_54. food_fish_2054 released by right hand. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(sauce_2101)
Robot find: Robot is close to the fridge_140. Robot is close to the sauce_2101. 
##############################
From agent.py
grab_executor(sauce_2101)
Robot find: Robot is close to the fridge_140. Robot is close to the sauce_2101. Grabbing sauce_2101 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the sauce_2101. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the pot_54. Robot is close to the food_fish_2054. 
##############################
From agent.py
putin_executor(sauce_2101, pot_54)
Robot find: Robot is close to the sauce_2101. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the pot_54. Robot is close to the food_fish_2054. sauce_2101 is close pot_54. pot_54 is close sauce_2101. sauce_2101 is inside pot_54. sauce_2101 released by right hand. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the sauce_2101. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the pot_54. Robot is close to the food_fish_2054. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(kitchen_counter_128)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_fish_2054)', 'grab_executor(food_vegetable_2072)', 'wash_executor(food_fish_2054)', 'walk_executor(kitchen_counter_132)', 'put_executor(food_vegetable_2072, kitchen_counter_132)', 'switchoff_executor(faucet_134)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'wash_executor(food_vegetable_2072)', 'walk_executor(kitchen_counter_128)', 'put_executor(food_fish_2054, kitchen_counter_128)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'walk_executor(kitchen_counter_132)', 'put_executor(pot_54, kitchen_counter_132)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(food_fish_2054)', 'grab_executor(food_fish_2054)', 'walk_executor(pot_54)', 'putin_executor(food_fish_2054, pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(sauce_2101)', 'grab_executor(sauce_2101)', 'walk_executor(pot_54)', 'putin_executor(sauce_2101, pot_54)', 'grab_executor(pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)']
Time info:
Time consume: 200 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 160
goal generate times: 6
goal correct times: 0
action_num: 38

Task complete rate:
Keystate: k1 - Requires: 23 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
