From agent.py
Reset goals: The sub-goals are: 
['1. Fry the steak.', '2. Cut the steak.', '3. Put the steak on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_steak_2008_around_fridge_289(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_salt_2037_around_kitchen_counter_230(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_frying_pan_for_steak(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)
        achieve is_on(stove)

behavior fry_steak(steak:item, pan:item, stove:item):
    body:
        achieve_once inside(steak, pan)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        prepare_frying_pan_for_steak(pan, stove)
        fry_steak(steak, pan, stove)
        # Fry the steak using the frying pan on the stove
#goal_representation_end

##############################
From agent.py->reset_goal
behavior prepare_frying_pan_for_steak(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)
        achieve is_on(stove)

behavior fry_steak(steak:item, pan:item, stove:item):
    body:
        achieve_once inside(steak, pan)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        prepare_frying_pan_for_steak(pan, stove)
        fry_steak(steak, pan, stove)
        # Fry the steak using the frying pan on the stove
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_steak_2008, fridge_289)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(fryingpan_2083)putin_executor(food_steak_2008, fryingpan_2083)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(fryingpan_2083, kitchen_counter_230)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_steak_2008, fridge_289)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(fryingpan_2083)putin_executor(food_steak_2008, fryingpan_2083)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_steak_2008, fridge_289)
Find food_steak_2008. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2008)walk_executor(fryingpan_2083)putin_executor(food_steak_2008, fryingpan_2083)
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_steak_2008 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_steak_2008. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_steak_2008, fryingpan_2083)
Robot find: Robot is close to the food_steak_2008. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_steak_2008 is inside fryingpan_2083. food_steak_2008 is close fryingpan_2083. fryingpan_2083 is close food_steak_2008. food_steak_2008 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior cut_steak(steak:item, cutting_board:item, knife:item):
    body:
        achieve_once on(steak, cutting_board) # Place the steak on the cutting board
        achieve cut(steak) # Cut the steak

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_steak(steak, cutting_board, knife)
        # Cut the steak using the selected knife and cutting board
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior cut_steak(steak:item, cutting_board:item, knife:item):
    body:
        achieve_once on(steak, cutting_board) # Place the steak on the cutting board
        achieve cut(steak) # Cut the steak

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_steak(steak, cutting_board, knife)
        # Cut the steak using the selected knife and cutting board
##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2008)walk_executor(cutting_board_2051)put_executor(food_steak_2008, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_steak_2008)cut_executor(food_steak_2008)
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the food_steak_2008. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. Grabbing food_steak_2008 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_steak_2008, cutting_board_2051)
Robot find: Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_steak_2008. food_steak_2008 is close cutting_board_2051. food_steak_2008 is on cutting_board_2051. food_steak_2008 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior place_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)
        # Place the steak on the plate

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_on_plate(steak, plate)
        # Put the cut steak onto the plate

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior place_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)
        # Place the steak on the plate

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_on_plate(steak, plate)
        # Put the cut steak onto the plate

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(plate_1000, cupboard_229)
Fail to find plate_1000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the knife_2050. Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the knife_2050. Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_357)exp(plate_1000, desk_357)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(desk_357)
Robot find: keyboard_415, headset_2076, chair_356, phone_2077, mouse_413, pencil_2001, Robot is close to the knife_2050. Robot is close to the desk_357. 
##############################
From agent.py
exp(plate_1000, desk_357)
Fail to find plate_1000 around desk_357. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_40)open_executor(bathroom_cabinet_40)exp(plate_1000, bathroom_cabinet_40)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(bathroom_cabinet_40)
Robot find: towel_rack_31, Robot is close to the knife_2050. Robot is close to the bathroom_cabinet_40. 
##############################
From agent.py
open_executor(bathroom_cabinet_40)
Robot find: Robot is close to the knife_2050. Robot is close to the bathroom_cabinet_40. bathroom_cabinet_40 is opened. 
##############################
From agent.py
exp(plate_1000, bathroom_cabinet_40)
Fail to find plate_1000 around bathroom_cabinet_40. 
##############################
From agent.py-> find a plan in act()
walk_executor(doorjamb_165)exp(plate_1000, doorjamb_165)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(doorjamb_165)
Robot find: drawing_174, Robot is close to the knife_2050. Robot is close to the doorjamb_165. 
##############################
From agent.py
exp(plate_1000, doorjamb_165)
Fail to find plate_1000 around doorjamb_165. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_394)exp(plate_1000, closetdrawer_394)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(closetdrawer_394)
Robot find: Robot is close to the knife_2050. Robot is close to the dresser_358. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Go to the dining_room_201. Locate sink_231, and you will find plate_1000 placed directly on top of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining_room_201. Locate sink_231, and you will find plate_1000 placed directly on top of it.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fryingpan_2083.
Action 4: Grab fryingpan_2083.
Action 5: Walk to stove_2065.
Action 6: Put fryingpan_2083 on stove_2065.
Action 7: Switch on stove_2065.
Action 8: Walk to fridge_289.
Action 9: Switch off fridge_289.
Action 10: Open fridge_289.
Action 11: look for food_steak_2008 around fridge_289.
Action 12: Grab food_steak_2008.
Action 13: Walk to fryingpan_2083.
Action 14: Put food_steak_2008 into fryingpan_2083.
Action 15: Grab food_steak_2008.
Action 16: Walk to cutting_board_2051.
Action 17: Put food_steak_2008 on cutting_board_2051.
Action 18: Walk to knife_2050.
Action 19: Grab knife_2050.
Action 20: Walk to food_steak_2008.
Action 21: Cut food_steak_2008.
Action 22: Walk to cupboard_229.
Action 23: Open cupboard_229.
Action 24: look for plate_1000 around cupboard_229.
Action 25: Walk to dishwasher_1001.
Action 26: Open dishwasher_1001.
Action 27: look for plate_1000 around dishwasher_1001.
Action 28: Walk to desk_357.
Action 29: look for plate_1000 around desk_357.
Action 30: Walk to bathroom_cabinet_40.
Action 31: Open bathroom_cabinet_40.
Action 32: look for plate_1000 around bathroom_cabinet_40.
Action 33: Walk to doorjamb_165.
Action 34: look for plate_1000 around doorjamb_165.
Action 35: Walk to closetdrawer_394.

##############################
From agent.py
exp(plate_1000, closetdrawer_394)
Fail to find plate_1000 around closetdrawer_394. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Grabbing food_steak_2008 by left hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_steak_2008, plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the plate_1000. Robot is close to the sink_231. food_steak_2008 is close plate_1000. plate_1000 is close food_steak_2008. food_steak_2008 is on plate_1000. food_steak_2008 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried a steak. Then cut it and put it on a plate.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_steak_2008)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_steak_2008, fryingpan_2083)', 'grab_executor(food_steak_2008)', 'walk_executor(cutting_board_2051)', 'put_executor(food_steak_2008, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_steak_2008)', 'cut_executor(food_steak_2008)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(desk_357)', 'walk_executor(bathroom_cabinet_40)', 'open_executor(bathroom_cabinet_40)', 'walk_executor(doorjamb_165)', 'walk_executor(closetdrawer_394)', 'walk_executor(sink_231)', 'walk_executor(food_steak_2008)', 'grab_executor(food_steak_2008)', 'walk_executor(plate_1000)', 'put_executor(food_steak_2008, plate_1000)']
Time info:
Time consume: 189 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 188
goal generate times: 3
goal correct times: 0
action_num: 33

Task complete rate:
Keystate: k1 - Requires: 8 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
