[
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the table in the home office.  ",
        "cdl": " \nbehavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n        \n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_book_on_table(book, table)\n        # Place the book on the table in the home office\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Turn on the light in the home office.",
        "cdl": "\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind light: item where:\n            is_light(light) and inside(light, home_office)\n        # Select the light inside the home office\n\n        achieve is_on(light)\n        # Turn on the light in the home office\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a lemon and wash it.",
        "cdl": " \nbehavior find_and_clean_lemon(lemon:item, sink:item):\n    body:\n        achieve_once inhand(lemon) # Temporarily hold the lemon for washing\n        achieve_once inside(lemon, sink) # Put the lemon in the sink for washing\n        wash(lemon) # Wash the lemon\n\nbehavior __goal__():\n    body:\n        bind lemon: item where:\n            is_food_lemon(lemon)\n        # Select a lemon\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        find_and_clean_lemon(lemon, sink)\n        # Find the lemon and wash it in the sink\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Cut the lemon and squeeze the juice into a cup.",
        "cdl": " \nbehavior cut_lemon(lemon:item, knife:item):\n    body:\n        achieve_once cut(lemon)\n\nbehavior squeeze_juice(lemon:item, cup:item):\n    body:\n        achieve_once inside(lemon, cup)\n\nbehavior __goal__():\n    body:\n        bind lemon: item where:\n            is_food_lemon(lemon)\n        # Select the lemon\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        cut_lemon(lemon, knife)\n        squeeze_juice(lemon, cup)\n\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find the cat.  ",
        "cdl": " \ndef find_cat(cat:item):\n    # Function to determine if a given item is the cat\n    symbol is_cat_instance= is_cat(cat)\n    return is_cat_instance\n\nbehavior __goal__():\n    body:\n        if exists cat: item : (find_cat(cat) and not visited(cat)):\n            # If we have already found an unvisited cat, move close to it\n            bind cat: item where:\n                find_cat(cat) and not visited(cat)\n            achieve close_char(char, cat)\n        else:\n            # Check all items to find the cat if not found initially\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat, \"Find the cat\")\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Gently wash the cat with appropriate pet-safe soap or shampoo.",
        "cdl": " \nbehavior wash_cat(cat:item, soap:item, water_source:item):\n    body:\n        achieve_once has_water(cat) # Wet the cat for washing\n        achieve_once inhand(soap) # Temporarily hold the soap to wash the cat\n        wash(cat) # Wash the cat with the soap\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2055\n        # Select the specific cat by its ID\n\n        bind soap: item where:\n            is_soap(soap) # Select an appropriate soap\n        \n        bind water_source: item where:\n            is_sink(water_source) or is_shower(water_source) or is_bathtub(water_source) # Select a water source for washing\n\n        wash_cat(cat, soap, water_source)\n        # Wash the cat with the selected soap and water source\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Find your cat and touch it.",
        "cdl": "\nbehavior find_cat_and_touch(cat:item):\n    body:\n        achieve close_char(char, cat) # Approach the cat\n        touch(cat) # Touch the cat\n\nbehavior __goal__():\n    body:\n        if exists cat: item : (is_cat(cat) and not visited(cat)):\n            # If we found an unvisited cat, move close and touch it\n            bind cat: item where:\n                is_cat(cat) and not visited(cat)\n            find_cat_and_touch(cat)\n        else:\n            # Check all items to find the cat if not found initially\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat, \"Find the cat\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket that contains clothes.",
        "cdl": " \ndef find_basket_with_clothes(basket:item):\n    # Function to determine if a given basket contains clothes\n    symbol has_clothes=exists clothes: item : (is_clothes(clothes) and inside(clothes, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and find_basket_with_clothes(basket)):\n            # If a basket with clothes is found, move closer to it\n            bind basket: item where:\n                is_basket_for_clothes(basket) and find_basket_with_clothes(basket)\n            achieve close_char(char, basket)\n        else:\n            # Check all baskets to find one with clothes if not found initially\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check if there are clothes in the basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the clothes in the washing machine.",
        "cdl": " \nbehavior start_washing(clothes:item, washing_machine:item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n\nbehavior operate_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket for clothes\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        foreach clothes: item:\n        # Load all dirty clothes from the basket into the washing machine\n            if is_clothes(clothes) and inside(clothes, basket):\n                start_washing(clothes, washing_machine)\n\n        operate_washing_machine(washing_machine)\n        # Start the washing machine\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Use a pot to boil some water.",
        "cdl": "\nbehavior boil_water_in_pot(pot:item, stove:item):\n    body:\n        achieve has_water(pot)\n        achieve_once on(pot, stove)\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot\n        \n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        boil_water_in_pot(pot, stove)\n        # Use the pot to boil water on the stove\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "1. Find the bathroom sink.",
        "cdl": " \ndef find_bathroom_sink(bathroom:item):\n    # Function to determine if a given bathroom contains a sink\n    symbol has_sink=exists sink: item : (is_sink(sink) and inside(sink, bathroom))\n    return has_sink\n\nbehavior __goal__():\n    body:\n        if exists bathroom: item : (is_bathroom(bathroom) and find_bathroom_sink(bathroom)):\n            # If a bathroom with a sink is found, move closer to it\n            bind bathroom: item where:\n                is_bathroom(bathroom) and find_bathroom_sink(bathroom)\n            bind sink: item where:\n                is_sink(sink) and inside(sink, bathroom)\n            achieve close_char(char, sink)\n        else:\n            # Check all bathrooms to find one with a sink if not found\n            foreach bathroom: item:\n                if is_bathroom(bathroom) and not visited(bathroom):\n                    observe(bathroom, \"Check if there is a sink in the bathroom\")\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "2. Fill the sink with water.",
        "cdl": " \nbehavior fill_sink_with_water(sink:item):\n    body:\n        achieve has_water(sink)\n        # Fill the sink with water\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink]==19\n        # Select the sink with ID 19\n\n        fill_sink_with_water(sink)\n        # Fill the selected sink with water\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "3. Add soap to create soapy water.",
        "cdl": " \nbehavior add_soap_to_sink(soap:item, sink:item):\n    body:\n        achieve_once inhand(soap) # Temporarily hold the soap\n        achieve_once has_water(sink) # Ensure the sink is filled with water\n        achieve inside(soap, sink) # Add soap into the sink\n\nbehavior __goal__():\n    body:\n        bind soap: item where:\n            is_soap(soap) and inhand(soap)\n        # Select soap that is currently in hand\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        add_soap_to_sink(soap, sink)\n        # Add the soap to the sink\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Bring the milk and egg to the dining room and place them on a table.",
        "cdl": " \ndef find_table_in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior move_milk_and_egg_to_table(milk:item, egg:item, table:item):\n    body:\n        # Place milk and egg on a table in the dining room\n        achieve_once on(milk, table)\n        achieve_once on(egg, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Find the milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Find the egg\n\n        bind table: item where:\n            is_table(table) and find_table_in_dining_room(table)\n        # Select a table in the dining room\n\n        achieve_once inhand(milk)\n        # Temporarily hold the milk\n\n        achieve_once inhand(egg)\n        # Temporarily hold the egg\n\n        move_milk_and_egg_to_table(milk, egg, table)\n        # Move milk and egg to a table in the dining room\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": " \nbehavior throw_items_in_trash(item:item, trashcan:item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Throw the item into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select the trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                # Throw all items from the fridge into the trashcan\n                throw_items_in_trash(item, trashcan)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and egg back in the fridge.",
        "cdl": "\nbehavior place_items_in_fridge(milk:item, egg:item, fridge:item):\n    body:\n        achieve_once inside(milk, fridge)\n        achieve_once inside(egg, fridge)\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        place_items_in_fridge(milk, egg, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Put the pizza and hamburger on a plate.",
        "cdl": "\nbehavior place_food_on_plate(food:item, plate:item):\n    body:\n        achieve_once on(food, plate) # Place the food on the plate\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate)\n        # Select a plate\n        \n        bind hamburger: item where:\n            is_food_hamburger(hamburger)\n        # Select a hamburger\n\n        bind pizza: item where:\n            is_food_pizza(pizza)\n        # Select a pizza\n        \n        place_food_on_plate(hamburger, plate)\n        place_food_on_plate(pizza, plate)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Heat the plate with the pizza and hamburger in the microwave.",
        "cdl": "\ndef in_kitchen(table: item):\n    symbol in_kitchen = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_kitchen\n\nbehavior heat_plate_with_food(plate: item, microwave: item):\n    body:\n        achieve_once inside(plate, microwave)\n        # Place the plate with food inside the microwave\n        achieve_once closed(microwave)\n        # Close the microwave door\n        achieve is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate) and id[plate] == 2152\n        # Select the plate with ID 2152\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        heat_plate_with_food(plate, microwave)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "3. Put the heated plate on a table in the dining room.",
        "cdl": " \ndef find_dining_room_table(table: item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior relocate_plate_to_dining_room_table(plate: item, table: item):\n    body:\n        achieve_once on(plate, table) # Place the heated plate on the dining room table\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and find_dining_room_table(table)\n        # Select a table in the dining room\n\n        bind plate: item where:\n            is_plate(plate) and id[plate] == 2152\n        # Select the heated plate\n\n        achieve_once inhand(plate) # Temporarily hold the plate\n        relocate_plate_to_dining_room_table(plate, table)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify the basket that contains clothes.",
        "cdl": " \ndef find_basket_with_clothes(basket:item):\n    # Function to determine if a given basket contains clothes\n    symbol has_clothes=exists clothes: item : (is_clothes(clothes) and inside(clothes, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and find_basket_with_clothes(basket)):\n            # If a basket with clothes is found, move closer to it\n            bind basket: item where:\n                is_basket_for_clothes(basket) and find_basket_with_clothes(basket)\n            achieve close_char(char, basket)\n        else:\n            # Check all baskets to find one with clothes if not found initially\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check if there are clothes in the basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Place the clothes from the basket into the washing machine.",
        "cdl": " \ndef has_clothes_in_basket(basket: item):\n    # Function to check if there are clothes in a specified basket\n    symbol has_clothes = exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior place_clothes_in_washing_machine(clothes: item, washing_machine: item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket] == 2040\n        # Select the basket for clothes with a specified ID\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        foreach clothes: item:\n        # Move all clothes from the basket to the washing machine\n            if is_clothes(clothes) and inside(clothes, basket):\n                place_clothes_in_washing_machine(clothes, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Add soap to the washing machine.",
        "cdl": "\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        bind soap: item where:\n            is_soap(soap)\n        # Select soap\n\n        achieve_once inhand(soap)\n        # Temporarily hold the soap\n\n        achieve_once open(washing_machine)\n        # Ensure the washing machine is open\n\n        achieve_once inside(soap, washing_machine)\n        # Add the soap to the washing machine\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "4. Run the washing machine to wash the clothes.",
        "cdl": "\nbehavior operate_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2041\n        # Select the washing machine with ID 2041\n\n        operate_washing_machine(washing_machine)\n        # Operate the washing machine to wash the clothes\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all rooms in the house.",
        "cdl": "\ndef find_all_rooms(room:item):\n    # Function to determine if a specific item is a room\n    symbol is_room_instance= is_bathroom(room) or is_bedroom(room) or is_home_office(room) or is_dining_room(room)\n    return is_room_instance\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if find_all_rooms(room) and not visited(room):\n                observe(room, \"Identify the room\")\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. For each room, ensure that at least one light is turned on.",
        "cdl": " \ndef has_light_in_room(room:item):\n    # Function to check if there is a light in a specified room\n    symbol has_light=exists light: item : (is_light(light) and inside(light, room))\n    return has_light\n\nbehavior ensure_light_on_in_room(room:item):\n    body:\n        if has_light_in_room(room):\n            bind light: item where:\n                is_light(light) and inside(light, room)\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate over all rooms\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                # Ensure there is at least one light turned on in each room\n                ensure_light_on_in_room(room)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior wash_jacket(jacket:item, sink:item):\n    body:\n        achieve_once has_water(jacket) # Ensure the jacket is wet for washing\n        wash(jacket) # Wash the jacket by hand\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        wash_jacket(jacket, sink)\n        # Hand wash the jacket in the sink\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": " \ndef is_target_item_jacket(jacket:item):\n    # Function to check if a given item is the target jacket\n    symbol is_clothes_jacket_instance= is_clothes_jacket(jacket)\n    return is_clothes_jacket_instance\n\nbehavior place_jacket_in_washing_machine(jacket: item, washing_machine: item):\n    body:\n        achieve_once inside(jacket, washing_machine)\n\nbehavior operate_washing_machine(washing_machine: item):\n    body:\n        achieve_once closed(washing_machine)\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_target_item_jacket(jacket) and id[jacket] == 2047\n        # Select the jacket with ID 2047\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        place_jacket_in_washing_machine(jacket, washing_machine)\n        # Place the jacket in the washing machine\n\n        operate_washing_machine(washing_machine)\n        # Operate the washing machine to wash the jacket\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup.",
        "cdl": " \nbehavior find_a_cup(cup:item):\n    body:\n        achieve close_char(char, cup)\n\nbehavior __goal__():\n    body:\n        if exists cup: item : (is_cup(cup) and not visited(cup)):\n            # If a cup is found, move closer to it\n            bind cup: item where:\n                is_cup(cup) and not visited(cup)\n            find_a_cup(cup)\n        else:\n            # Check all items to find a cup if not found initially\n            foreach cup: item:\n                if is_cup(cup) and not visited(cup):\n                    observe(cup, \"Find the cup\")\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "3. Slice the kiwi and add it to the cup.",
        "cdl": " \nbehavior cut_kiwi_and_add_to_cup(kiwi:item, cup:item, knife:item):\n    body:\n        achieve cut(kiwi)\n        achieve_once inside(kiwi, cup)\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi)\n        # Select the kiwi\n\n        bind cup: item where:\n            is_cup(cup) and has_water(cup)\n        # Select the cup with water\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        cut_kiwi_and_add_to_cup(kiwi, cup, knife)\n        # Cut the kiwi and add it to the cup\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \ndef is_bathroom_window(window: item):\n    # Function to check if a window is in the bathroom\n    symbol is_in_bathroom = exists room: item : (is_bathroom(room) and inside(window, room))\n    return is_in_bathroom\n\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        if exists window: item : (is_window(window) and is_bathroom_window(window) and not visited(window)):\n            # If a bathroom window is found but not visited, move to open it\n            bind window: item where:\n                is_window(window) and is_bathroom_window(window) and not visited(window)\n            open_window(window)\n        else:\n            # Check all items to find a bathroom window if not found initially\n            foreach window: item:\n                if is_window(window) and not visited(window):\n                    observe(window, \"Check if this is a window in the bathroom\")\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": " \nbehavior slice_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board\n        achieve cut(chicken) # Cut the chicken\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select a chicken\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        slice_chicken(chicken, cutting_board, knife)\n        # Slice the chicken\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Find the fish and other necessary ingredients for the soup.",
        "cdl": " \ndef is_fish_or_ingredient(item: item):\n    # Check if the item is a fish or a necessary ingredient (eg, vegetable, sauce, etc)\n    symbol is_necessary= is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)\n    return is_necessary\n\nbehavior __goal__():\n    body:\n        foreach item: item:\n            if is_fish_or_ingredient(item) and not visited(item):\n                # Check all unvisited items to find fish and other necessary ingredients\n                observe(item, \"Check if this is a fish or necessary ingredient for the soup\")\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Prepare the fish and ingredients (clean and cut them as needed).",
        "cdl": " \ndef is_ingredient(item:item):\n    # Check if the item is a necessary ingredient for the soup\n    symbol is_ingredient= is_food_fish(item) or is_food_vegetable(item) or is_sauce(item)\n    return is_ingredient\n\nbehavior prepare_ingredient(item:item, cutting_board:item, knife:item):\n    body:\n        achieve_once clean(item) # Clean the ingredient\n        achieve_once on(item, cutting_board) # Place the ingredient on a cutting board\n        if cuttable(item):\n            # If the item is cuttable, proceed with cutting\n            achieve cut(item)\n\nbehavior __goal__():\n    body:\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife for cutting\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board to use for preparation\n\n        foreach item: item:\n            if is_ingredient(item):\n                # Prepare each item that is a necessary ingredient\n                prepare_ingredient(item, cutting_board, knife)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a suitable cup and fill it with water.",
        "cdl": " \ndef has_water_filled(cup:item):\n    # Function to check if the cup contains water\n    symbol has_water= has_water(cup)\n    return has_water\n\nbehavior fill_cup_with_water(cup:item, sink:item):\n    body:\n        achieve has_water(cup)\n        # Ensure the cup is filled with water\n\nbehavior __goal__():\n    body:\n        # Bind to a suitable cup\n        bind cup: item where:\n            is_cup(cup)\n\n        # Bind to a sink\n        bind sink: item where:\n            is_sink(sink)\n\n        # Fill the cup with water\n        if not has_water_filled(cup):\n            fill_cup_with_water(cup, sink)\n\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Slice a kiwi and add the slices into the cup of water.",
        "cdl": " \nbehavior slice_kiwi_and_add_to_cup(kiwi:item, cup:item):\n    body:\n        achieve cut(kiwi)\n        achieve_once inside(kiwi, cup)\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi)\n        # Select the kiwi\n\n        bind cup: item where:\n            is_cup(cup) and has_water(cup)\n        # Select the cup with water\n\n        slice_kiwi_and_add_to_cup(kiwi, cup)\n        # Slice the kiwi and add it to the cup\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the specific book you need.",
        "cdl": " \ndef is_target_book(book: item):\n    # Check if the item is the specific book needed\n    symbol is_book_instance = is_book(book)\n    return is_book_instance\n\nbehavior locate_book(book: item):\n    body:\n        achieve close_char(char, book)\n        # Move close to the book\n\nbehavior __goal__():\n    body:\n        if exists book: item : (is_target_book(book) and not visited(book)):\n            # If the specific book is found and not yet visited\n            bind book: item where:\n                is_target_book(book) and not visited(book)\n            locate_book(book)\n        else:\n            # If the book isnt found yet, explore the location\n            foreach book: item:\n                if is_target_book(book) and not visited(book):\n                    observe(book, \"Locate the specific book needed\")\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": " \nbehavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book) and id[book] == 2091\n        # Select the specific book with ID 2091\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_book_on_table(book, table)\n        # Place the book on the coffee table in the home office\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \ndef is_bathroom_window(window: item):\n    # Function to check if a window is in the bathroom\n    symbol is_in_bathroom = exists room: item : (is_bathroom(room) and inside(window, room))\n    return is_in_bathroom\n\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        if exists window: item : (is_window(window) and is_bathroom_window(window) and not visited(window)):\n            # If a bathroom window is found but not visited, move to open it\n            bind window: item where:\n                is_window(window) and is_bathroom_window(window) and not visited(window)\n            open_window(window)\n        else:\n            # Check all items to find a bathroom window if not found initially\n            foreach window: item:\n                if is_window(window) and not visited(window):\n                    observe(window, \"Check if this is a window in the bathroom\")\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Find the pizza and hamburger.",
        "cdl": " \ndef find_food(food:item):\n    # Function to check if the item is a pizza or hamburger\n    symbol is_target_food= is_food_pizza(food) or is_food_hamburger(food)\n    return is_target_food\n\nbehavior __goal__():\n    body:\n        foreach food: item:\n            if find_food(food) and not visited(food):\n                # Check all unvisited items to find pizza and hamburger\n                observe(food, \"Check if this item is pizza or hamburger\")\n "
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Put the pizza and hamburger on a plate.",
        "cdl": "\nbehavior place_food_on_plate(food:item, plate:item):\n    body:\n        achieve_once on(food, plate) # Place the food on the plate\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate)\n        # Select a plate\n        \n        bind hamburger: item where:\n            is_food_hamburger(hamburger)\n        # Select a hamburger\n\n        bind pizza: item where:\n            is_food_pizza(pizza)\n        # Select a pizza\n        \n        place_food_on_plate(hamburger, plate)\n        place_food_on_plate(pizza, plate)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "3. Heat them in the microwave.",
        "cdl": "\ndef in_microwave(item: item):\n    # Function to check if the item is inside the microwave\n    symbol inside_microwave = exists microwave: item : (is_microwave(microwave) and inside(item, microwave))\n    return inside_microwave\n\ndef has_plate_inside_microwave():\n    # Check if the plate with pizza and hamburger is inside the microwave\n    symbol has_plate = exists plate: item : (is_plate(plate) and in_microwave(plate))\n    return has_plate\n\nbehavior heat_plate_with_food(microwave: item, plate: item):\n    body:\n        achieve_once inside(plate, microwave)\n        # Place the plate with food inside the microwave\n        achieve_once closed(microwave)\n        # Close the microwave door\n        achieve is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        if not has_plate_inside_microwave():\n            bind microwave: item where:\n                is_microwave(microwave)\n            # Select the microwave\n\n            bind plate: item where:\n                is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)\n            # Select the specific plate with pizza and hamburger\n\n            heat_plate_with_food(microwave, plate)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "4. Put the plate on a table in the dining room.",
        "cdl": " \ndef find_dining_room_table(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior put_plate_on_table(plate:item, table:item):\n    body:\n        achieve_once on(plate, table) # Place the plate on the dining room table\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and find_dining_room_table(table)\n        # Select a table in the dining room\n\n        bind plate: item where:\n            is_plate(plate) and movable(plate)\n        # Select the movable plate\n\n        achieve_once inhand(plate) # Temporarily hold the plate\n        put_plate_on_table(plate, table)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all the rooms in the household.",
        "cdl": " \ndef find_all_rooms(room:item):\n    # Function to determine if a specific item is a room\n    symbol is_room_instance= is_bathroom(room) or is_bedroom(room) or is_home_office(room) or is_dining_room(room)\n    return is_room_instance\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if find_all_rooms(room) and not visited(room):\n                observe(room, \"Identify the room\")\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Check each room to determine if a light is on.",
        "cdl": "def is_light_turned_on_in_room(room:item):\n    # Check if there is a light turned on in the specified room\n    symbol light_on=exists light: item : (is_light(light) and inside(light, room) and is_on(light))\n    return light_on\n\nbehavior ensure_light_checked_in_room(room:item):\n    body:\n        if not is_light_turned_on_in_room(room):\n            # If no light is found to be turned on in the room, check each unvisited light\n            foreach light: item:\n                if is_light(light) and inside(light, room) and not visited(light):\n                    observe(light, \"Check the light status in the room\")\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate over all rooms identified in the household\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                ensure_light_checked_in_room(room)"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "3. Turn on a light in any room where all lights are off.",
        "cdl": "\ndef has_all_lights_off(room:item):\n    # Function to check if all lights in a specified room are off\n    symbol all_off=exists light: item : (is_light(light) and inside(light, room) and is_off(light))\n    return all_off\n\nbehavior turn_on_light_in_room(room:item):\n    body:\n        if has_all_lights_off(room):\n            # Turn on any light if all lights in the room are off\n            bind light: item where:\n                is_light(light) and inside(light, room) and is_off(light)\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate over all rooms to ensure at least one light is on\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                # Ensure each room has at least one light turned on\n                turn_on_light_in_room(room)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Identify all the bowls and plates that need washing.",
        "cdl": " \ndef is_bowl_or_plate(item: item):\n    # Function to check if an item is a bowl or plate\n    symbol is_target_item = is_bowl(item) or is_plate(item)\n    return is_target_item\n\nbehavior __goal__():\n    body:\n        foreach item: item:\n            if is_bowl_or_plate(item) and not visited(item):\n                # Check all unvisited items to identify bowls and plates that need washing\n                observe(item, \"Check if this is a bowl or plate that needs washing\")\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Load the identified bowls and plates into the dishwasher. ",
        "cdl": " \nbehavior load_dishwasher(obj:item, dishwasher:item):\n    body:\n        achieve_once inside(obj, dishwasher)\n        # Place the bowl or plate into the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n        \n        bind bowl_1: item where:\n            is_bowl(bowl_1) and id[bowl_1] == 2095\n        # Select bowl_2095\n\n        bind bowl_2: item where:\n            is_bowl(bowl_2) and id[bowl_2] == 2096\n        # Select bowl_2096\n\n        bind bowl_3: item where:\n            is_bowl(bowl_3) and id[bowl_3] == 2097\n        # Select bowl_2097\n\n        bind plate: item where:\n            is_plate(plate) and id[plate] == 2105\n        # Select plate_2105\n\n        load_dishwasher(bowl_1, dishwasher)\n        load_dishwasher(bowl_2, dishwasher)\n        load_dishwasher(bowl_3, dishwasher)\n        load_dishwasher(plate, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "3. Run the dishwasher to wash the bowls and plates.",
        "cdl": " \nbehavior run_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        achieve_once is_on(dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher] == 143\n        # Select the dishwasher with ID 143\n\n        run_dishwasher(dishwasher)\n        # Run the dishwasher to wash the bowls and plates\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find a table in the dining room and place the milk and egg on it.",
        "cdl": " \ndef find_table_in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_milk_and_egg_on_table(milk:item, egg:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(egg, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind table: item where:\n            is_table(table) and find_table_in_dining_room(table)\n        # Select a table in the dining room\n\n        achieve_once inhand(milk)\n        achieve_once inhand(egg)\n        # Temporarily hold the milk and egg\n\n        place_milk_and_egg_on_table(milk, egg, table)\n        # Place the milk and egg on the table in the dining room\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": "behavior throw_items_in_trash(item:item, trashcan:item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Throw the item into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select the trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                # Throw all items from the fridge into the trashcan\n                throw_items_in_trash(item, trashcan)"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and egg back in the fridge.",
        "cdl": " \nbehavior place_items_in_fridge(milk:item, egg:item, fridge:item):\n    body:\n        achieve_once inside(milk, fridge)\n        achieve_once inside(egg, fridge)\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        place_items_in_fridge(milk, egg, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Boil the egg.",
        "cdl": " \nbehavior boil_egg(egg:item, pot:item, stove:item):\n    body:\n        achieve has_water(pot)\n        achieve_once inside(egg, pot)\n        achieve_once on(pot, stove)\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        boil_egg(egg, pot, stove)\n        # Boil the egg in the pot on the stove\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup of water.",
        "cdl": " \ndef find_cup_with_water(cup:item):\n    # Function to check if the cup contains water\n    symbol has_water= has_water(cup)\n    return has_water\n\nbehavior get_a_cup_of_water(cup: item, sink: item):\n    body:\n        achieve_once inhand(cup)\n        # Hold the cup temporarily\n        achieve has_water(cup)\n        # Fill the cup with water\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        if not find_cup_with_water(cup):\n            get_a_cup_of_water(cup, sink)\n\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        # Select the DVD player\n\n        achieve is_on(dvd_player)\n        # Turn on the DVD player\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and place it on the coffee table in the home office.",
        "cdl": " \nbehavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_book_on_table(book, table)\n        # Place the book on the coffee table in the home office\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Open the window in the home office.",
        "cdl": " \ndef is_window_in_home_office(window:item):\n    # Function to check if a window is in the home office\n    symbol in_home_office = exists room: item : (is_home_office(room) and inside(window, room))\n    return in_home_office\n\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        if exists window: item : (is_window(window) and is_window_in_home_office(window) and not visited(window)):\n            # If a window in the home office is found and not yet visited, open it\n            bind window: item where:\n                is_window(window) and is_window_in_home_office(window) and not visited(window)\n            open_window(window)\n        else:\n            # Check all items to find a window in the home office if not found initially\n            foreach window: item:\n                if is_window(window) and not visited(window):\n                    observe(window, \"Check if this is a window in the home office\")\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": " \nbehavior slice_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board\n        achieve cut(chicken) # Cut the chicken\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select a chicken\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        slice_chicken(chicken, cutting_board, knife)\n        # Slice the chicken\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find milk, turkey, egg, fish, and chicken.",
        "cdl": " \ndef is_target_item(item:item):\n    # Function to check if the item is milk, turkey, egg, fish, or chicken\n    symbol is_target= is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)\n    return is_target\n\nbehavior __goal__():\n    body:\n        foreach item: item:\n            if is_target_item(item) and not visited(item):\n                # Check all unvisited items to find milk, turkey, egg, fish, and chicken\n                observe(item, \"Identify if this item is milk, turkey, egg, fish, or chicken\")\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the milk, turkey, egg, fish, and chicken on a table in the dining room.",
        "cdl": " \ndef find_dining_room_table(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(turkey, table)\n        achieve_once on(egg, table)\n        achieve_once on(fish, table)\n        achieve_once on(chicken, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n        \n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind table: item where:\n            is_table(table) and find_dining_room_table(table)\n        # Select a table in the dining room\n\n        achieve_once inhand(milk)\n        achieve_once inhand(turkey)\n        # Temporarily hold the milk and turkey\n\n        place_items_on_table(milk, turkey, egg, fish, chicken, table)\n        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room\n "
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Touch the remote control to turn on the TV.",
        "cdl": "behavior touch_remote_control(remote:item):\n    body:\n        achieve_once close_char(char, remote) # Approach the remote control\n        touch(remote) # Touch the remote control\n\nbehavior __goal__():\n    body:\n        bind remote: item where:\n            is_remote_control(remote)\n        # Select the remote control\n\n        touch_remote_control(remote)\n        # Touch the remote control to turn on the TV"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup.",
        "cdl": " \nbehavior find_a_cup(cup:item):\n    body:\n        achieve close_char(char, cup)\n\nbehavior __goal__():\n    body:\n        if exists cup: item : (is_cup(cup) and not visited(cup)):\n            # If a cup is found, move closer to it\n            bind cup: item where:\n                is_cup(cup) and not visited(cup)\n            find_a_cup(cup)\n        else:\n            # Check all items to find a cup if not found initially\n            foreach cup: item:\n                if is_cup(cup) and not visited(cup):\n                    observe(cup, \"Find the cup\")\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Pour milk into the cup.",
        "cdl": " \nbehavior pour_milk_into_cup(milk: item, cup: item):\n    body:\n        achieve_once inside(milk, cup)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        pour_milk_into_cup(milk, cup)\n        # Pour milk into the cup\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "3. Heat the milk in the microwave.",
        "cdl": " \nbehavior heat_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve_once inside(cup, microwave)\n        # Place the cup with milk inside the microwave\n        achieve_once closed(microwave)\n        # Close the microwave door\n        achieve is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2087\n        # Select the specific cup with ID 2087\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        heat_milk_in_microwave(cup, microwave)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all rooms in the house.",
        "cdl": "def is_target_room(room:item):\n    # Function to determine if a specific item is a target room we want to identify\n    symbol is_target= is_bathroom(room) or is_bedroom(room) or is_home_office(room) or is_dining_room(room)\n    return is_target\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_target_room(room) and not visited(room):\n                observe(room, \"Identify the room\")"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Check the lights in each room to ensure at least one is on. Turn on a light if none are on.",
        "cdl": " \ndef is_light_turned_on_in_room(room:item):\n    # Checks if there is any light turned on in the specified room\n    symbol light_on = exists light: item : (is_light(light) and inside(light, room) and is_on(light))\n    return light_on\n\nbehavior ensure_light_in_room(room:item):\n    body:\n        if exists light: item : (is_light(light) and inside(light, room)):\n            bind light: item where:\n                is_light(light) and inside(light, room) and not is_on(light)\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate over all rooms identified in the household\n            if not is_light_turned_on_in_room(room) and (is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room)):\n                ensure_light_in_room(room)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put it back in the fridge.",
        "cdl": " \nbehavior cut_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board\n        achieve cut(chicken) # Cut the chicken\n\nbehavior store_chicken_in_fridge(chicken:item, fridge:item):\n    body:\n        achieve_once inside(chicken, fridge)\n        # Place the cut chicken inside the fridge\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge)\n        # Close the fridge\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        cut_chicken(chicken, cutting_board, knife)\n        store_chicken_in_fridge(chicken, fridge)\n        close_fridge(fridge)\n "
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify the basket that contains clothes that need to be washed.",
        "cdl": " \ndef find_basket_with_clothes(basket:item):\n    # Function to determine if a given basket contains clothes\n    symbol has_clothes = exists clothes: item : (is_clothes(clothes) and inside(clothes, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket : item : (is_basket_for_clothes(basket) and find_basket_with_clothes(basket)):\n            # If a basket with clothes is found, move closer to it\n            bind basket: item where:\n                is_basket_for_clothes(basket) and find_basket_with_clothes(basket)\n            achieve close_char(char, basket)\n        else:\n            # Check all unvisited baskets to find one with clothes if not found initially\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check if there are clothes in the basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add the clothes to the washing machine.",
        "cdl": " \ndef has_clothes_in_basket(basket: item):\n    # Function to check if there are clothes in a specified basket\n    symbol has_clothes = exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior place_clothes_in_washing_machine(clothes: item, washing_machine: item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket] == 2006\n        # Select the basket for clothes with a specified ID\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        foreach clothes: item:\n        # Move all clothes from the basket to the washing machine\n            if is_clothes(clothes) and inside(clothes, basket):\n                place_clothes_in_washing_machine(clothes, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Add soap to the washing machine.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        bind soap: item where:\n            is_soap(soap)\n        # Select soap\n\n        achieve_once inhand(soap)\n        # Temporarily hold the soap\n\n        achieve_once open(washing_machine)\n        # Ensure the washing machine is open\n\n        achieve_once inside(soap, washing_machine)\n        # Add the soap to the washing machine\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "4. Run the washing machine.",
        "cdl": " \nbehavior operate_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2007\n        # Select the washing machine with ID 2007\n\n        operate_washing_machine(washing_machine)\n        # Operate the washing machine to wash the clothes\n "
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find a table in the dining room.",
        "cdl": " \ndef find_table_in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior __goal__():\n    body:\n        if exists table: item : (is_table(table) and find_table_in_dining_room(table) and not visited(table)):\n            # Check if there is a table in the dining room\n            bind table: item where:\n                is_table(table) and find_table_in_dining_room(table) and not visited(table)\n            achieve close_char(char, table) \n            # Move the character closer to the table\n\n        else: \n            # If no table is found yet, check all potential tables in the scene\n            foreach table: item:\n                if is_table(table) and not visited(table):\n                    observe(table, \"Check if this is a table in the dining room\")\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place milk, turkey, egg, fish, and chicken on the table.",
        "cdl": " \ndef find_dining_room_table(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(turkey, table)\n        achieve_once on(egg, table)\n        achieve_once on(fish, table)\n        achieve_once on(chicken, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n        \n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind table: item where:\n            is_table(table) and find_dining_room_table(table)\n        # Select a table in the dining room\n\n        achieve_once inhand(milk)\n        achieve_once inhand(turkey)\n        # Temporarily hold the milk and turkey\n\n        place_items_on_table(milk, turkey, egg, fish, chicken, table)\n        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom. Then turn on the lights in the bathroom.",
        "cdl": " \ndef in_bedroom(light: item):\n    # Function to determine if a light is in the bedroom\n    symbol inside_bedroom = exists room: item : (is_bedroom(room) and inside(light, room))\n    return inside_bedroom\n\ndef in_bathroom(light: item):\n    # Function to determine if a light is in the bathroom\n    symbol inside_bathroom = exists room: item : (is_bathroom(room) and inside(light, room))\n    return inside_bathroom\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        # First, turn on the light in the bedroom\n        if exists light: item : (is_light(light) and in_bedroom(light) and not is_on(light)):\n            bind bedroom_light: item where:\n                is_light(bedroom_light) and in_bedroom(bedroom_light) and not is_on(bedroom_light)\n            turn_on_light(bedroom_light)\n        \n        # Second, turn on the light in the bathroom\n        if exists light: item : (is_light(light) and in_bathroom(light) and not is_on(light)):\n            bind bathroom_light: item where:\n                is_light(bathroom_light) and in_bathroom(bathroom_light) and not is_on(bathroom_light)\n            turn_on_light(bathroom_light)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Wipe the toilet with toilet paper and then throw the used toilet paper into the toilet.",
        "cdl": " \ndef has_toilet_paper(toilet:item):\n    # Function to check if there is toilet paper close to the toilet\n    symbol has_toilet_paper = exists tp: item : (is_toilet_paper(tp) and close(tp, toilet))\n    return has_toilet_paper\n\nbehavior wipe_toilet(toilet: item, paper: item):\n    body:\n        achieve_once inhand(paper) # Temporarily hold the toilet paper to wipe the toilet\n        wipe(toilet) # Wipe the toilet\n\nbehavior throw_paper_in_toilet(paper: item, toilet: item):\n    body:\n        achieve_once inside(paper, toilet) # Throw the used toilet paper into the toilet\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet) and id[toilet] == 15\n        # Select the toilet with ID 15\n\n        if not open(toilet):\n            achieve open(toilet)\n        # Ensure the toilet is open\n\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper) and close(toilet_paper, toilet)\n        # Select toilet paper that is close to the toilet\n\n        wipe_toilet(toilet, toilet_paper)\n        throw_paper_in_toilet(toilet_paper, toilet)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": "behavior hand_wash_jacket(jacket:item):\n    body:\n        wash(jacket)\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket\n\n        hand_wash_jacket(jacket)\n        # Hand wash the jacket"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": " \ndef is_target_jacket(jacket:item):\n    # Function to check if a given item is the target jacket\n    symbol is_clothes_jacket_instance = is_clothes_jacket(jacket)\n    return is_clothes_jacket_instance\n\nbehavior place_jacket_in_washing_machine(jacket: item, washing_machine: item):\n    body:\n        achieve_once inside(jacket, washing_machine)\n\nbehavior operate_washing_machine(washing_machine: item):\n    body:\n        achieve_once closed(washing_machine)\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_target_jacket(jacket) and id[jacket] == 2119\n        # Select the jacket with ID 2119\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        place_jacket_in_washing_machine(jacket, washing_machine)\n        # Place the jacket in the washing machine\n\n        operate_washing_machine(washing_machine)\n        # Operate the washing machine to wash the jacket\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Insert a CD into the CD player and play music.",
        "cdl": " \nbehavior insert_cd_and_play(cd:item, cd_player:item):\n    body:\n        achieve_once inside(cd, cd_player) # Insert the CD into the CD player\n        achieve is_on(cd_player) # Turn on the CD player to play music\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        # Select a CD\n\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        # Select a CD player\n\n        insert_cd_and_play(cd, cd_player)\n        # Insert the CD and play music using the CD player\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom, then turn on the lights in the bathroom.",
        "cdl": " \ndef in_bedroom(light: item):\n    # Function to determine if a light is in the bedroom\n    symbol inside_bedroom = exists room: item : (is_bedroom(room) and inside(light, room))\n    return inside_bedroom\n\ndef in_bathroom(light: item):\n    # Function to determine if a light is in the bathroom\n    symbol inside_bathroom = exists room: item : (is_bathroom(room) and inside(light, room))\n    return inside_bathroom\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        # First, turn on the light in the bedroom\n        if exists light: item : (is_light(light) and in_bedroom(light) and not is_on(light)):\n            bind bedroom_light: item where:\n                is_light(bedroom_light) and in_bedroom(bedroom_light) and not is_on(bedroom_light)\n            turn_on_light(bedroom_light)\n        \n        # Second, turn on the light in the bathroom\n        if exists light: item : (is_light(light) and in_bathroom(light) and not is_on(light)):\n            bind bathroom_light: item where:\n                is_light(bathroom_light) and in_bathroom(bathroom_light) and not is_on(bathroom_light)\n            turn_on_light(bathroom_light)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Put milk and eggs on one of the tables in the dining room.",
        "cdl": " \ndef find_table_in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_milk_and_egg_on_table(milk:item, egg:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(egg, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind table: item where:\n            is_table(table) and find_table_in_dining_room(table)\n        # Select a table in the dining room\n\n        achieve_once inhand(milk)\n        achieve_once inhand(egg)\n        # Temporarily hold the milk and egg\n\n        place_milk_and_egg_on_table(milk, egg, table)\n        # Place the milk and egg on the table in the dining room\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": "behavior throw_items_in_trash(item:item, trashcan:item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Throw the item into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select the trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                # Throw all items from the fridge into the trashcan\n                throw_items_in_trash(item, trashcan)"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and eggs back in the fridge.",
        "cdl": " \nbehavior place_items_in_fridge(milk:item, egg:item, fridge:item):\n    body:\n        achieve_once inside(milk, fridge)\n        achieve_once inside(egg, fridge)\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        place_items_in_fridge(milk, egg, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink directly.",
        "cdl": "\nbehavior clean_bathroom_sink(sink:item, cleaning_solution:item, bathroom:item):\n    body:\n        achieve_once inhand(cleaning_solution)\n        # Temporarily hold the cleaning solution for cleaning\n        achieve clean(sink)\n        # Clean the bathroom sink\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind sink: item where:\n            is_sink(sink) and inside(sink, bathroom)\n        # Select the sink inside the bathroom\n\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select a cleaning solution\n\n        clean_bathroom_sink(sink, cleaning_solution, bathroom)\n        # Clean the bathroom sink directly using the cleaning solution\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": "behavior turn_on_bathroom_light(light:item, bathroom:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind light: item where:\n            is_light(light) and inside(light, bathroom)\n        # Select the light inside the bathroom\n\n        turn_on_bathroom_light(light, bathroom)\n        # Turn on the light in the bathroom"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket containing clothes.",
        "cdl": " \ndef find_basket_with_clothes(basket:item):\n    # Function to determine if a given basket contains clothes\n    symbol has_clothes=exists clothes: item : (is_clothes(clothes) and inside(clothes, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and find_basket_with_clothes(basket)):\n            # If a basket with clothes is found, move closer to it\n            bind basket: item where:\n                is_basket_for_clothes(basket) and find_basket_with_clothes(basket)\n            achieve close_char(char, basket)\n        else:\n            # Check all baskets to find one with clothes if not found initially\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check if there are clothes in the basket\")\n "
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Put the clothes in the washing machine and wash them.",
        "cdl": " \ndef has_clothes_in_basket(basket: item):\n    # Function to check if there are clothes in a specified basket\n    symbol has_clothes = exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior place_clothes_in_washing_machine(clothes: item, washing_machine: item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n\nbehavior operate_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket] == 2006\n        # Select the basket with ID 2006\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        foreach clothes: item:\n        # Move all clothes from the basket to the washing machine\n            if is_clothes(clothes) and inside(clothes, basket):\n                place_clothes_in_washing_machine(clothes, washing_machine)\n\n        operate_washing_machine(washing_machine)\n        # Operate the washing machine to wash the clothes\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and toast it.",
        "cdl": " \ndef find_cuttable_bread(bread: item):\n    # Check if the item is a bread that can be sliced\n    symbol is_cuttable_bread = is_food_bread(bread) and cuttable(bread)\n    return is_cuttable_bread\n\nbehavior slice_bread(bread: item, cutting_board: item, knife: item):\n    body:\n        achieve_once on(bread, cutting_board) # Place the bread on the cutting board\n        achieve cut(bread) # Slice the bread\n\nbehavior toast_bread(bread: item, toaster: item):\n    body:\n        achieve_once inside(bread, toaster)\n        # Place the sliced bread inside the toaster\n        achieve_once closed(toaster)\n        # Close the toaster\n        achieve is_on(toaster)\n        # Turn on the toaster to toast the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            find_cuttable_bread(bread)\n        # Select a cuttable bread\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind toaster: item where:\n            is_toaster(toaster)\n        # Select a toaster\n\n        slice_bread(bread, cutting_board, knife)\n        # Slice the bread\n        toast_bread(bread, toaster)\n        # Toast the sliced bread\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put it back in the fridge.",
        "cdl": " \nbehavior cut_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board\n        achieve cut(chicken) # Cut the chicken\n\nbehavior store_chicken_in_fridge(chicken:item, fridge:item):\n    body:\n        achieve_once inside(chicken, fridge)\n        # Place the cut chicken inside the fridge\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge)\n        # Close the fridge\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        cut_chicken(chicken, cutting_board, knife)\n        store_chicken_in_fridge(chicken, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the spectacles.",
        "cdl": " \nbehavior verify_coffee_table(coffee_table: item):\n    body:\n        if not is_table(coffee_table):\n            observe(coffee_table, \"Verify if this is the correct coffee table in the home office\")\n\nbehavior place_spectacles_on_table(spectacles: item, coffee_table:item):\n    body:\n        achieve_once on(spectacles, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        # Select the spectacles\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and inside(coffee_table, home_office)\n        # Select a table inside the home office\n\n        verify_coffee_table(coffee_table)\n\n        achieve_once inhand(spectacles) # Temporarily hold the spectacles\n        place_spectacles_on_table(spectacles, coffee_table)\n        # Place the spectacles on the coffee table in the home office\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Put the spectacles on the coffee table in the home office.",
        "cdl": " \nbehavior place_on_coffee_table(item:item, table:item):\n    body:\n        achieve_once on(item, table)\n\nbehavior verify_and_place_spectacles(spectacles:item, table:item):\n    body:\n        observe(table, \"Verify if the table is the correct coffee table in the home office\")\n        place_on_coffee_table(spectacles, table)\n\nbehavior __goal__():\n    body:\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        # Select spectacles\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        achieve_once inhand(spectacles)\n        # Temporarily hold the spectacles\n\n        verify_and_place_spectacles(spectacles, table)\n        # Verify the table and place the spectacles on it\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "3. Find the book.",
        "cdl": "behavior find_book(book:item):\n    body:\n        achieve close_char(char, book) # Move close to the book\n\nbehavior __goal__():\n    body:\n        if exists book: item : (is_book(book) and not visited(book)):\n            # If a book is found and not yet visited\n            bind book: item where:\n                is_book(book) and not visited(book)\n            find_book(book)\n        else:\n            # If the book isnt found yet, explore the location\n            foreach book: item:\n                if is_book(book) and not visited(book):\n                    observe(book, \"Find the book\")"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "4. Put the book on the coffee table in the home office.",
        "cdl": "behavior put_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the book to be placed on the table\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table inside the home office\n\n        put_book_on_table(book, table)\n        # Place the book on the coffee table in the home office"
    },
    {
        "task_name": "Make coffee",
        "source_sub_task": "1. Locate the coffee maker and ensure it is plugged in.",
        "cdl": " \ndef is_coffee_maker_with_plug(coffee_maker: item):\n    # Function to check if the item is a coffee maker with a plug\n    symbol has_plug = is_coffe_maker(coffee_maker) and has_plug(coffee_maker)\n    return has_plug\n\nbehavior __goal__():\n    body:\n        if exists coffee_maker: item : (is_coffee_maker_with_plug(coffee_maker) and not visited(coffee_maker)):\n            # If a coffee maker with a plug is found and not yet visited\n            bind coffee_maker: item where:\n                is_coffee_maker_with_plug(coffee_maker) and not visited(coffee_maker)\n            observe(coffee_maker, \"Check if the coffee maker is plugged in\")\n            achieve plugged(coffee_maker)\n        else:\n            # If the coffee maker isnt found yet, explore the location\n            foreach coffee_maker: item:\n                if is_coffee_maker_with_plug(coffee_maker) and not visited(coffee_maker):\n                    observe(coffee_maker, \"Find the coffee maker with a plug\") \n"
    },
    {
        "task_name": "Make coffee",
        "source_sub_task": "Place a suitably sized cup into the coffee maker and start it.",
        "cdl": " \nbehavior place_cup_and_start_coffee_maker(cup: item, coffee_maker: item):\n    body:\n        achieve_once inside(cup, coffee_maker)\n        achieve_once is_on(coffee_maker)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a suitable cup\n\n        bind coffee_maker: item where:\n            is_coffe_maker(coffee_maker)\n        # Select the coffee maker\n\n        place_cup_and_start_coffee_maker(cup, coffee_maker)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom, then turn on the lights in the bathroom.",
        "cdl": " \ndef in_bedroom(light: item):\n    # Function to determine if a light is in the bedroom\n    symbol inside_bedroom = exists room: item : (is_bedroom(room) and inside(light, room))\n    return inside_bedroom\n\ndef in_bathroom(light: item):\n    # Function to determine if a light is in the bathroom\n    symbol inside_bathroom = exists room: item : (is_bathroom(room) and inside(light, room))\n    return inside_bathroom\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        # First, turn on the light in the bedroom\n        if exists light: item : (is_light(light) and in_bedroom(light) and not is_on(light)):\n            bind bedroom_light: item where:\n                is_light(bedroom_light) and in_bedroom(bedroom_light) and not is_on(bedroom_light)\n            turn_on_light(bedroom_light)\n        \n        # Second, turn on the light in the bathroom\n        if exists light: item : (is_light(light) and in_bathroom(light) and not is_on(light)):\n            bind bathroom_light: item where:\n                is_light(bathroom_light) and in_bathroom(bathroom_light) and not is_on(bathroom_light)\n            turn_on_light(bathroom_light)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Prepare a sink of soapy water in the bathroom.",
        "cdl": " \nbehavior fill_sink_with_water(sink:item, faucet:item):\n    body:\n        achieve is_on(faucet)\n        achieve has_water(sink)\n\nbehavior make_soapy_water(sink:item, soap:item):\n    body:\n        achieve_once inhand(soap)\n        achieve_once inside(soap, sink)\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 42\n        # Select the sink with ID 42 in the bathroom\n        \n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        # Select the faucet close to the bathroom sink\n        \n        bind soap: item where:\n            is_soap(soap) and id[soap] == 2053\n        # Select the soap with ID 2053\n\n        fill_sink_with_water(sink, faucet)\n        make_soapy_water(sink, soap)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Locate the basket with clothes that need washing.",
        "cdl": " \ndef find_basket_with_clothes(basket:item):\n    # Function to determine if a given basket contains clothes\n    symbol has_clothes=exists clothes: item : (is_clothes(clothes) and inside(clothes, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and find_basket_with_clothes(basket)):\n            # If a basket with clothes is found, move closer to it\n            bind basket: item where:\n                is_basket_for_clothes(basket) and find_basket_with_clothes(basket)\n            achieve close_char(char, basket)\n        else:\n            # Check all baskets to find one with clothes if not found initially\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check if there are clothes in the basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add soap to the washing machine.",
        "cdl": "behavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        bind soap: item where:\n            is_soap(soap)\n        # Select soap\n\n        achieve_once inhand(soap)\n        # Temporarily hold the soap\n\n        achieve_once open(washing_machine)\n        # Ensure the washing machine is open\n\n        achieve_once inside(soap, washing_machine)\n        # Add the soap to the washing machine"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Put the clothes from the basket into the washing machine.",
        "cdl": " \ndef has_clothes_in_basket(basket: item):\n    # Function to check if there are clothes in a specified basket\n    symbol has_clothes = exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior place_clothes_in_washing_machine(clothes: item, washing_machine: item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket] == 2078\n        # Select the basket with clothes using its ID\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2079\n        # Select the washing machine using its ID\n\n        foreach clothes: item:\n        # Move all clothes from the basket to the washing machine\n            if is_clothes(clothes) and inside(clothes, basket):\n                place_clothes_in_washing_machine(clothes, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "4. Run the washing machine.",
        "cdl": " \nbehavior operate_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2079\n        # Select the washing machine with ID 2079\n\n        operate_washing_machine(washing_machine)\n        # Run the washing machine\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Wipe the toilet with toilet paper and then throw the used toilet paper into the toilet.",
        "cdl": " \nbehavior wipe_toilet(toilet: item, paper: item):\n    body:\n        achieve_once inhand(paper) # Temporarily hold the toilet paper to wipe the toilet\n        wipe(toilet) # Wipe the toilet\n\nbehavior throw_paper_in_toilet(paper: item, toilet: item):\n    body:\n        achieve_once inside(paper, toilet) # Throw the used toilet paper into the toilet\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet)\n        # Select the toilet\n\n        if not open(toilet):\n            achieve open(toilet)\n        # Ensure the toilet is open\n\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper)\n        # Select the toilet paper\n\n        wipe_toilet(toilet, toilet_paper)\n        throw_paper_in_toilet(toilet_paper, toilet)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Locate all the windows in the house.",
        "cdl": " \ndef is_window_in_house(window: item):\n    # Function to check if an item is a window\n    symbol is_window_item = is_window(window)\n    return is_window_item\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window_in_house(window) and not visited(window):\n                observe(window, \"Locate all the windows in the house\")\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Wipe each window using a towel.",
        "cdl": " \ndef is_target_window(window: item):\n    # Function to check if a window is an object in this task\n    symbol is_target_instance = is_window(window)\n    return is_target_instance\n\nbehavior wipe_window(window:item, towel:item):\n    body:\n        achieve_once inhand(towel) # Temporarily hold the towel to wipe the window\n        wipe(window) # Wipe the window\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_target_window(window) and not visited(window):\n                observe(window, \"Check if this is a target window for wiping\")\n        \n        bind towel: item where:\n            is_towel(towel)\n        # Select the towel to use for wiping windows\n        \n        foreach window: item:\n            if is_target_window(window) and visited(window):\n                wipe_window(window, towel)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        # Select the DVD player\n\n        achieve is_on(dvd_player)\n        # Turn on the DVD player\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the table in the home office.",
        "cdl": "behavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n        \n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_book_on_table(book, table)\n        # Place the book on the table in the home office"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Turn on the light in the home office.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind light: item where:\n            is_light(light) and inside(light, home_office)\n        # Select the light inside the home office\n\n        achieve is_on(light)\n        # Turn on the light in the home office\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Fill a bowl with water.",
        "cdl": "behavior fill_bowl_with_water(bowl:item, sink:item):\n    body:\n        achieve_once inside(bowl, sink)\n        # Place the bowl inside the sink\n        achieve has_water(bowl)\n        # Fill the bowl with water\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select a bowl\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        fill_bowl_with_water(bowl, sink)\n        # Fill the selected bowl with water in the sink"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Put the bowl on the table in the home office.",
        "cdl": "behavior place_bowl_on_table(bowl:item, table:item):\n    body:\n        achieve_once on(bowl, table)\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl) and id[bowl] == 2140\n        # Select the bowl with ID 2140\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_bowl_on_table(bowl, table)\n        # Place the bowl on the table in the home office"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "3. Find the cat and place it on the table in the home office.",
        "cdl": " \ndef find_cat(cat:item):\n    # Function to determine if a given item is the cat\n    symbol is_cat_instance= is_cat(cat)\n    return is_cat_instance\n\nbehavior find_and_place_cat_on_table(cat:item, table:item):\n    body:\n        achieve_once on(cat, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        if exists cat: item : (find_cat(cat) and not visited(cat)):\n            # If we have already found an unvisited cat, move close to it\n            bind cat: item where:\n                find_cat(cat) and not visited(cat)\n            find_and_place_cat_on_table(cat, table)\n        else:\n            # Check all items to find the cat if not found initially\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat, \"Find the cat\")\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Boil the egg.",
        "cdl": "\nbehavior boil_egg(egg:item, pot:item, stove:item):\n    body:\n        achieve has_water(pot)\n        achieve_once inside(egg, pot)\n        achieve_once on(pot, stove)\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        boil_egg(egg, pot, stove)\n        # Boil the egg in the pot on the stove\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Identify a table in the dining room.",
        "cdl": " \ndef find_table_in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior __goal__():\n    body:\n        if exists table: item : (is_table(table) and find_table_in_dining_room(table) and not visited(table)):\n            # Check if there is a table in the dining room\n            bind table: item where:\n                is_table(table) and find_table_in_dining_room(table) and not visited(table)\n            achieve close_char(char, table) \n            # Move the character closer to the table\n\n        else: \n            # If no table is found yet, check all potential tables in the scene\n            foreach table: item:\n                if is_table(table) and not visited(table):\n                    observe(table, \"Check if this is a table in the dining room\")\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the milk, turkey, egg, fish, and chicken on the identified table.",
        "cdl": " \ndef find_dining_room_table(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(turkey, table)\n        achieve_once on(egg, table)\n        achieve_once on(fish, table)\n        achieve_once on(chicken, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind table: item where:\n            is_table(table) and find_dining_room_table(table)\n        # Select a table in the dining room\n\n        achieve_once inhand(milk)\n        achieve_once inhand(turkey)\n        # Temporarily hold the milk and turkey\n\n        place_items_on_table(milk, turkey, egg, fish, chicken, table)\n        # Place the milk, turkey, egg, fish, and chicken on the table in the dining room\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Locate your cat.",
        "cdl": " \ndef find_cat(cat:item):\n    # Function to determine if a given item is the cat\n    symbol is_cat_instance= is_cat(cat)\n    return is_cat_instance\n\nbehavior __goal__():\n    body:\n        if exists cat: item : (find_cat(cat) and not visited(cat)):\n            # If we have already found an unvisited cat, move close to it\n            bind cat: item where:\n                find_cat(cat) and not visited(cat)\n            achieve close_char(char, cat)\n        else:\n            # Check all items to find the cat if not found initially\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat, \"Find the cat\")\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Gently wash your cat using pet-safe shampoo in a suitable washing area.",
        "cdl": "\nbehavior wash_cat(cat:item, shampoo:item, washing_area:item):\n    body:\n        achieve_once inhand(shampoo)\n        achieve_once inside(cat, washing_area)\n        achieve has_water(cat)\n        wash(cat)\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2082\n        # Select the specific cat by its ID\n\n        bind shampoo: item where:\n            is_soap(shampoo)\n        # Select an appropriate petsafe shampoo\n        \n        bind washing_area: item where:\n            is_shower(washing_area) or is_bathtub(washing_area) or is_sink(washing_area)\n        # Select a suitable washing area\n\n        wash_cat(cat, shampoo, washing_area)\n        # Wash the cat with the selected shampoo in the washing area\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Slice the chicken and give it to the cat.",
        "cdl": "behavior slice_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board)\n        achieve cut(chicken)\n\nbehavior give_chicken_to_cat(chicken:item, cat:item):\n    body:\n        achieve_once on(chicken, cat)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat\n\n        slice_chicken(chicken, cutting_board, knife)\n        give_chicken_to_cat(chicken, cat)"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        # Select the DVD player\n\n        achieve is_on(dvd_player)\n        # Turn on the DVD player\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Find the chicken and onion.",
        "cdl": "\ndef is_food_chicken_or_onion(item: item):\n    # Function to check if the item is either a food chicken or an onion\n    symbol is_target_food = is_food_chicken(item) or is_food_onion(item)\n    return is_target_food\n\nbehavior __goal__():\n    body:\n        foreach item: item:\n            if is_food_chicken_or_onion(item) and not visited(item):\n                # Check all unvisited items to find the chicken and onion\n                observe(item, \"Check if this item is chicken or onion\")\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Place the chicken and onion in the oven to roast.",
        "cdl": " \nbehavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):\n    body:\n        achieve_once inside(chicken, oven)\n        achieve_once inside(onion, oven)\n\nbehavior close_and_start_oven(oven:item):\n    body:\n        achieve_once closed(oven)\n        achieve is_on(oven)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select a chicken\n\n        bind onion: item where:\n            is_food_onion(onion)\n        # Select an onion\n\n        bind oven: item where:\n            is_oven(oven)\n        # Select an oven\n\n        place_chicken_and_onion_in_oven(chicken, onion, oven)\n        close_and_start_oven(oven)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Insert the CD into the CD player and play music.",
        "cdl": "behavior insert_cd_and_play(cd:item, cd_player:item):\n    body:\n        achieve_once inside(cd, cd_player) # Insert the CD into the CD player\n        achieve is_on(cd_player) # Turn on the CD player to play music\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        # Select a CD\n\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        # Select a CD player\n\n        insert_cd_and_play(cd, cd_player)\n        # Insert the CD and play music using the CD player"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup.",
        "cdl": "\nbehavior find_a_cup(cup:item):\n    body:\n        achieve close_char(char, cup)\n\nbehavior __goal__():\n    body:\n        if exists cup: item : (is_cup(cup) and not visited(cup)):\n            # If a cup is found, move closer to it\n            bind cup: item where:\n                is_cup(cup) and not visited(cup)\n            find_a_cup(cup)\n        else:\n            # Check all items to find a cup if not found initially\n            foreach cup: item:\n                if is_cup(cup) and not visited(cup):\n                    observe(cup, \"Find the cup\")\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Fill the cup with water.",
        "cdl": " \nbehavior fill_cup_with_water(cup:item):\n    body:\n        achieve has_water(cup)\n        # Fill the cup with water\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2063\n        # Select the cup with ID 2063\n\n        fill_cup_with_water(cup)\n        # Fill the selected cup with water\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "3. Slice the kiwi and add it into the cup.",
        "cdl": " \nbehavior cut_kiwi_and_add_to_cup(kiwi:item, cup:item, knife:item):\n    body:\n        achieve cut(kiwi)\n        achieve_once inside(kiwi, cup)\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi)\n        # Select the kiwi\n\n        bind cup: item where:\n            is_cup(cup) and has_water(cup)\n        # Select the cup with water\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        cut_kiwi_and_add_to_cup(kiwi, cup, knife)\n        # Cut the kiwi and add it to the cup\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Identify and find all the items in the fridge.",
        "cdl": " \ndef is_fridge_with_items(fridge: item):\n    # Function to check if a fridge contains any items\n    symbol has_items = exists o: item : inside(o, fridge)\n    return has_items\n\nbehavior identify_items_in_fridge(fridge: item):\n    body:\n        # Identify and list items inside the fridge\n        observe(fridge, \"Check all items in the fridge\")\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        if is_fridge_with_items(fridge):\n            identify_items_in_fridge(fridge)\n        else:\n            # If no items have been found yet, check all potential fridges in the scene\n            foreach fridge: item:\n                if is_fridge(fridge) and not visited(fridge):\n                    observe(fridge, \"Check for items inside the fridge\")\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Dispose of each item into the trashcan.",
        "cdl": "\nbehavior throw_items_in_trash(item:item, trashcan:item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Throw the item into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select the trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                # Throw all items from the fridge into the trashcan\n                throw_items_in_trash(item, trashcan)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Pour the milk into a cup.  ",
        "cdl": " \nbehavior verify_cup_with_milk(cup:item):\n    body:\n        observe(cup, \"Check if there is milk in the cup\")\n        \nbehavior pour_milk_into_cup(milk: item, cup: item):\n    body:\n        achieve_once inside(milk, cup)\n\nbehavior __goal__():\n    body:\n        # Check both cups to verify if either has milk\n        bind cup1: item where:\n            is_cup(cup1) and id[cup1] == 2063\n        # Select the cup with ID 2063\n\n        bind cup2: item where:\n            is_cup(cup2) and id[cup2] == 2064\n        # Select the cup with ID 2064\n\n        verify_cup_with_milk(cup1)\n        verify_cup_with_milk(cup2)\n        \n        bind milk: item where:\n            is_milk(milk)\n\n        # Assuming we have confirmed which cup to use, lets assume cup 2063 needs to be filled\n        pour_milk_into_cup(milk, cup1)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": "behavior heat_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve_once inside(cup, microwave)\n        # Place the cup with milk inside the microwave\n        achieve_once closed(microwave)\n        # Close the microwave door\n        achieve is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2063\n        # Select the specific cup with ID 2063\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        heat_milk_in_microwave(cup, microwave)"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Find your cat and touch it.",
        "cdl": " \nbehavior find_cat_and_touch(cat:item):\n    body:\n        achieve close_char(char, cat) # Approach the cat\n        touch(cat) # Touch the cat\n\nbehavior __goal__():\n    body:\n        if exists cat: item : (is_cat(cat) and not visited(cat)):\n            # If we found an unvisited cat, move close and touch it\n            bind cat: item where:\n                is_cat(cat) and not visited(cat)\n            find_cat_and_touch(cat)\n        else:\n            # Check all items to find the cat if not found initially\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat, \"Find the cat\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior hand_wash_jacket(jacket:item):\n    body:\n        wash(jacket)\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket\n\n        hand_wash_jacket(jacket)\n        # Hand wash the jacket\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket in the washing machine.",
        "cdl": " \nbehavior place_jacket_in_washing_machine(jacket: item, washing_machine: item):\n    body:\n        achieve_once inside(jacket, washing_machine)\n\nbehavior operate_washing_machine(washing_machine: item):\n    body:\n        achieve_once closed(washing_machine)\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket) and id[jacket] == 2078\n        # Select the jacket with ID 2078\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        place_jacket_in_washing_machine(jacket, washing_machine)\n        # Place the jacket in the washing machine\n\n        operate_washing_machine(washing_machine)\n        # Operate the washing machine to wash the jacket\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink directly.",
        "cdl": "behavior clean_bathroom_sink(sink:item, cleaning_solution:item):\n    body:\n        achieve_once inhand(cleaning_solution)\n        # Temporarily hold the cleaning solution for cleaning\n        achieve clean(sink)\n        # Clean the bathroom sink\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 42\n        # Select sink with ID 42\n\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select a cleaning solution\n\n        clean_bathroom_sink(sink, cleaning_solution)\n        # Clean the bathroom sink using the cleaning solution"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Load the bowls and plates into the dishwasher and start it.",
        "cdl": "behavior load_dishwasher(item:item, dishwasher:item):\n    body:\n        achieve_once inside(item, dishwasher)\n        # Load the item into the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        achieve is_on(dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach item: item:\n            if (is_bowl(item) or is_plate(item)):\n                load_dishwasher(item, dishwasher)\n        # Load all bowls and plates into the dishwasher\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher to wash the bowls and plates"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the forks by hand.",
        "cdl": " \nbehavior wash_forks_by_hand(fork:item): \n    body: \n        wash(fork)\n        # Wash the fork by hand\n\nbehavior __goal__():\n    body:\n        foreach fork: item:\n            # Iterate through all items to locate and wash forks\n            if is_fork(fork):\n                wash_forks_by_hand(fork)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": " \nbehavior turn_on_bathroom_light(light:item, bathroom:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind light: item where:\n            is_light(light) and inside(light, bathroom)\n        # Select the light inside the bathroom\n\n        turn_on_bathroom_light(light, bathroom)\n        # Turn on the light in the bathroom\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "Boil the rice in a pot.",
        "cdl": " \nbehavior boil_rice_in_pot(pot:item, stove:item, rice:item):\n    body:\n        achieve has_water(pot)\n        achieve_once inside(rice, pot)\n        achieve_once on(pot, stove)\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind rice: item where:\n            is_food_rice(rice)\n        # Select the rice\n\n        bind pot: item where:\n            is_pot(pot) and has_water(pot)\n        # Select a pot with water\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        boil_rice_in_pot(pot, stove, rice)\n        # Boil the rice in the pot on the stove\n "
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Locate the basket that contains clothes.  ",
        "cdl": " \ndef find_basket_with_clothes(basket:item):\n    # Function to determine if a given basket contains clothes\n    symbol has_clothes=exists clothes: item : (is_clothes(clothes) and inside(clothes, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and find_basket_with_clothes(basket)):\n            # If a basket with clothes is found, move closer to it\n            bind basket: item where:\n                is_basket_for_clothes(basket) and find_basket_with_clothes(basket)\n            achieve close_char(char, basket)\n        else:\n            # Check all baskets to find one with clothes if not found initially\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check if there are clothes in the basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Load the clothes from the basket into the washing machine.",
        "cdl": " \ndef has_clothes_in_basket(basket: item):\n    # Function to check if there are clothes in a specified basket\n    symbol has_clothes = exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior place_clothes_in_washing_machine(clothes: item, washing_machine: item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket] == 2078\n        # Select the basket with clothes using its ID\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        foreach clothes: item:\n        # Move all clothes from the basket to the washing machine\n            if is_clothes(clothes) and inside(clothes, basket):\n                place_clothes_in_washing_machine(clothes, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Start the washing machine to wash the clothes.",
        "cdl": " \nbehavior operate_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2079\n        # Select the washing machine with ID 2079\n\n        operate_washing_machine(washing_machine)\n        # Start the washing machine to wash the clothes\n "
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \ndef is_bathroom_window(window: item):\n    # Function to check if a window is in the bathroom\n    symbol is_in_bathroom = exists room: item : (is_bathroom(room) and inside(window, room))\n    return is_in_bathroom\n\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        if exists window: item : (is_window(window) and is_bathroom_window(window) and not visited(window)):\n            # If a bathroom window is found but not visited, move to open it\n            bind window: item where:\n                is_window(window) and is_bathroom_window(window) and not visited(window)\n            open_window(window)\n        else:\n            # Check all items to find a bathroom window if not found initially\n            foreach window: item:\n                if is_window(window) and not visited(window):\n                    observe(window, \"Check if this is a window in the bathroom\")\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Find the cat and touch it.",
        "cdl": "behavior find_cat_and_touch(cat:item):\n    body:\n        achieve close_char(char, cat) # Approach the cat\n        touch(cat) # Touch the cat\n\nbehavior __goal__():\n    body:\n        if exists cat: item : (is_cat(cat) and not visited(cat)):\n            # If we found an unvisited cat, move close and touch it\n            bind cat: item where:\n                is_cat(cat) and not visited(cat)\n            find_cat_and_touch(cat)\n        else:\n            # Check all items to find the cat if not found initially\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat, \"Find the cat\")"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find your cat.",
        "cdl": " \ndef find_cat(cat:item):\n    # Function to determine if a given item is the cat\n    symbol is_cat_instance= is_cat(cat)\n    return is_cat_instance\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind dresser: item where:\n            is_dresser(dresser) and inside(dresser, home_office)\n        # Select a dresser inside the home office\n\n        if not visited(dresser):\n            observe(dresser, \"Check inside the dresser for the cat\")\n\n        if exists cat: item : (find_cat(cat) and inside(cat, dresser)):\n            # If the cat is found inside the dresser, move close to it\n            bind cat: item where:\n                find_cat(cat) and inside(cat, dresser)\n            achieve close_char(char, cat)\n        else:\n            # Continue searching for the cat if not found in the dresser\n            foreach item: item:\n                if is_cat(item) and not visited(item):\n                    observe(item, \"Find the cat\")\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Prepare an area for washing the cat.",
        "cdl": "behavior prepare_washing_area(area:item):\n    body:\n        achieve_once close_char(char, area)\n        achieve clean(area)\n        observe(area, \"Check if it can be used to wash the cat\")\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind dresser: item where:\n            is_dresser(dresser) and inside(dresser, home_office)\n        # Select the dresser with the cat inside\n\n        bind area: item where:\n            is_bathroom(area) or is_sink(area) or is_bathtub(area)\n        # Select a suitable washing area\n\n        prepare_washing_area(area)\n        # Prepare the area for washing the cat"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "3. Gently wash your cat with water and pet-safe shampoo.",
        "cdl": " \nbehavior gently_wash_cat(cat:item, shampoo:item, washing_area:item):\n    body:\n        achieve_once inhand(shampoo)\n        achieve_once inside(cat, washing_area)\n        achieve has_water(cat)\n        wash(cat)\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2069\n        # Select the specific cat by its ID\n\n        bind shampoo: item where:\n            is_shampoo(shampoo)\n        # Select an appropriate petsafe shampoo\n\n        bind washing_area: item where:\n            is_shower(washing_area) or is_bathtub(washing_area) or is_sink(washing_area)\n        # Select a suitable washing area\n\n        gently_wash_cat(cat, shampoo, washing_area)\n        # Gently wash the selected cat with shampoo in the washing area\n "
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Identify the fridge containing the items.",
        "cdl": "behavior find_fridge_and_identify(fridge:item):\n    body:\n        achieve close_char(char, fridge)\n        # Move close to the identified fridge\n\nbehavior __goal__():\n    body:\n        if exists fridge: item : (is_fridge(fridge) and not visited(fridge)):\n            # If we have found an unvisited fridge, move closer to it\n            bind fridge: item where:\n                is_fridge(fridge) and not visited(fridge)\n            find_fridge_and_identify(fridge)\n        else:\n            # Check all items to locate the fridge if not found initially\n            foreach fridge: item:\n                if is_fridge(fridge) and not visited(fridge):\n                    observe(fridge, \"Identify the fridge containing items\")"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Open the fridge.",
        "cdl": "\nbehavior open_fridge(fridge:item):\n    body:\n        achieve open(fridge)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 140\n        # Select the fridge with ID 140\n\n        achieve close_char(char, fridge)\n        # Move closer to the fridge\n\n        open_fridge(fridge)\n        # Open the fridge\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Take all the items out and put them in the trashcan.",
        "cdl": " \nbehavior throw_items_into_trashcan(item:item, trashcan:item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Throw the item into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select the trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                # Throw all items in the fridge into the trashcan\n                throw_items_into_trashcan(item, trashcan)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put cleaning solution in the dishwasher.  ",
        "cdl": " \nbehavior add_cleaning_solution_to_dishwasher(cleaning_solution:item, dishwasher:item):\n    body:\n        achieve_once inside(cleaning_solution, dishwasher)\n\nbehavior __goal__():\n    body:\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select the cleaning solution\n\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher] == 129\n        # Select the dishwasher with ID 129\n\n        add_cleaning_solution_to_dishwasher(cleaning_solution, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and the plates with the dishwasher.",
        "cdl": "behavior load_dishwasher(item:item, dishwasher:item):\n    body:\n        achieve_once inside(item, dishwasher)\n        # Load the item into the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        achieve is_on(dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach item: item:\n            if (is_bowl(item) or is_plate(item)):\n                load_dishwasher(item, dishwasher)\n        # Load all bowls and plates into the dishwasher\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher to wash the bowls and plates"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put it back in the fridge.",
        "cdl": " \nbehavior cut_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board for cutting\n        achieve cut(chicken) # Cut the chicken into pieces\n\nbehavior store_chicken_in_fridge(chicken:item, fridge:item):\n    body:\n        achieve_once inside(chicken, fridge) # Place the cut chicken inside the fridge\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge) # Close the fridge door to keep the chicken cold\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken) # Select the chicken to be cut\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select a cutting board to use for cutting the chicken\n\n        bind knife: item where:\n            is_knife(knife) # Select a knife for cutting the chicken\n\n        bind fridge: item where:\n            is_fridge(fridge) # Select the fridge to store the chicken\n\n        cut_chicken(chicken, cutting_board, knife)\n        store_chicken_in_fridge(chicken, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put cleaning solution in the dishwasher.  ",
        "cdl": " \nbehavior add_cleaning_solution_to_dishwasher(cleaning_solution:item, dishwasher:item):\n    body:\n        achieve_once inside(cleaning_solution, dishwasher)\n\nbehavior __goal__():\n    body:\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select the cleaning solution\n\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        add_cleaning_solution_to_dishwasher(cleaning_solution, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Load the bowls and plates into the dishwasher and start the washing cycle.",
        "cdl": " \nbehavior load_dishwasher(obj:item, dishwasher:item):\n    body:\n        achieve_once inside(obj, dishwasher)\n        # Place the bowl or plate into the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        achieve_once is_on(dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n        \n        foreach item: item:\n            if is_bowl(item) or is_plate(item):\n                load_dishwasher(item, dishwasher)\n        # Load all bowls and plates into the dishwasher\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the spectacles and put them on the coffee table in the home office.",
        "cdl": "behavior place_spectacles_on_table(spectacles:item, table:item):\n    body:\n        achieve_once on(spectacles, table)\n\nbehavior __goal__():\n    body:\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        # Select the spectacles\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office) and id[table] == 355\n        # Select the specific table inside the home office\n\n        achieve_once inhand(spectacles)\n        # Temporarily hold the spectacles\n\n        place_spectacles_on_table(spectacles, table)\n        # Place spectacles on the coffee table in the home office"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": "\nbehavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_book_on_table(book, table)\n        # Place the book on the coffee table in the home office"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Clean the chicken and onion.",
        "cdl": " \nbehavior wash_item(item:item):\n    body:\n        achieve_once has_water(item)\n        wash(item)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select a chicken\n        \n        bind onion: item where:\n            is_food_onion(onion)\n        # Select an onion\n        \n        wash_item(chicken)\n        # Wash the chicken\n        \n        wash_item(onion)\n        # Wash the onion\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Place the chicken and onion in the oven to roast.",
        "cdl": " \nbehavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):\n    body:\n        achieve_once inside(chicken, oven)\n        achieve_once inside(onion, oven)\n\nbehavior close_and_start_oven(oven:item):\n    body:\n        achieve_once closed(oven)\n        achieve is_on(oven)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select a chicken\n\n        bind onion: item where:\n            is_food_onion(onion)\n        # Select an onion\n\n        bind oven: item where:\n            is_oven(oven)\n        # Select an oven\n\n        place_chicken_and_onion_in_oven(chicken, onion, oven)\n        close_and_start_oven(oven)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put cleaning solution in the dishwasher.",
        "cdl": " \nbehavior add_cleaning_solution_to_dishwasher(cleaning_solution:item, dishwasher:item):\n    body:\n        achieve_once inside(cleaning_solution, dishwasher)\n\nbehavior __goal__():\n    body:\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select the cleaning solution\n\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        add_cleaning_solution_to_dishwasher(cleaning_solution, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and the plates with the dishwasher.",
        "cdl": "\nbehavior load_dishwasher(item:item, dishwasher:item):\n    body:\n        achieve_once inside(item, dishwasher)\n        # Load the item into the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        achieve is_on(dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach item: item:\n            if is_bowl(item) or is_plate(item):\n                load_dishwasher(item, dishwasher)\n        # Load all bowls and plates into the dishwasher\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher to wash the bowls and plates\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Locate all the windows in the house.",
        "cdl": " \ndef is_window_in_house(window: item):\n    # Function to check if an item is a window\n    symbol is_window_item = is_window(window)\n    return is_window_item\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window_in_house(window) and not visited(window):\n                observe(window, \"Locate all the windows in the house\")\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Wipe each window thoroughly with a towel.",
        "cdl": " \ndef is_target_window(window: item):\n    # Function to check if a window is an object in this task\n    symbol is_target_instance = is_window(window)\n    return is_target_instance\n\nbehavior wipe_window(window: item, towel: item):\n    body:\n        achieve_once inhand(towel) # Temporarily hold the towel to wipe the window\n        wipe(window) # Wipe the window\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_target_window(window) and not visited(window):\n                observe(window, \"Check if this is a target window for wiping\")\n                \n        bind towel: item where:\n            is_towel(towel)\n        # Select the towel to use for wiping windows\n        \n        foreach window: item:\n            if is_target_window(window) and visited(window):\n                wipe_window(window, towel)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Use a pot to boil some water.",
        "cdl": "behavior boil_water_in_pot(pot:item, stove:item):\n    body:\n        achieve has_water(pot)\n        achieve_once on(pot, stove)\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot\n        \n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        boil_water_in_pot(pot, stove)\n        # Use the pot to boil water on the stove"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Identify the fridge and verify what items are inside it.",
        "cdl": " \ndef check_items_in_fridge(fridge:item):\n    symbol are_items_present = exists item: item : (inside(item, fridge))\n    return are_items_present\n\nbehavior observe_fridge_items(fridge:item):\n    body:\n        observe(fridge, \"Identify and list all items inside the fridge\")\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        if not visited(fridge):\n            observe_fridge_items(fridge)\n        else:\n            if check_items_in_fridge(fridge):\n                observe_fridge_items(fridge)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw each item from the fridge into the trashcan.",
        "cdl": "behavior throw_items_in_trash(item:item, trashcan:item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Throw the item into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select the trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                # Throw all items from the fridge into the trashcan\n                throw_items_in_trash(item, trashcan)"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Load the bowls and plates into the dishwasher and start it.",
        "cdl": "behavior load_dishwasher(bowl_or_plate:item, dishwasher:item):\n    body:\n        achieve_once inside(bowl_or_plate, dishwasher)\n        # Place the bowl or plate into the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        achieve is_on(dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n        \n        foreach bowl_or_plate: item:\n            if is_bowl(bowl_or_plate) or is_plate(bowl_or_plate):\n                load_dishwasher(bowl_or_plate, dishwasher)\n        # Load all bowls and plates into the dishwasher\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher to wash the bowls and plates"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the forks by hand.",
        "cdl": " \nbehavior wash_forks_by_hand(fork:item): \n    body: \n        wash(fork)\n        # Wash the fork by hand\n\nbehavior __goal__():\n    body:\n        foreach fork: item:\n            # Iterate through all items to locate and wash forks\n            if is_fork(fork):\n                wash_forks_by_hand(fork)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "1. Wash the vegetables.",
        "cdl": "behavior wash_vegetables(vegetables:item, sink:item):\n    body:\n        achieve_once inside(vegetables, sink)\n        # Place the vegetables inside the sink\n        wash(vegetables)\n        # Wash the vegetables\n\nbehavior fill_pot_with_water(pot:item, faucet:item):\n    body:\n        achieve close_char(char, faucet)\n        # Approach the faucet to fill the pot with water\n        achieve has_water(pot)\n        # Fill the pot with water\n\nbehavior __goal__():\n    body:\n        bind vegetables: item where:\n            is_food_vegetable(vegetables)\n        # Select the vegetables\n\n        bind pot: item where:\n            is_pot(pot)\n        # Select pot with ID 54\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet close to the sink\n\n        wash_vegetables(vegetables, sink)\n        fill_pot_with_water(pot, faucet)"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "3. Turn on the stove and put the vegetables in the pot.",
        "cdl": " \nbehavior add_vegetables_to_pot(vegetables:item, pot:item):\n    body:\n        achieve_once inside(vegetables, pot)\n        # Add the vegetables to the pot\n\nbehavior place_pot_on_stove(pot:item, stove:item):\n    body:\n        achieve_once on(pot, stove)\n        # Place the pot on the stove\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind vegetables: item where:\n            is_food_vegetable(vegetables)\n        # Select vegetables\n\n        bind pot: item where:\n            is_pot(pot) and has_water(pot)\n        # Select a pot with water\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        add_vegetables_to_pot(vegetables, pot)\n        place_pot_on_stove(pot, stove)\n "
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "4. Turn off the stove and cool the boiled vegetables in a bowl.",
        "cdl": " \nbehavior turn_off_stove_and_cool_vegetables(stove:item, pot:item, bowl:item, vegetables:item):\n    body:\n        achieve_once is_off(stove)\n        # Turn off the stove\n        achieve_once inside(vegetables, bowl)\n        # Move the boiled vegetables into the bowl to cool\n\nbehavior __goal__():\n    body:\n        bind stove: item where:\n            is_stove(stove) and id[stove] == 2090\n        # Select the stove with ID 2090\n\n        bind pot: item where:\n            is_pot(pot) and id[pot] == 54\n        # Select the pot with ID 54\n\n        bind bowl: item where:\n            is_bowl(bowl) and id[bowl] == 2096\n        # Select the bowl with ID 2096\n\n        bind vegetables: item where:\n            is_food_vegetable(vegetables)\n        # Select the vegetables\n\n        turn_off_stove_and_cool_vegetables(stove, pot, bowl, vegetables)\n        # Execute the behavior to turn off the stove and cool vegetables\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Slice some chicken and give it to your cat.",
        "cdl": "behavior slice_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board)\n        achieve cut(chicken)\n\nbehavior give_chicken_to_cat(chicken:item, cat:item):\n    body:\n        achieve_once on(chicken, cat)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat\n\n        slice_chicken(chicken, cutting_board, knife)\n        give_chicken_to_cat(chicken, cat)"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Identify all the windows in the house.",
        "cdl": " \ndef is_window_in_house(window: item):\n    # Function to check if an item is a window\n    symbol is_window_item = is_window(window)\n    return is_window_item\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window_in_house(window) and not visited(window):\n                observe(window, \"Locate all the windows in the house\")\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Wipe each window with a towel.",
        "cdl": " \ndef is_target_window(window: item):\n    # Function to check if a window is an object in this task\n    symbol is_target_instance = is_window(window)\n    return is_target_instance\n\nbehavior wipe_window(window:item, towel:item):\n    body:\n        achieve_once inhand(towel) # Temporarily hold the towel to wipe the window\n        wipe(window) # Wipe the window\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_target_window(window) and not visited(window):\n                observe(window, \"Check if this is a target window for wiping\")\n        \n        bind towel: item where:\n            is_towel(towel)\n        # Select the towel to use for wiping windows\n        \n        foreach window: item:\n            if is_target_window(window) and visited(window):\n                wipe_window(window, towel)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Wipe the toilet with toilet paper, then throw it into the toilet.",
        "cdl": "behavior wipe_toilet(toilet: item, paper: item):\n    body:\n        achieve_once inhand(paper) # Temporarily hold the toilet paper to wipe the toilet\n        wipe(toilet) # Wipe the toilet\n\nbehavior throw_paper_in_toilet(paper: item, toilet: item):\n    body:\n        achieve_once inside(paper, toilet) # Throw the used toilet paper into the toilet\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet)\n        # Select the toilet\n\n        if not open(toilet):\n            achieve open(toilet)\n        # Ensure the toilet is open\n\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper)\n        # Select the toilet paper\n\n        wipe_toilet(toilet, toilet_paper)\n        throw_paper_in_toilet(toilet_paper, toilet)"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "1. Peel and slice the bananas.",
        "cdl": " \nbehavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(banana, cutting_board) # Place the banana on the cutting board\n        achieve cut(banana) # Peel and slice the banana\n\nbehavior __goal__():\n    body:\n        bind banana: item where:\n            is_food_banana(banana)\n        # Select a banana\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        peel_and_slice_bananas(banana, cutting_board, knife)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Heat oil in a frying pan.",
        "cdl": " \ndef in_kitchen_counter(item: item):\n    # Function to check if an item is on the kitchen counter\n    symbol on_kitchen_counter = exists counter: item : (is_kitchen_counter(counter) and on(item, counter))\n    return on_kitchen_counter\n\nbehavior heat_oil_in_pan(oil:item, pan:item, stove:item):\n    body:\n        achieve_once inside(oil, pan)\n        # Pour oil into the frying pan\n        achieve_once on(pan, stove)\n        # Place the frying pan on the stove\n        achieve is_on(stove)\n        # Turn on the stove to heat the oil\n\nbehavior __goal__():\n    body:\n        bind oil: item where:\n            is_oil(oil)\n        # Select oil\n        \n        bind stove: item where:\n            is_stove(stove) and in_kitchen_counter(stove)\n        # Select a stove on the kitchen counter\n        \n        bind pan: item where:\n            is_fryingpan(pan)\n        # Select a frying pan\n\n        heat_oil_in_pan(oil, pan, stove)\n        # Heat oil in the frying pan on the stove\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "3. Fry the sliced bananas until they are golden brown.",
        "cdl": " \nbehavior fry_bananas(bananas:item, fryingpan:item, stove:item):\n    body:\n        achieve_once inside(bananas, fryingpan)\n        achieve_once on(fryingpan, stove)\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind bananas: item where:\n            is_food_banana(bananas)\n        # Select the sliced bananas\n\n        bind fryingpan: item where:\n            is_fryingpan(fryingpan)\n        # Select the frying pan\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select the stove\n\n        fry_bananas(bananas, fryingpan, stove)\n        # Fry the bananas until they are golden brown\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the table in the home office.",
        "cdl": "behavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n        \n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_book_on_table(book, table)\n        # Place the book on the table in the home office"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Turn on the light in the home office.",
        "cdl": "behavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind light: item where:\n            is_light(light) and inside(light, home_office)\n        # Select the light inside the home office\n\n        achieve is_on(light)\n        # Turn on the light in the home office"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and toast it.",
        "cdl": " \ndef find_cuttable_bread(bread: item):\n    # Check if the item is a bread that can be sliced\n    symbol is_cuttable_bread = is_food_bread(bread) and cuttable(bread)\n    return is_cuttable_bread\n\nbehavior slice_bread(bread: item, cutting_board: item, knife: item):\n    body:\n        achieve_once on(bread, cutting_board) # Place the bread on the cutting board\n        achieve cut(bread) # Slice the bread\n\nbehavior toast_bread(bread: item, toaster: item):\n    body:\n        achieve_once inside(bread, toaster)\n        # Place the sliced bread inside the toaster\n        achieve_once closed(toaster)\n        # Close the toaster\n        achieve is_on(toaster)\n        # Turn on the toaster to toast the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            find_cuttable_bread(bread)\n        # Select a cuttable bread\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind toaster: item where:\n            is_toaster(toaster)\n        # Select a toaster\n\n        slice_bread(bread, cutting_board, knife)\n        # Slice the bread\n        toast_bread(bread, toaster)\n        # Toast the sliced bread\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and then toast it.",
        "cdl": "def find_cuttable_bread(bread: item):\n    # Check if the item is a bread that can be sliced\n    symbol is_cuttable_bread = is_food_bread(bread) and cuttable(bread)\n    return is_cuttable_bread\n\nbehavior slice_bread(bread: item, cutting_board: item, knife: item):\n    body:\n        achieve_once on(bread, cutting_board) # Place the bread on the cutting board\n        achieve cut(bread) # Slice the bread\n\nbehavior toast_bread(bread: item, toaster: item):\n    body:\n        achieve_once inside(bread, toaster)\n        # Place the sliced bread inside the toaster\n        achieve_once closed(toaster)\n        # Close the toaster\n        achieve is_on(toaster)\n        # Turn on the toaster to toast the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            find_cuttable_bread(bread)\n        # Select a cuttable bread\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind toaster: item where:\n            is_toaster(toaster)\n        # Select a toaster\n\n        slice_bread(bread, cutting_board, knife)\n        # Slice the bread\n        toast_bread(bread, toaster)\n        # Toast the sliced bread"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV using the remote control.",
        "cdl": " \nbehavior touch_remote_control(remote:item):\n    body:\n        achieve_once close_char(char, remote) # Approach the remote control\n        touch(remote) # Touch the remote control\n\nbehavior __goal__():\n    body:\n        bind remote: item where:\n            is_remote_control(remote)\n        # Select the remote control\n\n        touch_remote_control(remote)\n        # Touch the remote control to turn on the TV\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Insert the CD into the CD player and play music.",
        "cdl": "behavior insert_cd_and_play(cd:item, cd_player:item):\n    body:\n        achieve_once inside(cd, cd_player) # Insert the CD into the CD player\n        achieve is_on(cd_player) # Turn on the CD player to play music\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        # Select a CD\n\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        # Select a CD player\n\n        insert_cd_and_play(cd, cd_player)\n        # Insert the CD and play music using the CD player"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Fill the pot with water, put it on the stove, and boil the egg.",
        "cdl": "behavior fill_pot_with_water(pot:item, faucet:item):\n    body:\n        achieve_once close_char(char, faucet)\n        achieve has_water(pot)\n\nbehavior place_pot_on_stove(pot:item, stove:item):\n    body:\n        achieve_once on(pot, stove)\n\nbehavior boil_egg(egg:item, pot:item, stove:item):\n    body:\n        achieve_once inside(egg, pot)\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot) and id[pot] == 2093\n        # Select a specific pot\n\n        bind faucet: item where:\n            is_faucet(faucet) and id[faucet] == 134\n        # Select a specific faucet\n\n        bind stove: item where:\n            is_stove(stove) and id[stove] == 2090\n        # Select a specific stove\n\n        bind egg: item where:\n            is_food_egg(egg) and id[egg] == 2053\n        # Select a specific egg\n\n        fill_pot_with_water(pot, faucet)\n        place_pot_on_stove(pot, stove)\n        boil_egg(egg, pot, stove)"
    },
    {
        "task_name": "Make coffee",
        "source_sub_task": "Make a cup of coffee using the coffee maker.",
        "cdl": " \nbehavior place_cup_and_start_coffee_maker(cup: item, coffee_maker: item):\n    body:\n        achieve_once inside(cup, coffee_maker)\n        achieve_once is_on(coffee_maker)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a suitable cup\n\n        bind coffee_maker: item where:\n            is_coffe_maker(coffee_maker)\n        # Select the coffee maker\n\n        place_cup_and_start_coffee_maker(cup, coffee_maker)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and place it on the coffee table in the home office.",
        "cdl": "behavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_book_on_table(book, table)\n        # Place the book on the coffee table in the home office"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Open the window in the home office.",
        "cdl": "\ndef is_window_in_home_office(window:item):\n    # Function to check if a window is in the home office\n    symbol in_home_office = exists room: item : (is_home_office(room) and inside(window, room))\n    return in_home_office\n\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        if exists window: item : (is_window(window) and is_window_in_home_office(window) and not visited(window)):\n            # If a window in the home office is found and not yet visited, open it\n            bind window: item where:\n                is_window(window) and is_window_in_home_office(window) and not visited(window)\n            open_window(window)\n        else:\n            # Check all items to find a window in the home office if not found initially\n            foreach window: item:\n                if is_window(window) and not visited(window):\n                    observe(window, \"Check if this is a window in the home office\")\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Put the cup in the fridge to freeze the water.",
        "cdl": "\nbehavior place_cup_in_fridge_to_freeze(cup:item, fridge:item):\n    body:\n        achieve_once inside(cup, fridge)\n\nbehavior close_the_fridge_door(fridge:item):\n    body:\n        achieve_once closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2063\n        # Select the cup with ID 2063\n\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 289\n        # Select the fridge with ID 289\n        \n        place_cup_in_fridge_to_freeze(cup, fridge)\n        close_the_fridge_door(fridge)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "1. Find the frying pan and place it on the stove.",
        "cdl": " \nbehavior place_fryingpan_on_stove(fryingpan:item, stove:item):\n    body:\n        achieve_once on(fryingpan, stove)\n\nbehavior __goal__():\n    body:\n        bind fryingpan: item where:\n            is_fryingpan(fryingpan)\n        # Select the frying pan\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select the stove\n\n        place_fryingpan_on_stove(fryingpan, stove)\n        # Place the frying pan on the stove\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Turn on the stove, put oil in the pan, and pour the beaten egg into the pan to scramble it.",
        "cdl": " \nbehavior heat_oil_and_scramble_egg(fryingpan:item, stove:item, oil:item, egg:item):\n    body:\n        achieve_once on(fryingpan, stove) # Place the frying pan on the stove\n        achieve is_on(stove) # Ensure the stove is turned on\n        achieve_once inside(oil, fryingpan) # Pour oil into the frying pan\n        achieve_once inside(egg, fryingpan) # Add the beaten egg to the frying pan\n\nbehavior __goal__():\n    body:\n        bind fryingpan: item where:\n            is_fryingpan(fryingpan) # Select the frying pan\n\n        bind stove: item where:\n            is_stove(stove) and on(fryingpan, stove) # Select the stove that has the frying pan on it\n\n        bind oil: item where:\n            is_oil(oil) # Select the oil\n\n        bind egg: item where:\n            is_food_egg(egg) and cut(egg) # Select the beaten egg\n\n        heat_oil_and_scramble_egg(fryingpan, stove, oil, egg)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Prepare a bowl of water and put it on the table in the home office.",
        "cdl": "behavior fill_bowl_with_water(bowl:item, sink:item):\n    body:\n        achieve_once inside(bowl, sink)\n        # Place the bowl inside the sink\n        achieve has_water(bowl)\n        # Fill the bowl with water\n\nbehavior place_bowl_on_table(bowl:item, table:item):\n    body:\n        achieve_once on(bowl, table)\n        # Place the bowl on the table\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl) \n        # Select a bowl\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table in the home office\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        fill_bowl_with_water(bowl, sink)\n        place_bowl_on_table(bowl, table)"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Find the cat and put it on the table in the home office.",
        "cdl": " \ndef find_cat(cat: item):\n    # Function to determine if a given item is the cat\n    symbol is_cat_instance = is_cat(cat)\n    return is_cat_instance\n\nbehavior find_and_place_cat_on_table(cat: item, table: item):\n    body:\n        achieve_once on(cat, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        if exists cat: item : (find_cat(cat) and not visited(cat)):\n            # If we have already found an unvisited cat, move close to it\n            bind cat: item where:\n                find_cat(cat) and not visited(cat)\n            find_and_place_cat_on_table(cat, table)\n        else:\n            # Check all items to find the cat if not found initially\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat, \"Find the cat\")\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Place the cup in the freezer.",
        "cdl": " \nbehavior place_cup_in_freezer(cup:item, freezer:item):\n    body:\n        achieve_once inside(cup, freezer)\n\nbehavior close_the_freezer_door(freezer:item):\n    body:\n        achieve_once closed(freezer)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2087\n        # Select the cup with ID 2087\n\n        bind freezer: item where:\n            is_fridge(freezer)\n        # Select the freezer\n\n        place_cup_in_freezer(cup, freezer)\n        close_the_freezer_door(freezer)\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV by touching the remote control.",
        "cdl": "behavior touch_remote_control(remote:item):\n    body:\n        achieve_once close_char(char, remote) # Approach the remote control\n        touch(remote) # Touch the remote control\n\nbehavior __goal__():\n    body:\n        bind remote: item where:\n            is_remote_control(remote)\n        # Select the remote control\n\n        touch_remote_control(remote)\n        # Touch the remote control to turn on the TV"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink directly.",
        "cdl": " \nbehavior clean_bathroom_sink(sink:item, cleaning_solution:item):\n    body:\n        achieve_once inhand(cleaning_solution)\n        # Temporarily hold the cleaning solution for cleaning\n        achieve clean(sink)\n        # Clean the bathroom sink\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind sink: item where:\n            is_sink(sink) and inside(sink, bathroom)\n        # Select the sink inside the bathroom\n\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select a cleaning solution\n\n        clean_bathroom_sink(sink, cleaning_solution)\n        # Clean the bathroom sink directly using the cleaning solution\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": " \nbehavior turn_on_bathroom_light(light:item, bathroom:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind light: item where:\n            is_light(light) and inside(light, bathroom)\n        # Select the light inside the bathroom\n\n        turn_on_bathroom_light(light, bathroom)\n        # Turn on the light in the bathroom\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Identify the correct book among any other similar items.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        if not visited(book):\n            observe(book, \"Identify the correct book among any other similar items\")\n            # Observe the book to ensure it is the correct one\n "
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": " \nbehavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior verify_coffee_table(table:item):\n    body:\n        observe(table, \"Verify if this is the correct coffee table in the home office\")\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book) and id[book] == 2136\n        # Select the specific book with ID 2136\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office) and id[table] == 270\n        # Select the specific table with ID 270 inside the home office\n\n        verify_coffee_table(table)\n        place_book_on_table(book, table)\n        # Place the book on the coffee table in the home office\n"
    }
]