From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee_with_coffee_maker(coffee_maker: item, cup: item):
    body:
        achieve_once has_water(cup)
        # Place coffee from the coffee maker into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        make_coffee_with_coffee_maker(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior make_coffee_with_coffee_maker(coffee_maker: item, cup: item):
    body:
        achieve_once has_water(cup)
        # Place coffee from the coffee maker into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        make_coffee_with_coffee_maker(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to use the coffee maker to make coffee in the cup. Ensure the coffee maker is identified, and then utilize it to transfer coffee into cup_2063.
##############################
From agent.py
Human Instruction: You need to use the coffee maker to make coffee in the cup. Ensure the coffee maker is identified, and then utilize it to transfer coffee into cup_2063.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for cup_2063 around kitchen_counter_230.
Action 3: Walk to cup_2063.
Action 4: Grab cup_2063.
Action 5: Walk to faucet_43.
Action 6: Switch on faucet_43.
Action 7: Switch off faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior identify_coffee_maker_and_make_coffee(coffee_maker: item, cup: item):
    body:
        achieve_once on(cup, coffee_maker) # Place the cup under the coffee maker
        achieve_once has_water(cup) # Ensure the cup gets filled with coffee from the maker

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Identify the kitchen counter

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and close(coffee_maker, kitchen_counter)
        # Identify a coffee maker close to the kitchen counter

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Identify cup_2063

        identify_coffee_maker_and_make_coffee(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior identify_coffee_maker_and_make_coffee(coffee_maker: item, cup: item):
    body:
        achieve_once on(cup, coffee_maker) # Place the cup under the coffee maker
        achieve_once has_water(cup) # Ensure the cup gets filled with coffee from the maker

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Identify the kitchen counter

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and close(coffee_maker, kitchen_counter)
        # Identify a coffee maker close to the kitchen counter

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Identify cup_2063

        identify_coffee_maker_and_make_coffee(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(cup_2063, coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is close cup_2063. cup_2063 is close coffe_maker_290. cup_2063 is on coffe_maker_290. cup_2063 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the coffee maker is used to fill cup_2063 with coffee. Currently, the cup is placed on the coffee maker, but there's no indication that it has been operated to transfer coffee into the cup. Ensure the coffee-making process is completed.
##############################
From agent.py
Human Instruction: You need to ensure that the coffee maker is used to fill cup_2063 with coffee. Currently, the cup is placed on the coffee maker, but there's no indication that it has been operated to transfer coffee into the cup. Ensure the coffee-making process is completed.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for cup_2063 around kitchen_counter_230.
Action 3: Walk to cup_2063.
Action 4: Grab cup_2063.
Action 5: Walk to faucet_43.
Action 6: Switch on faucet_43.
Action 7: Switch off faucet_43.
Action 8: Walk to coffe_maker_290.
Action 9: Put cup_2063 on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior close_the_coffee_maker_door(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)
        # Close the coffee maker door after use

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup_2063

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        achieve_on(cup, coffee_maker)
        # Place the cup on the coffee maker

        achieve full(cup, coffee_maker)
        # Ensure the cup is filled with coffee from the coffee maker

        close_the_coffee_maker_door(coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_on not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
behavior close_the_coffee_maker_door(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)
        # Close the coffee maker door after use

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup_2063

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        achieve on(cup, coffee_maker)
        # Place the cup on the coffee maker

        achieve full(cup, coffee_maker)
        # Ensure the cup is filled with coffee from the coffee maker

        close_the_coffee_maker_door(coffee_maker)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function full not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
behavior close_the_coffee_maker_door(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)
        # Close the coffee maker door after use

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup_2063

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        achieve on(cup, coffee_maker)
        # Place the cup on the coffee maker

        achieve has_water(cup)
        # Ensure the cup is filled with coffee from the coffee maker

        close_the_coffee_maker_door(coffee_maker)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(cup: item, coffee_maker: item):
    body:
        achieve_once on(cup, coffee_maker)
        # Ensure the cup is on the coffee maker

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve_once is_on(coffee_maker)
        # Start the coffee maker to brew coffee

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        make_coffee(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior make_coffee(cup: item, coffee_maker: item):
    body:
        achieve_once on(cup, coffee_maker)
        # Ensure the cup is on the coffee maker

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve_once is_on(coffee_maker)
        # Start the coffee maker to brew coffee

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        make_coffee(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

##############################
From agent.py-> find a plan in act()
switchon_executor(coffe_maker_290)
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the cup_2063. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_milk_and_sugar_to_coffee(cup: item, milk: item, sugar: item):
    body:
        achieve_once inside(milk, cup)
        achieve_once inside(sugar, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup_2063 which already has coffee

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        add_milk_and_sugar_to_coffee(cup, milk, sugar)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_milk_and_sugar_to_coffee(cup: item, milk: item, sugar: item):
    body:
        achieve_once inside(milk, cup)
        achieve_once inside(sugar, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup_2063 which already has coffee

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        add_milk_and_sugar_to_coffee(cup, milk, sugar)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_sugar_2039, cupboard_229)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the coffe_maker_290. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the coffe_maker_290. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. 
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. Grabbing food_sugar_2039 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_sugar_2039, cup_2063)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. Robot is close to the cup_2063. cup_2063 is close food_sugar_2039. food_sugar_2039 is close cup_2063. food_sugar_2039 is inside cup_2063. food_sugar_2039 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(coffe_maker_290)', 'put_executor(cup_2063, coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(food_sugar_2039)', 'grab_executor(food_sugar_2039)', 'walk_executor(cup_2063)', 'putin_executor(food_sugar_2039, cup_2063)']
Time info:
Time consume: 139 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 33
goal generate times: 5
goal correct times: 0
action_num: 19

Task complete rate:
Keystate: k1 - Requires: 16 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
