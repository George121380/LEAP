From agent.py
Reset goals: The sub-goals are: 
['Clean the bathroom sink directly.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2125_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_brush_2002_around_bathroom_counter_18(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(brush,bathroom_counter_instance)
        else:
            exp(brush,bathroom_counter_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,brush]=True
    

behavior find_rag_2052_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
behavior clean_sink(sink: item):
    body:
        scrub(sink)
        # Scrub the sink to remove dirt
        rinse(sink)
        # Rinse the sink to wash away the loose dirt
        achieve_once clean(sink)
        # The sink is clean

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select the sink to clean

        clean_sink(sink)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior clean_sink(sink: item):
    body:
        scrub(sink)
        # Scrub the sink to remove dirt
        rinse(sink)
        # Rinse the sink to wash away the loose dirt
        achieve_once clean(sink)
        # The sink is clean

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select the sink to clean

        clean_sink(sink)
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)scrub_executor(sink_19)rinse_executor(sink_19)
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, mat_32, phone_2029, cleaning_solution_2143, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
scrub_executor(sink_19)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. sink_19 is cleaned. 
##############################
From agent.py
rinse_executor(sink_19)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Clean the bathroom sink directly.
Action History:
['walk_executor(sink_19)', 'scrub_executor(sink_19)', 'rinse_executor(sink_19)']
Time info:
Time consume: 25 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 151
goal generate times: 1
goal correct times: 0
action_num: 3

Task complete rate:
1
Scene_id: 1
##############################
