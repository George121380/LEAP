From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.  ', '2. Heat oil in a pan.  ', '3. Fry the banana slices until golden brown.  ']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_fridge_126(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior peel_and_slice_bananas(banana: item):
    body:
        achieve_once cut(banana)
        # Peel and slice the banana

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana to peel and slice
        
        peel_and_slice_bananas(banana)
        # Peel and slice the banana into pieces
#goal_representation_end

##############################
From agent.py->reset_goal
behavior peel_and_slice_bananas(banana: item):
    body:
        achieve_once cut(banana)
        # Peel and slice the banana

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana to peel and slice
        
        peel_and_slice_bananas(banana)
        # Peel and slice the banana into pieces
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_banana_2083, fridge_126)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_banana_2083, fridge_126)
Find food_banana_2083. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_banana_2083 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_banana_2083, cutting_board_2123)
Robot find: Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_banana_2083. food_banana_2083 is close cutting_board_2123. food_banana_2083 is on cutting_board_2123. food_banana_2083 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_76)
Robot find: Robot is close to the knifeblock_76. 
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Fail to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2142)exp(knife_2122, bowl_2142)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(bowl_2142)
Robot find: iron_2161, Robot is close to the bowl_2142. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(knife_2122, bowl_2142)
Fail to find knife_2122 around bowl_2142. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(knife_2122, kitchen_counter_123)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(knife_2122, kitchen_counter_123)
Fail to find knife_2122 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
cut_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_food_peanut_butter_2105_around_cupboard_117(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil_in_pan(oil:item, pan:item, stove:item):
    body:
        achieve_once inside(oil, pan)
        achieve on(pan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil for frying

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan for heating oil

        bind stove: item where:
            is_stove(stove)
        # Select a stove for heating

        heat_oil_in_pan(oil, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_oil_in_pan(oil:item, pan:item, stove:item):
    body:
        achieve_once inside(oil, pan)
        achieve on(pan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil for frying

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan for heating oil

        bind stove: item where:
            is_stove(stove)
        # Select a stove for heating

        heat_oil_in_pan(oil, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the knife_2035. Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Fail to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the knife_2035. Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the knife_2035. Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find fryingpan_2154 ?
Answer: The frying pan, labeled as fryingpan_2154, is located in the dining room, specifically on kitchen_counter_122. Look for kitchen_counter_122 in the dining room, and you will find the fryingpan_2154 placed directly on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The frying pan, labeled as fryingpan_2154, is located in the dining room, specifically on kitchen_counter_122. Look for kitchen_counter_122 in the dining room, and you will find the fryingpan_2154 placed directly on it.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_banana_2083 around fridge_126.
Action 5: Grab food_banana_2083.
Action 6: Walk to cutting_board_2123.
Action 7: Put food_banana_2083 on cutting_board_2123.
Action 8: Walk to knifeblock_76.
Action 9: look for knife_2122 around knifeblock_76.
Action 10: Walk to bowl_2142.
Action 11: look for knife_2122 around bowl_2142.
Action 12: Walk to kitchen_counter_123.
Action 13: look for knife_2122 around kitchen_counter_123.
Action 14: Walk to knife_2035.
Action 15: Grab knife_2035.
Action 16: Walk to food_banana_2083.
Action 17: Cut food_banana_2083.
Action 18: Walk to stove_2135.
Action 19: Open stove_2135.
Action 20: look for fryingpan_2154 around stove_2135.
Action 21: Walk to cupboard_117.
Action 22: look for fryingpan_2154 around cupboard_117.
Action 23: Walk to cupboard_118.
Action 24: Open cupboard_118.

##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Fail to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the knife_2035. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. oil_2149 is inside fryingpan_2154. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. Grabbing fryingpan_2154 by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2088_around_toaster_132(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_cheese,toaster_instance)
        else:
            exp(food_cheese,toaster_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,toaster_instance]=True
        close[toaster_instance,food_cheese]=True
    

behavior find_oil_2149_around_table_270(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(oil,table_instance)
        else:
            exp(oil,table_instance)
    eff:
        unknown[oil]=False
        close[oil,table_instance]=True
        close[table_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior fry_banana_slices(banana_slices: item, frying_pan: item, stove: item):
    body:
        achieve on(frying_pan, stove)
        achieve inside(banana_slices, frying_pan)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices that have been cut

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and id[frying_pan] == 2154
        # Select the frying pan identified with ID 2154

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove for frying

        fry_banana_slices(banana_slices, frying_pan, stove)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_table_270(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(oil,table_instance)
        else:
            exp(oil,table_instance)
    eff:
        unknown[oil]=False
        close[oil,table_instance]=True
        close[table_instance,oil]=True
    

behavior find_knife_2035_around_curtain_206(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==206
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(knife,curtain_instance)
        else:
            exp(knife,curtain_instance)
    eff:
        unknown[knife]=False
        close[knife,curtain_instance]=True
        close[curtain_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(banana_slices: item, fryingpan: item, stove: item):
    body:
        achieve on(banana_slices, fryingpan)
        achieve on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the sliced banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select fryingpan_2154

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove_2135

        fry_banana_slices(banana_slices, fryingpan, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_table_270(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(oil,table_instance)
        else:
            exp(oil,table_instance)
    eff:
        unknown[oil]=False
        close[oil,table_instance]=True
        close[table_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior fry_banana_slices(banana: item, fryingpan: item, stove: item):
    body:
        achieve_once on(banana, fryingpan)
        # Place the banana slices in the frying pan
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Ensure the stove is on to fry the bananas

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the banana slices to fry

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select fryingpan_2154 for frying

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove_2135 for cooking

        fry_banana_slices(banana, fryingpan, stove)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_bathroom_counter_18(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(oil,bathroom_counter_instance)
        else:
            exp(oil,bathroom_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,bathroom_counter_instance]=True
        close[bathroom_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_fried(banana_slices:item):
    # Function to check if the banana slices are fried
    symbol fried_and_golden=exists o:item : (is_food_banana(o) and on(o, fryingpan_2154))
    return fried_and_golden

behavior fry_banana_slices(banana_slices: item, fryingpan: item, stove: item):
    body:
        achieve_once inside(banana_slices, fryingpan)
        # Place the banana slices into the frying pan
        achieve is_on(stove)
        # Ensure the stove is on to provide heat for frying
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices)
        # Select banana slices to fry

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select the frying pan located on kitchen_counter_122

        bind stove: item where:
            is_stove(stove)
        # Select a stove for frying

        fry_banana_slices(banana_slices, fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: fryingpan_2154; available variables: [Variable<banana_slices: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_table_270(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(oil,table_instance)
        else:
            exp(oil,table_instance)
    eff:
        unknown[oil]=False
        close[oil,table_instance]=True
        close[table_instance,oil]=True
    

behavior find_knife_2037_around_desk_272(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(knife,desk_instance)
        else:
            exp(knife,desk_instance)
    eff:
        unknown[knife]=False
        close[knife,desk_instance]=True
        close[desk_instance,knife]=True
    

#goal_representation
 
def is_fried(banana_slices: item):
    # Function to check if the banana slices are fried
    symbol fried_and_golden=exists o:item : (is_food_banana(o) and on(o, fryingpan))
    return fried_and_golden

behavior fry_banana_slices(banana_slices: item, fryingpan: item, stove: item):
    body:
        achieve_once inside(banana_slices, fryingpan)
        # Place the banana slices into the frying pan
        achieve is_on(stove)
        # Ensure the stove is on to provide heat for frying
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices)
        # Select banana slices to fry

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select the frying pan located on kitchen_counter_122

        bind stove: item where:
            is_stove(stove)
        # Select a stove for frying

        fry_banana_slices(banana_slices, fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: fryingpan; available variables: [Variable<banana_slices: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_ironing_board_2144(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(oil,ironing_board_instance)
        else:
            exp(oil,ironing_board_instance)
    eff:
        unknown[oil]=False
        close[oil,ironing_board_instance]=True
        close[ironing_board_instance,oil]=True
    

behavior find_knife_2122_around_bookshelf_275(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(knife,bookshelf_instance)
        else:
            exp(knife,bookshelf_instance)
    eff:
        unknown[knife]=False
        close[knife,bookshelf_instance]=True
        close[bookshelf_instance,knife]=True
    

#goal_representation
 
def is_fried(banana_slices: item, fryingpan: item):
    # Function to check if the banana slices are fried
    symbol fried_and_golden=exists o:item : (is_food_banana(o) and on(o, fryingpan))
    return fried_and_golden

behavior fry_banana_slices(banana_slices: item, fryingpan: item, stove: item):
    body:
        achieve_once on(banana_slices, fryingpan)
        # Place the banana slices into the frying pan
        achieve is_on(stove)
        # Ensure the stove is on to provide heat for frying
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices)
        # Select banana slices to fry

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select the frying pan located on kitchen_counter_122

        bind stove: item where:
            is_stove(stove)
        # Select a stove for frying

        fry_banana_slices(banana_slices, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_fried(banana_slices: item, fryingpan: item):
    # Function to check if the banana slices are fried
    symbol fried_and_golden=exists o:item : (is_food_banana(o) and on(o, fryingpan))
    return fried_and_golden

behavior fry_banana_slices(banana_slices: item, fryingpan: item, stove: item):
    body:
        achieve_once on(banana_slices, fryingpan)
        # Place the banana slices into the frying pan
        achieve is_on(stove)
        # Ensure the stove is on to provide heat for frying
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices)
        # Select banana slices to fry

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select the frying pan located on kitchen_counter_122

        bind stove: item where:
            is_stove(stove)
        # Select a stove for frying

        fry_banana_slices(banana_slices, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(fryingpan_2154)put_executor(food_banana_2083, fryingpan_2154)
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. Grabbing food_banana_2083 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(food_banana_2083, fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. food_banana_2083 is close fryingpan_2154. fryingpan_2154 is close food_banana_2083. food_banana_2083 is on fryingpan_2154. food_banana_2083 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to switch off the stove and remove the banana slices from the frying pan to finish the task of frying them until golden brown.
##############################
From agent.py
Human Instruction: You need to switch off the stove and remove the banana slices from the frying pan to finish the task of frying them until golden brown.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_banana_2083 around fridge_126.
Action 5: Grab food_banana_2083.
Action 6: Walk to cutting_board_2123.
Action 7: Put food_banana_2083 on cutting_board_2123.
Action 8: Walk to knifeblock_76.
Action 9: look for knife_2122 around knifeblock_76.
Action 10: Walk to bowl_2142.
Action 11: look for knife_2122 around bowl_2142.
Action 12: Walk to kitchen_counter_123.
Action 13: look for knife_2122 around kitchen_counter_123.
Action 14: Walk to knife_2035.
Action 15: Grab knife_2035.
Action 16: Walk to food_banana_2083.
Action 17: Cut food_banana_2083.
Action 18: Walk to stove_2135.
Action 19: Open stove_2135.
Action 20: look for fryingpan_2154 around stove_2135.
Action 21: Walk to cupboard_117.
Action 22: look for fryingpan_2154 around cupboard_117.
Action 23: Walk to cupboard_118.
Action 24: Open cupboard_118.
Action 25: look for fryingpan_2154 around cupboard_118.
Action 26: Walk to kitchen_counter_122.
Action 27: look for fryingpan_2154 around kitchen_counter_122.
Action 28: Walk to oil_2149.
Action 29: Grab oil_2149.
Action 30: Walk to fryingpan_2154.
Action 31: Put oil_2149 into fryingpan_2154.
Action 32: Grab fryingpan_2154.
Action 33: Walk to stove_2135.
Action 34: Put fryingpan_2154 on stove_2135.
Action 35: Switch on stove_2135.
Action 36: Walk to food_banana_2083.
Action 37: Grab food_banana_2083.
Action 38: Walk to fryingpan_2154.
Action 39: Put food_banana_2083 on fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_knife_2035_around_curtain_206(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==206
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(knife,curtain_instance)
        else:
            exp(knife,curtain_instance)
    eff:
        unknown[knife]=False
        close[knife,curtain_instance]=True
        close[curtain_instance,knife]=True
    

behavior find_oil_2013_around_bathroom_counter_18(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(oil,bathroom_counter_instance)
        else:
            exp(oil,bathroom_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,bathroom_counter_instance]=True
        close[bathroom_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior
fry_banana_slices(banana:item, fryingpan:item, stove:item):
    body:
        achieve on(banana, fryingpan)
        # Ensure banana slices are in the frying pan
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior remove_banana_slices(banana:item, fryingpan:item, stove:item):
    body:
        achieve_once off(stove)
        # Turn off the stove
        achieve_once remove(banana, fryingpan)
        # Remove banana slices from the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana slices

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan with banana slices

        bind stove: item where:
            is_stove(stove)
        # Select a stove for frying

        fry_banana_slices(banana, fryingpan, stove)
        remove_banana_slices(banana, fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n') at line 5413, column 9.
Expected one of: 
	* VARNAME
	* _LLSQB

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_bathroom_counter_18(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(oil,bathroom_counter_instance)
        else:
            exp(oil,bathroom_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,bathroom_counter_instance]=True
        close[bathroom_counter_instance,oil]=True
    

behavior find_knife_2035_around_curtain_206(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==206
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(knife,curtain_instance)
        else:
            exp(knife,curtain_instance)
    eff:
        unknown[knife]=False
        close[knife,curtain_instance]=True
        close[curtain_instance,knife]=True
    

#goal_representation
 
behavior fry_banana_slices(banana:item, fryingpan:item, stove:item):
    body:
        achieve on(banana, fryingpan)
        # Ensure banana slices are in the frying pan
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior remove_banana_slices(banana:item, fryingpan:item, stove:item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove
        achieve_once inside(banana, fryingpan)
        # Remove banana slices from the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana slices

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan with banana slices

        bind stove: item where:
            is_stove(stove)
        # Select a stove for frying

        fry_banana_slices(banana, fryingpan, stove)
        remove_banana_slices(banana, fryingpan, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2072_around_oven_127(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_cheese,oven_instance)
        else:
            exp(food_cheese,oven_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,oven_instance]=True
        close[oven_instance,food_cheese]=True
    

behavior find_oil_2149_around_table_270(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(oil,table_instance)
        else:
            exp(oil,table_instance)
    eff:
        unknown[oil]=False
        close[oil,table_instance]=True
        close[table_instance,oil]=True
    

behavior find_knife_2035_around_curtain_206(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==206
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(knife,curtain_instance)
        else:
            exp(knife,curtain_instance)
    eff:
        unknown[knife]=False
        close[knife,curtain_instance]=True
        close[curtain_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_golden_brown(banana:item):
    # Function to check if the banana is golden brown
    symbol is_golden_brown = exists o: item : (is_food_banana(o) and on(o, fryingpan) and not dirty(o))
    return is_golden_brown

behavior remove_golden_brown_banana(banana: item, fryingpan: item, stove: item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove
        achieve_once on(banana, fryingpan)
        # Temporarily ensure the banana is on the frying pan
        achieve_once close_char(char, fryingpan)
        # Approach the frying pan to remove the banana

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and id[banana]==2083
        # Select the banana being fried

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2154
        # Select the frying pan being used

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove being used

        if is_banana_golden_brown(banana):
            remove_golden_brown_banana(banana, fryingpan, stove)
            # Remove the banana from the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: fryingpan; available variables: [Variable<banana: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2035_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

behavior find_oil_2149_around_table_270(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(oil,table_instance)
        else:
            exp(oil,table_instance)
    eff:
        unknown[oil]=False
        close[oil,table_instance]=True
        close[table_instance,oil]=True
    

#goal_representation
 
def is_banana_golden_brown(banana:item):
    # Function to check if the banana is golden brown
    symbol is_golden_brown = exists o: item : (is_food_banana(o) and on(o, fryingpan) and not dirty(o))
    return is_golden_brown

behavior remove_golden_brown_banana(banana: item, fryingpan: item, stove: item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove
        achieve_once on(banana, fryingpan)
        # Temporarily ensure the banana is on the frying pan
        achieve_once close_char(char, fryingpan)
        # Approach the frying pan to remove the banana

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and id[banana]==2083
        # Select the banana being fried

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2154
        # Select the frying pan being used

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove being used

        if is_banana_golden_brown(banana):
            remove_golden_brown_banana(banana, fryingpan, stove)
            # Remove the banana from the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: fryingpan; available variables: [Variable<banana: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_knife_2122_around_desk_272(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(knife,desk_instance)
        else:
            exp(knife,desk_instance)
    eff:
        unknown[knife]=False
        close[knife,desk_instance]=True
        close[desk_instance,knife]=True
    

#goal_representation
 
behavior remove_golden_brown_banana(banana: item, fryingpan: item, stove: item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove
        achieve_once on(banana, fryingpan)
        # Temporarily ensure the banana is on the frying pan
        achieve_once close_char(char, fryingpan)
        # Approach the frying pan to remove the banana

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and id[banana]==2083
        # Select the banana being fried

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2154
        # Select the frying pan being used

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove being used

        if is_banana_golden_brown(banana):
            remove_golden_brown_banana(banana, fryingpan, stove)
            # Remove the banana from the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_table_270(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(oil,table_instance)
        else:
            exp(oil,table_instance)
    eff:
        unknown[oil]=False
        close[oil,table_instance]=True
        close[table_instance,oil]=True
    

behavior find_knife_2035_around_curtain_206(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==206
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(knife,curtain_instance)
        else:
            exp(knife,curtain_instance)
    eff:
        unknown[knife]=False
        close[knife,curtain_instance]=True
        close[curtain_instance,knife]=True
    

behavior find_food_cheese_2072_around_oven_127(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_cheese,oven_instance)
        else:
            exp(food_cheese,oven_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,oven_instance]=True
        close[oven_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(banana_slices:item, fryingpan:item, stove:item):
    body:
        achieve on(banana_slices, fryingpan)
        # Ensure banana slices are in the frying pan
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove to fry
        achieve is_on(stove)
        # Turn on the stove to fry the banana slices

behavior remove_fried_banana_slices(banana_slices:item, fryingpan:item):
    body:
        achieve_once inhand(banana_slices)
        # Remove the banana slices from the frying pan

behavior switch_off_stove(stove:item):
    body:
        achieve_once is_off(stove)
        # Turn off the stove

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices)
        # Select the banana slices to fry

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan for frying

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_banana_slices(banana_slices, fryingpan, stove)
        # Fry banana slices until golden brown

        switch_off_stove(stove)
        # Turn off the stove

        remove_fried_banana_slices(banana_slices, fryingpan)
        # Remove fried banana slices

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_toaster_132(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(oil,toaster_instance)
        else:
            exp(oil,toaster_instance)
    eff:
        unknown[oil]=False
        close[oil,toaster_instance]=True
        close[toaster_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(banana:item, fryingpan:item, stove:item):
    body:
        achieve inside(banana, fryingpan) # Ensure banana slices are inside the frying pan
        achieve on(fryingpan, stove) # Place the frying pan on the stove
        achieve is_on(stove) # Keep the stove on to fry banana slices until golden brown

behavior remove_banana_slices(banana:item, fryingpan:item, stove:item, kitchen_counter:item):
    body:
        achieve_once is_off(stove) # Turn off the stove after frying
        achieve_once on(banana, kitchen_counter) # Remove banana slices from the frying pan and place them on the kitchen counter

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the cut banana to be fried

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select the frying pan being used on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 122
        # Select the kitchen counter with ID 122

        fry_banana_slices(banana, fryingpan, stove)
        remove_banana_slices(banana, fryingpan, stove, kitchen_counter)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_table_270(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(oil,table_instance)
        else:
            exp(oil,table_instance)
    eff:
        unknown[oil]=False
        close[oil,table_instance]=True
        close[table_instance,oil]=True
    

behavior find_dry_pasta_2114_around_oven_127(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(dry_pasta,oven_instance)
        else:
            exp(dry_pasta,oven_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,oven_instance]=True
        close[oven_instance,dry_pasta]=True
    

#goal_representation
 
behavior fry_banana_slices(banana:item, fryingpan:item, stove:item):
    body:
        achieve inside(banana, fryingpan) # Ensure banana slices are inside the frying pan
        achieve on(fryingpan, stove) # Place the frying pan on the stove
        achieve is_on(stove) # Keep the stove on to fry banana slices until golden brown

behavior remove_banana_slices(banana:item, fryingpan:item, stove:item, kitchen_counter:item):
    body:
        achieve_once is_off(stove) # Turn off the stove after frying
        achieve_once on(banana, kitchen_counter) # Remove banana slices from the frying pan and place them on the kitchen counter

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the cut banana to be fried

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan being used on the stove

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 122
        # Select the kitchen counter with ID 122

        fry_banana_slices(banana, fryingpan, stove)
        remove_banana_slices(banana, fryingpan, stove, kitchen_counter)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2088_around_filing_cabinet_200(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==200
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(food_cheese,filing_cabinet_instance)
        else:
            exp(food_cheese,filing_cabinet_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,filing_cabinet_instance]=True
        close[filing_cabinet_instance,food_cheese]=True
    

behavior find_oil_2149_around_table_270(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(oil,table_instance)
        else:
            exp(oil,table_instance)
    eff:
        unknown[oil]=False
        close[oil,table_instance]=True
        close[table_instance,oil]=True
    

behavior find_knife_2037_around_dishwasher_129(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(knife,dishwasher_instance)
        else:
            exp(knife,dishwasher_instance)
    eff:
        unknown[knife]=False
        close[knife,dishwasher_instance]=True
        close[dishwasher_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(banana:item, fryingpan:item, stove:item):
    body:
        achieve_once on(banana, fryingpan)
        achieve is_on(stove)
        achieve is_off(stove)  # After they are golden brown, turn off the stove

behavior remove_banana_slices(banana:item, fryingpan:item):
    body:
        achieve_once close_char(char, fryingpan)  # Be close to the frying pan
        achieve_once clean(banana)  # Remove banana slices from the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select banana slices to fry
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan for frying
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking
        
        fry_banana_slices(banana, fryingpan, stove)
        remove_banana_slices(banana, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_bathroom_counter_18(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(oil,bathroom_counter_instance)
        else:
            exp(oil,bathroom_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,bathroom_counter_instance]=True
        close[bathroom_counter_instance,oil]=True
    

behavior find_knife_2122_around_desk_272(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(knife,desk_instance)
        else:
            exp(knife,desk_instance)
    eff:
        unknown[knife]=False
        close[knife,desk_instance]=True
        close[desk_instance,knife]=True
    

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(banana: item, fryingpan: item, stove: item):
    body:
        achieve on(banana, fryingpan)
        # Place the banana slices into the frying pan
        achieve is_on(stove)
        # Ensure the stove is on to fry the banana
        # Fry until golden brown, then take slices out
        achieve_once is_off(stove)
        # Turn off the stove after frying

behavior remove_banana_slices(banana: item, fryingpan: item, plate: item):
    body:
        achieve_once on(banana, plate)
        # Remove banana slices from frying pan and place on a plate

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana slices to fry

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind plate: item where:
            is_plate(plate)
        # Select a plate to place the fried banana slices

        fry_banana_slices(banana, fryingpan, stove)
        remove_banana_slices(banana, fryingpan, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_banana_2083)', 'walk_executor(cutting_board_2123)', 'put_executor(food_banana_2083, cutting_board_2123)', 'walk_executor(knifeblock_76)', 'walk_executor(bowl_2142)', 'walk_executor(kitchen_counter_123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_banana_2083)', 'cut_executor(food_banana_2083)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_122)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2149, fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_banana_2083)', 'grab_executor(food_banana_2083)', 'walk_executor(fryingpan_2154)', 'put_executor(food_banana_2083, fryingpan_2154)']
Time info:
Time consume: 462 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 149
goal generate times: 12
goal correct times: 2
action_num: 31

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
