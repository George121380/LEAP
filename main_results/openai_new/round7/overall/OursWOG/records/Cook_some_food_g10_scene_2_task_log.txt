From agent.py
Reset goals: The sub-goals are: 
['1. Find noodles and chicken.', '2. Boil the noodles and chicken together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_kitchen_counter_132(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_noodles_2062_around_kitchen_counter_132(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
def has_noodles_or_chicken_identified():
    # Function to check if there are noodles or chicken already identified in previously visited areas
    symbol available=exists o: item : ((is_food_noodles(o) or is_food_chicken(o)) and visited(o))
    return available

behavior __goal__():
    body:
        if has_noodles_or_chicken_identified():
            # If we have already found noodles or chicken based on known information
            bind item: item where:
                (is_food_noodles(item) or is_food_chicken(item)) and visited(item)
            # Move closer to the found item
            achieve close_char(char, item)

        else:
            # If no noodles or chicken are found in the visited areas, start exploring
            foreach o: item:
                if (is_food_noodles(o) or is_food_chicken(o)) and not visited(o):
                    observe(o, "Check the location of the noodles or chicken")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_noodles_or_chicken_identified():
    # Function to check if there are noodles or chicken already identified in previously visited areas
    symbol available=exists o: item : ((is_food_noodles(o) or is_food_chicken(o)) and visited(o))
    return available

behavior __goal__():
    body:
        if has_noodles_or_chicken_identified():
            # If we have already found noodles or chicken based on known information
            bind item: item where:
                (is_food_noodles(item) or is_food_chicken(item)) and visited(item)
            # Move closer to the found item
            achieve close_char(char, item)

        else:
            # If no noodles or chicken are found in the visited areas, start exploring
            foreach o: item:
                if (is_food_noodles(o) or is_food_chicken(o)) and not visited(o):
                    observe(o, "Check the location of the noodles or chicken")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_chicken_2050, kitchen_counter_132)walk_executor(food_chicken_2050)obs(food_chicken_2050, Check the location of the noodles or chicken)walk_executor(kitchen_counter_132)exp(food_noodles_2062, kitchen_counter_132)walk_executor(food_noodles_2062)obs(food_noodles_2062, Check the location of the noodles or chicken)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_chicken_2050, kitchen_counter_132)
Fail to find food_chicken_2050 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)obs(food_chicken_2050, Check the location of the noodles or chicken)walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_noodles_2062, cupboard_131)walk_executor(food_noodles_2062)obs(food_noodles_2062, Check the location of the noodles or chicken)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
obs(food_chicken_2050, Check the location of the noodles or chicken)obs(food_noodles_2062, Check the location of the noodles or chicken)
##############################
From agent.py
obs(food_chicken_2050, Check the location of the noodles or chicken)
Get this information:  food_chicken_2050 is close to fridge_140. food_chicken_2050 is close to character_219. food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside fridge_140. food_chicken_2050 is CLEAN.
##############################
From agent.py
obs(food_noodles_2062, Check the location of the noodles or chicken)
Get this information:  food_noodles_2062 is inside dining_room_1. food_noodles_2062 is inside fridge_140. food_noodles_2062 is close to fridge_140. food_noodles_2062 is close to character_219. food_noodles_2062 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_pot_54(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_box_2023_around_cupboard_131(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles_and_chicken(pot: item, stove: item, noodles: item, chicken: item):
    body:
        achieve_once inside(noodles, pot)
        # Place the noodles inside the pot
        achieve_once inside(chicken, pot)
        # Place the chicken inside the pot
        achieve_once has_water(pot)
        # Ensure the pot has water
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the noodles and chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling

        boil_noodles_and_chicken(pot, stove, noodles, chicken)
        # Execute the boiling process

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_noodles_and_chicken(pot: item, stove: item, noodles: item, chicken: item):
    body:
        achieve_once inside(noodles, pot)
        # Place the noodles inside the pot
        achieve_once inside(chicken, pot)
        # Place the chicken inside the pot
        achieve_once has_water(pot)
        # Ensure the pot has water
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the noodles and chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling

        boil_noodles_and_chicken(pot, stove, noodles, chicken)
        # Execute the boiling process

##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(food_noodles_2062)
Robot find: Robot is close to the fridge_140. Robot is close to the food_noodles_2062. 
##############################
From agent.py
grab_executor(food_noodles_2062)
Robot find: Robot is close to the fridge_140. Robot is close to the food_noodles_2062. Grabbing food_noodles_2062 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_noodles_2062. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_noodles_2062, pot_54)
Robot find: Robot is close to the food_noodles_2062. Robot is close to the oven_141. Robot is close to the pot_54. food_noodles_2062 is inside pot_54. pot_54 is close food_noodles_2062. food_noodles_2062 is close pot_54. food_noodles_2062 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. Robot is close to the food_noodles_2062. 
##############################
From agent.py
putin_executor(food_chicken_2050, pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. Robot is close to the food_noodles_2062. food_chicken_2050 is close pot_54. pot_54 is close food_chicken_2050. food_chicken_2050 is inside pot_54. food_chicken_2050 released by right hand. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. Robot is close to the food_noodles_2062. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot does not yet have water. You need to fill the pot with water to complete boiling the noodles and chicken.
##############################
From agent.py
Human Instruction: The pot does not yet have water. You need to fill the pot with water to complete boiling the noodles and chicken.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for food_chicken_2050 around kitchen_counter_132.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_chicken_2050 around fridge_140.
Action 7: Observe around food_chicken_2050 with the question of Check the location of the noodles or chicken.
Action 8: Observe around food_noodles_2062 with the question of Check the location of the noodles or chicken.
Action 9: Walk to pot_54.
Action 10: Open pot_54.
Action 11: Walk to food_noodles_2062.
Action 12: Grab food_noodles_2062.
Action 13: Walk to pot_54.
Action 14: Put food_noodles_2062 into pot_54.
Action 15: Walk to food_chicken_2050.
Action 16: Grab food_chicken_2050.
Action 17: Walk to pot_54.
Action 18: Put food_chicken_2050 into pot_54.
Action 19: Grab pot_54.
Action 20: Walk to faucet_134.
Action 21: Switch off faucet_134.
Action 22: Walk to stove_2090.
Action 23: Put pot_54 on stove_2090.
Action 24: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2114_around_washing_machine_2041(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_shirt,washing_machine_instance)
        else:
            exp(clothes_shirt,washing_machine_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,washing_machine_instance]=True
        close[washing_machine_instance,clothes_shirt]=True
    

behavior find_fork_2104_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_noodles_and_chicken(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil noodles and chicken

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the pot

        add_water_to_pot(pot, faucet)
        boil_noodles_and_chicken(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_to_pot(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_noodles_and_chicken(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil noodles and chicken

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the pot

        add_water_to_pot(pot, faucet)
        boil_noodles_and_chicken(pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot does not yet have water. You need to fill the pot with water to complete boiling the noodles and chicken.
##############################
From agent.py
Human Instruction: The pot does not yet have water. You need to fill the pot with water to complete boiling the noodles and chicken.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for food_chicken_2050 around kitchen_counter_132.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_chicken_2050 around fridge_140.
Action 7: Observe around food_chicken_2050 with the question of Check the location of the noodles or chicken.
Action 8: Observe around food_noodles_2062 with the question of Check the location of the noodles or chicken.
Action 9: Walk to pot_54.
Action 10: Open pot_54.
Action 11: Walk to food_noodles_2062.
Action 12: Grab food_noodles_2062.
Action 13: Walk to pot_54.
Action 14: Put food_noodles_2062 into pot_54.
Action 15: Walk to food_chicken_2050.
Action 16: Grab food_chicken_2050.
Action 17: Walk to pot_54.
Action 18: Put food_chicken_2050 into pot_54.
Action 19: Grab pot_54.
Action 20: Walk to faucet_134.
Action 21: Switch off faucet_134.
Action 22: Walk to stove_2090.
Action 23: Put pot_54 on stove_2090.
Action 24: Switch on stove_2090.
Action 25: Grab pot_54.
Action 26: Walk to faucet_308.
Action 27: Switch off faucet_308.
Action 28: Walk to stove_2090.
Action 29: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_box_2023_around_cupboard_131(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)

behavior boil_noodles_and_chicken(pot: item, stove: item, noodles: item, chicken: item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the noodles and chicken

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the water

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles to be boiled

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken to be boiled

        add_water_to_pot(pot, faucet)
        boil_noodles_and_chicken(pot, stove, noodles, chicken)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_to_pot(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)

behavior boil_noodles_and_chicken(pot: item, stove: item, noodles: item, chicken: item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the noodles and chicken

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the water

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles to be boiled

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken to be boiled

        add_water_to_pot(pot, faucet)
        boil_noodles_and_chicken(pot, stove, noodles, chicken)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water. The pot does not yet have water, which is necessary for boiling the noodles and chicken.
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(kitchen_counter_132)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(food_noodles_2062)', 'grab_executor(food_noodles_2062)', 'walk_executor(pot_54)', 'putin_executor(food_noodles_2062, pot_54)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(pot_54)', 'putin_executor(food_chicken_2050, pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)']
Time info:
Time consume: 136 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 117
goal generate times: 4
goal correct times: 0
action_num: 31

Task complete rate:
Keystate: k1 - Requires: 13 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
