From agent.py
Reset goals: The sub-goals are: 
['1. Find and gather the vegetables you want to boil.', '2. Fill a pot with water and place it on the stove.', '3. Add the vegetables to the pot and turn on the stove to boil them.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_carrot_2015_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_onion_2009_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
def is_vegetable(x:item):
    # Function to determine if an item is a vegetable
    return is_food_vegetable(x)

behavior gather_vegetables(vegetable:item):
    body:
        achieve close_char(char, vegetable)
        # Gather by getting close to each vegetable

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_vegetable(vegetable) and not visited(vegetable):
                gather_vegetables(vegetable)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_vegetable(x:item):
    # Function to determine if an item is a vegetable
    return is_food_vegetable(x)

behavior gather_vegetables(vegetable:item):
    body:
        achieve close_char(char, vegetable)
        # Gather by getting close to each vegetable

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_vegetable(vegetable) and not visited(vegetable):
                gather_vegetables(vegetable)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_vegetable_2113, fridge_126)
Find food_vegetable_2113. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a pot and place it on the stove.', '2. Place the vegetables in the pot and boil them.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_peanut_butter_2105_around_cupboard_117(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

behavior find_food_carrot_2015_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove(stove:item):
    # Function to check if a pot is on the stove
    symbol pot_on_stove=exists p: item : (is_pot(p) and on(p, stove))
    return pot_on_stove

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        if not is_pot_on_stove(stove):
            place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_pot_on_stove(stove:item):
    # Function to check if a pot is on the stove
    symbol pot_on_stove=exists p: item : (is_pot(p) and on(p, stove))
    return pot_on_stove

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        if not is_pot_on_stove(stove):
            place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(pot_2138, kitchen_counter_123)walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(pot_2138, kitchen_counter_123)
Fail to find pot_2138 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(pot_2138, cupboard_117)walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(pot_2138, cupboard_117)
Fail to find pot_2138 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_doorjamb_309(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==309
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(pot,doorjamb_instance)
        else:
            exp(pot,doorjamb_instance)
    eff:
        unknown[pot]=False
        close[pot,doorjamb_instance]=True
        close[doorjamb_instance,pot]=True
    

behavior find_food_carrot_2086_around_ceilinglamp_138(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==138
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(food_carrot,ceilinglamp_instance)
        else:
            exp(food_carrot,ceilinglamp_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,ceilinglamp_instance]=True
        close[ceilinglamp_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve_once inside(vegetables, pot)

behavior start_boiling(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78 that was placed on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2113
        # Select the food_vegetable_2113

        place_vegetables_in_pot(vegetables, pot)
        start_boiling(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve_once inside(vegetables, pot)

behavior start_boiling(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78 that was placed on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2113
        # Select the food_vegetable_2113

        place_vegetables_in_pot(vegetables, pot)
        start_boiling(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. food_vegetable_2113 is inside pot_78. pot_78 is close food_vegetable_2113. food_vegetable_2113 is close pot_78. food_vegetable_2113 released by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the stove_2135. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the stove_2135. Robot is close to the kitchen_counter_119. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil vegetables with a pot on the stove.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(kitchen_counter_123)', 'walk_executor(cupboard_117)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(pot_78)', 'putin_executor(food_vegetable_2113, pot_78)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)']
Time info:
Time consume: 123 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 104
goal generate times: 3
goal correct times: 0
action_num: 15

Task complete rate:
Keystate: k1 - Requires: 18 steps
Keystate: k2 - Requires: 7 steps
Action Completion Rate: 0.0
Scene_id: 1
##############################
