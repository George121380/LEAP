From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables in a pot.  ', '2. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_kitchen_counter_119(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_pot_2040_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_clothes_shirt_2158_around_basket_for_clothes_2078(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_119(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables inside the pot
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to boil

        fill_pot_with_water(pot, sink)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables inside the pot
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to boil

        fill_pot_with_water(pot, sink)
        boil_vegetables(pot, stove, vegetables)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(pot_78, kitchen_counter_119)walk_executor(pot_78)open_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(kitchen_counter_119)exp(food_vegetable_2113, kitchen_counter_119)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(pot_78, kitchen_counter_119)
Find pot_78. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(kitchen_counter_119)exp(food_vegetable_2113, kitchen_counter_119)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_vegetable_2113, kitchen_counter_119)
Fail to find food_vegetable_2113 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(food_vegetable_2113, cupboard_117)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the pot_78. Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(food_vegetable_2113, cupboard_117)
Fail to find food_vegetable_2113 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_vegetable_2113, cupboard_118)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the pot_78. Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the pot_78. Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(food_vegetable_2113, cupboard_118)
Fail to find food_vegetable_2113 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(food_vegetable_2113, stove_2135)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(food_vegetable_2113, stove_2135)
Fail to find food_vegetable_2113 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the pot_78. Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_vegetable_2113, fridge_126)
Find food_vegetable_2113. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2113)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. food_vegetable_2113 is inside pot_78. pot_78 is close food_vegetable_2113. food_vegetable_2113 is close pot_78. food_vegetable_2113 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the pot with water by switching on the faucet while the pot is positioned under it, ensuring the pot contains water before proceeding to boil the vegetables.
##############################
From agent.py
Human Instruction: The robot needs to fill the pot with water by switching on the faucet while the pot is positioned under it, ensuring the pot contains water before proceeding to boil the vegetables.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for pot_78 around kitchen_counter_119.
Action 3: Walk to pot_78.
Action 4: Grab pot_78.
Action 5: Walk to faucet_20.
Action 6: Switch on faucet_20.
Action 7: Switch off faucet_20.
Action 8: Walk to kitchen_counter_119.
Action 9: look for food_vegetable_2113 around kitchen_counter_119.
Action 10: Walk to cupboard_117.
Action 11: look for food_vegetable_2113 around cupboard_117.
Action 12: Walk to cupboard_118.
Action 13: Open cupboard_118.
Action 14: look for food_vegetable_2113 around cupboard_118.
Action 15: Walk to stove_2135.
Action 16: Open stove_2135.
Action 17: look for food_vegetable_2113 around stove_2135.
Action 18: Walk to fridge_126.
Action 19: Switch off fridge_126.
Action 20: Open fridge_126.
Action 21: look for food_vegetable_2113 around fridge_126.
Action 22: Grab food_vegetable_2113.
Action 23: Put food_vegetable_2113 into pot_78.
Action 24: Walk to stove_2135.
Action 25: Switch on stove_2135.
Action 26: Put pot_78 on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_carrot_2015_around_kitchen_counter_122(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_ice_2024_around_door_61(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==61
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(ice,door_instance)
        else:
            exp(ice,door_instance)
    eff:
        unknown[ice]=False
        close[ice,door_instance]=True
        close[door_instance,ice]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_onced inside(vegetables, pot)
        # Put the vegetables inside the pot
        achieve is_on(stove) # Turn on the stove
        achieve on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove for boiling the vegetables

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2113
        # Select the vegetables with ID 2113 to be boiled

        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inside') at line 5414, column 23.
Expected one of: 
	* LSHIFT
	* _NEWLINE
	* MINUS
	* AND
	* EQUAL
	* SLASH
	* FLOORDIV
	* AT
	* OR
	* PERCENT
	* __ANON_1
	* GREATER_EQ
	* __ANON_0
	* __ANON_3
	* MORETHAN
	* __ANON_6
	* NOT_EQ
	* __ANON_2
	* CIRCUMFLEX
	* AMPERSAND
	* STAR
	* RSHIFT
	* LESS_EQ
	* DOUBLE_EQUAL
	* PLUS
	* __ANON_7
	* COMMA
	* __ANON_4
	* __ANON_8
	* IF
	* SEMICOLON
	* LESSTHAN
	* __ANON_5
	* VBAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_carrot_2015_around_food_food_2064(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_carrot,food_food_instance)
        else:
            exp(food_carrot,food_food_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,food_food_instance]=True
        close[food_food_instance,food_carrot]=True
    

behavior find_ice_2024_around_door_61(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==61
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(ice,door_instance)
        else:
            exp(ice,door_instance)
    eff:
        unknown[ice]=False
        close[ice,door_instance]=True
        close[door_instance,ice]=True
    

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior place_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables inside the pot

behavior boil_vegetables(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove for boiling the vegetables

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2113
        # Select the vegetables with ID 2113 to be boiled

        fill_pot_with_water(pot, faucet)
        place_vegetables_in_pot(vegetables, pot)
        boil_vegetables(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_food_food_2064(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_carrot,food_food_instance)
        else:
            exp(food_carrot,food_food_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,food_food_instance]=True
        close[food_food_instance,food_carrot]=True
    

behavior find_ice_2024_around_cpuscreen_277(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==277
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(ice,cpuscreen_instance)
        else:
            exp(ice,cpuscreen_instance)
    eff:
        unknown[ice]=False
        close[ice,cpuscreen_instance]=True
        close[cpuscreen_instance,ice]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_onion_2104_around_window_191(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==191
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(food_onion,window_instance)
        else:
            exp(food_onion,window_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,window_instance]=True
        close[window_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_and_vegetables(pot:item):
    # Function to check if there is water and vegetables in the pot
    symbol has_water_and_veg = has_water(pot) and exists veg: item : (is_food_vegetable(veg) and inside(veg, pot))
    return has_water_and_veg

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water_and_vegetables(pot)
        # Select the pot that has water and vegetables inside

        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        boil_vegetables(pot, stove)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'veg') at line 5427, column 58.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_orange_2027_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

behavior find_food_carrot_2015_around_kitchen_counter_122(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_ice_2024_around_door_61(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==61
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(ice,door_instance)
        else:
            exp(ice,door_instance)
    eff:
        unknown[ice]=False
        close[ice,door_instance]=True
        close[door_instance,ice]=True
    

#goal_representation
 
def has_water_and_vegetables(pot:item):
    # Function to check if there is water and vegetables in the pot
    symbol has_water_and_veg = has_water(pot) and exists veg: item : (is_food_vegetable(veg) and inside(veg, pot))
    return has_water_and_veg

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water_and_vegetables(pot)
        # Select the pot that has water and vegetables inside

        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'veg') at line 5409, column 58.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_carrot_2086_around_cpuscreen_277(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==277
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(food_carrot,cpuscreen_instance)
        else:
            exp(food_carrot,cpuscreen_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cpuscreen_instance]=True
        close[cpuscreen_instance,food_carrot]=True
    

behavior find_ice_2024_around_door_61(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==61
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(ice,door_instance)
        else:
            exp(ice,door_instance)
    eff:
        unknown[ice]=False
        close[ice,door_instance]=True
        close[door_instance,ice]=True
    

behavior find_food_onion_2104_around_computer_209(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(food_onion,computer_instance)
        else:
            exp(food_onion,computer_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,computer_instance]=True
        close[computer_instance,food_onion]=True
    

#goal_representation
 
def has_water_and_vegetables(pot:item):
    # Function to check if there is water and vegetables in the pot
    symbol has_water_and_veg = has_water(pot) and exists veg: item : (is_food_vegetable(veg) and inside(veg, pot))
    return has_water_and_veg

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water_and_vegetables(pot)
        # Select the pot that has water and vegetables inside

        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_food_food_2064(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_carrot,food_food_instance)
        else:
            exp(food_carrot,food_food_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,food_food_instance]=True
        close[food_food_instance,food_carrot]=True
    

behavior find_ice_2024_around_cpuscreen_277(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==277
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(ice,cpuscreen_instance)
        else:
            exp(ice,cpuscreen_instance)
    eff:
        unknown[ice]=False
        close[ice,cpuscreen_instance]=True
        close[cpuscreen_instance,ice]=True
    

behavior find_pot_2040_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_onion_2104_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior add_vegetables_to_pot(vegetable: item, pot: item):
    body:
        achieve_once inside(vegetable, pot)
        # Add the vegetables to the pot

behavior boil_vegetables(pot: item, stove: item):
    body:
        achieve_once is_on(stove) # Turn on the stove
        achieve on(pot, stove) # Ensure the pot is on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet for filling pot with water

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, faucet)
        add_vegetables_to_pot(vegetable, pot)
        boil_vegetables(pot, stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables in the pot.', '2. Store the whole pot in the fridge.']
##############################
Error record: list index out of range
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(kitchen_counter_119)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_vegetable_2113)', 'putin_executor(food_vegetable_2113, pot_78)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'put_executor(pot_78, stove_2135)']
Time info:
Time consume: 254 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 39
goal generate times: 4
goal correct times: 0
action_num: 20

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 2 steps
Keystate: k3 - Requires: 5 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
