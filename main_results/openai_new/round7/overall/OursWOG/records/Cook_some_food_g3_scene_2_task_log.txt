From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_132(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_carrot_2047_around_kitchen_counter_132(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_onion_2026_around_kitchen_counter_132(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_potato_2066_around_kitchen_counter_132(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the vegetables

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to be boiled

        fill_pot_with_water(pot, sink)
        boil_vegetables(pot, stove, vegetables)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the vegetables

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to be boiled

        fill_pot_with_water(pot, sink)
        boil_vegetables(pot, stove, vegetables)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(pot_54, kitchen_counter_132)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_132)exp(food_vegetable_2072, kitchen_counter_132)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(pot_54, kitchen_counter_132)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_132)exp(food_vegetable_2072, kitchen_counter_132)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_vegetable_2072, kitchen_counter_132)
Fail to find food_vegetable_2072 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(kitchen_counter_128)exp(food_vegetable_2072, kitchen_counter_128)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the pot_54. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_vegetable_2072, kitchen_counter_128)
Fail to find food_vegetable_2072 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_vegetable_2072, cupboard_131)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the pot_54. Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the pot_54. Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, cupboard_131)
Fail to find food_vegetable_2072 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2072)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water from a sink before boiling the vegetables.
##############################
From agent.py
Human Instruction: You need to fill the pot with water from a sink before boiling the vegetables.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for pot_54 around kitchen_counter_132.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to kitchen_counter_132.
Action 9: look for food_vegetable_2072 around kitchen_counter_132.
Action 10: Walk to faucet_308.
Action 11: Switch off faucet_308.
Action 12: Walk to kitchen_counter_128.
Action 13: look for food_vegetable_2072 around kitchen_counter_128.
Action 14: Walk to faucet_134.
Action 15: Switch on faucet_134.
Action 16: Switch off faucet_134.
Action 17: Walk to cupboard_131.
Action 18: Open cupboard_131.
Action 19: look for food_vegetable_2072 around cupboard_131.
Action 20: Walk to fridge_140.
Action 21: Switch off fridge_140.
Action 22: Open fridge_140.
Action 23: look for food_vegetable_2072 around fridge_140.
Action 24: Grab food_vegetable_2072.
Action 25: Put food_vegetable_2072 into pot_54.
Action 26: Walk to stove_2090.
Action 27: Put pot_54 on stove_2090.
Action 28: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be boiled

        fill_pot_with_water(pot, sink)
        boil_vegetables(pot, stove, vegetables)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_box_2023_around_washing_machine_2041(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(box,washing_machine_instance)
        else:
            exp(box,washing_machine_instance)
    eff:
        unknown[box]=False
        close[box,washing_machine_instance]=True
        close[washing_machine_instance,box]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(vegetables: item, pot: item, stove: item):
    body:
        achieve_once inside(vegetables, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the vegetables

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be boiled

        fill_pot_with_water(pot, sink)
        boil_vegetables(vegetables, pot, stove) 

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_box_2023_around_ironing_board_2099(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(box,ironing_board_instance)
        else:
            exp(box,ironing_board_instance)
    eff:
        unknown[box]=False
        close[box,ironing_board_instance]=True
        close[ironing_board_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        # Place vegetables inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot where vegetables will be boiled

        bind sink: item where:
            is_sink(sink)
        # Select the sink to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove to boil the water

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        # Select the vegetables with ID 2072

        fill_pot_with_water(pot, sink)
        boil_vegetables(pot, stove, vegetables)
        # Execute the steps to boil the vegetables

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Cool the vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_box_2023_around_washing_machine_2041(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(box,washing_machine_instance)
        else:
            exp(box,washing_machine_instance)
    eff:
        unknown[box]=False
        close[box,washing_machine_instance]=True
        close[washing_machine_instance,box]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior add_water_to_pot(pot: item, sink: item):
    body:
        achieve_once has_water(pot)

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use for boiling

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to boil

        add_water_to_pot(pot, sink)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_box_2023_around_cupboard_130(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the vegetables

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to boil

        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_box_2023_around_dishwasher_143(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(box,dishwasher_instance)
        else:
            exp(box,dishwasher_instance)
    eff:
        unknown[box]=False
        close[box,dishwasher_instance]=True
        close[dishwasher_instance,box]=True
    

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the vegetables

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to be boiled

        fill_pot_with_water(pot, sink)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_box_2023_around_cupboard_130(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(vegetables: item, pot: item, stove: item):
    body:
        achieve_once inside(vegetables, pot)
        # Place vegetables inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be boiled

        fill_pot_with_water(pot, sink)
        boil_vegetables(vegetables, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the vegetables

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        fill_pot_with_water(pot, sink)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the vegetables

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to be boiled

        fill_pot_with_water(pot, sink)
        boil_vegetables(pot, stove, vegetables)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Boil some vegetables. Then cool them in a bowl.
Action History:
['walk_executor(kitchen_counter_132)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(kitchen_counter_132)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(kitchen_counter_128)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_vegetable_2072)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)']
Time info:
Time consume: 285 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 136
goal generate times: 10
goal correct times: 0
action_num: 23

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 5 steps
Keystate: k3 - Requires: 5 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
