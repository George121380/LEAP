From agent.py
Reset goals: The sub-goals are: 
['1. Fill the coffee maker with water and coffee grounds.', '2. Turn on the coffee maker to brew the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_1000_around_kitchen_counter_119(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_chair_194_around_nightstand_195(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==195
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(chair,nightstand_instance)
        else:
            exp(chair,nightstand_instance)
    eff:
        unknown[chair]=False
        close[chair,nightstand_instance]=True
        close[nightstand_instance,chair]=True
    

behavior find_coffee_filter_2053_around_kitchen_counter_119(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker(coffee_maker: item, water_source: item, coffee_grounds: item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the source
        achieve_once inside(coffee_grounds, coffee_maker)
        # Put the coffee grounds inside the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source, like a faucet

        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) and grabbable(coffee_grounds)
        # Select coffee grounds that are grabbable

        fill_coffee_maker(coffee_maker, water_source, coffee_grounds)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_coffee_maker(coffee_maker: item, water_source: item, coffee_grounds: item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the source
        achieve_once inside(coffee_grounds, coffee_maker)
        # Put the coffee grounds inside the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source, like a faucet

        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) and grabbable(coffee_grounds)
        # Select coffee grounds that are grabbable

        fill_coffee_maker(coffee_maker, water_source, coffee_grounds)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_food_2094, kitchen_counter_119)walk_executor(coffe_maker_130)open_executor(coffe_maker_130)walk_executor(food_food_2094)grab_executor(food_food_2094)walk_executor(coffe_maker_130)putin_executor(food_food_2094, coffe_maker_130)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_food_2094, kitchen_counter_119)
Fail to find food_food_2094 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_food_2094, fridge_126)walk_executor(coffe_maker_130)open_executor(coffe_maker_130)walk_executor(food_food_2094)grab_executor(food_food_2094)walk_executor(coffe_maker_130)putin_executor(food_food_2094, coffe_maker_130)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_food_2094, fridge_126)
Find food_food_2094. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)open_executor(coffe_maker_130)walk_executor(food_food_2094)grab_executor(food_food_2094)walk_executor(coffe_maker_130)putin_executor(food_food_2094, coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
open_executor(coffe_maker_130)
Robot find: coffee_filter_2065, Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is opened. 
##############################
From agent.py
walk_executor(food_food_2094)
Robot find: Robot is close to the food_food_2094. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_food_2094)
Robot find: Robot is close to the food_food_2094. Robot is close to the fridge_126. Grabbing food_food_2094 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the food_food_2094. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(food_food_2094, coffe_maker_130)
Robot find: Robot is close to the food_food_2094. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. food_food_2094 is inside coffe_maker_130. coffe_maker_130 is close food_food_2094. food_food_2094 is close coffe_maker_130. food_food_2094 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The coffee maker still needs to be filled with water. Fill the coffee maker with water from an appropriate water source, such as a faucet.
##############################
From agent.py
Human Instruction: The coffee maker still needs to be filled with water. Fill the coffee maker with water from an appropriate water source, such as a faucet.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_food_2094 around kitchen_counter_119.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_food_2094 around fridge_126.
Action 7: Walk to coffe_maker_130.
Action 8: Open coffe_maker_130.
Action 9: Walk to food_food_2094.
Action 10: Grab food_food_2094.
Action 11: Walk to coffe_maker_130.
Action 12: Put food_food_2094 into coffe_maker_130.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_water_and_grounds_in_coffee_maker(coffee_maker:item, faucet:item):
    body:
        achieve_once has_water(coffee_maker)
        achieve_once inside(food_food_2094, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Select the coffee maker with ID 130

        bind faucet: item where:
            is_faucet(faucet)
        # Select an appropriate faucet for filling water

        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) and id[coffee_grounds] == 2094
        # Select the coffee grounds instance

        fill_water_and_grounds_in_coffee_maker(coffee_maker, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_food_2094; available variables: [Variable<coffee_maker: item>, Variable<faucet: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_carrot_2015_around_pot_78(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_carrot,pot_instance)
        else:
            exp(food_carrot,pot_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,pot_instance]=True
        close[pot_instance,food_carrot]=True
    

behavior find_food_food_2046_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_coffee_filter_2065_around_cupboard_117(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation

behavior fill_water_and_grounds_in_coffee_maker(coffee_maker:item, faucet:item, coffee_grounds:item):
    body:
        achieve_once has_water(coffee_maker)
        achieve_once inside(coffee_grounds, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Select the coffee maker with ID 130

        bind faucet: item where:
            is_faucet(faucet)
        # Select an appropriate faucet for filling water

        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) and id[coffee_grounds] == 2094
        # Select the coffee grounds instance

        fill_water_and_grounds_in_coffee_maker(coffee_maker, faucet, coffee_grounds)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_pot_2138(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_carrot,pot_instance)
        else:
            exp(food_carrot,pot_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,pot_instance]=True
        close[pot_instance,food_carrot]=True
    

behavior find_coffee_filter_2065_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_food_coffee_maker(coffe_maker:item):
    # Function to check if there is food inside the coffee maker
    symbol has_food=exists o: item : (is_food_food(o) and inside(o, coffe_maker))
    return has_food

behavior fill_coffee_maker_with_water(coffe_maker:item, faucet:item):
    body:
        achieve_once has_water(coffe_maker)
        # Fill the coffee maker with water from the faucet

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select the coffee maker
        
        if not has_food_coffee_maker(coffe_maker):
            bind food: item where:
                is_food_food(food) and id[food] == 2094
            achieve_once inside(food, coffe_maker)

        bind faucet: item where:
            is_faucet(faucet)
        fill_coffee_maker_with_water(coffe_maker, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_pot_78(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_carrot,pot_instance)
        else:
            exp(food_carrot,pot_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,pot_instance]=True
        close[pot_instance,food_carrot]=True
    

behavior find_coffee_filter_2053_around_cupboard_117(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the faucet

behavior add_coffee_grounds_to_coffee_maker(coffee_maker: item, coffee_grounds: item):
    body:
        achieve_once inside(coffee_grounds, coffee_maker)
        # Add coffee grounds inside the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_coffee_maker_with_water(coffee_maker, faucet)

        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) and id[coffee_grounds] == 2094
        # Select the coffee grounds

        add_coffee_grounds_to_coffee_maker(coffee_maker, coffee_grounds)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the coffee maker.', '2. Place a coffee pod and a cup under the dispenser.', '3. Start the coffee-making process.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_coffee_maker(x:item):
    # Assume a function that can determine if a given item is a coffee maker
    return is_coffe_maker(x)

behavior __goal__():
    body:
        if exists coffee_maker: item : (is_coffee_maker(coffee_maker)):
            # If a coffee maker has been identified based on known information
            bind coffee_maker: item where:
                is_coffee_maker(coffee_maker)
            # Get closer to the coffee maker
            achieve close_char(char, coffee_maker)

        else:
            # If no coffee maker is found in known information, start searching
            foreach item: item:
                if is_coffe_maker(item) and not visited(item):
                    observe(item, "Check if its the coffee maker")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_coffee_filter_2065_around_cupboard_117(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_found():
    # Function to check if the coffee maker has been found
    symbol found=visited(coffe_maker_130)
    return found

behavior __goal__():
    body:
        if is_coffee_maker_found():
            # If we have already found the coffee maker based on known information
            bind coffe_maker: item where:
                is_coffe_maker(coffe_maker) and id[coffe_maker] == 130
            # Move closer to the coffee maker
            achieve close_char(char, coffe_maker)

        else:
            # If the coffee maker is not found yet, start exploring
            foreach coffe_maker: item:
                if is_coffe_maker(coffe_maker) and not visited(coffe_maker):
                    observe(coffe_maker, "Check the location of the coffee maker")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: coffe_maker_130; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_carrot_2015_around_dishwasher_129(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_carrot,dishwasher_instance)
        else:
            exp(food_carrot,dishwasher_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,dishwasher_instance]=True
        close[dishwasher_instance,food_carrot]=True
    

#goal_representation
 
def is_coffee_maker_found(coffee_maker: item):
    # Function to check if the coffee maker has been found
    symbol found=visited(coffee_maker)
    return found

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        
        if is_coffee_maker_found(coffee_maker):
            # If we have already found the coffee maker based on known information
            achieve close_char(char, coffee_maker)
            # Move closer to the coffee maker

        else:
            # If the coffee maker is not found yet, start exploring
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    observe(coffee_maker, "Check the location of the coffee maker")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_coffee_maker_found(coffee_maker: item):
    # Function to check if the coffee maker has been found
    symbol found=visited(coffee_maker)
    return found

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        
        if is_coffee_maker_found(coffee_maker):
            # If we have already found the coffee maker based on known information
            achieve close_char(char, coffee_maker)
            # Move closer to the coffee maker

        else:
            # If the coffee maker is not found yet, start exploring
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    observe(coffee_maker, "Check the location of the coffee maker")

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_130, Check the location of the coffee maker)
##############################
From agent.py
obs(coffe_maker_130, Check the location of the coffee maker)
Get this information:  coffe_maker_130 is inside dining_room_41. food_food_2094 is inside coffe_maker_130. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffe_maker_130 is close to food_food_2094. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is OFF. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN. coffe_maker_130 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2061_around_pot_78(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_orange,pot_instance)
        else:
            exp(food_orange,pot_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,pot_instance]=True
        close[pot_instance,food_orange]=True
    

behavior find_food_food_2021_around_toaster_132(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_food,toaster_instance)
        else:
            exp(food_food,toaster_instance)
    eff:
        unknown[food_food]=False
        close[food_food,toaster_instance]=True
        close[toaster_instance,food_food]=True
    

behavior find_cup_2133_around_sink_120(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_food_carrot_2086_around_sink_120(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_carrot,sink_instance)
        else:
            exp(food_carrot,sink_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,sink_instance]=True
        close[sink_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
behavior place_coffee_pod_and_cup(coffee_pod: item, cup: item, coffee_maker: item):
    body:
        achieve_once inside(coffee_pod, coffee_maker)
        # Place the coffee pod inside the coffee maker
        achieve_once on(cup, coffee_maker)
        # Place the cup below the dispenser of the coffee maker

behavior fill_coffee_maker_with_water(coffee_maker: item, water_source: item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the water source

behavior __goal__():
    body:
        bind coffee_pod: item where:
            is_food_food(coffee_pod)
        # Select the coffee pod

        bind cup: item where:
            is_cup(cup)
        # Select the cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and has_water(coffee_maker)
        # Select the coffee maker and ensure it has water

        bind water_source: item where:
            is_faucet(water_source)
        # Select a suitable water source

        fill_coffee_maker_with_water(coffee_maker, water_source)

        place_coffee_pod_and_cup(coffee_pod, cup, coffee_maker)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_stove_2135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_food,stove_instance)
        else:
            exp(food_food,stove_instance)
    eff:
        unknown[food_food]=False
        close[food_food,stove_instance]=True
        close[stove_instance,food_food]=True
    

behavior find_coffee_filter_2065_around_cupboard_117(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2049_around_kitchen_counter_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_food_carrot_2015_around_pot_78(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_carrot,pot_instance)
        else:
            exp(food_carrot,pot_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,pot_instance]=True
        close[pot_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def has_kitchen_area(item: item):
    # Function to check if the item is in the kitchen area
    symbol in_kitchen_area=exists kitchen: item : (is_kitchen_counter(kitchen) and close(item, kitchen))
    return in_kitchen_area

behavior place_coffee_pod_and_cup(coffee_pod: item, cup: item, dispenser: item):
    body:
        achieve_once on(coffee_pod, dispenser)
        achieve_once on(cup, dispenser)

behavior fill_coffee_maker_with_water(coffee_maker: item, water_source: item):
    body:
        # Ensure the coffee maker is filled with water
        achieve has_water(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind water_source: item where:
            is_faucet(water_source) and has_kitchen_area(water_source)
        # Select the faucet in the kitchen area to fill coffee maker with water

        fill_coffee_maker_with_water(coffee_maker, water_source)

        bind coffee_pod: item where:
            is_food_food(coffee_pod)
        # Select a coffee pod

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind dispenser: item where:
            is_kitchen_counter(dispenser) and close(coffee_maker, dispenser)
        # Select a location close to the coffee makers dispenser

        place_coffee_pod_and_cup(coffee_pod, cup, dispenser)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_kitchen_area(item: item):
    # Function to check if the item is in the kitchen area
    symbol in_kitchen_area=exists kitchen: item : (is_kitchen_counter(kitchen) and close(item, kitchen))
    return in_kitchen_area

behavior place_coffee_pod_and_cup(coffee_pod: item, cup: item, dispenser: item):
    body:
        achieve_once on(coffee_pod, dispenser)
        achieve_once on(cup, dispenser)

behavior fill_coffee_maker_with_water(coffee_maker: item, water_source: item):
    body:
        # Ensure the coffee maker is filled with water
        achieve has_water(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind water_source: item where:
            is_faucet(water_source) and has_kitchen_area(water_source)
        # Select the faucet in the kitchen area to fill coffee maker with water

        fill_coffee_maker_with_water(coffee_maker, water_source)

        bind coffee_pod: item where:
            is_food_food(coffee_pod)
        # Select a coffee pod

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind dispenser: item where:
            is_kitchen_counter(dispenser) and close(coffee_maker, dispenser)
        # Select a location close to the coffee makers dispenser

        place_coffee_pod_and_cup(coffee_pod, cup, dispenser)

##############################
From agent.py-> find a plan in act()
grab_executor(food_food_2094)put_executor(food_food_2094, kitchen_counter_122)walk_executor(kitchen_counter_123)exp(cup_2132, kitchen_counter_123)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(kitchen_counter_122)put_executor(cup_2132, kitchen_counter_122)
##############################
From agent.py
grab_executor(food_food_2094)
Robot find: Robot is close to the food_food_2094. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. Grabbing food_food_2094 by right hand. 
##############################
From agent.py
put_executor(food_food_2094, kitchen_counter_122)
Robot find: Robot is close to the food_food_2094. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. kitchen_counter_122 is close food_food_2094. food_food_2094 is close kitchen_counter_122. food_food_2094 is on kitchen_counter_122. food_food_2094 released by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_123)
Fail to find cup_2132 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(kitchen_counter_122)put_executor(cup_2132, kitchen_counter_122)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(cup_2132, cupboard_117)
Fail to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(kitchen_counter_122)put_executor(cup_2132, kitchen_counter_122)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Fail to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(nightstand_192)exp(cup_2132, nightstand_192)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(kitchen_counter_122)put_executor(cup_2132, kitchen_counter_122)
##############################
From agent.py
walk_executor(nightstand_192)
Robot find: pillow_208, drawing_201, Robot is close to the nightstand_192. 
##############################
From agent.py
exp(cup_2132, nightstand_192)
Fail to find cup_2132 around nightstand_192. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2035)exp(cup_2132, knife_2035)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(kitchen_counter_122)put_executor(cup_2132, kitchen_counter_122)
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: Head to dining_room_41. Locate table_114, which is the table in this room. cup_2132 is placed on top of table_114.
Re-decompose: None

##############################
From agent.py
Human Instruction: The coffee maker still needs to be filled with water. Fill the coffee maker with water from an appropriate water source, such as a faucet.
Head to dining_room_41. Locate table_114, which is the table in this room. cup_2132 is placed on top of table_114.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_food_2094 around kitchen_counter_119.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_food_2094 around fridge_126.
Action 7: Walk to coffe_maker_130.
Action 8: Open coffe_maker_130.
Action 9: Walk to food_food_2094.
Action 10: Grab food_food_2094.
Action 11: Walk to coffe_maker_130.
Action 12: Put food_food_2094 into coffe_maker_130.
Action 13: Observe around coffe_maker_130 with the question of Check the location of the coffee maker.
Action 14: Grab food_food_2094.
Action 15: Put food_food_2094 on kitchen_counter_122.
Action 16: Walk to kitchen_counter_123.
Action 17: look for cup_2132 around kitchen_counter_123.
Action 18: Walk to cupboard_117.
Action 19: look for cup_2132 around cupboard_117.
Action 20: Walk to cupboard_118.
Action 21: Open cupboard_118.
Action 22: look for cup_2132 around cupboard_118.
Action 23: Walk to nightstand_192.
Action 24: look for cup_2132 around nightstand_192.
Action 25: Walk to knife_2035.

##############################
From agent.py
exp(cup_2132, knife_2035)
Fail to find cup_2132 around knife_2035. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(kitchen_counter_122)put_executor(cup_2132, kitchen_counter_122)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(kitchen_counter_122)put_executor(cup_2132, kitchen_counter_122)
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
grab_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: Robot is close to the cup_2132. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(cup_2132, kitchen_counter_122)
Robot find: Robot is close to the cup_2132. Robot is close to the kitchen_counter_122. cup_2132 is close kitchen_counter_122. kitchen_counter_122 is close cup_2132. cup_2132 is on kitchen_counter_122. cup_2132 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have placed the cup on the kitchen counter (acting as a dispenser), but you should also place a coffee pod there to complete the sub-task.
##############################
From agent.py
Human Instruction: You have placed the cup on the kitchen counter (acting as a dispenser), but you should also place a coffee pod there to complete the sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_food_2094 around kitchen_counter_119.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_food_2094 around fridge_126.
Action 7: Walk to coffe_maker_130.
Action 8: Open coffe_maker_130.
Action 9: Walk to food_food_2094.
Action 10: Grab food_food_2094.
Action 11: Walk to coffe_maker_130.
Action 12: Put food_food_2094 into coffe_maker_130.
Action 13: Observe around coffe_maker_130 with the question of Check the location of the coffee maker.
Action 14: Grab food_food_2094.
Action 15: Put food_food_2094 on kitchen_counter_122.
Action 16: Walk to kitchen_counter_123.
Action 17: look for cup_2132 around kitchen_counter_123.
Action 18: Walk to cupboard_117.
Action 19: look for cup_2132 around cupboard_117.
Action 20: Walk to cupboard_118.
Action 21: Open cupboard_118.
Action 22: look for cup_2132 around cupboard_118.
Action 23: Walk to nightstand_192.
Action 24: look for cup_2132 around nightstand_192.
Action 25: Walk to knife_2035.
Action 26: look for cup_2132 around knife_2035.
Action 27: Walk to table_114.
Action 28: look for cup_2132 around table_114.
Action 29: Walk to cup_2132.
Action 30: Grab cup_2132.
Action 31: Walk to kitchen_counter_122.
Action 32: Put cup_2132 on kitchen_counter_122.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_microwave_135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_food,microwave_instance)
        else:
            exp(food_food,microwave_instance)
    eff:
        unknown[food_food]=False
        close[food_food,microwave_instance]=True
        close[microwave_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_coffee_pod_and_cup(coffee_pod: item, cup: item, dispenser: item):
    body:
        achieve_once on(coffee_pod, dispenser)
        achieve_once on(cup, dispenser)

behavior __goal__():
    body:
        bind coffee_pod: item where:
            is_food_food(coffee_pod) and id[coffee_pod] == 2094
        # Select food item identified as coffee pod

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup

        bind dispenser: item where:
            is_kitchen_counter(dispenser) and id[dispenser] == 122
        # Select the kitchen counter as dispenser

        place_coffee_pod_and_cup(coffee_pod, cup, dispenser)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_microwave_135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_food,microwave_instance)
        else:
            exp(food_food,microwave_instance)
    eff:
        unknown[food_food]=False
        close[food_food,microwave_instance]=True
        close[microwave_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_under_dispenser(coffee_pod: item, cup: item, dispenser: item):
    body:
        achieve_once on(coffee_pod, dispenser)
        achieve_once on(cup, dispenser)

behavior __goal__():
    body:
        bind coffee_pod: item where:
            is_food_food(coffee_pod) and id[coffee_pod] == 2094
        # Select the coffee pod with ID 2094

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup with ID 2132

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 122
        # Select the kitchen counter with ID 122 which acts as the dispenser

        place_items_under_dispenser(coffee_pod, cup, kitchen_counter)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_basket_for_clothes_2078(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_food_food_2064_around_stove_2135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_food,stove_instance)
        else:
            exp(food_food,stove_instance)
    eff:
        unknown[food_food]=False
        close[food_food,stove_instance]=True
        close[stove_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_coffee_pod_and_cup(coffee_pod: item, cup: item, kitchen_counter: item):
    body:
        achieve_once on(coffee_pod, kitchen_counter)
        achieve_once on(cup, kitchen_counter)

behavior __goal__():
    body:
        bind coffee_pod: item where:
            is_food_food(coffee_pod)
        # Select the coffee pod to place

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup to place

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 122
        # Select the kitchen counter (acting as a dispenser) to place items on

        place_coffee_pod_and_cup(coffee_pod, cup, kitchen_counter)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_stove_2135(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_food_food_2001_around_stove_2135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_food,stove_instance)
        else:
            exp(food_food,stove_instance)
    eff:
        unknown[food_food]=False
        close[food_food,stove_instance]=True
        close[stove_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
behavior place_coffee_pod_and_cup(coffee_pod: item, cup: item, dispenser: item):
    body:
        achieve_once on(coffee_pod, dispenser)
        achieve_once on(cup, dispenser)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind dispenser: item where:
            is_kitchen_counter(dispenser)
        # Select the dispenser which is the kitchen counter

        bind coffee_pod: item where:
            is_food_food(coffee_pod)
        # Select the coffee pod

        bind cup: item where:
            is_cup(cup)
        # Select the cup

        place_coffee_pod_and_cup(coffee_pod, cup, dispenser)
        # Place the coffee pod and the cup under the dispenser
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_pot_78(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_food,pot_instance)
        else:
            exp(food_food,pot_instance)
    eff:
        unknown[food_food]=False
        close[food_food,pot_instance]=True
        close[pot_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_coffee_pod_and_cup(pod:item, cup:item, dispenser:item):
    body:
        achieve_once on(pod, dispenser)
        achieve_once on(cup, dispenser)

behavior __goal__():
    body:
        bind coffee_pod: item where:
            is_food_food(coffee_pod) and id[coffee_pod] == 2094
        # Select the coffee pod that needs to be placed

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup that needs to be placed

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 122
        # Select the kitchen counter that acts as a dispenser

        place_coffee_pod_and_cup(coffee_pod, cup, kitchen_counter)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_stove_2135(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_food_orange_2103_around_faucet_121(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(food_orange,faucet_instance)
        else:
            exp(food_orange,faucet_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,faucet_instance]=True
        close[faucet_instance,food_orange]=True
    

behavior find_food_food_2021_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pod_and_cup(coffee_pod: item, cup: item, kitchen_counter: item):
    body:
        achieve_once on(coffee_pod, kitchen_counter)
        achieve_once on(cup, kitchen_counter)

behavior __goal__():
    body:
        bind coffee_pod: item where:
            is_food_food(coffee_pod)
        # Select a coffee pod to place

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup placed on the kitchen counter

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Assume the kitchen counter is used as the dispenser

        place_pod_and_cup(coffee_pod, cup, kitchen_counter)
 
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(coffe_maker_130)', 'open_executor(coffe_maker_130)', 'walk_executor(food_food_2094)', 'grab_executor(food_food_2094)', 'walk_executor(coffe_maker_130)', 'putin_executor(food_food_2094, coffe_maker_130)', 'grab_executor(food_food_2094)', 'put_executor(food_food_2094, kitchen_counter_122)', 'walk_executor(kitchen_counter_123)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(nightstand_192)', 'walk_executor(knife_2035)', 'walk_executor(table_114)', 'walk_executor(cup_2132)', 'grab_executor(cup_2132)', 'walk_executor(kitchen_counter_122)', 'put_executor(cup_2132, kitchen_counter_122)']
Time info:
Time consume: 414 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 75
goal generate times: 14
goal correct times: 1
action_num: 23

Task complete rate:
Keystate: k1 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
