From agent.py
Reset goals: The sub-goals are: 
['1. Find milk, cereal, and a cup.', '2. Pour milk into the cup.', '3. Heat the cup of milk.', '4. Add cereal to the heated milk.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2134_around_cupboard_117(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_food_cereal_2087_around_kitchen_counter_123(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_cereal_cup():
    # Function to check if milk, cereal, and a cup have already been found
    symbol found_milk=exists o: item : (is_milk(o) and visited(o))
    symbol found_cereal=exists o: item : (is_food_cereal(o) and visited(o))
    symbol found_cup=exists o: item : (is_cup(o) and visited(o))
    return found_milk and found_cereal and found_cup

behavior __goal__():
    body:
        if has_milk_cereal_cup():
            # If milk, cereal, and a cup have already been found
            bind milk: item where:
                is_milk(milk) and visited(milk)
            bind cereal: item where:
                is_food_cereal(cereal) and visited(cereal)
            bind cup: item where:
                is_cup(cup) and visited(cup)
            achieve close_char(char, milk)
            achieve close_char(char, cereal)
            achieve close_char(char, cup)

        else:
            # If milk, cereal, and a cup are not yet found, start exploring
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o) or is_cup(o)) and not visited(o):
                    observe(o, "Check the presence of milk, cereal, or a cup")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_milk_cereal_cup():
    # Function to check if milk, cereal, and a cup have already been found
    symbol found_milk=exists o: item : (is_milk(o) and visited(o))
    symbol found_cereal=exists o: item : (is_food_cereal(o) and visited(o))
    symbol found_cup=exists o: item : (is_cup(o) and visited(o))
    return found_milk and found_cereal and found_cup

behavior __goal__():
    body:
        if has_milk_cereal_cup():
            # If milk, cereal, and a cup have already been found
            bind milk: item where:
                is_milk(milk) and visited(milk)
            bind cereal: item where:
                is_food_cereal(cereal) and visited(cereal)
            bind cup: item where:
                is_cup(cup) and visited(cup)
            achieve close_char(char, milk)
            achieve close_char(char, cereal)
            achieve close_char(char, cup)

        else:
            # If milk, cereal, and a cup are not yet found, start exploring
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o) or is_cup(o)) and not visited(o):
                    observe(o, "Check the presence of milk, cereal, or a cup")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_cereal_2087, kitchen_counter_123)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Check the presence of milk, cereal, or a cup)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, Check the presence of milk, cereal, or a cup)walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)obs(cup_2132, Check the presence of milk, cereal, or a cup)walk_executor(cupboard_117)exp(cup_2133, cupboard_117)walk_executor(cup_2133)obs(cup_2133, Check the presence of milk, cereal, or a cup)walk_executor(cupboard_117)exp(cup_2134, cupboard_117)walk_executor(cup_2134)obs(cup_2134, Check the presence of milk, cereal, or a cup)walk_executor(cupboard_117)exp(cup_2049, cupboard_117)walk_executor(cup_2049)obs(cup_2049, Check the presence of milk, cereal, or a cup)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_cereal_2087, kitchen_counter_123)
Fail to find food_cereal_2087 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(food_cereal_2087, cupboard_117)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Check the presence of milk, cereal, or a cup)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, Check the presence of milk, cereal, or a cup)walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)obs(cup_2132, Check the presence of milk, cereal, or a cup)walk_executor(cupboard_117)exp(cup_2133, cupboard_117)walk_executor(cup_2133)obs(cup_2133, Check the presence of milk, cereal, or a cup)walk_executor(cupboard_117)exp(cup_2134, cupboard_117)walk_executor(cup_2134)obs(cup_2134, Check the presence of milk, cereal, or a cup)walk_executor(cupboard_117)exp(cup_2049, cupboard_117)walk_executor(cup_2049)obs(cup_2049, Check the presence of milk, cereal, or a cup)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(food_cereal_2087, cupboard_117)
Fail to find food_cereal_2087 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_cereal_2087, cupboard_118)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Check the presence of milk, cereal, or a cup)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, Check the presence of milk, cereal, or a cup)walk_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)obs(cup_2132, Check the presence of milk, cereal, or a cup)walk_executor(cupboard_118)exp(cup_2133, cupboard_118)walk_executor(cup_2133)obs(cup_2133, Check the presence of milk, cereal, or a cup)walk_executor(cupboard_118)exp(cup_2134, cupboard_118)walk_executor(cup_2134)obs(cup_2134, Check the presence of milk, cereal, or a cup)walk_executor(cupboard_118)exp(cup_2049, cupboard_118)walk_executor(cup_2049)obs(cup_2049, Check the presence of milk, cereal, or a cup)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(food_cereal_2087, cupboard_118)
Fail to find food_cereal_2087 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_cereal_2087, fridge_126)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Check the presence of milk, cereal, or a cup)walk_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, Check the presence of milk, cereal, or a cup)walk_executor(kitchen_counter_122)exp(cup_2132, kitchen_counter_122)walk_executor(cup_2132)obs(cup_2132, Check the presence of milk, cereal, or a cup)walk_executor(kitchen_counter_122)exp(cup_2133, kitchen_counter_122)walk_executor(cup_2133)obs(cup_2133, Check the presence of milk, cereal, or a cup)walk_executor(kitchen_counter_122)exp(cup_2134, kitchen_counter_122)walk_executor(cup_2134)obs(cup_2134, Check the presence of milk, cereal, or a cup)walk_executor(kitchen_counter_122)exp(cup_2049, kitchen_counter_122)walk_executor(cup_2049)obs(cup_2049, Check the presence of milk, cereal, or a cup)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_cereal_2087, fridge_126)
Find food_cereal_2087. 
##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Check the presence of milk, cereal, or a cup)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, Check the presence of milk, cereal, or a cup)walk_executor(kitchen_counter_122)exp(cup_2132, kitchen_counter_122)walk_executor(cup_2132)obs(cup_2132, Check the presence of milk, cereal, or a cup)walk_executor(kitchen_counter_122)exp(cup_2133, kitchen_counter_122)walk_executor(cup_2133)obs(cup_2133, Check the presence of milk, cereal, or a cup)walk_executor(kitchen_counter_122)exp(cup_2134, kitchen_counter_122)walk_executor(cup_2134)obs(cup_2134, Check the presence of milk, cereal, or a cup)walk_executor(kitchen_counter_122)exp(cup_2049, kitchen_counter_122)walk_executor(cup_2049)obs(cup_2049, Check the presence of milk, cereal, or a cup)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_122(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_milk_2115_around_bookshelf_275(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior locate_milk_cereal_and_cup(milk:item, cereal:item, cup:item):
    body:
        achieve close_char(char, milk)
        achieve close_char(char, cereal)
        achieve close_char(char, cup)

behavior __goal__():
    body:
        if not visited(item):
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    observe(milk, "Check if this is milk")
            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Check if this is cereal")
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check if this is a cup")
        
        bind milk: item where:
            is_milk(milk) and visited(milk)

        bind cereal: item where:
            is_food_cereal(cereal) and visited(cereal)

        bind cup: item where:
            is_cup(cup) and visited(cup)

        locate_milk_cereal_and_cup(milk, cereal, cup)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: item; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2132_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_122(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_milk_2115_around_bookshelf_275(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#goal_representation
def has_milk_cereal_or_cup():
    # Function to check if milk, cereal, or cup are already identified in previously visited areas
    symbol available=exists o: item : ((is_milk(o) or is_food_cereal(o) or is_cup(o)) and visited(o))
    return available

behavior __goal__():
    body:
        if has_milk_cereal_or_cup():
            # If we have already found milk, cereal, or cup based on known information
            bind item: item where:
                (is_milk(item) or is_food_cereal(item) or is_cup(item)) and visited(item)
            # Move closer to the found item
            achieve close_char(char, item)

        else:
            # If no milk, cereal, or cup is found in the visited areas, start exploring
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o) or is_cup(o)) and not visited(o):
                    observe(o, "Check if it is milk, cereal, or cup")
#goal_representation_end

##############################
From agent.py->reset_sub_goal
def has_milk_cereal_or_cup():
    # Function to check if milk, cereal, or cup are already identified in previously visited areas
    symbol available=exists o: item : ((is_milk(o) or is_food_cereal(o) or is_cup(o)) and visited(o))
    return available

behavior __goal__():
    body:
        if has_milk_cereal_or_cup():
            # If we have already found milk, cereal, or cup based on known information
            bind item: item where:
                (is_milk(item) or is_food_cereal(item) or is_cup(item)) and visited(item)
            # Move closer to the found item
            achieve close_char(char, item)

        else:
            # If no milk, cereal, or cup is found in the visited areas, start exploring
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o) or is_cup(o)) and not visited(o):
                    observe(o, "Check if it is milk, cereal, or cup")
##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Check if it is milk, cereal, or cup)walk_executor(bookshelf_275)exp(milk_2115, bookshelf_275)walk_executor(milk_2115)obs(milk_2115, Check if it is milk, cereal, or cup)walk_executor(kitchen_counter_122)exp(cup_2132, kitchen_counter_122)walk_executor(cup_2132)obs(cup_2132, Check if it is milk, cereal, or cup)walk_executor(kitchen_counter_122)exp(cup_2133, kitchen_counter_122)walk_executor(cup_2133)obs(cup_2133, Check if it is milk, cereal, or cup)walk_executor(kitchen_counter_122)exp(cup_2134, kitchen_counter_122)walk_executor(cup_2134)obs(cup_2134, Check if it is milk, cereal, or cup)walk_executor(kitchen_counter_122)exp(cup_2049, kitchen_counter_122)walk_executor(cup_2049)obs(cup_2049, Check if it is milk, cereal, or cup)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2133_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2115_around_bookshelf_275(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_cereal_and_cup_nearby():
    # Function to check if milk, cereal, and cup have been found and are close by
    symbol available=exists o: item : ((is_milk(o) or is_food_cereal(o) or is_cup(o)) and visited(o))
    return available

behavior find_milk_cereal_and_cup():
    body:
        foreach o: item:
            if (is_milk(o) or is_food_cereal(o) or is_cup(o)) and not visited(o):
                observe(o, "Check the location of milk, cereal, and cup")

behavior __goal__():
    body:
        if has_milk_cereal_and_cup_nearby():
            # If milk, cereal, and cup have been found based on available information
            bind milk: item where:
                is_milk(milk) and visited(milk)
            # Select the milk

            bind cereal: item where:
                is_food_cereal(cereal) and visited(cereal)
            # Select the cereal
            
            bind cup: item where:
                is_cup(cup) and visited(cup)
            # Select the cup

        else:
            find_milk_cereal_and_cup()

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_milk_cereal_and_cup_nearby():
    # Function to check if milk, cereal, and cup have been found and are close by
    symbol available=exists o: item : ((is_milk(o) or is_food_cereal(o) or is_cup(o)) and visited(o))
    return available

behavior find_milk_cereal_and_cup():
    body:
        foreach o: item:
            if (is_milk(o) or is_food_cereal(o) or is_cup(o)) and not visited(o):
                observe(o, "Check the location of milk, cereal, and cup")

behavior __goal__():
    body:
        if has_milk_cereal_and_cup_nearby():
            # If milk, cereal, and cup have been found based on available information
            bind milk: item where:
                is_milk(milk) and visited(milk)
            # Select the milk

            bind cereal: item where:
                is_food_cereal(cereal) and visited(cereal)
            # Select the cereal
            
            bind cup: item where:
                is_cup(cup) and visited(cup)
            # Select the cup

        else:
            find_milk_cereal_and_cup()

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Check the location of milk, cereal, and cup)walk_executor(bookshelf_275)exp(milk_2115, bookshelf_275)walk_executor(milk_2115)obs(milk_2115, Check the location of milk, cereal, and cup)walk_executor(kitchen_counter_122)exp(cup_2132, kitchen_counter_122)walk_executor(cup_2132)obs(cup_2132, Check the location of milk, cereal, and cup)walk_executor(kitchen_counter_122)exp(cup_2133, kitchen_counter_122)walk_executor(cup_2133)obs(cup_2133, Check the location of milk, cereal, and cup)walk_executor(kitchen_counter_122)exp(cup_2134, kitchen_counter_122)walk_executor(cup_2134)obs(cup_2134, Check the location of milk, cereal, and cup)walk_executor(kitchen_counter_122)exp(cup_2049, kitchen_counter_122)walk_executor(cup_2049)obs(cup_2049, Check the location of milk, cereal, and cup)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2134_around_table_114(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_122(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_milk_2115_around_bookshelf_275(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def find_milk_cereal_and_cup():
    # Function to check if milk, cereal, and a cup are found
    symbol found_milk=exists o: item : (is_milk(o))
    symbol found_cereal=exists o: item : (is_food_cereal(o))
    symbol found_cup=exists o: item : (is_cup(o))
    return found_milk and found_cereal and found_cup

behavior __goal__():
    body:
        if find_milk_cereal_and_cup():
            # If all items are found based on known information
            bind milk: item where:
                is_milk(milk)
            bind cereal: item where:
                is_food_cereal(cereal)
            bind cup: item where:
                is_cup(cup)
            achieve close_char(char, milk)
            achieve close_char(char, cereal)
            achieve close_char(char, cup)
        else:
            # If any item not found, begin exploration
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o) or is_cup(o)) and not visited(o):
                    observe(o, "Check if it is milk, cereal, or a cup")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2134_around_table_114(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_milk_2115_around_bookshelf_275(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_dairy_or_cereal_or_cup(item:item):
    # Function to check if an item is milk, cereal, or a cup
    return is_milk(item) or is_food_cereal(item) or is_cup(item)

behavior __goal__():
    body:
        if exists item: item : (is_dairy_or_cereal_or_cup(item) and visited(item)):
            # Check if any of the needed items (milk, cereal, or cup) have already been found
            bind item: item where:
                is_dairy_or_cereal_or_cup(item) and visited(item)
            # Move the character closer to the found item
            achieve close_char(char, item)
        
        else:
            # If no item is found, initiate exploration
            foreach item: item:
                if is_dairy_or_cereal_or_cup(item) and not visited(item):
                    observe(item, "Check for milk, cereal, or a cup")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_dairy_or_cereal_or_cup(item:item):
    # Function to check if an item is milk, cereal, or a cup
    return is_milk(item) or is_food_cereal(item) or is_cup(item)

behavior __goal__():
    body:
        if exists item: item : (is_dairy_or_cereal_or_cup(item) and visited(item)):
            # Check if any of the needed items (milk, cereal, or cup) have already been found
            bind item: item where:
                is_dairy_or_cereal_or_cup(item) and visited(item)
            # Move the character closer to the found item
            achieve close_char(char, item)
        
        else:
            # If no item is found, initiate exploration
            foreach item: item:
                if is_dairy_or_cereal_or_cup(item) and not visited(item):
                    observe(item, "Check for milk, cereal, or a cup")

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Check for milk, cereal, or a cup)walk_executor(bookshelf_275)exp(milk_2115, bookshelf_275)walk_executor(milk_2115)obs(milk_2115, Check for milk, cereal, or a cup)walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)obs(cup_2132, Check for milk, cereal, or a cup)walk_executor(table_114)exp(cup_2133, table_114)walk_executor(cup_2133)obs(cup_2133, Check for milk, cereal, or a cup)walk_executor(table_114)exp(cup_2134, table_114)walk_executor(cup_2134)obs(cup_2134, Check for milk, cereal, or a cup)walk_executor(table_114)exp(cup_2049, table_114)walk_executor(cup_2049)obs(cup_2049, Check for milk, cereal, or a cup)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2115_around_bookshelf_275(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_found_essentials():
    # Function to check if milk, cereal, and a cup have been identified
    symbol has_found=exists o: item : (is_milk(o) or is_food_cereal(o) or is_cup(o)) and visited(o)
    return has_found

behavior __goal__():
    body:
        if has_found_essentials():
            # If milk, cereal, and a cup are identified based on known information
            foreach essential: item:
                if (is_milk(essential) or is_food_cereal(essential) or is_cup(essential)) and visited(essential):
                    achieve close_char(char, essential)
                    # Approach each identified item

        else:
            # If essentials are not yet identified, begin exploration
            foreach essential: item:
                if (is_milk(essential) or is_food_cereal(essential) or is_cup(essential)) and not visited(essential):
                    observe(essential, "Locate the milk, cereal, or cup")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_found_essentials():
    # Function to check if milk, cereal, and a cup have been identified
    symbol has_found=exists o: item : (is_milk(o) or is_food_cereal(o) or is_cup(o)) and visited(o)
    return has_found

behavior __goal__():
    body:
        if has_found_essentials():
            # If milk, cereal, and a cup are identified based on known information
            foreach essential: item:
                if (is_milk(essential) or is_food_cereal(essential) or is_cup(essential)) and visited(essential):
                    achieve close_char(char, essential)
                    # Approach each identified item

        else:
            # If essentials are not yet identified, begin exploration
            foreach essential: item:
                if (is_milk(essential) or is_food_cereal(essential) or is_cup(essential)) and not visited(essential):
                    observe(essential, "Locate the milk, cereal, or cup")

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Locate the milk, cereal, or cup)walk_executor(bookshelf_275)exp(milk_2115, bookshelf_275)walk_executor(milk_2115)obs(milk_2115, Locate the milk, cereal, or cup)walk_executor(kitchen_counter_122)exp(cup_2132, kitchen_counter_122)walk_executor(cup_2132)obs(cup_2132, Locate the milk, cereal, or cup)walk_executor(kitchen_counter_122)exp(cup_2133, kitchen_counter_122)walk_executor(cup_2133)obs(cup_2133, Locate the milk, cereal, or cup)walk_executor(kitchen_counter_122)exp(cup_2134, kitchen_counter_122)walk_executor(cup_2134)obs(cup_2134, Locate the milk, cereal, or cup)walk_executor(kitchen_counter_122)exp(cup_2049, kitchen_counter_122)walk_executor(cup_2049)obs(cup_2049, Locate the milk, cereal, or cup)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2134_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_bowl_2140_around_table_114(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_milk_2115_around_bookshelf_275(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior retrieve_milk_and_cereal(milk:item, cereal:item, cup:item):
    body:
        achieve close_char(char, cereal)
        # Move to the location where the cereal is located
        achieve close_char(char, milk)
        # Move to the location where the milk is located
        achieve close_char(char, cup)
        # Move to the location where the cup is located

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        bind cup: item where:
            is_cup(cup)
        # Select the cup item

        retrieve_milk_and_cereal(milk, cereal, cup)
        # Retrieve milk, cereal, and cup by moving close to them
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_bookshelf_275(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

behavior find_cup_2134_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior find_items(milk: item, cereal: item, cup: item):
    body:
        achieve close_char(char, milk)
        achieve close_char(char, cereal)
        achieve close_char(char, cup)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        bind cup: item where:
            is_cup(cup)
        # Select the cup

        find_items(milk, cereal, cup)
        # Ensure the character is close to milk, cereal, and the cup
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2134_around_sink_19(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_122(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_milk_2115_around_tray_2068(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(milk,tray_instance)
        else:
            exp(milk,tray_instance)
    eff:
        unknown[milk]=False
        close[milk,tray_instance]=True
        close[tray_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_cereal_cup():
    # Function to check if milk, cereal, and a cup have been identified
    symbol available=exists o: item : ((is_milk(o) or is_food_cereal(o) or is_cup(o)) and visited(o))
    return available

behavior __goal__():
    body:
        if has_milk_cereal_cup():
            # If we have already found milk, cereal, or a cup based on known information
            bind item: item where:
                (is_milk(item) or is_food_cereal(item) or is_cup(item)) and visited(item)
            # Move closer to the found item
            achieve close_char(char, item)

        else:
            # If no milk, cereal, or cup is found in the visited areas, start exploring
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o) or is_cup(o)) and not visited(o):
                    observe(o, "Check the location of milk, cereal, or a cup")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_milk_cereal_cup():
    # Function to check if milk, cereal, and a cup have been identified
    symbol available=exists o: item : ((is_milk(o) or is_food_cereal(o) or is_cup(o)) and visited(o))
    return available

behavior __goal__():
    body:
        if has_milk_cereal_cup():
            # If we have already found milk, cereal, or a cup based on known information
            bind item: item where:
                (is_milk(item) or is_food_cereal(item) or is_cup(item)) and visited(item)
            # Move closer to the found item
            achieve close_char(char, item)

        else:
            # If no milk, cereal, or cup is found in the visited areas, start exploring
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o) or is_cup(o)) and not visited(o):
                    observe(o, "Check the location of milk, cereal, or a cup")

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Check the location of milk, cereal, or a cup)walk_executor(tray_2068)exp(milk_2115, tray_2068)walk_executor(milk_2115)obs(milk_2115, Check the location of milk, cereal, or a cup)walk_executor(sink_19)exp(cup_2132, sink_19)walk_executor(cup_2132)obs(cup_2132, Check the location of milk, cereal, or a cup)walk_executor(sink_19)exp(cup_2133, sink_19)walk_executor(cup_2133)obs(cup_2133, Check the location of milk, cereal, or a cup)walk_executor(sink_19)exp(cup_2134, sink_19)walk_executor(cup_2134)obs(cup_2134, Check the location of milk, cereal, or a cup)walk_executor(sink_19)exp(cup_2049, sink_19)walk_executor(cup_2049)obs(cup_2049, Check the location of milk, cereal, or a cup)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_122(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_milk_2115_around_bookshelf_275(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_cereal_cup():
    # Function to check if milk, cereal, and a cup are identified in previously visited areas
    symbol available=exists o1: item : (is_milk(o1) and visited(o1)) and exists o2: item : (is_food_cereal(o2) and visited(o2)) and exists o3: item : (is_cup(o3) and visited(o3))
    return available

behavior __goal__():
    body:
        if has_milk_cereal_cup():
            # If milk, cereal, and a cup have already been found based on known information
            bind milk: item where:
                is_milk(milk) and visited(milk)
            bind cereal: item where:
                is_food_cereal(cereal) and visited(cereal)
            bind cup: item where:
                is_cup(cup) and visited(cup)
            # Move closer to the identified items
            achieve close_char(char, milk)
            achieve close_char(char, cereal)
            achieve close_char(char, cup)

        else:
            # If milk, cereal, or a cup are not found in the visited areas, start exploring
            foreach o: item:
                if is_milk(o) and not visited(o):
                    observe(o, "Check the location of the milk")
                if is_food_cereal(o) and not visited(o):
                    observe(o, "Check the location of the cereal")
                if is_cup(o) and not visited(o):
                    observe(o, "Check the location of the cup")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o2') at line 5408, column 81.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2133_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_measuring_cup_2012_around_sink_19(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(measuring_cup,sink_instance)
        else:
            exp(measuring_cup,sink_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,sink_instance]=True
        close[sink_instance,measuring_cup]=True
    

behavior find_milk_2115_around_tray_2068(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(milk,tray_instance)
        else:
            exp(milk,tray_instance)
    eff:
        unknown[milk]=False
        close[milk,tray_instance]=True
        close[tray_instance,milk]=True
    

#goal_representation
 
def has_milk_cereal_cup():
    # Function to check if milk, cereal, and a cup are identified in previously visited areas
    symbol available=exists o1: item : (is_milk(o1) and visited(o1)) and exists o2: item : (is_food_cereal(o2) and visited(o2)) and exists o3: item : (is_cup(o3) and visited(o3))
    return available

behavior __goal__():
    body:
        if has_milk_cereal_cup():
            # If milk, cereal, and a cup have already been found based on known information
            bind milk: item where:
                is_milk(milk) and visited(milk)
            bind cereal: item where:
                is_food_cereal(cereal) and visited(cereal)
            bind cup: item where:
                is_cup(cup) and visited(cup)
            # Move closer to the identified items
            achieve close_char(char, milk)
            achieve close_char(char, cereal)
            achieve close_char(char, cup)

        else:
            # If milk, cereal, or a cup are not found in the visited areas, start exploring
            foreach o: item:
                if is_milk(o) and not visited(o):
                    observe(o, "Check the location of the milk")
                if is_food_cereal(o) and not visited(o):
                    observe(o, "Check the location of the cereal")
                if is_cup(o) and not visited(o):
                    observe(o, "Check the location of the cup")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o2') at line 5408, column 81.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2132_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2115_around_bookshelf_275(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#goal_representation
 
def has_milk_cereal_cup():
    # Function to check if milk, cereal, and a cup are identified in previously visited areas
    symbol available=exists o1: item : (is_milk(o1) and visited(o1)) and exists o: item : (is_food_cereal(o) and visited(o)) and exists o3: item : (is_cup(o3) and visited(o3))
    return available

behavior __goal__():
    body:
        if has_milk_cereal_cup():
            # If milk, cereal, and a cup have already been found based on known information
            bind milk: item where:
                is_milk(milk) and visited(milk)
            bind cereal: item where:
                is_food_cereal(cereal) and visited(cereal)
            bind cup: item where:
                is_cup(cup) and visited(cup)
            # Move closer to the identified items
            achieve close_char(char, milk)
            achieve close_char(char, cereal)
            achieve close_char(char, cup)

        else:
            # If milk, cereal, or a cup are not found in the visited areas, start exploring
            foreach o: item:
                if is_milk(o) and not visited(o):
                    observe(o, "Check the location of the milk")
                if is_food_cereal(o) and not visited(o):
                    observe(o, "Check the location of the cereal")
                if is_cup(o) and not visited(o):
                    observe(o, "Check the location of the cup")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2133_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2115_around_tray_2068(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(milk,tray_instance)
        else:
            exp(milk,tray_instance)
    eff:
        unknown[milk]=False
        close[milk,tray_instance]=True
        close[tray_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_items(milk:item, cereal:item, cup:item):
    body:
        achieve close_char(char, milk)
        achieve close_char(char, cereal)
        achieve close_char(char, cup)

behavior __goal__():
    body:
        if exists milk: item : (is_milk(milk) and visited(milk)):
            bind milk: item where:
                is_milk(milk) and visited(milk)
        else:
            foreach milk: item:
                if is_milk(milk):
                    observe(milk, "Find the milk")

        if exists cereal: item : (is_food_cereal(cereal) and visited(cereal)):
            bind cereal: item where:
                is_food_cereal(cereal) and visited(cereal)
        else:
            foreach cereal: item:
                if is_food_cereal(cereal):
                    observe(cereal, "Find the cereal")

        if exists cup: item : (is_cup(cup) and visited(cup)):
            bind cup: item where:
                is_cup(cup) and visited(cup)
        else:
            foreach cup: item:
                if is_cup(cup):
                    observe(cup, "Find the cup")
                    
        find_items(milk, cereal, cup)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: milk; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2115_around_bookshelf_275(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

behavior find_cup_2132_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation
 
behavior find_items(milk:item, cereal:item, cup:item):
    body:
        achieve close_char(char, milk)
        achieve close_char(char, cereal)
        achieve close_char(char, cup)

behavior __goal__():
    body:
        if exists milk: item : (is_milk(milk) and visited(milk)):
            bind milk: item where:
                is_milk(milk) and visited(milk)
        else:
            foreach milk: item:
                if is_milk(milk):
                    observe(milk, "Find the milk")

        if exists cereal: item : (is_food_cereal(cereal) and visited(cereal)):
            bind cereal: item where:
                is_food_cereal(cereal) and visited(cereal)
        else:
            foreach cereal: item:
                if is_food_cereal(cereal):
                    observe(cereal, "Find the cereal")

        if exists cup: item : (is_cup(cup) and visited(cup)):
            bind cup: item where:
                is_cup(cup) and visited(cup)
        else:
            foreach cup: item:
                if is_cup(cup):
                    observe(cup, "Find the cup")
                    
        find_items(milk, cereal, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: milk; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2132_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2115_around_tray_2068(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(milk,tray_instance)
        else:
            exp(milk,tray_instance)
    eff:
        unknown[milk]=False
        close[milk,tray_instance]=True
        close[tray_instance,milk]=True
    

#goal_representation
behavior find_items(milk:item, cereal:item, cup:item):
    body:
        achieve close_char(char, milk)
        achieve close_char(char, cereal)
        achieve close_char(char, cup)

behavior __goal__():
    body:
        if exists milk: item : (is_milk(milk) and visited(milk)):
            bind milk: item where:
                is_milk(milk) and visited(milk)
        else:
            foreach milk: item:
                if is_milk(milk):
                    observe(milk, "Find the milk")

        if exists cereal: item : (is_food_cereal(cereal) and visited(cereal)):
            bind cereal: item where:
                is_food_cereal(cereal) and visited(cereal)
        else:
            foreach cereal: item:
                if is_food_cereal(cereal):
                    observe(cereal, "Find the cereal")

        if exists cup: item : (is_cup(cup) and visited(cup)):
            bind cup: item where:
                is_cup(cup) and visited(cup)
        else:
            foreach cup: item:
                if is_cup(cup):
                    observe(cup, "Find the cup")
                    
        find_items(milk, cereal, cup)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_122(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_milk_2115_around_tray_2068(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(milk,tray_instance)
        else:
            exp(milk,tray_instance)
    eff:
        unknown[milk]=False
        close[milk,tray_instance]=True
        close[tray_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior find_milk_cereal_and_cup(milk: item, cereal: item, cup: item):
    body:
        achieve close_char(char, milk)
        achieve close_char(char, cereal)
        achieve close_char(char, cup)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                observe(milk, "Check if this is the milk")

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                observe(cereal, "Check if this is the cereal")
                    
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                observe(cup, "Check if this is a cup")

        find_milk_cereal_and_cup(milk, cereal, cup)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: milk; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2133_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_122(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_milk_2115_around_tray_2068(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(milk,tray_instance)
        else:
            exp(milk,tray_instance)
    eff:
        unknown[milk]=False
        close[milk,tray_instance]=True
        close[tray_instance,milk]=True
    

#goal_representation
behavior find_milk_cereal_and_cup(milk: item, cereal: item, cup: item):
    body:
        achieve close_char(char, milk)
        achieve close_char(char, cereal)
        achieve close_char(char, cup)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                observe(milk, "Check if this is the milk")

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                observe(cereal, "Check if this is the cereal")
                    
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                observe(cup, "Check if this is a cup")

        bind milk: item where:
            is_milk(milk) and visited(milk)

        bind cereal: item where:
            is_food_cereal(cereal) and visited(cereal)

        bind cup: item where:
            is_cup(cup) and visited(cup)

        find_milk_cereal_and_cup(milk, cereal, cup)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Heat the milk until it is hot.', '2. Pour the hot milk into a cup and add cereal.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2134_around_sink_19(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_milk_2115_around_microwave_135(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(milk,microwave_instance)
        else:
            exp(milk,microwave_instance)
    eff:
        unknown[milk]=False
        close[milk,microwave_instance]=True
        close[microwave_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_hot(milk: item):
    # Function to check if the milk is hot
    symbol milk_is_hot = exists o: item : (is_milk(o) and inside(o, microwave) and is_on(microwave))
    return milk_is_hot

behavior heat_milk_in_microwave(milk: item, cup: item, microwave: item):
    body:
        achieve_once inside(milk, cup) # Pour milk into the cup
        achieve_once inside(cup, microwave) # Place the cup in the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave to heat the milk

        if not is_milk_hot(milk):
            heat_milk_in_microwave(milk, cup, microwave)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: microwave; available variables: [Variable<milk: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2049_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2115_around_tray_2068(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(milk,tray_instance)
        else:
            exp(milk,tray_instance)
    eff:
        unknown[milk]=False
        close[milk,tray_instance]=True
        close[tray_instance,milk]=True
    

#goal_representation
 
def is_milk_hot(milk: item, microwave: item):
    # Function to check if the milk is hot
    symbol milk_is_hot = exists o: item : (is_milk(o) and inside(o, microwave) and is_on(microwave))
    return milk_is_hot

behavior heat_milk_in_microwave(milk: item, cup: item, microwave: item):
    body:
        achieve_once inside(milk, cup) # Pour milk into the cup
        achieve_once inside(cup, microwave) # Place the cup in the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave to heat the milk

        if not is_milk_hot(milk, microwave):
            heat_milk_in_microwave(milk, cup, microwave)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_milk_hot(milk: item, microwave: item):
    # Function to check if the milk is hot
    symbol milk_is_hot = exists o: item : (is_milk(o) and inside(o, microwave) and is_on(microwave))
    return milk_is_hot

behavior heat_milk_in_microwave(milk: item, cup: item, microwave: item):
    body:
        achieve_once inside(milk, cup) # Pour milk into the cup
        achieve_once inside(cup, microwave) # Place the cup in the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave to heat the milk

        if not is_milk_hot(milk, microwave):
            heat_milk_in_microwave(milk, cup, microwave)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(cup_2132, kitchen_counter_122)walk_executor(tray_2068)exp(milk_2115, tray_2068)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(microwave_135)putin_executor(cup_2132, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_122)
Fail to find cup_2132 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(bookshelf_275)exp(milk_2115, bookshelf_275)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(microwave_135)putin_executor(cup_2132, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(microwave_135)putin_executor(cup_2132, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Robot is close to the cup_2132. 
##############################
From agent.py
putin_executor(milk_2115, cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Robot is close to the cup_2132. milk_2115 is close cup_2132. cup_2132 is close milk_2115. milk_2115 is inside cup_2132. milk_2115 released by right hand. 
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
grab_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the cup_2132. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
putin_executor(cup_2132, microwave_135)
Robot find: Robot is close to the cup_2132. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. cup_2132 is inside microwave_135. microwave_135 is close cup_2132. cup_2132 is close microwave_135. cup_2132 released by right hand. 
##############################
From agent.py
close_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is closed. 
##############################
From agent.py
switchon_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2141_around_oven_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(bowl,oven_instance)
        else:
            exp(bowl,oven_instance)
    eff:
        unknown[bowl]=False
        close[bowl,oven_instance]=True
        close[oven_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_hot_milk_into_cup_and_add_cereal(milk: item, cup: item, cereal: item):
    body:
        achieve_once inside(milk, cup)
        # Pour hot milk into the cup
        achieve_once inside(cereal, cup)
        # Add cereal to the cup

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the milk that has been heated

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup to hold the milk and cereal

        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2087
        # Select the cereal to add to the milk in the cup

        pour_hot_milk_into_cup_and_add_cereal(milk, cup, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_hot_milk_into_cup_and_add_cereal(milk: item, cup: item, cereal: item):
    body:
        achieve_once inside(milk, cup)
        # Pour hot milk into the cup
        achieve_once inside(cereal, cup)
        # Add cereal to the cup

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the milk that has been heated

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup to hold the milk and cereal

        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2087
        # Select the cereal to add to the milk in the cup

        pour_hot_milk_into_cup_and_add_cereal(milk, cup, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(food_cereal_2087)grab_executor(food_cereal_2087)walk_executor(cup_2132)putin_executor(food_cereal_2087, cup_2132)
##############################
From agent.py
walk_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. 
##############################
From agent.py
grab_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. Grabbing food_cereal_2087 by right hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the food_cereal_2087. Robot is close to the microwave_135. 
##############################
From agent.py
putin_executor(food_cereal_2087, cup_2132)
Robot find: Robot is close to the food_cereal_2087. Robot is close to the microwave_135. food_cereal_2087 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'walk_executor(kitchen_counter_122)', 'walk_executor(table_114)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(cup_2132)', 'putin_executor(milk_2115, cup_2132)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(cup_2132)', 'grab_executor(cup_2132)', 'walk_executor(microwave_135)', 'putin_executor(cup_2132, microwave_135)', 'close_executor(microwave_135)', 'switchon_executor(microwave_135)', 'walk_executor(food_cereal_2087)', 'grab_executor(food_cereal_2087)', 'walk_executor(cup_2132)', 'putin_executor(food_cereal_2087, cup_2132)']
Time info:
Time consume: 569 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 100
goal generate times: 14
goal correct times: 3
action_num: 31

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
