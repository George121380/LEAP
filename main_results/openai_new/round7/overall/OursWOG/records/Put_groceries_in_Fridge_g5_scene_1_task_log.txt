From agent.py
Reset goals: The sub-goals are: 
['1. Find a table in the dining room and place the milk and eggs on it.', '2. Take all the items in the fridge and throw them in the trashcan.', '3. Return the milk and eggs to the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_egg_2092_around_kitchen_counter_123(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(item1: item, item2: item, table: item):
    body:
        achieve_once on(item1, table)
        achieve_once on(item2, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind egg: item where:
            is_food_egg(egg)

        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        place_items_on_table(milk, egg, table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_items_on_table(item1: item, item2: item, table: item):
    body:
        achieve_once on(item1, table)
        achieve_once on(item2, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind egg: item where:
            is_food_egg(egg)

        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        place_items_on_table(milk, egg, table)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(kitchen_counter_123)exp(food_egg_2092, kitchen_counter_123)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(milk_2115, fridge_126)
Fail to find milk_2115 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_food_1000)exp(milk_2115, food_food_1000)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(food_food_1000)
Robot find: Robot is close to the food_food_1000. 
##############################
From agent.py
exp(milk_2115, food_food_1000)
Fail to find milk_2115 around food_food_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(milk_2115, kitchen_counter_123)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_123)
Fail to find milk_2115 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(milk_2115, kitchen_counter_122)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_122)
Fail to find milk_2115 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(milk_2115, kitchen_counter_119)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_119)
Fail to find milk_2115 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(tablelamp_239)exp(milk_2115, tablelamp_239)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(tablelamp_239)
Robot find: pillow_208, chair_194, drawing_201, pillow_207, Robot is close to the nightstand_195. Robot is close to the tablelamp_239. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find milk_2115 ?
Answer: The target item, milk_2115, can be found in dining_room_41. It is located on top of table_114. When you enter dining_room_41, look for table_114, and you will find milk_2115 placed on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, milk_2115, can be found in dining_room_41. It is located on top of table_114. When you enter dining_room_41, look for table_114, and you will find milk_2115 placed on it.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for milk_2115 around fridge_126.
Action 5: Walk to food_food_1000.
Action 6: look for milk_2115 around food_food_1000.
Action 7: Walk to kitchen_counter_123.
Action 8: look for milk_2115 around kitchen_counter_123.
Action 9: Walk to kitchen_counter_122.
Action 10: look for milk_2115 around kitchen_counter_122.
Action 11: Walk to kitchen_counter_119.
Action 12: look for milk_2115 around kitchen_counter_119.
Action 13: Walk to tablelamp_239.

##############################
From agent.py
exp(milk_2115, tablelamp_239)
Fail to find milk_2115 around tablelamp_239. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(milk_2115, table_114)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(milk_2115, table_114)
Find milk_2115. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_egg_2092, table_114)
Robot find: Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_egg_2092. food_egg_2092 is close table_114. food_egg_2092 is on table_114. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Place the milk on table_114 in the dining room. The egg is already on the table, but the milk still needs to be placed there to complete the sub-task.
##############################
From agent.py
Human Instruction: Place the milk on table_114 in the dining room. The egg is already on the table, but the milk still needs to be placed there to complete the sub-task.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for milk_2115 around fridge_126.
Action 5: Walk to food_food_1000.
Action 6: look for milk_2115 around food_food_1000.
Action 7: Walk to kitchen_counter_123.
Action 8: look for milk_2115 around kitchen_counter_123.
Action 9: Walk to kitchen_counter_122.
Action 10: look for milk_2115 around kitchen_counter_122.
Action 11: Walk to kitchen_counter_119.
Action 12: look for milk_2115 around kitchen_counter_119.
Action 13: Walk to tablelamp_239.
Action 14: look for milk_2115 around tablelamp_239.
Action 15: Walk to table_114.
Action 16: look for milk_2115 around table_114.
Action 17: Walk to food_egg_2092.
Action 18: Grab food_egg_2092.
Action 19: Walk to table_114.
Action 20: Put food_egg_2092 on table_114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_milk_on_table(milk: item, table: item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)

        place_milk_on_table(milk, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#goal_representation
behavior place_milk_on_table(milk: item, table: item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk)

        place_milk_on_table(milk, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_milk_on_table(milk: item, table: item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind table: item where:
            is_table(table) and id[table] == 114

        place_milk_on_table(milk, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table] == 114

        bind milk: item where:
            is_milk(milk)

        bind egg: item where:
            is_food_egg(egg) and on(egg, table)

        place_on_table(milk, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a table in the dining room and put the milk and egg on it.', '2. Throw all the items from the fridge into the trashcan.', '3. Put the milk and egg back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation

behavior place_milk_on_table(milk: item, table: item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and id[table] == 114

        place_milk_on_table(milk, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_milk_on_table(milk: item, table: item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and id[table]==114 and inside(table, dining_room)

        place_milk_on_table(milk, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_milk_on_table(milk: item, table: item):
    body:
        achieve_once on(milk, table) # Place the milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk, which needs to be placed on the table
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Identify the dining room

        bind table: item where:
            is_table(table) and id[table] == 114 and inside(table, dining_room)
        # Select table with ID 114 in the dining room

        place_milk_on_table(milk, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Place the milk and egg on one of the tables in the dining room.', '2. Throw all the items from the fridge into the trashcan.', '3. Put the milk and eggs back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_196(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation

behavior place_milk_on_table(milk: item, table: item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table] == 114

        place_milk_on_table(milk, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_milk_on_table(milk:item, table:item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table] == 114
        
        place_milk_on_table(milk, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_milk_on_table(milk: item, table: item):
    body:
        achieve_once on(milk, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and id[table] == 114 and inside(table, dining_room)

        place_milk_on_table(milk, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Put milk and egg on one of the table in dining room. Throw all the items in the fridge to the trashcan. Then put milk and eggs back in the fridge.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(food_food_1000)', 'walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_122)', 'walk_executor(kitchen_counter_119)', 'walk_executor(tablelamp_239)', 'walk_executor(table_114)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(table_114)', 'put_executor(food_egg_2092, table_114)']
Time info:
Time consume: 203 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 9
goal generate times: 10
goal correct times: 0
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 144 steps
Keystate: k3 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
