From agent.py
Reset goals: The sub-goals are: 
['1. Find the fish and wash it.', '2. Place the milk, turkey, eggs, fish, and chicken on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_fish_found():
    # Function to check if there is a fish already identified in previously visited areas
    symbol available=exists o: item : (is_food_fish(o) and visited(o))
    return available

behavior __goal__():
    body:
        if is_food_fish_found():
            # If we have already found a fish based on known information
            bind fish: item where:
                is_food_fish(fish) and visited(fish)
            # Approach and wash the identified fish
            achieve close_char(char, fish)
            wash(fish)

        else:
            # If no fish is found in the visited areas, start exploring
            foreach o: item:
                if is_food_fish(o) and not visited(o):
                    observe(o, "Check the location of the fish")
                    # Locate and wash the discovered fish
                    achieve close_char(char, o)
                    wash(o) 

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2010_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation

def has_fish():
    # Check if there is a fish already identified
    symbol available=exists o: item : (is_food_fish(o) and visited(o))
    return available

behavior wash_fish(fish: item):
    body:
        wash(fish)

behavior __goal__():
    body:
        if has_fish():
            # If a fish is already found based on known information
            bind fish: item where:
                is_food_fish(fish) and visited(fish)
            # Wash the found fish
            wash_fish(fish)

        else:
            # If no fish is found, start exploring to locate one
            foreach fish: item:
                if is_food_fish(fish) and not visited(fish):
                    observe(fish, "Check the location of the fish")

#goal_representation_end

##############################
From agent.py->reset_goal

def has_fish():
    # Check if there is a fish already identified
    symbol available=exists o: item : (is_food_fish(o) and visited(o))
    return available

behavior wash_fish(fish: item):
    body:
        wash(fish)

behavior __goal__():
    body:
        if has_fish():
            # If a fish is already found based on known information
            bind fish: item where:
                is_food_fish(fish) and visited(fish)
            # Wash the found fish
            wash_fish(fish)

        else:
            # If no fish is found, start exploring to locate one
            foreach fish: item:
                if is_food_fish(fish) and not visited(fish):
                    observe(fish, "Check the location of the fish")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)obs(food_fish_2093, Check the location of the fish)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
obs(food_fish_2093, Check the location of the fish)
##############################
From agent.py
obs(food_fish_2093, Check the location of the fish)
Get this information:  food_fish_2093 is inside dining_room_41. food_fish_2093 is inside fridge_126. food_fish_2093 is close to fridge_126. food_fish_2093 is close to character_240. food_fish_2093 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The fish has been found, but it has not been washed yet. You need to perform the "wash" action on the identified fish (food_fish_2093) to complete this sub-task.
##############################
From agent.py
Human Instruction: The fish has been found, but it has not been washed yet. You need to perform the "wash" action on the identified fish (food_fish_2093) to complete this sub-task.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_fish_2093 around fridge_126.
Action 5: Observe around food_fish_2093 with the question of Check the location of the fish.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_sink_19(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2125_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        wash(fish)
        # Wash the identified fish

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and id[fish]==2093
        # Select the fish with ID 2093 to wash

        wash_fish(fish)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_fish(fish:item):
    body:
        wash(fish)
        # Wash the identified fish

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and id[fish]==2093
        # Select the fish with ID 2093 to wash

        wash_fish(fish)

##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_fish_2093 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_kitchen_counter_123(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        # Select any table

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        # Select any table

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(milk_2115, kitchen_counter_123)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the food_fish_2093. Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_123)
Fail to find milk_2115 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(milk_2115, cupboard_117)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the food_fish_2093. Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(milk_2115, cupboard_117)
Fail to find milk_2115 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(milk_2115, kitchen_counter_122)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the food_fish_2093. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_122)
Fail to find milk_2115 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)exp(milk_2115, oven_127)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the food_fish_2093. Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the food_fish_2093. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
exp(milk_2115, oven_127)
Fail to find milk_2115 around oven_127. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_ceilinglamp_138(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==138
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(milk,ceilinglamp_instance)
        else:
            exp(milk,ceilinglamp_instance)
    eff:
        unknown[milk]=False
        close[milk,ceilinglamp_instance]=True
        close[ceilinglamp_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        # Select a table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, egg, fish, chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        # Select a table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, egg, fish, chicken, table)

##############################
From agent.py-> find a plan in act()
walk_executor(ceilinglamp_138)exp(milk_2115, ceilinglamp_138)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(ceilinglamp_138)
Robot find: drawing_111, Robot is close to the food_fish_2093. Robot is close to the ceilinglamp_138. 
##############################
From agent.py
exp(milk_2115, ceilinglamp_138)
Fail to find milk_2115 around ceilinglamp_138. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(milk_2115, stove_2135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_fish_2093. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the food_fish_2093. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find milk_2115 ?
Answer: The milk_2115 is located inside dining_room_41. You can find it on table_114, which is the same table that is close to the milk_2115. Please retrieve it from that specific table in the dining room.
Re-decompose: None

##############################
From agent.py
Human Instruction: The fish has been found, but it has not been washed yet. You need to perform the "wash" action on the identified fish (food_fish_2093) to complete this sub-task.
The milk_2115 is located inside dining_room_41. You can find it on table_114, which is the same table that is close to the milk_2115. Please retrieve it from that specific table in the dining room.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_fish_2093 around fridge_126.
Action 5: Observe around food_fish_2093 with the question of Check the location of the fish.
Action 6: Grab food_fish_2093.
Action 7: Walk to faucet_20.
Action 8: Switch on faucet_20.
Action 9: Wash food_fish_2093.
Action 10: Switch off faucet_20.
Action 11: Walk to kitchen_counter_123.
Action 12: look for milk_2115 around kitchen_counter_123.
Action 13: Walk to cupboard_117.
Action 14: look for milk_2115 around cupboard_117.
Action 15: Walk to kitchen_counter_122.
Action 16: look for milk_2115 around kitchen_counter_122.
Action 17: Walk to oven_127.
Action 18: Open oven_127.
Action 19: look for milk_2115 around oven_127.
Action 20: Walk to ceilinglamp_138.
Action 21: look for milk_2115 around ceilinglamp_138.
Action 22: Walk to stove_2135.
Action 23: Open stove_2135.

##############################
From agent.py
exp(milk_2115, stove_2135)
Fail to find milk_2115 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(milk_2115, table_114)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the food_fish_2093. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(milk_2115, table_114)
Find milk_2115. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_turkey_2112)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the fridge_126. Grabbing food_turkey_2112 by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_turkey_2112, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_turkey_2112. Robot is close to the table_114. Robot is close to the mat_102. food_turkey_2112 is close table_114. table_114 is close food_turkey_2112. food_turkey_2112 is on table_114. food_turkey_2112 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_egg_2092, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_egg_2092. food_egg_2092 is close table_114. food_egg_2092 is on table_114. food_egg_2092 released by left hand. 
##############################
From agent.py
put_executor(food_fish_2093, table_114)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_egg_2092. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_fish_2093. food_fish_2093 is close table_114. food_fish_2093 is on table_114. food_fish_2093 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(food_chicken_2089, table_114)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close food_chicken_2089. food_chicken_2089 is close table_114. food_chicken_2089 is on table_114. food_chicken_2089 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to retrieve the milk from table_114 and place it on the same table.
##############################
From agent.py
Human Instruction: You need to retrieve the milk from table_114 and place it on the same table.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_fish_2093 around fridge_126.
Action 5: Observe around food_fish_2093 with the question of Check the location of the fish.
Action 6: Grab food_fish_2093.
Action 7: Walk to faucet_20.
Action 8: Switch on faucet_20.
Action 9: Wash food_fish_2093.
Action 10: Switch off faucet_20.
Action 11: Walk to kitchen_counter_123.
Action 12: look for milk_2115 around kitchen_counter_123.
Action 13: Walk to cupboard_117.
Action 14: look for milk_2115 around cupboard_117.
Action 15: Walk to kitchen_counter_122.
Action 16: look for milk_2115 around kitchen_counter_122.
Action 17: Walk to oven_127.
Action 18: Open oven_127.
Action 19: look for milk_2115 around oven_127.
Action 20: Walk to ceilinglamp_138.
Action 21: look for milk_2115 around ceilinglamp_138.
Action 22: Walk to stove_2135.
Action 23: Open stove_2135.
Action 24: look for milk_2115 around stove_2135.
Action 25: Walk to table_114.
Action 26: look for milk_2115 around table_114.
Action 27: Walk to food_turkey_2112.
Action 28: Grab food_turkey_2112.
Action 29: Walk to table_114.
Action 30: Put food_turkey_2112 on table_114.
Action 31: Walk to food_egg_2092.
Action 32: Grab food_egg_2092.
Action 33: Walk to table_114.
Action 34: Put food_egg_2092 on table_114.
Action 35: Put food_fish_2093 on table_114.
Action 36: Walk to food_chicken_2089.
Action 37: Grab food_chicken_2089.
Action 38: Walk to table_114.
Action 39: Put food_chicken_2089 on table_114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2121_around_basket_for_clothes_2078(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

behavior find_chair_194_around_table_199(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_brush_2002_around_ironing_board_2144(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(brush,ironing_board_instance)
        else:
            exp(brush,ironing_board_instance)
    eff:
        unknown[brush]=False
        close[brush,ironing_board_instance]=True
        close[ironing_board_instance,brush]=True
    

behavior find_shampoo_2019_around_shower_16(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(shampoo,shower_instance)
        else:
            exp(shampoo,shower_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,shower_instance]=True
        close[shower_instance,shampoo]=True
    

behavior find_book_2137_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        # Select a table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2027_around_pot_2138(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_orange,pot_instance)
        else:
            exp(food_orange,pot_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,pot_instance]=True
        close[pot_instance,food_orange]=True
    

behavior find_pot_2040_around_tray_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(pot,tray_instance)
        else:
            exp(pot,tray_instance)
    eff:
        unknown[pot]=False
        close[pot,tray_instance]=True
        close[tray_instance,pot]=True
    

behavior find_chair_271_around_table_270(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(milk: item, turkey: item, eggs: item, fish: item, chicken: item, table: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_light_39(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==39
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_food,light_instance)
        else:
            exp(food_food,light_instance)
    eff:
        unknown[food_food]=False
        close[food_food,light_instance]=True
        close[light_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select table with ID 114

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, egg, fish, chicken, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2103_around_bowl_2142(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2142
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_orange,bowl_instance)
        else:
            exp(food_orange,bowl_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,bowl_instance]=True
        close[bowl_instance,food_orange]=True
    

behavior find_pot_2040_around_pillow_106(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==106
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(pot,pillow_instance)
        else:
            exp(pot,pillow_instance)
    eff:
        unknown[pot]=False
        close[pot,pillow_instance]=True
        close[pillow_instance,pot]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        # Select table_114 where items will be placed

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_cupboard_118(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_measuring_cup_2012_around_cup_2132(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2132
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(measuring_cup,cup_instance)
        else:
            exp(measuring_cup,cup_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cup_instance]=True
        close[cup_instance,measuring_cup]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, egg, fish, chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2074_around_box_2038(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_food,box_instance)
        else:
            exp(food_food,box_instance)
    eff:
        unknown[food_food]=False
        close[food_food,box_instance]=True
        close[box_instance,food_food]=True
    

behavior find_stereo_2050_around_bookshelf_124(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(stereo,bookshelf_instance)
        else:
            exp(stereo,bookshelf_instance)
    eff:
        unknown[stereo]=False
        close[stereo,bookshelf_instance]=True
        close[bookshelf_instance,stereo]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#goal_representation
 
behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select table with ID 114

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, egg, fish, chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_homework_2047_around_desk_272(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(homework,desk_instance)
        else:
            exp(homework,desk_instance)
    eff:
        unknown[homework]=False
        close[homework,desk_instance]=True
        close[desk_instance,homework]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_underwear_2121_around_basket_for_clothes_2078(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

behavior find_clothes_shirt_2158_around_basket_for_clothes_2078(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_clothes_dress_2116_around_basket_for_clothes_2078(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select table with ID 114

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_fish_2093)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_fish_2093)', 'switchoff_executor(faucet_20)', 'walk_executor(kitchen_counter_123)', 'walk_executor(cupboard_117)', 'walk_executor(kitchen_counter_122)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'walk_executor(ceilinglamp_138)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(table_114)', 'walk_executor(food_turkey_2112)', 'grab_executor(food_turkey_2112)', 'walk_executor(table_114)', 'put_executor(food_turkey_2112, table_114)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(table_114)', 'put_executor(food_egg_2092, table_114)', 'put_executor(food_fish_2093, table_114)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(table_114)', 'put_executor(food_chicken_2089, table_114)']
Time info:
Time consume: 510 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 114
goal generate times: 11
goal correct times: 0
action_num: 30

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
