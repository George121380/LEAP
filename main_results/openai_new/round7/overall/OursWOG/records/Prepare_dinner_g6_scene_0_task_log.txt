From agent.py
Reset goals: The sub-goals are: 
['1. Find the pizza and hamburger.', '2. Place the pizza and hamburger on a plate.', '3. Heat the pizza and hamburger in the microwave.', '4. Put the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_kitchen_counter_230(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_kitchen_counter_230(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
def has_pizza_or_hamburger():
    # Function to check if there is a pizza or hamburger available in any known location
    symbol has_food=exists o: item : (is_food_pizza(o) or is_food_hamburger(o))
    return has_food

behavior __goal__():
    body:
        if exists food: item : (is_food_pizza(food) or is_food_hamburger(food) and has_pizza_or_hamburger()):
            # If we have already found the pizza or hamburger based on known information
            bind food: item where:
                (is_food_pizza(food) or is_food_hamburger(food)) and has_pizza_or_hamburger()
            # Move closer to the pizza or hamburger if found
            achieve close_char(char, food)

        else:
            # If pizza or hamburger is not found from known information, start exploring
            foreach food: item:
                if (is_food_pizza(food) or is_food_hamburger(food)) and not visited(food):
                    observe(food, "Check the location of the pizza or hamburger")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_pizza_or_hamburger():
    # Function to check if there is a pizza or hamburger available in any known location
    symbol has_food=exists o: item : (is_food_pizza(o) or is_food_hamburger(o))
    return has_food

behavior __goal__():
    body:
        if exists food: item : (is_food_pizza(food) or is_food_hamburger(food) and has_pizza_or_hamburger()):
            # If we have already found the pizza or hamburger based on known information
            bind food: item where:
                (is_food_pizza(food) or is_food_hamburger(food)) and has_pizza_or_hamburger()
            # Move closer to the pizza or hamburger if found
            achieve close_char(char, food)

        else:
            # If pizza or hamburger is not found from known information, start exploring
            foreach food: item:
                if (is_food_pizza(food) or is_food_hamburger(food)) and not visited(food):
                    observe(food, "Check the location of the pizza or hamburger")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_hamburger_2024, kitchen_counter_230)walk_executor(food_hamburger_2024)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_hamburger_2024, kitchen_counter_230)
Fail to find food_hamburger_2024 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_pizza_2034, cupboard_229)walk_executor(food_pizza_2034)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_pizza_2034, cupboard_229)
Fail to find food_pizza_2034 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(food_pizza_2034, stove_2065)walk_executor(food_pizza_2034)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(food_pizza_2034, stove_2065)
Fail to find food_pizza_2034 around stove_2065. 
##############################
From agent.py-> find a plan in act()
walk_executor(filing_cabinet_399)open_executor(filing_cabinet_399)exp(food_pizza_2034, filing_cabinet_399)walk_executor(food_pizza_2034)
##############################
From agent.py
walk_executor(filing_cabinet_399)
Robot find: drawing_404, drawing_402, drawing_403, Robot is close to the filing_cabinet_399. 
##############################
From agent.py
open_executor(filing_cabinet_399)
Robot find: Robot is close to the filing_cabinet_399. filing_cabinet_399 is opened. 
##############################
From agent.py
exp(food_pizza_2034, filing_cabinet_399)
Fail to find food_pizza_2034 around filing_cabinet_399. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_297)open_executor(microwave_297)exp(food_hamburger_2024, microwave_297)walk_executor(food_hamburger_2024)
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
exp(food_hamburger_2024, microwave_297)
Fail to find food_hamburger_2024 around microwave_297. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_hamburger_2024, fridge_289)
Find food_hamburger_2024. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the pizza and hamburger.  ', '2. Put the pizza and hamburger on a plate.  ', '3. Heat the plate in the microwave.  ', '4. Put the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_hamburger_or_pizza():
    # Function to check if there is a hamburger or pizza in previously visited areas
    symbol available=exists o: item : ((is_food_hamburger(o) or is_food_pizza(o)) and visited(o))
    return available

behavior __goal__():
    body:
        if has_hamburger_or_pizza():
            # If we have already found a hamburger or pizza based on known information
            bind food_item: item where:
                (is_food_hamburger(food_item) or is_food_pizza(food_item)) and visited(food_item)
            # Move closer to the found food item
            achieve close_char(char, food_item)

        else:
            # If no hamburger or pizza is found in the visited areas, start exploring
            foreach o: item:
                if (is_food_hamburger(o) or is_food_pizza(o)) and not visited(o):
                    observe(o, "Check the location of the hamburger or pizza")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_hamburger_or_pizza():
    # Function to check if there is a hamburger or pizza in previously visited areas
    symbol available=exists o: item : ((is_food_hamburger(o) or is_food_pizza(o)) and visited(o))
    return available

behavior __goal__():
    body:
        if has_hamburger_or_pizza():
            # If we have already found a hamburger or pizza based on known information
            bind food_item: item where:
                (is_food_hamburger(food_item) or is_food_pizza(food_item)) and visited(food_item)
            # Move closer to the found food item
            achieve close_char(char, food_item)

        else:
            # If no hamburger or pizza is found in the visited areas, start exploring
            foreach o: item:
                if (is_food_hamburger(o) or is_food_pizza(o)) and not visited(o):
                    observe(o, "Check the location of the hamburger or pizza")

##############################
From agent.py-> find a plan in act()
obs(food_hamburger_2024, Check the location of the hamburger or pizza)obs(food_pizza_2034, Check the location of the hamburger or pizza)
##############################
From agent.py
obs(food_hamburger_2024, Check the location of the hamburger or pizza)
Get this information:  food_hamburger_2024 is inside fridge_289. food_hamburger_2024 is inside dining_room_201. food_hamburger_2024 is close to fridge_289. food_hamburger_2024 is close to character_65. food_hamburger_2024 is CLEAN.
##############################
From agent.py
obs(food_pizza_2034, Check the location of the hamburger or pizza)
Get this information:  food_pizza_2034 is inside fridge_289. food_pizza_2034 is inside dining_room_201. food_pizza_2034 is close to fridge_289. food_pizza_2034 is close to character_65. food_pizza_2034 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_coffee_table_2068(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(plate,coffee_table_instance)
        else:
            exp(plate,coffee_table_instance)
    eff:
        unknown[plate]=False
        close[plate,coffee_table_instance]=True
        close[coffee_table_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior place_on_plate(item1: item, item2: item, plate: item):
    body:
        achieve_once on(item1, plate)
        achieve_once on(item2, plate)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza found earlier

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger found earlier

        bind plate: item where:
            is_plate(plate)
        # Select a plate to place the pizza and hamburger on

        place_on_plate(pizza, hamburger, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior place_on_plate(item1: item, item2: item, plate: item):
    body:
        achieve_once on(item1, plate)
        achieve_once on(item2, plate)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza found earlier

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger found earlier

        bind plate: item where:
            is_plate(plate)
        # Select a plate to place the pizza and hamburger on

        place_on_plate(pizza, hamburger, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(plate_1000, coffee_table_2068)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the coffee_table_2068. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Go to dining_room_201. Locate sink_231, and you will find plate_1000 directly on top of sink_231.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_201. Locate sink_231, and you will find plate_1000 directly on top of sink_231.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_hamburger_2024 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for food_pizza_2034 around cupboard_229.
Action 6: Walk to stove_2065.
Action 7: Open stove_2065.
Action 8: look for food_pizza_2034 around stove_2065.
Action 9: Walk to filing_cabinet_399.
Action 10: Open filing_cabinet_399.
Action 11: look for food_pizza_2034 around filing_cabinet_399.
Action 12: Walk to microwave_297.
Action 13: Open microwave_297.
Action 14: look for food_hamburger_2024 around microwave_297.
Action 15: Walk to fridge_289.
Action 16: Switch off fridge_289.
Action 17: Open fridge_289.
Action 18: look for food_hamburger_2024 around fridge_289.
Action 19: Observe around food_hamburger_2024 with the question of Check the location of the hamburger or pizza.
Action 20: Observe around food_pizza_2034 with the question of Check the location of the hamburger or pizza.
Action 21: Walk to coffee_table_2068.

##############################
From agent.py
exp(plate_1000, coffee_table_2068)
Fail to find plate_1000 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(food_pizza_2034)
Robot find: Robot is close to the fridge_289. Robot is close to the food_pizza_2034. 
##############################
From agent.py
grab_executor(food_pizza_2034)
Robot find: Robot is close to the fridge_289. Robot is close to the food_pizza_2034. Grabbing food_pizza_2034 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_pizza_2034, plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_pizza_2034. food_pizza_2034 is close plate_1000. food_pizza_2034 is on plate_1000. food_pizza_2034 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. Grabbing food_hamburger_2024 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_hamburger_2024, plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_hamburger_2024. food_hamburger_2024 is close plate_1000. food_hamburger_2024 is on plate_1000. food_hamburger_2024 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_plate_in_microwave(microwave:item):
    # Function to check if there is a plate in the microwave
    symbol has_plate=exists o: item : (is_plate(o) and inside(o, microwave))
    return has_plate

behavior close_the_microwave_door(microwave:item):
    body:
        achieve_once closed(microwave)
        # Close the microwave door

behavior start_microwave(microwave:item):
    body:
        achieve_once is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        bind plate: item where:
            is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)
        # Select a plate with both food_pizza_2034 and food_hamburger_2024 on it

        if not has_plate_in_microwave(microwave):
            achieve_once inside(plate, microwave)
            # Place the plate with food inside the microwave

        close_the_microwave_door(microwave)
        start_microwave(microwave)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_plate_in_microwave(microwave:item):
    # Function to check if there is a plate in the microwave
    symbol has_plate=exists o: item : (is_plate(o) and inside(o, microwave))
    return has_plate

behavior close_the_microwave_door(microwave:item):
    body:
        achieve_once closed(microwave)
        # Close the microwave door

behavior start_microwave(microwave:item):
    body:
        achieve_once is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        bind plate: item where:
            is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)
        # Select a plate with both food_pizza_2034 and food_hamburger_2024 on it

        if not has_plate_in_microwave(microwave):
            achieve_once inside(plate, microwave)
            # Place the plate with food inside the microwave

        close_the_microwave_door(microwave)
        start_microwave(microwave)
 
##############################
From agent.py-> find a plan in act()
grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(plate_1000, microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is close plate_1000. plate_1000 is inside microwave_297. plate_1000 is close microwave_297. plate_1000 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_plate_on_table(plate: item, table: item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind plate: item where:
            is_plate(plate) and id[plate] == 1000

        place_plate_on_table(plate, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_plate_on_table(plate: item, table: item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind plate: item where:
            is_plate(plate) and id[plate] == 1000

        place_plate_on_table(plate, table)

##############################
From agent.py-> find a plan in act()
switchoff_executor(microwave_297)open_executor(microwave_297)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
switchoff_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned off. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the plate_1000. Robot is close to the table_226. 
##############################
From agent.py
put_executor(plate_1000, table_226)
Robot find: Robot is close to the plate_1000. Robot is close to the table_226. plate_1000 is close table_226. plate_1000 is on table_226. table_226 is close plate_1000. plate_1000 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(filing_cabinet_399)', 'open_executor(filing_cabinet_399)', 'walk_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(coffee_table_2068)', 'walk_executor(sink_231)', 'walk_executor(food_pizza_2034)', 'grab_executor(food_pizza_2034)', 'walk_executor(plate_1000)', 'put_executor(food_pizza_2034, plate_1000)', 'walk_executor(food_hamburger_2024)', 'grab_executor(food_hamburger_2024)', 'walk_executor(plate_1000)', 'put_executor(food_hamburger_2024, plate_1000)', 'grab_executor(plate_1000)', 'walk_executor(microwave_297)', 'putin_executor(plate_1000, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)', 'switchoff_executor(microwave_297)', 'open_executor(microwave_297)', 'grab_executor(plate_1000)', 'walk_executor(table_226)', 'put_executor(plate_1000, table_226)']
Time info:
Time consume: 237 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 31
goal generate times: 5
goal correct times: 0
action_num: 32

Task complete rate:
1
Scene_id: 0
##############################
