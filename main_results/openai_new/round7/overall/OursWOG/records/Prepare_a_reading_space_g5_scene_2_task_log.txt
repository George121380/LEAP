From agent.py
Reset goals: The sub-goals are: 
['1. Find your spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2106_around_home_office_161(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(spectacles,home_office_instance)
        else:
            exp(spectacles,home_office_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,home_office_instance]=True
        close[home_office_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
def has_spectacles_been_visited():
    # Function to check if the spectacles have been visited
    symbol visited_spectacles = exists o: item : (is_spectacles(o) and visited(o))
    return visited_spectacles

behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)

        if has_spectacles_been_visited():
            # If the spectacles have been visited based on known information
            bind spectacles: item where:
                is_spectacles(spectacles) and visited(spectacles)
            place_spectacles_on_table(spectacles, table)

        else:
            # If the spectacles havent been visited, start exploring
            foreach spectacles: item:
                if is_spectacles(spectacles) and not visited(spectacles):
                    observe(spectacles, "Check the location of the spectacles")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_spectacles_been_visited():
    # Function to check if the spectacles have been visited
    symbol visited_spectacles = exists o: item : (is_spectacles(o) and visited(o))
    return visited_spectacles

behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)

        if has_spectacles_been_visited():
            # If the spectacles have been visited based on known information
            bind spectacles: item where:
                is_spectacles(spectacles) and visited(spectacles)
            place_spectacles_on_table(spectacles, table)

        else:
            # If the spectacles havent been visited, start exploring
            foreach spectacles: item:
                if is_spectacles(spectacles) and not visited(spectacles):
                    observe(spectacles, "Check the location of the spectacles")

##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(spectacles_2106, home_office_161)walk_executor(spectacles_2106)obs(spectacles_2106, Check the location of the spectacles)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(spectacles_2106, home_office_161)
Fail to find spectacles_2106 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(spectacles_2106, home_office_161)walk_executor(spectacles_2106)obs(spectacles_2106, Check the location of the spectacles)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(spectacles_2106, home_office_161)
Fail to find spectacles_2106 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(spectacles_2106, home_office_161)walk_executor(spectacles_2106)obs(spectacles_2106, Check the location of the spectacles)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(spectacles_2106, home_office_161)
Fail to find spectacles_2106 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(spectacles_2106, home_office_161)walk_executor(spectacles_2106)obs(spectacles_2106, Check the location of the spectacles)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(spectacles_2106, home_office_161)
Fail to find spectacles_2106 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(spectacles_2106, home_office_161)walk_executor(spectacles_2106)obs(spectacles_2106, Check the location of the spectacles)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(spectacles_2106, home_office_161)
Fail to find spectacles_2106 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(spectacles_2106, home_office_161)walk_executor(spectacles_2106)obs(spectacles_2106, Check the location of the spectacles)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find spectacles_2106 ?
Answer: Robot, you can find the spectacles_2106 inside dining_room_1. They are on top of kitchen_counter_128. Look for kitchen_counter_128 first, as the spectacles_2106 will be nearby, sitting on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, you can find the spectacles_2106 inside dining_room_1. They are on top of kitchen_counter_128. Look for kitchen_counter_128 first, as the spectacles_2106 will be nearby, sitting on it.

The actions you have taken:
Action 1: Walk to home_office_161.
Action 2: look for spectacles_2106 around home_office_161.
Action 3: Walk to home_office_161.
Action 4: look for spectacles_2106 around home_office_161.
Action 5: Walk to home_office_161.
Action 6: look for spectacles_2106 around home_office_161.
Action 7: Walk to home_office_161.
Action 8: look for spectacles_2106 around home_office_161.
Action 9: Walk to home_office_161.
Action 10: look for spectacles_2106 around home_office_161.
Action 11: Walk to home_office_161.

##############################
From agent.py
exp(spectacles_2106, home_office_161)
Fail to find spectacles_2106 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(spectacles_2106, kitchen_counter_128)walk_executor(spectacles_2106)obs(spectacles_2106, Check the location of the spectacles)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(spectacles_2106, kitchen_counter_128)
Find spectacles_2106. 
##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2106)obs(spectacles_2106, Check the location of the spectacles)
##############################
From agent.py
walk_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. 
##############################
From agent.py
obs(spectacles_2106, Check the location of the spectacles)
Get this information:  spectacles_2106 is inside dining_room_1. spectacles_2106 is close to kitchen_counter_128. spectacles_2106 is close to character_219. spectacles_2106 is on kitchen_counter_128.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The spectacles have been located on the kitchen counter, but they still need to be placed on the coffee table in the home office.
##############################
From agent.py
Human Instruction: The spectacles have been located on the kitchen counter, but they still need to be placed on the coffee table in the home office.

The actions you have taken:
Action 1: Walk to home_office_161.
Action 2: look for spectacles_2106 around home_office_161.
Action 3: Walk to home_office_161.
Action 4: look for spectacles_2106 around home_office_161.
Action 5: Walk to home_office_161.
Action 6: look for spectacles_2106 around home_office_161.
Action 7: Walk to home_office_161.
Action 8: look for spectacles_2106 around home_office_161.
Action 9: Walk to home_office_161.
Action 10: look for spectacles_2106 around home_office_161.
Action 11: Walk to home_office_161.
Action 12: look for spectacles_2106 around home_office_161.
Action 13: Walk to kitchen_counter_128.
Action 14: look for spectacles_2106 around kitchen_counter_128.
Action 15: Walk to spectacles_2106.
Action 16: Observe around spectacles_2106 with the question of Check the location of the spectacles.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_mousepad_381(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==381
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_laptop_2015_around_home_office_161(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laptop,home_office_instance)
        else:
            exp(laptop,home_office_instance)
    eff:
        unknown[laptop]=False
        close[laptop,home_office_instance]=True
        close[home_office_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
behavior place_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)

        place_spectacles_on_coffee_table(spectacles, coffee_table)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)

        place_spectacles_on_coffee_table(spectacles, coffee_table)
##############################
From agent.py-> find a plan in act()
grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
grab_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. Grabbing spectacles_2106 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the spectacles_2106. Robot is close to the table_193. 
##############################
From agent.py
put_executor(spectacles_2106, table_193)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. table_193 is close spectacles_2106. spectacles_2106 is close table_193. spectacles_2106 is on table_193. spectacles_2106 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the spectacles on the coffee table in the home office. Currently, they are placed on table_193, which is not specified to be in the home office.
##############################
From agent.py
Human Instruction: You need to put the spectacles on the coffee table in the home office. Currently, they are placed on table_193, which is not specified to be in the home office.

The actions you have taken:
Action 1: Walk to home_office_161.
Action 2: look for spectacles_2106 around home_office_161.
Action 3: Walk to home_office_161.
Action 4: look for spectacles_2106 around home_office_161.
Action 5: Walk to home_office_161.
Action 6: look for spectacles_2106 around home_office_161.
Action 7: Walk to home_office_161.
Action 8: look for spectacles_2106 around home_office_161.
Action 9: Walk to home_office_161.
Action 10: look for spectacles_2106 around home_office_161.
Action 11: Walk to home_office_161.
Action 12: look for spectacles_2106 around home_office_161.
Action 13: Walk to kitchen_counter_128.
Action 14: look for spectacles_2106 around kitchen_counter_128.
Action 15: Walk to spectacles_2106.
Action 16: Observe around spectacles_2106 with the question of Check the location of the spectacles.
Action 17: Grab spectacles_2106.
Action 18: Walk to table_193.
Action 19: Put spectacles_2106 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_2111_around_keyboard_2111(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind keyboard_instance:item where:
            is_keyboard(keyboard_instance) and id[keyboard_instance]==2111
        achieve close_char(char,keyboard_instance)
        if can_open(keyboard_instance):
            achieve_once open(keyboard_instance)
            exp(keyboard,keyboard_instance)
        else:
            exp(keyboard,keyboard_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,keyboard_instance]=True
        close[keyboard_instance,keyboard]=True
    

behavior find_phone_47_around_home_office_161(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(phone,home_office_instance)
        else:
            exp(phone,home_office_instance)
    eff:
        unknown[phone]=False
        close[phone,home_office_instance]=True
        close[home_office_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106
        # Select spectacles_2106

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2112_around_mouse_2112(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==2112
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        
        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)

        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        
        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)

        place_spectacles_on_table(spectacles, table)
 
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find your spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) 

        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)

        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_book_2091_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106
        # Select spectacles_2106

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_186(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_dvd_player_2085_around_tvstand_186(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the spectacles and place them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_keyboard_382_around_keyboard_2111(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind keyboard_instance:item where:
            is_keyboard(keyboard_instance) and id[keyboard_instance]==2111
        achieve close_char(char,keyboard_instance)
        if can_open(keyboard_instance):
            achieve_once open(keyboard_instance)
            exp(keyboard,keyboard_instance)
        else:
            exp(keyboard,keyboard_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,keyboard_instance]=True
        close[keyboard_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        
        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)

        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_2111_around_computer_2110(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        
        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        place_spectacles_on_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2031_around_bookshelf_372(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(stamp,bookshelf_instance)
        else:
            exp(stamp,bookshelf_instance)
    eff:
        unknown[stamp]=False
        close[stamp,bookshelf_instance]=True
        close[bookshelf_instance,stamp]=True
    

behavior find_shoes_2001_around_couch_192(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(shoes,couch_instance)
        else:
            exp(shoes,couch_instance)
    eff:
        unknown[shoes]=False
        close[shoes,couch_instance]=True
        close[couch_instance,shoes]=True
    

behavior find_keyboard_382_around_mousepad_381(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==381
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(keyboard,mousepad_instance)
        else:
            exp(keyboard,mousepad_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,mousepad_instance]=True
        close[mousepad_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office(x:item):
    # Function to determine if the item is a home office
    return is_home_office(x)

def has_coffee_table_with_spectacles(home_office:item):
    # Function to check if there is a coffee table with spectacles in the home office
    symbol has_spectacles=exists table: item : (is_table(table) and inside(table, home_office) and exists o: item : (is_spectacles(o) and on(o, table)))
    return has_spectacles

behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        if has_coffee_table_with_spectacles(home_office):
            bind spectacles: item where:
                is_spectacles(spectacles) and id[spectacles] == 2106
            # Select spectacles_2106 based on previous actions

            bind table: item where:
                is_table(table) and inside(table, home_office)
            # Select the table within the home office

            place_spectacles_on_table(spectacles, table)
        else:
            foreach table: item:
                if is_table(table) and inside(table, home_office) and not visited(table):
                    observe(table, "Check if there are spectacles on it")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5811, column 107.
Expected one of: 
	* RPAR
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_laptop_2015_around_home_office_161(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laptop,home_office_instance)
        else:
            exp(laptop,home_office_instance)
    eff:
        unknown[laptop]=False
        close[laptop,home_office_instance]=True
        close[home_office_instance,laptop]=True
    

behavior find_novel_2010_around_bookshelf_188(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
 
def is_home_office(x:item):
    # Function to determine if the item is a home office
    return is_home_office(x)

def has_coffee_table_with_spectacles(home_office:item):
    # Function to check if there is a coffee table with spectacles in the home office
    symbol has_spectacles=exists table: item : (is_table(table) and inside(table, home_office) and exists o: item : (is_spectacles(o) and on(o, table)))
    return has_spectacles

behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106
        # Select spectacles_2106 based on previous actions

        foreach table: item:
            if is_table(table) and inside(table, home_office) and not has_coffee_table_with_spectacles(home_office):
                observe(table, "Check if there are spectacles on it")
        
        bind table: item where:
            is_table(table) and inside(table, home_office) and not has_coffee_table_with_spectacles(home_office)
        # Select a table within the home office without spectacles

        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5793, column 107.
Expected one of: 
	* RPAR
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_2105_around_fridge_140(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(plate,fridge_instance)
        else:
            exp(plate,fridge_instance)
    eff:
        unknown[plate]=False
        close[plate,fridge_instance]=True
        close[fridge_instance,plate]=True
    

#goal_representation
 
def has_coffee_table_without_spectacles(home_office:item):
    # Function to check if there is a coffee table without spectacles in the home office
    symbol has_no_spectacles=not exists table: item : (is_table(table) and inside(table, home_office) and exists o: item : (is_spectacles(o) and on(o, table)))
    return has_no_spectacles

behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106
        # Select spectacles_2106 based on previous actions

        foreach table: item:
            if is_table(table) and inside(table, home_office) and has_coffee_table_without_spectacles(home_office):
                observe(table, "Check if there are spectacles on it")
        
        bind table: item where:
            is_table(table) and inside(table, home_office) and has_coffee_table_without_spectacles(home_office)
        # Select a table within the home office without spectacles

        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(kitchen_counter_128)', 'walk_executor(spectacles_2106)', 'grab_executor(spectacles_2106)', 'walk_executor(table_193)', 'put_executor(spectacles_2106, table_193)']
Time info:
Time consume: 238 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 41
goal generate times: 11
goal correct times: 2
action_num: 11

Task complete rate:
Keystate: k1 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
