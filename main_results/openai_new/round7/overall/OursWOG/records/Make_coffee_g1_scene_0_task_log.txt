From agent.py
Reset goals: The sub-goals are: 
['1. Identify the coffee maker and gather the necessary ingredients and tools.', '2. Brew the coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2064_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def find_coffee_maker():
    # Function to verify if a coffee maker is in known locations
    symbol available = exists item: item : (is_coffe_maker(item) and visited(item))
    return available

behavior collect_ingredients_and_tools(coffee_maker: item):
    body:
        if not visited(coffee_maker):
            observe(coffee_maker, "Identify necessary tools and ingredients")

behavior __goal__():
    body:
        if find_coffee_maker():
            bind coffee_maker: item where:
                is_coffe_maker(coffee_maker) and visited(coffee_maker)
            achieve close_char(char, coffee_maker)
            collect_ingredients_and_tools(coffee_maker)

        else:
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    observe(coffee_maker, "Locate the coffee maker and gather ingredients and tools")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def find_coffee_maker():
    # Function to verify if a coffee maker is in known locations
    symbol available = exists item: item : (is_coffe_maker(item) and visited(item))
    return available

behavior collect_ingredients_and_tools(coffee_maker: item):
    body:
        if not visited(coffee_maker):
            observe(coffee_maker, "Identify necessary tools and ingredients")

behavior __goal__():
    body:
        if find_coffee_maker():
            bind coffee_maker: item where:
                is_coffe_maker(coffee_maker) and visited(coffee_maker)
            achieve close_char(char, coffee_maker)
            collect_ingredients_and_tools(coffee_maker)

        else:
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    observe(coffee_maker, "Locate the coffee maker and gather ingredients and tools")

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Locate the coffee maker and gather ingredients and tools)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Locate the coffee maker and gather ingredients and tools)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is OFF. coffe_maker_290 is OPEN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker to brew coffee

        brew_coffee(coffee_maker)
        # Brew the coffee using the selected coffee maker

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior brew_coffee(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker to brew coffee

        brew_coffee(coffee_maker)
        # Brew the coffee using the selected coffee maker

##############################
From agent.py-> find a plan in act()
close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)']
Time info:
Time consume: 45 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 50
goal generate times: 2
goal correct times: 0
action_num: 4

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
