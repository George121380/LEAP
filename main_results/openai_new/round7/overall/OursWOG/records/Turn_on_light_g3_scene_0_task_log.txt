From agent.py
Reset goals: The sub-goals are: 
['1. Check each room to see if any lights are off.', '2. Turn on a light in each room where the lights are currently off.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wall_clock_249_around_wallshelf_35(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation

def has_light_off_in_room(room:item):
    # Function to check if there is any light off in the room
    symbol has_light_off=exists o: item : (is_light(o) and is_off(o) and inside(o, room))
    return has_light_off

behavior check_light_in_room(room:item):
    body:
        if has_light_off_in_room(room):
            bind light: item where:
                is_light(light) and is_off(light) and inside(light, room)
            observe(light, "Check if the light can be turned on")

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                # Check each identified room
                check_light_in_room(room)

#goal_representation_end

##############################
From agent.py->reset_goal

def has_light_off_in_room(room:item):
    # Function to check if there is any light off in the room
    symbol has_light_off=exists o: item : (is_light(o) and is_off(o) and inside(o, room))
    return has_light_off

behavior check_light_in_room(room:item):
    body:
        if has_light_off_in_room(room):
            bind light: item where:
                is_light(light) and is_off(light) and inside(light, room)
            observe(light, "Check if the light can be turned on")

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                # Check each identified room
                check_light_in_room(room)

##############################
From agent.py-> find a plan in act()
walk_executor(light_64)obs(light_64, Check if the light can be turned on)walk_executor(light_169)obs(light_169, Check if the light can be turned on)walk_executor(light_245)obs(light_245, Check if the light can be turned on)walk_executor(light_411)obs(light_411, Check if the light can be turned on)
##############################
From agent.py
walk_executor(light_64)
Robot find: towel_rack_32, mat_22, Robot is close to the light_64. 
##############################
From agent.py
obs(light_64, Check if the light can be turned on)
Get this information:  light_64 is close to towel_rack_32. light_64 is close to floor_2. light_64 is close to floor_3. light_64 is close to bookshelf_101. light_64 is close to floor_6. light_64 is close to floor_72. light_64 is close to door_44. light_64 is close to doorjamb_45. light_64 is close to wall_14. light_64 is close to wall_79. light_64 is close to floor_77. light_64 is close to ceiling_17. light_64 is close to wall_12. light_64 is close to ceiling_16. light_64 is close to wall_85. light_64 is close to mat_22. light_64 is close to ceiling_90. light_64 is close to ceiling_95. light_64 is close to character_65. light_64 is inside bathroom_1. light_64 is PLUGGED_IN. light_64 is OFF. light_64 is CLEAN. light_64 is CLOSED.
##############################
From agent.py
walk_executor(light_169)
Robot find: keyboard_168, drawing_175, chair_103, drawing_174, Robot is close to the light_169. 
##############################
From agent.py
obs(light_169, Check if the light can be turned on)
Get this information:  light_169 is facing drawing_175. light_169 is inside bedroom_67. light_169 is close to doorjamb_165. light_169 is close to keyboard_168. light_169 is close to computer_170. light_169 is close to cpuscreen_171. light_169 is close to drawing_174. light_169 is close to floor_75. light_169 is close to floor_76. light_169 is close to floor_206. light_169 is close to floor_207. light_169 is close to wall_209. light_169 is close to wall_210. light_169 is close to wall_83. light_169 is close to wall_84. light_169 is close to ceiling_217. light_169 is close to ceiling_218. light_169 is close to ceiling_93. light_169 is close to ceiling_94. light_169 is close to door_222. light_169 is close to chair_103. light_169 is close to desk_104. light_169 is close to bookshelf_233. light_169 is close to light_245. light_169 is close to powersocket_246. light_169 is close to phone_247. light_169 is close to character_65. light_169 is PLUGGED_IN. light_169 is OFF. light_169 is CLEAN. light_169 is CLOSED.
##############################
From agent.py
walk_executor(light_245)
Robot find: drawing_240, drawing_238, wall_clock_249, drawing_241, drawing_242, drawing_243, drawing_239, phone_247, Robot is close to the light_245. 
##############################
From agent.py
obs(light_245, Check if the light can be turned on)
Get this information:  light_245 is facing drawing_241. light_245 is facing drawing_242. light_245 is facing drawing_243. light_245 is facing television_248. light_245 is facing wall_clock_249. light_245 is inside dining_room_201. light_245 is close to doorjamb_165. light_245 is close to light_169. light_245 is close to drawing_174. light_245 is close to floor_202. light_245 is close to floor_203. light_245 is close to floor_76. light_245 is close to floor_77. light_245 is close to floor_206. light_245 is close to wall_209. light_245 is close to wall_211. light_245 is close to wall_84. light_245 is close to wall_85. light_245 is close to ceiling_216. light_245 is close to ceiling_217. light_245 is close to ceiling_94. light_245 is close to door_222. light_245 is close to ceiling_95. light_245 is close to trashcan_99. light_245 is close to drawing_238. light_245 is close to drawing_239. light_245 is close to drawing_240. light_245 is close to powersocket_246. light_245 is close to phone_247. light_245 is close to wall_clock_249. light_245 is close to character_65. light_245 is PLUGGED_IN. light_245 is OFF. light_245 is CLEAN. light_245 is CLOSED.
##############################
From agent.py
walk_executor(light_411)
Robot find: drawing_404, drawing_402, Robot is close to the light_411. 
##############################
From agent.py
obs(light_411, Check if the light can be turned on)
Get this information:  light_411 is inside home_office_319. light_411 is close to floor_320. light_411 is close to floor_325. light_411 is close to wall_331. light_411 is close to wall_332. light_411 is close to wallshelf_235. light_411 is close to floor_205. light_411 is close to filing_cabinet_399. light_411 is close to floor_208. light_411 is close to ceiling_337. light_411 is close to drawing_402. light_411 is close to drawing_404. light_411 is close to wall_213. light_411 is close to wall_214. light_411 is close to ceiling_342. light_411 is close to doorjamb_346. light_411 is close to ceiling_219. light_411 is close to ceiling_220. light_411 is close to character_65. light_411 is PLUGGED_IN. light_411 is OFF. light_411 is CLEAN. light_411 is CLOSED.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def can_turn_on_light(light:item):
    # Function to check if a light can be turned on
    symbol has_switch=has_switch(light)
    symbol is_unplugged=unplugged(light)
    return has_switch and not is_unplugged

behavior turn_on_light(light:item):
    body:
        if can_turn_on_light(light):
            achieve is_on(light)

behavior __goal__():
    body:
        foreach light: item:
            if is_light(light) and is_off(light):
                turn_on_light(light)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def can_turn_on_light(light:item):
    # Function to check if a light can be turned on
    symbol has_switch=has_switch(light)
    symbol is_unplugged=unplugged(light)
    return has_switch and not is_unplugged

behavior turn_on_light(light:item):
    body:
        if can_turn_on_light(light):
            achieve is_on(light)

behavior __goal__():
    body:
        foreach light: item:
            if is_light(light) and is_off(light):
                turn_on_light(light)

##############################
From agent.py-> find a plan in act()
walk_executor(light_64)switchon_executor(light_64)walk_executor(light_169)switchon_executor(light_169)walk_executor(light_245)switchon_executor(light_245)walk_executor(light_411)switchon_executor(light_411)
##############################
From agent.py
walk_executor(light_64)
Robot find: Robot is close to the light_64. 
##############################
From agent.py
switchon_executor(light_64)
Robot find: Robot is close to the light_64. light_64 is turned on. 
##############################
From agent.py
walk_executor(light_169)
Robot find: Robot is close to the light_169. 
##############################
From agent.py
switchon_executor(light_169)
Robot find: Robot is close to the light_169. light_169 is turned on. 
##############################
From agent.py
walk_executor(light_245)
Robot find: Robot is close to the light_245. 
##############################
From agent.py
switchon_executor(light_245)
Robot find: Robot is close to the light_245. light_245 is turned on. 
##############################
From agent.py
walk_executor(light_411)
Robot find: Robot is close to the light_411. 
##############################
From agent.py
switchon_executor(light_411)
Robot find: Robot is close to the light_411. light_411 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make sure there is at least one light on in every room.
Action History:
['walk_executor(light_64)', 'walk_executor(light_169)', 'walk_executor(light_245)', 'walk_executor(light_411)', 'walk_executor(light_64)', 'switchon_executor(light_64)', 'walk_executor(light_169)', 'switchon_executor(light_169)', 'walk_executor(light_245)', 'switchon_executor(light_245)', 'walk_executor(light_411)', 'switchon_executor(light_411)']
Time info:
Time consume: 54 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 33
goal generate times: 2
goal correct times: 0
action_num: 12

Task complete rate:
1
Scene_id: 0
##############################
