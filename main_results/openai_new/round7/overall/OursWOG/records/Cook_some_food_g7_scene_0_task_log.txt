From agent.py
Reset goals: The sub-goals are: 
['1. Find a bowl and scoop some ice cream into it.', '2. Add jam on top of the ice cream.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_ice_cream_2025_around_fridge_289(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_bowl(bowl: item):
    body:
        achieve close_char(char, bowl)

behavior scoop_ice_cream_into_bowl(ice_cream: item, bowl: item):
    body:
        achieve_once inside(ice_cream, bowl)

behavior __goal__():
    body:
        if exists bowl: item : (is_bowl(bowl) and visited(bowl)):
            # Check if there is a bowl already discovered
            bind bowl: item where:
                is_bowl(bowl) and visited(bowl)
            # Select the visited bowl
            find_bowl(bowl) # Move the character closer to the bowl

        else: 
            # If no bowl is found, start checking unvisited areas
            foreach bowl: item:
                if is_bowl(bowl) and not visited(bowl):
                    observe(bowl,"Is this a suitable bowl")
        
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream)
        # Select a source of ice cream
        scoop_ice_cream_into_bowl(ice_cream, bowl)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: bowl; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_food_ice_cream_2025_around_fridge_289(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

#goal_representation
 
behavior find_bowl(bowl: item):
    body:
        achieve close_char(char, bowl)

behavior scoop_ice_cream_into_bowl(ice_cream: item, bowl: item):
    body:
        achieve_once inside(ice_cream, bowl)

behavior __goal__():
    body:
        if exists bowl: item : (is_bowl(bowl) and visited(bowl)):
            # Check if there is a bowl already discovered
            bind bowl: item where:
                is_bowl(bowl) and visited(bowl)
            # Select the visited bowl
            find_bowl(bowl) # Move the character closer to the bowl

        else: 
            # If no bowl is found, start checking unvisited areas
            foreach bowl: item:
                if is_bowl(bowl) and not visited(bowl):
                    observe(bowl, "Is this a suitable bowl")
        
        bind bowl: item where:
            is_bowl(bowl) and visited(bowl)
        # Ensure bowl is declared before further use

        bind ice_cream: item where:
            is_food_ice_cream(ice_cream)
        # Select a source of ice cream
        scoop_ice_cream_into_bowl(ice_cream, bowl)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_bowl(bowl: item):
    body:
        achieve close_char(char, bowl)

behavior scoop_ice_cream_into_bowl(ice_cream: item, bowl: item):
    body:
        achieve_once inside(ice_cream, bowl)

behavior __goal__():
    body:
        if exists bowl: item : (is_bowl(bowl) and visited(bowl)):
            # Check if there is a bowl already discovered
            bind bowl: item where:
                is_bowl(bowl) and visited(bowl)
            # Select the visited bowl
            find_bowl(bowl) # Move the character closer to the bowl

        else: 
            # If no bowl is found, start checking unvisited areas
            foreach bowl: item:
                if is_bowl(bowl) and not visited(bowl):
                    observe(bowl, "Is this a suitable bowl")
        
        bind bowl: item where:
            is_bowl(bowl) and visited(bowl)
        # Ensure bowl is declared before further use

        bind ice_cream: item where:
            is_food_ice_cream(ice_cream)
        # Select a source of ice cream
        scoop_ice_cream_into_bowl(ice_cream, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2071, cupboard_229)walk_executor(bowl_2071)obs(bowl_2071, Is this a suitable bowl)walk_executor(cupboard_229)exp(bowl_2072, cupboard_229)walk_executor(bowl_2072)obs(bowl_2072, Is this a suitable bowl)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_ice_cream_2025, fridge_289)walk_executor(food_ice_cream_2025)grab_executor(food_ice_cream_2025)walk_executor(bowl_2071)putin_executor(food_ice_cream_2025, bowl_2071)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(bowl_2071, cupboard_229)
Fail to find bowl_2071 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(bowl_2071, coffee_table_2068)walk_executor(bowl_2071)obs(bowl_2071, Is this a suitable bowl)walk_executor(coffee_table_2068)exp(bowl_2072, coffee_table_2068)walk_executor(bowl_2072)obs(bowl_2072, Is this a suitable bowl)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_ice_cream_2025, fridge_289)walk_executor(food_ice_cream_2025)grab_executor(food_ice_cream_2025)walk_executor(bowl_2071)putin_executor(food_ice_cream_2025, bowl_2071)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(bowl_2071, coffee_table_2068)
Fail to find bowl_2071 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(bowl_2071, kitchen_counter_230)walk_executor(bowl_2071)obs(bowl_2071, Is this a suitable bowl)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(bowl_2072)obs(bowl_2072, Is this a suitable bowl)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_ice_cream_2025, fridge_289)walk_executor(food_ice_cream_2025)grab_executor(food_ice_cream_2025)walk_executor(bowl_2071)putin_executor(food_ice_cream_2025, bowl_2071)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Fail to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(bowl_2071)obs(bowl_2071, Is this a suitable bowl)walk_executor(table_226)exp(bowl_2072, table_226)walk_executor(bowl_2072)obs(bowl_2072, Is this a suitable bowl)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_ice_cream_2025, fridge_289)walk_executor(food_ice_cream_2025)grab_executor(food_ice_cream_2025)walk_executor(bowl_2071)putin_executor(food_ice_cream_2025, bowl_2071)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2071)obs(bowl_2071, Is this a suitable bowl)walk_executor(bowl_2072)obs(bowl_2072, Is this a suitable bowl)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_ice_cream_2025, fridge_289)walk_executor(food_ice_cream_2025)grab_executor(food_ice_cream_2025)walk_executor(bowl_2071)putin_executor(food_ice_cream_2025, bowl_2071)
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
obs(bowl_2071, Is this a suitable bowl)
Get this information:  bowl_2071 is close to table_226. bowl_2071 is close to character_65. bowl_2071 is on table_226. bowl_2071 is inside dining_room_201. bowl_2071 is DIRTY.
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2072. 
##############################
From agent.py
obs(bowl_2072, Is this a suitable bowl)
Get this information:  bowl_2072 is close to table_226. bowl_2072 is close to character_65. bowl_2072 is on table_226. bowl_2072 is inside dining_room_201. bowl_2072 is DIRTY.
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_ice_cream_2025, fridge_289)
Find food_ice_cream_2025. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2071)
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to address the fact that both bowls (bowl_2071 and bowl_2072) are dirty and thus unsuitable for use. A clean bowl is required to scoop the ice cream. Clean one of the dirty bowls or find another suitable clean bowl before proceeding to scoop the ice cream.
##############################
From agent.py
Human Instruction: You need to address the fact that both bowls (bowl_2071 and bowl_2072) are dirty and thus unsuitable for use. A clean bowl is required to scoop the ice cream. Clean one of the dirty bowls or find another suitable clean bowl before proceeding to scoop the ice cream.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for bowl_2071 around cupboard_229.
Action 4: Walk to coffee_table_2068.
Action 5: look for bowl_2071 around coffee_table_2068.
Action 6: Walk to kitchen_counter_230.
Action 7: look for bowl_2071 around kitchen_counter_230.
Action 8: Walk to table_226.
Action 9: look for bowl_2071 around table_226.
Action 10: Walk to bowl_2071.
Action 11: Observe around bowl_2071 with the question of Is this a suitable bowl.
Action 12: Walk to bowl_2072.
Action 13: Observe around bowl_2072 with the question of Is this a suitable bowl.
Action 14: Walk to fridge_289.
Action 15: Switch off fridge_289.
Action 16: Open fridge_289.
Action 17: look for food_ice_cream_2025 around fridge_289.
Action 18: Walk to bowl_2071.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior clean_bowl(bowl:item):
    body:
        wash(bowl)
        scrub(bowl)
        rinse(bowl)
        achieve_once clean(bowl)

behavior scoop_ice_cream_into_bowl(ice_cream:item, bowl:item):
    body:
        achieve_once inside(ice_cream, bowl)

behavior __goal__():
    body:
        bind bowl_2071: item where:
            is_bowl(bowl_2071) and dirty(bowl_2071)
        bind bowl_2072: item where:
            is_bowl(bowl_2072) and dirty(bowl_2072)

        bind ice_cream: item where:
            is_food_ice_cream(ice_cream) and id[ice_cream] == 2025

        if dirty(bowl_2071):
            clean_bowl(bowl_2071)
            scoop_ice_cream_into_bowl(ice_cream, bowl_2071)
        else:
            clean_bowl(bowl_2072)
            scoop_ice_cream_into_bowl(ice_cream, bowl_2072)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior clean_bowl(bowl:item):
    body:
        wash(bowl)
        scrub(bowl)
        rinse(bowl)
        achieve_once clean(bowl)

behavior scoop_ice_cream_into_bowl(ice_cream:item, bowl:item):
    body:
        achieve_once inside(ice_cream, bowl)

behavior __goal__():
    body:
        bind bowl_2071: item where:
            is_bowl(bowl_2071) and dirty(bowl_2071)
        bind bowl_2072: item where:
            is_bowl(bowl_2072) and dirty(bowl_2072)

        bind ice_cream: item where:
            is_food_ice_cream(ice_cream) and id[ice_cream] == 2025

        if dirty(bowl_2071):
            clean_bowl(bowl_2071)
            scoop_ice_cream_into_bowl(ice_cream, bowl_2071)
        else:
            clean_bowl(bowl_2072)
            scoop_ice_cream_into_bowl(ice_cream, bowl_2072)
##############################
From agent.py-> find a plan in act()
grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(bowl_2071)switchoff_executor(faucet_43)walk_executor(bowl_2071)scrub_executor(bowl_2071)rinse_executor(bowl_2071)walk_executor(food_ice_cream_2025)grab_executor(food_ice_cream_2025)walk_executor(bowl_2071)putin_executor(food_ice_cream_2025, bowl_2071)
##############################
From agent.py
grab_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. Grabbing bowl_2071 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(bowl_2071)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. bowl_2071 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the bowl_2071. 
##############################
From agent.py
scrub_executor(bowl_2071)
Robot find: Robot is close to the bowl_2071. 
##############################
From agent.py
rinse_executor(bowl_2071)
Robot find: Robot is close to the bowl_2071. 
##############################
From agent.py
walk_executor(food_ice_cream_2025)
Robot find: Robot is close to the bowl_2071. Robot is close to the fridge_289. Robot is close to the food_ice_cream_2025. 
##############################
From agent.py
grab_executor(food_ice_cream_2025)
Robot find: Robot is close to the bowl_2071. Robot is close to the fridge_289. Robot is close to the food_ice_cream_2025. Grabbing food_ice_cream_2025 by left hand. 
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_ice_cream_2025. 
##############################
From agent.py
putin_executor(food_ice_cream_2025, bowl_2071)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_ice_cream_2025. bowl_2071 is close food_ice_cream_2025. food_ice_cream_2025 is inside bowl_2071. food_ice_cream_2025 is close bowl_2071. food_ice_cream_2025 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior add_jam_on_ice_cream(jam:item, ice_cream:item):
    body:
        achieve_once on(jam, ice_cream)

behavior __goal__():
    body:
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream) and inside(ice_cream, bowl_2071)
        # Select the bowl of ice cream prepared in the previous subtask

        bind jam: item where:
            is_food_jam(jam)
        # Select the jam to add on top of the ice cream

        add_jam_on_ice_cream(jam, ice_cream)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_jam_on_ice_cream(jam:item, ice_cream:item):
    body:
        achieve_once on(jam, ice_cream)

behavior __goal__():
    body:
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream) and inside(ice_cream, bowl_2071)
        # Select the bowl of ice cream prepared in the previous subtask

        bind jam: item where:
            is_food_jam(jam)
        # Select the jam to add on top of the ice cream

        add_jam_on_ice_cream(jam, ice_cream)

##############################
From agent.py-> find a plan in act()
walk_executor(food_jam_2026)grab_executor(food_jam_2026)walk_executor(food_ice_cream_2025)put_executor(food_jam_2026, food_ice_cream_2025)
##############################
From agent.py
walk_executor(food_jam_2026)
Robot find: Robot is close to the bowl_2071. Robot is close to the fridge_289. Robot is close to the food_jam_2026. 
##############################
From agent.py
grab_executor(food_jam_2026)
Robot find: Robot is close to the bowl_2071. Robot is close to the fridge_289. Robot is close to the food_jam_2026. Grabbing food_jam_2026 by left hand. 
##############################
From agent.py
walk_executor(food_ice_cream_2025)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_jam_2026. Robot is close to the food_ice_cream_2025. 
##############################
From agent.py
put_executor(food_jam_2026, food_ice_cream_2025)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_jam_2026. Robot is close to the food_ice_cream_2025. food_jam_2026 is close food_ice_cream_2025. food_ice_cream_2025 is close food_jam_2026. food_jam_2026 is on food_ice_cream_2025. food_jam_2026 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Get a bowl of ice cream and add some jam on the top.
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(coffee_table_2068)', 'walk_executor(kitchen_counter_230)', 'walk_executor(table_226)', 'walk_executor(bowl_2071)', 'walk_executor(bowl_2072)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(bowl_2071)', 'grab_executor(bowl_2071)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(bowl_2071)', 'switchoff_executor(faucet_43)', 'walk_executor(bowl_2071)', 'scrub_executor(bowl_2071)', 'rinse_executor(bowl_2071)', 'walk_executor(food_ice_cream_2025)', 'grab_executor(food_ice_cream_2025)', 'walk_executor(bowl_2071)', 'putin_executor(food_ice_cream_2025, bowl_2071)', 'walk_executor(food_jam_2026)', 'grab_executor(food_jam_2026)', 'walk_executor(food_ice_cream_2025)', 'put_executor(food_jam_2026, food_ice_cream_2025)']
Time info:
Time consume: 148 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 92
goal generate times: 3
goal correct times: 1
action_num: 27

Task complete rate:
1
Scene_id: 0
##############################
