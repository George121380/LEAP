From agent.py
Reset goals: The sub-goals are: 
['1. Brew coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior plug_and_turn_on_coffee_maker(coffee_maker: item, power_socket: item):
    body:
        achieve_once plugged(coffee_maker)
        # Plug the coffee maker into the power socket
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker

behavior add_water_to_coffee_maker(coffee_maker: item, sink: item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the sink

behavior brew_coffee(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select a power socket

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling the coffee maker with water

        plug_and_turn_on_coffee_maker(coffee_maker, power_socket)
        add_water_to_coffee_maker(coffee_maker, sink)
        brew_coffee(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior plug_and_turn_on_coffee_maker(coffee_maker: item, power_socket: item):
    body:
        achieve_once plugged(coffee_maker)
        # Plug the coffee maker into the power socket
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker

behavior add_water_to_coffee_maker(coffee_maker: item, sink: item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water from the sink

behavior brew_coffee(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select a power socket

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling the coffee maker with water

        plug_and_turn_on_coffee_maker(coffee_maker, power_socket)
        add_water_to_coffee_maker(coffee_maker, sink)
        brew_coffee(coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add water to the coffee maker in order for it to brew coffee successfully.
##############################
From agent.py
Human Instruction: You need to add water to the coffee maker in order for it to brew coffee successfully.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water

behavior brew_coffee(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)
        # Ensure the coffee maker is on to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==130
        # Select the coffee maker with ID 130

        fill_coffee_maker_with_water(coffee_maker)
        brew_coffee(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

behavior add_water_to_coffee_maker(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)

behavior brew_coffee(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Select coffee maker with ID 130
        
        add_water_to_coffee_maker(coffee_maker)
        # Ensure the coffee maker has water to brew coffee
        
        brew_coffee(coffee_maker)
        # Start brewing the coffee

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffe_maker: item, water_source: item):
    body:
        achieve_once has_water(coffe_maker)
        # Add water to the coffee maker from the water source

behavior brew_coffee(coffe_maker: item):
    body:
        achieve is_on(coffe_maker)
        # The coffee maker should be on to initiate brewing

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 130
        # Select the coffee maker with ID 130

        bind water_source: item where:
            is_sink(water_source)
        # Select a water source, such as a sink, for filling the coffee maker

        fill_coffee_maker_with_water(coffe_maker, water_source)
        brew_coffee(coffe_maker)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Use the coffee maker to make a cup of coffee.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_kitchen_counter_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2065_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior fill_coffee_maker_with_water(coffee_maker: item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water

behavior make_coffee(coffee_maker: item, cup: item):
    body:
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker
        achieve_once inside(coffee_maker, cup)
        # Brew the coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_coffee_maker_with_water(coffee_maker)
        make_coffee(coffee_maker, cup)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2134_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee_with_coffee_maker(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        make_coffee_with_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_coffee_filter_2065_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker: item):
    body:
        achieve_once has_water(coffee_maker)
        # Ensure the coffee maker has water

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker with ID coffe_maker_130
        
        fill_coffee_maker_with_water(coffee_maker)
        # Fill the coffee maker with water to be able to brew coffee
        
        achieve has_water(coffee_maker) 
        # Maintain the state where the coffee maker contains water


#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2132_around_kitchen_counter_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker: item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water

behavior brew_coffee(coffee_maker: item):
    body:
        achieve_once is_on(coffee_maker)
        # Ensure the coffee maker is on to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Select the coffee maker with ID 130

        fill_coffee_maker_with_water(coffee_maker)
        brew_coffee(coffee_maker)
        # Brew the coffee with the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_cup_2134_around_kitchen_counter_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2053_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee(coffeemaker: item):
    body:
        achieve has_water(coffeemaker) # Ensure the coffeemaker has water
        achieve is_on(coffeemaker) # Ensure the coffeemaker is turned on

behavior __goal__():
    body:
        bind coffeemaker: item where:
            is_coffe_maker(coffeemaker)
        # Select a coffee maker
        prepare_coffee(coffeemaker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_coffee_filter_2065_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_coffee_maker(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)

behavior brew_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is on to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        add_water_to_coffee_maker(coffee_maker)
        # Add water to the coffee maker
        
        brew_coffee(coffee_maker)
        # Brew the coffee

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)']
Time info:
Time consume: 133 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 9
goal generate times: 10
goal correct times: 0
action_num: 2

Task complete rate:
Keystate: k1 - Requires: 19 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
