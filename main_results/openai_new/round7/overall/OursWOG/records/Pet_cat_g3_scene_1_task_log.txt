From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water.', '2. Put the bowl on the table in the home office.', '3. Find the cat.', '4. Put the cat on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2142_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl: item, sink: item):
    body:
        achieve_once has_water(bowl)
        # Fill the bowl with water from the sink

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the bowl with water

        fill_bowl_with_water(bowl, sink)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_bowl_with_water(bowl: item, sink: item):
    body:
        achieve_once has_water(bowl)
        # Fill the bowl with water from the sink

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the bowl with water

        fill_bowl_with_water(bowl, sink)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. 
##############################
From agent.py
grab_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_table_270(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_table_cloth_2005_around_table_199(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        
        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        
        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)

        place_bowl_on_table(bowl, table)

##############################
From agent.py-> find a plan in act()
walk_executor(table_270)put_executor(bowl_2140, table_270)
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the bowl_2140. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(bowl_2140, table_270)
Robot find: Robot is close to the bowl_2140. Robot is close to the couch_269. Robot is close to the table_270. bowl_2140 is close table_270. bowl_2140 is on table_270. table_270 is close bowl_2140. bowl_2140 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the bowl is placed on the table in the home office. Currently, the bowl has been placed on table_270, but it must be confirmed that table_270 is inside the home office.
##############################
From agent.py
Human Instruction: You need to ensure that the bowl is placed on the table in the home office. Currently, the bowl has been placed on table_270, but it must be confirmed that table_270 is inside the home office.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for bowl_2140 around kitchen_counter_119.
Action 3: Walk to bowl_2140.
Action 4: Grab bowl_2140.
Action 5: Walk to faucet_20.
Action 6: Switch on faucet_20.
Action 7: Switch off faucet_20.
Action 8: Walk to table_270.
Action 9: Put bowl_2140 on table_270.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_desk_193(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_home_office(table: item):
    # Function to check if the table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select table with ID 270

        if not is_table_in_home_office(table):
            observe(table, "Check if the table is in the home office")
            # Observe the location of the table to confirm if its in the home office

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_food_carrot_2086_around_stove_2135(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_carrot,stove_instance)
        else:
            exp(food_carrot,stove_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,stove_instance]=True
        close[stove_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_bowl_on_table_in_home_office(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

def is_table_in_home_office(table:item):
    # Function to check if a table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water in it

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select table with ID 270

        if not is_table_in_home_office(table):
            observe(table, "Check if the table is inside the home office")
            # Verify the location of the table
        
        ensure_bowl_on_table_in_home_office(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_table_in_home_office(table:item):
    # Function to check if a table is inside the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140
        # Select the bowl that was filled with water

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select the table with ID 270

        if not is_table_in_home_office(table):
            observe(table, "Confirm if table is inside the home office")
        
        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_desk_193(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_food_carrot_2015_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def is_inside_home_office(table: item):
    # Function to check if a table is inside the home office
    symbol inside_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return inside_home_office

behavior confirm_and_move_bowl(bowl: item, table: item):
    body:
        if not is_inside_home_office(table):
            observe(table, "Check if the table is inside the home office")
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140

        bind table: item where:
            is_table(table) and id[table] == 270

        confirm_and_move_bowl(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_inside_home_office(table:item):
    # Function to check if the table is inside the home office
    symbol inside_office=exists room: item : (is_home_office(room) and inside(table, room))
    return inside_office

behavior ensure_bow_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140
        # Select bowl with ID 2140

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select table with ID 270

        if not is_inside_home_office(table):
            observe(table, "Check if the table is inside the home office")
            # Ensure the table is inside the home office

        ensure_bow_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_inside_home_office(item: item):
    # Check if an item is inside the home office
    symbol is_inside=exists room: item : (is_home_office(room) and inside(item, room))
    return is_inside

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl filled with water

        bind table: item where:
            is_table(table) and is_inside_home_office(table) and id[table] == 270
        # Confirm table_270 is inside the home office

        achieve on(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior ensure_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        
        bind home_office: item where:
            is_home_office(home_office)
        
        bind table: item where:
            is_table(table) and inside(table, home_office)

        ensure_bowl_on_table(bowl, table)

        if not inside(table, home_office):
            observe(table_270, "Check if table_270 is inside the home office")
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
Behavior check_if_table_inside_home_office(table:item, home_office:item):
    body:
        if not inside(table, home_office):
            observe(table, "Check if the table is inside the home office")

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140
        # Select bowl_2140 that needs to be placed

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select table_270 where the bowl will be placed

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        check_if_table_inside_home_office(table, home_office)
        # Ensure the table is inside the home office

        place_bowl_on_table(bowl, table) 
        # Place the bowl on the table in the home office
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'Behavior') at line 5242, column 1.
Expected one of: 
	* $END
	* DEF
	* CONTROLLER
	* GENERATOR
	* _PRAGMA_KEYWORD
	* _NEWLINE
	* FEATURE
	* GOAL
	* DOMAIN
	* INCLUDE
	* UNDIRECTED_GENERATOR
	* OBJECTS
	* BEHAVIOR
	* TYPEDEF
	* INIT
	* IMPORT

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

def check_if_table_inside_home_office(table:item, home_office:item):
    if not inside(table, home_office):
        observe(table, "Check if the table is inside the home office")

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140

        bind table: item where:
            is_table(table) and id[table] == 270

        bind home_office: item where:
            is_home_office(home_office)

        check_if_table_inside_home_office(table, home_office)

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2003_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#goal_representation
 
def check_if_table_inside_home_office(table:item, home_office:item):
    if not inside(table, home_office):
        observe(table, "Check if the table is inside the home office")

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140

        bind table: item where:
            is_table(table) and id[table] == 270

        bind home_office: item where:
            is_home_office(home_office)

        check_if_table_inside_home_office(table, home_office)

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_food_carrot_2086_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def is_inside_home_office(table:item):
    # Function to check if the table is inside the home office
    symbol inside_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return inside_home_office

behavior __goal__():
    body:
        bind table_270: item where:
            is_table(table_270) and id[table_270] == 270
        # Select the table with ID 270

        if not is_inside_home_office(table_270):
            observe(table_270, "Check if the table is inside the home office")

        achieve on(bowl_2140, table_270)
        # Ensure bowl_2140 is placed on table_270

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: bowl_2140; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_apple_2081_around_fridge_126(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

behavior find_food_cereal_2087_around_fridge_126(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cereal,fridge_instance)
        else:
            exp(food_cereal,fridge_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,fridge_instance]=True
        close[fridge_instance,food_cereal]=True
    

behavior find_cup_2134_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation
 
def is_inside_home_office(table:item):
    # Function to check if the table is inside the home office
    symbol inside_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return inside_home_office

behavior __goal__():
    body:
        bind table_270: item where:
            is_table(table_270) and id[table_270] == 270
        # Select the table with ID 270
        
        bind bowl_2140: item where:
            is_bowl(bowl_2140)
        # Define bowl_2140 before using it

        if not is_inside_home_office(table_270):
            observe(table_270, "Check if the table is inside the home office")

        achieve on(bowl_2140, table_270)
        # Ensure bowl_2140 is placed on table_270


#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Prepare a bowl of water and put the bowl on the table in home office. Then find my cat put it on the table.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(bowl_2140)', 'grab_executor(bowl_2140)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(table_270)', 'put_executor(bowl_2140, table_270)']
Time info:
Time consume: 203 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 89
goal generate times: 11
goal correct times: 1
action_num: 8

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
