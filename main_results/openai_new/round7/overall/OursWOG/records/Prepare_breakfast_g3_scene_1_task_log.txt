From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2092_around_kitchen_counter_119(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def is_stove_available():
    # Check if there is a stove available by checking visited states
    symbol available=exists o: item : (is_stove(o) and visited(o))
    return available

behavior __goal__():
    body:
        if is_stove_available():
            # If a stove is already found, move closer to it
            bind stove: item where:
                is_stove(stove) and visited(stove)
            achieve close_char(char, stove)

        else:
            # Explore the area to find a stove if none are visited yet
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Check for a stove to boil water")


behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_egg(pot: item, stove: item, egg: item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve_once is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the egg

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be boiled
        
        fill_pot_with_water(pot, sink)
        # Fill the pot with water
        boil_egg(pot, stove, egg)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Behavior __goal__ already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2092_around_kitchen_counter_119(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

#goal_representation
 
def is_stove_available():
    # Check if there is a stove available by checking visited states
    symbol available=exists o: item : (is_stove(o) and visited(o))
    return available

behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_egg(pot: item, stove: item, egg: item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve_once is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        if is_stove_available():
            # If a stove is already found, move closer to it
            bind stove: item where:
                is_stove(stove) and visited(stove)
            achieve close_char(char, stove)

        else:
            # Explore the area to find a stove if none are visited yet
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Check for a stove to boil water")

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the egg

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be boiled
        
        fill_pot_with_water(pot, sink)
        # Fill the pot with water
        boil_egg(pot, stove, egg)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_stove_available():
    # Check if there is a stove available by checking visited states
    symbol available=exists o: item : (is_stove(o) and visited(o))
    return available

behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_egg(pot: item, stove: item, egg: item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve_once is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        if is_stove_available():
            # If a stove is already found, move closer to it
            bind stove: item where:
                is_stove(stove) and visited(stove)
            achieve close_char(char, stove)

        else:
            # Explore the area to find a stove if none are visited yet
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Check for a stove to boil water")

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the egg

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be boiled
        
        fill_pot_with_water(pot, sink)
        # Fill the pot with water
        boil_egg(pot, stove, egg)
        # Boil the egg in the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)obs(stove_2135, Check for a stove to boil water)walk_executor(kitchen_counter_119)exp(pot_2138, kitchen_counter_119)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(kitchen_counter_119)exp(food_egg_2092, kitchen_counter_119)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
obs(stove_2135, Check for a stove to boil water)
Get this information:  stove_2135 is close to kitchen_counter_119. stove_2135 is close to character_240. stove_2135 is on kitchen_counter_119. stove_2135 is inside dining_room_41. stove_2135 is OPEN. stove_2135 is OFF.
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(pot_2138, kitchen_counter_119)
Find pot_2138. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_fridge_126(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_egg(pot: item, stove: item, egg: item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2138
        # Select pot_2138

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling pot with water

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove_2135

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to boil

        fill_pot_with_water(pot, sink)
        boil_egg(pot, stove, egg)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_egg(pot: item, stove: item, egg: item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2138
        # Select pot_2138

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling pot with water

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove_2135

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to boil

        fill_pot_with_water(pot, sink)
        boil_egg(pot, stove, egg)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_2138)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the pot_2138. 
##############################
From agent.py
open_executor(pot_2138)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the pot_2138. pot_2138 is opened. 
##############################
From agent.py
grab_executor(pot_2138)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the pot_2138. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_2138. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_2138. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_2138. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the pot_2138. Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the pot_2138. Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the pot_2138. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)putin_executor(food_egg_2092, pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the pot_2138. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2092, pot_2138)
Robot find: Robot is close to the pot_2138. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. food_egg_2092 is inside pot_2138. pot_2138 is close food_egg_2092. food_egg_2092 is close pot_2138. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_2138, stove_2135)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close pot_2138. pot_2138 is close stove_2135. pot_2138 is on stove_2135. pot_2138 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water to complete the sub-task of boiling the egg. You need to ensure that the pot contains water before placing it on the stove.
##############################
From agent.py
Human Instruction: The pot needs to be filled with water to complete the sub-task of boiling the egg. You need to ensure that the pot contains water before placing it on the stove.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: Observe around stove_2135 with the question of Check for a stove to boil water.
Action 4: Walk to kitchen_counter_119.
Action 5: look for pot_2138 around kitchen_counter_119.
Action 6: Walk to pot_2138.
Action 7: Open pot_2138.
Action 8: Grab pot_2138.
Action 9: Walk to faucet_20.
Action 10: Switch on faucet_20.
Action 11: Switch off faucet_20.
Action 12: Walk to fridge_126.
Action 13: Switch off fridge_126.
Action 14: Open fridge_126.
Action 15: look for food_egg_2092 around fridge_126.
Action 16: Grab food_egg_2092.
Action 17: Put food_egg_2092 into pot_2138.
Action 18: Walk to stove_2135.
Action 19: Put pot_2138 on stove_2135.
Action 20: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_egg(pot: item, stove: item, egg: item):
    body:
        achieve_once inside(egg, pot)
        # Put the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select the pot with ID 2138

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Select the egg with ID 2092

        fill_pot_with_water(pot, faucet)
        boil_egg(pot, stove, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_ice_2024_around_plate_2152(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(ice,plate_instance)
        else:
            exp(ice,plate_instance)
    eff:
        unknown[ice]=False
        close[ice,plate_instance]=True
        close[plate_instance,ice]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior boil_egg(pot: item, stove: item, egg: item):
    body:
        achieve_once inside(egg, pot)
        # Put the egg inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that is filled with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the egg

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Select the egg with ID 2092

        fill_pot_with_water(pot)
        boil_egg(pot, stove, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select pot_2138

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove_2135

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Select food_egg_2092

        achieve has_water(pot)
        # Ensure the pot has water

        achieve_once inside(egg, pot)
        # Place the egg inside the pot

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the egg

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior place_egg_in_pot(egg: item, pot: item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

behavior boil_egg(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the egg

        fill_pot_with_water(pot, faucet)
        place_egg_in_pot(egg, pot)
        boil_egg(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(pot: item, stove: item, egg: item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select pot_2138

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove_2135

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Select food_egg_2092

        boil_egg(pot, stove, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_egg(egg: item, pot: item, stove: item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092
        # Select the egg with ID 2092

        fill_pot_with_water(pot, faucet)
        boil_egg(egg, pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Boil egg.
Action History:
['walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(kitchen_counter_119)', 'walk_executor(pot_2138)', 'open_executor(pot_2138)', 'grab_executor(pot_2138)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_egg_2092)', 'putin_executor(food_egg_2092, pot_2138)', 'walk_executor(stove_2135)', 'put_executor(pot_2138, stove_2135)', 'switchon_executor(stove_2135)']
Time info:
Time consume: 246 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 38
goal generate times: 8
goal correct times: 1
action_num: 17

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
