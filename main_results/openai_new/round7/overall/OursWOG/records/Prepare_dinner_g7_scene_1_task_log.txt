From agent.py
Reset goals: The sub-goals are: 
['1. Find and prepare the ingredients needed for the fish soup, including cleaning any necessary components. ', '2. Cook the fish soup by combining the prepared ingredients in a pot and bringing them to a boil.', '3. Ensure the soup is cooked through and season as necessary, if desired.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2109_around_cupboard_117(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_carrot_2015_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_onion_2009_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_orange_2061_around_fridge_126(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
def is_needed_ingredient(ingredient:item):
    # Function to check if the item is a needed ingredient for the fish soup
    return is_food_fish(ingredient) or is_food_vegetable(ingredient) or is_food_salt(ingredient)

behavior gather_ingredients_for_fish_soup(ingredient:item):
    body:
        achieve_once clean(ingredient)
        # Clean the needed ingredient for the fish soup

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_needed_ingredient(ingredient):
                gather_ingredients_for_fish_soup(ingredient)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_needed_ingredient(ingredient:item):
    # Function to check if the item is a needed ingredient for the fish soup
    return is_food_fish(ingredient) or is_food_vegetable(ingredient) or is_food_salt(ingredient)

behavior gather_ingredients_for_fish_soup(ingredient:item):
    body:
        achieve_once clean(ingredient)
        # Clean the needed ingredient for the fish soup

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_needed_ingredient(ingredient):
                gather_ingredients_for_fish_soup(ingredient)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)walk_executor(cupboard_117)exp(food_salt_2109, cupboard_117)walk_executor(food_salt_2109)grab_executor(food_salt_2109)walk_executor(kitchen_counter_119)put_executor(food_fish_2093, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(food_salt_2109)switchoff_executor(faucet_121)walk_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)walk_executor(cupboard_117)exp(food_salt_2041, cupboard_117)walk_executor(food_salt_2041)grab_executor(food_salt_2041)walk_executor(kitchen_counter_119)put_executor(food_salt_2109, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(food_salt_2041)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(kitchen_counter_119)put_executor(food_fish_2093, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(food_vegetable_2113)switchoff_executor(faucet_121)walk_executor(cupboard_117)exp(food_salt_2041, cupboard_117)walk_executor(food_salt_2041)grab_executor(food_salt_2041)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_salt_2041)switchoff_executor(faucet_20)
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_fish_2093 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_fish_2093, kitchen_counter_119)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close food_fish_2093. food_fish_2093 is close kitchen_counter_119. food_fish_2093 is on kitchen_counter_119. food_fish_2093 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_121)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. faucet_121 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. food_vegetable_2113 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_121)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. faucet_121 is turned off. 
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the food_vegetable_2113. Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(food_salt_2041, cupboard_117)
Find food_salt_2041. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the necessary ingredients and a pot.', '2. Prepare the ingredients for the fish soup.', '3. Cook the prepared ingredients in the pot to make the fish soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_carrot_2015_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_onion_2104_around_cupboard_118(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_ingredients_and_pot():
    body:
        foreach ingredient: item:
            if is_food_fish(ingredient) or is_food_vegetable(ingredient) or is_food_salt(ingredient):
                achieve close_char(char, ingredient)
                observe(ingredient, "Check the ingredient")

behavior find_pot():
    body:
        if exists pot: item : (is_pot(pot) and visited(pot)):
            bind pot: item where:
                is_pot(pot) and visited(pot)
            achieve close_char(char, pot)

        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Check if its a usable pot")

behavior __goal__():
    body:
        gather_ingredients_and_pot()
        find_pot()

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_carrot_2015_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_onion_2104_around_cupboard_118(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def has_pot_and_ingredients():
    # Function to check if the necessary ingredients and a pot have been found
    symbol ingredients_found=exists o: item : ((is_food_fish(o) or is_food_vegetable(o) or is_food_salt(o)) and visited(o))
    symbol pot_found=exists p: item : (is_pot(p) and visited(p))
    return ingredients_found and pot_found

behavior __goal__():
    body:
        if has_pot_and_ingredients():
            # If we have already found the necessary ingredients and a pot
            bind necessary_item: item where:
                (is_food_fish(necessary_item) or is_food_vegetable(necessary_item) or is_food_salt(necessary_item) or is_pot(necessary_item)) and visited(necessary_item)
            # Move closer to the found item
            achieve close_char(char, necessary_item)

        else:
            # If necessary ingredients or pot are not found, start exploring
            foreach item: item:
                if (is_food_fish(item) or is_food_vegetable(item) or is_food_salt(item) or is_pot(item)) and not visited(item):
                    observe(item, "Check for pot and necessary ingredients")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_pot_and_ingredients():
    # Function to check if the necessary ingredients and a pot have been found
    symbol ingredients_found=exists o: item : ((is_food_fish(o) or is_food_vegetable(o) or is_food_salt(o)) and visited(o))
    symbol pot_found=exists p: item : (is_pot(p) and visited(p))
    return ingredients_found and pot_found

behavior __goal__():
    body:
        if has_pot_and_ingredients():
            # If we have already found the necessary ingredients and a pot
            bind necessary_item: item where:
                (is_food_fish(necessary_item) or is_food_vegetable(necessary_item) or is_food_salt(necessary_item) or is_pot(necessary_item)) and visited(necessary_item)
            # Move closer to the found item
            achieve close_char(char, necessary_item)

        else:
            # If necessary ingredients or pot are not found, start exploring
            foreach item: item:
                if (is_food_fish(item) or is_food_vegetable(item) or is_food_salt(item) or is_pot(item)) and not visited(item):
                    observe(item, "Check for pot and necessary ingredients")

##############################
From agent.py-> find a plan in act()
walk_executor(food_fish_2093)obs(food_fish_2093, Check for pot and necessary ingredients)walk_executor(food_salt_2109)obs(food_salt_2109, Check for pot and necessary ingredients)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Check for pot and necessary ingredients)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check for pot and necessary ingredients)walk_executor(pot_78)obs(pot_78, Check for pot and necessary ingredients)walk_executor(stove_2135)open_executor(stove_2135)exp(pot_2040, stove_2135)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Check for pot and necessary ingredients)walk_executor(food_salt_2041)obs(food_salt_2041, Check for pot and necessary ingredients)
##############################
From agent.py
walk_executor(food_fish_2093)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_fish_2093. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
obs(food_fish_2093, Check for pot and necessary ingredients)
Get this information:  food_fish_2093 is inside dining_room_41. food_fish_2093 is close to kitchen_counter_119. food_fish_2093 is close to character_240. food_fish_2093 is on kitchen_counter_119. food_fish_2093 is CLEAN.
##############################
From agent.py
walk_executor(food_salt_2109)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_salt_2109. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_salt_2109, Check for pot and necessary ingredients)
Get this information:  food_salt_2109 is inside dining_room_41. food_salt_2109 is inside fridge_126. food_salt_2109 is close to fridge_126. food_salt_2109 is close to character_240. food_salt_2109 is CLEAN.
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. 
##############################
From agent.py
obs(food_vegetable_2113, Check for pot and necessary ingredients)
Get this information:  food_vegetable_2113 is inside dining_room_41. food_vegetable_2113 is close to character_240. food_vegetable_2113 is CLEAN.
##############################
From agent.py
walk_executor(pot_2138)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
open_executor(pot_2138)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. pot_2138 is opened. 
##############################
From agent.py
obs(pot_2138, Check for pot and necessary ingredients)
Get this information:  pot_2138 is inside dining_room_41. pot_2138 is close to kitchen_counter_119. pot_2138 is close to character_240. pot_2138 is on kitchen_counter_119. pot_2138 is OPEN.
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
obs(pot_78, Check for pot and necessary ingredients)
Get this information:  pot_78 is close to tray_128. pot_78 is close to wall_64. pot_78 is close to wall_67. pot_78 is close to toaster_132. pot_78 is close to wall_68. pot_78 is close to knifeblock_76. pot_78 is close to walllamp_141. pot_78 is close to floor_46. pot_78 is close to cupboard_117. pot_78 is close to cupboard_118. pot_78 is close to kitchen_counter_119. pot_78 is close to ceiling_55. pot_78 is close to kitchen_counter_122. pot_78 is close to sink_120. pot_78 is close to stovefan_125. pot_78 is close to oven_127. pot_78 is close to character_240. pot_78 is on oven_127. pot_78 is inside dining_room_41. pot_78 is CLEAN. pot_78 is OPEN.
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(pot_2040, stove_2135)
Fail to find pot_2040 around stove_2135. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find fish and any necessary ingredients for fish soup.', '2. Clean the fish and any ingredients that require washing.', '3. Cook the fish in a pot along with the ingredients to make the soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_carrot_2015_around_table_270(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_carrot,table_instance)
        else:
            exp(food_carrot,table_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,table_instance]=True
        close[table_instance,food_carrot]=True
    

behavior find_food_onion_2009_around_cupboard_118(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def has_fish_or_vegetable_or_salt():
    # Function to check if there is a fish, vegetable, or salt already identified
    symbol available=exists o: item : ((is_food_fish(o) or is_food_vegetable(o) or is_food_salt(o)) and visited(o))
    return available

behavior __goal__():
    body:
        if has_fish_or_vegetable_or_salt():
            # If we have already found fish, vegetable, or salt based on known information
            bind item: item where:
                (is_food_fish(item) or is_food_vegetable(item) or is_food_salt(item)) and visited(item)
            # Achieve close to the item
            achieve close_char(char, item)

        else:
            # If no fish, vegetable, or salt is found in the visited areas, start exploring
            foreach o: item:
                if (is_food_fish(o) or is_food_vegetable(o) or is_food_salt(o)) and not visited(o):
                    observe(o, "Check the location of the item")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2040_around_curtain_204(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==204
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(pot,curtain_instance)
        else:
            exp(pot,curtain_instance)
    eff:
        unknown[pot]=False
        close[pot,curtain_instance]=True
        close[curtain_instance,pot]=True
    

behavior find_food_carrot_2086_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_onion_2104_around_cupboard_118(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def has_necessary_ingredients_near_fish(fish: item):
    # Function to check if necessary ingredients are near the fish
    symbol has_ingredients=exists o: item : ((is_food_vegetable(o) or is_food_salt(o)) and close(o, fish))
    return has_ingredients

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2093
        # Select the fish found earlier

        if has_necessary_ingredients_near_fish(fish):
            bind vegetable: item where:
                is_food_vegetable(vegetable) and close(vegetable, fish)
            bind salt: item where:
                is_food_salt(salt) and close(salt, fish)
            achieve_once close_char(char, fish)
            # Get close to the fish
        else:
            # If necessary ingredients are not found around the fish, observe all unvisited items
            foreach o: item:
                if not visited(o):
                    observe(o, "Check for pot and necessary ingredients")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_table_270(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pot,table_instance)
        else:
            exp(pot,table_instance)
    eff:
        unknown[pot]=False
        close[pot,table_instance]=True
        close[table_instance,pot]=True
    

behavior find_food_onion_2048_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def has_fish_or_ingredients(item:item):
    # Function to check if there is fish or other necessary ingredients for the soup
    symbol has_fish_or_ingredients=exists o: item : ((is_food_fish(o) or is_food_vegetable(o) or is_food_salt(o)) and close(o, item))
    return has_fish_or_ingredients

behavior __goal__():
    body:
        if exists item: item : (has_fish_or_ingredients(item)):
            # Check if there is fish or ingredients based on the available information
            bind item: item where:
                has_fish_or_ingredients(item)
            # Move close to the fish or other necessary ingredients
            achieve close_char(char, item)
            
        else:
            # If no fish or ingredients are found, initiate exploration to locate them
            foreach item: item:
                if not visited(item):
                    observe(item, "Check for fish and necessary ingredients for fish soup")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_fish_2093)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_fish_2093)', 'switchoff_executor(faucet_20)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(kitchen_counter_119)', 'put_executor(food_fish_2093, kitchen_counter_119)', 'switchon_executor(faucet_121)', 'wash_executor(food_vegetable_2113)', 'switchoff_executor(faucet_121)', 'walk_executor(cupboard_117)', 'walk_executor(food_fish_2093)', 'walk_executor(food_salt_2109)', 'walk_executor(food_vegetable_2113)', 'walk_executor(pot_2138)', 'open_executor(pot_2138)', 'walk_executor(pot_78)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)']
Time info:
Time consume: 228 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 139
goal generate times: 6
goal correct times: 0
action_num: 24

Task complete rate:
Keystate: k1 - Requires: 22 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
