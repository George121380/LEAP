From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onions.', '2. Place the chicken and onions in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_stove_2065(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_chicken,stove_instance)
        else:
            exp(food_chicken,stove_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,stove_instance]=True
        close[stove_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item:item):
    body:
        if dirty(item):
            wash(item)
            scrub(item)
            rinse(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_item(chicken)
        clean_item(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_stove_2065(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_chicken,stove_instance)
        else:
            exp(food_chicken,stove_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,stove_instance]=True
        close[stove_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item: item):
    body:
        wash(item)
        achieve_once clean(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to be cleaned

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion to be cleaned

        clean_item(chicken)
        clean_item(onion)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_item(item: item):
    body:
        wash(item)
        achieve_once clean(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to be cleaned

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion to be cleaned

        clean_item(chicken)
        clean_item(onion)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(food_chicken_2017, stove_2065)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_chicken_2017)switchoff_executor(faucet_43)walk_executor(kitchen_counter_230)exp(food_onion_2032, kitchen_counter_230)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(kitchen_counter_230)put_executor(food_chicken_2017, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_onion_2032)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(food_chicken_2017, stove_2065)
Fail to find food_chicken_2017 around stove_2065. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_chicken_2017)switchoff_executor(faucet_43)walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_onion_2032, cupboard_229)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(kitchen_counter_230)put_executor(food_chicken_2017, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_onion_2032)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2017)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_chicken_2017)switchoff_executor(faucet_43)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(kitchen_counter_230)put_executor(food_chicken_2017, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_onion_2032)switchoff_executor(faucet_232)
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the food_chicken_2017. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_chicken_2017)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_onion_2032. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_onion_2032. Robot is close to the fridge_289. Grabbing food_onion_2032 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, kitchen_counter_230)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_chicken_2017. food_chicken_2017 is close kitchen_counter_230. food_chicken_2017 is on kitchen_counter_230. food_chicken_2017 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(food_onion_2032)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the food_onion_2032. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior roast_in_oven(chicken: item, onion: item, oven: item):
    body:
        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven

        achieve_once inside(onion, oven)
        # Place the onions inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2017
        # Select food_chicken_2017 after cleaning

        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2032
        # Select food_onion_2032 after cleaning

        bind oven: item where:
            is_oven(oven) and id[oven] == 2065
        # Select stove_2065 as an oven

        roast_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken: item, onion: item, oven: item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

behavior roast_in_oven(oven: item):
    body:
        achieve is_on(oven)
        # Ensure the oven is turned on to roast the contents

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and clean(chicken)
        # Select the cleaned chicken

        bind onion: item where:
            is_food_onion(onion) and clean(onion)
        # Select the cleaned onions

        bind oven: item where:
            is_oven(oven) and open(oven)
        # Select the oven and ensure its open for placing items

        place_in_oven(chicken, onion, oven)
        roast_in_oven(oven)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken: item, onion: item, oven: item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the cleaned chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the cleaned onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)
        # Place the chicken and onions inside the oven for roasting

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_in_oven(chicken: item, onion: item, oven: item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the cleaned chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the cleaned onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)
        # Place the chicken and onions inside the oven for roasting

##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(oven_295)putin_executor(food_chicken_2017, oven_295)putin_executor(food_onion_2032, oven_295)
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the kitchen_counter_230. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. 
##############################
From agent.py
putin_executor(food_chicken_2017, oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is close food_chicken_2017. food_chicken_2017 is inside oven_295. food_chicken_2017 is close oven_295. food_chicken_2017 released by right hand. 
##############################
From agent.py
putin_executor(food_onion_2032, oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. food_onion_2032 is inside oven_295. oven_295 is close food_onion_2032. food_onion_2032 is close oven_295. food_onion_2032 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_chicken_2017)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_chicken_2017)', 'switchoff_executor(faucet_43)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_chicken_2017, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'wash_executor(food_onion_2032)', 'switchoff_executor(faucet_232)', 'walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(oven_295)', 'putin_executor(food_chicken_2017, oven_295)', 'putin_executor(food_onion_2032, oven_295)']
Time info:
Time consume: 107 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 33
goal generate times: 5
goal correct times: 0
action_num: 24

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
