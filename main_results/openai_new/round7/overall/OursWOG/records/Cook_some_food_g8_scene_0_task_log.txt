From agent.py
Reset goals: The sub-goals are: 
['1. Boil the egg.', '2. Wash and prepare the vegetables.', '3. Cut the boiled egg and vegetables as needed.', '4. Mix the egg, lemon, and vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fork_2080_around_table_107(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior boil_egg(egg: item, pot: item, stove: item):
    body:
        achieve_once inside(egg, pot)
        achieve_once has_water(pot)
        achieve is_on(stove)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the egg

        boil_egg(egg, pot, stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior boil_egg(egg: item, pot: item, stove: item):
    body:
        achieve_once inside(egg, pot)
        achieve_once has_water(pot)
        achieve is_on(stove)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the egg

        boil_egg(egg, pot, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(pot_2069, cupboard_229)
Fail to find pot_2069 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_egg_2020, pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_egg_2020. food_egg_2020 is inside pot_2069. food_egg_2020 is close pot_2069. food_egg_2020 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_towel_2058_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_vegetable(vegetable:item):
    body:
        wash(vegetable)
        # Wash the vegetable

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not clean(vegetable):
                prepare_vegetable(vegetable)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior prepare_vegetable(vegetable:item):
    body:
        wash(vegetable)
        # Wash the vegetable

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not clean(vegetable):
                prepare_vegetable(vegetable)
 
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cutting_board_2051(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(plate,cutting_board_instance)
        else:
            exp(plate,cutting_board_instance)
    eff:
        unknown[plate]=False
        close[plate,cutting_board_instance]=True
        close[cutting_board_instance,plate]=True
    

behavior find_cd_player_2060_around_coffee_table_2068(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cd_player,coffee_table_instance)
        else:
            exp(cd_player,coffee_table_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,coffee_table_instance]=True
        close[coffee_table_instance,cd_player]=True
    

behavior find_vacuum_cleaner_2070_around_dishwasher_1001(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(vacuum_cleaner,dishwasher_instance)
        else:
            exp(vacuum_cleaner,dishwasher_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,dishwasher_instance]=True
        close[dishwasher_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def is_cut_requirements_met(table: item):
    # Function to check if the table has been prepared for cutting
    # This involves ensuring instances of both food_egg_2020 and food_vegetable_2041 are on it
    symbol requirements_met = exists o1: item : (is_food_egg(o1) and on(o1, table)) and exists o2: item : (is_food_vegetable(o2) and on(o2, table))
    return requirements_met

behavior prepare_cutting_area(egg: item, vegetable: item, table: item):
    body:
        achieve_once on(egg, table)
        achieve_once on(vegetable, table)

behavior cut_items(egg: item, vegetable: item, knife: item):
    body:
        achieve_once cut(egg)
        achieve_once cut(vegetable)

behavior __goal__():
    body:
        bind food_egg: item where:
            is_food_egg(food_egg) and id[food_egg] == 2020
        # Select the boiled egg

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable] == 2041
        # Select the prepared vegetables

        bind table: item where:
            is_table(table) and is_cut_requirements_met(table)
            # Select the table where both the egg and vegetables should be placed for cutting

        bind knife: item where:
            is_knife(knife)
        # Select a knife for cutting

        prepare_cutting_area(food_egg, food_vegetable, table)
        cut_items(food_egg, food_vegetable, knife)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o2') at line 5840, column 96.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_103_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_plate_1000_around_coffee_table_2068(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(plate,coffee_table_instance)
        else:
            exp(plate,coffee_table_instance)
    eff:
        unknown[plate]=False
        close[plate,coffee_table_instance]=True
        close[coffee_table_instance,plate]=True
    

behavior find_cd_player_2060_around_coffee_table_2068(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cd_player,coffee_table_instance)
        else:
            exp(cd_player,coffee_table_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,coffee_table_instance]=True
        close[coffee_table_instance,cd_player]=True
    

#goal_representation
 
def is_cut_requirements_met(table: item):
    # Function to check if the table has been prepared for cutting
    # This involves ensuring instances of both food_egg_2020 and food_vegetable_2041 are on it
    symbol requirements_met = exists o1: item : (is_food_egg(o1) and on(o1, table)) and exists o2: item : (is_food_vegetable(o2) and on(o2, table))
    return requirements_met

behavior prepare_cutting_area(egg: item, vegetable: item, table: item):
    body:
        achieve_once on(egg, table)
        achieve_once on(vegetable, table)

behavior cut_items(egg: item, vegetable: item, knife: item):
    body:
        achieve_once cut(egg)
        achieve_once cut(vegetable)

behavior __goal__():
    body:
        bind food_egg: item where:
            is_food_egg(food_egg) and id[food_egg] == 2020
        # Select the boiled egg

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable] == 2041
        # Select the prepared vegetables

        bind table: item where:
            is_table(table) and is_cut_requirements_met(table)
            # Select the table where both the egg and vegetables should be placed for cutting

        bind knife: item where:
            is_knife(knife)
        # Select a knife for cutting

        prepare_cutting_area(food_egg, food_vegetable, table)
        cut_items(food_egg, food_vegetable, knife)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o2') at line 5840, column 96.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation
 
def is_cut_requirements_met(table: item):
    # Function to check if the table has been prepared for cutting
    # This involves ensuring instances of both food_egg_2020 and food_vegetable_2041 are on it
    symbol requirements_met = exists o1: item : (is_food_egg(o1) and on(o1, table)) and exists o2: item : (is_food_vegetable(o2) and on(o2, table))
    return requirements_met

behavior prepare_cutting_area(egg: item, vegetable: item, table: item):
    body:
        achieve_once on(egg, table)
        achieve_once on(vegetable, table)

behavior cut_items(egg: item, vegetable: item, knife: item):
    body:
        achieve_once cut(egg)
        achieve_once cut(vegetable)

behavior __goal__():
    body:
        bind food_egg: item where:
            is_food_egg(food_egg) and id[food_egg] == 2020
        # Select the boiled egg

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable] == 2041
        # Select the prepared vegetables

        bind table: item where:
            is_table(table) and is_cut_requirements_met(table)
            # Select the table where both the egg and vegetables should be placed for cutting

        bind knife: item where:
            is_knife(knife)
        # Select a knife for cutting

        prepare_cutting_area(food_egg, food_vegetable, table)
        cut_items(food_egg, food_vegetable, knife)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_fork_2081_around_table_226(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_cd_player_2060_around_table_107(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cd_player,table_instance)
        else:
            exp(cd_player,table_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,table_instance]=True
        close[table_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_items(egg:item, vegetables:item, knife:item, cutting_board:item):
    body:
        achieve_once on(egg, cutting_board)
        achieve_once cut(egg)
        achieve_once cut(vegetables)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the boiled egg to be cut

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be cut

        bind knife: item where:
            is_knife(knife)
        # Select a knife for cutting

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board for cutting

        cut_items(egg, vegetables, knife, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cut_items(egg:item, vegetables:item, knife:item, cutting_board:item):
    body:
        achieve_once on(egg, cutting_board)
        achieve_once cut(egg)
        achieve_once cut(vegetables)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the boiled egg to be cut

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be cut

        bind knife: item where:
            is_knife(knife)
        # Select a knife for cutting

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board for cutting

        cut_items(egg, vegetables, knife, cutting_board)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the food_egg_2020. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the food_egg_2020. Robot is close to the pot_2069. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_egg_2020. food_egg_2020 is close cutting_board_2051. food_egg_2020 is on cutting_board_2051. food_egg_2020 released by left hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by left hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
cut_executor(food_egg_2020)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_vegetable_2041. food_vegetable_2041 is close cutting_board_2051. food_vegetable_2041 is on cutting_board_2051. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_ingredients(egg: item, lemon: item, vegetables: item, bowl: item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the cut egg

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to mix the ingredients in

        mix_ingredients(egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior mix_ingredients(egg: item, lemon: item, vegetables: item, bowl: item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the cut egg

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to mix the ingredients in

        mix_ingredients(egg, lemon, vegetables, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(bowl_2072, coffee_table_2068)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the knife_2050. Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(bowl_2072, coffee_table_2068)
Fail to find bowl_2072 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2072, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the knife_2050. Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2072, table_226)
Find bowl_2072. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(food_egg_2020, bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bowl_2072. Robot is close to the table_226. bowl_2072 is close food_egg_2020. food_egg_2020 is inside bowl_2072. food_egg_2020 is close bowl_2072. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. 
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by right hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(food_lemon_2028, bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the bowl_2072. Robot is close to the table_226. food_lemon_2028 is close bowl_2072. bowl_2072 is close food_lemon_2028. food_lemon_2028 is inside bowl_2072. food_lemon_2028 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(food_vegetable_2041, bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bowl_2072. Robot is close to the table_226. food_vegetable_2041 is inside bowl_2072. food_vegetable_2041 is close bowl_2072. bowl_2072 is close food_vegetable_2041. food_vegetable_2041 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a bowl of egg salad with boiled egg, lemon, and vegetables.
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(pot_2069)', 'putin_executor(food_egg_2020, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(cutting_board_2051)', 'put_executor(food_egg_2020, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_egg_2020)', 'cut_executor(food_egg_2020)', 'walk_executor(cutting_board_2051)', 'put_executor(food_vegetable_2041, cutting_board_2051)', 'walk_executor(food_vegetable_2041)', 'cut_executor(food_vegetable_2041)', 'walk_executor(coffee_table_2068)', 'walk_executor(table_226)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(bowl_2072)', 'putin_executor(food_egg_2020, bowl_2072)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(bowl_2072)', 'putin_executor(food_lemon_2028, bowl_2072)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(bowl_2072)', 'putin_executor(food_vegetable_2041, bowl_2072)']
Time info:
Time consume: 319 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 44
goal generate times: 5
goal correct times: 0
action_num: 52

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 9 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
