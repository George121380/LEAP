From agent.py
Reset goals: The sub-goals are: 
['1. Cook the pasta and chicken separately.', '2. Mix the cooked pasta and chicken together.', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_132(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        # Place the pasta inside the pot
        achieve_once is_on(stove)
        # Turn on the stove
        achieve has_water(pot)
        # The pot should have water to cook the pasta

behavior cook_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        achieve_once on(chicken, fryingpan)
        # Place the chicken on the frying pan
        achieve is_on(stove)
        # Turn on the stove for cooking the chicken

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta to cook

        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil pasta

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan to cook chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to cook

        boil_pasta(pasta, pot, stove)
        cook_chicken(chicken, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        # Place the pasta inside the pot
        achieve_once is_on(stove)
        # Turn on the stove
        achieve has_water(pot)
        # The pot should have water to cook the pasta

behavior cook_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        achieve_once on(chicken, fryingpan)
        # Place the chicken on the frying pan
        achieve is_on(stove)
        # Turn on the stove for cooking the chicken

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta to cook

        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil pasta

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan to cook chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to cook

        boil_pasta(pasta, pot, stove)
        cook_chicken(chicken, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(kitchen_counter_132)exp(dry_pasta_2073, kitchen_counter_132)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)put_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(dry_pasta_2073, kitchen_counter_132)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)put_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(dry_pasta_2073, kitchen_counter_132)
Fail to find dry_pasta_2073 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(dry_pasta_2073, cupboard_131)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)put_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(dry_pasta_2073, cupboard_131)
Fail to find dry_pasta_2073 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(dry_pasta_2073, cupboard_130)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)put_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(dry_pasta_2073, cupboard_130)
Fail to find dry_pasta_2073 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(dry_pasta_2073, fridge_140)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)put_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(dry_pasta_2073, fridge_140)
Find dry_pasta_2073. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)put_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
walk_executor(dry_pasta_2073)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(dry_pasta_2073)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the fridge_140. Grabbing dry_pasta_2073 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
putin_executor(dry_pasta_2073, pot_2093)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. dry_pasta_2073 is inside pot_2093. dry_pasta_2073 is close pot_2093. pot_2093 is close dry_pasta_2073. dry_pasta_2073 released by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the dry_pasta_2073. Robot is close to the pot_2093. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the dry_pasta_2073. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the pot_2093. Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the pot_2093. Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the pot_2093. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
put_executor(food_chicken_2050, fryingpan_2107)
Robot find: Robot is close to the pot_2093. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. food_chicken_2050 is close fryingpan_2107. fryingpan_2107 is close food_chicken_2050. food_chicken_2050 is on fryingpan_2107. food_chicken_2050 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure the pot has water to cook the pasta, and make sure the stove is on to cook both the pasta in the pot and the chicken in the frying pan.
##############################
From agent.py
Human Instruction: Ensure the pot has water to cook the pasta, and make sure the stove is on to cook both the pasta in the pot and the chicken in the frying pan.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to kitchen_counter_132.
Action 5: look for dry_pasta_2073 around kitchen_counter_132.
Action 6: Walk to cupboard_131.
Action 7: Open cupboard_131.
Action 8: look for dry_pasta_2073 around cupboard_131.
Action 9: Walk to cupboard_130.
Action 10: look for dry_pasta_2073 around cupboard_130.
Action 11: Walk to fridge_140.
Action 12: Switch off fridge_140.
Action 13: Open fridge_140.
Action 14: look for dry_pasta_2073 around fridge_140.
Action 15: Walk to pot_2093.
Action 16: Open pot_2093.
Action 17: Walk to dry_pasta_2073.
Action 18: Grab dry_pasta_2073.
Action 19: Walk to pot_2093.
Action 20: Put dry_pasta_2073 into pot_2093.
Action 21: Walk to stove_2090.
Action 22: Switch on stove_2090.
Action 23: Walk to pot_2093.
Action 24: Grab pot_2093.
Action 25: Walk to faucet_134.
Action 26: Switch off faucet_134.
Action 27: Walk to food_chicken_2050.
Action 28: Grab food_chicken_2050.
Action 29: Walk to fryingpan_2107.
Action 30: Put food_chicken_2050 on fryingpan_2107.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2005_around_cutting_board_2080(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(oil,cutting_board_instance)
        else:
            exp(oil,cutting_board_instance)
    eff:
        unknown[oil]=False
        close[oil,cutting_board_instance]=True
        close[cutting_board_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure pot has water for cooking pasta
        
        achieve_once inside(pasta, pot)
        # Place pasta inside the pot

        achieve_once is_on(stove)
        # Turn on the stove

behavior cook_chicken(chicken: item, frying_pan: item, stove: item):
    body:
        achieve_once on(chicken, frying_pan)
        # Place chicken on the frying pan
        
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking pasta

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select dry pasta for cooking

        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select chicken for cooking

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan for cooking chicken
        
        cook_pasta(dry_pasta, pot, stove)
        cook_chicken(food_chicken, frying_pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure pot has water for cooking pasta
        
        achieve_once inside(pasta, pot)
        # Place pasta inside the pot

        achieve_once is_on(stove)
        # Turn on the stove

behavior cook_chicken(chicken: item, frying_pan: item, stove: item):
    body:
        achieve_once on(chicken, frying_pan)
        # Place chicken on the frying pan
        
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking pasta

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select dry pasta for cooking

        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select chicken for cooking

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan for cooking chicken
        
        cook_pasta(dry_pasta, pot, stove)
        cook_chicken(food_chicken, frying_pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add water to pot_2093 to ensure the pasta can be cooked. The pasta is in the pot, and the stove is on, but it's essential to have water in the pot for cooking.
##############################
From agent.py
Human Instruction: You need to add water to pot_2093 to ensure the pasta can be cooked. The pasta is in the pot, and the stove is on, but it's essential to have water in the pot for cooking.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to kitchen_counter_132.
Action 5: look for dry_pasta_2073 around kitchen_counter_132.
Action 6: Walk to cupboard_131.
Action 7: Open cupboard_131.
Action 8: look for dry_pasta_2073 around cupboard_131.
Action 9: Walk to cupboard_130.
Action 10: look for dry_pasta_2073 around cupboard_130.
Action 11: Walk to fridge_140.
Action 12: Switch off fridge_140.
Action 13: Open fridge_140.
Action 14: look for dry_pasta_2073 around fridge_140.
Action 15: Walk to pot_2093.
Action 16: Open pot_2093.
Action 17: Walk to dry_pasta_2073.
Action 18: Grab dry_pasta_2073.
Action 19: Walk to pot_2093.
Action 20: Put dry_pasta_2073 into pot_2093.
Action 21: Walk to stove_2090.
Action 22: Switch on stove_2090.
Action 23: Walk to pot_2093.
Action 24: Grab pot_2093.
Action 25: Walk to faucet_134.
Action 26: Switch off faucet_134.
Action 27: Walk to food_chicken_2050.
Action 28: Grab food_chicken_2050.
Action 29: Walk to fryingpan_2107.
Action 30: Put food_chicken_2050 on fryingpan_2107.
Action 31: Walk to faucet_308.
Action 32: Switch off faucet_308.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
behavior cook_pasta_in_pot(pasta:item, pot:item, faucet:item):
    body:
        if not has_water(pot):
            achieve_once has_water(pot) # Ensure the pot is filled with water
        achieve is_on(pot) # Ensure the pot is on the stove for cooking

behavior cook_chicken_in_fryingpan(chicken:item, fryingpan:item):
    body:
        achieve_once on(chicken, fryingpan) # Place the chicken on the frying pan
        achieve is_on(fryingpan) # Ensure the frying pan is on for cooking

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot) and id[pot] == 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308

        cook_pasta_in_pot(pasta, pot, faucet)

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107

        cook_chicken_in_fryingpan(chicken, fryingpan)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_sink_133(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(plate,sink_instance)
        else:
            exp(plate,sink_instance)
    eff:
        unknown[plate]=False
        close[plate,sink_instance]=True
        close[sink_instance,plate]=True
    

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)

behavior cook_pasta_and_chicken(pasta_pot: item, chicken_fryingpan: item, stove: item):
    body:
        achieve is_on(stove)
        achieve on(pasta_pot, stove)
        achieve on(chicken_fryingpan, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot_2093 to cook pasta

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet_134 to fill water

        fill_pot_with_water(pot, faucet)

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove_2090 for cooking

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select fryingpan_2107 for cooking chicken

        cook_pasta_and_chicken(pot, fryingpan, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)

behavior cook_pasta_and_chicken(pasta_pot: item, chicken_fryingpan: item, stove: item):
    body:
        achieve is_on(stove)
        achieve on(pasta_pot, stove)
        achieve on(chicken_fryingpan, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot_2093 to cook pasta

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet_134 to fill water

        fill_pot_with_water(pot, faucet)

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove_2090 for cooking

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select fryingpan_2107 for cooking chicken

        cook_pasta_and_chicken(pot, fryingpan, stove)
##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)
##############################
From agent.py
switchon_executor(faucet_308)
Robot find: Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Grabbing fryingpan_2107 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(fryingpan_2107, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. fryingpan_2107 is on stove_2090. stove_2090 is close fryingpan_2107. fryingpan_2107 is close stove_2090. fryingpan_2107 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add water to pot_2093 using faucet_134 to ensure that the pasta can be properly cooked. This step is essential before proceeding with cooking the pasta and chicken.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dough_2021_around_toaster_144(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(dough,toaster_instance)
        else:
            exp(dough,toaster_instance)
    eff:
        unknown[dough]=False
        close[dough,toaster_instance]=True
        close[toaster_instance,dough]=True
    

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_chicken_and_pasta(chicken:item, pasta:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the cooked chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the cooked pasta

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that contains the pasta with water

        mix_chicken_and_pasta(chicken, pasta, pot)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_wallshelf_301(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior mix_pasta_and_chicken(pasta: item, chicken: item, container: item):
    body:
        achieve_once inside(pasta, container)
        achieve_once inside(chicken, container)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta) and id[pasta] == 2073
        # Select pasta_2073 that was cooked

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select food_chicken_2050 that was cooked

        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot_2093

        mix_pasta_and_chicken(pasta, chicken, pot)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_pasta_and_chicken(pasta:item, chicken:item, pot:item):
    body:
        achieve_once inside(pasta, pot)
        achieve_once inside(chicken, pot)

behavior __goal__():
    body:
        bind cooked_pasta: item where:
            is_dry_pasta(cooked_pasta) and inside(cooked_pasta, pot_2093)
        # Bind the cooked pasta which is already in pot_2093

        bind cooked_chicken: item where:
            is_food_chicken(cooked_chicken) and on(cooked_chicken, fryingpan_2107)
        # Bind the cooked chicken which is on fryingpan_2107

        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Bind pot_2093 to mix pasta and chicken

        mix_pasta_and_chicken(cooked_pasta, cooked_chicken, pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot_2093; available variables: [Variable<cooked_pasta: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2018_around_microwave_149(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_butter,microwave_instance)
        else:
            exp(food_butter,microwave_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,microwave_instance]=True
        close[microwave_instance,food_butter]=True
    

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#goal_representation
 
behavior mix_pasta_and_chicken(pasta:item, chicken:item, pot:item):
    body:
        achieve_once inside(pasta, pot)
        achieve_once inside(chicken, pot)

behavior __goal__():
    body:
        bind cooked_pasta: item where:
            is_dry_pasta(cooked_pasta) and inside(cooked_pasta, pot)
        # Bind the cooked pasta which is already in the pot

        bind cooked_chicken: item where:
            is_food_chicken(cooked_chicken) and on(cooked_chicken, fryingpan_2107)
        # Bind the cooked chicken which is on fryingpan_2107

        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Bind pot_2093 to mix pasta and chicken

        mix_pasta_and_chicken(cooked_pasta, cooked_chicken, pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<cooked_pasta: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2035_around_coffe_maker_147(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_dough_2021_around_kitchen_counter_128(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dough,kitchen_counter_instance)
        else:
            exp(dough,kitchen_counter_instance)
    eff:
        unknown[dough]=False
        close[dough,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dough]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation
 
behavior mix_pasta_and_chicken(pasta:item, chicken:item, pot:item):
    body:
        achieve_once inside(pasta, pot)
        achieve_once inside(chicken, pot)

behavior __goal__():
    body:
        bind cooked_pasta: item where:
            is_dry_pasta(cooked_pasta) and inside(cooked_pasta, pot_2093)
        # Bind the cooked pasta which is already in the pot_2093

        bind cooked_chicken: item where:
            is_food_chicken(cooked_chicken) and on(cooked_chicken, fryingpan_2107)
        # Bind the cooked chicken which is on fryingpan_2107

        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Bind pot_2093 to mix pasta and chicken

        mix_pasta_and_chicken(cooked_pasta, cooked_chicken, pot)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(kitchen_counter_132)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'walk_executor(dry_pasta_2073)', 'grab_executor(dry_pasta_2073)', 'walk_executor(pot_2093)', 'putin_executor(dry_pasta_2073, pot_2093)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(fryingpan_2107)', 'put_executor(food_chicken_2050, fryingpan_2107)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'switchon_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'walk_executor(fryingpan_2107)', 'grab_executor(fryingpan_2107)', 'walk_executor(stove_2090)', 'put_executor(fryingpan_2107, stove_2090)']
Time info:
Time consume: 364 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 77
goal generate times: 7
goal correct times: 2
action_num: 35

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 6 steps
Keystate: k3 - Requires: 8 steps
Keystate: k4 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
