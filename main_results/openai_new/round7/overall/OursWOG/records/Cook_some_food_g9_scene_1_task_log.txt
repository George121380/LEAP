From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the potatoes.', '2. Cut the potatoes into fries.', '3. Fry the potato slices to make French fries.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2107_around_kitchen_counter_123(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
def find_potatoes():
    # Function to find potatoes
    symbol found_potatoes=exists potato: item : is_food_potato(potato)
    return found_potatoes

behavior find_and_wash_potatoes():
    body:
        if exists potato: item : (is_food_potato(potato) and find_potatoes()):
            # If potatoes have already been found, select them
            bind potato: item where:
                is_food_potato(potato) and find_potatoes()
            # Wash the found potatoes
            wash(potato)

        else:
            # If no potatoes are found, start searching
            foreach item: item:
                if is_food_potato(item) and not visited(item):
                    # Check unvisited items to find potatoes
                    observe(item, "Check if this is a potato")
                    # Once found, wash the potato
                    if is_food_potato(item):
                        wash(item)

behavior __goal__():
    body:
        find_and_wash_potatoes()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def find_potatoes():
    # Function to find potatoes
    symbol found_potatoes=exists potato: item : is_food_potato(potato)
    return found_potatoes

behavior find_and_wash_potatoes():
    body:
        if exists potato: item : (is_food_potato(potato) and find_potatoes()):
            # If potatoes have already been found, select them
            bind potato: item where:
                is_food_potato(potato) and find_potatoes()
            # Wash the found potatoes
            wash(potato)

        else:
            # If no potatoes are found, start searching
            foreach item: item:
                if is_food_potato(item) and not visited(item):
                    # Check unvisited items to find potatoes
                    observe(item, "Check if this is a potato")
                    # Once found, wash the potato
                    if is_food_potato(item):
                        wash(item)

behavior __goal__():
    body:
        find_and_wash_potatoes()

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_potato_2107, kitchen_counter_123)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_potato_2107)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_potato_2107, kitchen_counter_123)
Fail to find food_potato_2107 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_potato_2107, fridge_126)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_potato_2107)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_potato_2107, fridge_126)
Find food_potato_2107. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2107)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_potato_2107)switchoff_executor(faucet_20)
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the food_potato_2107. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_potato_2107. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_potato_2107)
Robot find: Robot is close to the food_potato_2107. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_potato_2107. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_potatoes(potato: item, cutting_board: item, knife: item):
    body:
        achieve_once on(potato, cutting_board)
        achieve_once inhand(knife)
        achieve cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and clean(potato)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        bind knife: item where:
            is_knife(knife) and grabbable(knife)

        cut_potatoes(potato, cutting_board, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cut_potatoes(potato: item, cutting_board: item, knife: item):
    body:
        achieve_once on(potato, cutting_board)
        achieve_once inhand(knife)
        achieve cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and clean(potato)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        bind knife: item where:
            is_knife(knife) and grabbable(knife)

        cut_potatoes(potato, cutting_board, knife)

##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_potato_2107. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes_in_oil(oil:item, stove:item, frying_pan:item, potato_slices:item):
    body:
        achieve inside(oil, frying_pan) # Add oil to the frying pan
        achieve_once is_on(stove) # Turn on the stove
        achieve_once inside(potato_slices, frying_pan) # Place potato slices in the frying pan

behavior switch_off_stove(stove:item):
    body:
        achieve_once is_off(stove) # Switch off the stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove)
        bind potato_slices: item where:
            is_food_potato(potato_slices) and cut(potato_slices)
        bind oil: item where:
            is_oil(oil)

        fry_potatoes_in_oil(oil, stove, frying_pan, potato_slices)
        switch_off_stove(stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes(potato_slices: item, frying_pan: item, stove: item):
    body:
        achieve_once inside(potato_slices, frying_pan) # Place the potato slices inside the frying pan
        achieve_once is_on(stove) # Turn on the stove for heating

behavior turn_off_stove(stove: item):
    body:
        achieve_once is_off(stove) # Turn off the stove

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind potato_slices: item where:
            is_food_potato(potato_slices) and cut(potato_slices)
        # Select the cut potato slices

        fry_potatoes(potato_slices, frying_pan, stove) # Fry the potato slices
        turn_off_stove(stove) # Ensure the stove is turned off after frying

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil_in_fryingpan(fryingpan: item, oil: item):
    body:
        achieve_once inside(oil, fryingpan)
        # Put oil in the frying pan
        achieve is_on(fryingpan)
        # Turn on the frying pan to heat the oil

behavior fry_potato_slices(potato_slices: item, fryingpan: item):
    body:
        achieve_once inside(potato_slices, fryingpan)
        # Fry the potato slices inside the frying pan

behavior turn_off_fryingpan(fryingpan: item):
    body:
        achieve_once is_off(fryingpan)
        # Turn off the frying pan after frying

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind oil: item where:
            is_oil(oil)
        # Select some oil to fry the potatoes with

        bind potato_slices: item where:
            is_food_potato(potato_slices) and cut(potato_slices)
        # Select cut potato slices

        heat_oil_in_fryingpan(fryingpan, oil)
        fry_potato_slices(potato_slices, fryingpan)
        turn_off_fryingpan(fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes(potato_slices:item, oil:item, frying_pan:item, stove:item):
    body:
        achieve_once inside(oil, frying_pan)
        # Add oil to the frying pan
        achieve_once is_on(stove)
        # Turn on the stove
        achieve inhand(potato_slices)
        # Hold the potato slices
        achieve_once inside(potato_slices, frying_pan)
        # Place potato slices in the frying pan
        achieve cut(potato_slices)
        # Ensure all slices are cut during frying

behavior __goal__():
    body:
        bind potato_slices: item where:
            is_food_potato(potato_slices) and cut(potato_slices)
        # Select the already cut potato slices

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_potatoes(potato_slices, oil, frying_pan, stove)


#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def has_cut_potato_slices():
    # Function to check if potato slices have been cut
    symbol has_cut_slices = exists o: item : (is_food_potato(o) and cut(o))
    return has_cut_slices

behavior fry_potato_slices(o: item, frying_pan: item):
    body:
        achieve_once inside(o, frying_pan)
        # Fry the potato slices by placing them in the frying pan

behavior heat_pan(frying_pan: item, stove: item):
    body:
        achieve_once on(frying_pan, stove)
        achieve is_on(stove)
        # Ensure the frying pan is on the stove and the stove is on

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind cut_potato: item where:
            is_food_potato(cut_potato) and cut(cut_potato)
        # Select potato slices that have been cut

        heat_pan(frying_pan, stove)
        fry_potato_slices(cut_potato, frying_pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_slices_french_fries(o:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(o, fryingpan) 
        # Place the potato slices inside the frying pan
        achieve is_on(stove) 
        # Turn on the stove to fry the potato slices

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        foreach o: item:
            if is_food_potato(o) and cut(o):
                fry_potato_slices_french_fries(o, fryingpan, stove)
        # Fry all cut potato slices to make French fries

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior fry_potato_slices(oil:item, stove:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan) # Add oil to the frying pan
        achieve_once is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        foreach potato_slice: item:
            if is_food_potato(potato_slice) and cut(potato_slice):
                achieve_once inside(potato_slice, fryingpan)
                # Place the potato slice into the frying pan
        fry_potato_slices(oil, stove, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior fry_potato_slices(oil:item, stove:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan) # Add oil to the frying pan
        achieve_once is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        foreach potato_slice: item:
            if is_food_potato(potato_slice) and cut(potato_slice):
                achieve_once inside(potato_slice, fryingpan)
                # Place the potato slice into the frying pan
        fry_potato_slices(oil, stove, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the knife_2035. Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Fail to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)exp(fryingpan_2154, oven_127)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the knife_2035. Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the knife_2035. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
exp(fryingpan_2154, oven_127)
Fail to find fryingpan_2154 around oven_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the knife_2035. Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the knife_2035. Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Fail to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(nightstand_192)exp(fryingpan_2154, nightstand_192)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(nightstand_192)
Robot find: pillow_208, drawing_201, Robot is close to the knife_2035. Robot is close to the nightstand_192. 
##############################
From agent.py
exp(fryingpan_2154, nightstand_192)
Fail to find fryingpan_2154 around nightstand_192. 
##############################
From agent.py-> find a plan in act()
walk_executor(television_281)exp(fryingpan_2154, television_281)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(television_281)
Robot find: drawing_288, cd_2145, mat_284, headset_2131, cd_player_2129, remote_control_2124, dvd_player_2130, Robot is close to the knife_2035. Robot is close to the television_281. Robot is close to the tvstand_273. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find fryingpan_2154 ?
Answer: Go to the dining room, designated as dining_room_41. Look for kitchen_counter_122 inside this room. The fryingpan_2154 is on top of this kitchen counter. Locate the kitchen_counter_122, and you will find the fryingpan_2154 placed directly on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining room, designated as dining_room_41. Look for kitchen_counter_122 inside this room. The fryingpan_2154 is on top of this kitchen counter. Locate the kitchen_counter_122, and you will find the fryingpan_2154 placed directly on it.

The actions you have taken:
Action 1: Walk to kitchen_counter_123.
Action 2: look for food_potato_2107 around kitchen_counter_123.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_potato_2107 around fridge_126.
Action 7: Grab food_potato_2107.
Action 8: Walk to faucet_20.
Action 9: Switch on faucet_20.
Action 10: Wash food_potato_2107.
Action 11: Switch off faucet_20.
Action 12: Walk to cutting_board_2123.
Action 13: Put food_potato_2107 on cutting_board_2123.
Action 14: Walk to knife_2035.
Action 15: Grab knife_2035.
Action 16: Walk to food_potato_2107.
Action 17: Cut food_potato_2107.
Action 18: Walk to cupboard_117.
Action 19: look for fryingpan_2154 around cupboard_117.
Action 20: Walk to oven_127.
Action 21: Open oven_127.
Action 22: look for fryingpan_2154 around oven_127.
Action 23: Walk to cupboard_118.
Action 24: Open cupboard_118.
Action 25: look for fryingpan_2154 around cupboard_118.
Action 26: Walk to nightstand_192.
Action 27: look for fryingpan_2154 around nightstand_192.
Action 28: Walk to television_281.

##############################
From agent.py
exp(fryingpan_2154, television_281)
Fail to find fryingpan_2154 around television_281. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the knife_2035. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. oil_2149 is inside fryingpan_2154. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the cut potato slices into the frying pan.
##############################
From agent.py
Human Instruction: You need to place the cut potato slices into the frying pan.

The actions you have taken:
Action 1: Walk to kitchen_counter_123.
Action 2: look for food_potato_2107 around kitchen_counter_123.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_potato_2107 around fridge_126.
Action 7: Grab food_potato_2107.
Action 8: Walk to faucet_20.
Action 9: Switch on faucet_20.
Action 10: Wash food_potato_2107.
Action 11: Switch off faucet_20.
Action 12: Walk to cutting_board_2123.
Action 13: Put food_potato_2107 on cutting_board_2123.
Action 14: Walk to knife_2035.
Action 15: Grab knife_2035.
Action 16: Walk to food_potato_2107.
Action 17: Cut food_potato_2107.
Action 18: Walk to cupboard_117.
Action 19: look for fryingpan_2154 around cupboard_117.
Action 20: Walk to oven_127.
Action 21: Open oven_127.
Action 22: look for fryingpan_2154 around oven_127.
Action 23: Walk to cupboard_118.
Action 24: Open cupboard_118.
Action 25: look for fryingpan_2154 around cupboard_118.
Action 26: Walk to nightstand_192.
Action 27: look for fryingpan_2154 around nightstand_192.
Action 28: Walk to television_281.
Action 29: look for fryingpan_2154 around television_281.
Action 30: Walk to kitchen_counter_122.
Action 31: look for fryingpan_2154 around kitchen_counter_122.
Action 32: Walk to oil_2149.
Action 33: Grab oil_2149.
Action 34: Walk to fryingpan_2154.
Action 35: Put oil_2149 into fryingpan_2154.
Action 36: Walk to stove_2135.
Action 37: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_table_cloth_2005_around_table_199(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

behavior find_coffee_filter_2053_around_coffe_maker_130(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==130
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_slices(slices:item, pan:item, stove:item):
    body:
        achieve_once inside(slices, pan) # Place potato slices in the frying pan
        achieve_once on(pan, stove) # Ensure frying pan is on the stove

behavior heat_oil(stove:item):
    body:
        achieve is_on(stove) # Keep the stove on to heat the oil

behavior __goal__():
    body:
        bind slices: item where:
            is_food_potato(slices) and cut(slices)
        # Bind the cut potato slices

        bind pan: item where:
            is_fryingpan(pan)
        # Bind the identified frying pan

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Bind the stove, ensuring it is already on

        fry_potato_slices(slices, pan, stove)
        heat_oil(stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_clothes_scarf_2120_around_basket_for_clothes_2078(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_table_cloth_2005_around_table_270(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_potato_slices_in_fryingpan(potato_slices: item, fryingpan: item):
    body:
        achieve_once inside(potato_slices, fryingpan)

behavior fry_potato_slices(potato_slices: item, stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind potato_slices: item where:
            is_food_potato(potato_slices) and cut(potato_slices)
        # Select the cut potato slices

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        put_potato_slices_in_fryingpan(potato_slices, fryingpan)
        fry_potato_slices(potato_slices, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_table_cloth_2005_around_table_270(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_slices(potato_slices:item, fryingpan:item):
    body:
        achieve_once inside(potato_slices, fryingpan)
        # Place the potato slices inside the frying pan

behavior heat_the_fryingpan(stove:item, fryingpan:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove

behavior __goal__():
    body:
        bind potato_slices: item where:
            is_food_potato(potato_slices) and cut(potato_slices)
        # Select the cut potato slices

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_potato_slices(potato_slices, fryingpan)
        heat_the_fryingpan(stove, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_potato_2107)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_potato_2107)', 'switchoff_executor(faucet_20)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_potato_2107)', 'cut_executor(food_potato_2107)', 'walk_executor(cupboard_117)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(nightstand_192)', 'walk_executor(television_281)', 'walk_executor(kitchen_counter_122)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2149, fryingpan_2154)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)']
Time info:
Time consume: 277 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 4
goal generate times: 12
goal correct times: 0
action_num: 29

Task complete rate:
Keystate: k1 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
