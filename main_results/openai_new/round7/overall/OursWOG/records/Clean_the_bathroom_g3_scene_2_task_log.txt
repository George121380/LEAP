From agent.py
Reset goals: The sub-goals are: 
['1. Wipe the toilet with toilet paper.', '2. Throw the used toilet paper into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2118_around_toilet_302(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==302
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet: item, toilet_paper: item):
    body:
        achieve_once inhand(toilet_paper)
        wipe(toilet)

behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        discard_toilet_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wipe_toilet_with_toilet_paper(toilet: item, toilet_paper: item):
    body:
        achieve_once inhand(toilet_paper)
        wipe(toilet)

behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        discard_toilet_paper_into_toilet(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
walk_executor(toilet_302)open_executor(toilet_302)exp(toilet_paper_2118, toilet_302)walk_executor(toilet_paper_2118)grab_executor(toilet_paper_2118)walk_executor(toilet_302)wipe_executor(toilet_302)putin_executor(toilet_paper_2118, toilet_302)
##############################
From agent.py
walk_executor(toilet_302)
Robot find: toilet_paper_2118, Robot is close to the toilet_302. 
##############################
From agent.py
open_executor(toilet_302)
Robot find: Robot is close to the toilet_302. toilet_302 is opened. 
##############################
From agent.py
exp(toilet_paper_2118, toilet_302)
Find toilet_paper_2118. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_paper_2118)grab_executor(toilet_paper_2118)walk_executor(toilet_302)wipe_executor(toilet_302)putin_executor(toilet_paper_2118, toilet_302)
##############################
From agent.py
walk_executor(toilet_paper_2118)
Robot find: Robot is close to the toilet_paper_2118. 
##############################
From agent.py
grab_executor(toilet_paper_2118)
Robot find: Robot is close to the toilet_paper_2118. Grabbing toilet_paper_2118 by right hand. 
##############################
From agent.py
walk_executor(toilet_302)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. 
##############################
From agent.py
wipe_executor(toilet_302)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. 
##############################
From agent.py
putin_executor(toilet_paper_2118, toilet_302)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. toilet_paper_2118 is close toilet_302. toilet_paper_2118 is inside toilet_302. toilet_paper_2118 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 302
        # Select toilet_302

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2118
        # Select toilet_paper_2118

        discard_toilet_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_dvd_player_2085_around_tvstand_135(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation






behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 302
        # Select toilet with ID 302

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2118
        # Select toilet paper with ID 2118

        discard_toilet_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 302
        # Select toilet_302

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2118
        # Select toilet_paper_2118

        discard_toilet_paper_into_toilet(toilet, toilet_paper)


#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_counter_306(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2037_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 302
        # Select toilet with ID 302

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2118
        # Select toilet paper with ID 2118

        discard_toilet_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 302
        # Select toilet with ID 302

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2118
        # Select toilet paper with ID 2118

        discard_toilet_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_towel_rack_298_around_bathroom_counter_306(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel_rack,bathroom_counter_instance)
        else:
            exp(towel_rack,bathroom_counter_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel_rack]=True
    

behavior find_towel_2083_around_bathroom_counter_306(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 302
        # Select toilet with ID 302

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2118
        # Select toilet paper with ID 2118

        discard_toilet_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_towel_2083_around_bathroom_counter_306(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        discard_toilet_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_napkin_2014_around_bathroom_counter_306(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(napkin,bathroom_counter_instance)
        else:
            exp(napkin,bathroom_counter_instance)
    eff:
        unknown[napkin]=False
        close[napkin,bathroom_counter_instance]=True
        close[bathroom_counter_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 302
        # Select toilet with ID 302

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2118
        # Select toilet paper with ID 2118

        discard_toilet_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_napkin_2014_around_bathroom_counter_306(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(napkin,bathroom_counter_instance)
        else:
            exp(napkin,bathroom_counter_instance)
    eff:
        unknown[napkin]=False
        close[napkin,bathroom_counter_instance]=True
        close[bathroom_counter_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 302
        # Select the toilet with ID 302, which was previously wiped

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2118
        # Select the used toilet paper with ID 2118

        discard_toilet_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Wipe the toilet with toilet paper. Then throw it into the toilet.
Action History:
['walk_executor(toilet_302)', 'open_executor(toilet_302)', 'walk_executor(toilet_paper_2118)', 'grab_executor(toilet_paper_2118)', 'walk_executor(toilet_302)', 'wipe_executor(toilet_302)', 'putin_executor(toilet_paper_2118, toilet_302)']
Time info:
Time consume: 166 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 139
goal generate times: 10
goal correct times: 0
action_num: 7

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
