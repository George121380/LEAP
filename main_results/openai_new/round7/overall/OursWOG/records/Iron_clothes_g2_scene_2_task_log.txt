From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the shirt.', '2. Iron the shirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation

behavior wash_shirt(shirt:item):
    body:
        wash(shirt)
        # Hand wash the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be hand washed

        wash_shirt(shirt)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior wash_shirt(shirt:item):
    body:
        wash(shirt)
        # Hand wash the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be hand washed

        wash_shirt(shirt)

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2040)exp(clothes_shirt_2114, basket_for_clothes_2040)walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)wash_executor(clothes_shirt_2114)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(basket_for_clothes_2040)
Robot find: clothes_pants_2113, clothes_shirt_2114, clothes_socks_2115, clothes_skirt_2116, Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. 
##############################
From agent.py
exp(clothes_shirt_2114, basket_for_clothes_2040)
Find clothes_shirt_2114. 
##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2114)wash_executor(clothes_shirt_2114)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py
wash_executor(clothes_shirt_2114)
Robot find: Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. clothes_shirt_2114 is cleaned. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the clothes_shirt_2114. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt: item, ironing_board: item, iron: item):
    body:
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron
        achieve_once smooth(shirt) # Iron the shirt to make it smooth

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2114
        # Select clothes_shirt_2114

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        iron_shirt(clothes_shirt, ironing_board, iron)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function smooth not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#goal_representation
behavior iron_shirt(shirt: item, ironing_board: item, iron: item):
    body:
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron
        achieve_once clean(shirt) # Ensure shirt is clean

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2114
        # Select clothes_shirt_2114

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        iron_shirt(clothes_shirt, ironing_board, iron)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior iron_shirt(shirt: item, ironing_board: item, iron: item):
    body:
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron
        achieve_once clean(shirt) # Ensure shirt is clean

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2114
        # Select clothes_shirt_2114

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        iron_shirt(clothes_shirt, ironing_board, iron)
##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2099)put_executor(clothes_shirt_2114, ironing_board_2099)exp(iron_2117, ironing_board_2099)walk_executor(iron_2117)plugin_executor(iron_2117)switchon_executor(iron_2117)
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: iron_2117, Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. 
##############################
From agent.py
put_executor(clothes_shirt_2114, ironing_board_2099)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. ironing_board_2099 is close clothes_shirt_2114. clothes_shirt_2114 is close ironing_board_2099. clothes_shirt_2114 is on ironing_board_2099. clothes_shirt_2114 released by right hand. 
##############################
From agent.py
exp(iron_2117, ironing_board_2099)
Find iron_2117. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2117)plugin_executor(iron_2117)switchon_executor(iron_2117)
##############################
From agent.py
walk_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. 
##############################
From agent.py
plugin_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. iron_2117 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. iron_2117 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to actually use the iron to iron the clothes_shirt_2114. The current actions only show that the shirt has been cleaned, placed on the ironing board, and the iron has been plugged in and switched on.
##############################
From agent.py
Human Instruction: The robot needs to actually use the iron to iron the clothes_shirt_2114. The current actions only show that the shirt has been cleaned, placed on the ironing board, and the iron has been plugged in and switched on.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Grab clothes_shirt_2114.
Action 4: Wash clothes_shirt_2114.
Action 5: Walk to faucet_134.
Action 6: Switch off faucet_134.
Action 7: Walk to ironing_board_2099.
Action 8: Put clothes_shirt_2114 on ironing_board_2099.
Action 9: look for iron_2117 around ironing_board_2099.
Action 10: Walk to iron_2117.
Action 11: Plug in iron_2117.
Action 12: Switch on iron_2117.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        achieve is_on(iron)
        # Iron the shirt by ensuring its on the ironing board and the iron is on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        # Select clothes_shirt_2114

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        # Select ironing_board_2099

        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select iron_2117

        iron_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        achieve_once on(shirt, ironing_board)
        achieve is_on(iron)
        # Use the iron to press the shirt on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        # Select clothes_shirt_2114

        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select iron_2117 which is plugged in and turned on

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior iron_shirt(shirt: item, iron: item, ironing_board: item):
    body:
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        achieve is_on(iron)
        # Ensure the iron is on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        # Select the shirt that needs ironing

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_shirt(shirt, iron, ironing_board)
        # Iron the shirtusing the iron on the ironing board
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_shirt_on_ironing_board(shirt: item, ironing_board: item):
    # Function to check if a shirt is already on the ironing board
    symbol on_board=exists o: item : (is_clothes_shirt(o) and on(o, ironing_board))
    return on_board

behavior iron_shirt(clothes_shirt: item, iron: item, ironing_board: item):
    body:
        achieve_once on(clothes_shirt, ironing_board)
        # Ensure shirt is on the ironing board
        achieve is_on(iron)
        # Ensure the iron is on

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2114
        # Select clothes_shirt_2114 for ironing

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        if not is_shirt_on_ironing_board(clothes_shirt, ironing_board):
            achieve_once on(clothes_shirt, ironing_board)
            # Place the shirt on the ironing board

        iron_shirt(clothes_shirt, iron, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_washing_machine_2041(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(soap,washing_machine_instance)
        else:
            exp(soap,washing_machine_instance)
    eff:
        unknown[soap]=False
        close[soap,washing_machine_instance]=True
        close[washing_machine_instance,soap]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board) # Ensure the shirt is placed on the ironing board
        achieve is_on(iron) # Ensure the iron is on
        achieve_once inhand(shirt)

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2114
        # Select the shirt with ID 2114

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        # Select the ironing board with ID 2099

        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select the iron with ID 2117

        iron_shirt(clothes_shirt, iron, ironing_board)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board) # Ensure the shirt is placed on the ironing board
        achieve is_on(iron) # Ensure the iron is on
        achieve_once inhand(shirt)

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2114
        # Select the shirt with ID 2114

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        # Select the ironing board with ID 2099

        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select the iron with ID 2117

        iron_shirt(clothes_shirt, iron, ironing_board)
##############################
From agent.py-> find a plan in act()
walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to actually use the iron to iron the clothes_shirt_2114. The current actions only show that the shirt has been cleaned, placed on the ironing board, and the iron has been plugged in and switched on.
##############################
From agent.py
Human Instruction: The robot needs to actually use the iron to iron the clothes_shirt_2114. The current actions only show that the shirt has been cleaned, placed on the ironing board, and the iron has been plugged in and switched on.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Grab clothes_shirt_2114.
Action 4: Wash clothes_shirt_2114.
Action 5: Walk to faucet_134.
Action 6: Switch off faucet_134.
Action 7: Walk to ironing_board_2099.
Action 8: Put clothes_shirt_2114 on ironing_board_2099.
Action 9: look for iron_2117 around ironing_board_2099.
Action 10: Walk to iron_2117.
Action 11: Plug in iron_2117.
Action 12: Switch on iron_2117.
Action 13: Walk to clothes_shirt_2114.
Action 14: Grab clothes_shirt_2114.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board) # Place shirt on the ironing board
        achieve_once on(iron, shirt) # Use the iron on the shirt for ironing

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2114
        # Select clothes_shirt_2114

        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select iron_2117

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        # Select ironing_board_2099

        iron_shirt(iron, clothes_shirt, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board) # Place shirt on the ironing board
        achieve_once on(iron, shirt) # Use the iron on the shirt for ironing

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2114
        # Select clothes_shirt_2114

        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select iron_2117

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        # Select ironing_board_2099

        iron_shirt(iron, clothes_shirt, ironing_board)

##############################
From agent.py-> find a plan in act()
put_executor(clothes_shirt_2114, ironing_board_2099)walk_executor(iron_2117)grab_executor(iron_2117)walk_executor(clothes_shirt_2114)put_executor(iron_2117, clothes_shirt_2114)
##############################
From agent.py
put_executor(clothes_shirt_2114, ironing_board_2099)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. clothes_shirt_2114 is close ironing_board_2099. clothes_shirt_2114 is on ironing_board_2099. clothes_shirt_2114 released by right hand. 
##############################
From agent.py
walk_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. 
##############################
From agent.py
grab_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Grabbing iron_2117 by right hand. 
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
put_executor(iron_2117, clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Robot is close to the clothes_shirt_2114. clothes_shirt_2114 is close iron_2117. iron_2117 is close clothes_shirt_2114. iron_2117 is on clothes_shirt_2114. iron_2117 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Hand wash a shirt and iron this shirt.
Action History:
['walk_executor(basket_for_clothes_2040)', 'grab_executor(clothes_shirt_2114)', 'wash_executor(clothes_shirt_2114)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_shirt_2114, ironing_board_2099)', 'walk_executor(iron_2117)', 'plugin_executor(iron_2117)', 'switchon_executor(iron_2117)', 'walk_executor(clothes_shirt_2114)', 'grab_executor(clothes_shirt_2114)', 'put_executor(clothes_shirt_2114, ironing_board_2099)', 'walk_executor(iron_2117)', 'grab_executor(iron_2117)', 'walk_executor(clothes_shirt_2114)', 'put_executor(iron_2117, clothes_shirt_2114)']
Time info:
Time consume: 233 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 100
goal generate times: 8
goal correct times: 1
action_num: 17

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
