From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the banana slices until golden brown.', '4. Remove and let them cool.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_kitchen_counter_230(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_and_slice_banana(banana: item, knife: item, cutting_board: item):
    body:
        achieve_once on(banana, cutting_board)
        achieve_once cut(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana

        bind knife: item where:
            is_knife(knife)
        # Select a knife for slicing

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board for slicing

        peel_and_slice_banana(banana, knife, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_and_slice_banana(banana: item, knife: item, cutting_board: item):
    body:
        achieve_once on(banana, cutting_board)
        achieve_once cut(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana

        bind knife: item where:
            is_knife(knife)
        # Select a knife for slicing

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board for slicing

        peel_and_slice_banana(banana, knife, cutting_board)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_banana_2011, kitchen_counter_230)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_banana_2011, kitchen_counter_230)
Fail to find food_banana_2011 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_banana_2011, cupboard_229)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_banana_2011, cupboard_229)
Fail to find food_banana_2011 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(food_banana_2011, stove_2065)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(food_banana_2011, stove_2065)
Fail to find food_banana_2011 around stove_2065. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_banana_2011, fridge_289)
Find food_banana_2011. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_banana_2011 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_banana_2011. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
cut_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_fork_2080_around_table_107(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior heat_oil_in_pan(oil:item, frying_pan:item, stove:item):
    body:
        achieve_once inside(oil, frying_pan)
        achieve_once on(frying_pan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_oil_in_pan(oil, frying_pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior heat_oil_in_pan(oil:item, frying_pan:item, stove:item):
    body:
        achieve_once inside(oil, frying_pan)
        achieve_once on(frying_pan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_oil_in_pan(oil, frying_pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior fry_banana_slices_until_golden(bananas: item, frying_pan: item):
    body:
        achieve_once on(bananas, frying_pan)
        # Place banana slices into the frying pan

        achieve is_on(stove_2065)
        # Ensure the stove remains on to maintain heat

        # Fry the banana slices until golden brown Ensure the bananas are in the frying pan for this process

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select the sliced banana

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove_2065)
        # Select the frying pan already heated with oil on the stove

        fry_banana_slices_until_golden(bananas, frying_pan)
        # Fry the banana slices until they are golden brown
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<bananas: item>, Variable<frying_pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#goal_representation

behavior fry_banana_slices_until_golden(bananas: item, frying_pan: item, stove: item):
    body:
        achieve_once on(bananas, frying_pan)
        # Place banana slices into the frying pan

        achieve is_on(stove)
        # Ensure the stove remains on to maintain heat

        # Fry the banana slices until golden brown

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select the sliced banana

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove_2065)
        # Select the frying pan already heated with oil on the stove

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        fry_banana_slices_until_golden(bananas, frying_pan, stove)
        # Fry the banana slices until they are golden brown

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<frying_pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_fork_2080_around_coffee_table_2068(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(fork,coffee_table_instance)
        else:
            exp(fork,coffee_table_instance)
    eff:
        unknown[fork]=False
        close[fork,coffee_table_instance]=True
        close[coffee_table_instance,fork]=True
    

#goal_representation
 
behavior fry_banana_slices_until_golden(bananas: item, frying_pan: item, stove: item):
    body:
        achieve_once on(bananas, frying_pan)
        # Place banana slices into the frying pan

        achieve is_on(stove)
        # Ensure the stove remains on to maintain heat

        # Fry the banana slices until golden brown

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select the sliced banana

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove)
        # Select the frying pan already heated with oil on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        fry_banana_slices_until_golden(bananas, frying_pan, stove)
        # Fry the banana slices until they are golden brown

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_fork_2081_around_table_107(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def has_banana_slices_on_fryingpan(fryingpan:item):
    # Function to check if there are banana slices on the frying pan
    symbol has_banana_slices=exists o: item : (is_food_banana(o) and on(o, fryingpan))
    return has_banana_slices

behavior fry_banana_slices(fryingpan:item):
    body:
        if has_banana_slices_on_fryingpan(fryingpan):
            achieve_once is_on(fryingpan)
            # Ensure the pan is on and frying the banana slices

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(oil_2079, fryingpan)
        # Select the frying pan that has oil in it

        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices
        
        if not has_banana_slices_on_fryingpan(fryingpan):
            achieve_once on(banana_slices, fryingpan)
            # Place banana slices on the frying pan

        fry_banana_slices(fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: oil_2079; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_fork_2081_around_table_226(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#goal_representation
 
def has_banana_slices_on_fryingpan(fryingpan:item):
    # Function to check if there are banana slices on the frying pan
    symbol has_banana_slices=exists o: item : (is_food_banana(o) and on(o, fryingpan))
    return has_banana_slices

behavior fry_banana_slices(fryingpan:item):
    body:
        if has_banana_slices_on_fryingpan(fryingpan):
            achieve_once is_on(fryingpan)
            # Ensure the pan is on and frying the banana slices

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
            bind oil: item where:
            is_oil(oil) and on(oil, fryingpan)
        # Select the frying pan that has oil in it

        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices
        
        if not has_banana_slices_on_fryingpan(fryingpan):
            achieve_once on(banana_slices, fryingpan)
            # Place banana slices on the frying pan

        fry_banana_slices(fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'is_oil') at line 5830, column 13.
Expected one of: 
	* _INDENT
Previous tokens: [Token('_NEWLINE', '\n            ')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_fork_2081_around_coffee_table_2068(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(fork,coffee_table_instance)
        else:
            exp(fork,coffee_table_instance)
    eff:
        unknown[fork]=False
        close[fork,coffee_table_instance]=True
        close[coffee_table_instance,fork]=True
    

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#goal_representation
 
def has_banana_slices_on_fryingpan(fryingpan:item):
    # Function to check if there are banana slices on the frying pan
    symbol has_banana_slices=exists o: item : (is_food_banana(o) and on(o, fryingpan))
    return has_banana_slices

behavior fry_banana_slices(fryingpan:item):
    body:
        if has_banana_slices_on_fryingpan(fryingpan):
            achieve_once is_on(fryingpan)
            # Ensure the pan is on and frying the banana slices

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind oil: item where:
            is_oil(oil) and on(oil, fryingpan)
        # Select the frying pan that has oil in it

        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices
        
        if not has_banana_slices_on_fryingpan(fryingpan):
            achieve_once on(banana_slices, fryingpan)
            # Place banana slices on the frying pan

        fry_banana_slices(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_fork_2080_around_table_226(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(fryingpan: item, stove: item):
    body:
        achieve on(fryingpan, stove) # Ensure the frying pan is on the stove
        achieve is_on(stove) # Ensure the stove is on to fry the banana slices until golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove 2065

        fry_banana_slices(fryingpan, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_spectacles_2082_around_table_107(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(spectacles,table_instance)
        else:
            exp(spectacles,table_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,table_instance]=True
        close[table_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
behavior fry_banana_slices(fryingpan: item, stove: item):
    body:
        achieve is_on(stove) # Ensure the stove remains on
        achieve inside(food_banana_2011, fryingpan) # Ensure banana slices are inside the fryingpan
        achieve_once golden_brown(food_banana_2011) # Fry bananas until they are golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select the frying pan that is already on the stove
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Ensure we are using stove 2065

        fry_banana_slices(fryingpan, stove)
        # Call the behavior to fry the banana slices until golden brown
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_banana_2011; available variables: [Variable<fryingpan: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_fork_2080_around_table_226(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_spectacles_2082_around_cpuscreen_416(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==416
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(spectacles,cpuscreen_instance)
        else:
            exp(spectacles,cpuscreen_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,cpuscreen_instance]=True
        close[cpuscreen_instance,spectacles]=True
    

#goal_representation
 
behavior fry_banana_slices(fryingpan: item, stove: item, banana: item):
    body:
        achieve is_on(stove) # Ensure the stove remains on
        achieve inside(banana, fryingpan) # Ensure banana slices are inside the fryingpan
        achieve_once golden_brown(banana) # Fry bananas until they are golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select the frying pan that is already on the stove
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Ensure we are using stove 2065

        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Ensure the banana slices that are already cut are selected
        
        fry_banana_slices(fryingpan, stove, banana)
        # Call the behavior to fry the banana slices until golden brown

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function golden_brown not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior fry_banana_slices(fryingpan: item, stove: item, banana: item):
    body:
        achieve is_on(stove) # Ensure the stove remains on
        achieve inside(banana, fryingpan) # Ensure banana slices are inside the fryingpan
        achieve_once on(banana, fryingpan) # Fry banana slices on the fryingpan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select the frying pan that is already on the stove
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Ensure we are using stove 2065

        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Ensure the banana slices that are already cut are selected
        
        fry_banana_slices(fryingpan, stove, banana)
        # Call the behavior to fry the banana slices until golden brown

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_table_226(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices that are already cut
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        foreach banana_slice: item:
            if is_food_banana(banana_slice) and cut(banana_slice) and inside(banana_slice, fryingpan):
                achieve on(banana_slice, fryingpan)
                # Place each banana slice in the frying pan to fry them

        achieve_once exist golden_brown(banana_slices) 
        # Fry the banana slices until they are golden brown in the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'golden_brown') at line 5810, column 28.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2080_around_coffee_table_2068(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(fork,coffee_table_instance)
        else:
            exp(fork,coffee_table_instance)
    eff:
        unknown[fork]=False
        close[fork,coffee_table_instance]=True
        close[coffee_table_instance,fork]=True
    

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#goal_representation
 
behavior fry_banana_slices(banana_slices: item, fryingpan: item):
    body:
        foreach banana_slice: item:
            if is_food_banana(banana_slice) and cut(banana_slice) and not inside(banana_slice, fryingpan):
                achieve_once on(banana_slice, fryingpan)
                # Place each banana slice in the frying pan to fry them

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        fry_banana_slices(banana_slices, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_banana_slices(banana_slices: item, fryingpan: item):
    body:
        foreach banana_slice: item:
            if is_food_banana(banana_slice) and cut(banana_slice) and not inside(banana_slice, fryingpan):
                achieve_once on(banana_slice, fryingpan)
                # Place each banana slice in the frying pan to fry them

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        fry_banana_slices(banana_slices, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)put_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
put_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_banana_2011 is close fryingpan_2083. fryingpan_2083 is close food_banana_2011. food_banana_2011 is on fryingpan_2083. food_banana_2011 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has cut the banana and placed it in the frying pan with oil, turning the stove on. However, the task of frying the banana slices until golden brown is not completed as there is no action that explicitly indicates the bananas have been fried until golden brown, beyond just placing them on the frying pan.
##############################
From agent.py
Human Instruction: The robot has cut the banana and placed it in the frying pan with oil, turning the stove on. However, the task of frying the banana slices until golden brown is not completed as there is no action that explicitly indicates the bananas have been fried until golden brown, beyond just placing them on the frying pan.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_banana_2011 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for food_banana_2011 around cupboard_229.
Action 6: Walk to stove_2065.
Action 7: Open stove_2065.
Action 8: look for food_banana_2011 around stove_2065.
Action 9: Walk to fridge_289.
Action 10: Switch off fridge_289.
Action 11: Open fridge_289.
Action 12: look for food_banana_2011 around fridge_289.
Action 13: Grab food_banana_2011.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_banana_2011 on cutting_board_2051.
Action 16: Walk to knife_2050.
Action 17: Grab knife_2050.
Action 18: Walk to food_banana_2011.
Action 19: Cut food_banana_2011.
Action 20: Walk to oil_2079.
Action 21: Grab oil_2079.
Action 22: Walk to fryingpan_2083.
Action 23: Put oil_2079 into fryingpan_2083.
Action 24: Grab fryingpan_2083.
Action 25: Walk to stove_2065.
Action 26: Put fryingpan_2083 on stove_2065.
Action 27: Switch on stove_2065.
Action 28: Walk to food_banana_2011.
Action 29: Grab food_banana_2011.
Action 30: Walk to fryingpan_2083.
Action 31: Put food_banana_2011 on fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_coffee_table_2068(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(plate,coffee_table_instance)
        else:
            exp(plate,coffee_table_instance)
    eff:
        unknown[plate]=False
        close[plate,coffee_table_instance]=True
        close[coffee_table_instance,plate]=True
    

behavior find_fork_2081_around_coffee_table_2068(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(fork,coffee_table_instance)
        else:
            exp(fork,coffee_table_instance)
    eff:
        unknown[fork]=False
        close[fork,coffee_table_instance]=True
        close[coffee_table_instance,fork]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_on_cutting_board(cutting_board: item):
    # Function to check if the banana is on the cutting board
    symbol is_banana_present = exists o: item : (is_food_banana(o) and on(o, cutting_board))
    return is_banana_present

def is_oil_in_fryingpan(fryingpan: item):
    # Function to check if there is oil in the frying pan
    symbol has_oil=exists o: item : (is_oil(o) and inside(o, fryingpan))
    return has_oil

def is banana_sliced(fryingpan: item):
    # Function to check if banana slices are in the frying pan
    symbol banana_sliced_on_pan = exists o: item : (is_food_banana(o) and cut(o) and inside(o, fryingpan))
    return banana_sliced_on_pan

behavior fry_banana_slices(fryingpan: item, stove: item):
    body:
        achieve is_on(stove)
        # Ensure stove is on
        achieve is_oil_in_fryingpan(fryingpan)
        # Ensure there is oil in the frying pan
        achieve banana_sliced_on_pan(fryingpan)
        # Ensure banana slices are inside the frying pan
        
behavior assure_golden_brown(fryingpan: item):
    body:
        achieve_once dirty(fryingpan)
        # Since we have no state for goldenbrown, assume pan will need cleaning after frying
        
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_banana_slices(fryingpan, stove)
        assure_golden_brown(fryingpan)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'banana_sliced') at line 5843, column 8.
Expected one of: 
	* LPAR
Previous tokens: [Token('VARNAME', 'is')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_fork_2081_around_table_226(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#goal_representation
 
def is_banana_on_cutting_board(cutting_board: item):
    # Function to check if the banana is on the cutting board
    symbol is_banana_present = exists o: item : (is_food_banana(o) and on(o, cutting_board))
    return is_banana_present

def is_oil_in_fryingpan(fryingpan: item):
    # Function to check if there is oil in the frying pan
    symbol has_oil=exists o: item : (is_oil(o) and inside(o, fryingpan))
    return has_oil

def is_banana_sliced(fryingpan: item):
    # Function to check if banana slices are in the frying pan
    symbol banana_sliced_on_pan = exists o: item : (is_food_banana(o) and cut(o) and inside(o, fryingpan))
    return banana_sliced_on_pan

behavior fry_banana_slices(fryingpan: item, stove: item):
    body:
        achieve is_on(stove)
        # Ensure stove is on
        achieve is_oil_in_fryingpan(fryingpan)
        # Ensure there is oil in the frying pan
        achieve is_banana_sliced(fryingpan)
        # Ensure banana slices are inside the frying pan
        
behavior assure_golden_brown(fryingpan: item):
    body:
        achieve_once dirty(fryingpan)
        # Since we have no state for goldenbrown, assume pan will need cleaning after frying
        
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_banana_slices(fryingpan, stove)
        assure_golden_brown(fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_table_226(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_on_stove(fryingpan:item, stove:item):
    # Function to check if the frying pan is on the stove
    symbol fryingpan_on_stove = on(fryingpan, stove)
    return fryingpan_on_stove

behavior fry_banana_slices(fryingpan:item):
    body:
        achieve is_on(fryingpan)
        achieve dirty(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        # Select the frying pan that is already prepared

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        if is_fryingpan_on_stove(fryingpan, stove):
            # Ensure the frying pan is on the stove
            fry_banana_slices(fryingpan)

        else:
            achieve_once on(fryingpan, stove)
            # Place the frying pan on the stove if not already
            fry_banana_slices(fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_coffee_table_2068(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(plate,coffee_table_instance)
        else:
            exp(plate,coffee_table_instance)
    eff:
        unknown[plate]=False
        close[plate,coffee_table_instance]=True
        close[coffee_table_instance,plate]=True
    

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(fryingpan:item):
    body:
        achieve clean(fryingpan)
        # Ensure the frying pan is clean before starting to fry

behave heat_oil(fryingpan:item, stove:item):
    body:
        achieve inside(oil_2079, fryingpan)
        # Ensure oil is inside the frying pan

behavior fry_bananas_until_golden(banana:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan)
        # Ensure banana slices are inside the frying pan
        observe(banana, "Are the banana slices golden brown")
        # Observe if banana slices are golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
            # Select a frying pan

        bind stove: item where:
            is_stove(stove)
            # Select a stove

        bind banana: item where:
            is_food_banana(banana)
            # Select the banana slices to fry

        fry_banana_slices(fryingpan)
        heat_oil(fryingpan, stove)
        fry_bananas_until_golden(banana, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'behave') at line 5838, column 1.
Expected one of: 
	* $END
	* DEF
	* CONTROLLER
	* FEATURE
	* _NEWLINE
	* GENERATOR
	* _PRAGMA_KEYWORD
	* INCLUDE
	* DOMAIN
	* GOAL
	* UNDIRECTED_GENERATOR
	* OBJECTS
	* BEHAVIOR
	* TYPEDEF
	* INIT
	* IMPORT
Previous tokens: [Token('_NEWLINE', '\n        # Ensure the frying pan is clean before starting to fry\n\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_coffee_table_2068(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(plate,coffee_table_instance)
        else:
            exp(plate,coffee_table_instance)
    eff:
        unknown[plate]=False
        close[plate,coffee_table_instance]=True
        close[coffee_table_instance,plate]=True
    

behavior find_fork_2080_around_table_107(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#goal_representation
 
behavior fry_banana_slices(fryingpan:item):
    body:
        achieve clean(fryingpan)

behavior heat_oil(fryingpan:item, stove:item):
    body:
        achieve inside(oil_2079, fryingpan)

behavior fry_bananas_until_golden(banana:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan)
        observe(banana, "Are the banana slices golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        bind banana: item where:
            is_food_banana(banana)

        fry_banana_slices(fryingpan)
        heat_oil(fryingpan, stove)
        fry_bananas_until_golden(banana, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: oil_2079; available variables: [Variable<fryingpan: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2080_around_table_107(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#goal_representation
 
behavior fry_banana_slices(fryingpan:item):
    body:
        achieve clean(fryingpan)

behavior heat_oil(fryingpan:item, stove:item, oil:item):
    body:
        achieve inside(oil, fryingpan)

behavior fry_bananas_until_golden(banana:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan)
        observe(banana, "Are the banana slices golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        bind banana: item where:
            is_food_banana(banana)

        bind oil: item where:
            is_oil(oil)

        fry_banana_slices(fryingpan)
        heat_oil(fryingpan, stove, oil)
        fry_bananas_until_golden(banana, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_banana_slices(fryingpan:item):
    body:
        achieve clean(fryingpan)

behavior heat_oil(fryingpan:item, stove:item, oil:item):
    body:
        achieve inside(oil, fryingpan)

behavior fry_bananas_until_golden(banana:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan)
        observe(banana, "Are the banana slices golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        bind banana: item where:
            is_food_banana(banana)

        bind oil: item where:
            is_oil(oil)

        fry_banana_slices(fryingpan)
        heat_oil(fryingpan, stove, oil)
        fry_bananas_until_golden(banana, fryingpan)

##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)putin_executor(food_banana_2011, fryingpan_2083)obs(food_banana_2011, Are the banana slices golden brown)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
putin_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_banana_2011 is inside fryingpan_2083. food_banana_2011 is close fryingpan_2083. food_banana_2011 released by left hand. 
##############################
From agent.py
obs(food_banana_2011, Are the banana slices golden brown)
Get this information:  food_banana_2011 is inside dining_room_201. food_banana_2011 is inside fryingpan_2083. food_banana_2011 is close to character_65. food_banana_2011 is close to fryingpan_2083. food_banana_2011 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to continue the frying process until it observes that the banana slices have turned golden brown.
##############################
From agent.py
Human Instruction: The robot needs to continue the frying process until it observes that the banana slices have turned golden brown.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_banana_2011 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for food_banana_2011 around cupboard_229.
Action 6: Walk to stove_2065.
Action 7: Open stove_2065.
Action 8: look for food_banana_2011 around stove_2065.
Action 9: Walk to fridge_289.
Action 10: Switch off fridge_289.
Action 11: Open fridge_289.
Action 12: look for food_banana_2011 around fridge_289.
Action 13: Grab food_banana_2011.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_banana_2011 on cutting_board_2051.
Action 16: Walk to knife_2050.
Action 17: Grab knife_2050.
Action 18: Walk to food_banana_2011.
Action 19: Cut food_banana_2011.
Action 20: Walk to oil_2079.
Action 21: Grab oil_2079.
Action 22: Walk to fryingpan_2083.
Action 23: Put oil_2079 into fryingpan_2083.
Action 24: Grab fryingpan_2083.
Action 25: Walk to stove_2065.
Action 26: Put fryingpan_2083 on stove_2065.
Action 27: Switch on stove_2065.
Action 28: Walk to food_banana_2011.
Action 29: Grab food_banana_2011.
Action 30: Walk to fryingpan_2083.
Action 31: Put food_banana_2011 on fryingpan_2083.
Action 32: Grab food_banana_2011.
Action 33: Put food_banana_2011 into fryingpan_2083.
Action 34: Observe around food_banana_2011 with the question of Are the banana slices golden brown.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior observe_banana_slices(fryingpan:item):
    body:
        observe(fryingpan, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(food_banana_2011, fryingpan)
        # Select the frying pan containing the banana slices

        observe_banana_slices(fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_banana_2011; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#goal_representation

behavior observe_banana_slices(fryingpan:item, bananas:item):
    body:
        observe(fryingpan, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(food_banana_2011, fryingpan)
        # Select the frying pan containing the banana slices

        bind bananas: item where:
            is_food_banana(bananas) and on(bananas, fryingpan)
        # Select the banana slices on the frying pan

        observe_banana_slices(fryingpan, bananas)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_banana_2011; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_spectacles_2082_around_dresser_358(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(spectacles,dresser_instance)
        else:
            exp(spectacles,dresser_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,dresser_instance]=True
        close[dresser_instance,spectacles]=True
    

#goal_representation
 
behavior observe_banana_slices(fryingpan:item, bananas:item):
    body:
        observe(fryingpan, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind bananas: item where:
            is_food_banana(bananas) and on(bananas, fryingpan)
        # Select the banana slices on the frying pan

        observe_banana_slices(fryingpan, bananas)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_spectacles_2082_around_cpuscreen_416(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==416
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(spectacles,cpuscreen_instance)
        else:
            exp(spectacles,cpuscreen_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,cpuscreen_instance]=True
        close[cpuscreen_instance,spectacles]=True
    

behavior find_fork_2080_around_table_107(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_done(banana_slices:item):
    # Function to check if the banana slices are golden brown
    observe(banana_slices, "Are the banana slices golden brown")
    return visited(banana_slices)

behavior observe_banana(banana_slices:item):
    body:
        observe(banana_slices, "Are the banana slices golden brown")
        # Observe whether the banana slices are golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind the frying pan

        foreach banana_slices: item:
            if is_food_banana(banana_slices) and inside(banana_slices, fryingpan):
                observe_banana(banana_slices)
                # Observe each banana slice until they are golden brown

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2081_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

#goal_representation
 
behavior fry_banana_slices(banana_slices:item, fryingpan:item):
    body:
        observe(banana_slices, "Are the banana slices golden brown")
        # Observe whether the banana slices are golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind the frying pan

        foreach banana_slices: item:
            if is_food_banana(banana_slices) and inside(banana_slices, fryingpan):
                fry_banana_slices(banana_slices, fryingpan)
                # Fry each banana slice until they are golden brown

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_banana_slices(banana_slices:item, fryingpan:item):
    body:
        observe(banana_slices, "Are the banana slices golden brown")
        # Observe whether the banana slices are golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind the frying pan

        foreach banana_slices: item:
            if is_food_banana(banana_slices) and inside(banana_slices, fryingpan):
                fry_banana_slices(banana_slices, fryingpan)
                # Fry each banana slice until they are golden brown

##############################
From agent.py-> find a plan in act()
obs(food_banana_2011, Are the banana slices golden brown)
##############################
From agent.py
obs(food_banana_2011, Are the banana slices golden brown)
Get this information:  food_banana_2011 is inside dining_room_201. food_banana_2011 is inside fryingpan_2083. food_banana_2011 is close to character_65. food_banana_2011 is close to fryingpan_2083. food_banana_2011 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The frying process needs to continue until the robot observes the banana slices have turned golden brown. As per the current observations, the banana slices are not yet golden brown.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior remove_and_cool(banana_slices: item, plate: item):
    body:
        achieve_once on(banana_slices, plate)
        # Remove the banana slices from the frying pan and place them on the plate to cool

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices)
        # Select the banana slices that were fried

        bind plate: item where:
            is_plate(plate)
        # Select a plate to place the banana slices on

        remove_and_cool(banana_slices, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior remove_and_cool(banana_slices: item, plate: item):
    body:
        achieve_once on(banana_slices, plate)
        # Remove the banana slices from the frying pan and place them on the plate to cool

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices)
        # Select the banana slices that were fried

        bind plate: item where:
            is_plate(plate)
        # Select a plate to place the banana slices on

        remove_and_cool(banana_slices, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(table_107)exp(plate_1000, table_107)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(plate_1000)put_executor(food_banana_2011, plate_1000)
##############################
From agent.py
walk_executor(table_107)
Robot find: mat_173, clothes_hat_2045, clothes_gloves_2046, drawing_176, drawing_174, drawing_175, Robot is close to the knife_2050. Robot is close to the table_107. 
##############################
From agent.py
exp(plate_1000, table_107)
Fail to find plate_1000 around table_107. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(plate_1000, table_226)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(plate_1000)put_executor(food_banana_2011, plate_1000)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the knife_2050. Robot is close to the table_226. 
##############################
From agent.py
exp(plate_1000, table_226)
Fail to find plate_1000 around table_226. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(plate_1000, coffee_table_2068)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(plate_1000)put_executor(food_banana_2011, plate_1000)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the knife_2050. Robot is close to the coffee_table_2068. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Go to the dining room marked as dining_room_201. Locate the sink identified as sink_231. The target item, plate_1000, is placed directly on the sink_231.
Re-decompose: None

##############################
From agent.py
Human Instruction: The robot needs to continue the frying process until it observes that the banana slices have turned golden brown.
Go to the dining room marked as dining_room_201. Locate the sink identified as sink_231. The target item, plate_1000, is placed directly on the sink_231.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_banana_2011 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for food_banana_2011 around cupboard_229.
Action 6: Walk to stove_2065.
Action 7: Open stove_2065.
Action 8: look for food_banana_2011 around stove_2065.
Action 9: Walk to fridge_289.
Action 10: Switch off fridge_289.
Action 11: Open fridge_289.
Action 12: look for food_banana_2011 around fridge_289.
Action 13: Grab food_banana_2011.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_banana_2011 on cutting_board_2051.
Action 16: Walk to knife_2050.
Action 17: Grab knife_2050.
Action 18: Walk to food_banana_2011.
Action 19: Cut food_banana_2011.
Action 20: Walk to oil_2079.
Action 21: Grab oil_2079.
Action 22: Walk to fryingpan_2083.
Action 23: Put oil_2079 into fryingpan_2083.
Action 24: Grab fryingpan_2083.
Action 25: Walk to stove_2065.
Action 26: Put fryingpan_2083 on stove_2065.
Action 27: Switch on stove_2065.
Action 28: Walk to food_banana_2011.
Action 29: Grab food_banana_2011.
Action 30: Walk to fryingpan_2083.
Action 31: Put food_banana_2011 on fryingpan_2083.
Action 32: Grab food_banana_2011.
Action 33: Put food_banana_2011 into fryingpan_2083.
Action 34: Observe around food_banana_2011 with the question of Are the banana slices golden brown.
Action 35: Observe around food_banana_2011 with the question of Are the banana slices golden brown.
Action 36: Walk to table_107.
Action 37: look for plate_1000 around table_107.
Action 38: Walk to table_226.
Action 39: look for plate_1000 around table_226.
Action 40: Walk to coffee_table_2068.

##############################
From agent.py
exp(plate_1000, coffee_table_2068)
Fail to find plate_1000 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(plate_1000)put_executor(food_banana_2011, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(plate_1000)put_executor(food_banana_2011, plate_1000)
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_banana_2011, plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the plate_1000. Robot is close to the sink_231. food_banana_2011 is close plate_1000. plate_1000 is close food_banana_2011. food_banana_2011 is on plate_1000. food_banana_2011 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_banana_2011)', 'cut_executor(food_banana_2011)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'put_executor(food_banana_2011, fryingpan_2083)', 'grab_executor(food_banana_2011)', 'putin_executor(food_banana_2011, fryingpan_2083)', 'walk_executor(table_107)', 'walk_executor(table_226)', 'walk_executor(coffee_table_2068)', 'walk_executor(sink_231)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(plate_1000)', 'put_executor(food_banana_2011, plate_1000)']
Time info:
Time consume: 488 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 40
goal generate times: 13
goal correct times: 4
action_num: 37

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
