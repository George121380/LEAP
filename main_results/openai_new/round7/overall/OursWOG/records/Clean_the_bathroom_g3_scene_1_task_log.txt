From agent.py
Reset goals: The sub-goals are: 
['Wipe the toilet with toilet paper, then throw the toilet paper into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_counter_18(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(toilet_paper,bathroom_counter_instance)
        else:
            exp(toilet_paper,bathroom_counter_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_counter_instance]=True
        close[bathroom_counter_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_paper(toilet_paper: item, toilet: item):
    body:
        wipe(toilet)
        # Wipe the toilet using the toilet paper
        achieve_once inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select a piece of toilet paper

        bind toilet: item where:
            is_toilet(toilet)
        # Select a toilet

        wipe_toilet_with_paper(toilet_paper, toilet)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wipe_toilet_with_paper(toilet_paper: item, toilet: item):
    body:
        wipe(toilet)
        # Wipe the toilet using the toilet paper
        achieve_once inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select a piece of toilet paper

        bind toilet: item where:
            is_toilet(toilet)
        # Select a toilet

        wipe_toilet_with_paper(toilet_paper, toilet)

##############################
From agent.py-> find a plan in act()
walk_executor(toilet_15)wipe_executor(toilet_15)walk_executor(bathroom_counter_18)exp(toilet_paper_2076, bathroom_counter_18)walk_executor(toilet_15)open_executor(toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(toilet_15)
Robot find: toilet_paper_2076, drawing_33, Robot is close to the toilet_15. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

behavior find_soap_2126_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior wipe_and_dispose(toilet: item, toilet_paper: item):
    body:
        wipe(toilet)
        # Wipe the toilet with toilet paper
        achieve_once inside(toilet_paper, toilet)
        # Throw the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select the toilet with id 15
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select a toilet paper

        wipe_and_dispose(toilet, toilet_paper)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior wipe_and_dispose(toilet: item, toilet_paper: item):
    body:
        wipe(toilet)
        # Wipe the toilet with toilet paper
        achieve_once inside(toilet_paper, toilet)
        # Throw the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select the toilet with id 15
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select a toilet paper

        wipe_and_dispose(toilet, toilet_paper)
##############################
From agent.py-> find a plan in act()
wipe_executor(toilet_15)open_executor(toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_shower_21(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==21
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet(toilet:item, toilet_paper:item):
    body:
        wipe(toilet) 
        # Wipe the toilet with the toilet paper

behavior throw_paper_into_toilet(toilet:item, toilet_paper:item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Throw the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet(toilet, toilet_paper)
        throw_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wipe_toilet(toilet:item, toilet_paper:item):
    body:
        wipe(toilet) 
        # Wipe the toilet with the toilet paper

behavior throw_paper_into_toilet(toilet:item, toilet_paper:item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Throw the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet(toilet, toilet_paper)
        throw_paper_into_toilet(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
wipe_executor(toilet_15)open_executor(toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior wipe_with_toilet_paper_and_dispose(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        wipe(toilet)
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select toilet_15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select some toilet paper

        achieve close_char(char, toilet)
        # Approach toilet_15 to perform the task

        wipe_with_toilet_paper_and_dispose(toilet, toilet_paper)
        # Wipe the toilet with toilet paper and dispose of it into the toilet
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_item_in_toilet(toilet:item):
    # Function to check if there is an item inside the toilet (like toilet paper)
    symbol has_item=exists o: item : (inside(o, toilet))
    return has_item

def is_toilet_dirty(toilet:item):
    # Function to check if the toilet is dirty
    symbol dirty=dirty(toilet)
    return dirty

behavior wipe_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inhand(toilet_paper)
        # Hold the toilet paper to wipe the toilet
        wipe(toilet)
        # Perform wiping action

behavior throw_in_toilet(toilet_paper: item, toilet: item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Throw the wiped toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet]==15
        # Select the specified toilet (toilet_15)

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper

        if is_toilet_dirty(toilet):
            # Check if the toilet is dirty before wiping it
            wipe_toilet(toilet, toilet_paper)

        throw_in_toilet(toilet_paper, toilet)
        # Throw the wiped toilet paper into the toilet

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_item_in_toilet(toilet:item):
    # Function to check if there is an item inside the toilet (like toilet paper)
    symbol has_item=exists o: item : (inside(o, toilet))
    return has_item

def is_toilet_dirty(toilet:item):
    # Function to check if the toilet is dirty
    symbol dirty=dirty(toilet)
    return dirty

behavior wipe_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inhand(toilet_paper)
        # Hold the toilet paper to wipe the toilet
        wipe(toilet)
        # Perform wiping action

behavior throw_in_toilet(toilet_paper: item, toilet: item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Throw the wiped toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet]==15
        # Select the specified toilet (toilet_15)

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper

        if is_toilet_dirty(toilet):
            # Check if the toilet is dirty before wiping it
            wipe_toilet(toilet, toilet_paper)

        throw_in_toilet(toilet_paper, toilet)
        # Throw the wiped toilet paper into the toilet

##############################
From agent.py-> find a plan in act()
open_executor(toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
open_executor(toilet_15)
Robot find: Robot is close to the toilet_15. toilet_15 is opened. 
##############################
From agent.py
walk_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. 
##############################
From agent.py
grab_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Grabbing toilet_paper_2076 by right hand. 
##############################
From agent.py
walk_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py
putin_executor(toilet_paper_2076, toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. toilet_paper_2076 is inside toilet_15. toilet_paper_2076 is close toilet_15. toilet_paper_2076 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to wipe the toilet with the toilet paper before throwing it into the toilet. Only the part of throwing the toilet paper was executed, so the sub-task is incomplete.
##############################
From agent.py
Human Instruction: The robot needs to wipe the toilet with the toilet paper before throwing it into the toilet. Only the part of throwing the toilet paper was executed, so the sub-task is incomplete.

Trial and Error: You can not wipe toilet_15You can not wipe toilet_15You can not wipe toilet_15
The actions you have taken:
Action 1: Walk to toilet_15.
Action 2: Open toilet_15.
Action 3: Walk to toilet_paper_2076.
Action 4: Grab toilet_paper_2076.
Action 5: Walk to toilet_15.
Action 6: Put toilet_paper_2076 into toilet_15.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

behavior find_brush_2002_around_bathroom_counter_18(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(brush,bathroom_counter_instance)
        else:
            exp(brush,bathroom_counter_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,brush]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior wipe_and_throw_toilet_paper(toilet_paper:item, toilet:item):
    body:
        achieve_once dirty(toilet)
        # Wipe the toilet with the toilet paper
        achieve_once inside(toilet_paper, toilet)
        # Throw the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select toilet_15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
        # Select toilet_paper_2076

        wipe_and_throw_toilet_paper(toilet_paper, toilet)
        # Execute wiping and throw the toilet paper into the toilet
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2052_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_and_dispose_paper(toilet_paper: item, toilet: item):
    body:
        achieve_once clean(toilet)
        # Wipe the toilet to make it clean
        achieve_once inside(toilet_paper, toilet)
        # Dispose of the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select toilet_15 based on the provided information

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
        # Select toilet_paper_2076 based on the provided information

        achieve close_char(char, toilet)
        # Move the character closer to toilet_15

        wipe_toilet_and_dispose_paper(toilet_paper, toilet)
        # Perform wiping and disposing tasks in sequence

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior wipe_toilet_and_dispose_paper(toilet: item, toilet_paper: item):
    body:
        achieve_once clean(toilet)
        # Wipe the toilet, which results in it being clean
        achieve_once inside(toilet_paper, toilet)
        # Dispose of the used toilet paper by throwing it into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select the toilet with ID 15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
        # Select the toilet paper with ID 2076

        wipe_toilet_and_dispose_paper(toilet, toilet_paper)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Wipe the toilet with toilet paper and then throw it into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2052_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        achieve clean(toilet)
        # Wipe the toilet to ensure it is clean

behavior throw_toilet_paper_into_toilet(toilet:item, toilet_paper:item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Throw the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select toilet_15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
        # Select toilet_paper_2076

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        throw_toilet_paper_into_toilet(toilet, toilet_paper)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet: item, toilet_paper: item):
    body:
        achieve_once close_char(char, toilet)
        wipe(toilet) 
        achieve_once inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select the toilet with ID 15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
        # Select the toilet paper with ID 2076

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wipe_toilet_with_toilet_paper(toilet: item, toilet_paper: item):
    body:
        achieve_once close_char(char, toilet)
        wipe(toilet) 
        achieve_once inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select the toilet with ID 15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
        # Select the toilet paper with ID 2076

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
wipe_executor(toilet_15)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet: item, toilet_paper: item):
    body:
        achieve_once inhand(toilet_paper)
        wipe(toilet)

behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select toilet with ID 15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
        # Select toilet paper with ID 2076

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        discard_toilet_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wipe_toilet_with_toilet_paper(toilet: item, toilet_paper: item):
    body:
        achieve_once inhand(toilet_paper)
        wipe(toilet)

behavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select toilet with ID 15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
        # Select toilet paper with ID 2076

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        discard_toilet_paper_into_toilet(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
grab_executor(toilet_paper_2076)wipe_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
grab_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. Grabbing toilet_paper_2076 by right hand. 
##############################
From agent.py
wipe_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py
putin_executor(toilet_paper_2076, toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. toilet_paper_2076 is inside toilet_15. toilet_paper_2076 is close toilet_15. toilet_paper_2076 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wipe the toilet with toilet paper. Then throw it into the toilet.
Action History:
['walk_executor(toilet_15)', 'wipe_executor(toilet_15) (Failed)', 'wipe_executor(toilet_15) (Failed)', 'wipe_executor(toilet_15) (Failed)', 'open_executor(toilet_15)', 'walk_executor(toilet_paper_2076)', 'grab_executor(toilet_paper_2076)', 'walk_executor(toilet_15)', 'putin_executor(toilet_paper_2076, toilet_15)', 'wipe_executor(toilet_15) (Failed)', 'grab_executor(toilet_paper_2076)', 'wipe_executor(toilet_15)', 'putin_executor(toilet_paper_2076, toilet_15)']
Time info:
Time consume: 156 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 58
goal generate times: 11
goal correct times: 0
action_num: 13

Task complete rate:
1
Scene_id: 1
##############################
