From agent.py
Reset goals: The sub-goals are: 
['1. Put the pizza and hamburger on a plate.', '2. Heat them in the microwave.', '3. Put the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2152_around_kitchen_counter_123(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_pizza_2106_around_kitchen_counter_123(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

behavior find_food_hamburger_2096_around_kitchen_counter_123(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(food: item, plate: item):
    body:
        achieve_once on(food, plate)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_food_on_plate(pizza, plate)
        place_food_on_plate(hamburger, plate)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_food_on_plate(food: item, plate: item):
    body:
        achieve_once on(food, plate)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_food_on_plate(pizza, plate)
        place_food_on_plate(hamburger, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(plate_2152, kitchen_counter_123)exp(food_pizza_2106, kitchen_counter_123)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(kitchen_counter_123)exp(food_hamburger_2096, kitchen_counter_123)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(plate_2152, kitchen_counter_123)
Fail to find plate_2152 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(plate_2152, kitchen_counter_122)exp(food_pizza_2106, kitchen_counter_122)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(kitchen_counter_122)exp(food_hamburger_2096, kitchen_counter_122)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(plate_2152, kitchen_counter_122)
Fail to find plate_2152 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_199)exp(plate_2152, table_199)walk_executor(kitchen_counter_119)exp(food_pizza_2106, kitchen_counter_119)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(kitchen_counter_119)exp(food_hamburger_2096, kitchen_counter_119)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(table_199)
Robot find: wooden_spoon_2000, mat_203, tea_bag_2023, drawing_201, drawing_202, Robot is close to the table_199. 
##############################
From agent.py
exp(plate_2152, table_199)
Fail to find plate_2152 around table_199. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(plate_2152, cupboard_117)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_pizza_2106, fridge_126)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(kitchen_counter_119)exp(food_hamburger_2096, kitchen_counter_119)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(plate_2152, cupboard_117)
Fail to find plate_2152 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(plate_2152, cupboard_118)walk_executor(kitchen_counter_119)exp(food_pizza_2106, kitchen_counter_119)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_hamburger_2096, fridge_126)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(plate_2152, cupboard_118)
Fail to find plate_2152 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(plate_2152, kitchen_counter_119)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_pizza_2106, fridge_126)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(fridge_126)exp(food_hamburger_2096, fridge_126)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(plate_2152, kitchen_counter_119)
Find plate_2152. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_pizza_2106, fridge_126)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(fridge_126)exp(food_hamburger_2096, fridge_126)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_pizza_2106, fridge_126)
Find food_pizza_2106. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
grab_executor(food_pizza_2106)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_pizza_2106 by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_pizza_2106, plate_2152)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. plate_2152 is close food_pizza_2106. food_pizza_2106 is close plate_2152. food_pizza_2106 is on plate_2152. food_pizza_2106 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2096)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_hamburger_2096)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the fridge_126. Grabbing food_hamburger_2096 by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_hamburger_2096, plate_2152)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. food_hamburger_2096 is close plate_2152. plate_2152 is close food_hamburger_2096. food_hamburger_2096 is on plate_2152. food_hamburger_2096 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_microwave_135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(pot,microwave_instance)
        else:
            exp(pot,microwave_instance)
    eff:
        unknown[pot]=False
        close[pot,microwave_instance]=True
        close[microwave_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Place the plate containing the pizza and hamburger inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve is_on(microwave) # Turn on the microwave to heat the food

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2106, plate) and on(food_hamburger_2096, plate)
        # Select the plate with ID 2152 which has pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave to heat the food

        heat_in_microwave(plate, microwave)
        # Heat the pizza and hamburger in the microwave

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_pizza_2106; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_microwave_135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(pot,microwave_instance)
        else:
            exp(pot,microwave_instance)
    eff:
        unknown[pot]=False
        close[pot,microwave_instance]=True
        close[microwave_instance,pot]=True
    

#goal_representation
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Place the plate containing the pizza and hamburger inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve is_on(microwave) # Turn on the microwave to heat the food

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2152 and on(food_pizza_2106, plate) and on(food_hamburger_2096, plate)
        # Select the plate with ID 2152 which has pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave to heat the food

        heat_in_microwave(plate, microwave)
        # Heat the pizza and hamburger in the microwave

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_pizza_2106; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Place the plate containing the pizza and hamburger inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve is_on(microwave) # Turn on the microwave to heat the food

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2152 and on(food_pizza, plate) and on(food_hamburger, plate)
        # Select the plate with ID 2152 which has pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave to heat the food

        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        # Bind the variable food_pizza

        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        # Bind the variable food_hamburger

        heat_in_microwave(plate, microwave)
        # Heat the pizza and hamburger in the microwave
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_food_in_microwave(plate: item, microwave: item):
    body:
        achieve_once inside(plate, microwave)

behavior start_microwave(microwave: item):
    body:
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2106, plate) and on(food_hamburger_2096, plate)
        # Select the plate with pizza and hamburger on it
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_food_in_microwave(plate, microwave)
        start_microwave(microwave) 

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_pizza_2106; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_71_around_microwave_135(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(phone,microwave_instance)
        else:
            exp(phone,microwave_instance)
    eff:
        unknown[phone]=False
        close[phone,microwave_instance]=True
        close[microwave_instance,phone]=True
    

#goal_representation
behavior heat_food_in_microwave(plate: item, microwave: item):
    body:
        achieve_once inside(plate, microwave)

behavior start_microwave(microwave: item):
    body:
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and exists o: item : (is_food_pizza(o) and on(o, plate)) and exists o: item : (is_food_hamburger(o) and on(o, plate))
        # Select the plate with pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_food_in_microwave(plate, microwave)
        start_microwave(microwave)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5389, column 40.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_oven_127(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(pot,oven_instance)
        else:
            exp(pot,oven_instance)
    eff:
        unknown[pot]=False
        close[pot,oven_instance]=True
        close[oven_instance,pot]=True
    

#goal_representation
 
behavior heat_food_in_microwave(plate: item, microwave: item):
    body:
        achieve_once inside(plate, microwave)

behavior start_microwave(microwave: item):
    body:
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and exists pizza: item : (is_food_pizza(pizza) and on(pizza, plate)) and exists hamburger: item : (is_food_hamburger(hamburger) and on(hamburger, plate))
        # Select the plate with pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_food_in_microwave(plate, microwave)
        start_microwave(microwave)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_microwave_135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(pot,microwave_instance)
        else:
            exp(pot,microwave_instance)
    eff:
        unknown[pot]=False
        close[pot,microwave_instance]=True
        close[microwave_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_food_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2106, plate) and on(food_hamburger_2096, plate)
        # Select the plate with pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_food_in_microwave(plate, microwave)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_pizza_2106; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tray_2068_around_microwave_135(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(tray,microwave_instance)
        else:
            exp(tray,microwave_instance)
    eff:
        unknown[tray]=False
        close[tray,microwave_instance]=True
        close[microwave_instance,tray]=True
    

#goal_representation
behavior heat_food_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and exists pizza: item : (is_food_pizza(pizza) and on(pizza, plate)) and exists hamburger: item : (is_food_hamburger(hamburger) and on(hamburger, plate))
        # Select the plate with pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_food_in_microwave(plate, microwave)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'pizza') at line 5386, column 40.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_microwave_135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(pot,microwave_instance)
        else:
            exp(pot,microwave_instance)
    eff:
        unknown[pot]=False
        close[pot,microwave_instance]=True
        close[microwave_instance,pot]=True
    

#goal_representation
behavior heat_food_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and exists pizza_item: item : (is_food_pizza(pizza_item) and on(pizza_item, plate)) and exists hamburger_item: item : (is_food_hamburger(hamburger_item) and on(hamburger_item, plate))
        # Select the plate with pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_food_in_microwave(plate, microwave)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_122)', 'walk_executor(table_199)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_pizza_2106)', 'walk_executor(plate_2152)', 'put_executor(food_pizza_2106, plate_2152)', 'walk_executor(food_hamburger_2096)', 'grab_executor(food_hamburger_2096)', 'walk_executor(plate_2152)', 'put_executor(food_hamburger_2096, plate_2152)']
Time info:
Time consume: 187 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 9
goal generate times: 4
goal correct times: 2
action_num: 17

Task complete rate:
Keystate: k1 - Requires: 8 steps
Keystate: k2 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
