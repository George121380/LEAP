From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Transfer the boiled vegetables into a bowl to cool.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_kitchen_counter_119(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_clothes_shirt_2158_around_basket_for_clothes_2078(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_pot_2138_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_119(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        # Ensure vegetables are in the pot
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be boiled

        fill_pot_with_water(pot, sink)
        boil_vegetables(pot, stove, vegetables)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        # Ensure vegetables are in the pot
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be boiled

        fill_pot_with_water(pot, sink)
        boil_vegetables(pot, stove, vegetables)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(pot_78, kitchen_counter_119)walk_executor(pot_78)open_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(kitchen_counter_119)exp(food_vegetable_2113, kitchen_counter_119)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(pot_78, kitchen_counter_119)
Find pot_78. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(kitchen_counter_119)exp(food_vegetable_2113, kitchen_counter_119)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_vegetable_2113, kitchen_counter_119)
Fail to find food_vegetable_2113 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the pot_78. Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_vegetable_2113, fridge_126)
Find food_vegetable_2113. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2113)putin_executor(food_vegetable_2113, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. food_vegetable_2113 is inside pot_78. pot_78 is close food_vegetable_2113. food_vegetable_2113 is close pot_78. food_vegetable_2113 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot is filled with water before boiling the vegetables. The sequence of actions suggests filling the pot with water may have been overlooked, as the faucet was turned on and off, but no action of filling the pot with water was detailed.
##############################
From agent.py
Human Instruction: You need to ensure the pot is filled with water before boiling the vegetables. The sequence of actions suggests filling the pot with water may have been overlooked, as the faucet was turned on and off, but no action of filling the pot with water was detailed.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for pot_78 around kitchen_counter_119.
Action 3: Walk to pot_78.
Action 4: Grab pot_78.
Action 5: Walk to faucet_20.
Action 6: Switch on faucet_20.
Action 7: Switch off faucet_20.
Action 8: Walk to kitchen_counter_119.
Action 9: look for food_vegetable_2113 around kitchen_counter_119.
Action 10: Walk to fridge_126.
Action 11: Switch off fridge_126.
Action 12: Open fridge_126.
Action 13: look for food_vegetable_2113 around fridge_126.
Action 14: Grab food_vegetable_2113.
Action 15: Put food_vegetable_2113 into pot_78.
Action 16: Walk to stove_2135.
Action 17: Switch on stove_2135.
Action 18: Put pot_78 on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_carrot_2086_around_curtain_205(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==205
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_carrot,curtain_instance)
        else:
            exp(food_carrot,curtain_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,curtain_instance]=True
        close[curtain_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve is_on(stove)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)
        
        bind faucet: item where:
            is_faucet(faucet)

        bind vegetables: item where:
            is_food_vegetable(vegetables)

        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_ice_2024_around_shower_21(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==21
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(ice,shower_instance)
        else:
            exp(ice,shower_instance)
    eff:
        unknown[ice]=False
        close[ice,shower_instance]=True
        close[shower_instance,ice]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_vegetables(pot: item, vegetables: item, stove: item):
    body:
        achieve_once inside(vegetables, pot)
        # Place vegetables inside the pot
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling the pot with water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be boiled

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the vegetables

        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, vegetables, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_ice_2024_around_plate_2152(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(ice,plate_instance)
        else:
            exp(ice,plate_instance)
    eff:
        unknown[ice]=False
        close[ice,plate_instance]=True
        close[plate_instance,ice]=True
    

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot used for boiling

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the vegetables

        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Transfer the vegetables to a bowl to cool.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_ice_2024_around_shower_21(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==21
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(ice,shower_instance)
        else:
            exp(ice,shower_instance)
    eff:
        unknown[ice]=False
        close[ice,shower_instance]=True
        close[shower_instance,ice]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_onion_2048_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        # Place vegetables inside the pot
        achieve is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to boil

        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_294_around_doorjamb_190(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==190
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(hanger,doorjamb_instance)
        else:
            exp(hanger,doorjamb_instance)
    eff:
        unknown[hanger]=False
        close[hanger,doorjamb_instance]=True
        close[doorjamb_instance,hanger]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve_once inside(food_vegetable_2113, pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20

        bind stove: item where:
            is_stove(stove) and id[stove]==2135

        fill_pot_with_water(pot, faucet)
        boil_vegetables_on_stove(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_vegetable_2113; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_vegetables_on_stove(pot:item, stove:item, food_vegetable:item):
    body:
        achieve_once inside(food_vegetable, pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable]==2113

        fill_pot_with_water(pot, faucet)
        boil_vegetables_on_stove(pot, stove, food_vegetable)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_ice_2024_around_shower_21(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==21
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(ice,shower_instance)
        else:
            exp(ice,shower_instance)
    eff:
        unknown[ice]=False
        close[ice,shower_instance]=True
        close[shower_instance,ice]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve is_on(stove)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot used to boil vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        fill_pot_with_water(pot, faucet)

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the vegetables

        boil_vegetables(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Cool them in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_ice_2024_around_shower_21(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==21
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(ice,shower_instance)
        else:
            exp(ice,shower_instance)
    eff:
        unknown[ice]=False
        close[ice,shower_instance]=True
        close[shower_instance,ice]=True
    

behavior find_pot_2040_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        # Ensure vegetables are inside the pot
        achieve is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling the pot with water

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2113
        # Select the vegetables to boil

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the vegetables
        
        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_curtain_205(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==205
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_carrot,curtain_instance)
        else:
            exp(food_carrot,curtain_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,curtain_instance]=True
        close[curtain_instance,food_carrot]=True
    

behavior find_ice_2024_around_shower_21(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==21
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(ice,shower_instance)
        else:
            exp(ice,shower_instance)
    eff:
        unknown[ice]=False
        close[ice,shower_instance]=True
        close[shower_instance,ice]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def need_to_fill_pot_with_water(pot: item):
    # Function to determine if the pot needs to be filled with water
    symbol no_water=not has_water(pot)
    return no_water

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_vegetables_in_pot(pot: item, stove: item, vegetables: item):
    body:
        achieve is_on(stove)
        # Ensure the stove is on
        achieve_once inside(vegetables, pot)
        # Ensure the vegetables are inside the pot
        achieve on(pot, stove)
        # Ensure the pot is on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to boil

        if need_to_fill_pot_with_water(pot):
            # If the pot needs to be filled with water
            fill_pot_with_water(pot, faucet)
            # Fill it with water

        boil_vegetables_in_pot(pot, stove, vegetables)
        # Boil the vegetables in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_carrot_2086_around_curtain_205(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==205
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_carrot,curtain_instance)
        else:
            exp(food_carrot,curtain_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,curtain_instance]=True
        close[curtain_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        # Ensure vegetables are inside the pot
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        fill_pot_with_water(pot)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Boil some vegetables. Then cool them in a bowl.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_vegetable_2113)', 'putin_executor(food_vegetable_2113, pot_78)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'put_executor(pot_78, stove_2135)']
Time info:
Time consume: 305 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 75
goal generate times: 10
goal correct times: 0
action_num: 15

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 5 steps
Keystate: k3 - Requires: 5 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
