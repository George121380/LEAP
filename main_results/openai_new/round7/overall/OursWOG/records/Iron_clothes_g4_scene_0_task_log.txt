From agent.py
Reset goals: The sub-goals are: 
['1. Find an iron and ironing board.', '2. Iron the shirt.', '3. Put the shirt on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_236_around_ironing_board_2074(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(mat,ironing_board_instance)
        else:
            exp(mat,ironing_board_instance)
    eff:
        unknown[mat]=False
        close[mat,ironing_board_instance]=True
        close[ironing_board_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_iron_or_ironing_board(x:item):
    # Function to check if an item is an iron or ironing board
    return is_iron(x) or is_ironing_board(x)

behavior __goal__():
    body:
        if exists iron: item : (is_iron(iron) and visited(iron)):
            # Check if the iron has already been located based on available information
            bind iron: item where:
                is_iron(iron) and visited(iron)
            achieve close_char(char, iron) 
            # Move the character closer to the iron

        elif exists ironing_board: item : (is_ironing_board(ironing_board) and visited(ironing_board)):
            # Check if the ironing board has already been located based on available information
            bind ironing_board: item where:
                is_ironing_board(ironing_board) and visited(ironing_board)
            achieve close_char(char, ironing_board)
            # Move the character closer to the ironing board

        else:
            # If neither the iron nor the ironing board has been located, begin exploration
            foreach item: item:
                if is_iron_or_ironing_board(item) and not visited(item):
                    observe(item, "Check if it is an iron or ironing board")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EXISTS', 'exists') at line 5681, column 14.
Expected one of: 
	* __ANON_2
	* __ANON_3
	* GREATER_EQ
	* __ANON_6
	* __ANON_8
	* DOUBLE_EQUAL
	* IF
	* MORETHAN
	* LSHIFT
	* EQUAL
	* AMPERSAND
	* STAR
	* AND
	* PLUS
	* PERCENT
	* __ANON_7
	* AT
	* __ANON_5
	* FLOORDIV
	* NOT_EQ
	* OR
	* MINUS
	* LESSTHAN
	* __ANON_1
	* VBAR
	* LESS_EQ
	* SEMICOLON
	* COMMA
	* __ANON_4
	* SLASH
	* RSHIFT
	* _NEWLINE
	* __ANON_0
	* CIRCUMFLEX

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_401_around_ironing_board_2074(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(mat,ironing_board_instance)
        else:
            exp(mat,ironing_board_instance)
    eff:
        unknown[mat]=False
        close[mat,ironing_board_instance]=True
        close[ironing_board_instance,mat]=True
    

#goal_representation
 
def is_iron_or_ironing_board(x:item):
    # Function to check if an item is an iron or ironing board
    return is_iron(x) or is_ironing_board(x)

behavior __goal__():
    body:
        if exists iron: item : (is_iron(iron) and visited(iron)):
            # Check if the iron has already been located based on available information
            bind iron: item where:
                is_iron(iron) and visited(iron)
            achieve close_char(char, iron) 
            # Move the character closer to the iron

        elif exists ironing_board: item : (is_ironing_board(ironing_board) and visited(ironing_board)):
            # Check if the ironing board has already been located based on available information
            bind ironing_board: item where:
                is_ironing_board(ironing_board) and visited(ironing_board)
            achieve close_char(char, ironing_board)
            # Move the character closer to the ironing board

        else:
            # If neither the iron nor the ironing board has been located, begin exploration
            foreach item: item:
                if is_iron_or_ironing_board(item) and not visited(item):
                    observe(item, "Check if it is an iron or ironing board")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EXISTS', 'exists') at line 5681, column 14.
Expected one of: 
	* __ANON_2
	* __ANON_3
	* GREATER_EQ
	* __ANON_6
	* __ANON_8
	* DOUBLE_EQUAL
	* IF
	* MORETHAN
	* LSHIFT
	* EQUAL
	* AMPERSAND
	* STAR
	* AND
	* PLUS
	* PERCENT
	* __ANON_7
	* AT
	* __ANON_5
	* FLOORDIV
	* NOT_EQ
	* OR
	* MINUS
	* LESSTHAN
	* __ANON_1
	* VBAR
	* LESS_EQ
	* SEMICOLON
	* COMMA
	* __ANON_4
	* SLASH
	* RSHIFT
	* _NEWLINE
	* __ANON_0
	* CIRCUMFLEX

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_22_around_ironing_board_2074(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(mat,ironing_board_instance)
        else:
            exp(mat,ironing_board_instance)
    eff:
        unknown[mat]=False
        close[mat,ironing_board_instance]=True
        close[ironing_board_instance,mat]=True
    

#goal_representation
 
def is_iron_or_ironing_board(x:item):
    # Function to check if an item is an iron or ironing board
    return is_iron(x) or is_ironing_board(x)

behavior __goal__():
    body:
        if exists iron: item : (is_iron(iron) and visited(iron)):
            # Check if the iron has already been located based on available information
            bind iron: item where:
                is_iron(iron) and visited(iron)
            achieve close_char(char, iron) 
            # Move the character closer to the iron

        elif exists ironing_board: item : (is_ironing_board(ironing_board) and visited(ironing_board)):
            # Check if the ironing board has already been located based on available information
            bind ironing_board: item where:
                is_ironing_board(ironing_board) and visited(ironing_board)
            achieve close_char(char, ironing_board)
            # Move the character closer to the ironing board

        else:
            # If neither the iron nor the ironing board has been located, begin exploration
            foreach item: item:
                if is_iron_or_ironing_board(item) and not visited(item):
                    observe(item, "Check if it is an iron or ironing board")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def has_iron_or_ironing_board():
    # Function to check if there is an iron or ironing board in previously visited areas
    symbol available=exists o: item : ((is_iron(o) or is_ironing_board(o)) and visited(o))
    return available

behavior __goal__():
    body:
        if has_iron_or_ironing_board():
            # If we have already found an iron or ironing board based on known information
            bind item: item where:
                (is_iron(item) or is_ironing_board(item)) and visited(item)
            # Move closer to the found iron or ironing board
            achieve close_char(char, item)

        else:
            # If no iron or ironing board is found in the visited areas, start exploring
            foreach o: item:
                if (is_iron(o) or is_ironing_board(o)) and not visited(o):
                    observe(o, "Check the location of the iron or ironing board")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_iron_or_ironing_board():
    # Function to check if there is an iron or ironing board in previously visited areas
    symbol available=exists o: item : ((is_iron(o) or is_ironing_board(o)) and visited(o))
    return available

behavior __goal__():
    body:
        if has_iron_or_ironing_board():
            # If we have already found an iron or ironing board based on known information
            bind item: item where:
                (is_iron(item) or is_ironing_board(item)) and visited(item)
            # Move closer to the found iron or ironing board
            achieve close_char(char, item)

        else:
            # If no iron or ironing board is found in the visited areas, start exploring
            foreach o: item:
                if (is_iron(o) or is_ironing_board(o)) and not visited(o):
                    observe(o, "Check the location of the iron or ironing board")

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)exp(iron_2089, ironing_board_2074)walk_executor(iron_2089)obs(iron_2089, Check the location of the iron or ironing board)walk_executor(ironing_board_2074)obs(ironing_board_2074, Check the location of the iron or ironing board)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: iron_2089, Robot is close to the ironing_board_2074. 
##############################
From agent.py
exp(iron_2089, ironing_board_2074)
Find iron_2089. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2089)obs(iron_2089, Check the location of the iron or ironing board)walk_executor(ironing_board_2074)obs(ironing_board_2074, Check the location of the iron or ironing board)
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py
obs(iron_2089, Check the location of the iron or ironing board)
Get this information:  iron_2089 is inside bathroom_1. iron_2089 is close to ironing_board_2074. iron_2089 is close to character_65. iron_2089 is on ironing_board_2074. iron_2089 is CLEAN. iron_2089 is OFF. iron_2089 is PLUGGED_OUT.
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the ironing_board_2074. 
##############################
From agent.py
obs(ironing_board_2074, Check the location of the iron or ironing board)
Get this information:  ironing_board_2074 is close to iron_2089. ironing_board_2074 is close to bathroom_1. ironing_board_2074 is close to character_65. ironing_board_2074 is inside bathroom_1. iron_2089 is on ironing_board_2074.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_washing_machine_2007(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_shirt,washing_machine_instance)
        else:
            exp(clothes_shirt,washing_machine_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,washing_machine_instance]=True
        close[washing_machine_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_ironing_setup_complete(ironing_board:item, iron:item):
    # Function to check if the iron and ironing board are set up
    symbol setup_complete = visited(ironing_board) and visited(iron)
    return setup_complete

behavior iron_shirt(shirt: item, ironing_board: item, iron: item):
    body:
        achieve_once on(shirt, ironing_board)  # Place the shirt on the ironing board for ironing
        achieve_once is_on(iron)  # Ensure the iron is turned on for ironing the shirt

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2074
        # Select the identified ironing board 2074

        bind iron: item where:
            is_iron(iron) and id[iron] == 2089
        # Select the identified iron 2089

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt that needs to be ironed

        if not is_ironing_setup_complete(ironing_board, iron):
            observe(ironing_board, "Check the location of the iron or ironing board") 
            observe(iron, "Check the location of the iron or ironing board")

        iron_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_ironing_setup_complete(ironing_board:item, iron:item):
    # Function to check if the iron and ironing board are set up
    symbol setup_complete = visited(ironing_board) and visited(iron)
    return setup_complete

behavior iron_shirt(shirt: item, ironing_board: item, iron: item):
    body:
        achieve_once on(shirt, ironing_board)  # Place the shirt on the ironing board for ironing
        achieve_once is_on(iron)  # Ensure the iron is turned on for ironing the shirt

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2074
        # Select the identified ironing board 2074

        bind iron: item where:
            is_iron(iron) and id[iron] == 2089
        # Select the identified iron 2089

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt that needs to be ironed

        if not is_ironing_setup_complete(ironing_board, iron):
            observe(ironing_board, "Check the location of the iron or ironing board") 
            observe(iron, "Check the location of the iron or ironing board")

        iron_shirt(shirt, ironing_board, iron)

##############################
From agent.py-> find a plan in act()
obs(ironing_board_2074, Check the location of the iron or ironing board)walk_executor(iron_2089)obs(iron_2089, Check the location of the iron or ironing board)walk_executor(washing_machine_2007)open_executor(washing_machine_2007)exp(clothes_shirt_2086, washing_machine_2007)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)plugin_executor(iron_2089)switchon_executor(iron_2089)
##############################
From agent.py
obs(ironing_board_2074, Check the location of the iron or ironing board)
Get this information:  ironing_board_2074 is close to iron_2089. ironing_board_2074 is close to bathroom_1. ironing_board_2074 is close to character_65. ironing_board_2074 is inside bathroom_1. iron_2089 is on ironing_board_2074.
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py
obs(iron_2089, Check the location of the iron or ironing board)
Get this information:  iron_2089 is inside bathroom_1. iron_2089 is close to ironing_board_2074. iron_2089 is close to character_65. iron_2089 is on ironing_board_2074. iron_2089 is CLEAN. iron_2089 is OFF. iron_2089 is PLUGGED_OUT.
##############################
From agent.py
walk_executor(washing_machine_2007)
Robot find: Robot is close to the washing_machine_2007. 
##############################
From agent.py
open_executor(washing_machine_2007)
Robot find: Robot is close to the washing_machine_2007. washing_machine_2007 is opened. 
##############################
From agent.py
exp(clothes_shirt_2086, washing_machine_2007)
Fail to find clothes_shirt_2086 around washing_machine_2007. 
##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)plugin_executor(iron_2089)switchon_executor(iron_2089)
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Robot find: clothes_pants_2085, clothes_shirt_2086, clothes_socks_2087, clothes_skirt_2088, towel_rack_31, towel_rack_33, towel_rack_32, towel_rack_34, mat_22, Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
exp(clothes_shirt_2086, basket_for_clothes_2006)
Find clothes_shirt_2086. 
##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)plugin_executor(iron_2089)switchon_executor(iron_2089)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_shirt_2086. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
plugin_executor(iron_2089)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. iron_2089 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2089)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. iron_2089 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to iron the shirt by using the iron that is now set up and turned on.
##############################
From agent.py
Human Instruction: You need to iron the shirt by using the iron that is now set up and turned on.

The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for iron_2089 around ironing_board_2074.
Action 3: Walk to iron_2089.
Action 4: Observe around iron_2089 with the question of Check the location of the iron or ironing board.
Action 5: Walk to ironing_board_2074.
Action 6: Observe around ironing_board_2074 with the question of Check the location of the iron or ironing board.
Action 7: Observe around ironing_board_2074 with the question of Check the location of the iron or ironing board.
Action 8: Walk to iron_2089.
Action 9: Observe around iron_2089 with the question of Check the location of the iron or ironing board.
Action 10: Walk to washing_machine_2007.
Action 11: Open washing_machine_2007.
Action 12: look for clothes_shirt_2086 around washing_machine_2007.
Action 13: Walk to basket_for_clothes_2006.
Action 14: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 15: Grab clothes_shirt_2086.
Action 16: Walk to ironing_board_2074.
Action 17: Put clothes_shirt_2086 on ironing_board_2074.
Action 18: Plug in iron_2089.
Action 19: Switch on iron_2089.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior iron_shirt(shirt: item, ironing_board: item, iron: item):
    body:
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        achieve is_on(iron)
        # Ensure the iron is on for use

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2086
        # Select shirt_2086

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2074
        # Select ironing_board_2074

        bind iron: item where:
            is_iron(iron) and id[iron] == 2089
        # Select iron_2089

        iron_shirt(clothes_shirt, ironing_board, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

 
behavior iron_the_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        achieve is_on(iron)
        # Start ironing the shirt

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and is_on(iron)
        # Select the iron that is already on

        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Select the shirt on the ironing board

        iron_the_shirt(shirt, iron, ironing_board)
        # Execute the behavior to iron the shirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(clothes_shirt: item, iron: item, ironing_board: item):
    body:
        achieve_once on(clothes_shirt, ironing_board) # Place the shirt flat on the ironing board
        achieve is_on(iron) # Ensure the iron is on

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2086
        # Select clothes_shirt_2086

        bind iron: item where:
            is_iron(iron) and id[iron] == 2089
        # Select iron_2089

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2074
        # Select ironing_board_2074

        iron_shirt(clothes_shirt, iron, ironing_board)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        achieve is_on(iron)
        # Ensure the shirt is on the ironing board and the iron is on for ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2086
        # Select the shirt with ID 2086

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2074
        # Select the ironing board with ID 2074

        bind iron: item where:
            is_iron(iron) and id[iron] == 2089
        # Select the iron with ID 2089

        iron_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2070_around_dresser_358(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(vacuum_cleaner,dresser_instance)
        else:
            exp(vacuum_cleaner,dresser_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,dresser_instance]=True
        close[dresser_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve is_on(iron) # Make sure the iron is turned on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board to iron on

        bind iron: item where:
            is_iron(iron)
        # Select the iron to use

        iron_shirt(iron, shirt, ironing_board)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt: item, ironing_board: item, iron: item):
    body:
        achieve_once on(shirt, ironing_board)
        # Make sure the shirt is on the ironing board
        achieve is_on(iron)
        # Make sure the iron remains on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        iron_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve_once is_on(iron)
        # Ensure the iron is turned on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2086
        # Select clothes_shirt_2086

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2074
        # Select ironing_board_2074

        bind iron: item where:
            is_iron(iron) and id[iron] == 2089
        # Select iron_2089

        iron_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board) # Ensure shirt is on the ironing board
        achieve is_on(iron) # Iron must be turned on to iron the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2086
        # Select clothes_shirt_2086

        bind iron: item where:
            is_iron(iron) and id[iron] == 2089
        # Select iron_2089

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2074
        # Select ironing_board_2074

        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Turn the iron on
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        # Iron the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2086
        # Select clothes_shirt_2086

        bind iron: item where:
            is_iron(iron) and id[iron] == 2089
        # Select iron_2089

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2074
        # Select ironing_board_2074

        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Iron a shirt, and put it in on the bed.
Action History:
['walk_executor(ironing_board_2074)', 'walk_executor(iron_2089)', 'walk_executor(ironing_board_2074)', 'walk_executor(iron_2089)', 'walk_executor(washing_machine_2007)', 'open_executor(washing_machine_2007)', 'walk_executor(basket_for_clothes_2006)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'plugin_executor(iron_2089)', 'switchon_executor(iron_2089)']
Time info:
Time consume: 293 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 99
goal generate times: 12
goal correct times: 0
action_num: 12

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 3 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
