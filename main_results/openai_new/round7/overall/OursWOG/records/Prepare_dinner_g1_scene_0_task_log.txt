From agent.py
Reset goals: The sub-goals are: 
['Boil some rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_fork_2080_around_table_107(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve_once inside(rice, pot)
        # Place the rice inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling rice

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the rice

        bind rice: item where:
            is_food_rice(rice)
        # Select rice to boil in the pot

        fill_pot_with_water(pot, sink)
        boil_rice(pot, stove, rice)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the sink

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve_once inside(rice, pot)
        # Place the rice inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling rice

        bind sink: item where:
            is_sink(sink)
        # Select a sink for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the rice

        bind rice: item where:
            is_food_rice(rice)
        # Select rice to boil in the pot

        fill_pot_with_water(pot, sink)
        boil_rice(pot, stove, rice)
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(cupboard_229)exp(food_rice_2036, cupboard_229)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(pot_2069, cupboard_229)
Fail to find pot_2069 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(filing_cabinet_399)open_executor(filing_cabinet_399)exp(food_rice_2036, filing_cabinet_399)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(filing_cabinet_399)open_executor(filing_cabinet_399)exp(food_rice_2036, filing_cabinet_399)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(filing_cabinet_399)
Robot find: drawing_404, drawing_402, drawing_403, Robot is close to the pot_2069. Robot is close to the filing_cabinet_399. 
##############################
From agent.py
open_executor(filing_cabinet_399)
Robot find: Robot is close to the pot_2069. Robot is close to the filing_cabinet_399. filing_cabinet_399 is opened. 
##############################
From agent.py
exp(food_rice_2036, filing_cabinet_399)
Fail to find food_rice_2036 around filing_cabinet_399. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_rice_2036, fridge_289)
Find food_rice_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2036)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_rice_2036 by left hand. 
##############################
From agent.py
putin_executor(food_rice_2036, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. pot_2069 is close food_rice_2036. food_rice_2036 is inside pot_2069. food_rice_2036 is close pot_2069. food_rice_2036 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water. Please ensure the pot has water from the sink before proceeding to boil the rice.
##############################
From agent.py
Human Instruction: You need to fill the pot with water. Please ensure the pot has water from the sink before proceeding to boil the rice.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to stove_2065.
Action 5: Open stove_2065.
Action 6: look for pot_2069 around stove_2065.
Action 7: Walk to pot_2069.
Action 8: Open pot_2069.
Action 9: Grab pot_2069.
Action 10: Walk to faucet_43.
Action 11: Switch on faucet_43.
Action 12: Switch off faucet_43.
Action 13: Walk to filing_cabinet_399.
Action 14: Open filing_cabinet_399.
Action 15: look for food_rice_2036 around filing_cabinet_399.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for food_rice_2036 around fridge_289.
Action 20: Grab food_rice_2036.
Action 21: Put food_rice_2036 into pot_2069.
Action 22: Walk to stove_2065.
Action 23: Put pot_2069 on stove_2065.
Action 24: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior add_rice_to_pot(rice: item, pot: item):
    body:
        achieve_once inside(rice, pot)
        # Add rice to the pot

behavior boil_rice(pot: item, stove: item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet_43 to fill the pot with water

        bind rice: item where:
            is_food_rice(rice) and id[rice]==2036
        # Select food_rice_2036 to add to the pot

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select stove_2065 to boil the rice
        
        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(rice, pot)
        boil_rice(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot) 
        # Fill the pot with water from the faucet

behavior boil_rice_in_pot(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior remove_rice_from_fridge(food_rice: item, fridge: item):
    body:
        achieve_once inhand(food_rice)
        # Remove the rice from the fridge

behavior add_rice_to_pot(food_rice: item, pot: item):
    body:
        achieve_once inside(food_rice, pot)
        # Add the rice to the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select pot_2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet_43

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select stove_2065

        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        # Select fridge_289

        bind food_rice: item where:
            is_food_rice(food_rice) and id[food_rice]==2036
        # Select food_rice_2036

        fill_pot_with_water(pot, faucet)
        remove_rice_from_fridge(food_rice, fridge)
        add_rice_to_pot(food_rice, pot)
        boil_rice_in_pot(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot) 
        # Fill the pot with water from the faucet

behavior boil_rice_in_pot(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior remove_rice_from_fridge(food_rice: item, fridge: item):
    body:
        achieve_once inhand(food_rice)
        # Remove the rice from the fridge

behavior add_rice_to_pot(food_rice: item, pot: item):
    body:
        achieve_once inside(food_rice, pot)
        # Add the rice to the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select pot_2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet_43

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select stove_2065

        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        # Select fridge_289

        bind food_rice: item where:
            is_food_rice(food_rice) and id[food_rice]==2036
        # Select food_rice_2036

        fill_pot_with_water(pot, faucet)
        remove_rice_from_fridge(food_rice, fridge)
        add_rice_to_pot(food_rice, pot)
        boil_rice_in_pot(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2036)grab_executor(food_rice_2036)putin_executor(food_rice_2036, pot_2069)
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the pot_2069. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the pot_2069. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
putin_executor(food_rice_2036, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_rice_2036. pot_2069 is close food_rice_2036. food_rice_2036 is inside pot_2069. food_rice_2036 is close pot_2069. food_rice_2036 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water from the faucet before proceeding with boiling the rice. The actions provided do not indicate that the pot was filled with water.
##############################
From agent.py
Human Instruction: You need to fill the pot with water from the faucet before proceeding with boiling the rice. The actions provided do not indicate that the pot was filled with water.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to stove_2065.
Action 5: Open stove_2065.
Action 6: look for pot_2069 around stove_2065.
Action 7: Walk to pot_2069.
Action 8: Open pot_2069.
Action 9: Grab pot_2069.
Action 10: Walk to faucet_43.
Action 11: Switch on faucet_43.
Action 12: Switch off faucet_43.
Action 13: Walk to filing_cabinet_399.
Action 14: Open filing_cabinet_399.
Action 15: look for food_rice_2036 around filing_cabinet_399.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for food_rice_2036 around fridge_289.
Action 20: Grab food_rice_2036.
Action 21: Put food_rice_2036 into pot_2069.
Action 22: Walk to stove_2065.
Action 23: Put pot_2069 on stove_2065.
Action 24: Switch on stove_2065.
Action 25: Walk to food_rice_2036.
Action 26: Grab food_rice_2036.
Action 27: Put food_rice_2036 into pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_rice_in_pot(pot: item, stove: item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot_2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet_43 for filling the pot with water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove_2065 to boil the rice

        fill_pot_with_water(pot, faucet)
        boil_rice_in_pot(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_rice_in_pot(pot: item, stove: item, rice: item):
    body:
        achieve_once inside(rice, pot)
        achieve is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove with ID 2065

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select rice with ID 2036

        fill_pot_with_water(pot, faucet)
        boil_rice_in_pot(pot, stove, rice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_rice(pot: item, stove: item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet with ID 43 for filling pot with water

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select stove with ID 2065 for boiling

        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_rice(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has been filled with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_rice(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_rice_in_pot(rice:item, pot:item, stove:item):
    body:
        achieve_inside(rice, pot)
        # Ensure the rice is inside the pot
        achieve is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot with rice on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking the rice

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to boil

        fill_pot_with_water(pot, faucet)
        boil_rice_in_pot(rice, pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_inside not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#goal_representation

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_rice_in_pot(rice:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot)
        # Ensure the rice is inside the pot
        achieve is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot with rice on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking the rice

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to boil

        fill_pot_with_water(pot, faucet)
        boil_rice_in_pot(rice, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_rice_in_pot(rice: item, pot: item, stove: item):
    body:
        achieve on(rice, pot)
        # Place the rice in the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        fill_pot_with_water(pot, faucet)
        boil_rice_in_pot(rice, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_rice_in_pot(rice: item, pot: item, stove: item):
    body:
        achieve on(rice, pot)
        # Place the rice in the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        fill_pot_with_water(pot, faucet)
        boil_rice_in_pot(rice, pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2036)put_executor(food_rice_2036, pot_2069)
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the pot_2069. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
put_executor(food_rice_2036, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the food_rice_2036. food_rice_2036 is close pot_2069. food_rice_2036 is on pot_2069. food_rice_2036 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water from the faucet before boiling the rice. Ensure the pot has water before placing the pot on the stove and turning on the stove.
##############################
From agent.py
Human Instruction: You need to fill the pot with water from the faucet before boiling the rice. Ensure the pot has water before placing the pot on the stove and turning on the stove.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to stove_2065.
Action 5: Open stove_2065.
Action 6: look for pot_2069 around stove_2065.
Action 7: Walk to pot_2069.
Action 8: Open pot_2069.
Action 9: Grab pot_2069.
Action 10: Walk to faucet_43.
Action 11: Switch on faucet_43.
Action 12: Switch off faucet_43.
Action 13: Walk to filing_cabinet_399.
Action 14: Open filing_cabinet_399.
Action 15: look for food_rice_2036 around filing_cabinet_399.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for food_rice_2036 around fridge_289.
Action 20: Grab food_rice_2036.
Action 21: Put food_rice_2036 into pot_2069.
Action 22: Walk to stove_2065.
Action 23: Put pot_2069 on stove_2065.
Action 24: Switch on stove_2065.
Action 25: Walk to food_rice_2036.
Action 26: Grab food_rice_2036.
Action 27: Put food_rice_2036 into pot_2069.
Action 28: Grab food_rice_2036.
Action 29: Put food_rice_2036 on pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_rice(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water in it

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the rice

        boil_rice(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_drawing_176_around_television_410(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==410
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(drawing,television_instance)
        else:
            exp(drawing,television_instance)
    eff:
        unknown[drawing]=False
        close[drawing,television_instance]=True
        close[television_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_rice(pot:item, stove:item):
    body:
        achieve is_on(stove) # Ensure the stove is on for boiling
        achieve on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to be filled and used

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the pot

        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot is filled with water

behavior place_pot_on_stove_and_boil(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve_once is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select pot_2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet_43

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select stove_2065

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove_and_boil(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_rice(pot: item, stove: item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select stove with ID 2065
        
        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_drawing_400_around_drawing_241(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==241
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

#exp_behavior_end

#goal_representation

def has_water_in_pot(pot:item):
    # Function to check if the pot has water in it
    symbol has_water=exists o: item : (is_pot(o) and has_water(o))
    return has_water

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water_in_pot(pot):
            achieve_once has_water(pot)
        # Fill the pot with water from the faucet if not already filled

behavior boil_rice(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove
        achieve on(pot, stove)
        # Place the pot on the stove for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the rice
        
        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_rice(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)
        # Place the pot on the stove and turn it on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to place pot on

        boil_rice(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Boil some rice by pot.
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(filing_cabinet_399)', 'open_executor(filing_cabinet_399)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_rice_2036)', 'putin_executor(food_rice_2036, pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'putin_executor(food_rice_2036, pot_2069)', 'grab_executor(food_rice_2036)', 'put_executor(food_rice_2036, pot_2069)']
Time info:
Time consume: 289 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 20
goal generate times: 15
goal correct times: 0
action_num: 25

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
