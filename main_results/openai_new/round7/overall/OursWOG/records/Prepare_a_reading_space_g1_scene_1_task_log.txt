From agent.py
Reset goals: The sub-goals are: 
['1. Locate the book within the environment.', '2. Place the book on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
def has_book_inside_house():
    # Function to check if there is a book inside the house
    symbol has_book=exists o: item : (is_book(o) and inside_char(char, o))
    return has_book

behavior __goal__():
    body:
        if exists book: item : (is_book(book) and has_book_inside_house()):
            # If we have already found the book inside the house based on known information
            bind book: item where:
                is_book(book) and has_book_inside_house()
            # Move closer to the book if found
            achieve close_char(char, book)

        else:
            # If no book is found inside the house from known information, start exploring
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Check the location of the book inside the house")
#goal_representation_end

##############################
From agent.py->reset_goal
def has_book_inside_house():
    # Function to check if there is a book inside the house
    symbol has_book=exists o: item : (is_book(o) and inside_char(char, o))
    return has_book

behavior __goal__():
    body:
        if exists book: item : (is_book(book) and has_book_inside_house()):
            # If we have already found the book inside the house based on known information
            bind book: item where:
                is_book(book) and has_book_inside_house()
            # Move closer to the book if found
            achieve close_char(char, book)

        else:
            # If no book is found inside the house from known information, start exploring
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Check the location of the book inside the house")
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)exp(book_2136, bookshelf_124)walk_executor(book_2136)open_executor(book_2136)obs(book_2136, Check the location of the book inside the house)walk_executor(bookshelf_124)exp(book_2137, bookshelf_124)walk_executor(book_2137)open_executor(book_2137)obs(book_2137, Check the location of the book inside the house)
##############################
From agent.py
walk_executor(bookshelf_124)
Robot find: book_2136, envelope_2055, book_2137, drawing_110, drawing_111, Robot is close to the bookshelf_124. 
##############################
From agent.py
open_executor(bookshelf_124)
Robot find: Robot is close to the bookshelf_124. bookshelf_124 is opened. 
##############################
From agent.py
exp(book_2136, bookshelf_124)
Find book_2136. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)open_executor(book_2136)obs(book_2136, Check the location of the book inside the house)walk_executor(book_2137)open_executor(book_2137)obs(book_2137, Check the location of the book inside the house)
##############################
From agent.py
walk_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. 
##############################
From agent.py
open_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. book_2136 is opened. 
##############################
From agent.py
obs(book_2136, Check the location of the book inside the house)
Get this information:  book_2136 is on bookshelf_124. book_2136 is inside dining_room_41. book_2136 is close to bookshelf_124. book_2136 is close to character_240. book_2136 is OPEN.
##############################
From agent.py
walk_executor(book_2137)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2137. 
##############################
From agent.py
open_executor(book_2137)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2137. book_2137 is opened. 
##############################
From agent.py
obs(book_2137, Check the location of the book inside the house)
Get this information:  book_2137 is inside dining_room_41. book_2137 is close to bookshelf_124. book_2137 is close to character_240. book_2137 is on bookshelf_124. book_2137 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_table_cloth_2005_around_table_270(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

behavior find_chair_271_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation

behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book to place

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book to place

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        place_book_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
grab_executor(book_2137)walk_executor(table_270)put_executor(book_2137, table_270)
##############################
From agent.py
grab_executor(book_2137)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2137. Grabbing book_2137 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the book_2137. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(book_2137, table_270)
Robot find: Robot is close to the book_2137. Robot is close to the couch_269. Robot is close to the table_270. book_2137 is close table_270. book_2137 is on table_270. table_270 is close book_2137. book_2137 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the book on the coffee table in the home office. Currently, you have placed book_2137 on table_270, but it is not confirmed if table_270 is the coffee table in the home office. Verify the location of the coffee table and ensure the book is placed there.
##############################
From agent.py
Human Instruction: You need to place the book on the coffee table in the home office. Currently, you have placed book_2137 on table_270, but it is not confirmed if table_270 is the coffee table in the home office. Verify the location of the coffee table and ensure the book is placed there.

The actions you have taken:
Action 1: Walk to bookshelf_124.
Action 2: Open bookshelf_124.
Action 3: look for book_2136 around bookshelf_124.
Action 4: Walk to book_2136.
Action 5: Open book_2136.
Action 6: Observe around book_2136 with the question of Check the location of the book inside the house.
Action 7: Walk to book_2137.
Action 8: Open book_2137.
Action 9: Observe around book_2137 with the question of Check the location of the book inside the house.
Action 10: Grab book_2137.
Action 11: Walk to table_270.
Action 12: Put book_2137 on table_270.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2137
        # Select book_2137 that was located in previous steps

        if is_table(table_270) and not inside(table_270, home_office):
            observe(table_270, "Check if the table is the coffee table in the home office")

        else:
            bind home_office: item where:
                is_home_office(home_office)
            # Select the home office

            bind coffee_table: item where:
                is_table(coffee_table) and inside(coffee_table, home_office)
            # Select the coffee table within the home office

            place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

behavior find_tooth_paste_2059_around_bathroom_counter_18(tooth_paste:item):
    goal: not unknown(tooth_paste)
    body:
        assert is_tooth_paste(tooth_paste)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(tooth_paste,bathroom_counter_instance)
        else:
            exp(tooth_paste,bathroom_counter_instance)
    eff:
        unknown[tooth_paste]=False
        close[tooth_paste,bathroom_counter_instance]=True
        close[bathroom_counter_instance,tooth_paste]=True
    

behavior find_chair_194_around_desk_193(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#goal_representation
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2137
        # Select book_2137 that was located in previous steps

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        place_book_on_coffee_table(book, coffee_table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoe_rack_2044_around_bench_113(shoe_rack:item):
    goal: not unknown(shoe_rack)
    body:
        assert is_shoe_rack(shoe_rack)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==113
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoe_rack,bench_instance)
        else:
            exp(shoe_rack,bench_instance)
    eff:
        unknown[shoe_rack]=False
        close[shoe_rack,bench_instance]=True
        close[bench_instance,shoe_rack]=True
    

#exp_behavior_end

#goal_representation
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2137
        # Select book_2137 that was located

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        place_book_on_coffee_table(book, coffee_table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoe_rack_2044_around_bench_113(shoe_rack:item):
    goal: not unknown(shoe_rack)
    body:
        assert is_shoe_rack(shoe_rack)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==113
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoe_rack,bench_instance)
        else:
            exp(shoe_rack,bench_instance)
    eff:
        unknown[shoe_rack]=False
        close[shoe_rack,bench_instance]=True
        close[bench_instance,shoe_rack]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2137
        # Select the book already located in the previous step with ID 2137

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2029_around_desk_272(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior verify_coffee_table(table: item, coffee_table: item):
    body:
        achieve close_char(char, table) 
        observe(table, "Check if this is the coffee table in the home office")
        bind coffee_table: item where:
            is_table(table) and inside(table, coffee_table)
        if not on(book_2137, coffee_table):
            achieve_once on(book_2137, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2137
        # Select book_2137 to place

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select table_270

        verify_coffee_table(table, home_office)
        place_book_on_coffee_table(book, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable coffee_table already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#goal_representation
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior verify_coffee_table(table: item, home_office: item):
    body:
        achieve close_char(char, table)
        observe(table, "Check if this is the coffee table in the home office")
        bind coffee_table: item where:
            is_table(table) and inside(table, home_office)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2137
        # Select book_2137 to place

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select table_270

        verify_coffee_table(table, home_office)
        place_book_on_coffee_table(book, table)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior verify_coffee_table(table: item, home_office: item):
    body:
        achieve close_char(char, table)
        observe(table, "Check if this is the coffee table in the home office")
        bind coffee_table: item where:
            is_table(table) and inside(table, home_office)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2137
        # Select book_2137 to place

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select table_270

        verify_coffee_table(table, home_office)
        place_book_on_coffee_table(book, table)
##############################
From agent.py-> find a plan in act()
obs(table_270, Check if this is the coffee table in the home office)
##############################
From agent.py
obs(table_270, Check if this is the coffee table in the home office)
Get this information:  shampoo_2019 is on table_270. pencil_2014 is on table_270. orchid_285 is on table_270. table_270 is inside home_office_241. table_270 is inside couch_269. book_2137 is on table_270. table_270 is close to shampoo_2019. table_270 is close to floor_264. table_270 is close to floor_265. table_270 is close to floor_266. table_270 is close to floor_267. table_270 is close to couch_269. table_270 is close to wall_248. table_270 is close to pillow_286. table_270 is close to orchid_285. table_270 is close to pencil_2014. table_270 is close to pillow_287. table_270 is close to character_240. table_270 is close to book_2137. table_270 is facing drawing_288. table_270 is facing television_281. table_270 is facing computer_276. table_270 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffee table in home office.
Action History:
['walk_executor(bookshelf_124)', 'open_executor(bookshelf_124)', 'walk_executor(book_2136)', 'open_executor(book_2136)', 'walk_executor(book_2137)', 'open_executor(book_2137)', 'grab_executor(book_2137)', 'walk_executor(table_270)', 'put_executor(book_2137, table_270)']
Time info:
Time consume: 166 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 156
goal generate times: 6
goal correct times: 1
action_num: 9

Task complete rate:
1
Scene_id: 1
##############################
