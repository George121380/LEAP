[
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the table in the home office.",
        "cdl": " \nbehavior place_book_on_table(book: item, table: item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        \n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n\n        place_book_on_table(book, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Turn on the light in the home office.",
        "cdl": " \nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        bind light: item where:\n            is_light(light) and inside(light, home_office)\n        turn_on_light(light)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Locate the cat within the house.",
        "cdl": "\ndef has_cat_inside_house():\n    # Function to check if there is a cat inside the house\n    symbol has_cat=exists o: item : (is_cat(o) and inside_char(char, o))\n    return has_cat\n\nbehavior __goal__():\n    body:\n        if exists cat: item : (is_cat(cat) and has_cat_inside_house()):\n            # If we have already found the cat inside the house based on known information\n            bind cat: item where:\n                is_cat(cat) and has_cat_inside_house()\n            # Move closer to the cat if found\n            achieve close_char(char, cat)\n\n        else:\n            # If no cat is found inside the house from known information, start exploring\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat,\"Check the location of the cat inside the house\")\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Touch the cat.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind couch: item where:\n            is_couch(couch) and inside(couch, home_office)\n        # Select the couch within the home office\n\n        bind cat: item where:\n            is_cat(cat) and on(cat, couch)\n        # Select the cat on the couch\n\n        achieve close_char(char, cat) \n        # Get close to the cat to touch it\n\n        touch(cat)\n        # Touch the cat\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find a book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior place_book_on_table(book: item, table: item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        \n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n\n        place_book_on_table(book, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Open the window in the home office.",
        "cdl": "\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind window: item where:\n            is_window(window) and inside(window, home_office)\n\n        open_window(window)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket with clothes that need washing.",
        "cdl": " \ndef has_clothes_in_basket(basket:item):\n    # Function to check if there are clothes in the basket\n    symbol has_clothes=exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and has_clothes_in_basket(basket)):\n            # Check if there is a basket for clothes based on available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and has_clothes_in_basket(basket)\n            # Select a basket that has clothes\n            achieve close_char(char, basket) \n            # Move the character closer to the basket with clothes\n\n        else: \n           # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket,\"Check if there are any clothes in the basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the clothes in the basket using the washing machine.",
        "cdl": " \nbehavior load_washing_machine(c:item, washing_machine:item):\n    body:\n        achieve_once inside(c, washing_machine)\n        # Place clothes inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine) # Close the washing machine door\n        achieve_once is_on(washing_machine) # Turn on the washing machine to wash the clothes\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket]==2040\n        # Select the basket of clothes that need washing, with ID 2040\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine for washing the clothes\n\n        foreach c: item:\n        # Load all clothes from the basket into the washing machine\n            if is_clothes(c) and inside(c, basket):\n                load_washing_machine(c, washing_machine)\n        start_washing_machine(washing_machine) # Start the washing machine\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Use a pot to boil some water.",
        "cdl": " \nbehavior fill_pot_with_water(pot: item, sink: item):\n    body:\n        achieve_once has_water(pot)\n        # Fill the pot with water from the sink\n\nbehavior boil_water(pot: item, stove: item):\n    body:\n        achieve_once is_on(stove)\n        # Turn on the stove\n        achieve on(pot, stove)\n        # Place the pot on the stove\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink for filling pot with water\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove for boiling the water\n        \n        fill_pot_with_water(pot, sink)\n        boil_water(pot, stove)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket with clothes.",
        "cdl": " \ndef has_clothes_in_basket(basket:item):\n    # Function to check if there are clothes in the basket\n    symbol has_clothes=exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and has_clothes_in_basket(basket)):\n            # Check if there is a basket for clothes based on available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and has_clothes_in_basket(basket)\n            # Select a basket that has clothes\n            achieve close_char(char, basket) \n            # Move the character closer to the basket with clothes\n\n        else: \n           # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket,\"Check if there are any clothes in the basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add clothes from the basket to the washing machine.",
        "cdl": " \nbehavior load_washing_machine(c:item, washing_machine:item):\n    body:\n        achieve_once inside(c, washing_machine)\n        # Place clothes inside the washing machine\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket]==2040\n        # Select the basket of clothes that need washing, with ID 2040\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine for washing the clothes\n\n        foreach c: item:\n        # Load all clothes from the basket into the washing machine\n            if is_clothes(c) and inside(c, basket):\n                load_washing_machine(c, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Add soap to the washing machine.",
        "cdl": "\nbehavior add_soap_to_washing_machine(washing_machine: item, soap: item):\n    body:\n        achieve_once inside(soap, washing_machine)\n        # Add soap inside the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine]==2041\n        # Select the washing machine with ID 2041\n\n        bind soap: item where:\n            is_soap(soap)\n        # Select a soap item\n\n        add_soap_to_washing_machine(washing_machine, soap)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "4. Run the washing machine.",
        "cdl": " \nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once is_on(washing_machine)\n        # Start the washing machine by turning it on\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2041\n        # Select the washing machine with ID 2041\n\n        start_washing_machine(washing_machine)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all the rooms in the house.",
        "cdl": " \ndef is_room(x:item):\n    # Example function to determine if an item is a room\n    # You should implement the actual logic based on known categoryrelations in the provided environment\n    return is_bedroom(x) or is_bathroom(x) or is_home_office(x) or is_dining_room(x)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_room(room) and not visited(room):\n                observe(room, \"Identify the room\")\n\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Check each room and turn on at least one light if it's not already on.",
        "cdl": " \ndef has_light_in_room(room:item):\n    # Function to check if there is any light on in the room\n    symbol has_light=exists o: item : (is_light(o) and inside(o, room) and is_on(o))\n    return has_light\n\nbehavior check_and_turn_on_light(room:item):\n    body:\n        if not has_light_in_room(room):\n            bind light: item where:\n                is_light(light) and inside(light, room)\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                # Check each identified room\n                check_and_turn_on_light(room)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Use the dishwasher to wash the bowls and plates.",
        "cdl": "\nbehavior load_dishwasher(dish:item, dishwasher:item):\n    body:\n        achieve_once inside(dish, dishwasher)\n        # Place the dish inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher) # Close the dishwasher door\n        achieve_once is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        \n        foreach dish: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(dish) or is_plate(dish) and dirty(dish):\n                load_dishwasher(dish, dishwasher)\n        start_dishwasher(dishwasher) # Start the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the forks by hand.",
        "cdl": " \nbehavior wash_forks(fork:item):\n    body:\n        wash(fork)\n        # Wash the fork by hand\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Find the dining room\n\n        bind table: item where:\n            is_table(table) and inside(table, dining_room)\n        # Find the table inside the dining room\n\n        foreach fork: item:\n            if is_fork(fork) and on(fork, table):\n                # Find forks on the table\n                wash_forks(fork)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior wash_jacket(jacket:item):\n    body:\n        wash(jacket)\n        # Hand wash the jacket\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket that needs to be hand washed\n\n        wash_jacket(jacket)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": " \nbehavior load_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve_once inside(jacket, washing_machine)\n        # Place the jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine) # Close the washing machine door\n        achieve_once is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind clothes_jacket: item where:\n            is_clothes_jacket(clothes_jacket) and id[clothes_jacket]==2047\n        # Select clothes_jacket_2047\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        load_washing_machine(clothes_jacket, washing_machine)\n        start_washing_machine(washing_machine) # Start the washing machine\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Slice a kiwi and add the slices to the cup of water.",
        "cdl": " \nbehavior slice_kiwi_and_add_to_water(kiwi:item, cup:item, knife:item, cutting_board:item):\n    body:\n        achieve_once cut(kiwi)\n        achieve_once inside(kiwi, cup)\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi) and id[kiwi]==2060\n        # Select the kiwi to slice\n\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2087\n        # Select cup_2087 that already has water\n\n        bind knife: item where:\n            is_knife(knife) and id[knife]==2036\n        # Select knife_2036 for slicing\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) and id[cutting_board]==2080\n        # Select cutting board for slicing kiwi\n\n        slice_kiwi_and_add_to_water(kiwi, cup, knife, cutting_board)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n\n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n\n        open_window(window)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": " \nbehavior slice_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board\n        achieve_once cut(chicken) # Slice the chicken\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken to be sliced\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board for slicing\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife for slicing the chicken\n\n        slice_chicken(chicken, cutting_board, knife)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Get a cup and fill it with water.",
        "cdl": " \nbehavior fill_cup_with_water(cup: item, faucet: item):\n    body:\n        achieve_once has_water(cup)\n        # Fill the cup with water from the faucet\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind kitchen_counter: item where:\n            is_kitchen_counter(kitchen_counter)\n        # Select the kitchen counter\n\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, kitchen_counter)\n        # Select the faucet close to the kitchen counter\n\n        fill_cup_with_water(cup, faucet)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Find a kiwi, slice it, and add the slices to the cup.",
        "cdl": " \nbehavior slice_kiwi_and_add_to_water(kiwi:item, cup:item, knife:item, cutting_board:item):\n    body:\n        achieve_once on(kiwi, cutting_board)\n        achieve_once cut(kiwi)\n        achieve_once inside(kiwi, cup)\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi) and id[kiwi]==2054\n        # Select the kiwi to slice\n\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2132\n        # Select the cup that already has water\n\n        bind knife: item where:\n            is_knife(knife) and id[knife]==2122\n        # Select the knife for slicing\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) and id[cutting_board]==2123\n        # Select the cutting board for slicing kiwi\n\n        slice_kiwi_and_add_to_water(kiwi, cup, knife, cutting_board)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book within the household.",
        "cdl": " \ndef has_book_inside_house():\n    # Function to check if there is a book inside the house\n    symbol has_book=exists o: item : (is_book(o) and inside_char(char, o))\n    return has_book\n\nbehavior __goal__():\n    body:\n        if exists book: item : (is_book(book) and has_book_inside_house()):\n            # If we have already found the book inside the house based on known information\n            bind book: item where:\n                is_book(book) and has_book_inside_house()\n            # Move closer to the book if found\n            achieve close_char(char, book)\n\n        else:\n            # If no book is found inside the house from known information, start exploring\n            foreach book: item:\n                if is_book(book) and not visited(book):\n                    observe(book, \"Check the location of the book inside the house\")\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": "behavior place_book_on_table(book: item, table: item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book) and id[book] == 2091\n        # Select book_2091 that was located in previous step\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table within the home office\n\n        place_book_on_table(book, table)"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": "behavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n\n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n\n        open_window(window)"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Find the pizza and hamburger.  ",
        "cdl": " \ndef has_hamburger_or_pizza():\n    # Function to check if there is a hamburger or pizza in previously visited areas\n    symbol available=exists o: item : ((is_food_hamburger(o) or is_food_pizza(o)) and visited(o))\n    return available\n\nbehavior __goal__():\n    body:\n        if has_hamburger_or_pizza():\n            # If we have already found a hamburger or pizza based on known information\n            bind food_item: item where:\n                (is_food_hamburger(food_item) or is_food_pizza(food_item)) and visited(food_item)\n            # Move closer to the found food item\n            achieve close_char(char, food_item)\n\n        else:\n            # If no hamburger or pizza is found in the visited areas, start exploring\n            foreach o: item:\n                if (is_food_hamburger(o) or is_food_pizza(o)) and not visited(o):\n                    observe(o, \"Check the location of the hamburger or pizza\")\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Put the pizza and hamburger on a plate.  ",
        "cdl": "\nbehavior place_on_plate(item1: item, item2: item, plate: item):\n    body:\n        achieve_once on(item1, plate)\n        achieve_once on(item2, plate)\n\nbehavior __goal__():\n    body:\n        bind pizza: item where:\n            is_food_pizza(pizza)\n        # Select the pizza found earlier\n\n        bind hamburger: item where:\n            is_food_hamburger(hamburger)\n        # Select the hamburger found earlier\n\n        bind plate: item where:\n            is_plate(plate)\n        # Select a plate to place the pizza and hamburger on\n\n        place_on_plate(pizza, hamburger, plate)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "3. Heat the plate in the microwave.  ",
        "cdl": " \ndef has_plate_in_microwave(microwave:item):\n    # Function to check if there is a plate in the microwave\n    symbol has_plate=exists o: item : (is_plate(o) and inside(o, microwave))\n    return has_plate\n\nbehavior close_the_microwave_door(microwave:item):\n    body:\n        achieve_once closed(microwave)\n        # Close the microwave door\n\nbehavior start_microwave(microwave:item):\n    body:\n        achieve_once is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        bind plate: item where:\n            is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)\n        # Select a plate with both food_pizza_2034 and food_hamburger_2024 on it\n\n        if not has_plate_in_microwave(microwave):\n            achieve_once inside(plate, microwave)\n            # Place the plate with food inside the microwave\n\n        close_the_microwave_door(microwave)\n        start_microwave(microwave)\n "
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "4. Put the plate on a table in the dining room.",
        "cdl": " \nbehavior place_plate_on_table(plate: item, table: item):\n    body:\n        achieve_once on(plate, table)\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n\n        bind table: item where:\n            is_table(table) and inside(table, dining_room)\n\n        bind plate: item where:\n            is_plate(plate) and id[plate] == 1000\n\n        place_plate_on_table(plate, table)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Check each room to see if any lights are off.",
        "cdl": "\ndef has_light_off_in_room(room:item):\n    # Function to check if there is any light off in the room\n    symbol has_light_off=exists o: item : (is_light(o) and is_off(o) and inside(o, room))\n    return has_light_off\n\nbehavior check_light_in_room(room:item):\n    body:\n        if has_light_off_in_room(room):\n            bind light: item where:\n                is_light(light) and is_off(light) and inside(light, room)\n            observe(light, \"Check if the light can be turned on\")\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                # Check each identified room\n                check_light_in_room(room)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Turn on a light in each room where the lights are currently off.",
        "cdl": " \ndef can_turn_on_light(light:item):\n    # Function to check if a light can be turned on\n    symbol has_switch=has_switch(light)\n    symbol is_unplugged=unplugged(light)\n    return has_switch and not is_unplugged\n\nbehavior turn_on_light(light:item):\n    body:\n        if can_turn_on_light(light):\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        foreach light: item:\n            if is_light(light) and is_off(light):\n                turn_on_light(light)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Identify and gather all the bowls and plates that need washing.",
        "cdl": " \ndef has_bowls_or_plates_in_location():\n    # Function to check if there are any bowls or plates in previously visited locations\n    symbol available=exists o: item : ((is_bowl(o) or is_plate(o)) and visited(o))\n    return available\n\nbehavior __goal__():\n    body:\n        if has_bowls_or_plates_in_location():\n            # If we have already found bowls or plates based on known information\n            bind item: item where:\n                (is_bowl(item) or is_plate(item)) and visited(item)\n            # Move closer to the found item\n            achieve close_char(char, item)\n\n        else:\n            # If no bowls or plates are found in visited areas, start exploring\n            foreach o: item:\n                if (is_bowl(o) or is_plate(o)) and not visited(o):\n                    observe(o, \"Check the location of the bowls and plates\")\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Load the bowls and plates into the dishwasher and start it.",
        "cdl": " \nbehavior load_dishwasher(item: item, dishwasher: item):\n    body:\n        achieve_once inside(item, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher: item):\n    body:\n        achieve_once closed(dishwasher)\n        # Close the dishwasher door\n        achieve_once is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        foreach item: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(item) or is_plate(item):\n                load_dishwasher(item, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find a table in the dining room and put the milk and egg on it.",
        "cdl": " \ndef in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_milk_and_egg_on_table(milk: item, egg: item, table: item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(egg, table)\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        bind table: item where:\n            is_table(table) and in_dining_room(table)\n        # Select a table in the dining room\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        place_milk_and_egg_on_table(milk, egg, table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": "\nbehavior throw_items_in_trashcan(o: item, trashcan: item):\n    body:\n        achieve_once inside(o, trashcan)\n        # Place the item from the fridge into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 289\n        # Select fridge_289\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select a trashcan\n\n        foreach o: item:\n        # Throw all items inside the fridge into the trashcan\n            if inside(o, fridge):\n                throw_items_in_trashcan(o, trashcan)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and egg back in the fridge.",
        "cdl": " \nbehavior put_in_fridge(item: item, fridge: item):\n    body:\n        achieve_once inside(item, fridge)\n\nbehavior close_fridge(fridge: item):\n    body:\n        achieve_once closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk that needs to go back in the fridge\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg that needs to go back in the fridge\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        put_in_fridge(milk, fridge)\n        # Put the milk back in the fridge\n\n        put_in_fridge(egg, fridge)\n        # Put the egg back in the fridge\n\n        close_fridge(fridge)\n        # Close the fridge door\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup of water.",
        "cdl": " \nbehavior fill_cup_with_water(cup: item, faucet: item):\n    body:\n        achieve_once has_water(cup)\n        # Fill the cup with water from the faucet\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet\n\n        fill_cup_with_water(cup, faucet)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup of water and freeze it.",
        "cdl": "behavior fill_cup_with_water(cup: item, faucet: item):\n    body:\n        achieve_once has_water(cup)\n        # Fill the cup with water from the faucet\n\nbehavior freeze_cup_of_water(cup: item, freezer: item):\n    body:\n        achieve_once inside(cup, freezer)\n        # Place the cup of water inside the freezer\n\nbehavior close_the_freezer_door(freezer:item):\n    body:\n        achieve_once closed(freezer)\n        # Close the freezer door\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet\n\n        fill_cup_with_water(cup, faucet)\n\n        bind freezer: item where:\n            is_fridge(freezer)\n        # Select a fridge to use the freezer area\n\n        freeze_cup_of_water(cup, freezer)\n        close_the_freezer_door(freezer)"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": "behavior turn_on_dvd_player(dvd_player:item):\n    body:\n        achieve is_on(dvd_player)\n\nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        turn_on_dvd_player(dvd_player)"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": " \nbehavior slice_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board) # Place the chicken on the cutting board\n        achieve_once cut(chicken) # Slice the chicken\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken to be sliced\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board for slicing\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife for slicing the chicken\n\n        slice_chicken(chicken, cutting_board, knife)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find a table in the dining room.",
        "cdl": " \ndef in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior find_table(table:item):\n    body:\n        achieve close_char(char, table)\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and in_dining_room(table)\n        # Select a table in the dining room\n\n        find_table(table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the milk, turkey, egg, fish, and chicken on the table.",
        "cdl": " \nbehavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(turkey, table)\n        achieve_once on(egg, table)\n        achieve_once on(fish, table)\n        achieve_once on(chicken, table)\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and id[table] == 226\n        # Select table with ID 226\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        place_items_on_table(milk, turkey, egg, fish, chicken, table)\n\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Find the remote control and turn on the TV.",
        "cdl": " \ndef has_remote_control_nearby(tvstand:item):\n    # Function to check if the remote control is near the TV stand\n    symbol has_remote_control=exists o: item : (is_remote_control(o) and close(o, tvstand))\n    return has_remote_control\n\nbehavior use_remote_control_to_turn_on_tv(remote_control:item, television:item):\n    body:\n        achieve close_char(char, remote_control)\n        # Move the character closer to the remote control\n        touch(remote_control)\n        # The robot touches the remote control to turn on the TV\n\nbehavior __goal__():\n    body:\n        bind television: item where:\n            is_television(television)\n        # Select a television\n\n        if exists tvstand: item : (is_tvstand(tvstand) and has_remote_control_nearby(tvstand)):\n            # Check if there is a TV stand with a remote control nearby based on available information\n            bind tvstand: item where:\n                is_tvstand(tvstand) and has_remote_control_nearby(tvstand)\n            # Select a TV stand with a remote control nearby\n            \n            bind remote_control: item where:\n                is_remote_control(remote_control) and close(remote_control, tvstand)\n            # Select the remote control close to the TV stand\n            \n            use_remote_control_to_turn_on_tv(remote_control, television)\n            # Use the remote control to turn on the TV\n        \n        else: \n           # If no remote control is found near any TV stand, initiate exploration to locate one\n            foreach remote_control: item:\n                if is_remote_control(remote_control) and not visited(remote_control):\n                    observe(remote_control, \"Check the location of the remote control\")\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup.",
        "cdl": " \ndef can_find_a_cup():\n    # Function to check if a cup can be found in previously visited areas\n    symbol available=exists o: item : (is_cup(o) and visited(o))\n    return available\n\nbehavior __goal__():\n    body:\n        if can_find_a_cup():\n            # If we have already found a cup based on known information\n            bind cup: item where:\n                is_cup(cup) and visited(cup)\n            # Move closer to the found cup\n            achieve close_char(char, cup)\n\n        else:\n            # If no cup is found in the visited areas, start exploring\n            foreach o: item:\n                if is_cup(o) and not visited(o):\n                    observe(o, \"Check the location of the cup\")\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Pour milk into the cup.",
        "cdl": " \nbehavior pour_milk_into_cup(milk:item, cup:item):\n    body:\n        achieve_once inside(milk, cup)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2087\n        # Select the identified cup_2087\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select an item identified as milk\n\n        pour_milk_into_cup(milk, cup)\n        # Pour milk into the cup\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "3. Heat the cup of milk in the microwave.",
        "cdl": " \ndef has_milk_in_cup(cup:item):\n    # Function to check if there is milk in the cup\n    symbol has_milk=exists o: item : (is_milk(o) and inside(o, cup))\n    return has_milk\n\nbehavior close_the_microwave_door(microwave:item):\n    body:\n        achieve_once closed(microwave)\n        # Close the microwave door\n\nbehavior start_microwave(microwave:item):\n    body:\n        achieve_once is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2087\n        # Select cup_2087\n\n        bind milk: item where:\n            is_milk(milk) and id[milk] == 2074\n        # Select milk_2074\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave\n\n        if not has_milk_in_cup(cup):\n            # If milk is not already in the cup, ensure it is placed inside\n            achieve_once inside(milk, cup)\n\n        achieve_once inside(cup, microwave)\n        # Place the cup with milk inside the microwave\n\n        close_the_microwave_door(microwave)\n        start_microwave(microwave)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all rooms in the household.",
        "cdl": " \ndef is_room(x:item):\n    # Example function to determine if an item is a room\n    return is_bedroom(x) or is_bathroom(x) or is_home_office(x) or is_dining_room(x)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_room(room) and not visited(room):\n                observe(room, \"Identify the room\")\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Ensure there is at least one light on in each room.",
        "cdl": " \ndef has_light_on_in_room(room:item):\n    # Function to check if there is any light on in the room\n    symbol has_light_on=exists o: item : (is_light(o) and is_on(o) and inside(o, room))\n    return has_light_on\n\nbehavior check_and_turn_on_light(room:item):\n    body:\n        if not has_light_on_in_room(room):\n            bind light: item where:\n                is_light(light) and inside(light, room)\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                # Check each identified room\n                check_and_turn_on_light(room)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put them back in the fridge.",
        "cdl": "behavior cut_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board)\n        # Place the chicken on the cutting board\n        achieve_once cut(chicken)\n        # Cut the chicken into pieces\n\nbehavior store_in_fridge(chicken:item, fridge:item):\n    body:\n        achieve_once inside(chicken, fridge)\n        # Store the chicken in the fridge\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge)\n        # Close the fridge\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken to be cut and stored\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board for cutting the chicken\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife for cutting the chicken\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select a fridge for storing the chicken\n\n        cut_chicken(chicken, cutting_board, knife)\n        # Cut the chicken into pieces\n        store_in_fridge(chicken, fridge)\n        # Store the chicken in the fridge\n        close_fridge(fridge)\n        # Close the fridge door after storing the chicken"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket that contains clothes.",
        "cdl": " \ndef has_clothes_in_basket(basket:item):\n    # Function to check if there are clothes in the basket\n    symbol has_clothes=exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and has_clothes_in_basket(basket)):\n            # Check if there is a basket for clothes based on available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and has_clothes_in_basket(basket)\n            # Select a basket that has clothes\n            achieve close_char(char, basket) \n            # Move the character closer to the basket with clothes\n\n        else: \n           # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket,\"Check if there are any clothes in the basket\")\n "
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add the clothes and soap to the washing machine.",
        "cdl": "behavior load_clothes_into_washing_machine(clothes: item, washing_machine: item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n        # Add clothes to the washing machine\n\nbehavior add_soap_to_washing_machine(soap: item, washing_machine: item):\n    body:\n        achieve_once inside(soap, washing_machine)\n        # Add soap inside the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2007\n        # Select the washing machine with ID 2007\n\n        foreach clothes: item:\n            if is_clothes(clothes) and (id[clothes] == 2085 or id[clothes] == 2086 or id[clothes] == 2087 or id[clothes] == 2088):\n                load_clothes_into_washing_machine(clothes, washing_machine)\n        \n        bind soap: item where:\n            is_soap(soap) and id[soap] == 2053\n        # Select the soap with ID 2053\n\n        add_soap_to_washing_machine(soap, washing_machine)"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Run the washing machine.",
        "cdl": " \nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once is_on(washing_machine)\n        # Start the washing machine by turning it on\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2007\n        # Select the washing machine with ID 2007\n\n        start_washing_machine(washing_machine)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the dining room.",
        "cdl": " \ndef is_dining_room_found(dining_room:item):\n    # Function to check if the dining room has been found\n    symbol found=visited(dining_room)\n    return found\n\nbehavior __goal__():\n    body:\n        if exists dining_room: item : (is_dining_room(dining_room) and is_dining_room_found(dining_room)):\n            # Check if the dining room has already been located based on known information\n            bind dining_room: item where:\n                is_dining_room(dining_room) and is_dining_room_found(dining_room)\n            # Move the character closer to the dining room\n\n        else:\n            # If the dining room has not been located, begin exploration\n            foreach dining_room: item:\n                if is_dining_room(dining_room) and not visited(dining_room):\n                    observe(dining_room, \"Find the dining room\")\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the milk, turkey, egg, fish, and chicken on one of the tables in the dining room.",
        "cdl": " \nbehavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(turkey, table)\n        achieve_once on(egg, table)\n        achieve_once on(fish, table)\n        achieve_once on(chicken, table)\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table)\n        # Select a table in the dining room\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        place_items_on_table(milk, turkey, egg, fish, chicken, table)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom. Then turn on the lights in the bathroom.",
        "cdl": " \nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n        bind light_bedroom: item where:\n            is_light(light_bedroom) and inside(light_bedroom, bedroom)\n        turn_on_light(light_bedroom)\n\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        bind light_bathroom: item where:\n            is_light(light_bathroom) and inside(light_bathroom, bathroom)\n        turn_on_light(light_bathroom)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Wipe the toilet with toilet paper and then throw it into the toilet.",
        "cdl": " \nbehavior wipe_toilet_with_toilet_paper(toilet: item, toilet_paper: item):\n    body:\n        achieve_once inhand(toilet_paper)\n        wipe(toilet)\n\nbehavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):\n    body:\n        achieve_once inside(toilet_paper, toilet)\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet) and id[toilet] == 15\n        # Select toilet with ID 15\n\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076\n        # Select toilet paper with ID 2076\n\n        wipe_toilet_with_toilet_paper(toilet, toilet_paper)\n        discard_toilet_paper_into_toilet(toilet, toilet_paper)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": "behavior wash_jacket(jacket:item):\n    body:\n        wash(jacket)\n        # Hand wash the jacket\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket that needs to be hand washed\n\n        wash_jacket(jacket)"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": " \nbehavior load_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve_once inside(jacket, washing_machine)\n        # Place the jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine) # Close the washing machine door\n        achieve_once is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind clothes_jacket: item where:\n            is_clothes_jacket(clothes_jacket) and id[clothes_jacket]==2119\n        # Select clothes_jacket_2119\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        load_washing_machine(clothes_jacket, washing_machine)\n        start_washing_machine(washing_machine) # Start the washing machine\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "1. Find the CD and the CD player.",
        "cdl": " \ndef has_cd_or_cd_player_identified():\n    # Function to check if there is a CD or CD player already identified in previously visited areas\n    symbol available=exists o: item : ((is_cd(o) or is_cd_player(o)) and visited(o))\n    return available\n\nbehavior __goal__():\n    body:\n        if has_cd_or_cd_player_identified():\n            # If we have already found a CD or CD player based on known information\n            bind item: item where:\n                (is_cd(item) or is_cd_player(item)) and visited(item)\n            achieve close_char(char, item)\n\n        else:\n            # If no CD or CD player is found in the visited areas, start exploring\n            foreach o: item:\n                if (is_cd(o) or is_cd_player(o)) and not visited(o):\n                    observe(o, \"Check the location of the CD or CD player\")\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "2. Insert the CD into the CD player.",
        "cdl": " \nbehavior insert_cd_into_cd_player(cd: item, cd_player: item):\n    body:\n        achieve_once inside(cd, cd_player)\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        # Bind the cd instance\n\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        # Bind the cd_player instance\n\n        insert_cd_into_cd_player(cd, cd_player)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "3. Play music using the CD player.",
        "cdl": " \ndef is_cd_player_ready(cd_player:item):\n    # Function to check if the CD is in the CD player and the player is ready to play music\n    symbol cd_ready=exists o: item : (is_cd(o) and inside(o, cd_player))\n    return cd_ready\n\nbehavior play_music(cd_player:item):\n    body:\n        achieve is_on(cd_player)\n        # Turn on the CD player to play music\n\nbehavior __goal__():\n    body:\n        bind cd_player: item where:\n            is_cd_player(cd_player) and id[cd_player] == 2084\n        # Select the CD player with ID 2084\n\n        if not is_cd_player_ready(cd_player):\n            # Ensure the CD is inside the CD player\n            bind cd: item where:\n                is_cd(cd) and id[cd] == 2100\n            achieve_once inside(cd, cd_player)\n\n        play_music(cd_player)\n\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom, then turn on the lights in the bathroom.",
        "cdl": "behavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n        bind light_bedroom: item where:\n            is_light(light_bedroom) and inside(light_bedroom, bedroom)\n        turn_on_light(light_bedroom)\n\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        bind light_bathroom: item where:\n            is_light(light_bathroom) and inside(light_bathroom, bathroom)\n        turn_on_light(light_bathroom)"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the table in the dining room and put the milk and eggs on it.",
        "cdl": " \ndef in_dining_room(table:item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))\n    return in_dining_room\n\nbehavior place_milk_and_egg_on_table(milk: item, egg: item, table: item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(egg, table)\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        bind table: item where:\n            is_table(table) and in_dining_room(table)\n        # Select a table in the dining room\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        place_milk_and_egg_on_table(milk, egg, table)\n "
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": " \nbehavior throw_items_in_trashcan(o: item, trashcan: item):\n    body:\n        achieve_once inside(o, trashcan)\n        # Place the item from the fridge into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 140\n        # Select fridge_140\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select a trashcan\n\n        foreach o: item:\n        # Throw all items inside the fridge into the trashcan\n            if inside(o, fridge):\n                throw_items_in_trashcan(o, trashcan)\n "
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and eggs back in the fridge.",
        "cdl": " \nbehavior put_in_fridge(item: item, fridge: item):\n    body:\n        achieve_once inside(item, fridge)\n\nbehavior close_fridge(fridge: item):\n    body:\n        achieve_once closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk that needs to go back in the fridge\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg that needs to go back in the fridge\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        put_in_fridge(milk, fridge)\n        # Put the milk back in the fridge\n\n        put_in_fridge(egg, fridge)\n        # Put the egg back in the fridge\n\n        close_fridge(fridge)\n        # Close the fridge door\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": "behavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        bind light_bathroom: item where:\n            is_light(light_bathroom) and inside(light_bathroom, bathroom)\n        turn_on_light(light_bathroom)"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify the basket containing clothes.",
        "cdl": " \nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket)):\n            # Check if we have already identified the basket for clothes\n            bind basket: item where:\n                is_basket_for_clothes(basket)\n            # Select the basket that is for clothes\n            achieve close_char(char, basket)\n            # Approach the clothes basket\n\n        else:\n            # If no basket has been identified, explore to find one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Identify the basket for clothes\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Load the clothes from the basket into the washing machine.",
        "cdl": " \nbehavior load_clothes_into_washing_machine(clothes: item, washing_machine: item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n        # Load clothes into the washing machine\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket] == 2006\n        # Select the basket for clothes with ID 2006\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        foreach clothes: item:\n        # Load all clothes from the basket into the washing machine\n            if is_clothes(clothes) and inside(clothes, basket):\n                load_clothes_into_washing_machine(clothes, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Start the washing machine to wash the clothes.",
        "cdl": " \nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2007\n        # Select the washing machine with ID 2007\n\n        start_washing_machine(washing_machine)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and then toast it.",
        "cdl": " \nbehavior slice_bread(bread: item, cutting_board: item, knife: item):\n    body:\n        achieve_once on(bread, cutting_board)\n        # Place the bread on the cutting board\n        achieve_once cut(bread)\n        # Slice the bread\n\nbehavior toast_bread(bread: item, toaster: item):\n    body:\n        achieve_once inside(bread, toaster)\n        # Place the sliced bread into the toaster\n        achieve_once is_on(toaster)\n        # Turn on the toaster to toast the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread)\n        # Select the bread to be sliced and toasted\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board for slicing\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife for slicing the bread\n\n        bind toaster: item where:\n            is_toaster(toaster)\n        # Select a toaster for toasting the bread\n\n        slice_bread(bread, cutting_board, knife)\n        toast_bread(bread, toaster)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces, then put it back in the fridge.",
        "cdl": "behavior cut_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board)\n        # Place the chicken on the cutting board\n        achieve_once cut(chicken)\n        # Cut the chicken into pieces\n\nbehavior store_in_fridge(chicken:item, fridge:item):\n    body:\n        achieve_once inside(chicken, fridge)\n        # Store the chicken in the fridge\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge)\n        # Close the fridge\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken to be cut and stored\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board for cutting the chicken\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife for cutting the chicken\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select a fridge for storing the chicken\n\n        cut_chicken(chicken, cutting_board, knife)\n        # Cut the chicken into pieces\n        store_in_fridge(chicken, fridge)\n        # Store the chicken in the fridge\n        close_fridge(fridge)\n        # Close the fridge door after storing the chicken"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find your spectacles and put them on the coffee table in the home office.",
        "cdl": " \nbehavior place_spectacles_on_table(spectacles: item, table: item):\n    body:\n        achieve_once on(spectacles, table)\n\nbehavior __goal__():\n    body:\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        \n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n\n        place_spectacles_on_table(spectacles, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior place_book_on_coffee_table(book: item, coffee_table: item):\n    body:\n        achieve_once on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the book to place\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and inside(coffee_table, home_office)\n        # Select the coffee table within the home office\n\n        place_book_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the book to find\n\n        achieve close_char(char, book)\n        # Move the character closer to the book\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Put the book on the coffee table in the home office.",
        "cdl": "behavior place_book_on_coffee_table(book: item, coffee_table: item):\n    body:\n        achieve_once on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the book to place\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and inside(coffee_table, home_office)\n        # Select the coffee table within the home office\n\n        place_book_on_coffee_table(book, coffee_table)"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom, then turn on the lights in the bathroom.",
        "cdl": "behavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n        bind light_bedroom: item where:\n            is_light(light_bedroom) and inside(light_bedroom, bedroom)\n        turn_on_light(light_bedroom)\n\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        bind light_bathroom: item where:\n            is_light(light_bathroom) and inside(light_bathroom, bathroom)\n        turn_on_light(light_bathroom)"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Prepare a sink of soapy water in the bathroom.",
        "cdl": " \nbehavior fill_sink_with_soapy_water(sink: item, faucet: item, soap: item):\n    body:\n        achieve_once inside(soap, sink)\n        achieve_once is_on(faucet)\n        achieve has_water(sink)\n        achieve_once is_off(faucet)\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 42\n        # Select sink_42\n\n        bind faucet: item where:\n            is_faucet(faucet) and id[faucet] == 43\n        # Select faucet_43\n\n        bind soap: item where:\n            is_soap(soap) and id[soap] == 2054\n        # Select soap_2054\n\n        fill_sink_with_soapy_water(sink, faucet, soap)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Locate the basket containing clothes.",
        "cdl": "def has_clothes_in_basket(basket:item):\n    # Function to check if there are clothes in the basket\n    symbol has_clothes=exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and has_clothes_in_basket(basket)):\n            # Check if there is a basket for clothes based on available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and has_clothes_in_basket(basket)\n            # Select a basket that has clothes\n            achieve close_char(char, basket) \n            # Move the character closer to the basket with clothes\n\n        else: \n            # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket,\"Check if there are any clothes in the basket\")"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add soap to the washing machine.",
        "cdl": " \nbehavior add_soap_to_washing_machine(washing_machine: item, soap: item):\n    body:\n        achieve_once inside(soap, washing_machine)\n        # Add soap inside the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        bind soap: item where:\n            is_soap(soap)\n        # Select a soap item\n\n        add_soap_to_washing_machine(washing_machine, soap)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Load the clothes into the washing machine and run it.",
        "cdl": "behavior load_clothes_into_washing_machine(clothes: item, washing_machine: item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n        # Load clothes into the washing machine\n\nbehavior start_washing_machine(washing_machine: item):\n    body:\n        achieve_once is_on(washing_machine)\n        # Start the washing machine\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket] == 2078\n        # Select the basket with clothes by ID 2078\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine] == 2079\n        # Select the washing machine with ID 2079\n\n        foreach clothes: item:\n        # Load all clothes from the basket into the washing machine\n            if is_clothes(clothes) and inside(clothes, basket):\n                load_clothes_into_washing_machine(clothes, washing_machine)\n\n        start_washing_machine(washing_machine)\n        # Start the washing machine to wash the clothes"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Wipe the toilet with toilet paper and then throw it into the toilet.",
        "cdl": " \nbehavior wipe_toilet_with_toilet_paper(toilet: item, toilet_paper: item):\n    body:\n        achieve_once inhand(toilet_paper)\n        wipe(toilet)\n\nbehavior discard_toilet_paper_into_toilet(toilet: item, toilet_paper: item):\n    body:\n        achieve_once inside(toilet_paper, toilet)\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet)\n        # Select the toilet\n\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper)\n        # Select the toilet paper\n\n        wipe_toilet_with_toilet_paper(toilet, toilet_paper)\n        discard_toilet_paper_into_toilet(toilet, toilet_paper)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Identify all windows in the house.",
        "cdl": " \ndef is_window_found(window:item):\n    # Function to check if a window has been found\n    symbol found=visited(window)\n    return found\n\nbehavior __goal__():\n    body:\n        if exists window: item : (is_window(window) and is_window_found(window)):\n            # Check if there is a window that has already been located based on known information\n            bind window: item where:\n                is_window(window) and is_window_found(window)\n            # Move the character closer to a located window\n            achieve close_char(char, window)\n\n        else:\n            # If no window has been found, begin exploration\n            foreach window: item:\n                if is_window(window) and not visited(window):\n                    observe(window, \"Check if it is a window\")\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Wipe each window using a towel.",
        "cdl": "behavior wipe_window(window:item, towel:item):\n    body:\n        achieve_once inhand(towel)\n        wipe(window)\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and open(window):\n                bind towel: item where:\n                    is_towel(towel)\n                wipe_window(window, towel)"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": "behavior turn_on_dvd_player(dvd_player:item):\n    body:\n        achieve is_on(dvd_player)\n\nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        turn_on_dvd_player(dvd_player)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the book to find\n\n        achieve close_char(char, book)\n        # Move the character closer to the book\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Put the book on the table in the home office.",
        "cdl": " \nbehavior place_book_on_table(book: item, table: item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        \n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n\n        place_book_on_table(book, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "3. Turn on the light in the home office.",
        "cdl": "behavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        \n        bind light: item where:\n            is_light(light) and inside(light, home_office)\n        \n        turn_on_light(light)"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Boil the egg.",
        "cdl": "behavior add_water_to_pot(pot: item, sink: item):\n    body:\n        achieve_once has_water(pot)\n\nbehavior boil_egg(pot: item, stove: item, egg: item):\n    body:\n        achieve_once inside(egg, pot)\n        achieve on(pot, stove)\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot to boil the egg\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink to fill the pot with water\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove to boil the water\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select an egg to be boiled\n\n        add_water_to_pot(pot, sink)\n        boil_egg(pot, stove, egg)"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "1. Find a bowl and scoop some ice cream into it.",
        "cdl": "behavior clean_bowl(bowl:item):\n    body:\n        wash(bowl)\n        scrub(bowl)\n        rinse(bowl)\n        achieve_once clean(bowl)\n\nbehavior scoop_ice_cream_into_bowl(ice_cream:item, bowl:item):\n    body:\n        achieve_once inside(ice_cream, bowl)\n\nbehavior __goal__():\n    body:\n        bind bowl_2071: item where:\n            is_bowl(bowl_2071) and dirty(bowl_2071)\n        bind bowl_2072: item where:\n            is_bowl(bowl_2072) and dirty(bowl_2072)\n\n        bind ice_cream: item where:\n            is_food_ice_cream(ice_cream) and id[ice_cream] == 2025\n\n        if dirty(bowl_2071):\n            clean_bowl(bowl_2071)\n            scoop_ice_cream_into_bowl(ice_cream, bowl_2071)\n        else:\n            clean_bowl(bowl_2072)\n            scoop_ice_cream_into_bowl(ice_cream, bowl_2072)"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Add jam on top of the ice cream.",
        "cdl": " \nbehavior add_jam_on_ice_cream(jam:item, ice_cream:item):\n    body:\n        achieve_once on(jam, ice_cream)\n\nbehavior __goal__():\n    body:\n        bind ice_cream: item where:\n            is_food_ice_cream(ice_cream) and inside(ice_cream, bowl_2071)\n        # Select the bowl of ice cream prepared in the previous subtask\n\n        bind jam: item where:\n            is_food_jam(jam)\n        # Select the jam to add on top of the ice cream\n\n        add_jam_on_ice_cream(jam, ice_cream)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "1. Find and scoop ice cream into a bowl.",
        "cdl": " \nbehavior scoop_ice_cream_into_bowl(ice_cream:item, bowl:item):\n    body:\n        achieve_once inside(ice_cream, bowl)\n\nbehavior __goal__():\n    body:\n        bind ice_cream: item where:\n            is_food_ice_cream(ice_cream)\n        # Select ice cream to be scooped\n\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select a bowl to scoop ice cream into\n\n        scoop_ice_cream_into_bowl(ice_cream, bowl)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Add some jam on top of the ice cream.",
        "cdl": " \nbehavior add_jam_on_ice_cream(jam:item, ice_cream:item):\n    body:\n        achieve_once on(jam, ice_cream)\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl) and id[bowl] == 2095\n        # Select bowl_2095 prepared in the previous subtask\n\n        bind ice_cream: item where:\n            is_food_ice_cream(ice_cream) and inside(ice_cream, bowl)\n        # Select the ice cream inside the bowl\n\n        bind jam: item where:\n            is_food_jam(jam)\n        # Select the jam to add on top of the ice cream\n\n        add_jam_on_ice_cream(jam, ice_cream)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Gently find and bring the cat to a safe washing area.",
        "cdl": "behavior find_cat(cat:item):\n    body:\n        achieve close_char(char, cat)\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        find_cat(cat)"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Use appropriate cat shampoo and water to wash the cat.",
        "cdl": "behavior apply_shampoo_and_wash_cat(cat: item, shampoo: item, water_source: item):\n    body:\n        achieve_once inhand(shampoo)\n        # Temporarily hold the shampoo to apply it to the cat\n        rinse(cat)\n        # Rinse the cat to wet its fur\n        wash(cat)\n        # Wash the cat with applied shampoo\n        rinse(cat)\n        # Rinse again to remove the shampoo\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2082\n        # Select cat_2082 found on the couch\n\n        bind shampoo: item where:\n            is_cleaning_solution(shampoo)\n        # Select an appropriate cat shampoo\n\n        bind water_source: item where:\n            is_faucet(water_source) or is_bathtub(water_source) or is_shower(water_source)\n        # Select a water source to rinse and wash the cat\n\n        apply_shampoo_and_wash_cat(cat, shampoo, water_source)"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": "behavior turn_on_dvd_player(dvd_player:item):\n    body:\n        achieve is_on(dvd_player)\n\nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        turn_on_dvd_player(dvd_player)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior place_book_on_coffee_table(book: item, coffee_table: item):\n    body:\n        achieve_once on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the book to place\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and inside(coffee_table, home_office)\n        # Select the coffee table within the home office\n\n        place_book_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Prepare a cup of hot milk and put it on the coffee table in the home office.",
        "cdl": "behavior prepare_hot_milk_and_place_on_table(milk: item, cup: item, microwave: item, table: item):\n    body:\n        achieve_once inside(milk, cup) # Pour milk into the cup\n        achieve_once inside(cup, microwave) # Place the cup in the microwave\n        achieve_once closed(microwave) # Close the microwave door\n        achieve_once is_on(microwave) # Turn on the microwave to heat the milk\n        achieve_once on(cup, table) # Place the heated cup of milk on the table\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave to heat the milk\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table in the home office\n\n        prepare_hot_milk_and_place_on_table(milk, cup, microwave, table)"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Insert the CD into the CD player and play the music.",
        "cdl": " \nbehavior insert_cd_into_cd_player_and_play(cd: item, cd_player: item):\n    body:\n        achieve_once inside(cd, cd_player)\n        achieve is_on(cd_player)\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        # Bind the cd instance\n\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        # Bind the cd_player instance\n\n        insert_cd_into_cd_player_and_play(cd, cd_player)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with milk.",
        "cdl": "behavior fill_cup_with_milk(cup: item, milk: item):\n    body:\n        achieve_once inside(milk, cup)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk that needs to be poured into the cup\n\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup to be filled with milk\n\n        fill_cup_with_milk(cup, milk)\n        # Fill the cup with milk"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": "behavior heat_cup_of_milk_in_microwave(cup: item, microwave: item):\n    body:\n        achieve_once inside(cup, microwave)\n        # Place the cup of milk inside the microwave\n        achieve_once closed(microwave)\n        # Close the microwave door\n        achieve_once is_on(microwave)\n        # Turn on the microwave to heat the milk\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2063\n        # Select cup with ID 2063 that has milk\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        heat_cup_of_milk_in_microwave(cup, microwave)\n        # Heat the cup of milk in the microwave"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Locate your cat in the household.",
        "cdl": " \ndef has_cat_inside_house():\n    # Function to check if there is a cat inside the house\n    symbol has_cat=exists o: item : (is_cat(o) and inside_char(char, o))\n    return has_cat\n\nbehavior __goal__():\n    body:\n        if exists cat: item : (is_cat(cat) and has_cat_inside_house()):\n            # If we have already found the cat inside the house based on known information\n            bind cat: item where:\n                is_cat(cat) and has_cat_inside_house()\n            # Move closer to the cat if found\n            achieve close_char(char, cat)\n\n        else:\n            # If no cat is found inside the house from known information, start exploring\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat,\"Check the location of the cat inside the house\")\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Approach and gently touch your cat.",
        "cdl": "behavior approach_and_touch_cat(cat: item):\n    body:\n        achieve close_char(char, cat)\n        touch(cat)\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2082\n        # Select the cat with ID 2082\n        approach_and_touch_cat(cat)"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior wash_jacket(jacket:item):\n    body:\n        wash(jacket)\n        # Hand wash the jacket\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket that needs to be hand washed\n\n        wash_jacket(jacket)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": " \nbehavior load_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve_once inside(jacket, washing_machine)\n        # Place the jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine) # Close the washing machine door\n        achieve_once is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind clothes_jacket: item where:\n            is_clothes_jacket(clothes_jacket) and id[clothes_jacket]==2078\n        # Select clothes_jacket_2078\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        load_washing_machine(clothes_jacket, washing_machine)\n        start_washing_machine(washing_machine) # Start the washing machine\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Find all the bowls and plates.",
        "cdl": " \ndef has_bowls_or_plates_identified():\n    # Function to check if there are bowls or plates already identified in previously visited areas\n    symbol available=exists o: item : ((is_bowl(o) or is_plate(o)) and visited(o))\n    return available\n\nbehavior __goal__():\n    body:\n        if has_bowls_or_plates_identified():\n            # If we have already found bowls or plates based on known information\n            bind item: item where:\n                (is_bowl(item) or is_plate(item)) and visited(item)\n            # Move closer to the found item\n            achieve close_char(char, item)\n\n        else:\n            # If no bowls or plates are found in the visited areas, start exploring\n            foreach o: item:\n                if (is_bowl(o) or is_plate(o)) and not visited(o):\n                    observe(o, \"Check the location of the bowls and plates\")\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and plates using the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(dish: item, dishwasher: item):\n    body:\n        achieve_once inside(dish, dishwasher)\n        # Place the dish inside the dishwasher\n\nbehavior start_dishwasher(dishwasher: item):\n    body:\n        achieve_once closed(dishwasher) # Close the dishwasher door\n        achieve_once is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        \n        foreach dish: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(dish) or is_plate(dish):\n                load_dishwasher(dish, dishwasher)\n        start_dishwasher(dishwasher) # Start the dishwasher\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink directly.",
        "cdl": "behavior clean_sink(sink: item):\n    body:\n        scrub(sink)\n        # Scrub the sink to remove dirt\n        rinse(sink)\n        # Rinse the sink to wash away the loose dirt\n        achieve_once clean(sink)\n        # The sink is clean\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        # Select the sink to clean\n\n        clean_sink(sink)"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Load the bowls and plates into the dishwasher and start it.",
        "cdl": " \nbehavior load_dishwasher(item: item, dishwasher: item):\n    body:\n        achieve_once inside(item, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher: item):\n    body:\n        achieve_once closed(dishwasher)\n        # Close the dishwasher door\n        achieve_once is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        foreach item: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(item) or is_plate(item):\n                load_dishwasher(item, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Hand wash the forks.",
        "cdl": " \nbehavior wash_forks(fork:item):\n    body:\n        wash(fork)\n        # Wash the fork by hand\n\nbehavior __goal__():\n    body:\n        foreach fork: item:\n            if is_fork(fork):\n                wash_forks(fork)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": "behavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        bind light_bathroom: item where:\n            is_light(light_bathroom) and inside(light_bathroom, bathroom)\n        turn_on_light(light_bathroom)"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket with clothes.",
        "cdl": " \ndef has_clothes_in_basket(basket:item):\n    # Function to check if there are clothes in the basket\n    symbol has_clothes=exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and has_clothes_in_basket(basket)):\n            # Check if there is a basket for clothes based on available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and has_clothes_in_basket(basket)\n            # Select a basket that has clothes\n            achieve close_char(char, basket) \n            # Move the character closer to the basket with clothes\n\n        else: \n            # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket,\"Check if there are any clothes in the basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the clothes in the washing machine.",
        "cdl": " \nbehavior load_clothes_into_washing_machine(clothes: item, washing_machine: item):\n    body:\n        achieve_once inside(clothes, washing_machine)\n        # Load clothes into the washing machine\n\nbehavior start_washing_machine(washing_machine: item):\n    body:\n        achieve_once closed(washing_machine)\n        # Close the washing machine door before starting\n        achieve_once is_on(washing_machine)\n        # Start the washing machine\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket] == 2078\n        # Select the basket with ID 2078 containing the clothes to be washed\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        foreach clothes: item:\n            if is_clothes(clothes) and inside(clothes, basket):\n                load_clothes_into_washing_machine(clothes, washing_machine)\n\n        start_washing_machine(washing_machine)\n        # Start the washing machine to wash the clothes\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": "behavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n\n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n\n        open_window(window)"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Locate the cat in the household.",
        "cdl": " \ndef has_cat_inside_house():\n    # Function to check if there is a cat inside the house\n    symbol has_cat=exists o: item : (is_cat(o) and inside_char(char, o))\n    return has_cat\n\nbehavior __goal__():\n    body:\n        if exists cat: item : (is_cat(cat) and has_cat_inside_house()):\n            # If we have already found the cat inside the house based on known information\n            bind cat: item where:\n                is_cat(cat) and has_cat_inside_house()\n            # Move closer to the cat if found\n            achieve close_char(char, cat)\n\n        else:\n            # If no cat is found inside the house from known information, start exploring\n            foreach cat: item:\n                if is_cat(cat) and not visited(cat):\n                    observe(cat,\"Check the location of the cat inside the house\")\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Approach the cat and gently touch it.",
        "cdl": "behavior approach_and_touch_cat(cat: item):\n    body:\n        achieve close_char(char, cat)\n        touch(cat)\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2069\n        # Select the cat with ID 2069\n        approach_and_touch_cat(cat)"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Identify all the items in the fridge.",
        "cdl": " \ndef has_items_in_fridge(fridge:item):\n    # Function to check if there are items in the fridge\n    symbol has_items=exists o: item : (inside(o, fridge))\n    return has_items\n\nbehavior __goal__():\n    body:\n        if exists fridge: item : (is_fridge(fridge) and has_items_in_fridge(fridge)):\n            # Check if the fridge has any items based on available information\n            bind fridge: item where:\n                is_fridge(fridge) and has_items_in_fridge(fridge)\n            # Select a fridge that has items\n            achieve close_char(char, fridge)\n            # Move the character closer to the fridge with items\n\n        else: \n            # If no fridge with items is found, initiate exploration to locate one\n            foreach fridge: item:\n                if is_fridge(fridge) and not visited(fridge):\n                    observe(fridge,\"Identify all items in the fridge\")\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw each item into the trashcan.",
        "cdl": " \nbehavior throw_items_in_trashcan(o: item, trashcan: item):\n    body:\n        achieve_once inside(o, trashcan)\n        # Place the item from the fridge into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 140\n        # Select fridge_140\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select a trashcan\n\n        foreach o: item:\n        # Throw all items inside the fridge into the trashcan\n            if inside(o, fridge):\n                throw_items_in_trashcan(o, trashcan)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Fill a bowl with water.",
        "cdl": "behavior fill_bowl_with_water(bowl: item, faucet: item):\n    body:\n        achieve is_on(faucet) # Ensure the faucet is on\n        achieve_once has_water(bowl) # Fill the bowl with water\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select a bowl to fill with water\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet to fill the bowl with water\n\n        fill_bowl_with_water(bowl, faucet)\n        # Execute the behavior to fill the bowl with water from the faucet and turn it off afterwards"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Place the bowl of water on the table in the home office.",
        "cdl": " \nbehavior place_bowl_on_table(bowl: item, table: item):\n    body:\n        achieve_once on(bowl, table)\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl) and id[bowl] == 2095\n        # Select the bowl filled with water\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table in the home office\n\n        place_bowl_on_table(bowl, table)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "3. Find your cat and put it on the table in the home office.",
        "cdl": " \nbehavior find_and_place_cat_on_table(cat: item, table: item):\n    body:\n        achieve_once on(cat, table)\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select a cat\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table within the home office\n\n        find_and_place_cat_on_table(cat, table)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put cleaning solution in the dishwasher.",
        "cdl": " \nbehavior add_cleaning_solution_to_dishwasher(cleaning_solution:item, dishwasher:item):\n    body:\n        achieve_once inside(cleaning_solution, dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select the cleaning solution\n\n        add_cleaning_solution_to_dishwasher(cleaning_solution, dishwasher)\n        # Add the cleaning solution to the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and the plates with the dishwasher.",
        "cdl": "behavior load_dishwasher(dish:item, dishwasher:item):\n    body:\n        achieve_once inside(dish, dishwasher)\n        # Place the dish inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher) # Close the dishwasher door\n        achieve_once is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        \n        foreach dish: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(dish) or is_plate(dish):\n                load_dishwasher(dish, dishwasher)\n        start_dishwasher(dishwasher) # Start the dishwasher"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "Put cleaning solution in the dishwasher, and then wash the bowls and plates with the dishwasher.",
        "cdl": " \nbehavior add_cleaning_solution_to_dishwasher(cleaning_solution:item, dishwasher:item):\n    body:\n        achieve_once inside(cleaning_solution, dishwasher)\n\nbehavior load_dishwasher(dish:item, dishwasher:item):\n    body:\n        achieve_once inside(dish, dishwasher) \n        # Place the dish inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher) # Close the dishwasher door\n        achieve_once is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select the cleaning solution\n\n        add_cleaning_solution_to_dishwasher(cleaning_solution, dishwasher)\n        # Add the cleaning solution to the dishwasher\n\n        foreach dish: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(dish) or is_plate(dish):\n                load_dishwasher(dish, dishwasher)\n\n        start_dishwasher(dishwasher) # Start the dishwasher\n "
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put the cleaning solution in the dishwasher.",
        "cdl": " \nbehavior add_cleaning_solution_to_dishwasher(cleaning_solution:item, dishwasher:item):\n    body:\n        achieve_once inside(cleaning_solution, dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select the cleaning solution\n\n        add_cleaning_solution_to_dishwasher(cleaning_solution, dishwasher)\n        # Add the cleaning solution to the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and the plates using the dishwasher.",
        "cdl": "behavior load_dishwasher(dish:item, dishwasher:item):\n    body:\n        achieve_once inside(dish, dishwasher)\n        # Place the dish inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher) # Close the dishwasher door\n        achieve_once is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        \n        foreach dish: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(dish) or is_plate(dish):\n                load_dishwasher(dish, dishwasher)\n        start_dishwasher(dishwasher) # Start the dishwasher"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Find all the windows in the house that need to be wiped.",
        "cdl": " \ndef has_window(x:item):\n    # Function to check if an item is a window\n    return is_window(x)\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if has_window(window) and not visited(window):\n                observe(window, \"Identify windows that need to be wiped\")\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Use a towel to wipe each window.",
        "cdl": " \nbehavior wipe_window(window:item, towel:item):\n    body:\n        achieve_once inhand(towel)\n        wipe(window)\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and open(window):\n                bind towel: item where:\n                    is_towel(towel)\n                wipe_window(window, towel)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Use the pot to boil some water.",
        "cdl": "behavior fill_pot_with_water(pot: item, sink: item):\n    body:\n        achieve_once has_water(pot)\n        # Fill the pot with water from the sink\n\nbehavior boil_water(pot: item, stove: item):\n    body:\n        achieve_once is_on(stove)\n        # Turn on the stove\n        achieve on(pot, stove)\n        # Place the pot on the stove\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink for filling pot with water\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove for boiling the water\n        \n        fill_pot_with_water(pot, sink)\n        boil_water(pot, stove)"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "1. Find a bowl and add ice cream to it.",
        "cdl": "behavior find_bowl_and_add_ice_cream(bowl: item, ice_cream: item):\n    body:\n        achieve_once inside(ice_cream, bowl)\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select a bowl\n\n        bind ice_cream: item where:\n            is_food_ice_cream(ice_cream)\n        # Select the ice cream\n\n        find_bowl_and_add_ice_cream(bowl, ice_cream)"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Add some jam on top of the ice cream.",
        "cdl": " \nbehavior add_jam_on_ice_cream(jam:item, ice_cream:item):\n    body:\n        achieve_once on(jam, ice_cream)\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select the bowl prepared in the previous subtask\n\n        bind ice_cream: item where:\n            is_food_ice_cream(ice_cream) and inside(ice_cream, bowl)\n        # Select the ice cream inside the bowl\n\n        bind jam: item where:\n            is_food_jam(jam)\n        # Select the jam to add on top of the ice cream\n\n        add_jam_on_ice_cream(jam, ice_cream)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Identify the fridge containing items.",
        "cdl": " \ndef has_items_in_fridge(fridge:item):\n    # Function to check if there are items in the fridge\n    symbol has_items=exists o: item : (inside(o, fridge))\n    return has_items\n\nbehavior __goal__():\n    body:\n        if exists fridge: item : (is_fridge(fridge) and has_items_in_fridge(fridge)):\n            # If there is already available information about a fridge containing items, focus on this one\n            bind fridge: item where:\n                is_fridge(fridge) and has_items_in_fridge(fridge)\n            achieve close_char(char, fridge)\n     \n        else:\n            # If no information is available, inspect all unvisited fridges\n            foreach fridge: item:\n                if is_fridge(fridge) and not visited(fridge):\n                    observe(fridge, \"Inspect the fridge to determine if it contains items\")\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw the items from the fridge into the trashcan.",
        "cdl": " \nbehavior throw_items_in_trashcan(o: item, trashcan: item):\n    body:\n        achieve_once inside(o, trashcan)\n        # Place the item from the fridge into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 126\n        # Select fridge_126\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select a trashcan\n\n        foreach o: item:\n        # Throw all items inside the fridge into the trashcan\n            if inside(o, fridge):\n                throw_items_in_trashcan(o, trashcan)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Load the bowls and plates into the dishwasher and start the washing cycle.",
        "cdl": " \nbehavior load_dishwasher(item: item, dishwasher: item):\n    body:\n        achieve_once inside(item, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher: item):\n    body:\n        achieve_once closed(dishwasher)\n        # Close the dishwasher door\n        achieve_once is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        foreach item: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(item) or is_plate(item):\n                load_dishwasher(item, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the forks by hand.",
        "cdl": "\nbehavior wash_forks(fork:item):\n    body:\n        wash(fork)\n        # Wash the fork by hand\n\nbehavior __goal__():\n    body:\n        bind dining_room_1: item where:\n            is_dining_room(dining_room_1)\n        # Select dining room 1\n\n        bind table_123: item where:\n            is_table(table_123) and inside(table_123, dining_room_1)\n        # Select table 123 inside dining room 1\n\n        foreach fork: item:\n            if is_fork(fork) and on(fork, table_123):\n                # Find forks on table 123\n                wash_forks(fork)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Slice some chicken and give it to the cat.",
        "cdl": " \nbehavior slice_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(chicken, cutting_board)\n        # Place the chicken on the cutting board\n        achieve_once cut(chicken)\n        # Slice the chicken\n\nbehavior give_chicken_to_cat(chicken: item, cat: item):\n    body:\n        achieve_once close(chicken, cat)\n        # Give the sliced chicken to the cat\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken to be sliced\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board for slicing\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife for slicing the chicken\n\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat to give chicken to\n\n        slice_chicken(chicken, cutting_board, knife)\n        give_chicken_to_cat(chicken, cat)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Identify all the windows in the house.",
        "cdl": " \ndef is_window_in_house(window:item):\n    # Function to check if a window is present in the house\n    symbol is_window=exists w: item : (is_window(w) and w == window)\n    return is_window\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window_in_house(window) and not visited(window):\n                observe(window, \"Identify all windows in the house\")\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Wipe each window with a towel.",
        "cdl": " \nbehavior wipe_window(window:item, towel:item):\n    body:\n        achieve_once inhand(towel)\n        wipe(window)\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and open(window):\n                bind towel: item where:\n                    is_towel(towel)\n                wipe_window(window, towel)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Identify the table in the home office.",
        "cdl": " \ndef is_table_in_home_office(table:item):\n    # Function to check if the table is in the home office\n    symbol in_home_office=exists office: item : (is_home_office(office) and inside(table, office))\n    return in_home_office\n\nbehavior identify_table_in_home_office(table:item):\n    body:\n        achieve close_char(char, table)\n\nbehavior __goal__():\n    body:\n        if exists table: item : (is_table(table) and is_table_in_home_office(table)):\n            # Select the table that is inside the home office\n            bind table: item where:\n                is_table(table) and is_table_in_home_office(table)\n            identify_table_in_home_office(table)\n        \n        else:\n            # If no table is identified in known information, check each table to locate one in the home office\n            foreach table: item:\n                if is_table(table) and not visited(table):\n                    observe(table, \"Check if the table is in the home office\")\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and place it on the table in the home office.",
        "cdl": " \nbehavior place_book_on_table(book: item, table: item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the book to place\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table in the home office\n\n        place_book_on_table(book, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "3. Turn on the light in the home office.",
        "cdl": " \nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        \n        bind light: item where:\n            is_light(light) and inside(light, home_office)\n        \n        turn_on_light(light)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and toast it.",
        "cdl": " \nbehavior slice_bread(bread: item, cutting_board: item, knife: item):\n    body:\n        achieve_once on(bread, cutting_board)\n        # Place the bread on the cutting board\n        achieve_once cut(bread)\n        # Slice the bread\n\nbehavior toast_bread(bread: item, toaster: item):\n    body:\n        achieve_once inside(bread, toaster)\n        # Place the sliced bread into the toaster\n        achieve_once is_on(toaster)\n        # Turn on the toaster to toast the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread)\n        # Select the bread to be sliced and toasted\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board for slicing\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife for slicing the bread\n\n        bind toaster: item where:\n            is_toaster(toaster)\n        # Select a toaster for toasting the bread\n\n        slice_bread(bread, cutting_board, knife)\n        toast_bread(bread, toaster)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and then toast it.",
        "cdl": "behavior slice_bread(bread: item, cutting_board: item, knife: item):\n    body:\n        achieve_once on(bread, cutting_board)\n        # Place the bread on the cutting board\n        achieve_once cut(bread)\n        # Slice the bread\n\nbehavior toast_bread(bread: item, toaster: item):\n    body:\n        achieve_once inside(bread, toaster)\n        # Place the sliced bread into the toaster\n        achieve_once is_on(toaster)\n        # Turn on the toaster to toast the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread)\n        # Select the bread to be sliced and toasted\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board for slicing\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife for slicing the bread\n\n        bind toaster: item where:\n            is_toaster(toaster)\n        # Select a toaster for toasting the bread\n\n        slice_bread(bread, cutting_board, knife)\n        toast_bread(bread, toaster)"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV using the remote control by touching it.",
        "cdl": "behavior turn_on_tv_using_remote(remote_control: item):\n    body:\n        touch(remote_control)\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        turn_on_tv_using_remote(remote_control)"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Insert the CD into the CD player and play music.",
        "cdl": " \nbehavior insert_cd_into_cd_player_and_play(cd: item, cd_player: item):\n    body:\n        achieve_once inside(cd, cd_player)\n        achieve is_on(cd_player)\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n\n        insert_cd_into_cd_player_and_play(cd, cd_player)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with water.  ",
        "cdl": "\nbehavior fill_cup_with_water(cup: item, faucet: item):\n    body:\n        achieve_once has_water(cup)\n        # Fill the cup with water from the faucet\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet\n\n        fill_cup_with_water(cup, faucet)\n        # Fill the cup with water from the faucet\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Place the cup of water in the freezer.",
        "cdl": " \nbehavior place_cup_in_freezer(cup: item, freezer: item):\n    body:\n        achieve_once inside(cup, freezer)\n\nbehavior close_the_freezer_door(freezer:item):\n    body:\n        achieve_once closed(freezer)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and has_water(cup)\n        # Select the cup with water\n\n        bind freezer: item where:\n            is_fridge(freezer)\n        # Select a fridge to use the freezer area\n\n        place_cup_in_freezer(cup, freezer)\n        close_the_freezer_door(freezer)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Scramble the egg in the frying pan.",
        "cdl": "behavior scramble_egg_in_fryingpan(egg: item, fryingpan: item, oil: item, stove: item):\n    body:\n        achieve_once on(egg, fryingpan)\n        # Break and place the egg in the frying pan\n        achieve inside(oil, fryingpan)\n        # Ensure there is oil in the frying pan\n        achieve on(fryingpan, stove)\n        # Place the frying pan on the stove\n        achieve is_on(stove)\n        # Turn on the stove to scramble the egg\n\nbehavior __goal__():\n    body:\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg to scramble\n\n        bind fryingpan: item where:\n            is_fryingpan(fryingpan)\n        # Select a frying pan for scrambling\n        \n        bind oil: item where:\n            is_oil(oil)\n        # Select the oil\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove for cooking\n\n        scramble_egg_in_fryingpan(egg, fryingpan, oil, stove)"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Find the remote control and turn on the TV by touching it.",
        "cdl": " \nbehavior turn_on_tv_by_touching_remote(remote_control: item):\n    body:\n        touch(remote_control)\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control) and id[remote_control] == 2081\n        # Select the remote control with ID 2081\n\n        turn_on_tv_by_touching_remote(remote_control)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink directly.",
        "cdl": "behavior clean_sink(sink: item):\n    body:\n        scrub(sink)\n        # Scrub the sink to remove dirt\n        rinse(sink)\n        # Rinse the sink to wash away the loose dirt\n        achieve_once clean(sink)\n        # The sink is clean\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        # Select the sink to clean\n\n        clean_sink(sink)"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": "behavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        bind light_bathroom: item where:\n            is_light(light_bathroom) and inside(light_bathroom, bathroom)\n        turn_on_light(light_bathroom)"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and pour milk into it.",
        "cdl": " \nbehavior find_and_fill_cup_with_milk(cup: item, milk: item):\n    body:\n        achieve_once inside(milk, cup)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        find_and_fill_cup_with_milk(cup, milk)\n        # Pour milk into the cup\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk using the microwave.",
        "cdl": " \nbehavior heat_cup_of_milk_in_microwave(cup: item, microwave: item):\n    body:\n        achieve_once inside(cup, microwave)\n        # Place the cup of milk inside the microwave\n        achieve_once closed(microwave)\n        # Close the microwave door\n        achieve_once is_on(microwave)\n        # Turn on the microwave to heat the milk\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2132\n        # Select cup with ID 2132 that already has milk\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        heat_cup_of_milk_in_microwave(cup, microwave)\n        # Heat the cup of milk in the microwave\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book within the environment.",
        "cdl": "def has_book_inside_house():\n    # Function to check if there is a book inside the house\n    symbol has_book=exists o: item : (is_book(o) and inside_char(char, o))\n    return has_book\n\nbehavior __goal__():\n    body:\n        if exists book: item : (is_book(book) and has_book_inside_house()):\n            # If we have already found the book inside the house based on known information\n            bind book: item where:\n                is_book(book) and has_book_inside_house()\n            # Move closer to the book if found\n            achieve close_char(char, book)\n\n        else:\n            # If no book is found inside the house from known information, start exploring\n            foreach book: item:\n                if is_book(book) and not visited(book):\n                    observe(book, \"Check the location of the book inside the house\")"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": "behavior place_book_on_coffee_table(book: item, coffee_table: item):\n    body:\n        achieve_once on(book, coffee_table)\n\nbehavior verify_coffee_table(table: item, home_office: item):\n    body:\n        achieve close_char(char, table)\n        observe(table, \"Check if this is the coffee table in the home office\")\n        bind coffee_table: item where:\n            is_table(table) and inside(table, home_office)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book) and id[book] == 2137\n        # Select book_2137 to place\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and id[table] == 270\n        # Select table_270\n\n        verify_coffee_table(table, home_office)\n        place_book_on_coffee_table(book, table)"
    }
]