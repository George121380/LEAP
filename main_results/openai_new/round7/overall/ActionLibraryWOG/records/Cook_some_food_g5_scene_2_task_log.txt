From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the banana slices until they are golden brown.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2045_around_kitchen_counter_132(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_142_around_kitchen_counter_132(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tray,kitchen_counter_instance)
        else:
            exp(tray,kitchen_counter_instance)
    eff:
        unknown[tray]=False
        close[tray,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tray]=True
    

#exp_behavior_end

#goal_representation
behavior peel_bananas(banana:item):
    body:
        achieve_once cut(banana)

behavior slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board)
        achieve_once inhand(knife)
        achieve cut(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        peel_bananas(banana)
        slice_bananas(banana, cutting_board, knife)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior peel_bananas(banana:item):
    body:
        achieve_once cut(banana)

behavior slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board)
        achieve_once inhand(knife)
        achieve cut(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        peel_bananas(banana)
        slice_bananas(banana, cutting_board, knife)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_banana_2045, kitchen_counter_132)walk_executor(food_banana_2045)grab_executor(food_banana_2045)walk_executor(cutting_board_2080)put_executor(food_banana_2045, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_banana_2045, kitchen_counter_132)
Fail to find food_banana_2045 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_banana_2045, cupboard_131)walk_executor(food_banana_2045)grab_executor(food_banana_2045)walk_executor(cutting_board_2080)put_executor(food_banana_2045, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_banana_2045, cupboard_131)
Fail to find food_banana_2045 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_banana_2045, fridge_140)walk_executor(food_banana_2045)grab_executor(food_banana_2045)walk_executor(cutting_board_2080)put_executor(food_banana_2045, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_banana_2045, fridge_140)
Find food_banana_2045. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2045)walk_executor(cutting_board_2080)put_executor(food_banana_2045, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
grab_executor(food_banana_2045)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_banana_2045 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_banana_2045. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_banana_2045, cutting_board_2080)
Robot find: Robot is close to the food_banana_2045. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. cutting_board_2080 is close food_banana_2045. food_banana_2045 is close cutting_board_2080. food_banana_2045 is on cutting_board_2080. food_banana_2045 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)exp(knife_2036, faucet_134)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
exp(knife_2036, faucet_134)
Fail to find knife_2036 around faucet_134. 
##############################
From agent.py-> find a plan in act()
walk_executor(doorjamb_356)exp(knife_2036, doorjamb_356)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
walk_executor(doorjamb_356)
Robot find: drawing_387, keyboard_382, mouse_380, Robot is close to the doorjamb_356. 
##############################
From agent.py
exp(knife_2036, doorjamb_356)
Fail to find knife_2036 around doorjamb_356. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a frying pan.', '3. Fry the banana slices in the hot oil until golden brown.', '4. Remove the fried bananas from the oil and drain them.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2045_around_fridge_140(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior peel_and_slice_bananas(banana: item, knife: item, cutting_board: item):
    body:
        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board
        achieve_once cut(banana)
        # Slice the banana using the knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        peel_and_slice_bananas(banana, knife, cutting_board)
        # Execute peeling and slicing of the banana
#goal_representation_end

##############################
From agent.py->reset_goal
behavior peel_and_slice_bananas(banana: item, knife: item, cutting_board: item):
    body:
        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board
        achieve_once cut(banana)
        # Slice the banana using the knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        peel_and_slice_bananas(banana, knife, cutting_board)
        # Execute peeling and slicing of the banana
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_banana_2045, fridge_140)walk_executor(food_banana_2045)grab_executor(food_banana_2045)walk_executor(cutting_board_2080)put_executor(food_banana_2045, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_banana_2045, fridge_140)
Find food_banana_2045. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2045)walk_executor(cutting_board_2080)put_executor(food_banana_2045, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
grab_executor(food_banana_2045)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_banana_2045 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_banana_2045. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_banana_2045, cutting_board_2080)
Robot find: Robot is close to the food_banana_2045. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. cutting_board_2080 is close food_banana_2045. food_banana_2045 is close cutting_board_2080. food_banana_2045 is on cutting_board_2080. food_banana_2045 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: pot_54, Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(tablelamp_236)exp(knife_2036, tablelamp_236)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
walk_executor(tablelamp_236)
Robot find: mat_237, pillow_239, drawing_238, headset_2086, Robot is close to the tablelamp_236. Robot is close to the nightstand_262. 
##############################
From agent.py
exp(knife_2036, tablelamp_236)
Fail to find knife_2036 around tablelamp_236. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(knife_2036, kitchen_counter_132)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(knife_2036, kitchen_counter_132)
Fail to find knife_2036 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(knife_2036, cupboard_130)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(knife_2036, cupboard_130)
Fail to find knife_2036 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(knife_2036, cupboard_131)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(knife_2036, cupboard_131)
Fail to find knife_2036 around cupboard_131. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the banana slices until golden brown.', '4. Remove the fried bananas and let them drain on a paper towel.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_kitchen_counter_129(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_knife():
    # Check if there is any knife available in the scene
    symbol have_knife = exists k: item : (is_knife(k))
    return have_knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and on(banana, cutting_board_2080)
        # Select the banana on the cutting board

        if has_knife():
            bind knife: item where:
                is_knife(knife)
            achieve_once is_off(fridge_140) # Ensure the fridge is turned off as per actions taken
            cut_banana(banana, knife)
        else:
            foreach c: item:
                if (is_cupboard(c) or is_kitchen_counter(c) or is_dishwasher(c)) and not visited(c):
                    observe(c, "Search for a knife in this location")

behavior cut_banana(banana:item, knife:item):
    body:
        achieve_once on(banana, cutting_board_2080) # Ensure the banana is on the cutting board
        achieve_once cut(banana)
        # Use the knife to cut the banana on the cutting board

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cutting_board_2080; available variables: [Variable<banana: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_coffe_maker_147(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(knife,coffe_maker_instance)
        else:
            exp(knife,coffe_maker_instance)
    eff:
        unknown[knife]=False
        close[knife,coffe_maker_instance]=True
        close[coffe_maker_instance,knife]=True
    

#goal_representation
 
def has_knife():
    # Check if there is any knife available in the scene
    symbol have_knife = exists k: item : (is_knife(k))
    return have_knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and on(banana, cutting_board_2080) # Ensure cutting_board_2080 is bound here
        # Select the banana on the cutting board

        if has_knife():
            bind knife: item where:
                is_knife(knife)
            achieve_once is_off(fridge_140) # Ensure the fridge is turned off as per actions taken
            cut_banana(banana, knife)
        else:
            foreach c: item:
                if (is_cupboard(c) or is_kitchen_counter(c) or is_dishwasher(c)) and not visited(c):
                    observe(c, "Search for a knife in this location")

behavior cut_banana(banana:item, knife:item):
    body:
        achieve_once on(banana, cutting_board_2080) # Ensure the banana is on the cutting board
        achieve_once cut(banana)
        # Use the knife to cut the banana on the cutting board

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cutting_board_2080; available variables: [Variable<banana: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_oven_141(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(knife,oven_instance)
        else:
            exp(knife,oven_instance)
    eff:
        unknown[knife]=False
        close[knife,oven_instance]=True
        close[oven_instance,knife]=True
    

#goal_representation
 
behavior has_knife(knife:item):
    body:
        achieve_once inhand(knife)

behavior cut_banana(banana:item, knife:item):
    body: 
        achieve_once on(banana, cutting_board_2080)
        achieve_once cut(banana)

behavior __goal__():
    body:
        bind cutting_board_2080: item where:
            is_cutting_board(cutting_board_2080)
        
        bind banana: item where:
            is_food_banana(banana) and on(banana, cutting_board_2080)
        
        if has_knife():
            bind knife: item where:
                is_knife(knife)
            cut_banana(banana, knife)
        else:
            foreach c: item:
                if (is_cupboard(c) or is_kitchen_counter(c) or is_dishwasher(c)) and not visited(c):
                    observe(c, "Search for a knife in this location")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_toaster_144(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(knife,toaster_instance)
        else:
            exp(knife,toaster_instance)
    eff:
        unknown[knife]=False
        close[knife,toaster_instance]=True
        close[toaster_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_knife_on_counter():
    # Function to check if there is a knife on the counter
    symbol has_knife= exists o: item: (is_knife(o) and on(o, cutting_board_2080))
    return has_knife

behavior slice_banana(banana:item, knife:item, board:item):
    body:
        achieve_once on(banana, board)
        # Place the banana on the board
        achieve_once cut(banana)
        # Slice the banana using a knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and on(banana, cutting_board_2080)
        # Select the banana on the cutting board 2080
        
        bind board: item where:
            is_cutting_board(board) and id[board]==2080
        # Select the cutting board with id 2080

        if has_knife_on_counter():
            bind knife: item where:
                is_knife(knife) and on(knife, cutting_board_2080)
            # Select the knife on the counter 2080
            slice_banana(banana, knife, board)
        else:
            # If no knife is found, begin searching for a knife
            foreach item: item:
                if is_knife(item) and not visited(item):
                    observe(item, "Find a knife")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: cutting_board_2080; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_oven_141(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(knife,oven_instance)
        else:
            exp(knife,oven_instance)
    eff:
        unknown[knife]=False
        close[knife,oven_instance]=True
        close[oven_instance,knife]=True
    

#goal_representation
 
def has_knife_on_counter():
    # Function to check if there is a knife on the counter
    symbol has_knife= exists o: item: (is_knife(o) and on(o, cutting_board_2080))
    return has_knife

behavior slice_banana(banana:item, knife:item, board:item):
    body:
        achieve_once on(banana, board)
        # Place the banana on the board
        achieve_once cut(banana)
        # Slice the banana using a knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and on(banana, cutting_board_2080)
        # Select the banana on the cutting board 2080
        
        bind board: item where:
            is_cutting_board(board) and id[board]==2080
        # Select the cutting board with id 2080

        if has_knife_on_counter():
            bind knife: item where:
                is_knife(knife) and on(knife, board)
            # Select the knife on the counter 2080
            slice_banana(banana, knife, board)
        else:
            # If no knife is found, begin searching for a knife
            foreach item: item:
                if is_knife(item) and not visited(item):
                    observe(item, "Find a knife")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: cutting_board_2080; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_kitchen_counter_129(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#goal_representation
 
def has_knife_on_counter(cutting_board: item):
    # Function to check if there is a knife on the counter
    symbol has_knife = exists o: item: (is_knife(o) and on(o, cutting_board))
    return has_knife

behavior slice_banana(banana: item, knife: item, board: item):
    body:
        achieve_once on(banana, board)
        # Place the banana on the board
        achieve_once cut(banana)
        # Slice the banana using a knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and on(banana, cutting_board_2080)
        # Select the banana on the cutting board 2080

        bind board: item where:
            is_cutting_board(board) and id[board] == 2080
        # Select the cutting board with id 2080

        if has_knife_on_counter(board):
            bind knife: item where:
                is_knife(knife) and on(knife, board)
            # Select the knife on the counter 2080
            slice_banana(banana, knife, board)
        else:
            # If no knife is found, begin searching for a knife
            foreach item: item:
                if is_knife(item) and not visited(item):
                    observe(item, "Find a knife")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_oven_141(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(knife,oven_instance)
        else:
            exp(knife,oven_instance)
    eff:
        unknown[knife]=False
        close[knife,oven_instance]=True
        close[oven_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_banana(item: item):
    # Function to check if the item is a banana
    return is_food_banana(item)

behavior __goal__():
    body:
        bind banana: item where:
            has_banana(banana)
        # Select the food banana (food_banana_2045)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2080
        # Select the cutting board (cutting_board_2080)
        
        bind knife: item where:
            is_knife(knife) and id[knife] == 2036
        # Select the knife (knife_2036)

        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board
        
        achieve_once inhand(knife)
        # Hold the knife to cut the banana
        
        achieve cut(banana)
        # Slice the banana

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_banana(item: item):
    # Function to check if the item is a banana
    return is_food_banana(item)

behavior __goal__():
    body:
        bind banana: item where:
            has_banana(banana)
        # Select the food banana (food_banana_2045)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2080
        # Select the cutting board (cutting_board_2080)
        
        bind knife: item where:
            is_knife(knife) and id[knife] == 2036
        # Select the knife (knife_2036)

        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board
        
        achieve_once inhand(knife)
        # Hold the knife to cut the banana
        
        achieve cut(banana)
        # Slice the banana

##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)exp(knife_2036, oven_141)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the oven_141. 
##############################
From agent.py
open_executor(oven_141)
Robot find: food_butter_2018, dough_2021, food_onion_2026, tray_142, Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: Go to the dining room. Locate the dishwasher, labeled dishwasher_143. Open the dishwasher_143, and inside you will find knife_2036.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining room. Locate the dishwasher, labeled dishwasher_143. Open the dishwasher_143, and inside you will find knife_2036.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_banana_2045 around fridge_140.
Action 5: Grab food_banana_2045.
Action 6: Walk to cutting_board_2080.
Action 7: Put food_banana_2045 on cutting_board_2080.
Action 8: Walk to knifeblock_52.
Action 9: look for knife_2036 around knifeblock_52.
Action 10: Walk to tablelamp_236.
Action 11: look for knife_2036 around tablelamp_236.
Action 12: Walk to kitchen_counter_132.
Action 13: look for knife_2036 around kitchen_counter_132.
Action 14: Walk to cupboard_130.
Action 15: look for knife_2036 around cupboard_130.
Action 16: Walk to cupboard_131.
Action 17: Open cupboard_131.
Action 18: look for knife_2036 around cupboard_131.
Action 19: Walk to oven_141.
Action 20: Open oven_141.

##############################
From agent.py
exp(knife_2036, oven_141)
Fail to find knife_2036 around oven_141. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the banana slices in the hot oil until golden brown, then remove and drain.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_dishwasher_143(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(knife,dishwasher_instance)
        else:
            exp(knife,dishwasher_instance)
    eff:
        unknown[knife]=False
        close[knife,dishwasher_instance]=True
        close[dishwasher_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and id[banana] == 2045
        # Ensure banana is the specific banana from the fridge

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room to help locate other items

        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 143 and inside(dishwasher, dining_room)
        # Ensure the dishwasher is the specific one in the dining room

        bind knife: item where:
            is_knife(knife) and id[knife] == 2036 and inside(knife, dishwasher)
        # Ensure knife is the specific knife in the dishwasher

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Bind any available cutting board

        achieve_once inhand(banana)
        # Temporarily hold the banana in one hand

        achieve_once inhand(knife)
        # Temporarily hold the knife in the other hand

        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board temporarily

        achieve cut(banana)
        # Cut the banana
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_dishwasher_143(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(knife,dishwasher_instance)
        else:
            exp(knife,dishwasher_instance)
    eff:
        unknown[knife]=False
        close[knife,dishwasher_instance]=True
        close[dishwasher_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior peel_and_slice_banana(banana:item, knife:item, board:item):
    body:
        achieve_once on(banana, board) 
        # Place the banana on the cutting board
        achieve cut(banana) 
        # Slice the banana

behavior get_knife_from_dishwasher(dishwasher:item, knife:item):
    body:
        achieve_once open(dishwasher)
        # Open the dishwasher
        achieve_once inhand(knife) 
        # Grab the knife from the dishwasher

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana to be peeled and sliced
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife) and id[knife]==2036
        # Select the specific knife with ID 2036
    
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==143
        # Select the dishwasher with ID 143
    
        if not visited(knife):
            get_knife_from_dishwasher(dishwasher, knife)
            # Obtain the knife from the dishwasher if it hasnt been visited yet

        peel_and_slice_banana(banana, knife, cutting_board)
        # Execute the peel and slicing operation
#goal_representation_end

##############################
From agent.py->reset_goal
behavior peel_and_slice_banana(banana:item, knife:item, board:item):
    body:
        achieve_once on(banana, board) 
        # Place the banana on the cutting board
        achieve cut(banana) 
        # Slice the banana

behavior get_knife_from_dishwasher(dishwasher:item, knife:item):
    body:
        achieve_once open(dishwasher)
        # Open the dishwasher
        achieve_once inhand(knife) 
        # Grab the knife from the dishwasher

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana to be peeled and sliced
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife) and id[knife]==2036
        # Select the specific knife with ID 2036
    
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==143
        # Select the dishwasher with ID 143
    
        if not visited(knife):
            get_knife_from_dishwasher(dishwasher, knife)
            # Obtain the knife from the dishwasher if it hasnt been visited yet

        peel_and_slice_banana(banana, knife, cutting_board)
        # Execute the peel and slicing operation
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2036)walk_executor(food_banana_2045)cut_executor(food_banana_2045)
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2045)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_banana_2045. 
##############################
From agent.py
cut_executor(food_banana_2045)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_banana_2045. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_oil_2102_around_stove_2090(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_oil_in_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)
        # Ensure the oil is placed inside the frying pan

behavior heat_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once closed(stove)
        # Close stove before heating
        achieve_once inside(pan, stove)
        # Place the frying pan on the stove
        achieve_once is_on(stove)
        # Turn on the stove to heat the pan

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Bind an instance of oil
        
        bind pan: item where:
            is_fryingpan(pan)
        # Bind an instance of a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Bind an instance of a stove

        heat_oil_in_pan(oil, pan) 
        # Add oil to the pan
        
        heat_pan_on_stove(pan, stove)
        # Heat the pan with the oil on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_oil_in_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)
        # Ensure the oil is placed inside the frying pan

behavior heat_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once closed(stove)
        # Close stove before heating
        achieve_once inside(pan, stove)
        # Place the frying pan on the stove
        achieve_once is_on(stove)
        # Turn on the stove to heat the pan

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Bind an instance of oil
        
        bind pan: item where:
            is_fryingpan(pan)
        # Bind an instance of a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Bind an instance of a stove

        heat_oil_in_pan(oil, pan) 
        # Add oil to the pan
        
        heat_pan_on_stove(pan, stove)
        # Heat the pan with the oil on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)exp(oil_2102, stove_2090)walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(fryingpan_2107)putin_executor(oil_2102, fryingpan_2107)walk_executor(stove_2090)close_executor(stove_2090)open_executor(stove_2090)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)putin_executor(fryingpan_2107, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(fryingpan_2107, stove_2090)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(fryingpan_2107)putin_executor(oil_2102, fryingpan_2107)walk_executor(stove_2090)close_executor(stove_2090)open_executor(stove_2090)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)putin_executor(fryingpan_2107, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(oil_2102)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. 
##############################
From agent.py
grab_executor(oil_2102)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Grabbing oil_2102 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(oil_2102, fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Robot is close to the fryingpan_2107. oil_2102 is close fryingpan_2107. oil_2102 is inside fryingpan_2107. fryingpan_2107 is close oil_2102. oil_2102 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
close_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is closed. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Grabbing fryingpan_2107 by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. 
##############################
From agent.py
putin_executor(fryingpan_2107, stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. fryingpan_2107 is inside stove_2090. stove_2090 is close fryingpan_2107. fryingpan_2107 is close stove_2090. fryingpan_2107 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_tvstand_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(oil,tvstand_instance)
        else:
            exp(oil,tvstand_instance)
    eff:
        unknown[oil]=False
        close[oil,tvstand_instance]=True
        close[tvstand_instance,oil]=True
    

behavior find_mat_114_around_mat_237(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==237
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_plate_2105_around_wallshelf_191(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(pan:item, oil:item, bananas:item):
    body:
        achieve inside(oil, pan)
        # Ensure oil is inside the pan
        achieve_once is_on(stove) 
        # Turn on the stove

        foreach slice: item:
            if is_food_banana(slice) and cut(slice):
                achieve_once inside(slice, pan)
                # Place banana slices inside the pan

        # Heat until golden brown is achieved
        achieve_once close_char(char, pan)
        achieve_once is_off(stove)
        # Turn off the stove once bananas are golden brown

behavior remove_and_drain(pan:item, plate:item):
    body:
        foreach slice: item:
            if is_food_banana(slice) and inside(slice, pan):
                achieve_once on(slice, plate)
                # Move banana slices onto the plate to drain

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind oil: item where:
            is_oil(oil)
        bind plate: item where:
            is_plate(plate)
        
        foreach bananas: item:
            if is_food_banana(bananas) and cut(bananas):
                fry_bananas(pan, oil, bananas)
        
        remove_and_drain(pan, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>, Variable<oil: item>, Variable<bananas: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2102_around_tvstand_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(oil,tvstand_instance)
        else:
            exp(oil,tvstand_instance)
    eff:
        unknown[oil]=False
        close[oil,tvstand_instance]=True
        close[tvstand_instance,oil]=True
    

behavior find_plate_2105_around_wallshelf_191(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

#goal_representation
behavior fry_bananas(stove:item, pan:item, oil:item, bananas:item):
    body:
        achieve inside(oil, pan)
        # Ensure oil is inside the pan
        achieve_once is_on(stove) 
        # Turn on the stove

        foreach slice: item:
            if is_food_banana(slice) and cut(slice):
                achieve_once inside(slice, pan)
                # Place banana slices inside the pan

        # Heat until golden brown is achieved
        achieve_once close_char(char, pan)
        achieve_once is_off(stove)
        # Turn off the stove once bananas are golden brown

behavior remove_and_drain(pan:item, plate:item):
    body:
        foreach slice: item:
            if is_food_banana(slice) and inside(slice, pan):
                achieve_once on(slice, plate)
                # Move banana slices onto the plate to drain

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind pan: item where:
            is_fryingpan(pan)
        bind oil: item where:
            is_oil(oil)
        bind plate: item where:
            is_plate(plate)
        
        foreach bananas: item:
            if is_food_banana(bananas) and cut(bananas):
                fry_bananas(stove, pan, oil, bananas)
        
        remove_and_drain(pan, plate)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fry_bananas(stove:item, pan:item, oil:item, bananas:item):
    body:
        achieve inside(oil, pan)
        # Ensure oil is inside the pan
        achieve_once is_on(stove) 
        # Turn on the stove

        foreach slice: item:
            if is_food_banana(slice) and cut(slice):
                achieve_once inside(slice, pan)
                # Place banana slices inside the pan

        # Heat until golden brown is achieved
        achieve_once close_char(char, pan)
        achieve_once is_off(stove)
        # Turn off the stove once bananas are golden brown

behavior remove_and_drain(pan:item, plate:item):
    body:
        foreach slice: item:
            if is_food_banana(slice) and inside(slice, pan):
                achieve_once on(slice, plate)
                # Move banana slices onto the plate to drain

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind pan: item where:
            is_fryingpan(pan)
        bind oil: item where:
            is_oil(oil)
        bind plate: item where:
            is_plate(plate)
        
        foreach bananas: item:
            if is_food_banana(bananas) and cut(bananas):
                fry_bananas(stove, pan, oil, bananas)
        
        remove_and_drain(pan, plate)
##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2045)grab_executor(food_banana_2045)walk_executor(fryingpan_2107)putin_executor(food_banana_2045, fryingpan_2107)switchoff_executor(stove_2090)walk_executor(wallshelf_191)exp(plate_2105, wallshelf_191)walk_executor(food_banana_2045)grab_executor(food_banana_2045)walk_executor(plate_2105)put_executor(food_banana_2045, plate_2105)
##############################
From agent.py
walk_executor(food_banana_2045)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_banana_2045. 
##############################
From agent.py
grab_executor(food_banana_2045)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_banana_2045. Grabbing food_banana_2045 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the food_banana_2045. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_banana_2045, fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the food_banana_2045. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_banana_2045 is close fryingpan_2107. food_banana_2045 is inside fryingpan_2107. fryingpan_2107 is close food_banana_2045. food_banana_2045 released by left hand. 
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the food_banana_2045. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned off. 
##############################
From agent.py
walk_executor(wallshelf_191)
Robot find: Robot is close to the knife_2036. Robot is close to the wallshelf_191. 
##############################
From agent.py
exp(plate_2105, wallshelf_191)
Fail to find plate_2105 around wallshelf_191. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fryingpan_2107)switchoff_executor(stove_2090)walk_executor(wallshelf_190)exp(plate_2105, wallshelf_190)walk_executor(food_banana_2045)grab_executor(food_banana_2045)walk_executor(plate_2105)put_executor(food_banana_2045, plate_2105)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned off. 
##############################
From agent.py
walk_executor(wallshelf_190)
Robot find: Robot is close to the knife_2036. Robot is close to the wallshelf_190. 
##############################
From agent.py
exp(plate_2105, wallshelf_190)
Fail to find plate_2105 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fryingpan_2107)switchoff_executor(stove_2090)walk_executor(wallshelf_301)exp(plate_2105, wallshelf_301)walk_executor(food_banana_2045)grab_executor(food_banana_2045)walk_executor(plate_2105)put_executor(food_banana_2045, plate_2105)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned off. 
##############################
From agent.py
walk_executor(wallshelf_301)
Robot find: towel_rack_299, towel_rack_300, drawing_296, Robot is close to the knife_2036. Robot is close to the wallshelf_301. 
##############################
From agent.py
exp(plate_2105, wallshelf_301)
Fail to find plate_2105 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fryingpan_2107)switchoff_executor(stove_2090)walk_executor(wallshelf_187)exp(plate_2105, wallshelf_187)walk_executor(food_banana_2045)grab_executor(food_banana_2045)walk_executor(plate_2105)put_executor(food_banana_2045, plate_2105)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned off. 
##############################
From agent.py
walk_executor(wallshelf_187)
Robot find: Robot is close to the knife_2036. Robot is close to the wallshelf_187. 
##############################
From agent.py
exp(plate_2105, wallshelf_187)
Fail to find plate_2105 around wallshelf_187. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fryingpan_2107)switchoff_executor(stove_2090)walk_executor(table_193)exp(plate_2105, table_193)walk_executor(food_banana_2045)grab_executor(food_banana_2045)walk_executor(plate_2105)put_executor(food_banana_2045, plate_2105)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned off. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the knife_2036. Robot is close to the table_193. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_2105 ?
Answer: Robot, to find "plate_2105", go to "dining_room_1". Once you enter, locate "table_127". "Plate_2105" is on "table_127", so check the surface of the table to find and retrieve it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining room. Locate the dishwasher, labeled dishwasher_143. Open the dishwasher_143, and inside you will find knife_2036.
Robot, to find "plate_2105", go to "dining_room_1". Once you enter, locate "table_127". "Plate_2105" is on "table_127", so check the surface of the table to find and retrieve it.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_banana_2045 around fridge_140.
Action 5: Grab food_banana_2045.
Action 6: Walk to cutting_board_2080.
Action 7: Put food_banana_2045 on cutting_board_2080.
Action 8: Walk to knifeblock_52.
Action 9: look for knife_2036 around knifeblock_52.
Action 10: Walk to tablelamp_236.
Action 11: look for knife_2036 around tablelamp_236.
Action 12: Walk to kitchen_counter_132.
Action 13: look for knife_2036 around kitchen_counter_132.
Action 14: Walk to cupboard_130.
Action 15: look for knife_2036 around cupboard_130.
Action 16: Walk to cupboard_131.
Action 17: Open cupboard_131.
Action 18: look for knife_2036 around cupboard_131.
Action 19: Walk to oven_141.
Action 20: Open oven_141.
Action 21: look for knife_2036 around oven_141.
Action 22: Walk to dishwasher_143.
Action 23: Open dishwasher_143.
Action 24: look for knife_2036 around dishwasher_143.
Action 25: Grab knife_2036.
Action 26: Walk to food_banana_2045.
Action 27: Cut food_banana_2045.
Action 28: Walk to stove_2090.
Action 29: Open stove_2090.
Action 30: look for fryingpan_2107 around stove_2090.
Action 31: Walk to oil_2102.
Action 32: Grab oil_2102.
Action 33: Walk to fryingpan_2107.
Action 34: Put oil_2102 into fryingpan_2107.
Action 35: Walk to stove_2090.
Action 36: Close stove_2090.
Action 37: Open stove_2090.
Action 38: Walk to fryingpan_2107.
Action 39: Grab fryingpan_2107.
Action 40: Walk to stove_2090.
Action 41: Put fryingpan_2107 into stove_2090.
Action 42: Switch on stove_2090.
Action 43: Walk to food_banana_2045.
Action 44: Grab food_banana_2045.
Action 45: Walk to fryingpan_2107.
Action 46: Put food_banana_2045 into fryingpan_2107.
Action 47: Switch off stove_2090.
Action 48: Walk to wallshelf_191.
Action 49: look for plate_2105 around wallshelf_191.
Action 50: Walk to stove_2090.
Action 51: Switch on stove_2090.
Action 52: Walk to fryingpan_2107.
Action 53: Switch off stove_2090.
Action 54: Walk to wallshelf_190.
Action 55: look for plate_2105 around wallshelf_190.
Action 56: Walk to stove_2090.
Action 57: Switch on stove_2090.
Action 58: Walk to fryingpan_2107.
Action 59: Switch off stove_2090.
Action 60: Walk to wallshelf_301.
Action 61: look for plate_2105 around wallshelf_301.
Action 62: Walk to stove_2090.
Action 63: Switch on stove_2090.
Action 64: Walk to fryingpan_2107.
Action 65: Switch off stove_2090.
Action 66: Walk to wallshelf_187.
Action 67: look for plate_2105 around wallshelf_187.
Action 68: Walk to stove_2090.
Action 69: Switch on stove_2090.
Action 70: Walk to fryingpan_2107.
Action 71: Switch off stove_2090.
Action 72: Walk to table_193.

##############################
From agent.py
exp(plate_2105, table_193)
Fail to find plate_2105 around table_193. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fryingpan_2107)switchoff_executor(stove_2090)walk_executor(table_127)exp(plate_2105, table_127)walk_executor(food_banana_2045)grab_executor(food_banana_2045)walk_executor(plate_2105)put_executor(food_banana_2045, plate_2105)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned off. 
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the knife_2036. Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(plate_2105, table_127)
Find plate_2105. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fryingpan_2107)switchoff_executor(stove_2090)walk_executor(food_banana_2045)grab_executor(food_banana_2045)walk_executor(plate_2105)put_executor(food_banana_2045, plate_2105)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
switchoff_executor(stove_2090)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. stove_2090 is turned off. 
##############################
From agent.py
walk_executor(food_banana_2045)
Robot find: Robot is close to the knife_2036. Robot is close to the fryingpan_2107. Robot is close to the food_banana_2045. 
##############################
From agent.py
grab_executor(food_banana_2045)
Robot find: Robot is close to the knife_2036. Robot is close to the fryingpan_2107. Robot is close to the food_banana_2045. Grabbing food_banana_2045 by left hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the knife_2036. Robot is close to the food_banana_2045. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_banana_2045, plate_2105)
Robot find: Robot is close to the knife_2036. Robot is close to the food_banana_2045. Robot is close to the plate_2105. Robot is close to the table_127. food_banana_2045 is close plate_2105. plate_2105 is close food_banana_2045. food_banana_2045 is on plate_2105. food_banana_2045 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_banana_2045)', 'walk_executor(cutting_board_2080)', 'put_executor(food_banana_2045, cutting_board_2080)', 'walk_executor(knifeblock_52)', 'walk_executor(tablelamp_236)', 'walk_executor(kitchen_counter_132)', 'walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(oven_141)', 'open_executor(oven_141)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'grab_executor(knife_2036)', 'walk_executor(food_banana_2045)', 'cut_executor(food_banana_2045)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(oil_2102)', 'grab_executor(oil_2102)', 'walk_executor(fryingpan_2107)', 'putin_executor(oil_2102, fryingpan_2107)', 'walk_executor(stove_2090)', 'close_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(fryingpan_2107)', 'grab_executor(fryingpan_2107)', 'walk_executor(stove_2090)', 'putin_executor(fryingpan_2107, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(food_banana_2045)', 'grab_executor(food_banana_2045)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_banana_2045, fryingpan_2107)', 'switchoff_executor(stove_2090)', 'walk_executor(wallshelf_191)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(fryingpan_2107)', 'switchoff_executor(stove_2090)', 'walk_executor(wallshelf_190)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(fryingpan_2107)', 'switchoff_executor(stove_2090)', 'walk_executor(wallshelf_301)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(fryingpan_2107)', 'switchoff_executor(stove_2090)', 'walk_executor(wallshelf_187)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(fryingpan_2107)', 'switchoff_executor(stove_2090)', 'walk_executor(table_193)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(fryingpan_2107)', 'switchoff_executor(stove_2090)', 'walk_executor(table_127)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(fryingpan_2107)', 'switchoff_executor(stove_2090)', 'walk_executor(food_banana_2045)', 'grab_executor(food_banana_2045)', 'walk_executor(plate_2105)', 'put_executor(food_banana_2045, plate_2105)']
Time info:
Time consume: 364 seconds
Exp_helper query times: 2
Guidance query times: 0
library scale: 131
goal generate times: 8
goal correct times: 1
action_num: 72

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
