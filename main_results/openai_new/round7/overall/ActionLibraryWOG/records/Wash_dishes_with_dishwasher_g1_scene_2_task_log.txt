From agent.py
Reset goals: The sub-goals are: 
['1. Locate all the bowls and plates in need of washing.', '2. Wash the bowls and plates using the dishwasher.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_sink_133(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(plate,sink_instance)
        else:
            exp(plate,sink_instance)
    eff:
        unknown[plate]=False
        close[plate,sink_instance]=True
        close[sink_instance,plate]=True
    

behavior find_bowl_2095_around_sink_133(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl_or_plate(dish:item):
    # Function to check if the item is a bowl or a plate
    symbol is_bowl_or_plate = is_bowl(dish) or is_plate(dish)
    return is_bowl_or_plate

behavior locate_dishes():
    body:
        if exists dish: item : (is_bowl_or_plate(dish) and dirty(dish)):
            # If we know of any bowls or plates that need washing, approach them directly
            bind dirty_dish: item where:
                is_bowl_or_plate(dirty_dish) and dirty(dirty_dish)
            achieve close_char(char, dirty_dish)
        else:
            # If no bowls or plates are found, explore to locate them
            foreach o: item:
                if is_bowl_or_plate(o) and not visited(o):
                    observe(o, "Check if the bowl or plate is dirty")

behavior __goal__():
    body:
        locate_dishes()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_bowl_or_plate(dish:item):
    # Function to check if the item is a bowl or a plate
    symbol is_bowl_or_plate = is_bowl(dish) or is_plate(dish)
    return is_bowl_or_plate

behavior locate_dishes():
    body:
        if exists dish: item : (is_bowl_or_plate(dish) and dirty(dish)):
            # If we know of any bowls or plates that need washing, approach them directly
            bind dirty_dish: item where:
                is_bowl_or_plate(dirty_dish) and dirty(dirty_dish)
            achieve close_char(char, dirty_dish)
        else:
            # If no bowls or plates are found, explore to locate them
            foreach o: item:
                if is_bowl_or_plate(o) and not visited(o):
                    observe(o, "Check if the bowl or plate is dirty")

behavior __goal__():
    body:
        locate_dishes()

##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(bowl_2095, sink_133)walk_executor(bowl_2095)obs(bowl_2095, Check if the bowl or plate is dirty)walk_executor(sink_133)exp(bowl_2096, sink_133)walk_executor(bowl_2096)obs(bowl_2096, Check if the bowl or plate is dirty)walk_executor(sink_133)exp(bowl_2097, sink_133)walk_executor(bowl_2097)obs(bowl_2097, Check if the bowl or plate is dirty)walk_executor(sink_133)exp(plate_2105, sink_133)walk_executor(plate_2105)obs(plate_2105, Check if the bowl or plate is dirty)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, pot_54, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(bowl_2095, sink_133)
Fail to find bowl_2095 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(bowl_2095, kitchen_counter_128)walk_executor(bowl_2095)obs(bowl_2095, Check if the bowl or plate is dirty)walk_executor(kitchen_counter_128)exp(bowl_2096, kitchen_counter_128)walk_executor(bowl_2096)obs(bowl_2096, Check if the bowl or plate is dirty)walk_executor(kitchen_counter_128)exp(bowl_2097, kitchen_counter_128)walk_executor(bowl_2097)obs(bowl_2097, Check if the bowl or plate is dirty)walk_executor(cupboard_130)exp(plate_2105, cupboard_130)walk_executor(plate_2105)obs(plate_2105, Check if the bowl or plate is dirty)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(bowl_2095, kitchen_counter_128)
Fail to find bowl_2095 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(bowl_2095, dishwasher_143)walk_executor(bowl_2095)obs(bowl_2095, Check if the bowl or plate is dirty)walk_executor(dishwasher_143)exp(bowl_2096, dishwasher_143)walk_executor(bowl_2096)obs(bowl_2096, Check if the bowl or plate is dirty)walk_executor(dishwasher_143)exp(bowl_2097, dishwasher_143)walk_executor(bowl_2097)obs(bowl_2097, Check if the bowl or plate is dirty)walk_executor(cupboard_131)open_executor(cupboard_131)exp(plate_2105, cupboard_131)walk_executor(plate_2105)obs(plate_2105, Check if the bowl or plate is dirty)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(bowl_2095, dishwasher_143)
Fail to find bowl_2095 around dishwasher_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(bowl_2095, cupboard_131)walk_executor(bowl_2095)obs(bowl_2095, Check if the bowl or plate is dirty)walk_executor(cupboard_131)exp(bowl_2096, cupboard_131)walk_executor(bowl_2096)obs(bowl_2096, Check if the bowl or plate is dirty)walk_executor(cupboard_131)exp(bowl_2097, cupboard_131)walk_executor(bowl_2097)obs(bowl_2097, Check if the bowl or plate is dirty)walk_executor(kitchen_counter_129)exp(plate_2105, kitchen_counter_129)walk_executor(plate_2105)obs(plate_2105, Check if the bowl or plate is dirty)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(bowl_2095, cupboard_131)
Fail to find bowl_2095 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(bowl_2095, cupboard_130)walk_executor(bowl_2095)obs(bowl_2095, Check if the bowl or plate is dirty)walk_executor(cupboard_130)exp(bowl_2096, cupboard_130)walk_executor(bowl_2096)obs(bowl_2096, Check if the bowl or plate is dirty)walk_executor(cupboard_130)exp(bowl_2097, cupboard_130)walk_executor(bowl_2097)obs(bowl_2097, Check if the bowl or plate is dirty)walk_executor(cupboard_130)exp(plate_2105, cupboard_130)walk_executor(plate_2105)obs(plate_2105, Check if the bowl or plate is dirty)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(bowl_2095, cupboard_130)
Fail to find bowl_2095 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_2110)exp(bowl_2095, computer_2110)walk_executor(bowl_2095)obs(bowl_2095, Check if the bowl or plate is dirty)walk_executor(computer_2110)exp(bowl_2096, computer_2110)walk_executor(bowl_2096)obs(bowl_2096, Check if the bowl or plate is dirty)walk_executor(computer_2110)exp(bowl_2097, computer_2110)walk_executor(bowl_2097)obs(bowl_2097, Check if the bowl or plate is dirty)walk_executor(oven_141)open_executor(oven_141)exp(plate_2105, oven_141)walk_executor(plate_2105)obs(plate_2105, Check if the bowl or plate is dirty)
##############################
From agent.py
walk_executor(computer_2110)
Robot find: dvd_player_2000, mouse_2112, chair_2119, keyboard_2111, pillow_195, laser_pointer_2025, mat_201, oil_2005, drawing_196, Robot is close to the table_193. Robot is close to the computer_2110. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2095 ?
Answer: The target item, bowl_2095, is located in dining_room_1. You can find it on table_123. The bowl is situated on top of this table.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, bowl_2095, is located in dining_room_1. You can find it on table_123. The bowl is situated on top of this table.

The actions you have taken:
Action 1: Walk to sink_133.
Action 2: look for bowl_2095 around sink_133.
Action 3: Walk to kitchen_counter_128.
Action 4: look for bowl_2095 around kitchen_counter_128.
Action 5: Walk to dishwasher_143.
Action 6: Open dishwasher_143.
Action 7: look for bowl_2095 around dishwasher_143.
Action 8: Walk to cupboard_131.
Action 9: Open cupboard_131.
Action 10: look for bowl_2095 around cupboard_131.
Action 11: Walk to cupboard_130.
Action 12: look for bowl_2095 around cupboard_130.
Action 13: Walk to computer_2110.

##############################
From agent.py
exp(bowl_2095, computer_2110)
Fail to find bowl_2095 around computer_2110. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(bowl_2095, table_123)walk_executor(bowl_2095)obs(bowl_2095, Check if the bowl or plate is dirty)walk_executor(table_123)exp(bowl_2096, table_123)walk_executor(bowl_2096)obs(bowl_2096, Check if the bowl or plate is dirty)walk_executor(table_123)exp(bowl_2097, table_123)walk_executor(bowl_2097)obs(bowl_2097, Check if the bowl or plate is dirty)walk_executor(table_123)exp(plate_2105, table_123)walk_executor(plate_2105)obs(plate_2105, Check if the bowl or plate is dirty)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(bowl_2095, table_123)
Find bowl_2095. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2095)
##############################
From agent.py
walk_executor(bowl_2095)
Robot find: Robot is close to the table_123. Robot is close to the bowl_2095. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_faucet_134(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==134
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(detergent,faucet_instance)
        else:
            exp(detergent,faucet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,faucet_instance]=True
        close[faucet_instance,detergent]=True
    

behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior load_in_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher) # Make sure the dishwasher is closed
        achieve_once is_on(dishwasher) # Turn on the dishwasher to start washing

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside(sink, dining_room_1)
        # The sink to which the plates and bowls are likely taken from

        bind dishwasher: item where:
            is_dishwasher(dishwasher) and inside(dishwasher, dining_room_1)
        # The identified dishwasher for washing the items

        foreach o: item:
            # Load all dirty bowls and plates located inside the dining room sink
            if (is_bowl(o) or is_plate(o)) and inside(o, sink):
                load_in_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher) # Start the washing process in the dishwasher

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room_1; available variables: [Variable<sink: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#goal_representation
 
behavior load_in_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher) # Make sure the dishwasher is closed
        achieve_once is_on(dishwasher) # Turn on the dishwasher to start washing

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Define the dining room to locate the sink and dishwasher

        bind sink: item where:
            is_sink(sink) and inside(sink, dining_room)
        # The sink to which the plates and bowls are likely taken from

        bind dishwasher: item where:
            is_dishwasher(dishwasher) and inside(dishwasher, dining_room)
        # The identified dishwasher for washing the items

        foreach o: item:
            # Load all dirty bowls and plates located inside the dining room sink
            if (is_bowl(o) or is_plate(o)) and inside(o, sink):
                load_in_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher) # Start the washing process in the dishwasher

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior load_in_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher) # Make sure the dishwasher is closed
        achieve_once is_on(dishwasher) # Turn on the dishwasher to start washing

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Define the dining room to locate the sink and dishwasher

        bind sink: item where:
            is_sink(sink) and inside(sink, dining_room)
        # The sink to which the plates and bowls are likely taken from

        bind dishwasher: item where:
            is_dishwasher(dishwasher) and inside(dishwasher, dining_room)
        # The identified dishwasher for washing the items

        foreach o: item:
            # Load all dirty bowls and plates located inside the dining room sink
            if (is_bowl(o) or is_plate(o)) and inside(o, sink):
                load_in_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher) # Start the washing process in the dishwasher

##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. 
##############################
From agent.py
close_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. dishwasher_143 is closed. 
##############################
From agent.py
switchon_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. dishwasher_143 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to locate and load all dirty bowls and plates into the dishwasher before closing and starting it. Currently, the bowl_2095 has not been placed inside the dishwasher. You must place it inside the dishwasher, then close the dishwasher and switch it on to complete the sub-task.
##############################
From agent.py
Human Instruction: You need to locate and load all dirty bowls and plates into the dishwasher before closing and starting it. Currently, the bowl_2095 has not been placed inside the dishwasher. You must place it inside the dishwasher, then close the dishwasher and switch it on to complete the sub-task.

The actions you have taken:
Action 1: Walk to sink_133.
Action 2: look for bowl_2095 around sink_133.
Action 3: Walk to kitchen_counter_128.
Action 4: look for bowl_2095 around kitchen_counter_128.
Action 5: Walk to dishwasher_143.
Action 6: Open dishwasher_143.
Action 7: look for bowl_2095 around dishwasher_143.
Action 8: Walk to cupboard_131.
Action 9: Open cupboard_131.
Action 10: look for bowl_2095 around cupboard_131.
Action 11: Walk to cupboard_130.
Action 12: look for bowl_2095 around cupboard_130.
Action 13: Walk to computer_2110.
Action 14: look for bowl_2095 around computer_2110.
Action 15: Walk to table_123.
Action 16: look for bowl_2095 around table_123.
Action 17: Walk to bowl_2095.
Action 18: Walk to dishwasher_143.
Action 19: Close dishwasher_143.
Action 20: Switch on dishwasher_143.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_129(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_bowl_2096_around_cutting_board_2080(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_detergent_2108_around_cleaning_solution_2098(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cleaning_solution_instance:item where:
            is_cleaning_solution(cleaning_solution_instance) and id[cleaning_solution_instance]==2098
        achieve close_char(char,cleaning_solution_instance)
        if can_open(cleaning_solution_instance):
            achieve_once open(cleaning_solution_instance)
            exp(detergent,cleaning_solution_instance)
        else:
            exp(detergent,cleaning_solution_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cleaning_solution_instance]=True
        close[cleaning_solution_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_and_start_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)
        # Load the item into the dishwasher
        achieve_once closed(dishwasher) 
        # Ensure the dishwasher is closed
        achieve_once is_on(dishwasher)
        # Start the dishwasher

behavior handle_bowl(bowl:item, dishwasher:item):
    body:
        achieve_once inside(bowl, dishwasher)
        # Load the bowl into the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==143
        # Select the dishwasher with the specified ID
        
        bind item_missing: item where:
            id[item_missing]==2095
        # Identify the missing item (bowl)

        bind bowl_2095: item where:
            id[bowl_2095]==2095
        # Bind bowl_2095 to ensure its presence

        handle_bowl(bowl_2095, dishwasher) 
        # Load bowl_2095 into the dishwasher if not present
        load_and_start_dishwasher(bowl_2095, dishwasher)
        # Ensures bowl_2095 gets cleaned with the dishwasher

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior load_and_start_dishwasher(item:item, dishwasher:item):
    body:
        achieve_once inside(item, dishwasher)
        # Load the item into the dishwasher
        achieve_once closed(dishwasher) 
        # Ensure the dishwasher is closed
        achieve_once is_on(dishwasher)
        # Start the dishwasher

behavior handle_bowl(bowl:item, dishwasher:item):
    body:
        achieve_once inside(bowl, dishwasher)
        # Load the bowl into the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==143
        # Select the dishwasher with the specified ID
        
        bind item_missing: item where:
            id[item_missing]==2095
        # Identify the missing item (bowl)

        bind bowl_2095: item where:
            id[bowl_2095]==2095
        # Bind bowl_2095 to ensure its presence

        handle_bowl(bowl_2095, dishwasher) 
        # Load bowl_2095 into the dishwasher if not present
        load_and_start_dishwasher(bowl_2095, dishwasher)
        # Ensures bowl_2095 gets cleaned with the dishwasher

##############################
From agent.py-> find a plan in act()
switchoff_executor(dishwasher_143)open_executor(dishwasher_143)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(dishwasher_143)putin_executor(bowl_2095, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
switchoff_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. dishwasher_143 is turned off. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
walk_executor(bowl_2095)
Robot find: Robot is close to the table_123. Robot is close to the bowl_2095. 
##############################
From agent.py
grab_executor(bowl_2095)
Robot find: Robot is close to the table_123. Robot is close to the bowl_2095. Grabbing bowl_2095 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the bowl_2095. Robot is close to the knife_2036. Robot is close to the dishwasher_143. 
##############################
From agent.py
putin_executor(bowl_2095, dishwasher_143)
Robot find: Robot is close to the bowl_2095. Robot is close to the knife_2036. Robot is close to the dishwasher_143. bowl_2095 is inside dishwasher_143. bowl_2095 is close dishwasher_143. dishwasher_143 is close bowl_2095. bowl_2095 released by right hand. 
##############################
From agent.py
close_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. dishwasher_143 is closed. 
##############################
From agent.py
switchon_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. dishwasher_143 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
wash all the bowls and the plates with dishwasher
Action History:
['walk_executor(sink_133)', 'walk_executor(kitchen_counter_128)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(computer_2110)', 'walk_executor(table_123)', 'walk_executor(bowl_2095)', 'walk_executor(dishwasher_143)', 'close_executor(dishwasher_143)', 'switchon_executor(dishwasher_143)', 'switchoff_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'walk_executor(bowl_2095)', 'grab_executor(bowl_2095)', 'walk_executor(dishwasher_143)', 'putin_executor(bowl_2095, dishwasher_143)', 'close_executor(dishwasher_143)', 'switchon_executor(dishwasher_143)']
Time info:
Time consume: 186 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 40
goal generate times: 3
goal correct times: 1
action_num: 21

Task complete rate:
Keystate: k1 - Requires: 14 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
