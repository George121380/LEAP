From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat the oil in a pan.', '3. Fry the banana slices in the hot oil until golden brown.', '4. Remove the fried bananas and let them drain on a paper towel.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
def on_cutting_board(banana:item):
    # Function to check if a banana is on a cutting board
    symbol on_cutting_board=exists board: item : (is_cutting_board(board) and on(banana, board))
    return on_cutting_board

behavior place_banana_on_board(banana:item, board:item):
    body:
        achieve_once on(banana, board) # Place the banana on the cutting board

behavior peel_and_slice_banana(banana:item):
    body:
        if not cut(banana): # Check if the banana has not been cut
            achieve_once cut(banana) # Perform the action of slicing the banana

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana to peel and slice
        if not on_cutting_board(banana):
            bind cutting_board: item where:
                is_cutting_board(cutting_board)
            # Select a cutting board
            place_banana_on_board(banana, cutting_board)
        # Ensure that the banana is on a cutting board before slicing
        peel_and_slice_banana(banana)
#goal_representation_end

##############################
From agent.py->reset_goal
def on_cutting_board(banana:item):
    # Function to check if a banana is on a cutting board
    symbol on_cutting_board=exists board: item : (is_cutting_board(board) and on(banana, board))
    return on_cutting_board

behavior place_banana_on_board(banana:item, board:item):
    body:
        achieve_once on(banana, board) # Place the banana on the cutting board

behavior peel_and_slice_banana(banana:item):
    body:
        if not cut(banana): # Check if the banana has not been cut
            achieve_once cut(banana) # Perform the action of slicing the banana

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana to peel and slice
        if not on_cutting_board(banana):
            bind cutting_board: item where:
                is_cutting_board(cutting_board)
            # Select a cutting board
            place_banana_on_board(banana, cutting_board)
        # Ensure that the banana is on a cutting board before slicing
        peel_and_slice_banana(banana)
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_banana_2011, fridge_289)
Find food_banana_2011. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_banana_2011 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_banana_2011. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(knife_2050, kitchen_counter_230)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
cut_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_150(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_spectacles_2082_around_nightstand_100(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==100
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
behavior heat_oil(oil:item, pan:item, stove:item):
    body:
        achieve_once inside(oil, pan)
        # Pour oil into the pan
        achieve_once on(pan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil for cooking
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove to use
        heat_oil(oil, pan, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior heat_oil(oil:item, pan:item, stove:item):
    body:
        achieve_once inside(oil, pan)
        # Pour oil into the pan
        achieve_once on(pan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil for cooking
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove to use
        heat_oil(oil, pan, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_spectacles_2082_around_desk_357(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(spectacles,desk_instance)
        else:
            exp(spectacles,desk_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,desk_instance]=True
        close[desk_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior fry_banana_slices_in_oil(fryingpan:item, stove:item, food_banana:item):
    body:
        achieve inside(food_banana, fryingpan)
        # Ensures banana slices are in the fryingpan with oil
        achieve is_on(stove)
        # Ensures the stove is on for frying

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the fryingpan
        bind stove: item where:
            is_stove(stove) and on(fryingpan, stove)
        # Select the stove where the fryingpan is located
        bind food_banana: item where:
            is_food_banana(food_banana)
        # Select the banana slices
        fry_banana_slices_in_oil(fryingpan, stove, food_banana)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fry_banana_slices_in_oil(fryingpan:item, stove:item, food_banana:item):
    body:
        achieve inside(food_banana, fryingpan)
        # Ensures banana slices are in the fryingpan with oil
        achieve is_on(stove)
        # Ensures the stove is on for frying

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the fryingpan
        bind stove: item where:
            is_stove(stove) and on(fryingpan, stove)
        # Select the stove where the fryingpan is located
        bind food_banana: item where:
            is_food_banana(food_banana)
        # Select the banana slices
        fry_banana_slices_in_oil(fryingpan, stove, food_banana)
##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_banana_2011 is inside fryingpan_2083. food_banana_2011 is close fryingpan_2083. fryingpan_2083 is close food_banana_2011. food_banana_2011 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_dishwasher_1001(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

behavior find_towel_2058_around_cupboard_229(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(towel,cupboard_instance)
        else:
            exp(towel,cupboard_instance)
    eff:
        unknown[towel]=False
        close[towel,cupboard_instance]=True
        close[cupboard_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior remove_fried_bananas(fried_banana:item, tray:item):
    body:
        achieve_once on(fried_banana, tray)
        # Remove and place fried bananas on the tray

behavior let_drain_on_paper_towel(tray:item, paper_towel:item):
    body:
        achieve_once on(tray, paper_towel)
        # Allow the fried bananas to drain on a paper towel

behavior __goal__():
    body:
        bind fried_banana: item where:
            is_food_banana(fried_banana)
        # Bind the identified fried banana
        
        bind tray: item where:
            is_tray(tray)
        # Bind the tray to place the fried bananas
        
        bind paper_towel: item where:
            is_towel(paper_towel)
        # Bind a paper towel for draining the bananas

        remove_fried_bananas(fried_banana, tray)
        let_drain_on_paper_towel(tray, paper_towel)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior remove_fried_bananas(fried_banana:item, tray:item):
    body:
        achieve_once on(fried_banana, tray)
        # Remove and place fried bananas on the tray

behavior let_drain_on_paper_towel(tray:item, paper_towel:item):
    body:
        achieve_once on(tray, paper_towel)
        # Allow the fried bananas to drain on a paper towel

behavior __goal__():
    body:
        bind fried_banana: item where:
            is_food_banana(fried_banana)
        # Bind the identified fried banana
        
        bind tray: item where:
            is_tray(tray)
        # Bind the tray to place the fried bananas
        
        bind paper_towel: item where:
            is_towel(paper_towel)
        # Bind a paper towel for draining the bananas

        remove_fried_bananas(fried_banana, tray)
        let_drain_on_paper_towel(tray, paper_towel)
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(tray_296, dishwasher_1001)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(tray_296)put_executor(food_banana_2011, tray_296)walk_executor(cupboard_229)open_executor(cupboard_229)exp(towel_2056, cupboard_229)walk_executor(tray_296)grab_executor(tray_296)walk_executor(towel_2056)put_executor(tray_296, towel_2056)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the knife_2050. Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the knife_2050. Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(tray_296, dishwasher_1001)
Fail to find tray_296 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)exp(tray_296, oven_295)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(tray_296)put_executor(food_banana_2011, tray_296)walk_executor(bathroom_counter_41)exp(towel_2056, bathroom_counter_41)walk_executor(tray_296)grab_executor(tray_296)walk_executor(towel_2056)put_executor(tray_296, towel_2056)
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the knife_2050. Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the knife_2050. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
exp(tray_296, oven_295)
Find tray_296. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(tray_296)put_executor(food_banana_2011, tray_296)walk_executor(bathroom_counter_41)exp(towel_2056, bathroom_counter_41)walk_executor(tray_296)grab_executor(tray_296)walk_executor(towel_2056)put_executor(tray_296, towel_2056)
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(tray_296)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the tray_296. Robot is close to the oven_295. 
##############################
From agent.py
put_executor(food_banana_2011, tray_296)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the tray_296. Robot is close to the oven_295. food_banana_2011 is close tray_296. tray_296 is close food_banana_2011. food_banana_2011 is on tray_296. food_banana_2011 released by left hand. 
##############################
From agent.py
walk_executor(bathroom_counter_41)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the knife_2050. Robot is close to the bathroom_counter_41. 
##############################
From agent.py
exp(towel_2056, bathroom_counter_41)
Fail to find towel_2056 around bathroom_counter_41. 
##############################
From agent.py-> find a plan in act()
walk_executor(towel_rack_32)exp(towel_2056, towel_rack_32)walk_executor(tray_296)grab_executor(tray_296)walk_executor(towel_2056)put_executor(tray_296, towel_2056)
##############################
From agent.py
walk_executor(towel_rack_32)
Robot find: towel_2057, Robot is close to the knife_2050. Robot is close to the towel_rack_32. 
##############################
From agent.py
exp(towel_2056, towel_rack_32)
Fail to find towel_2056 around towel_rack_32. 
##############################
From agent.py-> find a plan in act()
walk_executor(tray_296)grab_executor(tray_296)walk_executor(towel_2057)put_executor(tray_296, towel_2057)
##############################
From agent.py
walk_executor(tray_296)
Robot find: Robot is close to the knife_2050. Robot is close to the tray_296. Robot is close to the oven_295. 
##############################
From agent.py
grab_executor(tray_296)
Robot find: Robot is close to the knife_2050. Robot is close to the tray_296. Robot is close to the oven_295. Grabbing tray_296 by left hand. 
##############################
From agent.py
walk_executor(towel_2057)
Robot find: Robot is close to the knife_2050. Robot is close to the tray_296. Robot is close to the towel_rack_32. Robot is close to the towel_2057. 
##############################
From agent.py
put_executor(tray_296, towel_2057)
Robot find: Robot is close to the knife_2050. Robot is close to the tray_296. Robot is close to the towel_rack_32. Robot is close to the towel_2057. towel_2057 is close tray_296. tray_296 is close towel_2057. tray_296 is on towel_2057. tray_296 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(kitchen_counter_230)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_banana_2011)', 'cut_executor(food_banana_2011)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_banana_2011, fryingpan_2083)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(tray_296)', 'put_executor(food_banana_2011, tray_296)', 'walk_executor(bathroom_counter_41)', 'walk_executor(towel_rack_32)', 'walk_executor(tray_296)', 'grab_executor(tray_296)', 'walk_executor(towel_2057)', 'put_executor(tray_296, towel_2057)']
Time info:
Time consume: 149 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 44
goal generate times: 4
goal correct times: 0
action_num: 37

Task complete rate:
Keystate: k1 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
