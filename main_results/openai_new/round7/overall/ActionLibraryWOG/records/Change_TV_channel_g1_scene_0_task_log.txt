From agent.py
Reset goals: The sub-goals are: 
['Turn on the TV using the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_television_410(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==410
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(remote_control,television_instance)
        else:
            exp(remote_control,television_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,television_instance]=True
        close[television_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv(tv:item, remote:item):
    body:
        achieve_once close_char(char, tv)
        if has_switch(tv):
            if exists remote_control: item : (is_remote_control(remote_control) and close(remote_control, tv)):
                achieve_once inhand(remote_control)
                achieve is_on(tv)
                # Turn on the TV using the remote control

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        bind remote: item where:
            is_remote_control(remote)
        turn_on_tv(tv, remote)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: remote_control; available variables: [Variable<tv: item>, Variable<remote: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2052_around_television_410(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==410
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(remote_control,television_instance)
        else:
            exp(remote_control,television_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,television_instance]=True
        close[television_instance,remote_control]=True
    

#goal_representation
 
behavior turn_on_tv(tv:item, remote_control:item):
    body:
        achieve_once close_char(char, tv)
        if has_switch(tv):
            if exists remote_control: item : (is_remote_control(remote_control) and close(remote_control, tv)):
                achieve_once inhand(remote_control)
                achieve is_on(tv)
                # Turn on the TV using the remote control

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        bind remote_control: item where:
            is_remote_control(remote_control)
        turn_on_tv(tv, remote_control)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable remote_control already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2052_around_television_410(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==410
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(remote_control,television_instance)
        else:
            exp(remote_control,television_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,television_instance]=True
        close[television_instance,remote_control]=True
    

#goal_representation

behavior turn_on_tv(tv:item, remote:item):
    body:
        achieve_once close_char(char, tv)
        if has_switch(tv):
            if close(remote, tv) and is_remote_control(remote):
                achieve_once inhand(remote)
                achieve is_on(tv)

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        bind remote: item where:
            is_remote_control(remote)
        turn_on_tv(tv, remote)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior turn_on_tv(tv:item, remote:item):
    body:
        achieve_once close_char(char, tv)
        if has_switch(tv):
            if close(remote, tv) and is_remote_control(remote):
                achieve_once inhand(remote)
                achieve is_on(tv)

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        bind remote: item where:
            is_remote_control(remote)
        turn_on_tv(tv, remote)

##############################
From agent.py-> find a plan in act()
walk_executor(television_248)
##############################
From agent.py
walk_executor(television_248)
Robot find: wall_clock_249, drawing_241, cd_player_2060, mat_236, drawing_242, drawing_243, phone_247, cd_2075, Robot is close to the television_248. Robot is close to the tvstand_225. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to locate and pick up the remote control to turn on the TV.
##############################
From agent.py
Human Instruction: You need to locate and pick up the remote control to turn on the TV.

The actions you have taken:
Action 1: Walk to television_248.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_353(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_television(remote_control:item):
    body:
        achieve_once inhand(remote_control)
        touch(remote_control)

behavior __goal__():
    body:
        bind television: item where:
            is_television(television)
        bind remote_control: item where:
            is_remote_control(remote_control) and close(remote_control, television)
        turn_on_television(remote_control)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_353(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_remote_control():
    body:
        foreach o: item:
            if is_remote_control(o) and not visited(o):
                observe(o, "Check the location of the remote control")

behavior use_remote_control_to_turn_on_tv(tv: item, remote_control: item):
    body:
        achieve close_char(char, remote_control)
        achieve_once inhand(remote_control)
        achieve close_char(char, tv)
        achieve is_on(tv)

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv) and close_char(char, tv)
        
        if exists remote_control: item : (is_remote_control(remote_control) and close_char(char, remote_control)):
            # If the remote control is found and close, use it
            bind remote_control: item where:
                is_remote_control(remote_control) and close_char(char, remote_control)
            use_remote_control_to_turn_on_tv(tv, remote_control)

        else:
            # Search for the remote control
            find_remote_control()

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_remote_control():
    body:
        foreach o: item:
            if is_remote_control(o) and not visited(o):
                observe(o, "Check the location of the remote control")

behavior use_remote_control_to_turn_on_tv(tv: item, remote_control: item):
    body:
        achieve close_char(char, remote_control)
        achieve_once inhand(remote_control)
        achieve close_char(char, tv)
        achieve is_on(tv)

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv) and close_char(char, tv)
        
        if exists remote_control: item : (is_remote_control(remote_control) and close_char(char, remote_control)):
            # If the remote control is found and close, use it
            bind remote_control: item where:
                is_remote_control(remote_control) and close_char(char, remote_control)
            use_remote_control_to_turn_on_tv(tv, remote_control)

        else:
            # Search for the remote control
            find_remote_control()

##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_353)exp(remote_control_2052, tvstand_353)walk_executor(remote_control_2052)obs(remote_control_2052, Check the location of the remote control)
##############################
From agent.py
walk_executor(tvstand_353)
Robot find: dvd_player_2061, mat_401, drawing_400, Robot is close to the tvstand_353. 
##############################
From agent.py
exp(remote_control_2052, tvstand_353)
Fail to find remote_control_2052 around tvstand_353. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Turn on the TV by touching the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_table_355(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(remote_control,table_instance)
        else:
            exp(remote_control,table_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,table_instance]=True
        close[table_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv(remote_control:item):
    body:
        touch(remote_control)
        achieve is_on(television)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control
        bind television: item where:
            is_television(television)
        # Select the television
        
        achieve close_char(char, remote_control)
        # Ensure the character is close to the remote control
        turn_on_tv(remote_control)
        # Use the remote control to turn on the TV

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: television; available variables: [Variable<remote_control: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2052_around_coffee_table_2068(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(remote_control,coffee_table_instance)
        else:
            exp(remote_control,coffee_table_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,coffee_table_instance]=True
        close[coffee_table_instance,remote_control]=True
    

#goal_representation
 
behavior turn_on_tv(remote_control:item, television:item):
    body:
        touch(remote_control)
        achieve is_on(television)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control
        bind television: item where:
            is_television(television)
        # Select the television

        achieve close_char(char, remote_control)
        # Ensure the character is close to the remote control
        turn_on_tv(remote_control, television)
        # Use the remote control to turn on the TV

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_coffee_table_2068(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(remote_control,coffee_table_instance)
        else:
            exp(remote_control,coffee_table_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,coffee_table_instance]=True
        close[coffee_table_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def has_remote_control(obj:item):
    # Function to check if an object is a remote control
    return is_remote_control(obj)

behavior approach_remote_control(remote_control:item):
    body:
        achieve_once close_char(char, remote_control)

behavior touch_remote_control(remote_control:item):
    body:
        touch(remote_control)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        approach_remote_control(remote_control)
        touch_remote_control(remote_control)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_remote_control(obj:item):
    # Function to check if an object is a remote control
    return is_remote_control(obj)

behavior approach_remote_control(remote_control:item):
    body:
        achieve_once close_char(char, remote_control)

behavior touch_remote_control(remote_control:item):
    body:
        touch(remote_control)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        approach_remote_control(remote_control)
        touch_remote_control(remote_control)

##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(remote_control_2052, coffee_table_2068)walk_executor(remote_control_2052)touch_executor(remote_control_2052)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(remote_control_2052, coffee_table_2068)
Fail to find remote_control_2052 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(remote_control_2052, table_355)walk_executor(remote_control_2052)touch_executor(remote_control_2052)
##############################
From agent.py
walk_executor(table_355)
Robot find: headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_404, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
exp(remote_control_2052, table_355)
Find remote_control_2052. 
##############################
From agent.py-> find a plan in act()
walk_executor(remote_control_2052)touch_executor(remote_control_2052)
##############################
From agent.py
walk_executor(remote_control_2052)
Robot find: Robot is close to the couch_352. Robot is close to the remote_control_2052. 
##############################
From agent.py
touch_executor(remote_control_2052)
Robot find: Robot is close to the couch_352. Robot is close to the remote_control_2052. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Turn on the TV by touching the remote control.
Action History:
['walk_executor(television_248)', 'walk_executor(tvstand_353)', 'walk_executor(coffee_table_2068)', 'walk_executor(table_355)', 'walk_executor(remote_control_2052)', 'touch_executor(remote_control_2052)']
Time info:
Time consume: 91 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 136
goal generate times: 5
goal correct times: 2
action_num: 6

Task complete rate:
1
Scene_id: 0
##############################
