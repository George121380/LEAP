From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Put milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2070_around_closetdrawer_122(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(vacuum_cleaner,closetdrawer_instance)
        else:
            exp(vacuum_cleaner,closetdrawer_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,closetdrawer_instance]=True
        close[closetdrawer_instance,vacuum_cleaner]=True
    

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_clean_fish(fish:item, faucet:item):
    body:
        if dirty(fish):
            # If the fish is dirty, proceed to wash it
            achieve_once has_water(fish)
            # Ensure fish is wet for initial cleaning
            wash(fish)
            # Initiate the washing process of the fish

        scrub(fish)
        # Scrub the fish to ensure thorough cleaning

        rinse(fish)
        # Rinse the fish to remove soap and dirt residue

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish based on item category

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to use for washing
        
        wash_and_clean_fish(fish, faucet)
        # Execute the sequence of actions to wash and clean the fish

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_and_clean_fish(fish:item, faucet:item):
    body:
        if dirty(fish):
            # If the fish is dirty, proceed to wash it
            achieve_once has_water(fish)
            # Ensure fish is wet for initial cleaning
            wash(fish)
            # Initiate the washing process of the fish

        scrub(fish)
        # Scrub the fish to ensure thorough cleaning

        rinse(fish)
        # Rinse the fish to remove soap and dirt residue

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish based on item category

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to use for washing
        
        wash_and_clean_fish(fish, faucet)
        # Execute the sequence of actions to wash and clean the fish

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_fish_2021, fridge_289)walk_executor(food_fish_2021)scrub_executor(food_fish_2021)rinse_executor(food_fish_2021)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_fish_2021, fridge_289)
Find food_fish_2021. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2021)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_fish_2021)switchoff_executor(faucet_43)walk_executor(food_fish_2021)scrub_executor(food_fish_2021)rinse_executor(food_fish_2021)
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_fish_2021 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. 
##############################
From agent.py
scrub_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. 
##############################
From agent.py
rinse_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_plate_1000_around_table_355(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Look for milk, turkey, eggs, fish, chicken in the fridge
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge)
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge)
        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge)
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Now move these items from the fridge to the identified table in the dining room
        put_on_table(milk, table)
        put_on_table(turkey, table)
        put_on_table(egg, table)
        put_on_table(fish, table)
        put_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_356_around_window_63(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==63
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(chair,window_instance)
        else:
            exp(chair,window_instance)
    eff:
        unknown[chair]=False
        close[chair,window_instance]=True
        close[window_instance,chair]=True
    

behavior find_bowl_2072_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_plate_1000_around_table_355(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation
 
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge)
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge)
        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge)
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge)
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        put_on_table(milk, table)
        put_on_table(turkey, table)
        put_on_table(egg, table)
        put_on_table(fish, table)
        put_on_table(chicken, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_towel_2057_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior place_food_on_table(table: item):
    body:
        bind fridge: item where:
            is_fridge(fridge)
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)

        place_food_on_table(dining_table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<dining_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_plate_1000_around_table_355(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation

behavior place_food_on_table(table: item):
    body:
        bind fridge: item where:
            is_fridge(fridge)
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and exists dining_room: item : (is_dining_room(dining_room) and inside(dining_table, dining_room))

        place_food_on_table(dining_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'dining_room') at line 5818, column 47.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tray_296_around_table_107(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(tray,table_instance)
        else:
            exp(tray,table_instance)
    eff:
        unknown[tray]=False
        close[tray,table_instance]=True
        close[table_instance,tray]=True
    

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_plate_1000_around_table_355(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation
behavior place_food_on_table(table: item):
    body:
        bind fridge: item where:
            is_fridge(fridge)
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and exists dining_room: item : (is_dining_room(dining_room) and inside(dining_table, dining_room))

        place_food_on_table(dining_table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_plate_1000_around_table_355(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_table(table:item, food:item):
    body:
        achieve_once on(food, table)
        # Place the food on the specified table

def has_food_items_in_fridge(fridge:item):
    # Function to check if the specified food items are present in the fridge
    symbol has_items= exists o: item : ((is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o)) and inside(o, fridge))
    return has_items

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        if has_food_items_in_fridge(fridge):
            # If the food items are present in the fridge, proceed to retrieve and place them on the table
            bind table: item where:
                is_table(table) and is_dining_room(dining_room) and inside(table, dining_room)
            # Select a table in the dining room

            foreach food: item:
                if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)) and inside(food, fridge):
                    place_food_on_table(table, food)
                    # Place all specified food items from the fridge onto the table in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tray_296_around_kitchen_counter_230(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tray,kitchen_counter_instance)
        else:
            exp(tray,kitchen_counter_instance)
    eff:
        unknown[tray]=False
        close[tray,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tray]=True
    

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#goal_representation
 
behavior place_food_on_table(table:item, food:item):
    body:
        achieve_once on(food, table)
        # Place the food on the specified table

def has_food_items_in_fridge(fridge:item):
    # Function to check if the specified food items are present in the fridge
    symbol has_items= exists o: item : ((is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o)) and inside(o, fridge))
    return has_items

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        if has_food_items_in_fridge(fridge):
            # If the food items are present in the fridge, proceed to retrieve and place them on the table
            bind table: item where:
                is_table(table) and inside(table, dining_room)
            # Select a table in the dining room

            foreach food: item:
                if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)) and inside(food, fridge):
                    place_food_on_table(table, food)
                    # Place all specified food items from the fridge onto the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_food_on_table(table:item, food:item):
    body:
        achieve_once on(food, table)
        # Place the food on the specified table

def has_food_items_in_fridge(fridge:item):
    # Function to check if the specified food items are present in the fridge
    symbol has_items= exists o: item : ((is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o)) and inside(o, fridge))
    return has_items

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        if has_food_items_in_fridge(fridge):
            # If the food items are present in the fridge, proceed to retrieve and place them on the table
            bind table: item where:
                is_table(table) and inside(table, dining_room)
            # Select a table in the dining room

            foreach food: item:
                if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)) and inside(food, fridge):
                    place_food_on_table(table, food)
                    # Place all specified food items from the fridge onto the table in the dining room

##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)walk_executor(food_turkey_2040)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(food_turkey_2040, table_226)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: drawing_243, bowl_2071, coffee_filter_2000, drawing_2003, drawing_241, bowl_2072, mat_236, fork_2080, drawing_238, drawing_242, fork_2081, mat_237, Robot is close to the food_fish_2021. Robot is close to the food_chicken_2017. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_chicken_2017, table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_chicken_2017. Robot is close to the table_226. food_chicken_2017 is close table_226. table_226 is close food_chicken_2017. food_chicken_2017 is on table_226. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_egg_2020. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_egg_2020, table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_egg_2020. Robot is close to the table_226. food_egg_2020 is close table_226. table_226 is close food_egg_2020. food_egg_2020 is on table_226. food_egg_2020 released by left hand. 
##############################
From agent.py
walk_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the fridge_289. Grabbing food_turkey_2040 by left hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_turkey_2040, table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_turkey_2040. Robot is close to the table_226. food_turkey_2040 is close table_226. table_226 is close food_turkey_2040. food_turkey_2040 is on table_226. food_turkey_2040 released by left hand. 
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the milk_2043. Grabbing milk_2043 by left hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the milk_2043. Robot is close to the table_226. 
##############################
From agent.py
put_executor(milk_2043, table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the milk_2043. Robot is close to the table_226. milk_2043 is close table_226. table_226 is close milk_2043. milk_2043 is on table_226. milk_2043 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the last item, food_fish_2021, on the table in the dining room to complete the sub-task.
##############################
From agent.py
Human Instruction: You need to put the last item, food_fish_2021, on the table in the dining room to complete the sub-task.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_fish_2021 around fridge_289.
Action 5: Grab food_fish_2021.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Switch on faucet_43.
Action 10: Wash food_fish_2021.
Action 11: Switch off faucet_43.
Action 12: Walk to food_fish_2021.
Action 13: Scrub food_fish_2021.
Action 14: Rinse food_fish_2021.
Action 15: Walk to food_chicken_2017.
Action 16: Grab food_chicken_2017.
Action 17: Walk to table_226.
Action 18: Put food_chicken_2017 on table_226.
Action 19: Walk to food_egg_2020.
Action 20: Grab food_egg_2020.
Action 21: Walk to table_226.
Action 22: Put food_egg_2020 on table_226.
Action 23: Walk to food_turkey_2040.
Action 24: Grab food_turkey_2040.
Action 25: Walk to table_226.
Action 26: Put food_turkey_2040 on table_226.
Action 27: Walk to milk_2043.
Action 28: Grab milk_2043.
Action 29: Walk to table_226.
Action 30: Put milk_2043 on table_226.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_table(food:item, table:item):
    # Define a behavior to place an item on a table
    body:
        achieve_once on(food, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        bind milk: item where:
            is_milk(milk) and inside(milk, fridge_289)
        # Select the milk from the fridge

        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge_289)
        # Select the turkey from the fridge

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge_289)
        # Select the egg from the fridge

        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge_289)
        # Select the fish from the fridge

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge_289)
        # Select the chicken from the fridge

        place_food_on_table(milk, table)
        place_food_on_table(turkey, table)
        place_food_on_table(egg, table)
        place_food_on_table(fish, table)
        place_food_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#goal_representation
 
behavior place_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk) and inside(milk, fridge_289)
        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge_289)
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge_289)
        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge_289)
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge_289)

        place_food_on_table(milk, table)
        place_food_on_table(turkey, table)
        place_food_on_table(egg, table)
        place_food_on_table(fish, table)
        place_food_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fridge_289; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#goal_representation

behavior place_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table)

behavior __goal__():
    body:
        bind fridge_289: item where:
            is_fridge(fridge_289)

        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind milk: item where:
            is_milk(milk) and inside(milk, fridge_289)
        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge_289)
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge_289)
        bind fish: item where:
            is_food_fish(fish) and inside(fish, fridge_289)
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge_289)

        place_food_on_table(milk, table)
        place_food_on_table(turkey, table)
        place_food_on_table(egg, table)
        place_food_on_table(fish, table)
        place_food_on_table(chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        place_food_on_table(milk, table)
        place_food_on_table(turkey, table)
        place_food_on_table(egg, table)
        place_food_on_table(fish, table)
        place_food_on_table(chicken, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#goal_representation
 
behavior place_food_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        place_food_on_table(milk, table)
        place_food_on_table(turkey, table)
        place_food_on_table(egg, table)
        place_food_on_table(fish, table)
        place_food_on_table(chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_food_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        place_food_on_table(milk, table)
        place_food_on_table(turkey, table)
        place_food_on_table(egg, table)
        place_food_on_table(fish, table)
        place_food_on_table(chicken, table)

##############################
From agent.py-> find a plan in act()
put_executor(food_fish_2021, table_226)
##############################
From agent.py
put_executor(food_fish_2021, table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the milk_2043. Robot is close to the table_226. food_fish_2021 is close table_226. table_226 is close food_fish_2021. food_fish_2021 is on table_226. food_fish_2021 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_fish_2021)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_fish_2021)', 'switchoff_executor(faucet_43)', 'walk_executor(food_fish_2021)', 'scrub_executor(food_fish_2021)', 'rinse_executor(food_fish_2021)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(table_226)', 'put_executor(food_chicken_2017, table_226)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(table_226)', 'put_executor(food_egg_2020, table_226)', 'walk_executor(food_turkey_2040)', 'grab_executor(food_turkey_2040)', 'walk_executor(table_226)', 'put_executor(food_turkey_2040, table_226)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(table_226)', 'put_executor(milk_2043, table_226)', 'put_executor(food_fish_2021, table_226)']
Time info:
Time consume: 228 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 143
goal generate times: 6
goal correct times: 2
action_num: 30

Task complete rate:
Keystate: k1 - Requires: 3 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
