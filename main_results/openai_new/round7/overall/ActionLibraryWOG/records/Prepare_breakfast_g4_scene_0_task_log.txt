From agent.py
Reset goals: The sub-goals are: 
['1. Boil the chicken and pasta separately.', '2. Mix the boiled chicken and pasta together.', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
behavior boil_separately(chicken: item, pasta: item, chicken_pot: item, pasta_pot: item, stove: item):
    body:
        achieve_once inside(chicken, chicken_pot)
        # Place the chicken inside the chicken pot
        achieve_once inside(pasta, pasta_pot)
        # Place the pasta inside the pasta pot
        achieve_once on(chicken_pot, stove)
        # Put the chicken pot on the stove
        achieve_once on(pasta_pot, stove)
        # Put the pasta pot on the stove

behavior start_boiling(stove: item):
    body:
        achieve_once is_on(stove)
        # Turn the stove on to start boiling

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken for boiling

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta for boiling

        bind chicken_pot: item where:
            is_pot(chicken_pot)
        # Select a pot for boiling chicken

        bind pasta_pot: item where:
            is_pot(pasta_pot) and chicken_pot = pasta_pot
        # Select a different pot for boiling pasta

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_separately(chicken, pasta, chicken_pot, pasta_pot, stove)
        start_boiling(stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5734, column 47.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2069_around_dishwasher_1001(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

#goal_representation
 
behavior boil_separately(chicken: item, pasta: item, chicken_pot: item, pasta_pot: item, stove: item):
    body:
        achieve_once inside(chicken, chicken_pot)
        # Place the chicken inside the chicken pot
        achieve_once inside(pasta, pasta_pot)
        # Place the pasta inside the pasta pot
        achieve_once on(chicken_pot, stove)
        # Put the chicken pot on the stove
        achieve_once on(pasta_pot, stove)
        # Put the pasta pot on the stove

behavior start_boiling(stove: item):
    body:
        achieve_once is_on(stove)
        # Turn the stove on to start boiling

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken for boiling

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta for boiling

        bind chicken_pot: item where:
            is_pot(chicken_pot)
        # Select a pot for boiling chicken

        bind pasta_pot: item where:
            is_pot(pasta_pot) and chicken_pot = pasta_pot
        # Select a different pot for boiling pasta

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_separately(chicken, pasta, chicken_pot, pasta_pot, stove)
        start_boiling(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5735, column 47.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

#goal_representation
 
behavior boil_separately(chicken: item, pasta: item, chicken_pot: item, pasta_pot: item, stove: item):
    body:
        achieve_once inside(chicken, chicken_pot)
        # Place the chicken inside the chicken pot
        achieve_once inside(pasta, pasta_pot)
        # Place the pasta inside the pasta pot
        achieve_once on(chicken_pot, stove)
        # Put the chicken pot on the stove
        achieve_once on(pasta_pot, stove)
        # Put the pasta pot on the stove

behavior start_boiling(stove: item):
    body:
        achieve_once is_on(stove)
        # Turn the stove on to start boiling

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken for boiling

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta for boiling

        bind chicken_pot: item where:
            is_pot(chicken_pot)
        # Select a pot for boiling chicken

        bind pasta_pot: item where:
            is_pot(pasta_pot) and chicken_pot = pasta_pot
        # Select a different pot for boiling pasta

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_separately(chicken, pasta, chicken_pot, pasta_pot, stove)
        start_boiling(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2069_around_dishwasher_1001(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

#exp_behavior_end

#goal_representation
def is_in_sink(item: item, sink: item):
    # Checks if the specified food item is inside the given sink
    symbol in_sink = exists o: item : (o == item and inside(o, sink))
    return in_sink

def inside_kitchen_pot(item: item):
    # Checks if a pot is located inside the kitchen
    symbol has_kitchen_pot = exists room: item : (is_kitchen(room) and inside(item, room))
    return has_kitchen_pot

behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve inside(pot, sink) # The pot needs to be placed in or filled with water from the sink before use

behavior boil_content(pot: item, stove: item):
    body:
        achieve inside(pot, stove) # Ensure the pot is on the stove to start the boiling process
        achieve is_on(stove) # The stove should be turned on to boil the content in the pot

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)

        bind stove: item where:
            is_stove(stove)

        bind pot: item where:
            is_pot(pot) and inside_kitchen_pot(pot)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        if not is_in_sink(chicken, sink):
            observe(sink, "Check whether the chicken is in the sink")
        if not is_in_sink(pasta, sink):
            observe(sink, "Check whether the pasta is in the sink")

        fill_pot_with_water(pot, sink)
        boil_content(pot, stove)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2069_around_dishwasher_1001(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_chicken_and_pasta(chicken:item, pasta:item, pot1:item, pot2:item, stove:item):
    body:
        achieve_once inside(chicken, pot1)
        achieve_once inside(pasta, pot2)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot1: item where:
            is_pot(pot1)

        bind pot2: item where:
            is_pot(pot2) and id[pot2] = id[pot1]

        bind stove: item where:
            is_stove(stove)
        
        boil_chicken_and_pasta(chicken, pasta, pot1, pot2, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5704, column 39.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2069_around_dishwasher_1001(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

#goal_representation

behavior boil_chicken_and_pasta(chicken:item, pasta:item, pot1:item, pot2:item, stove:item):
    body:
        achieve_once inside(chicken, pot1)
        achieve_once inside(pasta, pot2)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot1: item where:
            is_pot(pot1)

        bind pot2: item where:
            is_pot(pot2) and pot2 = pot1

        bind stove: item where:
            is_stove(stove)

        boil_chicken_and_pasta(chicken, pasta, pot1, pot2, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5722, column 35.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2069_around_dishwasher_1001(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

#goal_representation
 
behavior boil_chicken_and_pasta(chicken:item, pasta:item, pot1:item, pot2:item, stove:item):
    body:
        achieve_once inside(chicken, pot1)
        achieve_once inside(pasta, pot2)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot1: item where:
            is_pot(pot1)

        bind pot2: item where:
            is_pot(pot2) and pot2 = pot1  # Corrected inequality condition

        bind stove: item where:
            is_stove(stove)

        boil_chicken_and_pasta(chicken, pasta, pot1, pot2, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 97 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 34
goal generate times: 3
goal correct times: 2
action_num: 0

Task complete rate:
Keystate: k1 - Requires: 16 steps
Keystate: k2 - Requires: 15 steps
Keystate: k3 - Requires: 11 steps
Keystate: k4 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
