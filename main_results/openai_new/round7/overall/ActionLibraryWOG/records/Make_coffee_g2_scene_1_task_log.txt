From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_kitchen_counter_119(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2049_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve_once is_on(coffee_maker) # Turn on the coffee maker

behavior find_and_prepare_cup(cup:item):
    body:
        if not has_water(cup):
            # Ensure the cup is empty before making coffee
            achieve_once clean(cup)

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once has_water(cup) # Make coffee in the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Find a coffee maker 

        bind cup: item where:
            is_cup(cup)
        # Find a cup

        prepare_coffee_maker(coffee_maker)
        # Prepare the coffee maker for use
        
        find_and_prepare_cup(cup)
        # Find and prepare a cup for the coffee

        make_coffee(coffee_maker, cup)
        # Make coffee using the coffee maker and pour it into the cup
#goal_representation_end

##############################
From agent.py->reset_goal
behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve_once is_on(coffee_maker) # Turn on the coffee maker

behavior find_and_prepare_cup(cup:item):
    body:
        if not has_water(cup):
            # Ensure the cup is empty before making coffee
            achieve_once clean(cup)

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once has_water(cup) # Make coffee in the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Find a coffee maker 

        bind cup: item where:
            is_cup(cup)
        # Find a cup

        prepare_coffee_maker(coffee_maker)
        # Prepare the coffee maker for use
        
        find_and_prepare_cup(cup)
        # Find and prepare a cup for the coffee

        make_coffee(coffee_maker, cup)
        # Make coffee using the coffee maker and pour it into the cup
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)switchon_executor(coffe_maker_130)walk_executor(kitchen_counter_119)exp(cup_2132, kitchen_counter_119)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(cup_2132)switchoff_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned on. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_119)
Fail to find cup_2132 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(cup_2132)switchoff_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(cup_2132, cupboard_117)
Fail to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(cup_2132)switchoff_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Fail to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(toaster_132)open_executor(toaster_132)exp(cup_2132, toaster_132)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(cup_2132)switchoff_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(toaster_132)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the toaster_132. 
##############################
From agent.py
open_executor(toaster_132)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the toaster_132. toaster_132 is opened. 
##############################
From agent.py
exp(cup_2132, toaster_132)
Fail to find cup_2132 around toaster_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)exp(cup_2132, sink_120)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(cup_2132)switchoff_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(sink_120)
Robot find: soap_2126, soap_2010, ice_2024, Robot is close to the sink_120. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(cup_2132, sink_120)
Fail to find cup_2132 around sink_120. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_115)exp(cup_2132, bench_115)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(cup_2132)switchoff_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(bench_115)
Robot find: mat_102, pillow_105, drawing_110, drawing_111, pillow_103, pillow_106, pillow_104, Robot is close to the bench_115. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: Navigate to the dining_room_41. Once there, locate table_114. You will find cup_2132 situated on top of table_114.
Re-decompose: None

##############################
From agent.py
Human Instruction: Navigate to the dining_room_41. Once there, locate table_114. You will find cup_2132 situated on top of table_114.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to kitchen_counter_119.
Action 4: look for cup_2132 around kitchen_counter_119.
Action 5: Walk to cupboard_117.
Action 6: look for cup_2132 around cupboard_117.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for cup_2132 around cupboard_118.
Action 10: Walk to toaster_132.
Action 11: Open toaster_132.
Action 12: look for cup_2132 around toaster_132.
Action 13: Walk to sink_120.
Action 14: look for cup_2132 around sink_120.
Action 15: Walk to bench_115.

##############################
From agent.py
exp(cup_2132, bench_115)
Fail to find cup_2132 around bench_115. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(cup_2132)switchoff_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(table_114)
Robot find: cup_2049, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(cup_2132)switchoff_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
grab_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(cup_2132)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the cup contains coffee made using the coffee maker. The current actions have only involved turning on the coffee maker and washing the cup. You must make the coffee using the coffee maker and pour it into the clean cup.
##############################
From agent.py
Human Instruction: You need to ensure that the cup contains coffee made using the coffee maker. The current actions have only involved turning on the coffee maker and washing the cup. You must make the coffee using the coffee maker and pour it into the clean cup.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to kitchen_counter_119.
Action 4: look for cup_2132 around kitchen_counter_119.
Action 5: Walk to cupboard_117.
Action 6: look for cup_2132 around cupboard_117.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for cup_2132 around cupboard_118.
Action 10: Walk to toaster_132.
Action 11: Open toaster_132.
Action 12: look for cup_2132 around toaster_132.
Action 13: Walk to sink_120.
Action 14: look for cup_2132 around sink_120.
Action 15: Walk to bench_115.
Action 16: look for cup_2132 around bench_115.
Action 17: Walk to table_114.
Action 18: look for cup_2132 around table_114.
Action 19: Walk to cup_2132.
Action 20: Grab cup_2132.
Action 21: Walk to faucet_20.
Action 22: Switch on faucet_20.
Action 23: Wash cup_2132.
Action 24: Switch off faucet_20.
Action 25: Switch on faucet_20.
Action 26: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2111_around_fridge_126(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_coffee_filter_2053_around_oven_127(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(coffee_filter,oven_instance)
        else:
            exp(coffee_filter,oven_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,oven_instance]=True
        close[oven_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(coffee_maker: item, cup: item):
    body:
        achieve clean(cup)
        # Ensure the cup is clean
        achieve_once inhand(cup)
        # Temporarily hold the cup
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is on
        achieve_once has_water(coffee_maker)
        # Make sure the coffee maker has water
        achieve_once inside(coffee_maker, coffee)
        # Ensure coffee is inside the coffee maker
        achieve_once inside(cup, coffee)
        # Pour the coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and is_on(coffee_maker)
        # Select a coffee maker that is turned on
        bind cup: item where:
            is_cup(cup) and clean(cup)
        # Select a cup that is clean
        make_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffee; available variables: [Variable<coffee_maker: item>, Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_sugar_2111_around_fridge_126(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_coffee_filter_2053_around_oven_127(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(coffee_filter,oven_instance)
        else:
            exp(coffee_filter,oven_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,oven_instance]=True
        close[oven_instance,coffee_filter]=True
    

behavior find_food_salt_2109_around_fridge_126(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_salt,fridge_instance)
        else:
            exp(food_salt,fridge_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,fridge_instance]=True
        close[fridge_instance,food_salt]=True
    

#goal_representation
 
behavior make_coffee(coffee_maker: item, cup: item, coffee: item):
    body:
        achieve clean(cup)
        # Ensure the cup is clean
        achieve_once inhand(cup)
        # Temporarily hold the cup
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is on
        achieve_once has_water(coffee_maker)
        # Make sure the coffee maker has water
        achieve_once inside(coffee, coffee_maker)
        # Ensure coffee is inside the coffee maker
        achieve_once inside(cup, coffee)
        # Pour the coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and is_on(coffee_maker)
        # Select a coffee maker that is turned on
        bind cup: item where:
            is_cup(cup) and clean(cup)
        # Select a cup that is clean
        bind coffee: item where:
            # Assume that coffee can be identified and used
            grabbable(coffee)
        make_coffee(coffee_maker, cup, coffee)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_fridge_126(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(coffee_filter,fridge_instance)
        else:
            exp(coffee_filter,fridge_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,fridge_instance]=True
        close[fridge_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once has_water(coffee_maker)
        # Ensure the coffee maker has water
        achieve is_on(coffee_maker)
        # Turn on the coffee maker
        achieve clean(cup)
        # Ensure the cup is clean
        achieve_once inside(char, cup, coffee_maker)
        # Pour coffee into the cup from the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        make_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 3 vs 2. Args: (ObjectConstantExpression<O::char>, VariableExpression<V::cup>, VariableExpression<V::coffee_maker>), Types: (ObjectType<item>, ObjectType<item>)
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2065_around_oven_127(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(coffee_filter,oven_instance)
        else:
            exp(coffee_filter,oven_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,oven_instance]=True
        close[oven_instance,coffee_filter]=True
    

#goal_representation

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once has_water(coffee_maker)
        # Ensure the coffee maker has water
        achieve is_on(coffee_maker)
        # Turn on the coffee maker
        achieve clean(cup)
        # Ensure the cup is clean

        achieve close_char(char, coffee_maker)
        # Approach the coffee maker to interact with it

        achieve_once inside(coffee_maker, cup)
        # Pour coffee into the cup from the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        make_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2111_around_kitchen_counter_123(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_coffee_filter_2065_around_oven_127(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(coffee_filter,oven_instance)
        else:
            exp(coffee_filter,oven_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,oven_instance]=True
        close[oven_instance,coffee_filter]=True
    

behavior find_food_salt_2041_around_fridge_126(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_salt,fridge_instance)
        else:
            exp(food_salt,fridge_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,fridge_instance]=True
        close[fridge_instance,food_salt]=True
    

#exp_behavior_end

#goal_representation
 
def make_coffee(cup: item, coffee_maker: item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Make coffee in the coffee maker and pour it into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Select coffee maker with ID 130
        
        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup with ID 2132

        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on before making coffee

        achieve clean(cup)
        # Ensure the cup is clean before using it

        make_coffee(cup, coffee_maker)
        # Make and pour coffee from the coffee maker into the cup

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5405, column 9.
Expected one of: 
	* _NEWLINE
	* AT
	* AMPERSAND
	* __ANON_4
	* OR
	* __ANON_3
	* MINUS
	* RSHIFT
	* __ANON_1
	* __ANON_5
	* MORETHAN
	* LESSTHAN
	* __ANON_7
	* IF
	* __ANON_6
	* COMMA
	* VBAR
	* AND
	* __ANON_8
	* __ANON_2
	* PERCENT
	* NOT_EQ
	* LESS_EQ
	* PLUS
	* CIRCUMFLEX
	* GREATER_EQ
	* DOUBLE_EQUAL
	* SLASH
	* EQUAL
	* FLOORDIV
	* __ANON_0
	* LSHIFT
	* STAR
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_sugar_2111_around_fridge_126(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_coffee_filter_2053_around_oven_127(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(coffee_filter,oven_instance)
        else:
            exp(coffee_filter,oven_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,oven_instance]=True
        close[oven_instance,coffee_filter]=True
    

#goal_representation
 
behavior make_coffee(cup:item, coffee_maker:item):
    body:
        # Ensures coffee is made using the coffee maker and poured into the cup
        achieve_once inside(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Select coffee maker with ID 130

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup with ID 2132

        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on before making coffee

        achieve clean(cup)
        # Ensure the cup is clean before using it

        make_coffee(cup, coffee_maker)
        # Make and pour coffee from the coffee maker into the cup

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_dishwasher_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_brewed(coffee_maker:item):
    symbol coffee_brewed=exists cup: item : (is_cup(cup) and close(cup, coffee_maker))
    return coffee_brewed

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once is_on(coffee_maker)
        achieve_once clean(cup)
        achieve_once close_char(char, coffee_maker)

behavior pour_coffee(cup:item, coffee_maker:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
            
        bind cup: item where:
            is_cup(cup)
        
        # Ensure coffee is brewed and transferred to the cup
        make_coffee(coffee_maker, cup)
        
        if not is_coffee_brewed(coffee_maker):
            # if no coffee is brewed yet, proceed to do it
            achieve_once close_char(char, coffee_maker)
        
        pour_coffee(cup, coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_coffee_brewed(coffee_maker:item):
    symbol coffee_brewed=exists cup: item : (is_cup(cup) and close(cup, coffee_maker))
    return coffee_brewed

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once is_on(coffee_maker)
        achieve_once clean(cup)
        achieve_once close_char(char, coffee_maker)

behavior pour_coffee(cup:item, coffee_maker:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
            
        bind cup: item where:
            is_cup(cup)
        
        # Ensure coffee is brewed and transferred to the cup
        make_coffee(coffee_maker, cup)
        
        if not is_coffee_brewed(coffee_maker):
            # if no coffee is brewed yet, proceed to do it
            achieve_once close_char(char, coffee_maker)
        
        pour_coffee(cup, coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the coffee is made using the coffee maker and poured into the clean cup. After washing the cup, you have turned on the coffee maker and brought the cup close, but you have not completed brewing or transferring the coffee to the cup yet.
##############################
From agent.py
Human Instruction: You need to ensure that the coffee is made using the coffee maker and poured into the clean cup. After washing the cup, you have turned on the coffee maker and brought the cup close, but you have not completed brewing or transferring the coffee to the cup yet.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to kitchen_counter_119.
Action 4: look for cup_2132 around kitchen_counter_119.
Action 5: Walk to cupboard_117.
Action 6: look for cup_2132 around cupboard_117.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for cup_2132 around cupboard_118.
Action 10: Walk to toaster_132.
Action 11: Open toaster_132.
Action 12: look for cup_2132 around toaster_132.
Action 13: Walk to sink_120.
Action 14: look for cup_2132 around sink_120.
Action 15: Walk to bench_115.
Action 16: look for cup_2132 around bench_115.
Action 17: Walk to table_114.
Action 18: look for cup_2132 around table_114.
Action 19: Walk to cup_2132.
Action 20: Grab cup_2132.
Action 21: Walk to faucet_20.
Action 22: Switch on faucet_20.
Action 23: Wash cup_2132.
Action 24: Switch off faucet_20.
Action 25: Switch on faucet_20.
Action 26: Switch off faucet_20.
Action 27: Walk to coffe_maker_130.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2111_around_fridge_126(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_coffee_filter_2053_around_dishwasher_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve_once is_on(coffee_maker)
        # Ensure the coffee maker is turned on

def check_if_coffee_maker_has_coffee(coffee_maker: item):
    # Check if the coffee maker has brewed coffee
    symbol made_coffee = exists coffee: item : (drinkable(coffee) and inside(coffee, coffee_maker))
    return made_coffee

behavior transfer_coffee_to_cup(coffee_maker: item, cup: item):
    body:
        achieve_once inside(coffee, cup)
        # Transfer coffee from the coffee maker to the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and close_char(char, coffee_maker)

        start_coffee_maker(coffee_maker)

        if check_if_coffee_maker_has_coffee(coffee_maker):
            bind coffee: item where:
                drinkable(coffee) and inside(coffee, coffee_maker)
                
            bind cup: item where:
                is_cup(cup) and clean(cup) and close_char(char, cup)
                
            transfer_coffee_to_cup(coffee_maker, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffee; available variables: [Variable<coffee_maker: item>, Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2065_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#goal_representation
 
behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve_once is_on(coffee_maker)

def check_if_coffee_maker_has_coffee(coffee_maker: item):
    symbol made_coffee = exists coffee: item : (drinkable(coffee) and inside(coffee, coffee_maker))
    return made_coffee

behavior transfer_coffee_to_cup(coffee_maker: item, coffee: item, cup: item):
    body:
        achieve_once inside(coffee, cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and close_char(char, coffee_maker)

        start_coffee_maker(coffee_maker)

        if check_if_coffee_maker_has_coffee(coffee_maker):
            bind coffee: item where:
                drinkable(coffee) and inside(coffee, coffee_maker)
                
            bind cup: item where:
                is_cup(cup) and clean(cup) and close_char(char, cup)
                
            transfer_coffee_to_cup(coffee_maker, coffee, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_stovefan_125(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(coffee_filter,stovefan_instance)
        else:
            exp(coffee_filter,stovefan_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,stovefan_instance]=True
        close[stovefan_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(cup:item, coffee_maker:item):
    body:
        achieve clean(cup)
        # Clean the cup before using it for brewing coffee
        achieve_once close_char(char, coffee_maker)
        # Ensure the coffee maker is accessible
        achieve_once on(cup, counter) 
        # Temporarily place the cup on the counter while brewing

behavior pour_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Pour the brewed coffee into the clean cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup) and clean(cup)
        
        brew_coffee(cup, coffee_maker)
        pour_coffee(cup, coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: counter; available variables: [Variable<cup: item>, Variable<coffee_maker: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_sugar_2111_around_fridge_126(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_coffee_filter_2053_around_oven_127(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(coffee_filter,oven_instance)
        else:
            exp(coffee_filter,oven_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,oven_instance]=True
        close[oven_instance,coffee_filter]=True
    

#goal_representation
behavior brew_coffee(cup:item, coffee_maker:item, counter:item):
    body:
        achieve clean(cup)
        # Clean the cup before using it for brewing coffee
        achieve_once close_char(char, coffee_maker)
        # Ensure the coffee maker is accessible
        achieve_once on(cup, counter) 
        # Temporarily place the cup on the counter while brewing

behavior pour_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Pour the brewed coffee into the clean cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup) and clean(cup)
        bind counter: item where:
            is_kitchen_counter(counter)
        
        brew_coffee(cup, coffee_maker, counter)
        pour_coffee(cup, coffee_maker)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffee_maker: item, cup: item):
    body:
        achieve_once has_water(coffee_maker) # Ensure coffee maker has water
        achieve_once clean(cup) # Ensure the cup is clean
        achieve_once is_on(coffee_maker) # Turn on the coffee maker
        achieve_once close_char(char, cup) # Keep cup close to the character

behavior transfer_coffee(coffee_maker: item, cup: item):
    body:
        achieve has_water(cup) # Pour coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        brew_coffee(coffee_maker, cup)
        transfer_coffee(coffee_maker, cup)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)
        # Ensure the coffee maker is on

behavior pour_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        # Simulate coffee being poured into the cup 

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) # Identifying the coffee maker in the environment
        bind cup: item where:
            is_cup(cup) and clean(cup) # Selecting the clean cup
        brew_coffee(coffee_maker) # Ensure the coffee maker is brewing
        pour_coffee(cup, coffee_maker) # Pour the brewed coffee into the clean cup

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior brew_coffee(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)
        # Ensure the coffee maker is on

behavior pour_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        # Simulate coffee being poured into the cup 

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) # Identifying the coffee maker in the environment
        bind cup: item where:
            is_cup(cup) and clean(cup) # Selecting the clean cup
        brew_coffee(coffee_maker) # Ensure the coffee maker is brewing
        pour_coffee(cup, coffee_maker) # Pour the brewed coffee into the clean cup

##############################
From agent.py-> find a plan in act()
put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
put_executor(cup_2132, coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is close cup_2132. cup_2132 is close coffe_maker_130. cup_2132 is on coffe_maker_130. cup_2132 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have positioned the clean cup on the coffee maker and turned it on, but you still need to ensure that the coffee is brewed and poured into the cup.
##############################
From agent.py
Human Instruction: You have positioned the clean cup on the coffee maker and turned it on, but you still need to ensure that the coffee is brewed and poured into the cup.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to kitchen_counter_119.
Action 4: look for cup_2132 around kitchen_counter_119.
Action 5: Walk to cupboard_117.
Action 6: look for cup_2132 around cupboard_117.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for cup_2132 around cupboard_118.
Action 10: Walk to toaster_132.
Action 11: Open toaster_132.
Action 12: look for cup_2132 around toaster_132.
Action 13: Walk to sink_120.
Action 14: look for cup_2132 around sink_120.
Action 15: Walk to bench_115.
Action 16: look for cup_2132 around bench_115.
Action 17: Walk to table_114.
Action 18: look for cup_2132 around table_114.
Action 19: Walk to cup_2132.
Action 20: Grab cup_2132.
Action 21: Walk to faucet_20.
Action 22: Switch on faucet_20.
Action 23: Wash cup_2132.
Action 24: Switch off faucet_20.
Action 25: Switch on faucet_20.
Action 26: Switch off faucet_20.
Action 27: Walk to coffe_maker_130.
Action 28: Put cup_2132 on coffe_maker_130.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_dishwasher_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_coffee_brewed(coffe_maker:item, cup:item):
    body:
        achieve has_water(cup)  # Ensure the cup has coffee in it

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker]==130
        # Select the coffee maker with ID 130
        
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        # Select the cup with ID 2132

        ensure_coffee_brewed(coffe_maker, cup)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2111_around_fridge_126(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_coffee_filter_2053_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_brewed(coffee_maker: item, cup: item):
    # Function to check if the coffee is brewed and poured into the cup
    symbol coffee_brewed = is_on(coffee_maker) and on(cup, coffee_maker)
    return coffee_brewed

behavior ensure_coffee_brewed(coffee_maker: item, cup: item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on
        achieve on(cup, coffee_maker)
        # Ensure the cup is on the coffee maker
        observe(coffee_maker, "Check if coffee is brewed and poured into the cup")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        if not is_coffee_brewed(coffee_maker, cup):
            ensure_coffee_brewed(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2111_around_kitchen_counter_123(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_coffee_filter_2065_around_oven_127(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(coffee_filter,oven_instance)
        else:
            exp(coffee_filter,oven_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,oven_instance]=True
        close[oven_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once dirty(coffee_maker)
        # Coffee maker is active and brewing

        achieve_once has_water(cup)
        # Cup is filled with brewed coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and is_on(coffee_maker)
        # Select the coffee maker that is on

        bind cup: item where:
            is_cup(cup) and clean(cup) and on(cup, coffee_maker)
        # Select the clean cup on the coffee maker

        brew_coffee(coffee_maker, cup)
        # Brew and pour the coffee into the cup

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)', 'walk_executor(kitchen_counter_119)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(toaster_132)', 'open_executor(toaster_132)', 'walk_executor(sink_120)', 'walk_executor(bench_115)', 'walk_executor(table_114)', 'walk_executor(cup_2132)', 'grab_executor(cup_2132)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(cup_2132)', 'switchoff_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(coffe_maker_130)', 'put_executor(cup_2132, coffe_maker_130)']
Time info:
Time consume: 248 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 15
goal generate times: 12
goal correct times: 1
action_num: 21

Task complete rate:
Keystate: k1 - Requires: 19 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
