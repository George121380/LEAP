From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup and fill it with milk.', '2. Heat the cup of milk using the microwave.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2006_around_table_193(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_inside(container: item):
    # Function to check if there is milk inside the specified container
    symbol contains_milk = exists o: item : (is_milk(o) and inside(o, container))
    return contains_milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind fridge: item where:
            is_fridge(fridge)
        
        if is_cup(cup) and has_milk_inside(fridge):
            # If we have already found a cup and milk is present in the fridge, continue to fill the cup
            bind milk: item where:
                is_milk(milk) and inside(milk, fridge)
            
            achieve_once inside(milk, cup) 
            # Fill the cup with milk only once, as we dont need to maintain this state
        
        else:
            # If no cup is found or no milk is detected in the fridge, initiate exploration to locate them
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Check is there any milk inside the fridge")
                    # Observe whether there is any milk inside the fridge

            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check location and state of the cup")
                    # Observe the state of each cup

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_milk_inside(container: item):
    # Function to check if there is milk inside the specified container
    symbol contains_milk = exists o: item : (is_milk(o) and inside(o, container))
    return contains_milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind fridge: item where:
            is_fridge(fridge)
        
        if is_cup(cup) and has_milk_inside(fridge):
            # If we have already found a cup and milk is present in the fridge, continue to fill the cup
            bind milk: item where:
                is_milk(milk) and inside(milk, fridge)
            
            achieve_once inside(milk, cup) 
            # Fill the cup with milk only once, as we dont need to maintain this state
        
        else:
            # If no cup is found or no milk is detected in the fridge, initiate exploration to locate them
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Check is there any milk inside the fridge")
                    # Observe whether there is any milk inside the fridge

            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check location and state of the cup")
                    # Observe the state of each cup

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)obs(fridge_140, Check is there any milk inside the fridge)walk_executor(table_193)exp(cup_2087, table_193)walk_executor(cup_2087)obs(cup_2087, Check location and state of the cup)walk_executor(table_193)exp(cup_2088, table_193)walk_executor(cup_2088)obs(cup_2088, Check location and state of the cup)walk_executor(table_193)exp(cup_2089, table_193)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(table_193)exp(cup_2006, table_193)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
obs(fridge_140, Check is there any milk inside the fridge)
Get this information:  food_rice_2067 is inside fridge_140. food_jam_2059 is inside fridge_140. food_sugar_2070 is inside fridge_140. food_apple_2043 is inside fridge_140. food_dessert_2051 is inside fridge_140. food_noodles_2062 is inside fridge_140. fridge_140 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_pizza_2065 is inside fridge_140. food_cake_2046 is inside fridge_140. food_hamburger_2057 is inside fridge_140. food_salt_2068 is inside fridge_140. food_cheese_2049 is inside fridge_140. food_kiwi_2060 is inside fridge_140. food_donut_2052 is inside fridge_140. food_turkey_2071 is inside fridge_140. food_bacon_2044 is inside fridge_140. sauce_2101 is inside fridge_140. food_oatmeal_2063 is inside fridge_140. dry_pasta_2073 is on fridge_140. food_food_2055 is inside fridge_140. food_carrot_2047 is inside fridge_140. food_potato_2066 is inside fridge_140. food_ice_cream_2058 is inside fridge_140. food_snack_2069 is inside fridge_140. food_chicken_2050 is inside fridge_140. food_lemon_2061 is inside fridge_140. food_vegetable_2072 is inside fridge_140. fridge_140 is close to food_cereal_2048. fridge_140 is close to food_cheese_2049. fridge_140 is close to food_chicken_2050. fridge_140 is close to food_dessert_2051. fridge_140 is close to food_donut_2052. fridge_140 is close to food_egg_2053. fridge_140 is close to food_fish_2054. fridge_140 is close to food_food_2055. fridge_140 is close to food_fruit_2056. fridge_140 is close to food_hamburger_2057. fridge_140 is close to food_ice_cream_2058. fridge_140 is close to food_jam_2059. fridge_140 is close to food_kiwi_2060. fridge_140 is close to food_lemon_2061. fridge_140 is close to food_noodles_2062. fridge_140 is close to food_oatmeal_2063. fridge_140 is close to food_peanut_butter_2064. fridge_140 is close to food_pizza_2065. fridge_140 is close to food_potato_2066. fridge_140 is close to food_rice_2067. fridge_140 is close to food_salt_2068. fridge_140 is close to food_snack_2069. fridge_140 is close to food_sugar_2070. fridge_140 is close to food_turkey_2071. fridge_140 is close to food_vegetable_2072. fridge_140 is close to dry_pasta_2073. fridge_140 is close to milk_2074. fridge_140 is close to cupboard_131. fridge_140 is close to floor_22. fridge_140 is close to ceiling_34. fridge_140 is close to wall_7. fridge_140 is close to wall_8. fridge_140 is close to kitchen_counter_129. fridge_140 is close to sauce_2101. fridge_140 is close to chair_138. fridge_140 is close to toaster_144. fridge_140 is close to food_steak_2042. fridge_140 is close to food_apple_2043. fridge_140 is close to food_bacon_2044. fridge_140 is close to food_banana_2045. fridge_140 is close to food_cake_2046. fridge_140 is close to food_carrot_2047. fridge_140 is close to character_219. food_steak_2042 is inside fridge_140. food_egg_2053 is inside fridge_140. fridge_140 is on floor_22. food_peanut_butter_2064 is inside fridge_140. milk_2074 is on fridge_140. food_banana_2045 is inside fridge_140. food_fruit_2056 is inside fridge_140. food_cereal_2048 is inside fridge_140. fridge_140 is PLUGGED_IN. fridge_140 is OFF. fridge_140 is OPEN. fridge_140 is CLEAN.
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the table_193. 
##############################
From agent.py
exp(cup_2087, table_193)
Fail to find cup_2087 around table_193. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)obs(cup_2087, Check location and state of the cup)walk_executor(cupboard_130)exp(cup_2088, cupboard_130)walk_executor(cup_2088)obs(cup_2088, Check location and state of the cup)walk_executor(cupboard_130)exp(cup_2089, cupboard_130)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(cupboard_130)exp(cup_2006, cupboard_130)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)obs(cup_2087, Check location and state of the cup)walk_executor(cupboard_131)exp(cup_2088, cupboard_131)walk_executor(cup_2088)obs(cup_2088, Check location and state of the cup)walk_executor(cupboard_131)exp(cup_2089, cupboard_131)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(cupboard_131)exp(cup_2006, cupboard_131)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)obs(cup_2087, Check location and state of the cup)walk_executor(kitchen_counter_128)exp(cup_2088, kitchen_counter_128)walk_executor(cup_2088)obs(cup_2088, Check location and state of the cup)walk_executor(kitchen_counter_128)exp(cup_2089, kitchen_counter_128)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(kitchen_counter_128)exp(cup_2006, kitchen_counter_128)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(cup_2087, kitchen_counter_129)walk_executor(cup_2087)obs(cup_2087, Check location and state of the cup)walk_executor(kitchen_counter_129)exp(cup_2088, kitchen_counter_129)walk_executor(cup_2088)obs(cup_2088, Check location and state of the cup)walk_executor(kitchen_counter_129)exp(cup_2089, kitchen_counter_129)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(kitchen_counter_129)exp(cup_2006, kitchen_counter_129)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_129)
Fail to find cup_2087 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(cup_2087, kitchen_counter_132)walk_executor(cup_2087)obs(cup_2087, Check location and state of the cup)walk_executor(kitchen_counter_132)exp(cup_2088, kitchen_counter_132)walk_executor(cup_2088)obs(cup_2088, Check location and state of the cup)walk_executor(kitchen_counter_132)exp(cup_2089, kitchen_counter_132)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(kitchen_counter_132)exp(cup_2006, kitchen_counter_132)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: To locate cup_2087, go to dining_room_1. Once there, find table_123. Cup_2087 will be on top of table_123.
Re-decompose: None

##############################
From agent.py
Human Instruction: To locate cup_2087, go to dining_room_1. Once there, find table_123. Cup_2087 will be on top of table_123.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: Observe around fridge_140 with the question of Check is there any milk inside the fridge.
Action 5: Walk to table_193.
Action 6: look for cup_2087 around table_193.
Action 7: Walk to cupboard_130.
Action 8: look for cup_2087 around cupboard_130.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for cup_2087 around cupboard_131.
Action 12: Walk to kitchen_counter_128.
Action 13: look for cup_2087 around kitchen_counter_128.
Action 14: Walk to kitchen_counter_129.
Action 15: look for cup_2087 around kitchen_counter_129.
Action 16: Walk to kitchen_counter_132.

##############################
From agent.py
exp(cup_2087, kitchen_counter_132)
Fail to find cup_2087 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)obs(cup_2087, Check location and state of the cup)walk_executor(table_123)exp(cup_2088, table_123)walk_executor(cup_2088)obs(cup_2088, Check location and state of the cup)walk_executor(table_123)exp(cup_2089, table_123)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(table_123)exp(cup_2006, table_123)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)obs(cup_2087, Check location and state of the cup)walk_executor(cup_2088)obs(cup_2088, Check location and state of the cup)walk_executor(table_123)exp(cup_2089, table_123)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(table_123)exp(cup_2006, table_123)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
obs(cup_2087, Check location and state of the cup)
Get this information:  cup_2087 is inside dining_room_1. cup_2087 is close to table_123. cup_2087 is close to character_219. cup_2087 is on table_123.
##############################
From agent.py
walk_executor(cup_2088)
Robot find: Robot is close to the table_123. Robot is close to the cup_2088. 
##############################
From agent.py
obs(cup_2088, Check location and state of the cup)
Get this information:  cup_2088 is on table_123. cup_2088 is close to table_123. cup_2088 is close to character_219. cup_2088 is inside dining_room_1.
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the table_123. Robot is close to the mat_114. 
##############################
From agent.py
exp(cup_2089, table_123)
Fail to find cup_2089 around table_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_149)open_executor(microwave_149)exp(cup_2089, microwave_149)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(microwave_149)exp(cup_2006, microwave_149)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
exp(cup_2089, microwave_149)
Fail to find cup_2089 around microwave_149. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(cup_2089, table_127)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(table_127)exp(cup_2006, table_127)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(cup_2089, table_127)
Fail to find cup_2089 around table_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_124)exp(cup_2089, bench_124)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(bench_124)exp(cup_2006, bench_124)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(bench_124)
Robot find: Robot is close to the bench_124. 
##############################
From agent.py
exp(cup_2089, bench_124)
Fail to find cup_2089 around bench_124. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_122)exp(cup_2089, bench_122)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(bench_122)exp(cup_2006, bench_122)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(bench_122)
Robot find: Robot is close to the bench_122. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2089 ?
Answer: Locate cup_2089 in dining_room_1. It is placed on bookshelf_137.
Re-decompose: None

##############################
From agent.py
Human Instruction: To locate cup_2087, go to dining_room_1. Once there, find table_123. Cup_2087 will be on top of table_123.
Locate cup_2089 in dining_room_1. It is placed on bookshelf_137.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: Observe around fridge_140 with the question of Check is there any milk inside the fridge.
Action 5: Walk to table_193.
Action 6: look for cup_2087 around table_193.
Action 7: Walk to cupboard_130.
Action 8: look for cup_2087 around cupboard_130.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for cup_2087 around cupboard_131.
Action 12: Walk to kitchen_counter_128.
Action 13: look for cup_2087 around kitchen_counter_128.
Action 14: Walk to kitchen_counter_129.
Action 15: look for cup_2087 around kitchen_counter_129.
Action 16: Walk to kitchen_counter_132.
Action 17: look for cup_2087 around kitchen_counter_132.
Action 18: Walk to table_123.
Action 19: look for cup_2087 around table_123.
Action 20: Walk to cup_2087.
Action 21: Observe around cup_2087 with the question of Check location and state of the cup.
Action 22: Walk to cup_2088.
Action 23: Observe around cup_2088 with the question of Check location and state of the cup.
Action 24: Walk to table_123.
Action 25: look for cup_2089 around table_123.
Action 26: Walk to microwave_149.
Action 27: Open microwave_149.
Action 28: look for cup_2089 around microwave_149.
Action 29: Walk to table_127.
Action 30: look for cup_2089 around table_127.
Action 31: Walk to bench_124.
Action 32: look for cup_2089 around bench_124.
Action 33: Walk to bench_122.

##############################
From agent.py
exp(cup_2089, bench_122)
Fail to find cup_2089 around bench_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(cup_2089, bookshelf_137)walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(bookshelf_137)exp(cup_2006, bookshelf_137)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py
exp(cup_2089, bookshelf_137)
Find cup_2089. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2089)obs(cup_2089, Check location and state of the cup)walk_executor(bookshelf_137)exp(cup_2006, bookshelf_137)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(cup_2089)
Robot find: Robot is close to the bookshelf_137. Robot is close to the cup_2089. 
##############################
From agent.py
obs(cup_2089, Check location and state of the cup)
Get this information:  cup_2089 is inside dining_room_1. cup_2089 is close to bookshelf_137. cup_2089 is close to character_219. cup_2089 is on bookshelf_137.
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: Robot is close to the bookshelf_137. Robot is close to the photoframe_102. 
##############################
From agent.py
exp(cup_2006, bookshelf_137)
Fail to find cup_2006 around bookshelf_137. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2102)exp(cup_2006, oil_2102)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(oil_2102)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. 
##############################
From agent.py
exp(cup_2006, oil_2102)
Fail to find cup_2006 around oil_2102. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(cup_2006, bookshelf_136)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(cup_2006, bookshelf_136)
Fail to find cup_2006 around bookshelf_136. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)exp(cup_2006, milk_2074)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the fridge_140. 
##############################
From agent.py
exp(cup_2006, milk_2074)
Fail to find cup_2006 around milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2096)exp(cup_2006, bowl_2096)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2006 ?
Answer: Go to the home office labeled as home_office_161. Inside, look for floor_24. The cup_2006 is located on floor_24.
Re-decompose: None

##############################
From agent.py
Human Instruction: To locate cup_2087, go to dining_room_1. Once there, find table_123. Cup_2087 will be on top of table_123.
Locate cup_2089 in dining_room_1. It is placed on bookshelf_137.
Go to the home office labeled as home_office_161. Inside, look for floor_24. The cup_2006 is located on floor_24.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: Observe around fridge_140 with the question of Check is there any milk inside the fridge.
Action 5: Walk to table_193.
Action 6: look for cup_2087 around table_193.
Action 7: Walk to cupboard_130.
Action 8: look for cup_2087 around cupboard_130.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for cup_2087 around cupboard_131.
Action 12: Walk to kitchen_counter_128.
Action 13: look for cup_2087 around kitchen_counter_128.
Action 14: Walk to kitchen_counter_129.
Action 15: look for cup_2087 around kitchen_counter_129.
Action 16: Walk to kitchen_counter_132.
Action 17: look for cup_2087 around kitchen_counter_132.
Action 18: Walk to table_123.
Action 19: look for cup_2087 around table_123.
Action 20: Walk to cup_2087.
Action 21: Observe around cup_2087 with the question of Check location and state of the cup.
Action 22: Walk to cup_2088.
Action 23: Observe around cup_2088 with the question of Check location and state of the cup.
Action 24: Walk to table_123.
Action 25: look for cup_2089 around table_123.
Action 26: Walk to microwave_149.
Action 27: Open microwave_149.
Action 28: look for cup_2089 around microwave_149.
Action 29: Walk to table_127.
Action 30: look for cup_2089 around table_127.
Action 31: Walk to bench_124.
Action 32: look for cup_2089 around bench_124.
Action 33: Walk to bench_122.
Action 34: look for cup_2089 around bench_122.
Action 35: Walk to bookshelf_137.
Action 36: Open bookshelf_137.
Action 37: look for cup_2089 around bookshelf_137.
Action 38: Walk to cup_2089.
Action 39: Observe around cup_2089 with the question of Check location and state of the cup.
Action 40: Walk to bookshelf_137.
Action 41: look for cup_2006 around bookshelf_137.
Action 42: Walk to oil_2102.
Action 43: look for cup_2006 around oil_2102.
Action 44: Walk to bookshelf_136.
Action 45: look for cup_2006 around bookshelf_136.
Action 46: Walk to milk_2074.
Action 47: look for cup_2006 around milk_2074.
Action 48: Walk to bowl_2096.

##############################
From agent.py
exp(cup_2006, bowl_2096)
Fail to find cup_2006 around bowl_2096. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(cup_2006, bookshelf_189)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. 
##############################
From agent.py
open_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. bookshelf_189 is opened. 
##############################
From agent.py
exp(cup_2006, bookshelf_189)
Fail to find cup_2006 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(cup_2006, home_office_161)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(cup_2006, home_office_161)
Fail to find cup_2006 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(cup_2006, home_office_161)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(cup_2006, home_office_161)
Fail to find cup_2006 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(cup_2006, home_office_161)walk_executor(cup_2006)obs(cup_2006, Check location and state of the cup)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(cup_2006, home_office_161)
Fail to find cup_2006 around home_office_161. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup and fill it with milk.  ', '2. Heat the cup of milk using the microwave.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2006_around_cupboard_130(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_milk(cup: item, milk_source: item):
    body:
        achieve_once has_water(cup)
        # Fill the cup with milk

behavior __goal__():
    body:
        # Select a cup
        bind cup: item where:
            is_cup(cup)
        
        # Select a milk source
        bind milk_container: item where:
            is_milk(milk_container)

        fill_cup_with_milk(cup, milk_container)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_cup_with_milk(cup: item, milk_source: item):
    body:
        achieve_once has_water(cup)
        # Fill the cup with milk

behavior __goal__():
    body:
        # Select a cup
        bind cup: item where:
            is_cup(cup)
        
        # Select a milk source
        bind milk_container: item where:
            is_milk(milk_container)

        fill_cup_with_milk(cup, milk_container)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(cup_2087, kitchen_counter_129)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_129)
Fail to find cup_2087 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(cup_2087, sink_133)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(cup_2087, sink_133)
Fail to find cup_2087 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(cup_2087, dishwasher_143)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(cup_2087, dishwasher_143)
Fail to find cup_2087 around dishwasher_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Go to dining_room_1. Locate table_123, and you will find cup_2087 on top of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1. Locate table_123, and you will find cup_2087 on top of it.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for cup_2087 around cupboard_130.
Action 3: Walk to kitchen_counter_129.
Action 4: look for cup_2087 around kitchen_counter_129.
Action 5: Walk to kitchen_counter_128.
Action 6: look for cup_2087 around kitchen_counter_128.
Action 7: Walk to sink_133.
Action 8: look for cup_2087 around sink_133.
Action 9: Walk to dishwasher_143.
Action 10: Open dishwasher_143.
Action 11: look for cup_2087 around dishwasher_143.
Action 12: Walk to cupboard_131.
Action 13: Open cupboard_131.

##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the cup (cup_2087) with milk. The current actions have only found and grabbed the cup, but filling it with milk has not yet been accomplished.
##############################
From agent.py
Human Instruction: You need to fill the cup (cup_2087) with milk. The current actions have only found and grabbed the cup, but filling it with milk has not yet been accomplished.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for cup_2087 around cupboard_130.
Action 3: Walk to kitchen_counter_129.
Action 4: look for cup_2087 around kitchen_counter_129.
Action 5: Walk to kitchen_counter_128.
Action 6: look for cup_2087 around kitchen_counter_128.
Action 7: Walk to sink_133.
Action 8: look for cup_2087 around sink_133.
Action 9: Walk to dishwasher_143.
Action 10: Open dishwasher_143.
Action 11: look for cup_2087 around dishwasher_143.
Action 12: Walk to cupboard_131.
Action 13: Open cupboard_131.
Action 14: look for cup_2087 around cupboard_131.
Action 15: Walk to table_123.
Action 16: look for cup_2087 around table_123.
Action 17: Walk to cup_2087.
Action 18: Grab cup_2087.
Action 19: Walk to faucet_134.
Action 20: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_the_cup_filled_with_milk(cup:item):
    # Function to check if the specified cup contains milk
    symbol cup_with_milk= exists milk: item : (is_milk(milk) and inside(milk, cup))
    return cup_with_milk

behavior fill_cup_with_milk(cup:item, milk_source:item):
    body:
        achieve_once inside(milk_source, cup)
        # Temporarily fill the cup with milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087

        if is_the_cup_filled_with_milk(cup):
            # If the cup has already been filled with milk, there is no need to proceed further
            return
        
        else:
            # Proceed to fill the cup if it is not yet filled with milk
            bind milk_source: item where:
                is_milk(milk_source) and not inside(milk_source, cup)
            fill_cup_with_milk(cup, milk_source)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n        \n        ') at line 5865, column 19.
Expected one of: 
	* LONG_STRING
	* VARNAME
	* TRUE
	* FORALL
	* PLUS
	* FINDONE
	* MINUS
	* NOT
	* TILDE
	* NONE
	* COLON
	* EXISTS
	* DO
	* HEX_NUMBER
	* FALSE
	* FINDALL
	* LSQB
	* BIN_NUMBER
	* LPAR
	* FLOAT_NUMBER
	* ELLIPSIS
	* IMAG_NUMBER
	* STRING
	* OCT_NUMBER
	* DEC_NUMBER

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2006_around_fridge_140(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cup,fridge_instance)
        else:
            exp(cup,fridge_instance)
    eff:
        unknown[cup]=False
        close[cup,fridge_instance]=True
        close[fridge_instance,cup]=True
    

#goal_representation
 
def is_the_cup_filled_with_milk(cup:item):
    # Function to check if the specified cup contains milk
    symbol cup_with_milk= exists milk: item : (is_milk(milk) and inside(milk, cup))
    return cup_with_milk

behavior fill_cup_with_milk(cup:item, milk_source:item):
    body:
        bind faucet: item where:
            is_faucet(faucet)
        achieve_once inhand(cup) 
        achieve_once close_char(char, milk_source)
        switchon_executor(faucet)
        achieve_once close_char(char, cup)
        switchoff_executor(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087

        if is_the_cup_filled_with_milk(cup):
            # If the cup has already been filled with milk, there is no need to proceed further
            return

        observe(cup,"Locate milk source")
        bind milk_source: item where:
            is_milk(milk_source) 
        fill_cup_with_milk(cup, milk_source)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n        ') at line 5870, column 19.
Expected one of: 
	* LONG_STRING
	* VARNAME
	* TRUE
	* FORALL
	* PLUS
	* FINDONE
	* MINUS
	* NOT
	* TILDE
	* NONE
	* COLON
	* EXISTS
	* DO
	* HEX_NUMBER
	* FALSE
	* FINDALL
	* LSQB
	* BIN_NUMBER
	* LPAR
	* FLOAT_NUMBER
	* ELLIPSIS
	* IMAG_NUMBER
	* STRING
	* OCT_NUMBER
	* DEC_NUMBER

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2087_around_fridge_140(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cup,fridge_instance)
        else:
            exp(cup,fridge_instance)
    eff:
        unknown[cup]=False
        close[cup,fridge_instance]=True
        close[fridge_instance,cup]=True
    

#goal_representation
 
def is_the_cup_filled_with_milk(cup:item):
    # Function to check if the specified cup contains milk
    symbol cup_with_milk= exists milk: item : (is_milk(milk) and inside(milk, cup))
    return cup_with_milk

behavior fill_cup_with_milk(cup:item, milk_source:item):
    body:
        bind faucet: item where:
            is_faucet(faucet)
        achieve_once inhand(cup)
        achieve_once close_char(char, milk_source)
        achieve_once is_on(faucet)
        achieve_once inside(milk_source, cup)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087

        if is_the_cup_filled_with_milk(cup):
            # If the cup has already been filled with milk, there is no need to proceed further
            return

        observe(cup,"Locate milk source")
        bind milk_source: item where:
            is_milk(milk_source)
        fill_cup_with_milk(cup, milk_source)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior fill_cup_with_milk(cup: item, milk: item, fridge: item):
    body:
        achieve_once inside(milk, cup) 
        # Fill the cup with milk from the source

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        bind milk: item where:
            is_milk(milk)
        bind fridge: item where:
            is_fridge(fridge) and inside(milk, fridge)
        fill_cup_with_milk(cup, milk, fridge)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def fill_cup_with_milk(cup:item, milk:item, fridge:item):
    body:
        achieve_once inhand(cup) # Temporarily hold the cup in hand
        achieve_once inside(milk, cup) # Fill the cup with milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087 # Select the specified cup by ID
        
        bind fridge: item where:
            is_fridge(fridge) # Select a fridge
        
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge) # Select milk from inside the fridge
        
        fill_cup_with_milk(cup, milk, fridge)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5830, column 9.
Expected one of: 
	* OR
	* __ANON_3
	* __ANON_0
	* AND
	* PLUS
	* LESS_EQ
	* PERCENT
	* FLOORDIV
	* GREATER_EQ
	* __ANON_5
	* __ANON_1
	* _NEWLINE
	* SLASH
	* MINUS
	* IF
	* __ANON_2
	* RSHIFT
	* __ANON_7
	* AT
	* LESSTHAN
	* AMPERSAND
	* COMMA
	* __ANON_4
	* LSHIFT
	* SEMICOLON
	* VBAR
	* NOT_EQ
	* __ANON_8
	* STAR
	* EQUAL
	* __ANON_6
	* CIRCUMFLEX
	* DOUBLE_EQUAL
	* MORETHAN

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def fill_cup_with_milk(cup:item, milk:item, fridge:item):
    body:
        achieve_once inhand(cup)  # Temporarily hold the cup in hand
        achieve_once inside(milk, cup)  # Fill the cup with milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087  # Select the specified cup by ID
        
        bind fridge: item where:
            is_fridge(fridge)  # Select a fridge
        
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)  # Select milk from inside the fridge
        
        fill_cup_with_milk(cup, milk, fridge)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5830, column 9.
Expected one of: 
	* OR
	* __ANON_3
	* __ANON_0
	* AND
	* PLUS
	* LESS_EQ
	* PERCENT
	* FLOORDIV
	* GREATER_EQ
	* __ANON_5
	* __ANON_1
	* _NEWLINE
	* SLASH
	* MINUS
	* IF
	* __ANON_2
	* RSHIFT
	* __ANON_7
	* AT
	* LESSTHAN
	* AMPERSAND
	* COMMA
	* __ANON_4
	* LSHIFT
	* SEMICOLON
	* VBAR
	* NOT_EQ
	* __ANON_8
	* STAR
	* EQUAL
	* __ANON_6
	* CIRCUMFLEX
	* DOUBLE_EQUAL
	* MORETHAN

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def fill_cup_with_milk(cup:item, milk:item, fridge:item):
    body:
        achieve_once inhand(cup) # Temporarily hold the cup in hand to manipulate it
        achieve_once inside(milk, cup)  # Fill the cup with milk
        
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087 # Select the specified cup by ID
            
        bind fridge: item where:
            is_fridge(fridge) # Select a fridge
        
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge) # Select milk from inside the fridge
        
        fill_cup_with_milk(cup, milk, fridge)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_129)', 'walk_executor(kitchen_counter_128)', 'walk_executor(sink_133)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(table_123)', 'walk_executor(cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)']
Time info:
Time consume: 129 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 50
goal generate times: 4
goal correct times: 2
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 9 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
