From agent.py
Reset goals: The sub-goals are: 
['Turn on the computer in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_415_around_desk_104(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_mouse_413_around_home_office_319(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(mouse,home_office_instance)
        else:
            exp(mouse,home_office_instance)
    eff:
        unknown[mouse]=False
        close[mouse,home_office_instance]=True
        close[home_office_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
def is_computer(item: item):
    # Check if the given item is a computer
    return is_computer(item)

def has_switch(computer:item):
    # Check if the computer has a switch to turn it on or off
    return has_switch(computer)

behavior turn_on_computer(computer:item):
    body:
        achieve is_on(computer)
        # Turn on the computer

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
            # Select the computer inside the home office

        if has_switch(computer):
            turn_on_computer(computer)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_computer(item: item):
    # Check if the given item is a computer
    return is_computer(item)

def has_switch(computer:item):
    # Check if the computer has a switch to turn it on or off
    return has_switch(computer)

behavior turn_on_computer(computer:item):
    body:
        achieve is_on(computer)
        # Turn on the computer

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
            # Select the computer inside the home office

        if has_switch(computer):
            turn_on_computer(computer)

##############################
From agent.py-> find a plan in act()
walk_executor(computer_417)switchon_executor(computer_417)
##############################
From agent.py
walk_executor(computer_417)
Robot find: chair_356, keyboard_415, mouse_413, Robot is close to the computer_417. 
##############################
From agent.py
switchon_executor(computer_417)
Robot find: Robot is close to the computer_417. computer_417 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Turn on the computer in home office.
Action History:
['walk_executor(computer_417)', 'switchon_executor(computer_417)']
Time info:
Time consume: 15 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 131
goal generate times: 1
goal correct times: 0
action_num: 2

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
