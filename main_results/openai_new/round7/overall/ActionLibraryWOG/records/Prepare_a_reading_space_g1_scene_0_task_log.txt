From agent.py
Reset goals: The sub-goals are: 
['1. Locate the specific book.', '2. Place the book on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_book_on_bookshelf(bookshelf: item):
    # Function to check if there is a book on the specified bookshelf
    symbol book_found = exists o: item : (is_book(o) and on(o, bookshelf))
    return book_found

behavior __goal__():
    body:
        if exists book: item : (is_book(book) and visited(book)):
            # If a book has already been identified, move to it directly
            bind book: item where:
                is_book(book) and visited(book)
            achieve close_char(char, book)

        else:
            # If no book is found yet, explore unvisited bookshelves to find one
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    observe(bookshelf, "Check for any books on the bookshelf")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_book_on_bookshelf(bookshelf: item):
    # Function to check if there is a book on the specified bookshelf
    symbol book_found = exists o: item : (is_book(o) and on(o, bookshelf))
    return book_found

behavior __goal__():
    body:
        if exists book: item : (is_book(book) and visited(book)):
            # If a book has already been identified, move to it directly
            bind book: item where:
                is_book(book) and visited(book)
            achieve close_char(char, book)

        else:
            # If no book is found yet, explore unvisited bookshelves to find one
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    observe(bookshelf, "Check for any books on the bookshelf")

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)obs(bookshelf_101, Check for any books on the bookshelf)walk_executor(bookshelf_233)open_executor(bookshelf_233)obs(bookshelf_233, Check for any books on the bookshelf)walk_executor(bookshelf_354)open_executor(bookshelf_354)obs(bookshelf_354, Check for any books on the bookshelf)
##############################
From agent.py
walk_executor(bookshelf_101)
Robot find: drawing_174, drawing_176, Robot is close to the bookshelf_101. 
##############################
From agent.py
open_executor(bookshelf_101)
Robot find: Robot is close to the photoframe_185. Robot is close to the bookshelf_101. bookshelf_101 is opened. 
##############################
From agent.py
obs(bookshelf_101, Check for any books on the bookshelf)
Get this information:  bookshelf_101 is on floor_72. bookshelf_101 is facing drawing_174. photoframe_185 is inside bookshelf_101. bookshelf_101 is inside bedroom_67. bookshelf_101 is close to floor_2. bookshelf_101 is close to floor_3. bookshelf_101 is close to wall_12. bookshelf_101 is close to wall_14. bookshelf_101 is close to ceiling_16. bookshelf_101 is close to walllamp_28. bookshelf_101 is close to towel_rack_31. bookshelf_101 is close to towel_rack_32. bookshelf_101 is close to bathroom_counter_41. bookshelf_101 is close to door_44. bookshelf_101 is close to doorjamb_45. bookshelf_101 is close to drawing_176. bookshelf_101 is close to photoframe_185. bookshelf_101 is close to light_64. bookshelf_101 is close to floor_72. bookshelf_101 is close to wall_79. bookshelf_101 is close to wall_82. bookshelf_101 is close to wall_85. bookshelf_101 is close to ceiling_90. bookshelf_101 is close to character_65. bookshelf_101 is OPEN. bookshelf_101 is CLEAN.
##############################
From agent.py
walk_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. 
##############################
From agent.py
open_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. bookshelf_233 is opened. 
##############################
From agent.py
obs(bookshelf_233, Check for any books on the bookshelf)
Get this information:  bookshelf_233 is facing television_248. bookshelf_233 is on floor_207. bookshelf_233 is inside dining_room_201. bookshelf_233 is close to doorjamb_165. bookshelf_233 is close to mouse_166. bookshelf_233 is close to mousepad_167. bookshelf_233 is close to keyboard_168. bookshelf_233 is close to light_169. bookshelf_233 is close to computer_170. bookshelf_233 is close to cpuscreen_171. bookshelf_233 is close to floor_75. bookshelf_233 is close to floor_76. bookshelf_233 is close to floor_206. bookshelf_233 is close to floor_207. bookshelf_233 is close to wall_209. bookshelf_233 is close to wall_210. bookshelf_233 is close to wall_83. bookshelf_233 is close to wall_84. bookshelf_233 is close to ceiling_218. bookshelf_233 is close to ceiling_93. bookshelf_233 is close to door_222. bookshelf_233 is close to chair_103. bookshelf_233 is close to desk_104. bookshelf_233 is close to character_65. bookshelf_233 is DIRTY. bookshelf_233 is OPEN.
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
obs(bookshelf_354, Check for any books on the bookshelf)
Get this information:  bookshelf_354 is facing drawing_402. bookshelf_354 is facing drawing_403. bookshelf_354 is facing drawing_404. book_2066 is on bookshelf_354. bookshelf_354 is close to filing_cabinet_399. bookshelf_354 is close to book_2066. bookshelf_354 is close to book_2067. bookshelf_354 is close to drawing_403. bookshelf_354 is close to drawing_402. bookshelf_354 is close to photoframe_430. bookshelf_354 is close to floor_320. bookshelf_354 is close to floor_321. bookshelf_354 is close to wall_332. bookshelf_354 is close to wall_335. bookshelf_354 is close to ceiling_337. bookshelf_354 is close to ceiling_338. bookshelf_354 is close to wall_214. bookshelf_354 is close to wall_215. bookshelf_354 is close to walllamp_350. bookshelf_354 is close to wallshelf_234. bookshelf_354 is close to drawing_241. bookshelf_354 is close to drawing_242. bookshelf_354 is close to drawing_243. bookshelf_354 is close to character_65. photoframe_430 is inside bookshelf_354. bookshelf_354 is on floor_320. book_2067 is on bookshelf_354. bookshelf_354 is inside home_office_319. bookshelf_354 is OPEN. bookshelf_354 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2031_around_fridge_289(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation

behavior place_book(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book)
        # Choose the book that is currently in hand
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office
        place_book(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_orange_2031_around_fridge_289(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

#goal_representation
 
behavior place_book(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book) # Choose the book that is currently in hand
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office) # Select the coffee table located in the home office
        bind home_office: item where:
            is_home_office(home_office) # Declare home_office variable
        place_book(book, coffee_table) # Place the book on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_orange_2031_around_fridge_289(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

#goal_representation
behavior place_book(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book) # Choose the book that is currently in hand
        bind home_office: item where:
            is_home_office(home_office) # Declare home_office variable
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office) # Select the coffee table located in the home office
        place_book(book, coffee_table) # Place the book on the coffee table
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2031_around_fridge_289(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
# Function to check if a table is a coffee table
def is_coffee_table_in_home_office(table: item):
    symbol is_coffee_table=exists room: item : (is_coffee_table(table) and inside(table, room) and is_home_office(room))
    return is_coffee_table

# Function to identify the book by checking each bookshelf
def find_book_on_bookshelf(book: item):
    symbol find_book=exists shelf: item : (is_bookshelf(shelf) and inside(book, shelf))
    return find_book

behavior put_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        # First, locate the book we need to place
        if not exists book: item : (is_book(book) and find_book_on_bookshelf(book)):
            # If the book is not found in known information, look for it on each bookshelf
            foreach shelf: item:
                if is_bookshelf(shelf) and not visited(shelf):
                    observe(shelf, "Check for any books on the bookshelf")
        
        # Once the book is located, bind it
        bind book: item where:
            is_book(book) and find_book_on_bookshelf(book)
        
        # Now, locate the coffee table in the home office to place the book
        if not exists table: item : (is_coffee_table_in_home_office(table)):
            # If no coffee table in home office is known, check for it in the scene
            foreach table: item:
                if is_coffee_table(table) and not visited(table):
                    observe(table, "Check if the table is inside the home office and is a coffee table")
        
        # Once the coffee table is located, bind it
        bind table: item where:
            is_coffee_table_in_home_office(table)
        
        put_book_on_coffee_table(book, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'book') at line 5696, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_orange_2031_around_fridge_289(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

#goal_representation
 
# Function to check if a table is a coffee table and is inside the home office
def is_coffee_table_in_home_office(table: item):
    symbol is_a_coffee_table_and_in_home_office = exists room: item : (is_coffee_table(table) and inside(table, room) and is_home_office(room))
    return is_a_coffee_table_and_in_home_office

# Function to identify the book by checking each bookshelf
def find_book_on_bookshelf(book: item):
    symbol found_book = exists shelf: item : (is_bookshelf(shelf) and inside(book, shelf))
    return found_book

behavior put_book_on_coffee_table(book: item, table: item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        # First, locate the book to place
        if not exists book: item : (is_book(book) and find_book_on_bookshelf(book)):
            # If the book is not found in known information, look for it in each bookshelf
            foreach shelf: item:
                if is_bookshelf(shelf) and not visited(shelf):
                    observe(shelf, "Check for any books on the bookshelf")
        
        # Once the book is located, bind it
        bind book: item where:
            is_book(book) and find_book_on_bookshelf(book)
        
        # Now, locate the coffee table in the home office to place the book
        if not exists table: item : (is_coffee_table_in_home_office(table)):
            # If no coffee table in the home office is known, check for it in the scene
            foreach table: item:
                if is_coffee_table(table) and not visited(table):
                    observe(table, "Check if the table is inside the home office and is a coffee table")
        
        # Once the coffee table is located, bind it
        bind table: item where:
            is_coffee_table_in_home_office(table)
        
        put_book_on_coffee_table(book, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'book') at line 5696, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_orange_2031_around_fridge_289(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

#goal_representation
 
def find_book_on_bookshelf():
    # Function to identify if the book is found on any bookshelf
    symbol book_found = exists shelf: item : (is_bookshelf(shelf) and is_book(book) and inside(book, shelf))
    return book_found

def is_coffee_table_in_home_office(table: item):
    # Function to check if a table is a coffee table and is inside the home office
    symbol is_a_coffee_table_and_in_home_office = exists room: item : (is_coffee_table(table) and inside(table, room) and is_home_office(room))
    return is_a_coffee_table_and_in_home_office

behavior put_book_on_coffee_table(book: item, table: item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        # First, locate the book to place
        if not find_book_on_bookshelf():
            # If the book is not found in known information, look for it on each bookshelf
            foreach shelf: item:
                if is_bookshelf(shelf) and not visited(shelf):
                    observe(shelf, "Check for any books on the bookshelf")
        
        # Once the book is located, bind it
        bind book: item where:
            is_book(book) and find_book_on_bookshelf()
        
        # Now, locate the coffee table in the home office to place the book
        if not exists table: item : (is_coffee_table_in_home_office(table)):
            # If no coffee table in the home office is known, check for it in the scene
            foreach table: item:
                if is_coffee_table(table) and not visited(table):
                    observe(table, "Check if the table is inside the home office and is a coffee table")
        
        # Once the coffee table is located, bind it
        bind table: item where:
            is_coffee_table_in_home_office(table)
        
        put_book_on_coffee_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2031_around_fridge_289(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_wall_clock_249_around_desk_357(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(wall_clock,desk_instance)
        else:
            exp(wall_clock,desk_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,desk_instance]=True
        close[desk_instance,wall_clock]=True
    

behavior find_food_orange_2031_around_fridge_289(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

#goal_representation
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        bind home_office: item where:
            is_home_office(home_office)
        place_book_on_coffee_table(book, coffee_table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_orange_2031_around_fridge_289(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind home_office: item where:
            is_home_office(home_office)
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind home_office: item where:
            is_home_office(home_office)
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        place_book_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. coffee_table_2068 is close book_2066. book_2066 is close coffee_table_2068. book_2066 is on coffee_table_2068. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffee table in home office.
Action History:
['walk_executor(bookshelf_101)', 'open_executor(bookshelf_101)', 'walk_executor(bookshelf_233)', 'open_executor(bookshelf_233)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2066, coffee_table_2068)']
Time info:
Time consume: 99 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 75
goal generate times: 4
goal correct times: 2
action_num: 10

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
