From agent.py
Reset goals: The sub-goals are: 
['1. Peel and cut the potatoes into strips.', '2. Fry the potato strips in oil until golden brown.', '3. Drain excess oil and season the French fries as desired.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2107_around_kitchen_counter_123(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior cut_potato(potato:item, cutting_board:item):
    body:
        achieve_once on(potato, cutting_board)
        # Place the potato on the cutting board
        achieve cut(potato)
        # Cut the potato into strips

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        cut_potato(potato, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior cut_potato(potato:item, cutting_board:item):
    body:
        achieve_once on(potato, cutting_board)
        # Place the potato on the cutting board
        achieve cut(potato)
        # Cut the potato into strips

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        cut_potato(potato, cutting_board)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_potato_2107, kitchen_counter_123)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_potato_2107, kitchen_counter_123)
Fail to find food_potato_2107 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_potato_2107, fridge_126)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_potato_2107, fridge_126)
Find food_potato_2107. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_potato_2107. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def has_oil_inside(pan:item):
    # Function to check if there is oil inside a specified frying pan
    symbol has_oil= exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

behavior ensure_clean_pan(pan: item):
    body:
        if not clean(pan):
            wash(pan)
            achieve clean(pan)
        # Ensure the pan is clean before use

behavior pour_oil_into_pan(oil:item, pan:item):
    body:
        if not has_oil_inside(pan):
            achieve_once inside(oil, pan)
            # Pour oil into the pan

behavior heat_pan_with_oil(pan:item):
    body:
        achieve_once on(pan, stove)
        achieve_once is_on(stove)
        # Heat the pan with oil on the stove

behavior fry_potato_strips(potato:item, pan:item):
    body:
        achieve_once inside(potato, pan)
        # Fry the potato strips in the pan until golden brown

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind oil: item where:
            is_oil(oil)
        bind potato: item where:
            is_food_potato(potato) and cut(potato)
        bind stove: item where:
            is_stove(stove)
        
        ensure_clean_pan(pan)
        pour_oil_into_pan(oil, pan)
        heat_pan_with_oil(pan)
        fry_potato_strips(potato, pan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#goal_representation
 
def has_oil_inside(pan:item):
    # Function to check if there is oil inside a specified frying pan
    symbol has_oil= exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

behavior ensure_clean_pan(pan: item):
    body:
        if not clean(pan):
            wash(pan)
            achieve clean(pan)
        # Ensure the pan is clean before use

behavior pour_oil_into_pan(oil:item, pan:item):
    body:
        if not has_oil_inside(pan):
            achieve_once inside(oil, pan)
            # Pour oil into the pan

behavior heat_pan_with_oil(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)
        achieve_once is_on(stove)
        # Heat the pan with oil on the stove

behavior fry_potato_strips(potato:item, pan:item):
    body:
        achieve_once inside(potato, pan)
        # Fry the potato strips in the pan until golden brown

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind oil: item where:
            is_oil(oil)
        bind potato: item where:
            is_food_potato(potato) and cut(potato)
        bind stove: item where:
            is_stove(stove)
        
        ensure_clean_pan(pan)
        pour_oil_into_pan(oil, pan)
        heat_pan_with_oil(pan, stove)
        fry_potato_strips(potato, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def in_fryingpan(pan: item):
    # Function to check if the oil is in the frying pan
    symbol oil_in_fryingpan = exists oil: item : (is_oil(oil) and inside(oil, pan))
    return oil_in_fryingpan

behavior heat_oil(pan:item):
    body:
        achieve_once is_on(stove)
        # Ensure the stove is turned on
        achieve_on(pan, stove)
        # Place the frying pan on the stove

behavior fry_potatoes(pan:item, potatoes:item):
    body:
        achieve_once inside(potatoes, pan)
        # Place the potato strips inside the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the cut potato strips

        if not in_fryingpan(fryingpan):
            # If there is no oil in the pan, it needs to be added
            observe(fryingpan, "Check if there is oil in the frying pan")

        heat_oil(fryingpan)
        fry_potatoes(fryingpan, potato_strips)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#goal_representation
 
def in_fryingpan(pan: item):
    # Function to check if the oil is in the frying pan
    symbol oil_in_fryingpan = exists oil: item : (is_oil(oil) and inside(oil, pan))
    return oil_in_fryingpan

behavior heat_oil(pan:item):
    body:
        achieve_once is_on(stove)
        # Ensure the stove is turned on
        achieve_on(pan, stove)
        # Place the frying pan on the stove

behavior fry_potatoes(pan:item, potatoes:item):
    body:
        achieve_once inside(potatoes, pan)
        # Place the potato strips inside the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the cut potato strips

        if not in_fryingpan(fryingpan):
            # If there is no oil in the pan, it needs to be added
            observe(fryingpan, "Check if there is oil in the frying pan")

        heat_oil(fryingpan)
        fry_potatoes(fryingpan, potato_strips)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#goal_representation
 
def in_fryingpan(pan: item):
    # Function to check if the oil is in the frying pan
    symbol oil_in_fryingpan = exists oil: item : (is_oil(oil) and inside(oil, pan))
    return oil_in_fryingpan

behavior heat_oil(stove: item, pan: item):
    body:
        achieve_once is_on(stove)
        # Ensure the stove is turned on
        achieve_on(pan, stove)
        # Place the frying pan on the stove

behavior fry_potatoes(pan: item, potatoes: item):
    body:
        achieve_once inside(potatoes, pan)
        # Place the potato strips inside the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the cut potato strips

        if not in_fryingpan(fryingpan):
            # If there is no oil in the pan, it needs to be added
            observe(fryingpan, "Check if there is oil in the frying pan")

        heat_oil(stove, fryingpan)
        fry_potatoes(fryingpan, potato_strips)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def has_oil_in_frying_pan(frying_pan:item):
    # Function to check if there is oil in the frying pan
    symbol has_oil= exists o: item : (is_oil(o) and inside(o, frying_pan))
    return has_oil

behavior fry_potatoes_in_oil(potato_strips:item, frying_pan:item):
    body:
        achieve_once inside(potato_strips, frying_pan)
        # Place the potato strips inside the frying pan
        achieve is_on(frying_pan)
        # Ensure the frying pan remains on for frying

behavior __goal__():
    body:
        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the cut potato strips
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, kitchen_counter_123)
        # Select a frying pan on the kitchen counter

        if has_oil_in_frying_pan(frying_pan):
            # Only proceed if there is oil in the frying pan
            fry_potatoes_in_oil(potato_strips, frying_pan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter_123; available variables: [Variable<frying_pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#goal_representation
 
def has_oil_in_frying_pan(frying_pan:item):
    # Function to check if there is oil in the frying pan
    symbol has_oil= exists o: item : (is_oil(o) and inside(o, frying_pan))
    return has_oil

behavior fry_potatoes_in_oil(potato_strips:item, frying_pan:item):
    body:
        achieve_once inside(potato_strips, frying_pan)
        # Place the potato strips inside the frying pan
        achieve is_on(frying_pan)
        # Ensure the frying pan remains on for frying

behavior __goal__():
    body:
        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the cut potato strips
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 123

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, kitchen_counter)
        # Select a frying pan on the kitchen counter

        if has_oil_in_frying_pan(frying_pan):
            # Only proceed if there is oil in the frying pan
            fry_potatoes_in_oil(potato_strips, frying_pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_glue_2045_around_tray_2068(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(glue,tray_instance)
        else:
            exp(glue,tray_instance)
    eff:
        unknown[glue]=False
        close[glue,tray_instance]=True
        close[tray_instance,glue]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes_in_oil(fryingpan:item, oil:item, potato:item):
    body:
        achieve_once inside(oil, fryingpan) # Pour oil into the frying pan
        achieve_once inside(potato, fryingpan) # Place the potato strips in the frying pan

behavior cook_until_golden_brown(fryingpan:item, stove:item):
    body:
        achieve_once is_on(stove) # Turn on the stove to cook the potatoes
        # Maintain cooking until the potato strips are golden brown
        # This simple form assumes the presence of a function or process that manages cooking based on color change

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind potato: item where:
            is_food_potato(potato) and cut(potato)
        # Select precut potato strips

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_potatoes_in_oil(fryingpan, oil, potato) # Fry the potato strips in oil
        cook_until_golden_brown(fryingpan, stove) # Cook until golden brown

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_oven_127(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def in_fryingpan(o:item, fryingpan:item):
    # Function to check if there is food inside the frying pan
    symbol inside_pan= exists item1: item : (inside(o, fryingpan))
    return inside_pan

def is_item_food(o:item):
    # Function to check if the item is food
    symbol food= is_food(o)
    return food

behavior add_oil_to_pan(oil:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan)

behavior fry_in_oil(fryingpan:item):
    body:
        achieve is_on(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan

        bind oil: item where:
            is_oil(oil)
        
        if exists o: item : (is_item_food(o) and in_fryingpan(o, fryingpan)):
            # Check if the fryingpan has food in it
            achieve close_char(char, fryingpan)
            
        else:
            # If no food is found in the fryingpan, observe to locate food in the environment
            foreach o: item:
                if is_item_food(o) and not visited(o):
                    observe(o, "Check if food is available to fry")
        
        add_oil_to_pan(oil, fryingpan)
        fry_in_oil(fryingpan)

#goal_representation_end

##############################
Error is:
tuple.index(x): x not in tuple
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def has_frying_pan_for_potato_frying(fryingpan: item):
    # Function to check if theres a frying pan available
    symbol has_frying_pan = exists o: item : (is_fryingpan(o) and surfaces(o))
    return has_frying_pan

def has_oil(oil: item):
    # Function to check if theres oil available for frying
    symbol has_oil_available = exists o: item : (is_oil(o) and inside(o, kitchen))
    return has_oil_available

behavior fry_potato_strips_in_oil_until_golden_brown(potato_strips: item, fryingpan: item, oil: item):
    body:
        achieve_once inside(oil, fryingpan) # Pour oil into the frying pan
        achieve_once inside(potato_strips, fryingpan) # Place potato strips into the frying pan
        achieve is_on(stove) # Turn on the stove to fry potato strips

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Select kitchen counter

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and has_frying_pan_for_potato_frying(fryingpan)
        # Select an available frying pan for potato frying

        bind oil: item where:
            is_oil(oil) and has_oil(oil)
        # Select available oil in the kitchen

        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select already cut potato strips
        
        fry_potato_strips_in_oil_until_golden_brown(potato_strips, fryingpan, oil)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: kitchen; available variables: [Variable<oil: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#goal_representation
 
def has_frying_pan_for_potato_frying(fryingpan: item):
    # Function to check if theres a frying pan available
    symbol has_frying_pan = exists o: item : (is_fryingpan(o) and surfaces(o))
    return has_frying_pan

def has_oil(oil: item):
    # Function to check if theres oil available for frying
    symbol has_oil_available = exists o: item : (is_oil(o) and inside(o, kitchen))
    return has_oil_available

behavior fry_potato_strips_in_oil_until_golden_brown(potato_strips: item, fryingpan: item, oil: item):
    body:
        achieve_once inside(oil, fryingpan) # Pour oil into the frying pan
        achieve_once inside(potato_strips, fryingpan) # Place potato strips into the frying pan
        achieve is_on(stove) # Turn on the stove to fry potato strips

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select kitchen counter

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and has_frying_pan_for_potato_frying(fryingpan)
        # Select an available frying pan for potato frying

        bind oil: item where:
            is_oil(oil) and has_oil(oil)
        # Select available oil in the kitchen

        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select already cut potato strips
        
        fry_potato_strips_in_oil_until_golden_brown(potato_strips, fryingpan, oil)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: kitchen; available variables: [Variable<oil: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#goal_representation
 
def has_frying_pan_for_potato_frying(fryingpan: item):
    # Function to check if theres a frying pan available
    symbol has_frying_pan = exists o: item : (is_fryingpan(o) and surfaces(o))
    return has_frying_pan

def has_oil(oil: item):
    # Function to check if theres oil available for frying
    symbol has_oil_available = exists o: item : (is_oil(o) and inside(o, kitchen))
    return has_oil_available

def in_kitchen(o: item):
    # Function to check if an item is inside the kitchen
    symbol is_in_kitchen = exists k: item : (is_kitchen(k) and inside(o, k))
    return is_in_kitchen

behavior fry_potato_strips_in_oil_until_golden_brown(potato_strips: item, fryingpan: item, oil: item):
    body:
        achieve_once inside(oil, fryingpan) # Pour oil into the frying pan
        achieve_once inside(potato_strips, fryingpan) # Place potato strips into the frying pan
        bind stove: item where:
            is_stove(stove) and in_kitchen(stove) # Identify a stove in the kitchen
        achieve is_on(stove) # Turn on the stove to fry potato strips

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen(kitchen)
        # Select kitchen 

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and has_frying_pan_for_potato_frying(fryingpan)
        # Select an available frying pan for potato frying

        bind oil: item where:
            is_oil(oil) and has_oil(oil)
        # Select available oil in the kitchen

        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select already cut potato strips
        
        fry_potato_strips_in_oil_until_golden_brown(potato_strips, fryingpan, oil)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_potato_2107)', 'cut_executor(food_potato_2107)']
Time info:
Time consume: 186 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 7
goal generate times: 7
goal correct times: 3
action_num: 11

Task complete rate:
Keystate: k1 - Requires: 14 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
