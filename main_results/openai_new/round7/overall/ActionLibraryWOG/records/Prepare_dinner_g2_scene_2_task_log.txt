From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_cutting_board_2080(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_chicken,cutting_board_instance)
        else:
            exp(food_chicken,cutting_board_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cutting_board_instance]=True
        close[cutting_board_instance,food_chicken]=True
    

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        foreach item: item:
            if (item == chicken or item == onion) and dirty(item):
                # Clean each dirty item (chicken or onion)
                achieve_once has_water(item)
                wash(item)
                scrub(item)
                rinse(item)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_chicken_2050_around_cutting_board_2080(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_chicken,cutting_board_instance)
        else:
            exp(food_chicken,cutting_board_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cutting_board_instance]=True
        close[cutting_board_instance,food_chicken]=True
    

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior clean_chicken(chicken:item, faucet:item):
    body:
        achieve close_char(char, faucet) # Move close to faucet
        wash(chicken)
        # Wash the chicken under running water
        scrub(chicken)
        # Scrub the chicken to ensure it is thoroughly cleaned
        rinse(chicken)
        # Rinse the chicken with clean water

behavior clean_onion(onion:item, faucet:item):
    body:
        achieve close_char(char, faucet) # Move close to faucet
        wash(onion)
        # Wash the onion under running water
        scrub(onion)
        # Scrub the onion to ensure it is thoroughly cleaned
        rinse(onion)
        # Rinse the onion with clean water

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and dirty(chicken)
        # Bind a dirty chicken item
        
        bind onion: item where:
            is_food_onion(onion) and dirty(onion)
        # Bind a dirty onion item

        bind faucet: item where:
            is_faucet(faucet)
        # Bind a faucet item

        clean_chicken(chicken, faucet)
        # Clean the chicken using the faucet

        clean_onion(onion, faucet)
        # Clean the onion using the faucet
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_cutting_board_2080(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_chicken,cutting_board_instance)
        else:
            exp(food_chicken,cutting_board_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cutting_board_instance]=True
        close[cutting_board_instance,food_chicken]=True
    

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_item(obj: item):
    body:
        symbol is_dirty = exists x: item : (dirty(x))
        if is_dirty:
            achieve_once clean(obj)
        else:
            achieve clean(obj) 

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        wash_item(chicken)
        wash_item(onion)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_item(obj: item):
    body:
        symbol is_dirty = exists x: item : (dirty(x))
        if is_dirty:
            achieve_once clean(obj)
        else:
            achieve clean(obj) 

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        wash_item(chicken)
        wash_item(onion)

##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2080)exp(food_chicken_2050, cutting_board_2080)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(cutting_board_2080)exp(food_onion_2026, cutting_board_2080)walk_executor(food_onion_2026)grab_executor(food_onion_2026)wash_executor(food_onion_2026)walk_executor(kitchen_counter_132)put_executor(food_chicken_2050, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_chicken_2050, cutting_board_2080)
Fail to find food_chicken_2050 around cutting_board_2080. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_onion_2026, cupboard_131)walk_executor(food_onion_2026)grab_executor(food_onion_2026)wash_executor(food_onion_2026)walk_executor(kitchen_counter_132)put_executor(food_chicken_2050, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_onion_2026, cupboard_131)walk_executor(food_onion_2026)grab_executor(food_onion_2026)wash_executor(food_onion_2026)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_onion_2026, cupboard_131)
Fail to find food_onion_2026 around cupboard_131. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Put the chicken and onion into the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_homework_2011_around_bookshelf_188(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(homework,bookshelf_instance)
        else:
            exp(homework,bookshelf_instance)
    eff:
        unknown[homework]=False
        close[homework,bookshelf_instance]=True
        close[bookshelf_instance,homework]=True
    

#exp_behavior_end

#goal_representation
 
def has_food_chicken_and_onion_fixtures():
    # Function to check if the chicken and onion are available
    symbol has_chicken_and_onion=exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and (inside(o, fridge_140) or close_char(char, fridge_140)))
    return has_chicken_and_onion

behavior wash_food_item(obj: item):
    body:
        achieve_once has_water(obj)
        wash(obj)
        rinse(obj)
        scrub(obj)

behavior switch_off_light_obj(obj: item):
    body:
        achieve_once is_off(obj)

behavior retrieve_and_clean_items(chicken: item, onion: item):
    body:
        achieve_once inhand(chicken)
        wash_food_item(chicken)
        achieve_once inhand(onion)
        wash_food_item(onion)

behavior __goal__():
    body:
        if not has_food_chicken_and_onion_fixtures():
            observe(fridge_140, "Check for chicken and onion inside fridge")
        
        bind chicken: item where:
            is_food_chicken(chicken) and (inside(chicken, fridge_140) or close_char(char, fridge_140))
        
        bind onion: item where:
            is_food_onion(onion) and (inside(onion, fridge_140) or close_char(char, fridge_140))

        switch_off_light_obj(fridge_140)
        retrieve_and_clean_items(chicken, onion)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: fridge_140; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2038_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#goal_representation
 
def has_food_chicken_and_onion_fixtures(fridge:item):
    # Function to check if the chicken and onion are available
    symbol has_chicken_and_onion=exists o: item : ((is_food_chicken(o) or is_food_onion(o)) and (inside(o, fridge) or close_char(char, fridge)))
    return has_chicken_and_onion

behavior wash_food_item(obj: item):
    body:
        achieve_once has_water(obj)
        wash(obj)
        rinse(obj)
        scrub(obj)

behavior switch_off_light_obj(obj: item):
    body:
        achieve_once is_off(obj)

behavior retrieve_and_clean_items(chicken: item, onion: item):
    body:
        achieve_once inhand(chicken)
        wash_food_item(chicken)
        achieve_once inhand(onion)
        wash_food_item(onion)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==140
            
        if not has_food_chicken_and_onion_fixtures(fridge):
            observe(fridge, "Check for chicken and onion inside fridge")
        
        bind chicken: item where:
            is_food_chicken(chicken) and (inside(chicken, fridge) or close_char(char, fridge))
        
        bind onion: item where:
            is_food_onion(onion) and (inside(onion, fridge) or close_char(char, fridge))

        switch_off_light_obj(fridge)
        retrieve_and_clean_items(chicken, onion)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_homework_2011_around_kitchen_counter_129(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(homework,kitchen_counter_instance)
        else:
            exp(homework,kitchen_counter_instance)
    eff:
        unknown[homework]=False
        close[homework,kitchen_counter_instance]=True
        close[kitchen_counter_instance,homework]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_chicken_and_dirty(food:item):
    # Function to check if an item is both chicken and dirty
    return is_food_chicken(food) and dirty(food)

def is_food_onion_and_dirty(food:item):
    # Function to check if an item is both onion and dirty
    return is_food_onion(food) and dirty(food)

behavior wash_item(item:item):
    body:
        achieve_once inhand(item)
        # Temporarily hold the item in hand to wash
        achieve clean(item)
        # Once the washing is completed, the item should be clean

behavior __goal__():
    body:
        if exists food_chicken: item : (is_food_chicken_and_dirty(food_chicken)):
            # If a dirty chicken is found, wash it
            bind food_chicken: item where:
                is_food_chicken_and_dirty(food_chicken)
            wash_item(food_chicken)

        if exists food_onion: item : (is_food_onion_and_dirty(food_onion)):
            # If a dirty onion is found, wash it
            bind food_onion: item where:
                is_food_onion_and_dirty(food_onion)
            wash_item(food_onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2108_around_sink_133(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_clean(item: item):
    body:
        achieve_once clean(item)

behavior find_item_and_wash(item_category: (item  bool), location_category: (item  bool)):
    body:
        foreach loc: item:
            if location_category(loc) and not visited(loc):
                observe(loc, "Find the item to clean")
                foreach item: item:
                    if item_category(item) and close_char(char, item) and dirty(item):
                        wash_clean(item)

behavior __goal__():
    body:
        find_item_and_wash(is_food_chicken, is_fridge)
        find_item_and_wash(is_food_onion, is_cupboard)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('LPAR', '(') at line 5884, column 44.
Expected one of: 
	* VECTOR
	* BASIC_TYPENAME
Previous tokens: [Token('COLON', ':')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_homework_2011_around_bookshelf_188(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(homework,bookshelf_instance)
        else:
            exp(homework,bookshelf_instance)
    eff:
        unknown[homework]=False
        close[homework,bookshelf_instance]=True
        close[bookshelf_instance,homework]=True
    

behavior find_oil_2102_around_kitchen_counter_132(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#goal_representation

behavior wash_clean(item: item):
    body:
        achieve_once clean(item)

behavior find_item_and_wash(item_category: (item, bool), location_category: (item, bool)):
    body:
        foreach loc: item:
            if location_category(loc) and not visited(loc):
                observe(loc, "Find the item to clean")
                foreach it: item:
                    if item_category(it) and close_char(char, it) and dirty(it):
                        wash_clean(it)

behavior __goal__():
    body:
        find_item_and_wash(is_food_chicken, is_fridge)
        find_item_and_wash(is_food_onion, is_cupboard)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('LPAR', '(') at line 5902, column 44.
Expected one of: 
	* VECTOR
	* BASIC_TYPENAME
Previous tokens: [Token('COLON', ':')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2038_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2108_around_dishwasher_143(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(detergent,dishwasher_instance)
        else:
            exp(detergent,dishwasher_instance)
    eff:
        unknown[detergent]=False
        close[detergent,dishwasher_instance]=True
        close[dishwasher_instance,detergent]=True
    

#goal_representation
 
behavior wash_clean(item: item):
    body:
        achieve_clean(item)

behavior find_item_and_wash(item_category: item):
    body:
        foreach loc: item:
            if is_fridge(loc) or is_cupboard(loc):
                observe(loc, "Find the item to clean")
                foreach it: item:
                    if item_category(it) and close_char(char, it) and dirty(it):
                        wash_clean(it)

behavior __goal__():
    body:
        find_item_and_wash(is_food_chicken)
        find_item_and_wash(is_food_onion)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(cutting_board_2080)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)']
Time info:
Time consume: 126 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 119
goal generate times: 6
goal correct times: 2
action_num: 6

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
