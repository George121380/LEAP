From agent.py
Reset goals: The sub-goals are: 
['1. Fry the steak.', '2. Cut the steak.', '3. Put the cut steak on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_kitchen_counter_230(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_steak_2008_around_fridge_289(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_steak(stove:item, steak:item, fryingpan:item):
    body:
        achieve_once inside(steak, fryingpan) 
        # Place the steak in the frying pan
        achieve_once inside(fryingpan, stove) 
        # Place the frying pan on the stove
        achieve_once is_on(stove) 
        # Turn the stove on to fry the steak

behavior remove_steak(fryingpan:item, plate:item, steak:item):
    body:
        achieve_once on(steak, plate) 
        # Move the cooked steak from the frying pan to the plate

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove for frying the steak
        bind steak: item where:
            is_food_steak(steak)
        # Select a steak
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        fry_steak(stove, steak, fryingpan)
        remove_steak(fryingpan, plate, steak)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fry_steak(stove:item, steak:item, fryingpan:item):
    body:
        achieve_once inside(steak, fryingpan) 
        # Place the steak in the frying pan
        achieve_once inside(fryingpan, stove) 
        # Place the frying pan on the stove
        achieve_once is_on(stove) 
        # Turn the stove on to fry the steak

behavior remove_steak(fryingpan:item, plate:item, steak:item):
    body:
        achieve_once on(steak, plate) 
        # Move the cooked steak from the frying pan to the plate

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove for frying the steak
        bind steak: item where:
            is_food_steak(steak)
        # Select a steak
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        fry_steak(stove, steak, fryingpan)
        remove_steak(fryingpan, plate, steak)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_steak_2008, fridge_289)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(fryingpan_2083)putin_executor(food_steak_2008, fryingpan_2083)walk_executor(stove_2065)open_executor(stove_2065)walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)putin_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(kitchen_counter_230)exp(plate_1000, kitchen_counter_230)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(fryingpan_2083, kitchen_counter_230)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_steak_2008, fridge_289)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(fryingpan_2083)putin_executor(food_steak_2008, fryingpan_2083)walk_executor(stove_2065)open_executor(stove_2065)walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)putin_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(kitchen_counter_230)exp(plate_1000, kitchen_counter_230)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_steak_2008, fridge_289)
Find food_steak_2008. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2008)walk_executor(fryingpan_2083)putin_executor(food_steak_2008, fryingpan_2083)walk_executor(stove_2065)open_executor(stove_2065)walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)putin_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)walk_executor(kitchen_counter_230)exp(plate_1000, kitchen_counter_230)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_steak_2008 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_steak_2008, fryingpan_2083)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_steak_2008 is inside fryingpan_2083. food_steak_2008 is close fryingpan_2083. fryingpan_2083 is close food_steak_2008. food_steak_2008 released by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is opened. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
putin_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is inside stove_2065. fryingpan_2083 is close stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(plate_1000, kitchen_counter_230)
Fail to find plate_1000 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(plate_1000, cupboard_229)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(plate_1000, cupboard_229)
Fail to find plate_1000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)exp(plate_1000, pot_2069)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
exp(plate_1000, pot_2069)
Fail to find plate_1000 around pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_319)exp(plate_1000, home_office_319)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(home_office_319)

##############################
From agent.py
exp(plate_1000, home_office_319)
Fail to find plate_1000 around home_office_319. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_319)exp(plate_1000, home_office_319)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(home_office_319)

##############################
From agent.py
exp(plate_1000, home_office_319)
Fail to find plate_1000 around home_office_319. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: The target item, plate_1000, is located in the dining_room_201. You can find plate_1000 directly on top of sink_231. The proximity to sink_231 should help you identify and retrieve plate_1000 effectively.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, plate_1000, is located in the dining_room_201. You can find plate_1000 directly on top of sink_231. The proximity to sink_231 should help you identify and retrieve plate_1000 effectively.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_steak_2008 around fridge_289.
Action 7: Grab food_steak_2008.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_steak_2008 into fryingpan_2083.
Action 10: Walk to stove_2065.
Action 11: Open stove_2065.
Action 12: Walk to fryingpan_2083.
Action 13: Grab fryingpan_2083.
Action 14: Walk to stove_2065.
Action 15: Put fryingpan_2083 into stove_2065.
Action 16: Switch on stove_2065.
Action 17: Walk to kitchen_counter_230.
Action 18: look for plate_1000 around kitchen_counter_230.
Action 19: Walk to cupboard_229.
Action 20: Open cupboard_229.
Action 21: look for plate_1000 around cupboard_229.
Action 22: Walk to pot_2069.
Action 23: Open pot_2069.
Action 24: look for plate_1000 around pot_2069.
Action 25: Walk to home_office_319.
Action 26: look for plate_1000 around home_office_319.
Action 27: Walk to home_office_319.
Action 28: look for plate_1000 around home_office_319.
Action 29: Walk to dishwasher_1001.
Action 30: Open dishwasher_1001.

##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the food_steak_2008. Robot is close to the fryingpan_2083. Grabbing food_steak_2008 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_steak_2008. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_steak_2008, plate_1000)
Robot find: Robot is close to the food_steak_2008. Robot is close to the plate_1000. Robot is close to the sink_231. food_steak_2008 is close plate_1000. plate_1000 is close food_steak_2008. food_steak_2008 is on plate_1000. food_steak_2008 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_table_355(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_steak_with_knife(knife:item, steak:item):
    body:
        achieve_once inhand(knife)
        achieve_once cut(steak)

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        
        bind steak: item where:
            is_food_steak(steak)

        cut_steak_with_knife(knife, steak)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cut_steak_with_knife(knife:item, steak:item):
    body:
        achieve_once inhand(knife)
        achieve_once cut(steak)

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        
        bind steak: item where:
            is_food_steak(steak)

        cut_steak_with_knife(knife, steak)

##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_steak_2008)grab_executor(food_steak_2008)walk_executor(cutting_board_2051)put_executor(food_steak_2008, cutting_board_2051)walk_executor(food_steak_2008)cut_executor(food_steak_2008)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the plate_1000. 
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the plate_1000. Grabbing food_steak_2008 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_steak_2008, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_steak_2008. food_steak_2008 is close cutting_board_2051. food_steak_2008 is on cutting_board_2051. food_steak_2008 released by left hand. 
##############################
From agent.py
walk_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_table_355(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_bowl_2072_around_drawing_241(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==241
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(bowl,drawing_instance)
        else:
            exp(bowl,drawing_instance)
    eff:
        unknown[bowl]=False
        close[bowl,drawing_instance]=True
        close[drawing_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cut_steak_on_plate(cut_steak: item, plate: item):
    body:
        achieve_once on(cut_steak, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and inside(plate, dining_room_201)
        # Select the specific plate (plate_1000) in the dining room
        
        bind cut_steak: item where:
            is_food_steak(cut_steak) and cut(cut_steak)
        # Select the cut steak
        
        place_cut_steak_on_plate(cut_steak, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room_201; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2080_around_table_355(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_chair_2004_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#goal_representation
 
behavior place_cut_steak_on_plate(cut_steak: item, plate: item):
    body:
        achieve_once on(cut_steak, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and inside(plate, dining_room) 
        # Select the specific plate (plate_1000) in the dining room

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Declare the dining room

        bind cut_steak: item where:
            is_food_steak(cut_steak) and cut(cut_steak)
        # Select the cut steak
        
        place_cut_steak_on_plate(cut_steak, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2081_around_table_355(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_clothes_gloves_2046_around_basket_for_clothes_2006(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

behavior find_chair_106_around_coffee_table_2068(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(chair,coffee_table_instance)
        else:
            exp(chair,coffee_table_instance)
    eff:
        unknown[chair]=False
        close[chair,coffee_table_instance]=True
        close[coffee_table_instance,chair]=True
    

#goal_representation
behavior place_cut_steak_on_plate(cut_steak: item, plate: item):
    body:
        achieve_once on(cut_steak, plate)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Declare the dining room

        bind plate: item where:
            is_plate(plate) and inside(plate, dining_room) 
        # Select the specific plate (plate_1000) in the dining room
        
        bind cut_steak: item where:
            is_food_steak(cut_steak) and cut(cut_steak)
        # Select the cut steak
        
        place_cut_steak_on_plate(cut_steak, plate)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_table_355(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_cut_steak_on_plate(steak: item, plate: item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate) and id[plate]==1000
        # Select plate with ID 1000
        
        put_cut_steak_on_plate(steak, plate)
        # Place the cut steak on the plate

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_cut_steak_on_plate(steak: item, plate: item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate) and id[plate]==1000
        # Select plate with ID 1000
        
        put_cut_steak_on_plate(steak, plate)
        # Place the cut steak on the plate

##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2008)walk_executor(plate_1000)put_executor(food_steak_2008, plate_1000)
##############################
From agent.py
grab_executor(food_steak_2008)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the cutting_board_2051. Grabbing food_steak_2008 by left hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_steak_2008, plate_1000)
Robot find: Robot is close to the knife_2050. Robot is close to the food_steak_2008. Robot is close to the plate_1000. Robot is close to the sink_231. food_steak_2008 is close plate_1000. food_steak_2008 is on plate_1000. food_steak_2008 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried a steak. Then cut it and put it on a plate.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_steak_2008)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_steak_2008, fryingpan_2083)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'putin_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(home_office_319)', 'walk_executor(home_office_319)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(sink_231)', 'walk_executor(food_steak_2008)', 'grab_executor(food_steak_2008)', 'walk_executor(plate_1000)', 'put_executor(food_steak_2008, plate_1000)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_steak_2008)', 'grab_executor(food_steak_2008)', 'walk_executor(cutting_board_2051)', 'put_executor(food_steak_2008, cutting_board_2051)', 'walk_executor(food_steak_2008)', 'cut_executor(food_steak_2008)', 'grab_executor(food_steak_2008)', 'walk_executor(plate_1000)', 'put_executor(food_steak_2008, plate_1000)']
Time info:
Time consume: 230 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 143
goal generate times: 4
goal correct times: 0
action_num: 39

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
