From agent.py
Reset goals: The sub-goals are: 
['1. Find the fish and other necessary ingredients for the soup.', '2. Wash and prepare the fish and ingredients.', '3. Cook the fish and ingredients in a pot of water until the soup is ready.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2068_around_kitchen_counter_132(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_carrot_2047_around_kitchen_counter_132(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_potato_2066_around_kitchen_counter_132(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_vegetable_2072_around_kitchen_counter_132(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_kitchen_counter_132(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def has_ingredients(item: item):
    # Function to check if an item is classified as fish or other necessary ingredients
    symbol is_valid_ingredient = is_food_fish(item) or is_food_vegetable(item)
    return is_valid_ingredient

behavior __goal__():
    body:
        # Check all unvisited items in the scene and identify fish or other necessary ingredients for the soup
        foreach item: item:
            if not visited(item) and has_ingredients(item):
                observe(item, "Check if this is a fish or other necessary ingredient for the soup")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_ingredients(item: item):
    # Function to check if an item is classified as fish or other necessary ingredients
    symbol is_valid_ingredient = is_food_fish(item) or is_food_vegetable(item)
    return is_valid_ingredient

behavior __goal__():
    body:
        # Check all unvisited items in the scene and identify fish or other necessary ingredients for the soup
        foreach item: item:
            if not visited(item) and has_ingredients(item):
                observe(item, "Check if this is a fish or other necessary ingredient for the soup")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)obs(food_fish_2054, Check if this is a fish or other necessary ingredient for the soup)walk_executor(kitchen_counter_132)exp(food_vegetable_2072, kitchen_counter_132)walk_executor(food_vegetable_2072)obs(food_vegetable_2072, Check if this is a fish or other necessary ingredient for the soup)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_fish_2054, fridge_140)
Find food_fish_2054. 
##############################
From agent.py-> find a plan in act()
obs(food_fish_2054, Check if this is a fish or other necessary ingredient for the soup)obs(food_vegetable_2072, Check if this is a fish or other necessary ingredient for the soup)
##############################
From agent.py
obs(food_fish_2054, Check if this is a fish or other necessary ingredient for the soup)
Get this information:  food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is DIRTY.
##############################
From agent.py
obs(food_vegetable_2072, Check if this is a fish or other necessary ingredient for the soup)
Get this information:  food_vegetable_2072 is close to fridge_140. food_vegetable_2072 is close to character_219. food_vegetable_2072 is inside dining_room_1. food_vegetable_2072 is inside fridge_140. food_vegetable_2072 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2093_around_wallshelf_187(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(pot,wallshelf_instance)
        else:
            exp(pot,wallshelf_instance)
    eff:
        unknown[pot]=False
        close[pot,wallshelf_instance]=True
        close[wallshelf_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_item(item:item):
    body:
        achieve_once clean(item)

behavior prepare_fish_and_ingredients(fish:item, ingredients:list):
    body:
        wash_item(fish)
        foreach ingredient: item in ingredients:
            wash_item(ingredient)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and visited(fish)
        # Select fish that has been identified around fridge_140
        
        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)
        # Select vegetable that has been identified around fridge_140
        
        prepare_fish_and_ingredients(fish, [vegetable])

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5896, column 34.
Expected one of: 
	* COMMA
	* COLON
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2037_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_dough_2021_around_cupboard_131(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dough,cupboard_instance)
        else:
            exp(dough,cupboard_instance)
    eff:
        unknown[dough]=False
        close[dough,cupboard_instance]=True
        close[cupboard_instance,dough]=True
    

behavior find_shoes_2001_around_washing_machine_2041(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(shoes,washing_machine_instance)
        else:
            exp(shoes,washing_machine_instance)
    eff:
        unknown[shoes]=False
        close[shoes,washing_machine_instance]=True
        close[washing_machine_instance,shoes]=True
    

#goal_representation

behavior wash_item(item:item):
    body:
        achieve_once clean(item)

behavior prepare_fish_and_ingredients(fish:item, ingredients:list):
    body:
        wash_item(fish)
        foreach ingredient: item:
            wash_item(ingredient)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and visited(fish)
        
        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)
        
        prepare_fish_and_ingredients(fish, [vegetable])

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "typed_argument":

Unknown type: list, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2108_around_dishwasher_143(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(detergent,dishwasher_instance)
        else:
            exp(detergent,dishwasher_instance)
    eff:
        unknown[detergent]=False
        close[detergent,dishwasher_instance]=True
        close[dishwasher_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#goal_representation

behavior wash_item(item: item):
    body:
        achieve_once clean(item)

behavior prepare_fish_and_ingredients(fish: item, ingredients: item):
    body:
        wash_item(fish)
        wash_item(ingredients)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and visited(fish)
        
        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)
        
        prepare_fish_and_ingredients(fish, vegetable)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior wash_item(item: item):
    body:
        achieve_once clean(item)

behavior prepare_fish_and_ingredients(fish: item, ingredients: item):
    body:
        wash_item(fish)
        wash_item(ingredients)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and visited(fish)
        
        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)
        
        prepare_fish_and_ingredients(fish, vegetable)

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fryingpan_2107_around_cupboard_131(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_pot_2093_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_correct_food_item(item: item):
    # Function to check if the given item is part of the fish soup ingredients
    return is_food_fish(item) or is_food_vegetable(item)

def needs_washing(item: item):
    # Function to determine if an item needs washing
    symbol is_clean_food = clean(item)
    return not is_clean_food

behavior wash_and_clean(item: item):
    body:
        achieve_once has_water(item)
        wash(item)

behavior prepare_ingredients():
    # Prepare ingredients by washing and cleaning
    body:
        foreach ingredient: item:
            if is_correct_food_item(ingredient) and needs_washing(ingredient):
                wash_and_clean(ingredient)

behavior __goal__():
    body:
        # Find the fish and vegetable intended for soup and ensure they are clean and prepped
        bind fish: item where:
            is_food_fish(fish)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        prepare_ingredients()

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_correct_food_item(item: item):
    # Function to check if the given item is part of the fish soup ingredients
    return is_food_fish(item) or is_food_vegetable(item)

def needs_washing(item: item):
    # Function to determine if an item needs washing
    symbol is_clean_food = clean(item)
    return not is_clean_food

behavior wash_and_clean(item: item):
    body:
        achieve_once has_water(item)
        wash(item)

behavior prepare_ingredients():
    # Prepare ingredients by washing and cleaning
    body:
        foreach ingredient: item:
            if is_correct_food_item(ingredient) and needs_washing(ingredient):
                wash_and_clean(ingredient)

behavior __goal__():
    body:
        # Find the fish and vegetable intended for soup and ensure they are clean and prepped
        bind fish: item where:
            is_food_fish(fish)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        prepare_ingredients()

##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2054)walk_executor(faucet_308)switchoff_executor(faucet_308)switchon_executor(faucet_308)wash_executor(food_fish_2054)switchoff_executor(faucet_308)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)walk_executor(kitchen_counter_132)put_executor(food_fish_2054, kitchen_counter_132)switchoff_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the food_fish_2054. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the food_fish_2054. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
switchon_executor(faucet_308)
Robot find: Robot is close to the food_fish_2054. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2054)
Robot find: Robot is close to the food_fish_2054. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. food_fish_2054 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the food_fish_2054. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. 
##############################
From agent.py
put_executor(food_fish_2054, kitchen_counter_132)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. food_fish_2054 is close kitchen_counter_132. kitchen_counter_132 is close food_fish_2054. food_fish_2054 is on kitchen_counter_132. food_fish_2054 released by right hand. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. faucet_134 is turned off. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. food_vegetable_2072 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bills_2009_around_cupboard_131(bills:item):
    goal: not unknown(bills)
    body:
        assert is_bills(bills)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bills,cupboard_instance)
        else:
            exp(bills,cupboard_instance)
    eff:
        unknown[bills]=False
        close[bills,cupboard_instance]=True
        close[cupboard_instance,bills]=True
    

behavior find_pot_2093_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_until_ready(fish:item, vegetable:item, pot:item, stove:item):
    body:
        achieve_once inside(fish, pot)
        # Place the fish inside the pot
        achieve_once inside(vegetable, pot)
        # Place the vegetable inside the pot
        achieve is_on(stove)
        # Ensure the stove is on

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2054
        # Select the fish with ID 2054

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
        # Select the vegetable with ID 2072
        
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)
        
        cook_until_ready(fish, vegetable, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_until_ready(fish:item, vegetable:item, pot:item, stove:item):
    body:
        achieve_once inside(fish, pot)
        # Place the fish inside the pot
        achieve_once inside(vegetable, pot)
        # Place the vegetable inside the pot
        achieve is_on(stove)
        # Ensure the stove is on

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2054
        # Select the fish with ID 2054

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072
        # Select the vegetable with ID 2072
        
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)
        
        cook_until_ready(fish, vegetable, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(pot_54)putin_executor(food_fish_2054, pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(food_fish_2054)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the food_fish_2054. 
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the food_fish_2054. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_fish_2054, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the pot_54. food_fish_2054 is inside pot_54. pot_54 is close food_fish_2054. food_fish_2054 is close pot_54. food_fish_2054 released by right hand. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_fish_2054. Robot is close to the oven_141. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_fish_2054)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'switchon_executor(faucet_308)', 'wash_executor(food_fish_2054)', 'switchoff_executor(faucet_308)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(faucet_134)', 'walk_executor(kitchen_counter_132)', 'put_executor(food_fish_2054, kitchen_counter_132)', 'switchoff_executor(faucet_134)', 'switchon_executor(faucet_134)', 'wash_executor(food_vegetable_2072)', 'switchoff_executor(faucet_134)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(food_fish_2054)', 'grab_executor(food_fish_2054)', 'walk_executor(pot_54)', 'putin_executor(food_fish_2054, pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)']
Time info:
Time consume: 127 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 126
goal generate times: 4
goal correct times: 2
action_num: 27

Task complete rate:
Keystate: k1 - Requires: 23 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
