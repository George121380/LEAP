From agent.py
Reset goals: The sub-goals are: 
['1. Find the noodles and chicken.', '2. Boil the noodles and chicken together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_fridge_126(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_noodles,fridge_instance)
        else:
            exp(food_noodles,fridge_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,fridge_instance]=True
        close[fridge_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
def has_noodles_and_chicken(x: item):
    # Function to check if the item or location contains noodles and chicken
    symbol has_noodles=exists o: item : (is_food_noodles(o) and inside(o, x))
    symbol has_chicken=exists o: item : (is_food_chicken(o) and inside(o, x))
    return has_noodles and has_chicken

behavior __goal__():
    body:
        if exists x: item : (has_noodles_and_chicken(x)):
            # If an area contains noodles and chicken based on existing information, navigate to that area
            bind x: item where:
                has_noodles_and_chicken(x)
            achieve close_char(char, x)

        else:
            # Observe unvisited items and areas to locate noodles and chicken
            foreach x: item:
                if not visited(x):
                    observe(x, "Check for noodles and chicken")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_fridge_126(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_noodles,fridge_instance)
        else:
            exp(food_noodles,fridge_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,fridge_instance]=True
        close[fridge_instance,food_noodles]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def has_dry_pasta_or_chicken(fridge:item):
    # Function to check if there are noodles or chicken in a specified location
    symbol has_dry_pasta_or_chicken = exists o: item : ((is_dry_pasta(o) or is_food_chicken(o)) and inside(o, fridge))
    return has_dry_pasta_or_chicken

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and has_dry_pasta_or_chicken(fridge)):
            # Check if there is a fridge with noodles or chicken based on the available information
            bind fridge: item where:
                is_fridge(fridge) and has_dry_pasta_or_chicken(fridge) 
            # Select a fridge that has noodles or chicken
            achieve close_char(char, fridge)
            # Move the character closer to the fridge with noodles or chicken

        else:
            # If no fridge with noodles or chicken is found, initiate exploration to locate one
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    # Check all unvisited fridges
                    observe(fridge, "Check is there any noodles or chicken in the fridge")
                    # Observe whether each fridge has any noodles or chicken

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_dry_pasta_or_chicken(fridge:item):
    # Function to check if there are noodles or chicken in a specified location
    symbol has_dry_pasta_or_chicken = exists o: item : ((is_dry_pasta(o) or is_food_chicken(o)) and inside(o, fridge))
    return has_dry_pasta_or_chicken

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and has_dry_pasta_or_chicken(fridge)):
            # Check if there is a fridge with noodles or chicken based on the available information
            bind fridge: item where:
                is_fridge(fridge) and has_dry_pasta_or_chicken(fridge) 
            # Select a fridge that has noodles or chicken
            achieve close_char(char, fridge)
            # Move the character closer to the fridge with noodles or chicken

        else:
            # If no fridge with noodles or chicken is found, initiate exploration to locate one
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    # Check all unvisited fridges
                    observe(fridge, "Check is there any noodles or chicken in the fridge")
                    # Observe whether each fridge has any noodles or chicken

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)obs(fridge_126, Check is there any noodles or chicken in the fridge)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
obs(fridge_126, Check is there any noodles or chicken in the fridge)
Get this information:  sauce_2148 is inside fridge_126. food_snack_2110 is inside fridge_126. fridge_126 is on floor_44. food_steak_2080 is inside fridge_126. food_donut_2091 is inside fridge_126. food_oatmeal_2102 is inside fridge_126. food_banana_2083 is inside fridge_126. food_food_2094 is inside fridge_126. food_vegetable_2113 is inside fridge_126. food_carrot_2086 is inside fridge_126. food_onion_2048 is inside fridge_126. food_peanut_butter_2105 is inside fridge_126. fridge_126 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_ice_cream_2097 is inside fridge_126. food_rice_2108 is inside fridge_126. food_apple_2081 is inside fridge_126. food_lemon_2100 is inside fridge_126. food_sugar_2111 is inside fridge_126. food_food_2073 is inside fridge_126. food_egg_2092 is inside fridge_126. food_orange_2103 is inside fridge_126. food_food_2046 is inside fridge_126. food_fruit_2095 is inside fridge_126. food_pizza_2106 is inside fridge_126. food_cereal_2087 is inside fridge_126. food_jam_2098 is inside fridge_126. food_dessert_2090 is inside fridge_126. food_salt_2109 is inside fridge_126. food_bacon_2082 is inside fridge_126. food_fish_2093 is inside fridge_126. food_noodles_2101 is inside fridge_126. food_turkey_2112 is inside fridge_126. fridge_126 is close to food_onion_2048. fridge_126 is close to wall_179. fridge_126 is close to ceilinglamp_137. fridge_126 is close to ceiling_53. fridge_126 is close to ceiling_54. fridge_126 is close to food_food_2073. fridge_126 is close to basket_for_clothes_2078. fridge_126 is close to washing_machine_2079. fridge_126 is close to food_steak_2080. fridge_126 is close to food_apple_2081. fridge_126 is close to food_bacon_2082. fridge_126 is close to food_banana_2083. fridge_126 is close to floor_163. fridge_126 is close to food_cake_2085. fridge_126 is close to food_carrot_2086. fridge_126 is close to food_cereal_2087. fridge_126 is close to food_cheese_2088. fridge_126 is close to food_chicken_2089. fridge_126 is close to food_dessert_2090. fridge_126 is close to food_donut_2091. fridge_126 is close to food_egg_2092. fridge_126 is close to food_fish_2093. fridge_126 is close to food_food_2094. fridge_126 is close to food_fruit_2095. fridge_126 is close to food_hamburger_2096. fridge_126 is close to food_ice_cream_2097. fridge_126 is close to food_jam_2098. fridge_126 is close to food_lemon_2100. fridge_126 is close to food_noodles_2101. fridge_126 is close to food_oatmeal_2102. fridge_126 is close to food_orange_2103. fridge_126 is close to food_onion_2104. fridge_126 is close to food_peanut_butter_2105. fridge_126 is close to food_pizza_2106. fridge_126 is close to food_potato_2107. fridge_126 is close to food_rice_2108. fridge_126 is close to food_salt_2109. fridge_126 is close to food_snack_2110. fridge_126 is close to food_sugar_2111. fridge_126 is close to food_turkey_2112. fridge_126 is close to food_vegetable_2113. fridge_126 is close to floor_164. fridge_126 is close to door_61. fridge_126 is close to doorjamb_190. fridge_126 is close to desk_193. fridge_126 is close to wall_66. fridge_126 is close to wall_67. fridge_126 is close to powersocket_72. fridge_126 is close to light_73. fridge_126 is close to computer_209. fridge_126 is close to cpuscreen_210. fridge_126 is close to floor_169. fridge_126 is close to keyboard_211. fridge_126 is close to light_212. fridge_126 is close to mouse_213. fridge_126 is close to mousepad_214. fridge_126 is close to food_food_2001. fridge_126 is close to floor_44. fridge_126 is close to floor_45. fridge_126 is close to sauce_2148. fridge_126 is close to food_food_1000. fridge_126 is close to wall_175. fridge_126 is close to food_food_2046. fridge_126 is close to character_240. food_cake_2085 is inside fridge_126. food_onion_2104 is inside fridge_126. food_hamburger_2096 is inside fridge_126. food_potato_2107 is inside fridge_126. food_food_2001 is inside fridge_126. food_cheese_2088 is inside fridge_126. fridge_126 is OPEN. fridge_126 is CLEAN. fridge_126 is OFF. fridge_126 is PLUGGED_IN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2041_around_cupboard_117(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_clothes_socks_2159_around_basket_for_clothes_2078(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_items_in_pot(noodles: item, chicken: item, pot: item, stove: item):
    body:
        achieve is_on(stove) # Ensure the stove is on for boiling
        achieve_once inside(noodles, pot) # Add noodles to the pot
        achieve_once inside(chicken, pot) # Add chicken to the pot
        # The pot should be placed on the stove for cooking
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Bind the noodles item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind the chicken item

        bind pot: item where:
            is_pot(pot)
        # Bind the pot item

        bind stove: item where:
            is_stove(stove)
        # Bind the stove item

        boil_items_in_pot(noodles, chicken, pot, stove)
        # Boiling noodles and chicken in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_items_in_pot(noodles: item, chicken: item, pot: item, stove: item):
    body:
        achieve is_on(stove) # Ensure the stove is on for boiling
        achieve_once inside(noodles, pot) # Add noodles to the pot
        achieve_once inside(chicken, pot) # Add chicken to the pot
        # The pot should be placed on the stove for cooking
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Bind the noodles item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind the chicken item

        bind pot: item where:
            is_pot(pot)
        # Bind the pot item

        bind stove: item where:
            is_stove(stove)
        # Bind the stove item

        boil_items_in_pot(noodles, chicken, pot, stove)
        # Boiling noodles and chicken in the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(cupboard_117)exp(pot_78, cupboard_117)walk_executor(pot_78)open_executor(pot_78)walk_executor(food_noodles_2101)grab_executor(food_noodles_2101)walk_executor(pot_78)putin_executor(food_noodles_2101, pot_78)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(pot_78, cupboard_117)
Find pot_78. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_noodles_2101)grab_executor(food_noodles_2101)walk_executor(pot_78)putin_executor(food_noodles_2101, pot_78)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(food_noodles_2101)
Robot find: Robot is close to the food_noodles_2101. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_noodles_2101)
Robot find: Robot is close to the food_noodles_2101. Robot is close to the fridge_126. Grabbing food_noodles_2101 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the food_noodles_2101. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
putin_executor(food_noodles_2101, pot_78)
Robot find: Robot is close to the food_noodles_2101. Robot is close to the pot_78. Robot is close to the oven_127. food_noodles_2101 is close pot_78. pot_78 is close food_noodles_2101. food_noodles_2101 is inside pot_78. food_noodles_2101 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the food_noodles_2101. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
putin_executor(food_chicken_2089, pot_78)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the food_noodles_2101. Robot is close to the pot_78. Robot is close to the oven_127. pot_78 is close food_chicken_2089. food_chicken_2089 is inside pot_78. food_chicken_2089 is close pot_78. food_chicken_2089 released by right hand. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the food_noodles_2101. Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(cupboard_117)', 'walk_executor(food_noodles_2101)', 'grab_executor(food_noodles_2101)', 'walk_executor(pot_78)', 'putin_executor(food_noodles_2101, pot_78)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(pot_78)', 'putin_executor(food_chicken_2089, pot_78)', 'grab_executor(pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)']
Time info:
Time consume: 81 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 77
goal generate times: 3
goal correct times: 0
action_num: 17

Task complete rate:
Keystate: k1 - Requires: 20 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
