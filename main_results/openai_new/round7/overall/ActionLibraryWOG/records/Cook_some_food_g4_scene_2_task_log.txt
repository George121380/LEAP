From agent.py
Reset goals: The sub-goals are: 
['1. Wash the vegetables and place them in the pot.', '2. Boil the vegetables in the pot. ', '3. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_kitchen_counter_132(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetable:item):
    body:
        achieve_once clean(vegetable)
        # Ensure the vegetable is clean

behavior place_in_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)
        # Put the vegetable inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                # Check all vegetables that need to be washed
                wash_vegetables(vegetable)
            
            if is_food_vegetable(vegetable) and clean(vegetable):
                # Check all clean vegetables to place them in the pot
                place_in_pot(vegetable, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bills_2009_around_filing_cabinet_378(bills:item):
    goal: not unknown(bills)
    body:
        assert is_bills(bills)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(bills,filing_cabinet_instance)
        else:
            exp(bills,filing_cabinet_instance)
    eff:
        unknown[bills]=False
        close[bills,filing_cabinet_instance]=True
        close[filing_cabinet_instance,bills]=True
    

behavior find_food_vegetable_2072_around_kitchen_counter_132(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior wash_vegetable(vegetable:item):
    body:
        achieve clean(vegetable)

behavior place_in_pot(item:item, pot:item):
    body:
        achieve_once inside(item, pot)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind pot: item where:
            is_pot(pot)
        wash_vegetable(vegetable)
        place_in_pot(vegetable, pot)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior wash_vegetable(vegetable:item):
    body:
        achieve clean(vegetable)

behavior place_in_pot(item:item, pot:item):
    body:
        achieve_once inside(item, pot)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind pot: item where:
            is_pot(pot)
        wash_vegetable(vegetable)
        place_in_pot(vegetable, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_vegetable_2072, kitchen_counter_132)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_132)exp(pot_54, kitchen_counter_132)walk_executor(pot_54)open_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_vegetable_2072, kitchen_counter_132)
Fail to find food_vegetable_2072 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_vegetable_2072, cupboard_131)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(pot_54)open_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, cupboard_131)
Fail to find food_vegetable_2072 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_vegetable_2072, cupboard_130)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(pot_54)open_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_vegetable_2072, cupboard_130)
Fail to find food_vegetable_2072 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2080)exp(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(pot_54)open_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_vegetable_2072, cutting_board_2080)
Fail to find food_vegetable_2072 around cutting_board_2080. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(food_vegetable_2072, kitchen_counter_129)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(pot_54)open_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(food_vegetable_2072, kitchen_counter_129)
Fail to find food_vegetable_2072 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)exp(food_vegetable_2072, pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find food_vegetable_2072 ?
Answer: The target item, food_vegetable_2072, can be found inside dining_room_1. Specifically, it is located inside fridge_140. To identify it, look for food_vegetable_2072 among other items inside the fridge.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, food_vegetable_2072, can be found inside dining_room_1. Specifically, it is located inside fridge_140. To identify it, look for food_vegetable_2072 among other items inside the fridge.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for food_vegetable_2072 around kitchen_counter_132.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for food_vegetable_2072 around cupboard_131.
Action 6: Walk to cupboard_130.
Action 7: look for food_vegetable_2072 around cupboard_130.
Action 8: Walk to cutting_board_2080.
Action 9: look for food_vegetable_2072 around cutting_board_2080.
Action 10: Walk to kitchen_counter_129.
Action 11: look for food_vegetable_2072 around kitchen_counter_129.
Action 12: Walk to pot_54.
Action 13: Open pot_54.

##############################
From agent.py
exp(food_vegetable_2072, pot_54)
Fail to find food_vegetable_2072 around pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. food_vegetable_2072 is cleaned. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2100_around_home_office_161(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd,home_office_instance)
        else:
            exp(cd,home_office_instance)
    eff:
        unknown[cd]=False
        close[cd,home_office_instance]=True
        close[home_office_instance,cd]=True
    

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
behavior observe_pot(pot:item):
    body:
        observe(pot,"Check if there are vegetables inside the pot")

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once open(pot)
        achieve_once inhand(pot)
        # Assuming the agent carries the pot to the faucet
        achieve close_char(char, faucet)
        achieve_once is_off(faucet)
        achieve_once plugged(faucet)
        achieve_once is_on(faucet)
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once closed(pot)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        observe_pot(pot)
        
        if not exists o: item : (is_food_vegetable(o) and inside(o, pot)):
            bind faucet: item where:
                is_faucet(faucet)
            # Gather water in the pot if necessary
            fill_pot_with_water(pot, faucet)

        bind stove: item where:
            is_stove(stove)
        boil_vegetables(pot, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5937, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cd_2100_around_computer_379(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(cd,computer_instance)
        else:
            exp(cd,computer_instance)
    eff:
        unknown[cd]=False
        close[cd,computer_instance]=True
        close[computer_instance,cd]=True
    

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
behavior observe_pot(pot:item):
    body:
        observe(pot,"Check if there are vegetables inside the pot")

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once open(pot)
        achieve_once inhand(pot)
        # Assuming the agent carries the pot to the faucet
        achieve close_char(char, faucet)
        achieve_once is_off(faucet)
        achieve_once plugged(faucet)
        achieve_once is_on(faucet)
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once closed(pot)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        observe_pot(pot)
        
        if not exists o: item : (is_food_vegetable(o) and inside(o, pot)):
            bind faucet: item where:
                is_faucet(faucet)
            # Gather water in the pot if necessary
            fill_pot_with_water(pot, faucet)

        bind stove: item where:
            is_stove(stove)
        boil_vegetables(pot, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5937, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cd_2100_around_home_office_161(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd,home_office_instance)
        else:
            exp(cd,home_office_instance)
    eff:
        unknown[cd]=False
        close[cd,home_office_instance]=True
        close[home_office_instance,cd]=True
    

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
 
behavior observe_pot(pot:item):
    body:
        observe(pot,"Check if there are vegetables inside the pot")

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once open(pot)
        achieve_once inhand(pot)
        # Assuming the agent carries the pot to the faucet
        achieve close_char(char, faucet)
        achieve_once is_off(faucet)
        achieve_once plugged(faucet)
        achieve_once is_on(faucet)
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once closed(pot)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        observe_pot(pot)
        
        if not exists o: item : (is_food_vegetable(o) and inside(o, pot)):
            bind faucet: item where:
                is_faucet(faucet)
            # Gather water in the pot if necessary
            fill_pot_with_water(pot, faucet)

        bind stove: item where:
            is_stove(stove)
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetable_in_pot(pot:item):
    # Function to check if there are vegetables in a specified pot
    symbol has_vegetable=exists v: item : (is_food_vegetable(v) and inside(v, pot))
    return has_vegetable

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot with vegetables on the stove
        achieve_once is_on(stove) # Turn on the stove to start boiling
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_vegetable_in_pot(pot)
        # Select the pot with vegetables in it

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_vegetables(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_vegetable_in_pot(pot:item):
    # Function to check if there are vegetables in a specified pot
    symbol has_vegetable=exists v: item : (is_food_vegetable(v) and inside(v, pot))
    return has_vegetable

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot with vegetables on the stove
        achieve_once is_on(stove) # Turn on the stove to start boiling
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_vegetable_in_pot(pot)
        # Select the pot with vegetables in it

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_vegetables(pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_142_around_dishwasher_143(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

behavior find_oil_2005_around_microwave_149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior store_pot_in_fridge(pot: item, fridge: item):
    body:
        achieve_once inside(pot, fridge)
        # Place the pot inside the fridge

behavior close_the_fridge_door(fridge: item):
    body:
        achieve_once closed(fridge)
        # Ensure the fridge door is closed after storing items

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
            # Select the fridge with the specific ID 140 in dining_room_1

        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior store_pot_in_fridge(pot: item, fridge: item):
    body:
        achieve_once inside(pot, fridge)
        # Place the pot inside the fridge

behavior close_the_fridge_door(fridge: item):
    body:
        achieve_once closed(fridge)
        # Ensure the fridge door is closed after storing items

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
            # Select the fridge with the specific ID 140 in dining_room_1

        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(fridge_140)putin_executor(pot_54, fridge_140)close_executor(fridge_140)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. 
##############################
From agent.py
putin_executor(pot_54, fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. pot_54 is close fridge_140. fridge_140 is close pot_54. pot_54 is inside fridge_140. pot_54 released by right hand. 
##############################
From agent.py
close_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables with pot. Then store the whole pot in the fridge.
Action History:
['walk_executor(kitchen_counter_132)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(cutting_board_2080)', 'walk_executor(kitchen_counter_129)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_vegetable_2072)', 'wash_executor(food_vegetable_2072)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'grab_executor(pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'grab_executor(pot_54)', 'walk_executor(fridge_140)', 'putin_executor(pot_54, fridge_140)', 'close_executor(fridge_140)']
Time info:
Time consume: 179 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 44
goal generate times: 5
goal correct times: 0
action_num: 25

Task complete rate:
Keystate: k1 - Requires: 6 steps
Keystate: k2 - Requires: 9 steps
Keystate: k3 - Requires: 2 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
