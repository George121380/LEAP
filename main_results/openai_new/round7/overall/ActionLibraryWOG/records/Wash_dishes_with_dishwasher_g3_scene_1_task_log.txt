From agent.py
Reset goals: The sub-goals are: 
['1. Identify the bowls and plates to be washed using the dishwasher.', '2. Place the bowls and plates in the dishwasher and start it.', '3. Identify the forks to be washed by hand.', '4. Wash the forks by hand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_cupboard_117(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_2152_around_cupboard_117(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not visited(item):
                observe(item, "Check if it needs washing")

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        foreach item: item:
            if (is_bowl(item) or is_plate(item)) and not visited(item):
                observe(item, "Check if it needs washing")

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(bowl_2140, cupboard_117)walk_executor(bowl_2140)obs(bowl_2140, Check if it needs washing)walk_executor(cupboard_117)exp(bowl_2141, cupboard_117)walk_executor(bowl_2141)obs(bowl_2141, Check if it needs washing)walk_executor(cupboard_117)exp(bowl_2142, cupboard_117)walk_executor(bowl_2142)obs(bowl_2142, Check if it needs washing)walk_executor(cupboard_117)exp(plate_2152, cupboard_117)walk_executor(plate_2152)obs(plate_2152, Check if it needs washing)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(bowl_2140, cupboard_117)
Fail to find bowl_2140 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(bowl_2140, dishwasher_129)walk_executor(bowl_2140)obs(bowl_2140, Check if it needs washing)walk_executor(dishwasher_129)exp(bowl_2141, dishwasher_129)walk_executor(bowl_2141)obs(bowl_2141, Check if it needs washing)walk_executor(dishwasher_129)exp(bowl_2142, dishwasher_129)walk_executor(bowl_2142)obs(bowl_2142, Check if it needs washing)walk_executor(dishwasher_129)exp(plate_2152, dishwasher_129)walk_executor(plate_2152)obs(plate_2152, Check if it needs washing)
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. 
##############################
From agent.py
open_executor(dishwasher_129)
Robot find: detergent_2011, measuring_cup_2012, Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is opened. 
##############################
From agent.py
exp(bowl_2140, dishwasher_129)
Fail to find bowl_2140 around dishwasher_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(bowl_2140, cupboard_118)walk_executor(bowl_2140)obs(bowl_2140, Check if it needs washing)walk_executor(cupboard_118)exp(bowl_2141, cupboard_118)walk_executor(bowl_2141)obs(bowl_2141, Check if it needs washing)walk_executor(cupboard_118)exp(bowl_2142, cupboard_118)walk_executor(bowl_2142)obs(bowl_2142, Check if it needs washing)walk_executor(cupboard_118)exp(plate_2152, cupboard_118)walk_executor(plate_2152)obs(plate_2152, Check if it needs washing)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(bowl_2140, cupboard_118)
Fail to find bowl_2140 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)exp(bowl_2140, sink_120)walk_executor(bowl_2140)obs(bowl_2140, Check if it needs washing)walk_executor(sink_120)exp(bowl_2141, sink_120)walk_executor(bowl_2141)obs(bowl_2141, Check if it needs washing)walk_executor(sink_120)exp(bowl_2142, sink_120)walk_executor(bowl_2142)obs(bowl_2142, Check if it needs washing)walk_executor(kitchen_counter_122)exp(plate_2152, kitchen_counter_122)walk_executor(plate_2152)obs(plate_2152, Check if it needs washing)
##############################
From agent.py
walk_executor(sink_120)
Robot find: fork_2150, bowl_2142, food_salt_2041, soap_2126, soap_2010, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, ice_2024, Robot is close to the sink_120. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, sink_120)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)obs(bowl_2140, Check if it needs washing)walk_executor(bowl_2141)obs(bowl_2141, Check if it needs washing)walk_executor(bowl_2142)obs(bowl_2142, Check if it needs washing)walk_executor(plate_2152)obs(plate_2152, Check if it needs washing)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. 
##############################
From agent.py
obs(bowl_2140, Check if it needs washing)
Get this information:  bowl_2140 is close to kitchen_counter_119. bowl_2140 is close to character_240. bowl_2140 is on kitchen_counter_119. bowl_2140 is inside dining_room_41. bowl_2140 is DIRTY.
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2141. 
##############################
From agent.py
obs(bowl_2141, Check if it needs washing)
Get this information:  bowl_2141 is inside dining_room_41. bowl_2141 is close to kitchen_counter_119. bowl_2141 is close to character_240. bowl_2141 is on kitchen_counter_119. bowl_2141 is DIRTY.
##############################
From agent.py
walk_executor(bowl_2142)
Robot find: iron_2161, Robot is close to the kitchen_counter_119. Robot is close to the bowl_2142. 
##############################
From agent.py
obs(bowl_2142, Check if it needs washing)
Get this information:  bowl_2142 is close to iron_2161. bowl_2142 is close to kitchen_counter_119. bowl_2142 is close to character_240. iron_2161 is on bowl_2142. bowl_2142 is on kitchen_counter_119. bowl_2142 is inside dining_room_41. bowl_2142 is DIRTY.
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the plate_2152. 
##############################
From agent.py
obs(plate_2152, Check if it needs washing)
Get this information:  plate_2152 is inside dining_room_41. plate_2152 is close to kitchen_counter_119. plate_2152 is close to character_240. plate_2152 is on kitchen_counter_119. plate_2152 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2117_around_basket_for_clothes_2078(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior load_item_into_dishwasher(o: item, dishwasher: item):
    body:
        achieve_once inside(o, dishwasher)

behavior start_dishwasher(dishwasher: item):
    body:
        achieve_once closed(dishwasher)
        achieve_once is_on(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 129
        
        foreach o: item:
            if is_bowl(o) or is_plate(o) and (dirty(o) or not visited(o)):
                load_item_into_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior load_item_into_dishwasher(o: item, dishwasher: item):
    body:
        achieve_once inside(o, dishwasher)

behavior start_dishwasher(dishwasher: item):
    body:
        achieve_once closed(dishwasher)
        achieve_once is_on(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 129
        
        foreach o: item:
            if is_bowl(o) or is_plate(o) and (dirty(o) or not visited(o)):
                load_item_into_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher)
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)close_executor(dishwasher_129)switchon_executor(dishwasher_129)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. 
##############################
From agent.py
grab_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2140. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. 
##############################
From agent.py
putin_executor(bowl_2140, dishwasher_129)
Robot find: Robot is close to the bowl_2140. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is close bowl_2140. bowl_2140 is close dishwasher_129. bowl_2140 is inside dishwasher_129. bowl_2140 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(bowl_2141)
Robot find: Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. Grabbing bowl_2141 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2141. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the measuring_cup_2012. 
##############################
From agent.py
putin_executor(bowl_2141, dishwasher_129)
Robot find: Robot is close to the bowl_2141. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the measuring_cup_2012. dishwasher_129 is close bowl_2141. bowl_2141 is inside dishwasher_129. bowl_2141 is close dishwasher_129. bowl_2141 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2142)
Robot find: Robot is close to the bowl_2142. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(bowl_2142)
Robot find: Robot is close to the bowl_2142. Robot is close to the kitchen_counter_119. Grabbing bowl_2142 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2142. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. 
##############################
From agent.py
putin_executor(bowl_2142, dishwasher_129)
Robot find: Robot is close to the bowl_2142. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. dishwasher_129 is close bowl_2142. bowl_2142 is close dishwasher_129. bowl_2142 is inside dishwasher_129. bowl_2142 released by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the plate_2152. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. Robot is close to the bowl_2142. 
##############################
From agent.py
putin_executor(plate_2152, dishwasher_129)
Robot find: Robot is close to the plate_2152. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. Robot is close to the bowl_2142. dishwasher_129 is close plate_2152. plate_2152 is inside dishwasher_129. plate_2152 is close dishwasher_129. plate_2152 released by right hand. 
##############################
From agent.py
close_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. dishwasher_129 is closed. 
##############################
From agent.py
switchon_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. dishwasher_129 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_fork(o:item):
    return is_fork(o)

behavior __goal__():
    body:
        foreach o: item:
            if is_fork(o) and not visited(o):
                observe(o, "Check if it needs washing")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_fork(o:item):
    return is_fork(o)

behavior __goal__():
    body:
        foreach o: item:
            if is_fork(o) and not visited(o):
                observe(o, "Check if it needs washing")

##############################
From agent.py-> find a plan in act()
walk_executor(fork_2150)obs(fork_2150, Check if it needs washing)walk_executor(fork_2151)obs(fork_2151, Check if it needs washing)
##############################
From agent.py
walk_executor(fork_2150)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
obs(fork_2150, Check if it needs washing)
Get this information:  fork_2150 is close to kitchen_counter_119. fork_2150 is close to character_240. fork_2150 is on kitchen_counter_119. fork_2150 is inside dining_room_41. fork_2150 is CLEAN.
##############################
From agent.py
walk_executor(fork_2151)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. 
##############################
From agent.py
obs(fork_2151, Check if it needs washing)
Get this information:  fork_2151 is inside dining_room_41. fork_2151 is close to kitchen_counter_119. fork_2151 is close to character_240. fork_2151 is on kitchen_counter_119. fork_2151 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_faucet_121(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(towel,faucet_instance)
        else:
            exp(towel,faucet_instance)
    eff:
        unknown[towel]=False
        close[towel,faucet_instance]=True
        close[faucet_instance,towel]=True
    

behavior find_wooden_spoon_2000_around_kitchen_counter_122(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
def is_dirty_fork(fork:item):
    # Function to check if the fork is dirty
    symbol is_dirty= exists fork: item : (is_fork(fork) and dirty(fork))
    return is_dirty

behavior wash_fork_by_hand(fork:item):
    body:
        achieve_once close_char(char, fork)
        wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
        # Check each fork to see if it is dirty
            if is_fork(fork) and is_dirty_fork(fork):
                wash_fork_by_hand(fork)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Variable fork already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_soap_2125_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#goal_representation
 
behavior wash_fork_by_hand(fork:item):
    body:
        achieve_once close_char(char, fork)
        wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
        # Check each fork to see if it is dirty
            if is_fork(fork) and dirty(fork):
                wash_fork_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_soap_2125_around_faucet_121(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(soap,faucet_instance)
        else:
            exp(soap,faucet_instance)
    eff:
        unknown[soap]=False
        close[soap,faucet_instance]=True
        close[faucet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        achieve_once clean(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_faucet_121(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(soap,faucet_instance)
        else:
            exp(soap,faucet_instance)
    eff:
        unknown[soap]=False
        close[soap,faucet_instance]=True
        close[faucet_instance,soap]=True
    

behavior find_rag_2052_around_kitchen_counter_122(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(rag,kitchen_counter_instance)
        else:
            exp(rag,kitchen_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,kitchen_counter_instance]=True
        close[kitchen_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
behavior wash_forks(fork:item):
    body:
        achieve_once clean(fork)
        # Ensure the fork is clean after washing

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and id[fork1] == 2150
        # Select fork1 with ID 2150
        bind fork2: item where:
            is_fork(fork2) and id[fork2] == 2151
        # Select fork2 with ID 2151

        wash_forks(fork1)
        wash_forks(fork2)
        # Wash each fork by hand
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wash_fork(fork:item):
    body:
        achieve_once clean(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and dirty(fork1)
        # Bind the first fork that needs to be washed
        
        bind fork2: item where:
            is_fork(fork2) and dirty(fork2) and fork1=fork2
        # Bind the second fork that needs to be washed, ensuring its not the same as fork1

        wash_fork(fork1)
        wash_fork(fork2)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5254, column 54.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior wash_fork(fork:item):
    body:
        achieve_once clean(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and dirty(fork1)
        # Bind the first fork that needs to be washed

        bind fork2: item where:
            is_fork(fork2) and dirty(fork2) and fork1=fork2
        # Bind the second fork that needs to be washed, ensuring its not the same as fork1

        wash_fork(fork1)
        wash_fork(fork2)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5253, column 54.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2126_around_faucet_121(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(soap,faucet_instance)
        else:
            exp(soap,faucet_instance)
    eff:
        unknown[soap]=False
        close[soap,faucet_instance]=True
        close[faucet_instance,soap]=True
    

behavior find_rag_2025_around_faucet_121(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(rag,faucet_instance)
        else:
            exp(rag,faucet_instance)
    eff:
        unknown[rag]=False
        close[rag,faucet_instance]=True
        close[faucet_instance,rag]=True
    

#goal_representation
 
behavior wash_fork(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and dirty(fork1)
        # Bind the first fork that needs to be washed

        bind fork2: item where:
            is_fork(fork2) and dirty(fork2) and fork1=fork2
        # Bind the second fork that needs to be washed, ensuring its not the same as fork1

        wash_fork(fork1)
        wash_fork(fork2)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_kitchen_counter_122(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

behavior find_rag_2052_around_sink_19(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(rag,sink_instance)
        else:
            exp(rag,sink_instance)
    eff:
        unknown[rag]=False
        close[rag,sink_instance]=True
        close[sink_instance,rag]=True
    

behavior find_soap_2125_around_faucet_121(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(soap,faucet_instance)
        else:
            exp(soap,faucet_instance)
    eff:
        unknown[soap]=False
        close[soap,faucet_instance]=True
        close[faucet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
# Define the behavior to wash the forks by hand
behavior wash_fork(fork:item):
    body:
        achieve clean(fork)

behavior __goal__():
    body:
        foreach f: item:
            if is_fork(f) and visited(f) and dirty(f):
                wash_fork(f)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_kitchen_counter_123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

behavior find_rag_2025_around_faucet_121(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(rag,faucet_instance)
        else:
            exp(rag,faucet_instance)
    eff:
        unknown[rag]=False
        close[rag,faucet_instance]=True
        close[faucet_instance,rag]=True
    

behavior find_lighter_2039_around_kitchen_counter_123(lighter:item):
    goal: not unknown(lighter)
    body:
        assert is_lighter(lighter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(lighter,kitchen_counter_instance)
        else:
            exp(lighter,kitchen_counter_instance)
    eff:
        unknown[lighter]=False
        close[lighter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,lighter]=True
    

behavior find_soap_2125_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_dirty_fork():
    # Function to check if there is a dirty fork available
    symbol dirty_fork= exists fork: item : (is_fork(fork) and dirty(fork))
    return dirty_fork

behavior wash_fork(fork:item):
    body:
        wash(fork)

behavior __goal__():
    body:
        if has_dirty_fork():
            # If a dirty fork is located, wash it
            foreach fork: item:
                if is_fork(fork) and dirty(fork):
                    wash_fork(fork)
        else:
            # Check all forks to determine if they need washing
            foreach fork: item:
                if is_fork(fork) and not visited(fork):
                    observe(fork, "Check if it needs washing")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_faucet_121(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(towel,faucet_instance)
        else:
            exp(towel,faucet_instance)
    eff:
        unknown[towel]=False
        close[towel,faucet_instance]=True
        close[faucet_instance,towel]=True
    

behavior find_detergent_2011_around_faucet_20(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==20
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(detergent,faucet_instance)
        else:
            exp(detergent,faucet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,faucet_instance]=True
        close[faucet_instance,detergent]=True
    

behavior find_soap_2126_around_faucet_121(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(soap,faucet_instance)
        else:
            exp(soap,faucet_instance)
    eff:
        unknown[soap]=False
        close[soap,faucet_instance]=True
        close[faucet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior wash_fork_by_hand(fork: item):
    body:
        achieve clean(fork)

behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork) and visited(fork)
        wash_fork_by_hand(fork)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2125_around_faucet_121(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(soap,faucet_instance)
        else:
            exp(soap,faucet_instance)
    eff:
        unknown[soap]=False
        close[soap,faucet_instance]=True
        close[faucet_instance,soap]=True
    

behavior find_rag_2025_around_kitchen_counter_123(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(rag,kitchen_counter_instance)
        else:
            exp(rag,kitchen_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,kitchen_counter_instance]=True
        close[kitchen_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
behavior wash_fork_by_hand(fork:item):
    body:
        achieve_cleaned = is_clean(fork)
        achieve(achieve_cleaned)
        # Ensure the fork is cleaned

behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork)
        # Select a fork

        wash_fork_by_hand(fork)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Invalid assignment target: it is not a local variable and not a feature with 0 arguments: achieve_cleaned
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_sauce_2148_around_fridge_126(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

behavior find_soap_2125_around_faucet_121(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(soap,faucet_instance)
        else:
            exp(soap,faucet_instance)
    eff:
        unknown[soap]=False
        close[soap,faucet_instance]=True
        close[faucet_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_soap_2010(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2010
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(cleaning_solution,soap_instance)
        else:
            exp(cleaning_solution,soap_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,soap_instance]=True
        close[soap_instance,cleaning_solution]=True
    

#goal_representation

behavior wash_fork_by_hand(fork:item):
    body:
        achieve clean(fork)
        # Ensure the fork is cleaned

behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork)
        # Select a fork

        wash_fork_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_sink_19(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_soap_2010_around_kitchen_counter_123(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(soap,kitchen_counter_instance)
        else:
            exp(soap,kitchen_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,kitchen_counter_instance]=True
        close[kitchen_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fork_by_hand(fork:item, sink:item):
    body:
        achieve has_water(sink) 
        # Ensure the sink is filled with water
        achieve_once inhand(fork)
        # Temporarily hold the fork
        wash(fork)
        # Wash the fork
        achieve clean(fork)
        # Ensure the fork is clean

behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork) and dirty(fork)
        # Select a dirty fork
        bind sink: item where:
            is_sink(sink)
        # Select the sink
        wash_fork_by_hand(fork, sink)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Wash the bowls and plates with dishwasher. And wash forks by hand.
Action History:
['walk_executor(cupboard_117)', 'walk_executor(dishwasher_129)', 'open_executor(dishwasher_129)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(sink_120)', 'walk_executor(bowl_2140)', 'walk_executor(bowl_2141)', 'walk_executor(bowl_2142)', 'walk_executor(plate_2152)', 'walk_executor(bowl_2140)', 'grab_executor(bowl_2140)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2140, dishwasher_129)', 'walk_executor(bowl_2141)', 'grab_executor(bowl_2141)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2141, dishwasher_129)', 'walk_executor(bowl_2142)', 'grab_executor(bowl_2142)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2142, dishwasher_129)', 'walk_executor(plate_2152)', 'grab_executor(plate_2152)', 'walk_executor(dishwasher_129)', 'putin_executor(plate_2152, dishwasher_129)', 'close_executor(dishwasher_129)', 'switchon_executor(dishwasher_129)', 'walk_executor(fork_2150)', 'walk_executor(fork_2151)']
Time info:
Time consume: 204 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 111
goal generate times: 12
goal correct times: 0
action_num: 30

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 1
##############################
