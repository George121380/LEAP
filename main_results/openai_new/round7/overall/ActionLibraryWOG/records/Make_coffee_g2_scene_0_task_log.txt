From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_ready(coffee:item, coffee_maker:item):
    # Function to check if the coffee is made by the coffee maker
    symbol ready = is_on(coffee_maker) and inside(coffee, coffee_maker)
    return ready

behavior make_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker
        achieve_once has_water(coffee_maker)
        # Ensure the coffee maker has water
        achieve_once has_a_free_hand(char)
        # Ensure the character has a free hand for other tasks

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        
        bind coffee_cup: item where:
            is_cup(coffee_cup)
        # Select a cup for the coffee

        make_coffee(coffee_maker)
        # Make coffee using the coffee maker

        if not is_coffee_ready(coffee_cup, coffee_maker):
            observe(coffee_maker, "Check if the coffee is ready in the coffee maker")
            # Observe if the coffee is ready in the coffee maker

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_coffee_maker(cup: item):
    # Function to check if there is a coffee maker and a cup
    symbol has_coffee_maker=exists o: item : (is_coffe_maker(o) and clean(o) and has_a_free_hand(cup))
    return has_coffee_maker

def has_coffee(cup: item):
    # Function to check if coffee is made
    symbol has_coffee=exists o: item : (on(o, cup) and is_cup(cup))
    return has_coffee

behavior make_coffee_using_maker(coffee_maker: item, cup: item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water
        achieve has_a_free_hand(cup)
        # Ensure there is a free hand to hold the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        bind cup: item where:
            is_cup(cup)
        make_coffee_using_maker(coffee_maker, cup)

        if not has_coffee(cup):
            # If coffee is not already made, start the coffee making process
            observe(coffee_maker, "Ensure it is ready to make coffee")
        else:
            # If coffee is already made, verify everything is in order
            achieve has_coffee(cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Error during applying has_a_free_hand[observation, state](x: character).
  Arguments: V::cup
Argument #0 type does not match: expect character, got item.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
 
def has_coffee_maker(cup: item):
    # Function to check if there is a coffee maker and a cup available
    symbol has_coffee_maker = exists o: item : (is_coffe_maker(o) and clean(o) and has_a_free_hand(char))
    return has_coffee_maker

def has_coffee(cup: item):
    # Function to check if coffee is made
    symbol has_coffee = exists o: item : (on(o, cup) and is_cup(cup))
    return has_coffee

behavior make_coffee_using_maker(coffee_maker: item, cup: item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water
        achieve has_a_free_hand(char)
        # Ensure there is a free hand to hold the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        bind cup: item where:
            is_cup(cup)
        make_coffee_using_maker(coffee_maker, cup)

        if not has_coffee(cup):
            # If coffee is not already made, start the coffee making process
            observe(coffee_maker, "Ensure it is ready to make coffee")
        else:
            # If coffee is already made, verify everything is in order
            achieve has_coffee(cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_coffee_maker(cup: item):
    # Function to check if there is a coffee maker and a cup available
    symbol has_coffee_maker = exists o: item : (is_coffe_maker(o) and clean(o) and has_a_free_hand(char))
    return has_coffee_maker

def has_coffee(cup: item):
    # Function to check if coffee is made
    symbol has_coffee = exists o: item : (on(o, cup) and is_cup(cup))
    return has_coffee

behavior make_coffee_using_maker(coffee_maker: item, cup: item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water
        achieve has_a_free_hand(char)
        # Ensure there is a free hand to hold the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        bind cup: item where:
            is_cup(cup)
        make_coffee_using_maker(coffee_maker, cup)

        if not has_coffee(cup):
            # If coffee is not already made, start the coffee making process
            observe(coffee_maker, "Ensure it is ready to make coffee")
        else:
            # If coffee is already made, verify everything is in order
            achieve has_coffee(cup)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Ensure it is ready to make coffee)
##############################
From agent.py
walk_executor(faucet_232)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Ensure it is ready to make coffee)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OFF. coffe_maker_290 is OPEN. coffe_maker_290 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the coffee maker is filled with water and turned on to make coffee. The robot has only observed that the coffee maker is ready but has not yet confirmed that it is filled with water or turned on to start making coffee.
##############################
From agent.py
Human Instruction: You need to ensure that the coffee maker is filled with water and turned on to make coffee. The robot has only observed that the coffee maker is ready but has not yet confirmed that it is filled with water or turned on to start making coffee.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Open coffe_maker_290.
Action 6: Observe around coffe_maker_290 with the question of Ensure it is ready to make coffee.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
def confirm_coffee_maker_ready(coffee_maker:item):
    # Function to confirm the coffee maker is filled with water and turned on
    symbol is_ready= is_on(coffee_maker) and has_water(coffee_maker)
    return is_ready

behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            # Ensure the coffee maker has water
            achieve_once has_water(coffee_maker)
        
        if not is_on(coffee_maker):
            # Ensure the coffee maker is turned on
            achieve_once is_on(coffee_maker)
        
        # Confirm that the coffee maker is ready to use
        observe(coffee_maker, "Ensure it is ready to make coffee")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and visited(coffee_maker)
        if not confirm_coffee_maker_ready(coffee_maker):
            ensure_coffee_maker_ready(coffee_maker)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
def confirm_coffee_maker_ready(coffee_maker:item):
    # Function to confirm the coffee maker is filled with water and turned on
    symbol is_ready= is_on(coffee_maker) and has_water(coffee_maker)
    return is_ready

behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            # Ensure the coffee maker has water
            achieve_once has_water(coffee_maker)
        
        if not is_on(coffee_maker):
            # Ensure the coffee maker is turned on
            achieve_once is_on(coffee_maker)
        
        # Confirm that the coffee maker is ready to use
        observe(coffee_maker, "Ensure it is ready to make coffee")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and visited(coffee_maker)
        if not confirm_coffee_maker_ready(coffee_maker):
            ensure_coffee_maker_ready(coffee_maker)
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffe_maker_ready(coffe_maker:item):
    # Function to confirm if the coffee maker is ready to make coffee
    symbol ready= is_on(coffe_maker) and has_water(coffe_maker)
    return ready

behavior ensure_coffe_maker_ready(coffe_maker:item, faucet:item):
    body:
        if not has_water(coffe_maker):
            # Ensure the coffee maker has water
            achieve has_water(coffe_maker)
        if not is_on(coffe_maker):
            # Ensure the coffee maker is turned on
            achieve is_on(coffe_maker)

behavior use_coffee_maker(coffe_maker:item):
    body:
        achieve_once is_on(coffe_maker)
        # Use the coffee maker to make coffee once it is ready

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        bind faucet: item where:
            is_faucet(faucet)
        
        if not is_coffe_maker_ready(coffe_maker):
            # If the coffee maker is not ready, ensure it is ready
            ensure_coffe_maker_ready(coffe_maker, faucet)

        use_coffee_maker(coffe_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_coffe_maker_ready(coffe_maker:item):
    # Function to confirm if the coffee maker is ready to make coffee
    symbol ready= is_on(coffe_maker) and has_water(coffe_maker)
    return ready

behavior ensure_coffe_maker_ready(coffe_maker:item, faucet:item):
    body:
        if not has_water(coffe_maker):
            # Ensure the coffee maker has water
            achieve has_water(coffe_maker)
        if not is_on(coffe_maker):
            # Ensure the coffee maker is turned on
            achieve is_on(coffe_maker)

behavior use_coffee_maker(coffe_maker:item):
    body:
        achieve_once is_on(coffe_maker)
        # Use the coffee maker to make coffee once it is ready

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        bind faucet: item where:
            is_faucet(faucet)
        
        if not is_coffe_maker_ready(coffe_maker):
            # If the coffee maker is not ready, ensure it is ready
            ensure_coffe_maker_ready(coffe_maker, faucet)

        use_coffee_maker(coffe_maker)

##############################
From agent.py-> find a plan in act()
close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The coffee maker needs to be filled with water before it can be used to make coffee. Ensure the coffee maker is filled with water.
##############################
From agent.py
Human Instruction: The coffee maker needs to be filled with water before it can be used to make coffee. Ensure the coffee maker is filled with water.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Open coffe_maker_290.
Action 6: Observe around coffe_maker_290 with the question of Ensure it is ready to make coffee.
Action 7: Close coffe_maker_290.
Action 8: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_coffee_maker_is_ready(coffee_maker:item):
    body:
        achieve_once has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)
        # Ensure the coffee maker is switched on

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) 
        # Select the coffee maker
        
        ensure_coffee_maker_is_ready(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_coffee_maker_has_water(coffeemaker: item):
    body:
        achieve has_water(coffeemaker) # Ensure the coffee maker is filled with water

behavior ensure_coffee_maker_is_on(coffeemaker: item):
    body:
        achieve is_on(coffeemaker) # Ensure the coffee maker is turned on

behavior make_coffee(coffeemaker: item):
    body:
        achieve has_a_free_hand(char) # The character must have a free hand to operate the coffee maker

behavior close_coffee_maker(coffeemaker: item):
    body:
        achieve closed(coffeemaker) # Ensure the coffee maker is closed

behavior __goal__():
    body:
        bind coffeemaker: item where:
            is_coffe_maker(coffeemaker)
        ensure_coffee_maker_has_water(coffeemaker) # Fill the coffee maker with water
        close_coffee_maker(coffeemaker) # Close the coffee maker after checking
        ensure_coffee_maker_is_on(coffeemaker) # Turn on the coffee maker
        make_coffee(coffeemaker) # Follow the process to make coffee with the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water(coffee_maker: item):
    # Function to check if the coffee maker has water
    symbol water_in_maker = exists o: item : (is_faucet(o) and has_water(coffee_maker))
    return water_in_maker

behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(coffee_maker)
        achieve is_off(faucet)

behavior make_coffee(coffee_maker: item):
    body:
        achieve_once is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind faucet: item where:
            is_faucet(faucet)
        if not has_water(coffee_maker):
            fill_coffee_maker_with_water(coffee_maker, faucet)
        make_coffee(coffee_maker)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve has_water(coffee_maker)
        # Make sure the coffee maker has water filled in it

behavior prepare_coffee(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to use

        fill_coffee_maker_with_water(coffee_maker, faucet)
        prepare_coffee(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

behavior prepare_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        fill_coffee_maker_with_water(coffee_maker, faucet)
        # Fill the coffee maker with water
        prepare_coffee(coffee_maker)
        # Turn on the coffee maker to brew the coffee

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        achieve has_water(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        make_coffee(coffee_maker)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)']
Time info:
Time consume: 149 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 36
goal generate times: 10
goal correct times: 1
action_num: 7

Task complete rate:
Keystate: k1 - Requires: 19 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
