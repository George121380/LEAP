From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the table in the home office.', '2. Turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_book_on_table(table:item):
    # Check if the specified table has a book on it
    symbol has_book=exists o: item : (is_book(o) and on(o, table))
    return has_book

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and has_book_on_table(table)):
            # If the book is already on the table, simply move closer to it
            bind table: item where:
                is_table(table) and has_book_on_table(table)
            achieve close_char(char, table)
        else:
            # Look for book and a table in the home office if not found
            bind home_office: item where:
                is_home_office(home_office)
            foreach o: item:
                if is_book(o) and not visited(o):
                    observe(o, "Check if this book needs to be placed on the table")
                    # Observe books to find a specific one to place on the table
                    
            foreach o: item:
                if is_table(o) and not visited(o):
                    observe(o, "Check if the table is in the home office")
                    # Verify that the table is suitable in the home office

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_book_on_table(table:item):
    # Check if the specified table has a book on it
    symbol has_book=exists o: item : (is_book(o) and on(o, table))
    return has_book

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and has_book_on_table(table)):
            # If the book is already on the table, simply move closer to it
            bind table: item where:
                is_table(table) and has_book_on_table(table)
            achieve close_char(char, table)
        else:
            # Look for book and a table in the home office if not found
            bind home_office: item where:
                is_home_office(home_office)
            foreach o: item:
                if is_book(o) and not visited(o):
                    observe(o, "Check if this book needs to be placed on the table")
                    # Observe books to find a specific one to place on the table
                    
            foreach o: item:
                if is_table(o) and not visited(o):
                    observe(o, "Check if the table is in the home office")
                    # Verify that the table is suitable in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_233)open_executor(bookshelf_233)exp(book_2066, bookshelf_233)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if this book needs to be placed on the table)walk_executor(bookshelf_233)exp(book_2067, bookshelf_233)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Check if this book needs to be placed on the table)walk_executor(table_107)obs(table_107, Check if the table is in the home office)walk_executor(table_226)obs(table_226, Check if the table is in the home office)walk_executor(table_355)obs(table_355, Check if the table is in the home office)
##############################
From agent.py
walk_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. 
##############################
From agent.py
open_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. bookshelf_233 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_233)
Fail to find book_2066 around bookshelf_233. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(book_2066, bookshelf_101)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if this book needs to be placed on the table)walk_executor(bookshelf_101)exp(book_2067, bookshelf_101)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Check if this book needs to be placed on the table)walk_executor(table_107)obs(table_107, Check if the table is in the home office)walk_executor(table_226)obs(table_226, Check if the table is in the home office)walk_executor(table_355)obs(table_355, Check if the table is in the home office)
##############################
From agent.py
walk_executor(bookshelf_101)
Robot find: drawing_174, drawing_176, Robot is close to the bookshelf_101. 
##############################
From agent.py
open_executor(bookshelf_101)
Robot find: Robot is close to the photoframe_185. Robot is close to the bookshelf_101. bookshelf_101 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_101)
Fail to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if this book needs to be placed on the table)walk_executor(bookshelf_354)exp(book_2067, bookshelf_354)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Check if this book needs to be placed on the table)walk_executor(table_107)obs(table_107, Check if the table is in the home office)walk_executor(table_226)obs(table_226, Check if the table is in the home office)walk_executor(table_355)obs(table_355, Check if the table is in the home office)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if this book needs to be placed on the table)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Check if this book needs to be placed on the table)walk_executor(table_107)obs(table_107, Check if the table is in the home office)walk_executor(table_226)obs(table_226, Check if the table is in the home office)walk_executor(table_355)obs(table_355, Check if the table is in the home office)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
open_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. book_2066 is opened. 
##############################
From agent.py
obs(book_2066, Check if this book needs to be placed on the table)
Get this information:  book_2066 is close to bookshelf_354. book_2066 is close to character_65. book_2066 is on bookshelf_354. book_2066 is inside home_office_319. book_2066 is OPEN.
##############################
From agent.py
walk_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. 
##############################
From agent.py
open_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. book_2067 is opened. 
##############################
From agent.py
obs(book_2067, Check if this book needs to be placed on the table)
Get this information:  book_2067 is close to bookshelf_354. book_2067 is close to character_65. book_2067 is on bookshelf_354. book_2067 is inside home_office_319. book_2067 is OPEN.
##############################
From agent.py
walk_executor(table_107)
Robot find: mat_173, clothes_hat_2045, clothes_gloves_2046, drawing_175, Robot is close to the table_107. 
##############################
From agent.py
obs(table_107, Check if the table is in the home office)
Get this information:  table_107 is inside bedroom_67. table_107 is close to floor_72. table_107 is close to floor_73. table_107 is close to floor_74. table_107 is close to floor_76. table_107 is close to mat_173. table_107 is close to orchid_178. table_107 is close to clothes_hat_2045. table_107 is close to clothes_gloves_2046. table_107 is close to character_65. clothes_gloves_2046 is on table_107. table_107 is on floor_73. orchid_178 is on table_107. clothes_hat_2045 is on table_107. table_107 is facing drawing_176. table_107 is facing computer_170. table_107 is facing drawing_174. table_107 is facing drawing_175. table_107 is CLEAN.
##############################
From agent.py
walk_executor(table_226)
Robot find: drawing_243, bowl_2071, coffee_filter_2000, drawing_2003, drawing_241, bowl_2072, mat_236, fork_2080, drawing_238, drawing_239, drawing_240, drawing_242, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
obs(table_226, Check if the table is in the home office)
Get this information:  coffee_filter_2000 is on table_226. drawing_2003 is on table_226. bowl_2071 is on table_226. table_226 is facing drawing_238. table_226 is facing drawing_239. table_226 is facing drawing_240. table_226 is facing drawing_241. table_226 is facing drawing_242. table_226 is facing drawing_243. table_226 is facing television_248. bowl_2072 is on table_226. mat_236 is on table_226. fork_2080 is on table_226. table_226 is inside dining_room_201. table_226 is close to drawing_402. table_226 is close to drawing_403. table_226 is close to bowl_2071. table_226 is close to bowl_2072. table_226 is close to fork_2080. table_226 is close to fork_2081. table_226 is close to floor_202. table_226 is close to floor_203. table_226 is close to floor_204. table_226 is close to floor_205. table_226 is close to floor_206. table_226 is close to floor_207. table_226 is close to floor_208. table_226 is close to coffee_filter_2000. table_226 is close to wall_210. table_226 is close to wall_211. table_226 is close to wall_212. table_226 is close to wall_213. table_226 is close to wall_214. table_226 is close to drawing_2003. table_226 is close to ceilinglamp_224. table_226 is close to bench_227. table_226 is close to bench_228. table_226 is close to wallshelf_235. table_226 is close to mat_236. table_226 is close to mat_237. table_226 is close to drawing_241. table_226 is close to drawing_242. table_226 is close to drawing_243. table_226 is close to character_65. fork_2081 is on table_226. table_226 is DIRTY.
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
obs(table_355, Check if the table is in the home office)
Get this information:  headset_2062 is on table_355. table_355 is close to couch_352. table_355 is close to tvstand_353. table_355 is close to spectacles_2082. table_355 is close to floor_321. table_355 is close to floor_323. table_355 is close to floor_324. table_355 is close to floor_322. table_355 is close to wall_333. table_355 is close to headset_2062. table_355 is close to mat_401. table_355 is close to pillow_406. table_355 is close to television_410. table_355 is close to character_65. table_355 is on mat_401. table_355 is inside couch_352. table_355 is inside home_office_319. spectacles_2082 is on table_355. table_355 is facing drawing_400. table_355 is facing computer_417. table_355 is facing television_410. table_355 is facing drawing_404. table_355 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to find book_2066 and put it on table_355, which is located in the home office. The book has been found near bookshelf_354, but it has not yet been placed on the appropriate table.
##############################
From agent.py
Human Instruction: The robot needs to find book_2066 and put it on table_355, which is located in the home office. The book has been found near bookshelf_354, but it has not yet been placed on the appropriate table.

The actions you have taken:
Action 1: Walk to bookshelf_233.
Action 2: Open bookshelf_233.
Action 3: look for book_2066 around bookshelf_233.
Action 4: Walk to bookshelf_101.
Action 5: Open bookshelf_101.
Action 6: look for book_2066 around bookshelf_101.
Action 7: Walk to bookshelf_354.
Action 8: Open bookshelf_354.
Action 9: look for book_2066 around bookshelf_354.
Action 10: Walk to book_2066.
Action 11: Open book_2066.
Action 12: Observe around book_2066 with the question of Check if this book needs to be placed on the table.
Action 13: Walk to book_2067.
Action 14: Open book_2067.
Action 15: Observe around book_2067 with the question of Check if this book needs to be placed on the table.
Action 16: Walk to table_107.
Action 17: Observe around table_107 with the question of Check if the table is in the home office.
Action 18: Walk to table_226.
Action 19: Observe around table_226 with the question of Check if the table is in the home office.
Action 20: Walk to table_355.
Action 21: Observe around table_355 with the question of Check if the table is in the home office.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_cd_2075_around_home_office_319(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd,home_office_instance)
        else:
            exp(cd,home_office_instance)
    eff:
        unknown[cd]=False
        close[cd,home_office_instance]=True
        close[home_office_instance,cd]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Selecting the specific book with ID 2066, which needs to be placed on a table
        
        bind table: item where:
            is_table(table) and id[table]==355 and inside(table, home_office)
        # Selecting table with ID 355 that is inside the home office
        
        place_book_on_table(book, table)
        # Invoke the behavior to place the book on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_22_around_kitchen_counter_230(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(mat,kitchen_counter_instance)
        else:
            exp(mat,kitchen_counter_instance)
    eff:
        unknown[mat]=False
        close[mat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,mat]=True
    

behavior find_chair_2004_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066 and inside(book, home_office)
        # Selecting the specific book with ID 2066 that needs to be placed on a table

        bind table: item where:
            is_table(table) and id[table]==355 and inside(table, home_office)
        # Selecting table with ID 355 that is inside the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Defining the home_office environment

        place_book_on_table(book, table)
        # Invoke the behavior to place the book on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<book: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2063_around_sink_42(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066 and inside(book, home_office)
        # Selecting the specific book with ID 2066 that needs to be placed on a table

        bind table: item where:
            is_table(table) and id[table]==355 and inside(table, home_office)
        # Selecting table with ID 355 that is inside the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Defining the home_office environment

        place_book_on_table(book, table)
        # Invoke the behavior to place the book on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_2075_around_home_office_319(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd,home_office_instance)
        else:
            exp(cd,home_office_instance)
    eff:
        unknown[cd]=False
        close[cd,home_office_instance]=True
        close[home_office_instance,cd]=True
    

#exp_behavior_end

#goal_representation
 
def verify_table_home_office(table:item):
    # Function to verify if a given table is located in the home office
    bind home_office: item where:
        is_home_office(home_office)
    symbol is_table_in_home_office=exists room: item : (inside(table, home_office))
    return is_table_in_home_office

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the book with the ID 2066
        bind table: item where:
            is_table(table) and id[table] == 355
        # Select the table with the ID 355
        if not verify_table_home_office(table):
            observe(table, "Check if the table is in the home office")
            # Verify if table is in the home office
        place_book_on_table(book, table)
        # Place the book on the verified table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statement bind(CSList(home_office: item), is_home_office(V::home_office)) are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_237_around_mat_237(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==237
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_chair_106_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#goal_representation
 
def verify_table_home_office(table:item):
    # Function to verify if a given table is located in the home office
    symbol is_table_in_home_office=exists home_office: item : (is_home_office(home_office) and inside(table, home_office))
    return is_table_in_home_office

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the book with the ID 2066
        bind table: item where:
            is_table(table) and id[table] == 355
        # Select the table with the ID 355
        if not verify_table_home_office(table):
            observe(table, "Check if the table is in the home office")
            # Verify if table is in the home office
        place_book_on_table(book, table)
        # Place the book on the verified table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def verify_table_home_office(table:item):
    # Function to verify if a given table is located in the home office
    symbol is_table_in_home_office=exists home_office: item : (is_home_office(home_office) and inside(table, home_office))
    return is_table_in_home_office

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the book with the ID 2066
        bind table: item where:
            is_table(table) and id[table] == 355
        # Select the table with the ID 355
        if not verify_table_home_office(table):
            observe(table, "Check if the table is in the home office")
            # Verify if table is in the home office
        place_book_on_table(book, table)
        # Place the book on the verified table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(table_355)put_executor(book_2066, table_355)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the book_2066. Robot is close to the bookshelf_354. 
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the book_2066. Robot is close to the bookshelf_354. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(table_355)
Robot find: Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
put_executor(book_2066, table_355)
Robot find: Robot is close to the book_2066. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. table_355 is close book_2066. book_2066 is close table_355. book_2066 is on table_355. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
   
behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Ensure the light is turned on

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select the light located inside the home office

        turn_on_light(light)
        # Turn on the light in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
   
behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Ensure the light is turned on

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select the light located inside the home office

        turn_on_light(light)
        # Turn on the light in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(light_411)switchon_executor(light_411)
##############################
From agent.py
walk_executor(light_411)
Robot find: Robot is close to the light_411. 
##############################
From agent.py
switchon_executor(light_411)
Robot find: Robot is close to the light_411. light_411 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the table in home office. Then turn on the light in the home office.
Action History:
['walk_executor(bookshelf_233)', 'open_executor(bookshelf_233)', 'walk_executor(bookshelf_101)', 'open_executor(bookshelf_101)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'open_executor(book_2066)', 'walk_executor(book_2067)', 'open_executor(book_2067)', 'walk_executor(table_107)', 'walk_executor(table_226)', 'walk_executor(table_355)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(table_355)', 'put_executor(book_2066, table_355)', 'walk_executor(light_411)', 'switchon_executor(light_411)']
Time info:
Time consume: 136 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 87
goal generate times: 4
goal correct times: 1
action_num: 19

Task complete rate:
1
Scene_id: 0
##############################
