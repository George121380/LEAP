From agent.py
Reset goals: The sub-goals are: 
['1. Turn on the lights in the bedroom.', '2. Turn on the lights in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wall_clock_249_around_wallshelf_35(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

behavior find_remote_control_2052_around_television_248(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==248
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(remote_control,television_instance)
        else:
            exp(remote_control,television_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,television_instance]=True
        close[television_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def has_bedroom_light_on(bedroom:item):
    # Function to check if there is a light that is turned on in the specified bedroom
    symbol has_light_on=exists o: item: (is_light(o) and is_on(o) and inside(o, bedroom))
    return has_light_on

behavior turn_on_light(light:item):
    body:
        achieve_once is_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        if not has_bedroom_light_on(bedroom):
            # If no lights are turned on in the bedroom, proceed to turn on one
            foreach light: item:
                if is_light(light) and inside(light, bedroom):
                    turn_on_light(light)
                    break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<light: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_bedroom_light_on(bedroom:item):
    # Function to check if there is a light that is turned on in the specified bedroom
    symbol has_light_on=exists o: item: (is_light(o) and is_on(o) and inside(o, bedroom))
    return has_light_on

behavior turn_on_light(light:item):
    body:
        achieve_once is_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        if not has_bedroom_light_on(bedroom):
            # If no lights are turned on in the bedroom, proceed to turn on one
            foreach light: item:
                if is_light(light) and inside(light, bedroom):
                    turn_on_light(light)
                    break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<light: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_wall_clock_249_around_dresser_123(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(wall_clock,dresser_instance)
        else:
            exp(wall_clock,dresser_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,dresser_instance]=True
        close[dresser_instance,wall_clock]=True
    

behavior find_remote_control_2052_around_nightstand_100(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==100
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(remote_control,nightstand_instance)
        else:
            exp(remote_control,nightstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,nightstand_instance]=True
        close[nightstand_instance,remote_control]=True
    

#goal_representation
 
def has_bedroom_light_on(bedroom:item):
    # Function to check if there is a light that is turned on in the specified bedroom
    symbol has_light_on=exists o: item: (is_light(o) and is_on(o) and inside(o, bedroom))
    return has_light_on

behavior turn_on_light(light:item):
    body:
        achieve_once is_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        if not has_bedroom_light_on(bedroom):
            # If no lights are turned on in the bedroom, proceed to turn on one
            foreach light: item:
                if is_light(light) and inside(light, bedroom):
                    turn_on_light(light)
                    break

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select a bedroom in the environment

        bind light: item where:
            is_light(light) and inside(light, bedroom)
        # Select a light that is inside the bedroom

        achieve is_on(light)
        # Turn on the light in the bedroom

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select a bedroom in the environment

        bind light: item where:
            is_light(light) and inside(light, bedroom)
        # Select a light that is inside the bedroom

        achieve is_on(light)
        # Turn on the light in the bedroom

##############################
From agent.py-> find a plan in act()
walk_executor(light_169)switchon_executor(light_169)
##############################
From agent.py
walk_executor(light_169)
Robot find: keyboard_168, drawing_175, chair_103, drawing_174, Robot is close to the light_169. 
##############################
From agent.py
switchon_executor(light_169)
Robot find: Robot is close to the light_169. light_169 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_bathroom_light(light: item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        bind light: item where:
            is_light(light) and inside(light, bathroom)
        # Assuming the light in the bathroom has already been found in the previous action, so, now turn it on
        turn_on_bathroom_light(light)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_bathroom_light(light: item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        bind light: item where:
            is_light(light) and inside(light, bathroom)
        # Assuming the light in the bathroom has already been found in the previous action, so, now turn it on
        turn_on_bathroom_light(light)

##############################
From agent.py-> find a plan in act()
walk_executor(light_64)switchon_executor(light_64)
##############################
From agent.py
walk_executor(light_64)
Robot find: towel_rack_32, mat_22, Robot is close to the light_64. 
##############################
From agent.py
switchon_executor(light_64)
Robot find: Robot is close to the light_64. light_64 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Turn on the lights in the bedroom. Then turn on the lights in the bathroom.
Action History:
['walk_executor(light_169)', 'switchon_executor(light_169)', 'walk_executor(light_64)', 'switchon_executor(light_64)']
Time info:
Time consume: 45 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 62
goal generate times: 3
goal correct times: 0
action_num: 4

Task complete rate:
1
Scene_id: 0
##############################
