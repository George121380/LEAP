From agent.py
Reset goals: The sub-goals are: 
['1. Find and prepare the noodles and chicken by cleaning and cutting them as needed.', '2. Boil the noodles and chicken together until fully cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2029_around_kitchen_counter_230(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_noodles_and_chicken():
    # Function to identify if there are noodles and chicken present
    symbol noodles_present = exists o: item : (is_food_noodles(o))
    symbol chicken_present = exists o: item : (is_food_chicken(o))
    return noodles_present and chicken_present

behavior find_and_prepare(noodles:item, chicken:item):
    body:
        if dirty(noodles):
            # Check if noodles are dirty
            wash(noodles)
            # Wash the noodles if they are dirty
        
        if dirty(chicken):
            # Check if the chicken is dirty
            wash(chicken)
            # Wash the chicken if it is dirty
        
        achieve_once cut(chicken) 
        # Cut the chicken into pieces

behavior __goal__():
    body:
        if has_noodles_and_chicken():
            # If noodles and chicken are present according to known information
            bind noodles: item where:
                is_food_noodles(noodles)
                
            bind chicken: item where:
                is_food_chicken(chicken)
                
            find_and_prepare(noodles, chicken) 
            # Find and prepare the noodles and chicken

        else: 
            # If there is not enough information, observe the scene for noodles and chicken
            foreach obj: item:
                if is_food_noodles(obj) or is_food_chicken(obj):
                    observe(obj, "Identify and check if it needs cleaning or cutting")
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_noodles_and_chicken():
    # Function to identify if there are noodles and chicken present
    symbol noodles_present = exists o: item : (is_food_noodles(o))
    symbol chicken_present = exists o: item : (is_food_chicken(o))
    return noodles_present and chicken_present

behavior find_and_prepare(noodles:item, chicken:item):
    body:
        if dirty(noodles):
            # Check if noodles are dirty
            wash(noodles)
            # Wash the noodles if they are dirty
        
        if dirty(chicken):
            # Check if the chicken is dirty
            wash(chicken)
            # Wash the chicken if it is dirty
        
        achieve_once cut(chicken) 
        # Cut the chicken into pieces

behavior __goal__():
    body:
        if has_noodles_and_chicken():
            # If noodles and chicken are present according to known information
            bind noodles: item where:
                is_food_noodles(noodles)
                
            bind chicken: item where:
                is_food_chicken(chicken)
                
            find_and_prepare(noodles, chicken) 
            # Find and prepare the noodles and chicken

        else: 
            # If there is not enough information, observe the scene for noodles and chicken
            foreach obj: item:
                if is_food_noodles(obj) or is_food_chicken(obj):
                    observe(obj, "Identify and check if it needs cleaning or cutting")
 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_chicken_2017. food_chicken_2017 is close cutting_board_2051. food_chicken_2017 is on cutting_board_2051. food_chicken_2017 released by right hand. 
##############################
From agent.py
exp(knife_2050, cutting_board_2051)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_chicken_2017)
Robot find: Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to locate the noodles and check if they require cleaning. If the noodles are dirty, wash them before proceeding to the cutting step, if necessary.
##############################
From agent.py
Human Instruction: You need to locate the noodles and check if they require cleaning. If the noodles are dirty, wash them before proceeding to the cutting step, if necessary.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_chicken_2017 around fridge_289.
Action 5: Grab food_chicken_2017.
Action 6: Walk to cutting_board_2051.
Action 7: Put food_chicken_2017 on cutting_board_2051.
Action 8: look for knife_2050 around cutting_board_2051.
Action 9: Walk to knife_2050.
Action 10: Grab knife_2050.
Action 11: Walk to food_chicken_2017.
Action 12: Cut food_chicken_2017.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def check_noodles_dirty(vegetable:item):
    # Function to check if the noodles are dirty
    symbol noodles_dirty= dirty(vegetable)
    return noodles_dirty

behavior wash_noodles(noodles:item):
    body:
        achieve_once clean(noodles)
        # Ensure noodles are clean

def check_chicken_dirty(meat:item):
    # Function to check if the chicken is dirty
    symbol chicken_dirty= dirty(meat)
    return chicken_dirty

behavior wash_chicken(chicken:item):
    body:
        achieve_once clean(chicken)
        # Ensure chicken is clean

def check_if_cut_necessary(item: item):
    # Function to check if the item needs to be cut
    symbol is_cuttable = cuttable(item)
    return is_cuttable

behavior cut_item(item:item):
    body:
        achieve_once cut(item)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select fridge
        
        bind food_noodles: item where:
            is_food_noodles(food_noodles)
        # Select noodles
        
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select chicken

        if check_noodles_dirty(food_noodles):
            # If noodles are dirty, wash them
            wash_noodles(food_noodles)

        if check_chicken_dirty(food_chicken):
            # If chicken is dirty, wash it
            wash_chicken(food_chicken)
        
        if check_if_cut_necessary(food_noodles):
            cut_item(food_noodles)
        
        if check_if_cut_necessary(food_chicken):
            cut_item(food_chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior prepare_noodles_and_chicken(noodles:item, chicken:item, knife:item, cutting_board:item):
    body:
        if dirty(noodles):
            wash(noodles)
        # Clean the dirty noodles
        achieve_once on(chicken, cutting_board)
        # Place chicken on the cutting board for preparation
        achieve_once cut(chicken)
        # Cut the chicken into pieces with the knife

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Bind the noodles item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind the chicken item

        bind knife: item where:
            is_knife(knife)
        # Bind the knife item

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Bind the cutting board item

        prepare_noodles_and_chicken(noodles, chicken, knife, cutting_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_noodle_clean(noodles: item):
    # Function to check if the noodles are clean
    symbol clean_noodles = not exists dirt: item : (dirty(noodles))
    return clean_noodles

def is_chicken_clean(chicken: item):
    # Function to check if the chicken is clean
    symbol clean_chicken = not exists dirt: item : (dirty(chicken))
    return clean_chicken

behavior clean_noodles(noodles: item):
    body:
        achieve clean(noodles)

behavior clean_chicken(chicken: item):
    body:
        achieve clean(chicken)

behavior cut_item(item: item):
    body:
        achieve cut(item)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)

        bind chicken: item where:
            is_food_chicken(chicken)

        if not is_noodle_clean(noodles):
            clean_noodles(noodles)

        if not is_chicken_clean(chicken):
            clean_chicken(chicken)
        
        foreach item: item:
            if is_food_noodles(item) or is_food_chicken(item):
                cut_item(item)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'dirt') at line 5778, column 39.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2056_around_bathroom_counter_41(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#goal_representation
 
def is_noodle_clean(noodles: item):
    # Function to check if the noodles are clean
    symbol clean_noodles = not exists dirt: item : (dirty(noodles))
    return clean_noodles

def is_chicken_clean(chicken: item):
    # Function to check if the chicken is clean
    symbol clean_chicken = not exists dirt: item : (dirty(chicken))
    return clean_chicken

behavior clean_noodles(noodles: item):
    body:
        achieve clean(noodles)

behavior clean_chicken(chicken: item):
    body:
        achieve clean(chicken)

behavior cut_item(item: item):
    body:
        achieve cut(item)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)

        bind chicken: item where:
            is_food_chicken(chicken)

        if not is_noodle_clean(noodles):
            clean_noodles(noodles)

        if not is_chicken_clean(chicken):
            clean_chicken(chicken)
        
        foreach item: item:
            if is_food_noodles(item) or is_food_chicken(item):
                cut_item(item)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'dirt') at line 5832, column 39.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
def is_noodle_clean(noodles: item):
    # Function to check if the noodles are clean
    symbol clean_noodles = not exists dirt:item : (dirty(noodles))
    return clean_noodles

def is_chicken_clean(chicken: item):
    # Function to check if the chicken is clean
    symbol clean_chicken = not exists dirt:item : (dirty(chicken))
    return clean_chicken

behavior clean_noodles(noodles: item):
    body:
        achieve clean(noodles)

behavior clean_chicken(chicken: item):
    body:
        achieve clean(chicken)

behavior cut_item(item: item):
    body:
        achieve cut(item)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)

        bind chicken: item where:
            is_food_chicken(chicken)

        if not is_noodle_clean(noodles):
            clean_noodles(noodles)

        if not is_chicken_clean(chicken):
            clean_chicken(chicken)
        
        foreach item: item:
            if is_food_noodles(item) or is_food_chicken(item):
                cut_item(item)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_chicken_2017)', 'walk_executor(cutting_board_2051)', 'put_executor(food_chicken_2017, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_chicken_2017)', 'cut_executor(food_chicken_2017)']
Time info:
Time consume: 98 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 115
goal generate times: 4
goal correct times: 2
action_num: 10

Task complete rate:
Keystate: k1 - Requires: 17 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
