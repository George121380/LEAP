From agent.py
Reset goals: The sub-goals are: 
['1. Find rice and eggs in the kitchen area.', '2. Cook the rice and scramble the eggs together in a pan.', '3. Season the fried rice with egg as desired and serve.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_rice_or_egg(x:item):
    # Function to check if an item is rice or an egg
    return is_food_rice(x) or is_food_egg(x)

behavior __goal__():
    body:
        # Check known information for rice or eggs in the kitchen area
        if exists item: item : (is_rice_or_egg(item) and inside(item, kitchen_area)):
            bind item: item where:
                is_rice_or_egg(item) and inside(item, kitchen_area)
            achieve close_char(char, item)
        
        else:
            # If the rice or eggs are not confirmed to be in the kitchen, visit all unvisited items to find them
            foreach item: item:
                if not visited(item):
                    observe(item, "Check if its rice or an egg in the kitchen area")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_area; available variables: [Variable<item: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
def is_rice_or_egg(x:item):
    # Function to check if an item is rice or an egg
    return is_food_rice(x) or is_food_egg(x)

bind kitchen_area: item where:
    is_kitchen_counter(kitchen_area)

behavior __goal__():
    body:
        # Check known information for rice or eggs in the kitchen area
        if exists item: item : (is_rice_or_egg(item) and inside(item, kitchen_area)):
            bind item: item where:
                is_rice_or_egg(item) and inside(item, kitchen_area)
            achieve close_char(char, item)
        
        else:
            # If the rice or eggs are not confirmed to be in the kitchen, visit all unvisited items to find them
            foreach item: item:
                if not visited(item):
                    observe(item, "Check if its rice or an egg in the kitchen area")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BIND', 'bind') at line 5672, column 1.
Expected one of: 
	* $END
	* GENERATOR
	* CONTROLLER
	* BEHAVIOR
	* DOMAIN
	* TYPEDEF
	* UNDIRECTED_GENERATOR
	* _PRAGMA_KEYWORD
	* GOAL
	* OBJECTS
	* INIT
	* FEATURE
	* IMPORT
	* DEF
	* INCLUDE
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#goal_representation
 
def is_rice_or_egg(x:item):
    # Function to check if an item is rice or an egg
    return is_food_rice(x) or is_food_egg(x)

behavior __goal__():
    body:
        bind kitchen_area: item where:
            is_kitchen_counter(kitchen_area)

        # Check known information for rice or eggs in the kitchen area
        if exists item: item : (is_rice_or_egg(item) and inside(item, kitchen_area)):
            bind item: item where:
                is_rice_or_egg(item) and inside(item, kitchen_area)
            achieve close_char(char, item)
        
        else:
            # If the rice or eggs are not confirmed to be in the kitchen, visit all unvisited items to find them
            foreach item: item:
                if not visited(item):
                    observe(item, "Check if its rice or an egg in the kitchen area")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_item(x:item):
    return is_food_rice(x) or is_food_egg(x)

behavior find_target_items_in_kitchen():
    body:
        if exists item: item : (is_target_item(item) and inside(item, kitchen)):
            bind item: item where:
                is_target_item(item) and inside(item, kitchen)
            achieve close_char(char, item)

        else:
            foreach item: item:
                if is_target_item(item) and not visited(item):
                    observe(item, "Check if the item is in the kitchen")

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen(kitchen)
        find_target_items_in_kitchen()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen; available variables: [Variable<item: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
def is_target_item(x:item):
    return is_food_rice(x) or is_food_egg(x)

behavior find_target_items_in_kitchen(kitchen:item):
    body:
        if exists item: item : (is_target_item(item) and inside(item, kitchen)):
            bind item: item where:
                is_target_item(item) and inside(item, kitchen)
            achieve close_char(char, item)

        else:
            foreach item: item:
                if is_target_item(item) and not visited(item):
                    observe(item, "Check if the item is in the kitchen")

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen(kitchen)
        find_target_items_in_kitchen(kitchen)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_rice(ingredient:item):
    # Function to check if an ingredient is rice
    symbol is_rice=exists item: item : (is_food_rice(item))
    return is_rice

def is_egg(ingredient:item):
    # Function to check if an ingredient is egg
    symbol is_egg=exists item: item : (is_food_egg(item))
    return is_egg

behavior __goal__():
    body:
        if exists rice: item : (is_food_rice(rice)):
            # If rice is already identified, move close to it
            bind rice: item where:
                is_food_rice(rice)
            achieve close_char(char, rice)

        else:
            # Check for rice in all unvisited items
            foreach item: item:
                if not visited(item) and is_rice(item):
                    observe(item,"Check if this is rice")

        if exists egg: item : (is_food_egg(egg)):
            # If egg is already identified, move close to it
            bind egg: item where:
                is_food_egg(egg)
            achieve close_char(char, egg)

        else:
            # Check for eggs in all unvisited items
            foreach item: item:
                if not visited(item) and is_egg(item):
                    observe(item,"Check if this is egg")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the rice and eggs.', '2. Cook the rice and scramble the eggs.', '3. Combine the rice and eggs in a pan to fry.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation

behavior find_and_wash_rice_and_eggs(rice:item, egg:item):
    body:
        achieve clean(rice)
        achieve clean(egg)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        bind egg: item where:
            is_food_egg(egg)
        # Select egg
        
        find_and_wash_rice_and_eggs(rice, egg)
        # Find and wash the rice and egg

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_and_wash_rice_and_eggs(rice:item, egg:item):
    body:
        achieve clean(rice)
        achieve clean(egg)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        bind egg: item where:
            is_food_egg(egg)
        # Select egg
        
        find_and_wash_rice_and_eggs(rice, egg)
        # Find and wash the rice and egg

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_rice_2036, cupboard_229)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_egg_2020)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_rice_2036, cupboard_229)
Fail to find food_rice_2036 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_egg_2020)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_rice_2036, kitchen_counter_230)
Fail to find food_rice_2036 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)walk_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_egg_2020)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_rice_2036, fridge_289)
Find food_rice_2036. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the rice and eggs.', '2. Cook the rice and fry the eggs together to make fried rice.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def found_rice_and_eggs():
    # Function to determine if both rice and eggs were found
    symbol has_rice = exists o: item : (is_food_rice(o) and (close_char(char, o) or visited(o)))
    symbol has_eggs = exists o: item : (is_food_egg(o) and (close_char(char, o) or visited(o)))
    return has_rice and has_eggs

behavior __goal__():
    body:
        if found_rice_and_eggs():
            # If both rice and eggs have been found, they need to be washed next
            bind rice: item where:
                is_food_rice(rice) and (close_char(char, rice) or visited(rice))

            bind eggs: item where:
                is_food_egg(eggs) and (close_char(char, eggs) or visited(eggs))

            wash(rice)
            wash(eggs)
        else:
            # If not both rice and eggs have been found, continue searching for them
            foreach o: item:
                if (is_food_rice(o) or is_food_egg(o)) and not visited(o):
                    observe(o, "Check if this is rice or eggs")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def found_rice_and_eggs():
    # Function to determine if both rice and eggs were found
    symbol has_rice = exists o: item : (is_food_rice(o) and (close_char(char, o) or visited(o)))
    symbol has_eggs = exists o: item : (is_food_egg(o) and (close_char(char, o) or visited(o)))
    return has_rice and has_eggs

behavior __goal__():
    body:
        if found_rice_and_eggs():
            # If both rice and eggs have been found, they need to be washed next
            bind rice: item where:
                is_food_rice(rice) and (close_char(char, rice) or visited(rice))

            bind eggs: item where:
                is_food_egg(eggs) and (close_char(char, eggs) or visited(eggs))

            wash(rice)
            wash(eggs)
        else:
            # If not both rice and eggs have been found, continue searching for them
            foreach o: item:
                if (is_food_rice(o) or is_food_egg(o)) and not visited(o):
                    observe(o, "Check if this is rice or eggs")

##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2036)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_egg_2020)switchoff_executor(faucet_232)
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the food_rice_2036. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_rice_2036. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_rice_2036)
Robot find: Robot is close to the food_rice_2036. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_rice_2036. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the food_rice_2036. Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_rice_2036. Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_rice_2036, kitchen_counter_230)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_rice_2036. food_rice_2036 is close kitchen_counter_230. food_rice_2036 is on kitchen_counter_230. food_rice_2036 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(food_egg_2020)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice_with_eggs(rice:item, egg:item, pan:item, stove:item):
    body:
        achieve_once inside(rice, pan) # Place rice inside the pan
        achieve_once inside(egg, pan) # Place eggs inside the pan
        
        achieve is_on(stove) # Turn on the stove to start cooking
        achieve_once inside(pan, stove) # Place the pan on the stove

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        cook_rice_with_eggs(rice, egg, pan, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation

behavior cook_rice_and_fry_eggs(rice:item, egg:item, pan:item, stove:item):
    body:
        achieve_once inside(rice, pan) # Put the rice inside the pan
        achieve_once inside(egg, pan) # Crack the eggs into the pan with the rice
        achieve_once on(pan, stove) # Place the pan on the stove
        achieve_once is_on(stove) # Turn on the stove to cook

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item
        
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        cook_rice_and_fry_eggs(rice, egg, pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior cook_rice_and_fry_eggs(rice:item, egg:item, pan:item, stove:item):
    body:
        achieve_once inside(rice, pan) # Put the rice inside the pan
        achieve_once inside(egg, pan) # Crack the eggs into the pan with the rice
        achieve_once on(pan, stove) # Place the pan on the stove
        achieve_once is_on(stove) # Turn on the stove to cook

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item
        
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        cook_rice_and_fry_eggs(rice, egg, pan, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_rice_2036, fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. food_rice_2036 is inside fryingpan_2083. food_rice_2036 is close fryingpan_2083. fryingpan_2083 is close food_rice_2036. food_rice_2036 released by right hand. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_rice_2036)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_rice_2036)', 'switchoff_executor(faucet_43)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_rice_2036, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'wash_executor(food_egg_2020)', 'switchoff_executor(faucet_232)', 'grab_executor(food_rice_2036)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_rice_2036, fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 203 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 93
goal generate times: 7
goal correct times: 0
action_num: 26

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
