From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Place milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve clean(fish)
        # Ensure the fish is clean

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish from the available items
        wash_fish(fish)
        # Wash the fish to make it clean

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_fish(fish:item):
    body:
        achieve clean(fish)
        # Ensure the fish is clean

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish from the available items
        wash_fish(fish)
        # Wash the fish to make it clean

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)grab_executor(food_fish_2054)wash_executor(food_fish_2054)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_fish_2054, fridge_140)
Find food_fish_2054. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2054)wash_executor(food_fish_2054)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
wash_executor(food_fish_2054)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. food_fish_2054 is cleaned. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_table_127(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(remote_control,table_instance)
        else:
            exp(remote_control,table_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,table_instance]=True
        close[table_instance,remote_control]=True
    

behavior find_fryingpan_2107_around_oven_141(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

behavior find_bowl_2095_around_table_193(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
def is_dining_room_table_empty(table:item):
    # Function to check if a dining room table is empty
    symbol empty_table = not exists o: item: (inside(o, table) or on(o, table))
    return empty_table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Ensure the dining room is found
        
        foreach table: item:
            if is_table(table) and inside(table, dining_room) and is_dining_room_table_empty(table):
                # Check if there is an empty table inside the dining room
                achieve close_char(char, table)
                # Move closer to the empty table

                bind fridge: item where:
                    is_fridge(fridge)
                # Select the fridge to grab ingredients

                observe(fridge, "Check where the milk, turkey, egg, fish, and chicken are")
                # Observe the fridge for the needed items

                bind milk: item where:
                    is_milk(milk) and inside(milk, fridge)
                # Select milk
                
                bind turkey: item where:
                    is_food_turkey(turkey) and inside(turkey, fridge)
                # Select turkey

                bind egg: item where:
                    is_food_egg(egg) and inside(egg, fridge)
                # Select egg

                bind fish: item where:
                    is_food_fish(fish) and inside(fish, fridge)
                # Select fish

                bind chicken: item where:
                    is_food_chicken(chicken) and inside(chicken, fridge)
                # Select chicken

                achieve_once on(milk, table)
                # Place milk on the table
                achieve_once on(turkey, table)
                # Place turkey on the table
                achieve_once on(egg, table)
                # Place egg on the table 
                achieve_once on(fish, table)
                # Place fish on the table 
                achieve_once on(chicken, table)
                # Place chicken on the table

                break
                # Stop after placing all items on an empty table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5878, column 37.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_remote_control_2081_around_cutting_board_2080(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(remote_control,cutting_board_instance)
        else:
            exp(remote_control,cutting_board_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,cutting_board_instance]=True
        close[cutting_board_instance,remote_control]=True
    

behavior find_bowl_2095_around_table_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
def is_dining_room_table_empty(table:item):
    # Function to check if a dining room table is empty
    symbol empty_table = not exists o: item: (inside(o, table) or on(o, table))
    return empty_table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Ensure the dining room is found
        
        foreach table: item:
            if is_table(table) and inside(table, dining_room) and is_dining_room_table_empty(table):
                # Check if there is an empty table inside the dining room
                achieve close_char(char, table)
                # Move closer to the empty table

                bind fridge: item where:
                    is_fridge(fridge)
                # Select the fridge to grab ingredients

                observe(fridge, "Check where the milk, turkey, egg, fish, and chicken are")
                # Observe the fridge for the needed items

                bind milk: item where:
                    is_milk(milk) and inside(milk, fridge)
                # Select milk
                
                bind turkey: item where:
                    is_food_turkey(turkey) and inside(turkey, fridge)
                # Select turkey

                bind egg: item where:
                    is_food_egg(egg) and inside(egg, fridge)
                # Select egg

                bind fish: item where:
                    is_food_fish(fish) and inside(fish, fridge)
                # Select fish

                bind chicken: item where:
                    is_food_chicken(chicken) and inside(chicken, fridge)
                # Select chicken

                achieve_once on(milk, table)
                # Place milk on the table
                achieve_once on(turkey, table)
                # Place turkey on the table
                achieve_once on(egg, table)
                # Place egg on the table 
                achieve_once on(fish, table)
                # Place fish on the table 
                achieve_once on(chicken, table)
                # Place chicken on the table

                break
                # Stop after placing all items on an empty table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5879, column 37.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2018_around_kitchen_counter_129(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

behavior find_food_orange_2008_around_table_193(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_orange,table_instance)
        else:
            exp(food_orange,table_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,table_instance]=True
        close[table_instance,food_orange]=True
    

behavior find_remote_control_2081_around_cutting_board_2080(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(remote_control,cutting_board_instance)
        else:
            exp(remote_control,cutting_board_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,cutting_board_instance]=True
        close[cutting_board_instance,remote_control]=True
    

behavior find_food_onion_2026_around_table_193(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_onion,table_instance)
        else:
            exp(food_onion,table_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,table_instance]=True
        close[table_instance,food_onion]=True
    

behavior find_food_bread_2016_around_table_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#goal_representation
 
def is_dining_room_table_empty(table:item):
    # Function to check if a dining room table is empty
    symbol empty_table = exists o: item: (inside(o, table) or on(o, table))
    return not empty_table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Ensure the dining room is found
        
        foreach table: item:
            if is_table(table) and inside(table, dining_room) and is_dining_room_table_empty(table):
                # Check if there is an empty table inside the dining room
                achieve close_char(char, table)
                # Move closer to the empty table

                bind fridge: item where:
                    is_fridge(fridge)
                # Select the fridge to grab ingredients

                observe(fridge, "Check where the milk, turkey, egg, fish, and chicken are")
                # Observe the fridge for the needed items
                
                bind food_item_milk: item where:
                    is_milk(food_item_milk) and inside(food_item_milk, fridge)
                # Select milk
                
                bind food_item_turkey: item where:
                    is_food_turkey(food_item_turkey) and inside(food_item_turkey, fridge)
                # Select turkey

                bind food_item_egg: item where:
                    is_food_egg(food_item_egg) and inside(food_item_egg, fridge)
                # Select egg

                bind food_item_fish: item where:
                    is_food_fish(food_item_fish) and inside(food_item_fish, fridge)
                # Select fish

                bind food_item_chicken: item where:
                    is_food_chicken(food_item_chicken) and inside(food_item_chicken, fridge)
                # Select chicken

                achieve_once on(food_item_milk, table)
                # Place milk on the table
                achieve_once on(food_item_turkey, table)
                # Place turkey on the table
                achieve_once on(food_item_egg, table)
                # Place egg on the table 
                achieve_once on(food_item_fish, table)
                # Place fish on the table 
                achieve_once on(food_item_chicken, table)
                # Place chicken on the table

                break
                # Stop after placing all items on an empty table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_table_193(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_tray_142_around_table_193(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(tray,table_instance)
        else:
            exp(tray,table_instance)
    eff:
        unknown[tray]=False
        close[tray,table_instance]=True
        close[table_instance,tray]=True
    

behavior find_bowl_2096_around_table_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior place_food_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room)
            
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge_140)
        
        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge_140)
        
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge_140)
            
        bind fish: item where:
            is_food_fish(fish) and clean(fish)
            
        observe(fish, "Check cleanliness of fish")
        
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge_140)
        
        place_food_on_table(milk, turkey, egg, fish, chicken, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_2105_around_table_193(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_tray_142_around_table_193(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(tray,table_instance)
        else:
            exp(tray,table_instance)
    eff:
        unknown[tray]=False
        close[tray,table_instance]=True
        close[table_instance,tray]=True
    

#goal_representation
behavior place_food_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)
            
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge_140)
        
        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge_140)
        
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge_140)
            
        bind fish: item where:
            is_food_fish(fish) and clean(fish)
            
        observe(fish, "Check cleanliness of fish")
        
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge_140)
        
        place_food_on_table(milk, turkey, egg, fish, chicken, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fridge_140; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_2105_around_table_193(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
behavior place_food_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(egg, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140

        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)
            
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        
        bind turkey: item where:
            is_food_turkey(turkey) and inside(turkey, fridge)
        
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge)
            
        bind fish: item where:
            is_food_fish(fish) and clean(fish)
            
        observe(fish, "Check cleanliness of fish")
        
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fridge)
        
        place_food_on_table(milk, turkey, egg, fish, chicken, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_table_193(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_butter,table_instance)
        else:
            exp(food_butter,table_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,table_instance]=True
        close[table_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind eggs: item where:
            is_food_egg(eggs)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        place_items_on_table(milk, turkey, eggs, fish, chicken, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2018_around_table_193(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_butter,table_instance)
        else:
            exp(food_butter,table_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,table_instance]=True
        close[table_instance,food_butter]=True
    

behavior find_food_orange_2008_around_table_193(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_orange,table_instance)
        else:
            exp(food_orange,table_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,table_instance]=True
        close[table_instance,food_orange]=True
    

behavior find_food_bread_2016_around_table_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#goal_representation
 
behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind eggs: item where:
            is_food_egg(eggs)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind eggs: item where:
            is_food_egg(eggs)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_123)put_executor(milk_2074, table_123)walk_executor(food_turkey_2071)grab_executor(food_turkey_2071)walk_executor(table_123)put_executor(food_turkey_2071, table_123)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(table_123)put_executor(food_egg_2053, table_123)put_executor(food_fish_2054, table_123)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(table_123)put_executor(food_chicken_2050, table_123)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the food_fish_2054. Robot is close to the milk_2074. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the food_fish_2054. Robot is close to the milk_2074. Robot is close to the fridge_140. Grabbing milk_2074 by left hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the food_fish_2054. Robot is close to the milk_2074. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(milk_2074, table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the milk_2074. Robot is close to the mat_114. Robot is close to the table_123. milk_2074 is close table_123. table_123 is close milk_2074. milk_2074 is on table_123. milk_2074 released by left hand. 
##############################
From agent.py
walk_executor(food_turkey_2071)
Robot find: Robot is close to the food_fish_2054. Robot is close to the fridge_140. Robot is close to the food_turkey_2071. 
##############################
From agent.py
grab_executor(food_turkey_2071)
Robot find: Robot is close to the food_fish_2054. Robot is close to the fridge_140. Robot is close to the food_turkey_2071. Grabbing food_turkey_2071 by left hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_turkey_2071. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(food_turkey_2071, table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_turkey_2071. Robot is close to the mat_114. Robot is close to the table_123. table_123 is close food_turkey_2071. food_turkey_2071 is close table_123. food_turkey_2071 is on table_123. food_turkey_2071 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_fish_2054. Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_fish_2054. Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_egg_2053. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(food_egg_2053, table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_egg_2053. Robot is close to the mat_114. Robot is close to the table_123. food_egg_2053 is close table_123. table_123 is close food_egg_2053. food_egg_2053 is on table_123. food_egg_2053 released by left hand. 
##############################
From agent.py
put_executor(food_fish_2054, table_123)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_egg_2053. Robot is close to the mat_114. Robot is close to the table_123. table_123 is close food_fish_2054. food_fish_2054 is close table_123. food_fish_2054 is on table_123. food_fish_2054 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(food_chicken_2050, table_123)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the mat_114. Robot is close to the table_123. food_chicken_2050 is close table_123. table_123 is close food_chicken_2050. food_chicken_2050 is on table_123. food_chicken_2050 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_fish_2054)', 'wash_executor(food_fish_2054)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(table_123)', 'put_executor(milk_2074, table_123)', 'walk_executor(food_turkey_2071)', 'grab_executor(food_turkey_2071)', 'walk_executor(table_123)', 'put_executor(food_turkey_2071, table_123)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(table_123)', 'put_executor(food_egg_2053, table_123)', 'put_executor(food_fish_2054, table_123)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(table_123)', 'put_executor(food_chicken_2050, table_123)']
Time info:
Time consume: 161 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 50
goal generate times: 4
goal correct times: 1
action_num: 24

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
