From agent.py
Reset goals: The sub-goals are: 
['1. Find a plate and put the pizza and hamburger on it.', '2. Heat them in the microwave.', '3. Put the heated items on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2152_around_kitchen_counter_119(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_pizza_2106_around_kitchen_counter_119(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

behavior find_food_hamburger_2096_around_kitchen_counter_119(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

#exp_behavior_end

#goal_representation
 
def has_pizza_and_hamburger_on_plate(plate:item):
    # Function to check if pizza and hamburger are on the specified plate
    symbol has_food=exists o: item : ((is_food_pizza(o) or is_food_hamburger(o)) and on(o, plate))
    return has_food

behavior __goal__():
    body:
        if exists plate: item : (is_plate(plate) and has_pizza_and_hamburger_on_plate(plate)):
            # Check if there is a plate with pizza and hamburger based on the available information
            bind plate: item where:
                is_plate(plate) and has_pizza_and_hamburger_on_plate(plate) 
            # Select a plate that has pizza and hamburger on it
            achieve close_char(char, plate)
            # Move the character closer to the plate with food
        
        else:
            # If no plate with pizza and hamburger exists, locate them
            bind plate: item where:
                is_plate(plate)
            bind food_pizza: item where:
                is_food_pizza(food_pizza)
            bind food_hamburger: item where:
                is_food_hamburger(food_hamburger)
            
            observe(food_pizza, "Check its location")
            # Observe the location of the pizza
            
            observe(food_hamburger, "Check its location")
            # Observe the location of the hamburger
            
            observe(plate, "Check its location")
            # Observe the location of the plate

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_pizza_and_hamburger_on_plate(plate:item):
    # Function to check if pizza and hamburger are on the specified plate
    symbol has_food=exists o: item : ((is_food_pizza(o) or is_food_hamburger(o)) and on(o, plate))
    return has_food

behavior __goal__():
    body:
        if exists plate: item : (is_plate(plate) and has_pizza_and_hamburger_on_plate(plate)):
            # Check if there is a plate with pizza and hamburger based on the available information
            bind plate: item where:
                is_plate(plate) and has_pizza_and_hamburger_on_plate(plate) 
            # Select a plate that has pizza and hamburger on it
            achieve close_char(char, plate)
            # Move the character closer to the plate with food
        
        else:
            # If no plate with pizza and hamburger exists, locate them
            bind plate: item where:
                is_plate(plate)
            bind food_pizza: item where:
                is_food_pizza(food_pizza)
            bind food_hamburger: item where:
                is_food_hamburger(food_hamburger)
            
            observe(food_pizza, "Check its location")
            # Observe the location of the pizza
            
            observe(food_hamburger, "Check its location")
            # Observe the location of the hamburger
            
            observe(plate, "Check its location")
            # Observe the location of the plate

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_pizza_2106, kitchen_counter_119)walk_executor(food_pizza_2106)obs(food_pizza_2106, Check its location)walk_executor(kitchen_counter_119)exp(food_hamburger_2096, kitchen_counter_119)walk_executor(food_hamburger_2096)obs(food_hamburger_2096, Check its location)walk_executor(kitchen_counter_119)exp(plate_2152, kitchen_counter_119)walk_executor(plate_2152)obs(plate_2152, Check its location)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_pizza_2106, kitchen_counter_119)
Fail to find food_pizza_2106 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_pizza_2106, kitchen_counter_123)walk_executor(food_pizza_2106)obs(food_pizza_2106, Check its location)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_hamburger_2096, fridge_126)walk_executor(food_hamburger_2096)obs(food_hamburger_2096, Check its location)walk_executor(plate_2152)obs(plate_2152, Check its location)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_pizza_2106, kitchen_counter_123)
Fail to find food_pizza_2106 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_pizza_2106, fridge_126)walk_executor(food_pizza_2106)obs(food_pizza_2106, Check its location)walk_executor(fridge_126)exp(food_hamburger_2096, fridge_126)walk_executor(food_hamburger_2096)obs(food_hamburger_2096, Check its location)walk_executor(plate_2152)obs(plate_2152, Check its location)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_pizza_2106, fridge_126)
Find food_pizza_2106. 
##############################
From agent.py-> find a plan in act()
obs(food_pizza_2106, Check its location)obs(food_hamburger_2096, Check its location)walk_executor(plate_2152)obs(plate_2152, Check its location)
##############################
From agent.py
obs(food_pizza_2106, Check its location)
Get this information:  food_pizza_2106 is inside dining_room_41. food_pizza_2106 is inside fridge_126. food_pizza_2106 is close to fridge_126. food_pizza_2106 is close to character_240. food_pizza_2106 is CLEAN.
##############################
From agent.py
obs(food_hamburger_2096, Check its location)
Get this information:  food_hamburger_2096 is close to fridge_126. food_hamburger_2096 is close to character_240. food_hamburger_2096 is inside dining_room_41. food_hamburger_2096 is inside fridge_126. food_hamburger_2096 is CLEAN.
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
obs(plate_2152, Check its location)
Get this information:  plate_2152 is inside dining_room_41. plate_2152 is close to kitchen_counter_119. plate_2152 is close to character_240. plate_2152 is on kitchen_counter_119. plate_2152 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the food_pizza_2106 and food_hamburger_2096 on the plate_2152.
##############################
From agent.py
Human Instruction: You need to put the food_pizza_2106 and food_hamburger_2096 on the plate_2152.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_pizza_2106 around kitchen_counter_119.
Action 3: Walk to kitchen_counter_123.
Action 4: look for food_pizza_2106 around kitchen_counter_123.
Action 5: Walk to fridge_126.
Action 6: Switch off fridge_126.
Action 7: Open fridge_126.
Action 8: look for food_pizza_2106 around fridge_126.
Action 9: Observe around food_pizza_2106 with the question of Check its location.
Action 10: Observe around food_hamburger_2096 with the question of Check its location.
Action 11: Walk to plate_2152.
Action 12: Observe around plate_2152 with the question of Check its location.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_128_around_oven_127(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_plate(food_pizza:item, food_hamburger:item, plate:item):
    body:
        achieve_once on(food_pizza, plate)
        achieve_once on(food_hamburger, plate)

behavior __goal__():
    body:
        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        # Select pizza
        
        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        # Select hamburger

        bind plate: item where:
            is_plate(plate)
        # Select plate

        place_on_plate(food_pizza, food_hamburger, plate)
        # Place the pizza and hamburger on the selected plate

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_on_plate(food_pizza:item, food_hamburger:item, plate:item):
    body:
        achieve_once on(food_pizza, plate)
        achieve_once on(food_hamburger, plate)

behavior __goal__():
    body:
        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        # Select pizza
        
        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        # Select hamburger

        bind plate: item where:
            is_plate(plate)
        # Select plate

        place_on_plate(food_pizza, food_hamburger, plate)
        # Place the pizza and hamburger on the selected plate

##############################
From agent.py-> find a plan in act()
walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(food_pizza_2106)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_pizza_2106)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the fridge_126. Grabbing food_pizza_2106 by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_pizza_2106, plate_2152)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. plate_2152 is close food_pizza_2106. food_pizza_2106 is close plate_2152. food_pizza_2106 is on plate_2152. food_pizza_2106 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2096)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_hamburger_2096)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the fridge_126. Grabbing food_hamburger_2096 by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_hamburger_2096, plate_2152)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. food_hamburger_2096 is close plate_2152. plate_2152 is close food_hamburger_2096. food_hamburger_2096 is on plate_2152. food_hamburger_2096 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_284_around_mousepad_279(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mat,mousepad_instance)
        else:
            exp(mat,mousepad_instance)
    eff:
        unknown[mat]=False
        close[mat,mousepad_instance]=True
        close[mousepad_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave
        
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2106, plate) and on(food_hamburger_2096, plate)
        # Select the plate with pizza and hamburger on it

        achieve_once inside(plate, microwave)
        # Place the plate with pizza and hamburger inside the microwave

        achieve_once closed(microwave)
        # Close the microwave door
        
        achieve_once is_on(microwave)
        # Turn on the microwave

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_pizza_2106; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior __goal__():
    body:
        bind food_pizza_2106: item where:
            is_food_pizza(food_pizza_2106)
        bind food_hamburger_2096: item where:
            is_food_hamburger(food_hamburger_2096)

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        bind plate: item where:
            is_plate(plate) and on(food_pizza_2106, plate) and on(food_hamburger_2096, plate)
        # Select the plate with pizza and hamburger on it

        achieve_once inside(plate, microwave)
        # Place the plate with pizza and hamburger inside the microwave

        achieve_once closed(microwave)
        # Close the microwave door

        achieve_once is_on(microwave)
        # Turn on the microwave

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind food_pizza_2106: item where:
            is_food_pizza(food_pizza_2106)
        bind food_hamburger_2096: item where:
            is_food_hamburger(food_hamburger_2096)

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        bind plate: item where:
            is_plate(plate) and on(food_pizza_2106, plate) and on(food_hamburger_2096, plate)
        # Select the plate with pizza and hamburger on it

        achieve_once inside(plate, microwave)
        # Place the plate with pizza and hamburger inside the microwave

        achieve_once closed(microwave)
        # Close the microwave door

        achieve_once is_on(microwave)
        # Turn on the microwave

##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)open_executor(microwave_135)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(microwave_135)putin_executor(plate_2152, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the plate_2152. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
putin_executor(plate_2152, microwave_135)
Robot find: Robot is close to the plate_2152. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is close plate_2152. plate_2152 is inside microwave_135. plate_2152 is close microwave_135. plate_2152 released by right hand. 
##############################
From agent.py
close_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is closed. 
##############################
From agent.py
switchon_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_couch_198(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

behavior find_tray_2068_around_tray_2068(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(tray,tray_instance)
        else:
            exp(tray,tray_instance)
    eff:
        unknown[tray]=False
        close[tray,tray_instance]=True
        close[tray_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table) # Place the item on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and inside(plate, microwave)
        # Select the plate inside the microwave

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        foreach o: item:
        # Place all food items on the plate onto the table
            if (is_food_pizza(o) or is_food_hamburger(o)) and on(o, plate):
                put_on_table(o, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: microwave; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2003_around_table_270(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_tray_2068_around_table_114(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(tray,table_instance)
        else:
            exp(tray,table_instance)
    eff:
        unknown[tray]=False
        close[tray,table_instance]=True
        close[table_instance,tray]=True
    

#goal_representation
 
behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table) # Place the item on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and exists microwave: item : (is_microwave(microwave) and inside(plate, microwave))
        # Select the plate inside the microwave
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        foreach o: item:
        # Place all food items on the plate onto the table
            if (is_food_pizza(o) or is_food_hamburger(o)) and on(o, plate):
                put_on_table(o, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'microwave') at line 5382, column 40.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_194_around_desk_193(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#goal_representation

behavior put_on_table(o:item, table:item):
    body:
        achieve_once on(o, table) # Place the item on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and exists m: item : (is_microwave(m) and inside(plate, m))
        # Select the plate inside the microwave
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        foreach o: item:
        # Place all food items on the plate onto the table
            if (is_food_pizza(o) or is_food_hamburger(o)) and on(o, plate):
                put_on_table(o, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_102_around_cutting_board_2123(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(mat,cutting_board_instance)
        else:
            exp(mat,cutting_board_instance)
    eff:
        unknown[mat]=False
        close[mat,cutting_board_instance]=True
        close[cutting_board_instance,mat]=True
    

behavior find_shoe_rack_2044_around_bench_115(shoe_rack:item):
    goal: not unknown(shoe_rack)
    body:
        assert is_shoe_rack(shoe_rack)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==115
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoe_rack,bench_instance)
        else:
            exp(shoe_rack,bench_instance)
    eff:
        unknown[shoe_rack]=False
        close[shoe_rack,bench_instance]=True
        close[bench_instance,shoe_rack]=True
    

behavior find_chair_2003_around_table_199(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room= exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table) # Place the plate on the table

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and inside(plate, microwave_135) # Assume the plate was recently inside the microwave
        bind table: item where:
            is_table(table) and in_dining_room(table)
        # Select a table in the dining room
        place_on_table(plate, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: microwave_135; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_271_around_table_270(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation
 
def in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table) # Place the plate on the table

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) and id[microwave] == 135 # Correctly declare microwave instance
        bind plate: item where:
            is_plate(plate) and inside(plate, microwave)
        bind table: item where:
            is_table(table) and in_dining_room(table)
        # Select a table in the dining room
        place_on_table(plate, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior place_on_table(plate:item, table:item):
    body:
        achieve_once on(plate, table) # Place the plate on the table

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) and id[microwave] == 135 # Correctly declare microwave instance
        bind plate: item where:
            is_plate(plate) and inside(plate, microwave)
        bind table: item where:
            is_table(table) and in_dining_room(table)
        # Select a table in the dining room
        place_on_table(plate, table)

##############################
From agent.py-> find a plan in act()
switchoff_executor(microwave_135)open_executor(microwave_135)grab_executor(plate_2152)walk_executor(table_114)put_executor(plate_2152, table_114)
##############################
From agent.py
switchoff_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is turned off. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: Robot is close to the plate_2152. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
grab_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the plate_2152. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(plate_2152, table_114)
Robot find: Robot is close to the plate_2152. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close plate_2152. plate_2152 is close table_114. plate_2152 is on table_114. plate_2152 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(kitchen_counter_123)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(plate_2152)', 'walk_executor(food_pizza_2106)', 'grab_executor(food_pizza_2106)', 'walk_executor(plate_2152)', 'put_executor(food_pizza_2106, plate_2152)', 'walk_executor(food_hamburger_2096)', 'grab_executor(food_hamburger_2096)', 'walk_executor(plate_2152)', 'put_executor(food_hamburger_2096, plate_2152)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(plate_2152)', 'grab_executor(plate_2152)', 'walk_executor(microwave_135)', 'putin_executor(plate_2152, microwave_135)', 'close_executor(microwave_135)', 'switchon_executor(microwave_135)', 'switchoff_executor(microwave_135)', 'open_executor(microwave_135)', 'grab_executor(plate_2152)', 'walk_executor(table_114)', 'put_executor(plate_2152, table_114)']
Time info:
Time consume: 206 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 15
goal generate times: 5
goal correct times: 2
action_num: 27

Task complete rate:
1
Scene_id: 1
##############################
