From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water.', '2. Put the bowl on the table in the home office.', '3. Find the cat and put it on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2109_around_cupboard_117(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_bowl_2141_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        achieve has_water(bowl)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        
        bind faucet: item where:
            is_faucet(faucet)
        
        achieve has_water(bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(bowl_2140, kitchen_counter_123)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_123)
Fail to find bowl_2140 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(bowl_2140, cupboard_117)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(bowl_2140, cupboard_117)
Fail to find bowl_2140 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_115)exp(bowl_2140, bench_115)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(bench_115)
Robot find: mat_102, pillow_105, drawing_110, drawing_111, pillow_103, pillow_106, pillow_104, Robot is close to the bench_115. 
##############################
From agent.py
exp(bowl_2140, bench_115)
Fail to find bowl_2140 around bench_115. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2123)exp(bowl_2140, cutting_board_2123)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, cutting_board_2123)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. 
##############################
From agent.py
grab_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl filled with water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office
        
        place_bowl_on_table(bowl, table)
        # Place the bowl on the table inside the home office
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl filled with water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office
        
        place_bowl_on_table(bowl, table)
        # Place the bowl on the table inside the home office
##############################
From agent.py-> find a plan in act()
walk_executor(table_270)put_executor(bowl_2140, table_270)
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the bowl_2140. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(bowl_2140, table_270)
Robot find: Robot is close to the bowl_2140. Robot is close to the couch_269. Robot is close to the table_270. bowl_2140 is close table_270. bowl_2140 is on table_270. table_270 is close bowl_2140. bowl_2140 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation
behavior find_cat(cat:item):
    body:
        observe(cat, "Find the location of the cat in the home office")
        # Observe the surroundings to locate the cat

behavior put_cat_on_table(cat:item, table:item):
    body:
        achieve_once on(cat, table)
        # Place the cat on the table temporarily

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Use common sense to identify the cat instance
        bind table: item where:
            is_table(table) and inside(table, home_office) 
        # Use common sense to identify the table in the home office
        find_cat(cat)
        put_cat_on_table(cat, table)
        # Find the cat and place it on the table in the home office
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_remote_control_2124_around_television_281(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==281
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(remote_control,television_instance)
        else:
            exp(remote_control,television_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,television_instance]=True
        close[television_instance,remote_control]=True
    

#goal_representation
 
behavior find_cat(cat:item):
    body:
        observe(cat, "Find the location of the cat in the home office")
        # Observe the surroundings to locate the cat

behavior put_cat_on_table(cat:item, table:item):
    body:
        achieve_once on(cat, table)
        # Place the cat on the table temporarily

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Use common sense to identify the cat instance
        bind table: item where:
            is_table(table) and is_table(table) and exists room: item : (is_home_office(room) and inside(table, room))
        # Use common sense to identify the table in the home office
        find_cat(cat)
        put_cat_on_table(cat, table)
        # Find the cat and place it on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5328, column 60.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_keyboard_278_around_computer_276(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#goal_representation
behavior find_cat(cat:item):
    body:
        observe(cat, "Find the location of the cat in the home office")
        # Observe the surroundings to locate the cat

behavior put_cat_on_table(cat:item, table:item):
    body:
        achieve_once on(cat, table)
        # Place the cat on the table temporarily

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Use common sense to identify the cat instance
        bind table: item where:
            is_table(table) and exists room: item : (is_home_office(room) and inside(table, room))
        # Use common sense to identify the table in the home office
        find_cat(cat)
        put_cat_on_table(cat, table)
        # Find the cat and place it on the table in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation
behavior find_cat(cat:item, home_office:item, table:item):
    body:
        if not inside(cat, home_office):
            if not visited(cat):
                observe(cat, "Locate the cat and check if it is inside the home office")
        if inside(cat, home_office):
            achieve_once on(cat, table)
            # Place the cat on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)
        
        bind cat: item where:
            is_cat(cat)

        find_cat(cat, home_office, table)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior find_cat(cat:item, home_office:item, table:item):
    body:
        if not inside(cat, home_office):
            if not visited(cat):
                observe(cat, "Locate the cat and check if it is inside the home office")
        if inside(cat, home_office):
            achieve_once on(cat, table)
            # Place the cat on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)
        
        bind cat: item where:
            is_cat(cat)

        find_cat(cat, home_office, table)
##############################
From agent.py-> find a plan in act()
walk_executor(couch_198)exp(cat_2069, couch_198)walk_executor(cat_2069)obs(cat_2069, Locate the cat and check if it is inside the home office)
##############################
From agent.py
walk_executor(couch_198)
Robot find: chair_2003, instrument_guitar_2028, rag_2052, mat_203, phone_2016, clothes_jacket_2119, Robot is close to the couch_198. 
##############################
From agent.py
exp(cat_2069, couch_198)
Fail to find cat_2069 around couch_198. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_241)exp(cat_2069, home_office_241)walk_executor(cat_2069)obs(cat_2069, Locate the cat and check if it is inside the home office)
##############################
From agent.py
walk_executor(home_office_241)

##############################
From agent.py
exp(cat_2069, home_office_241)
Fail to find cat_2069 around home_office_241. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_241)exp(cat_2069, home_office_241)walk_executor(cat_2069)obs(cat_2069, Locate the cat and check if it is inside the home office)
##############################
From agent.py
walk_executor(home_office_241)

##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cat_2069 ?
Answer: Robot, please proceed to the home office, referenced as home_office_241. Once inside, locate dresser_274. The target item, cat_2069, is inside dresser_274.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, please proceed to the home office, referenced as home_office_241. Once inside, locate dresser_274. The target item, cat_2069, is inside dresser_274.

The actions you have taken:
Action 1: Walk to kitchen_counter_123.
Action 2: look for bowl_2140 around kitchen_counter_123.
Action 3: Walk to cupboard_117.
Action 4: look for bowl_2140 around cupboard_117.
Action 5: Walk to bench_115.
Action 6: look for bowl_2140 around bench_115.
Action 7: Walk to cutting_board_2123.
Action 8: look for bowl_2140 around cutting_board_2123.
Action 9: Walk to bowl_2140.
Action 10: Grab bowl_2140.
Action 11: Walk to faucet_20.
Action 12: Switch on faucet_20.
Action 13: Switch off faucet_20.
Action 14: Walk to table_270.
Action 15: Put bowl_2140 on table_270.
Action 16: Walk to couch_198.
Action 17: look for cat_2069 around couch_198.
Action 18: Walk to home_office_241.
Action 19: look for cat_2069 around home_office_241.
Action 20: Walk to home_office_241.

##############################
From agent.py
exp(cat_2069, home_office_241)
Fail to find cat_2069 around home_office_241. 
##############################
From agent.py-> find a plan in act()
walk_executor(dresser_274)open_executor(dresser_274)exp(cat_2069, dresser_274)walk_executor(cat_2069)obs(cat_2069, Locate the cat and check if it is inside the home office)
##############################
From agent.py
walk_executor(dresser_274)
Robot find: Robot is close to the dresser_274. 
##############################
From agent.py
open_executor(dresser_274)
Robot find: hanger_292, hanger_293, hanger_294, blow_dryer_2057, cat_2069, check_2075, clothes_pants_2036, Robot is close to the hanger_292. Robot is close to the hanger_293. Robot is close to the hanger_294. Robot is close to the blow_dryer_2057. Robot is close to the dresser_274. Robot is close to the cat_2069. Robot is close to the check_2075. dresser_274 is opened. 
##############################
From agent.py
exp(cat_2069, dresser_274)
Find cat_2069. 
##############################
From agent.py-> find a plan in act()
obs(cat_2069, Locate the cat and check if it is inside the home office)
##############################
From agent.py
obs(cat_2069, Locate the cat and check if it is inside the home office)
Get this information:  cat_2069 is inside home_office_241. cat_2069 is inside dresser_274. cat_2069 is close to dresser_274. cat_2069 is close to character_240. cat_2069 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to grab cat_2069 and place it on the table in the home office.
##############################
From agent.py
Human Instruction: You need to grab cat_2069 and place it on the table in the home office.

The actions you have taken:
Action 1: Walk to kitchen_counter_123.
Action 2: look for bowl_2140 around kitchen_counter_123.
Action 3: Walk to cupboard_117.
Action 4: look for bowl_2140 around cupboard_117.
Action 5: Walk to bench_115.
Action 6: look for bowl_2140 around bench_115.
Action 7: Walk to cutting_board_2123.
Action 8: look for bowl_2140 around cutting_board_2123.
Action 9: Walk to bowl_2140.
Action 10: Grab bowl_2140.
Action 11: Walk to faucet_20.
Action 12: Switch on faucet_20.
Action 13: Switch off faucet_20.
Action 14: Walk to table_270.
Action 15: Put bowl_2140 on table_270.
Action 16: Walk to couch_198.
Action 17: look for cat_2069 around couch_198.
Action 18: Walk to home_office_241.
Action 19: look for cat_2069 around home_office_241.
Action 20: Walk to home_office_241.
Action 21: look for cat_2069 around home_office_241.
Action 22: Walk to dresser_274.
Action 23: Open dresser_274.
Action 24: look for cat_2069 around dresser_274.
Action 25: Observe around cat_2069 with the question of Locate the cat and check if it is inside the home office.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_bookshelf_275(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(laser_pointer,bookshelf_instance)
        else:
            exp(laser_pointer,bookshelf_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,bookshelf_instance]=True
        close[bookshelf_instance,laser_pointer]=True
    

behavior find_toy_2056_around_tvstand_116(toy:item):
    goal: not unknown(toy)
    body:
        assert is_toy(toy)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(toy,tvstand_instance)
        else:
            exp(toy,tvstand_instance)
    eff:
        unknown[toy]=False
        close[toy,tvstand_instance]=True
        close[tvstand_instance,toy]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office(table:item):
    # Check if the table is in the home office
    symbol is_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return is_home_office

def has_cat_on_table(table:item):
    # Check if the cat is on the specified table
    symbol has_cat=exists o: item : (is_cat(o) and on(o, table))
    return has_cat

behavior place_cat_on_table(cat: item, table: item):
    body:
        achieve_once on(cat, table)
        # Place the cat on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office(table)
        # Select a table in the home office

        bind cat: item where:
            is_cat(cat) and not has_cat_on_table(table)
        # Bind the cat that is not on the table yet

        place_cat_on_table(cat, table)
        # Place the cat on the table in the home office

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_home_office_241(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laser_pointer,home_office_instance)
        else:
            exp(laser_pointer,home_office_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,home_office_instance]=True
        close[home_office_instance,laser_pointer]=True
    

#exp_behavior_end

#goal_representation
behavior find_cat_and_put_on_table(cat:item, table:item):
    body:
        observe(cat, "Locate the cat")
        # Check if the cat can be found
        achieve_once close(cat, table)
        # Move the cat close to the table
        achieve_once on(cat, table)
        # Place the cat on the table


behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        bind table: item where:
            is_table(table) and inside(table, home_office_241)
        # Select the table inside the home office

        find_cat_and_put_on_table(cat, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office_241; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_laser_pointer_2034_around_bookshelf_196(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(laser_pointer,bookshelf_instance)
        else:
            exp(laser_pointer,bookshelf_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,bookshelf_instance]=True
        close[bookshelf_instance,laser_pointer]=True
    

behavior find_toy_2056_around_bookshelf_196(toy:item):
    goal: not unknown(toy)
    body:
        assert is_toy(toy)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(toy,bookshelf_instance)
        else:
            exp(toy,bookshelf_instance)
    eff:
        unknown[toy]=False
        close[toy,bookshelf_instance]=True
        close[bookshelf_instance,toy]=True
    

#goal_representation
 
behavior find_cat_and_put_on_table(cat:item, table:item, home_office:item):
    body:
        observe(cat, "Locate the cat")
        # Check if the cat can be found
        achieve_once close(cat, table)
        # Move the cat close to the table
        achieve_once on(cat, table)
        # Place the cat on the table

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        find_cat_and_put_on_table(cat, table, home_office)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_laser_pointer_2034_around_home_office_241(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laser_pointer,home_office_instance)
        else:
            exp(laser_pointer,home_office_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,home_office_instance]=True
        close[home_office_instance,laser_pointer]=True
    

behavior find_toy_2056_around_home_office_241(toy:item):
    goal: not unknown(toy)
    body:
        assert is_toy(toy)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(toy,home_office_instance)
        else:
            exp(toy,home_office_instance)
    eff:
        unknown[toy]=False
        close[toy,home_office_instance]=True
        close[home_office_instance,toy]=True
    

#goal_representation
behavior find_cat_and_put_on_table(cat:item, table:item, home_office:item):
    body:
        observe(cat, "Locate the cat")
        # Check if the cat can be found
        achieve_once close(cat, table)
        # Move the cat close to the table
        achieve_once on(cat, table)
        # Place the cat on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        find_cat_and_put_on_table(cat, table, home_office)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior find_cat_and_put_on_table(cat:item, table:item, home_office:item):
    body:
        observe(cat, "Locate the cat")
        # Check if the cat can be found
        achieve_once close(cat, table)
        # Move the cat close to the table
        achieve_once on(cat, table)
        # Place the cat on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        find_cat_and_put_on_table(cat, table, home_office)
##############################
From agent.py-> find a plan in act()
obs(cat_2069, Locate the cat)grab_executor(cat_2069)walk_executor(table_270)put_executor(cat_2069, table_270)
##############################
From agent.py
obs(cat_2069, Locate the cat)
Get this information:  cat_2069 is inside home_office_241. cat_2069 is inside dresser_274. cat_2069 is close to dresser_274. cat_2069 is close to character_240. cat_2069 is DIRTY.
##############################
From agent.py
grab_executor(cat_2069)
Robot find: Robot is close to the hanger_292. Robot is close to the hanger_293. Robot is close to the hanger_294. Robot is close to the blow_dryer_2057. Robot is close to the dresser_274. Robot is close to the cat_2069. Robot is close to the check_2075. Grabbing cat_2069 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: Robot is close to the cat_2069. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(cat_2069, table_270)
Robot find: Robot is close to the cat_2069. Robot is close to the couch_269. Robot is close to the table_270. cat_2069 is close table_270. table_270 is close cat_2069. cat_2069 is on table_270. cat_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a bowl of water and put the bowl on the table in home office. Then find my cat put it on the table.
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(cupboard_117)', 'walk_executor(bench_115)', 'walk_executor(cutting_board_2123)', 'walk_executor(bowl_2140)', 'grab_executor(bowl_2140)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(table_270)', 'put_executor(bowl_2140, table_270)', 'walk_executor(couch_198)', 'walk_executor(home_office_241)', 'walk_executor(home_office_241)', 'walk_executor(dresser_274)', 'open_executor(dresser_274)', 'grab_executor(cat_2069)', 'walk_executor(table_270)', 'put_executor(cat_2069, table_270)']
Time info:
Time consume: 186 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 90
goal generate times: 6
goal correct times: 2
action_num: 19

Task complete rate:
1
Scene_id: 1
##############################
