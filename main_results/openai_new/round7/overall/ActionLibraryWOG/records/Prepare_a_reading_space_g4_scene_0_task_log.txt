From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the coffee table in the home office.', '2. Prepare a cup of hot milk and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def in_home_office(item: item):
    # Function to check if an item is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(item, room))
    return in_home_office

behavior place_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and in_home_office(coffee_table)
        # Select a coffee table in the home office
        
        achieve close_char(char, book)
        # Move the character closer to the book
        achieve close_char(char, coffee_table)
        # Move the character closer to the coffee table
        place_on_coffee_table(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_book_2066_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(obj:item):
    # Function to check if a given object is inside the home office
    symbol is_home_office=exists room: item: (is_home_office(room) and inside(obj, room))
    return is_home_office

behavior put_on_coffee_table(o:item, coffee_table:item):
    body:
        achieve_once on(o, coffee_table) # Place the item on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_in_home_office(coffee_table)
        # Select a coffee table inside the home office

        achieve close_char(char, book)
        # Approach the book
        
        achieve_once inhand(book)
        # Pick up or hold the book

        achieve close_char(char, coffee_table)
        # Approach the coffee table
        
        put_on_coffee_table(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def in_home_office(coffee_table: item):
    # Function to check if a coffee table is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(coffee_table, room))
    return in_home_office

behavior find_and_put_book_on_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and in_home_office(coffee_table)
        # Select the coffee table in the home office

        bind book: item where:
            is_book(book)
        # Select a book

        find_and_put_book_on_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def in_home_office(coffee_table: item):
    # Function to check if a coffee table is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(coffee_table, room))
    return in_home_office

behavior find_and_put_book_on_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and in_home_office(coffee_table)
        # Select the coffee table in the home office

        bind book: item where:
            is_book(book)
        # Select a book

        find_and_put_book_on_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. coffee_table_2068 is close book_2066. book_2066 is close coffee_table_2068. book_2066 is on coffee_table_2068. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk(cup:item, milk:item):
    body:
        achieve has_water(cup) # Assume the milk is in liquid form and consider it as water
        # Fill the cup with milk
        achieve is_on(milk)   # Assume there is a process to make the milk hot

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table in the home office

        bind cup: item where:
            is_cup(cup)
        # Select a cup to prepare hot milk

        bind milk: item where:
            is_milk(milk)
        # Select milk to be used in the cup

        prepare_hot_milk(cup, milk)
        # Execute the behavior to prepare a cup of hot milk

        achieve_once on(cup, coffee_table)
        # Place the cup on the coffee table in the home office

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_stove_2065(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(cup,stove_instance)
        else:
            exp(cup,stove_instance)
    eff:
        unknown[cup]=False
        close[cup,stove_instance]=True
        close[stove_instance,cup]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk(cup:item, milk:item, stove:item):
    body:
        achieve once inside(milk, cup)
        # Pour milk into the cup
        achieve_once on(cup, stove)
        # Place the cup on the stove to heat the milk
        achieve_once is_on(stove)
        # Turn on the stove to heat the milk

behavior place_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)
        # Place the hot milk cup on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind milk: item where:
            is_milk(milk)
        # Select milk
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table in the home office
        prepare_hot_milk(cup, milk, stove)
        # Prepare the hot milk in a cup
        place_on_table(cup, coffee_table)
        # Place the prepared hot milk on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inside') at line 5708, column 22.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_food_cereal_2015_around_fridge_289(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cereal,fridge_instance)
        else:
            exp(food_cereal,fridge_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,fridge_instance]=True
        close[fridge_instance,food_cereal]=True
    

#goal_representation

behavior prepare_hot_milk(cup:item, milk:item, stove:item):
    body:
        achieve_once inside(milk, cup)
        # Pour milk into the cup
        achieve_once on(cup, stove)
        # Place the cup on the stove to heat the milk
        achieve_once is_on(stove)
        # Turn on the stove to heat the milk

behavior place_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)
        # Place the hot milk cup on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind milk: item where:
            is_milk(milk)
        # Select milk
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table in the home office
        prepare_hot_milk(cup, milk, stove)
        # Prepare the hot milk in a cup
        place_on_table(cup, coffee_table)
        # Place the prepared hot milk on the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior prepare_hot_milk(cup:item, milk:item, stove:item):
    body:
        achieve_once inside(milk, cup)
        # Pour milk into the cup
        achieve_once on(cup, stove)
        # Place the cup on the stove to heat the milk
        achieve_once is_on(stove)
        # Turn on the stove to heat the milk

behavior place_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)
        # Place the hot milk cup on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind milk: item where:
            is_milk(milk)
        # Select milk
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table in the home office
        prepare_hot_milk(cup, milk, stove)
        # Prepare the hot milk in a cup
        place_on_table(cup, coffee_table)
        # Place the prepared hot milk on the coffee table

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)grab_executor(cup_2063)walk_executor(stove_2065)put_executor(cup_2063, stove_2065)switchon_executor(stove_2065)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)grab_executor(cup_2063)walk_executor(stove_2065)put_executor(cup_2063, stove_2065)switchon_executor(stove_2065)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)grab_executor(cup_2063)walk_executor(stove_2065)put_executor(cup_2063, stove_2065)switchon_executor(stove_2065)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(cup_2063, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the stove_2065. cup_2063 is close stove_2065. cup_2063 is on stove_2065. stove_2065 is close cup_2063. cup_2063 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the stove_2065. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the cup_2063. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(cup_2063, coffee_table_2068)
Robot find: Robot is close to the cup_2063. Robot is close to the coffee_table_2068. coffee_table_2068 is close cup_2063. cup_2063 is close coffee_table_2068. cup_2063 is on coffee_table_2068. cup_2063 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.
Action History:
['walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2066, coffee_table_2068)', 'walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(stove_2065)', 'put_executor(cup_2063, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(coffee_table_2068)', 'put_executor(cup_2063, coffee_table_2068)']
Time info:
Time consume: 148 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 23
goal generate times: 5
goal correct times: 1
action_num: 21

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 8 steps
Keystate: k3 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
