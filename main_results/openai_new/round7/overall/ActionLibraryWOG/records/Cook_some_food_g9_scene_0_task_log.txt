From agent.py
Reset goals: The sub-goals are: 
['1. Wash and peel the potatoes.', '2. Cut the potatoes into strips.', '3. Fry the potato strips until golden brown.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior wash_and_peel_potatoes(potato:item):
    body:
        if dirty(potato):
            achieve_once clean(potato) # Wash the potato until it is clean
        achieve_once clean(potato) # Ensure the potato is clean after washing

def is_near_sink(char:character, sink:item):
    # Check if the character is close to the sink
    symbol close_sink= close_char(char, sink)
    return close_sink

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        
        if exists a: item : (is_sink(a) and is_near_sink(char, a)):
            bind sink: item where:
                is_sink(sink) and is_near_sink(char, sink)
        else:
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Find a sink and ensure it is something that items can be washed in")
        wash_and_peel_potatoes(potato)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior wash_and_peel_potatoes(potato:item):
    body:
        if dirty(potato):
            achieve_once clean(potato) # Wash the potato until it is clean
        achieve_once clean(potato) # Ensure the potato is clean after washing

def is_near_sink(char:character, sink:item):
    # Check if the character is close to the sink
    symbol close_sink= close_char(char, sink)
    return close_sink

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        
        if exists a: item : (is_sink(a) and is_near_sink(char, a)):
            bind sink: item where:
                is_sink(sink) and is_near_sink(char, sink)
        else:
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Find a sink and ensure it is something that items can be washed in")
        wash_and_peel_potatoes(potato)
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)obs(sink_42, Find a sink and ensure it is something that items can be washed in)walk_executor(sink_231)obs(sink_231, Find a sink and ensure it is something that items can be washed in)exp(food_potato_2035, kitchen_counter_230)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_potato_2035)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
obs(sink_42, Find a sink and ensure it is something that items can be washed in)
Get this information:  cleaning_solution_2073 is on sink_42. detergent_2084 is on sink_42. sink_42 is inside bathroom_1. sink_42 is inside bathroom_counter_41. sink_42 is close to floor_2. sink_42 is close to floor_3. sink_42 is close to detergent_2084. sink_42 is close to soap_2053. sink_42 is close to floor_4. sink_42 is close to bathroom_cabinet_40. sink_42 is close to bathroom_counter_41. sink_42 is close to wall_9. sink_42 is close to faucet_43. sink_42 is close to wall_12. sink_42 is close to basket_for_clothes_2006. sink_42 is close to washing_machine_2007. sink_42 is close to cleaning_solution_2073. sink_42 is close to character_65. soap_2053 is on sink_42. sink_42 is DIRTY.
##############################
From agent.py
walk_executor(sink_231)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, soap_2054, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
obs(sink_231, Find a sink and ensure it is something that items can be washed in)
Get this information:  soap_2054 is on sink_231. sink_231 is inside dining_room_201. sink_231 is inside kitchen_counter_230. plate_1000 is on sink_231. sink_231 is close to soap_2054. sink_231 is close to floor_7. sink_231 is close to wall_11. sink_231 is close to wall_15. sink_231 is close to coffe_maker_290. sink_231 is close to toaster_292. sink_231 is close to toilet_37. sink_231 is close to shower_36. sink_231 is close to microwave_297. sink_231 is close to floor_202. sink_231 is close to floor_203. sink_231 is close to floor_204. sink_231 is close to wall_211. sink_231 is close to wall_212. sink_231 is close to cupboard_229. sink_231 is close to kitchen_counter_230. sink_231 is close to faucet_232. sink_231 is close to plate_1000. sink_231 is close to dishwasher_1001. sink_231 is close to character_65. sink_231 is DIRTY.
##############################
From agent.py
exp(food_potato_2035, kitchen_counter_230)
Fail to find food_potato_2035 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_potato_2035, fridge_289)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_potato_2035)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_potato_2035, fridge_289)
Find food_potato_2035. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash and cut the potatoes for French fries.', '2. Fry the potato pieces until they are golden brown.', '3. Serve the French fries.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_cut_potatoes(potato: item, sink: item):
    body:
        achieve_once clean(potato)  # Ensure the potatoes are clean
        achieve_once cut(potato)  # Cut the potatoes

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)  # Bind a potato instance
            
        bind sink: item where:
            is_sink(sink)  # Bind a sink instance

        observe(sink, "Find a sink and ensure it is something that items can be washed in")
        # Observe sink to check if it is suitable for washing
        
        wash_and_cut_potatoes(potato, sink)  # Perform washing and cutting

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_and_cut_potatoes(potato: item, sink: item):
    body:
        achieve_once clean(potato)  # Ensure the potatoes are clean
        achieve_once cut(potato)  # Cut the potatoes

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)  # Bind a potato instance
            
        bind sink: item where:
            is_sink(sink)  # Bind a sink instance

        observe(sink, "Find a sink and ensure it is something that items can be washed in")
        # Observe sink to check if it is suitable for washing
        
        wash_and_cut_potatoes(potato, sink)  # Perform washing and cutting

##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)obs(sink_42, Find a sink and ensure it is something that items can be washed in)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(sink_42)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
obs(sink_42, Find a sink and ensure it is something that items can be washed in)
Get this information:  cleaning_solution_2073 is on sink_42. detergent_2084 is on sink_42. sink_42 is inside bathroom_1. sink_42 is inside bathroom_counter_41. sink_42 is close to floor_2. sink_42 is close to floor_3. sink_42 is close to detergent_2084. sink_42 is close to soap_2053. sink_42 is close to floor_4. sink_42 is close to bathroom_cabinet_40. sink_42 is close to bathroom_counter_41. sink_42 is close to wall_9. sink_42 is close to faucet_43. sink_42 is close to wall_12. sink_42 is close to basket_for_clothes_2006. sink_42 is close to washing_machine_2007. sink_42 is close to cleaning_solution_2073. sink_42 is close to character_65. soap_2053 is on sink_42. sink_42 is DIRTY.
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the fridge_289. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the fridge_289. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_potato_2035. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
cut_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The potatoes were cut, but they were not washed. You need to find a clean sink and wash the potatoes before cutting them.
##############################
From agent.py
Human Instruction: The potatoes were cut, but they were not washed. You need to find a clean sink and wash the potatoes before cutting them.

The actions you have taken:
Action 1: Walk to sink_42.
Action 2: Observe around sink_42 with the question of Find a sink and ensure it is something that items can be washed in.
Action 3: Walk to sink_231.
Action 4: Observe around sink_231 with the question of Find a sink and ensure it is something that items can be washed in.
Action 5: look for food_potato_2035 around kitchen_counter_230.
Action 6: Walk to fridge_289.
Action 7: Switch off fridge_289.
Action 8: Open fridge_289.
Action 9: look for food_potato_2035 around fridge_289.
Action 10: Walk to sink_42.
Action 11: Observe around sink_42 with the question of Find a sink and ensure it is something that items can be washed in.
Action 12: Walk to food_potato_2035.
Action 13: Grab food_potato_2035.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_potato_2035 on cutting_board_2051.
Action 16: Walk to knife_2050.
Action 17: Grab knife_2050.
Action 18: Walk to food_potato_2035.
Action 19: Cut food_potato_2035.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_117(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_cut_potatoes(sink: item, potatoes: item, knife: item):
    body:
        achieve_once inside(potatoes, sink)
        # Wash the potatoes in the sink by transferring them into the sink
        achieve clean(potatoes)
        # Ensure the potatoes are clean
        achieve_once cut(potatoes)
        # Cut the clean potatoes

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select any available sink
        
        bind potatoes: item where:
            is_food_potato(potatoes)
        # Select potatoes available in the environment
        
        bind knife: item where:
            is_knife(knife)
        # Select knife available in the environment

        wash_and_cut_potatoes(sink, potatoes, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_and_cut_potatoes(sink: item, potatoes: item, knife: item):
    body:
        achieve_once inside(potatoes, sink)
        # Wash the potatoes in the sink by transferring them into the sink
        achieve clean(potatoes)
        # Ensure the potatoes are clean
        achieve_once cut(potatoes)
        # Cut the clean potatoes

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select any available sink
        
        bind potatoes: item where:
            is_food_potato(potatoes)
        # Select potatoes available in the environment
        
        bind knife: item where:
            is_knife(knife)
        # Select knife available in the environment

        wash_and_cut_potatoes(sink, potatoes, knife)

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)walk_executor(sink_42)putin_executor(food_potato_2035, sink_42)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
putin_executor(food_potato_2035, sink_42)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. food_potato_2035 is inside sink_42. sink_42 is close food_potato_2035. food_potato_2035 is close sink_42. food_potato_2035 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to find a clean sink and wash the potatoes before cutting them. The potatoes were cut but not washed.
##############################
From agent.py
Human Instruction: You need to find a clean sink and wash the potatoes before cutting them. The potatoes were cut but not washed.

The actions you have taken:
Action 1: Walk to sink_42.
Action 2: Observe around sink_42 with the question of Find a sink and ensure it is something that items can be washed in.
Action 3: Walk to sink_231.
Action 4: Observe around sink_231 with the question of Find a sink and ensure it is something that items can be washed in.
Action 5: look for food_potato_2035 around kitchen_counter_230.
Action 6: Walk to fridge_289.
Action 7: Switch off fridge_289.
Action 8: Open fridge_289.
Action 9: look for food_potato_2035 around fridge_289.
Action 10: Walk to sink_42.
Action 11: Observe around sink_42 with the question of Find a sink and ensure it is something that items can be washed in.
Action 12: Walk to food_potato_2035.
Action 13: Grab food_potato_2035.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_potato_2035 on cutting_board_2051.
Action 16: Walk to knife_2050.
Action 17: Grab knife_2050.
Action 18: Walk to food_potato_2035.
Action 19: Cut food_potato_2035.
Action 20: Grab food_potato_2035.
Action 21: Walk to sink_42.
Action 22: Put food_potato_2035 into sink_42.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_130_around_closetdrawer_117(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_clothes_skirt_2088_around_closetdrawer_117(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation

def is_cut_and_dirty(potato: item):
    # Check if the potato is cut and dirty
    symbol cut_and_dirty = cut(potato) and dirty(potato)
    return cut_and_dirty

behavior wash_potato(potato: item, sink: item):
    body:
        achieve_once inside(potato, sink) # Put the potato inside the sink
        achieve_once clean(potato) # Ensure the potato is finally clean

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42

        bind potato: item where:
            is_food_potato(potato) and is_cut_and_dirty(potato)
        # Select the potato that is cut and dirty

        achieve_once inside_char(char, sink)
        wash_potato(potato, sink)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_potato_cut(potato:item):
    # Function to check if a potato is cut
    symbol potato_is_cut = cut(potato)
    return potato_is_cut

behavior wash_potato(potato:item, sink:item):
    body:
        achieve clean(potato)
        # Achieve the state where the potato is clean

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Bind the sink with ID 42

        bind potato: item where:
            is_food_potato(potato) and not is_potato_cut(potato)
        # Bind the potato instance that has not been cut

        wash_potato(potato, sink) # Invoke the behavior to wash the potato

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def in_kitchen(sink: item):
    # Function to check if a sink is in the kitchen area
    symbol in_kitchen = exists room: item : (is_kitchen(room) and inside(sink, room))
    return in_kitchen

behavior ensure_sink_clean():
    body:
        foreach sink: item:
            if is_sink(sink) and visited(sink):
                if dirty(sink):
                    unless in_kitchen(sink):
                        scrub(sink)
                        rinse(sink)

behavior wash_potato(potato: item):
    body:
        achieve clean(potato)

behavior cut_potato(potato: item, cutting_board: item):
    body:
        achieve_once on(potato, cutting_board)
        achieve cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and has_water(potato) and cut(potato)
        # Check if the potato is already clean and cut

        bind sink: item where:
            is_sink(sink)
        # Choose a sink

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Choose a cutting board

        bind knife: item where:
            is_knife(knife)
        # Choose a knife

        ensure_sink_clean()

        wash_potato(potato)
        cut_potato(potato, cutting_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in_kitchen') at line 5808, column 28.
Expected one of: 
	* __ANON_4
	* IF
	* __ANON_1
	* SLASH
	* __ANON_7
	* __ANON_2
	* CIRCUMFLEX
	* PLUS
	* __ANON_0
	* NOT_EQ
	* MINUS
	* __ANON_3
	* AMPERSAND
	* AT
	* EQUAL
	* LESS_EQ
	* LESSTHAN
	* VBAR
	* DOUBLE_EQUAL
	* COMMA
	* LSHIFT
	* FLOORDIV
	* AND
	* __ANON_6
	* OR
	* __ANON_8
	* GREATER_EQ
	* SEMICOLON
	* __ANON_5
	* _NEWLINE
	* MORETHAN
	* PERCENT
	* STAR
	* RSHIFT

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def in_kitchen(sink: item):
    # Function to check if a sink is in the kitchen area
    symbol is_in_kitchen = exists room: item : (is_kitchen(room) and inside(sink, room))
    return is_in_kitchen

behavior ensure_sink_clean():
    body:
        foreach sink: item:
            if is_sink(sink) and visited(sink):
                if dirty(sink):
                    unless in_kitchen(sink):
                        scrub(sink)
                    rinse(sink)

behavior wash_potato(potato: item):
    body:
        achieve clean(potato)

behavior cut_potato(potato: item, cutting_board: item):
    body:
        achieve_once on(potato, cutting_board)
        achieve cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and has_water(potato) and cut(potato)
        # Check if the potato is already clean and cut

        bind sink: item where:
            is_sink(sink)
        # Choose a sink

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Choose a cutting board

        bind knife: item where:
            is_knife(knife)
        # Choose a knife

        ensure_sink_clean()

        wash_potato(potato)
        cut_potato(potato, cutting_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in_kitchen') at line 5808, column 28.
Expected one of: 
	* __ANON_4
	* IF
	* __ANON_1
	* SLASH
	* __ANON_7
	* __ANON_2
	* CIRCUMFLEX
	* PLUS
	* __ANON_0
	* NOT_EQ
	* MINUS
	* __ANON_3
	* AMPERSAND
	* AT
	* EQUAL
	* LESS_EQ
	* LESSTHAN
	* VBAR
	* DOUBLE_EQUAL
	* COMMA
	* LSHIFT
	* FLOORDIV
	* AND
	* __ANON_6
	* OR
	* __ANON_8
	* GREATER_EQ
	* SEMICOLON
	* __ANON_5
	* _NEWLINE
	* MORETHAN
	* PERCENT
	* STAR
	* RSHIFT

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def in_kitchen(sink: item):
    # Function to check if a sink is in the kitchen area
    symbol is_in_kitchen = exists room: item : (is_kitchen(room) and inside(sink, room))
    return is_in_kitchen

behavior ensure_sink_clean():
    body:
        foreach sink: item:
            if is_sink(sink) and visited(sink):
                if dirty(sink):
                    if in_kitchen(sink):
                        scrub(sink)
                    rinse(sink)

behavior wash_potato(potato: item):
    body:
        achieve clean(potato)

behavior cut_potato(potato: item, cutting_board: item):
    body:
        achieve_once on(potato, cutting_board)
        achieve cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and has_water(potato) and cut(potato)
        # Check if the potato is already clean and cut

        bind sink: item where:
            is_sink(sink)
        # Choose a sink

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Choose a cutting board

        bind knife: item where:
            is_knife(knife)
        # Choose a knife

        ensure_sink_clean()

        wash_potato(potato)
        cut_potato(potato, cutting_board)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Peel and cut the potatoes into strips.', '2. Fry the potato strips until golden brown.', '3. Season the fried potatoes with salt.', '4. Serve the French fries on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_table_355(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_potatoes(potatoes:item, sink:item):
    body:
        achieve dirty(potatoes)
        # Confirm that the potatoes are dirty
        achieve_once inside(potatoes, sink)
        # Place the potatoes in the sink
        # Wash the potatoes
        achieve clean(potatoes)

behavior cut_into_strips(potatoes:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potatoes, cutting_board)
        # Place the potatoes on the cutting board
        achieve_once cut(potatoes)
        # Cut the potatoes into strips

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Ensure sink_42 is bound
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2051
        # Bind to prepare to cut

        bind potatoes: item where:
            is_food_potato(potatoes) and id[potatoes] == 2035
        # Bind to ensure specific potatoes
        
        bind knife: item where:
            is_knife(knife) and id[knife] == 2050
        # Bind to ensure specific knife

        clean_potatoes(potatoes, sink)
        cut_into_strips(potatoes, knife, cutting_board)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_372_around_closetdrawer_117(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation

def has_potatoes_in_sink(sink: item):
    # Function to check if there are potatoes in the specified sink
    symbol has_potatoes = exists o: item : (is_food_potato(o) and inside(o, sink))
    return has_potatoes

behavior find_clean_sink_with_potatoes():
    body:
        if exists sink: item : (is_sink(sink) and clean(sink) and has_potatoes_in_sink(sink)):
            # If we have already found the clean sink with potatoes in it, we can directly approach it
            bind sink: item where:
                is_sink(sink) and clean(sink) and has_potatoes_in_sink(sink)
            achieve close_char(char, sink)

        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Find a clean sink and check if there are potatoes in it")

behavior cut_potatoes(potatoes: item, knife: item, cutting_board: item):
    body:
        achieve_once on(potatoes, cutting_board)
        achieve_once inhand(knife)
        achieve cut(potatoes)

behavior wash_potatoes(potatoes: item, sink: item):
    body:
        achieve_inside(potatoes, sink)
        achieve clean(potatoes)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        bind sink: item where:
            is_sink(sink) and has_potatoes_in_sink(sink) and clean(sink)
        bind knife: item where:
            is_knife(knife)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        wash_potatoes(potato, sink)
        cut_potatoes(potato, knife, cutting_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_inside not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_gloves_2046_around_closetdrawer_117(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

#goal_representation
 
def has_potatoes_in_sink(sink: item):
    # Function to check if there are potatoes in the specified sink
    symbol has_potatoes = exists o: item : (is_food_potato(o) and inside(o, sink))
    return has_potatoes

behavior find_clean_sink_with_potatoes():
    body:
        if exists sink: item : (is_sink(sink) and clean(sink) and has_potatoes_in_sink(sink)):
            # If we have already found the clean sink with potatoes in it, we can directly approach it
            bind sink: item where:
                is_sink(sink) and clean(sink) and has_potatoes_in_sink(sink)
            achieve close_char(char, sink)

        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Find a clean sink and check if there are potatoes in it")

behavior cut_potatoes(potatoes: item, knife: item, cutting_board: item):
    body:
        achieve_once on(potatoes, cutting_board)
        achieve_once inhand(knife)
        achieve cut(potatoes)

behavior wash_potatoes(potatoes: item, sink: item):
    body:
        achieve inside(potatoes, sink)
        wash(potatoes)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        bind sink: item where:
            is_sink(sink) and has_potatoes_in_sink(sink) and clean(sink)
        bind knife: item where:
            is_knife(knife)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        wash_potatoes(potato, sink)
        cut_potatoes(potato, knife, cutting_board)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_potatoes(potato:item):
    body:
        bind peeler: item where:
            is_item(peeler) and grabbable(peeler)
        # Ensure the peeler is in hand to peel the potato
        achieve_once inhand(peeler)
        
behavior cut_potatoes(potato:item, knife:item, board:item):
    body:
        achieve_once on(potato, board) 
        # Put the potato on the cutting board
        achieve_once inhand(knife)  
        # Ensure the knife is in hand to cut the potato
        achieve cut(potato)
        # Cut the potato into strips

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        bind board: item where:
            is_cutting_board(board)
        # Select a cutting board
            
        peel_potatoes(potato)
        cut_potatoes(potato, knife, board)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_item not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior peel_potatoes(potato:item):
    body:
        bind peeler: item where:
            grabbable(peeler)
        # Ensure the peeler is in hand to peel the potato
        achieve_once inhand(peeler)
        
behavior cut_potatoes(potato:item, knife:item, board:item):
    body:
        achieve_once on(potato, board) 
        # Put the potato on the cutting board
        achieve_once inhand(knife)  
        # Ensure the knife is in hand to cut the potato
        achieve cut(potato)
        # Cut the potato into strips

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        bind board: item where:
            is_cutting_board(board)
        # Select a cutting board
            
        peel_potatoes(potato)
        cut_potatoes(potato, knife, board)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior peel_potatoes(potato:item):
    body:
        bind peeler: item where:
            grabbable(peeler)
        # Ensure the peeler is in hand to peel the potato
        achieve_once inhand(peeler)
        
behavior cut_potatoes(potato:item, knife:item, board:item):
    body:
        achieve_once on(potato, board) 
        # Put the potato on the cutting board
        achieve_once inhand(knife)  
        # Ensure the knife is in hand to cut the potato
        achieve cut(potato)
        # Cut the potato into strips

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        bind board: item where:
            is_cutting_board(board)
        # Select a cutting board
            
        peel_potatoes(potato)
        cut_potatoes(potato, knife, board)
##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The potatoes need to be washed in a clean sink before proceeding with the cutting. Make sure to locate a clean sink and wash the potatoes thoroughly before cutting them into strips.
##############################
From agent.py
Human Instruction: The potatoes need to be washed in a clean sink before proceeding with the cutting. Make sure to locate a clean sink and wash the potatoes thoroughly before cutting them into strips.

The actions you have taken:
Action 1: Walk to sink_42.
Action 2: Observe around sink_42 with the question of Find a sink and ensure it is something that items can be washed in.
Action 3: Walk to sink_231.
Action 4: Observe around sink_231 with the question of Find a sink and ensure it is something that items can be washed in.
Action 5: look for food_potato_2035 around kitchen_counter_230.
Action 6: Walk to fridge_289.
Action 7: Switch off fridge_289.
Action 8: Open fridge_289.
Action 9: look for food_potato_2035 around fridge_289.
Action 10: Walk to sink_42.
Action 11: Observe around sink_42 with the question of Find a sink and ensure it is something that items can be washed in.
Action 12: Walk to food_potato_2035.
Action 13: Grab food_potato_2035.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_potato_2035 on cutting_board_2051.
Action 16: Walk to knife_2050.
Action 17: Grab knife_2050.
Action 18: Walk to food_potato_2035.
Action 19: Cut food_potato_2035.
Action 20: Grab food_potato_2035.
Action 21: Walk to sink_42.
Action 22: Put food_potato_2035 into sink_42.
Action 23: Grab food_potato_2035.
Action 24: Walk to cutting_board_2051.
Action 25: Put food_potato_2035 on cutting_board_2051.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior locate_and_observe_sink(sink: item):
    body:
        observe(sink, "Find a sink and ensure it is something that items can be washed in")

behavior wash(item: item):
    body:
        achieve_once has_water(item)

behavior cut_potato(potato: item, knife: item):
    body:
        achieve_once cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and id[potato] == 2035
        # Bind the potato item that needs to be processed

        bind sink: item where:
            is_sink(sink) and visited(sink)
        # Bind a sink that has already been observed

        bind knife: item where:
            is_knife(knife) and id[knife] == 2050
        # Bind the knife item for cutting

        # Start washing the potato in the sink
        wash(potato)

        # Place the potato on the cutting board
        achieve_once on(potato, cutting_board_2051)

        # Cut the potato into strips
        cut_potato(potato, knife)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Behavior wash already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_hanger_141_around_closetdrawer_117(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_clothes_skirt_2088_around_closetdrawer_117(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

#goal_representation
behavior locate_and_observe_sink(sink: item):
    body:
        observe(sink, "Find a sink and ensure it is something that items can be washed in")

behavior cut_potato(potato: item, knife: item):
    body:
        achieve_once cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and id[potato] == 2035
        # Bind the potato item that needs to be processed

        bind sink: item where:
            is_sink(sink) and visited(sink)
        # Bind a sink that has already been observed

        bind knife: item where:
            is_knife(knife) and id[knife] == 2050
        # Bind the knife item for cutting

        # Wash the potato
        wash(potato)

        # Place the potato on the cutting board
        achieve_once on(potato, cutting_board_2051)

        # Cut the potato into strips
        cut_potato(potato, knife)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cutting_board_2051; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior locate_and_observe_sink(sink: item):
    body:
        observe(sink, "Find a sink and ensure it is something that items can be washed in")

behavior cut_potato(potato: item, knife: item):
    body:
        achieve_once cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and id[potato] == 2035
        # Bind the potato item that needs to be processed

        bind sink: item where:
            is_sink(sink) and visited(sink)
        # Bind a sink that has already been observed

        bind knife: item where:
            is_knife(knife) and id[knife] == 2050
        # Bind the knife item for cutting

        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2051
        # Bind the cutting board for placement

        # Wash the potato
        wash(potato)

        # Place the potato on the cutting board
        achieve_once on(potato, cutting_board)

        # Cut the potato into strips
        cut_potato(potato, knife)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_clean_sink_and_wash_potatoes(potatoes: item, sink: item):
    # A function to find a suitable sink and wash the potatoes
    body:
        if clean(sink) and has_water(sink):
            wash(potatoes)
        else:
            observe(sink, "Find a clean sink with water to wash the potatoes")
            if clean(sink) and has_water(sink):
                wash(potatoes)

behavior cut_potatoes(potatoes: item, knife: item, cutting_board: item):
    body:
        achieve_once inhand(knife)
        achieve_once on(potatoes, cutting_board)
        achieve cut(potatoes)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) 
        
        bind potatoes: item where:
            is_food_potato(potatoes) 
        
        bind knife: item where:
            is_knife(knife) 
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) 
        
        find_clean_sink_and_wash_potatoes(potatoes, sink)
        cut_potatoes(potatoes, knife, cutting_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5800, column 9.
Expected one of: 
	* __ANON_4
	* IF
	* __ANON_1
	* SLASH
	* __ANON_7
	* __ANON_2
	* CIRCUMFLEX
	* PLUS
	* __ANON_0
	* NOT_EQ
	* MINUS
	* __ANON_3
	* AMPERSAND
	* AT
	* EQUAL
	* LESS_EQ
	* LESSTHAN
	* VBAR
	* DOUBLE_EQUAL
	* COMMA
	* LSHIFT
	* FLOORDIV
	* AND
	* __ANON_6
	* OR
	* __ANON_8
	* GREATER_EQ
	* SEMICOLON
	* __ANON_5
	* _NEWLINE
	* MORETHAN
	* PERCENT
	* STAR
	* RSHIFT

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
def find_clean_sink_and_wash_potatoes(potatoes: item, sink: item):
    # A function to find a suitable sink and wash the potatoes
    if clean(sink) and has_water(sink):
        wash(potatoes)
    else:
        observe(sink, "Find a clean sink with water to wash the potatoes")
        if clean(sink) and has_water(sink):
            wash(potatoes)

behavior cut_potatoes(potatoes: item, knife: item, cutting_board: item):
    body:
        achieve_once inhand(knife)
        achieve_once on(potatoes, cutting_board)
        achieve cut(potatoes)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        
        bind potatoes: item where:
            is_food_potato(potatoes)
        
        bind knife: item where:
            is_knife(knife)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        find_clean_sink_and_wash_potatoes(potatoes, sink)
        cut_potatoes(potatoes, knife, cutting_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_coffee_filter_2000_around_closetdrawer_117(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#goal_representation
 
def find_clean_sink_and_wash_potatoes(potatoes: item, sink: item):
    # A function to find a suitable sink and wash the potatoes
    if clean(sink) and has_water(sink):
        wash(potatoes)
    else:
        observe(sink, "Find a clean sink with water to wash the potatoes")
        if clean(sink) and has_water(sink):
            wash(potatoes)

behavior cut_potatoes(potatoes: item, knife: item, cutting_board: item):
    body:
        achieve_once inhand(knife)
        achieve_once on(potatoes, cutting_board)
        achieve cut(potatoes)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        
        bind potatoes: item where:
            is_food_potato(potatoes)
        
        bind knife: item where:
            is_knife(knife)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        find_clean_sink_and_wash_potatoes(potatoes, sink)
        cut_potatoes(potatoes, knife, cutting_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_and_prep_potato(potato:item, sink:item, knife:item, cutting_board:item):
    body:
        # Ensure the potato is washed and clean
        if not clean(potato):
            achieve has_water(sink)
            wash(potato)
        
        # Cut the potato into strips
        achieve_once on(potato, cutting_board)
        achieve_once cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        
        bind sink: item where:
            is_sink(sink)
            and has_water(sink)
        
        bind knife: item where:
            is_knife(knife)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        clean_and_prep_potato(potato, sink, knife, cutting_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'has_water') at line 5834, column 17.
Expected one of: 
	* __ANON_4
	* IF
	* __ANON_1
	* SLASH
	* __ANON_7
	* __ANON_2
	* CIRCUMFLEX
	* PLUS
	* __ANON_0
	* NOT_EQ
	* MINUS
	* __ANON_3
	* AMPERSAND
	* AT
	* EQUAL
	* LESS_EQ
	* LESSTHAN
	* VBAR
	* DOUBLE_EQUAL
	* COMMA
	* LSHIFT
	* FLOORDIV
	* AND
	* __ANON_6
	* OR
	* __ANON_8
	* GREATER_EQ
	* SEMICOLON
	* __ANON_5
	* _NEWLINE
	* MORETHAN
	* PERCENT
	* STAR
	* RSHIFT

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
behavior clean_and_prep_potato(potato:item, cutting_board:item, knife:item, sink:item):
    body:
        # Ensure the potato is washed and clean
        if not clean(potato):
            achieve has_water(sink)
            wash(potato)

        # Move potato to the cutting board and cut it into strips
        achieve_once on(potato, cutting_board)
        achieve_once cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)

        bind sink: item where:
            is_sink(sink)
        
        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        clean_and_prep_potato(potato, cutting_board, knife, sink)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(sink_42)', 'walk_executor(sink_231)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(sink_42)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_potato_2035)', 'cut_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(sink_42)', 'putin_executor(food_potato_2035, sink_42)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)']
Time info:
Time consume: 279 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 143
goal generate times: 12
goal correct times: 4
action_num: 20

Task complete rate:
Keystate: k1 - Requires: 13 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
