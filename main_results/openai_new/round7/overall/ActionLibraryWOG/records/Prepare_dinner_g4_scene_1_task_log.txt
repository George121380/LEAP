From agent.py
Reset goals: The sub-goals are: 
['1. Cook rice and then scramble the eggs.', '2. Mix the cooked rice and scrambled eggs together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_rice_2108_around_cupboard_117(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice(pot:item):
    # Function to check if the pot contains rice
    symbol has_rice = exists o: item : (is_food_rice(o) and inside(o, pot))
    return has_rice

behavior cook_rice(pot:item, stove:item):
    body:
        achieve_once inside(pot, stove) # Place the pot with rice on the stove
        achieve_once is_on(stove) # Turn on the stove to cook the rice

behavior scramble_eggs(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(egg, fryingpan) # Place the egg inside the fryingpan
        achieve_once inside(fryingpan, stove) # Place the fryingpan on the stove
        achieve_once is_on(stove) # Turn on the stove to scramble the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_rice(pot)
        # Select a pot that contains rice

        bind stove: item where:
            is_stove(stove)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind egg: item where:
            is_food_egg(egg)
        
        cook_rice(pot, stove) # Cook the rice on the stove
        scramble_eggs(egg, fryingpan, stove) # Scramble the eggs on the stove

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_pot_78_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_rice_2108_around_cupboard_117(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice(ingredient:item, pot:item):
    body:
        achieve_once inside(ingredient, pot)
        # Cook the rice by placing it into the pot
        achieve_once is_on(stove)
        # Turn the stove on to cook the rice

behavior scramble_eggs(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)
        # Place the egg inside the pan for scrambling
        achieve_once is_on(stove)
        # Turn the stove on to scramble the eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        
        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind pan: item where:
            is_fryingpan(pan)
        # Select a pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        cook_rice(rice, pot)
        scramble_eggs(egg, pan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<ingredient: item>, Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_rice_2108_around_kitchen_counter_123(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation

behavior cook_rice(ingredient:item, pot:item, stove:item):
    body:
        achieve_once inside(ingredient, pot)
        # Cook the rice by placing it into the pot
        achieve_once is_on(stove)
        # Turn the stove on to cook the rice

behavior scramble_eggs(egg:item, pan:item, stove:item):
    body:
        achieve_once inside(egg, pan)
        # Place the egg inside the pan for scrambling
        achieve_once is_on(stove)
        # Turn the stove on to scramble the eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        
        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind pan: item where:
            is_fryingpan(pan)
        # Select a pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        cook_rice(rice, pot, stove)
        scramble_eggs(egg, pan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior cook_rice(ingredient:item, pot:item, stove:item):
    body:
        achieve_once inside(ingredient, pot)
        # Cook the rice by placing it into the pot
        achieve_once is_on(stove)
        # Turn the stove on to cook the rice

behavior scramble_eggs(egg:item, pan:item, stove:item):
    body:
        achieve_once inside(egg, pan)
        # Place the egg inside the pan for scrambling
        achieve_once is_on(stove)
        # Turn the stove on to scramble the eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        
        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind pan: item where:
            is_fryingpan(pan)
        # Select a pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        cook_rice(rice, pot, stove)
        scramble_eggs(egg, pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(pot_2138, cupboard_117)walk_executor(kitchen_counter_123)exp(food_rice_2108, kitchen_counter_123)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_2138)putin_executor(food_rice_2108, pot_2138)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(pot_2138, cupboard_117)
Fail to find pot_2138 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_rice_2108, fridge_126)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_78)putin_executor(food_rice_2108, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)switchoff_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_rice_2108, fridge_126)
Find food_rice_2108. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2108)walk_executor(pot_78)putin_executor(food_rice_2108, pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)switchoff_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
grab_executor(food_rice_2108)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_rice_2108 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
putin_executor(food_rice_2108, pot_78)
Robot find: Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the oven_127. pot_78 is close food_rice_2108. food_rice_2108 is inside pot_78. food_rice_2108 is close pot_78. food_rice_2108 released by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
switchoff_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned off. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2135)walk_executor(kitchen_counter_123)exp(fryingpan_2154, kitchen_counter_123)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_123)
Fail to find fryingpan_2154 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_egg_2092 is inside fryingpan_2154. fryingpan_2154 is close food_egg_2092. food_egg_2092 is close fryingpan_2154. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to switch the stove back on to cook the rice in the pot and to scramble the eggs in the frying pan. The stove must be on to complete both cooking processes.
##############################
From agent.py
Human Instruction: You need to switch the stove back on to cook the rice in the pot and to scramble the eggs in the frying pan. The stove must be on to complete both cooking processes.

The actions you have taken:
Action 1: Walk to cupboard_117.
Action 2: look for pot_2138 around cupboard_117.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_rice_2108 around fridge_126.
Action 7: Grab food_rice_2108.
Action 8: Walk to pot_78.
Action 9: Put food_rice_2108 into pot_78.
Action 10: Walk to stove_2135.
Action 11: Switch on stove_2135.
Action 12: Switch off stove_2135.
Action 13: Open stove_2135.
Action 14: look for fryingpan_2154 around stove_2135.
Action 15: Switch on stove_2135.
Action 16: Walk to kitchen_counter_123.
Action 17: look for fryingpan_2154 around kitchen_counter_123.
Action 18: Walk to kitchen_counter_122.
Action 19: look for fryingpan_2154 around kitchen_counter_122.
Action 20: Walk to food_egg_2092.
Action 21: Grab food_egg_2092.
Action 22: Walk to fryingpan_2154.
Action 23: Put food_egg_2092 into fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cutting_board_2123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(oil,cutting_board_instance)
        else:
            exp(oil,cutting_board_instance)
    eff:
        unknown[oil]=False
        close[oil,cutting_board_instance]=True
        close[cutting_board_instance,oil]=True
    

behavior find_food_orange_2103_around_bowl_2140(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_orange,bowl_instance)
        else:
            exp(food_orange,bowl_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,bowl_instance]=True
        close[bowl_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
def cooking_rice(rice: item, pot: item):
    body:
        achieve_once inside(rice, pot) # Add rice to the pot
        achieve_once is_on(stove) # Ensure the stove is on
        

def scrambling_eggs(egg: item, fryingpan: item):
    body:
        achieve_once inside(egg, fryingpan) # Add eggs to the frying pan
        achieve_once is_on(stove) # Ensure the stove is on
        

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind pot: item where:
            is_pot(pot)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
        
        cooking_rice(rice, pot)
        
        scrambling_eggs(egg, fryingpan)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5404, column 9.
Expected one of: 
	* OR
	* __ANON_3
	* __ANON_0
	* AND
	* PLUS
	* LESS_EQ
	* PERCENT
	* FLOORDIV
	* GREATER_EQ
	* __ANON_5
	* __ANON_1
	* _NEWLINE
	* SLASH
	* MINUS
	* IF
	* __ANON_2
	* RSHIFT
	* __ANON_7
	* AT
	* LESSTHAN
	* AMPERSAND
	* COMMA
	* __ANON_4
	* LSHIFT
	* SEMICOLON
	* VBAR
	* NOT_EQ
	* __ANON_8
	* STAR
	* EQUAL
	* __ANON_6
	* CIRCUMFLEX
	* DOUBLE_EQUAL
	* MORETHAN

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2084_around_toaster_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_bread,toaster_instance)
        else:
            exp(food_bread,toaster_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,toaster_instance]=True
        close[toaster_instance,food_bread]=True
    

behavior find_oil_2149_around_cutting_board_2123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(oil,cutting_board_instance)
        else:
            exp(oil,cutting_board_instance)
    eff:
        unknown[oil]=False
        close[oil,cutting_board_instance]=True
        close[cutting_board_instance,oil]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#goal_representation
 
def cooking_rice(rice: item, pot: item, stove: item):
    body:
        achieve_once inside(rice, pot) # Add rice to the pot
        achieve is_on(stove) # Ensure the stove is on

def scrambling_eggs(egg: item, fryingpan: item, stove: item):
    body:
        achieve_once inside(egg, fryingpan) # Add eggs to the frying pan
        achieve is_on(stove) # Ensure the stove is on

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind pot: item where:
            is_pot(pot)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
        
        cooking_rice(rice, pot, stove)
        
        scrambling_eggs(egg, fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5423, column 9.
Expected one of: 
	* OR
	* __ANON_3
	* __ANON_0
	* AND
	* PLUS
	* LESS_EQ
	* PERCENT
	* FLOORDIV
	* GREATER_EQ
	* __ANON_5
	* __ANON_1
	* _NEWLINE
	* SLASH
	* MINUS
	* IF
	* __ANON_2
	* RSHIFT
	* __ANON_7
	* AT
	* LESSTHAN
	* AMPERSAND
	* COMMA
	* __ANON_4
	* LSHIFT
	* SEMICOLON
	* VBAR
	* NOT_EQ
	* __ANON_8
	* STAR
	* EQUAL
	* __ANON_6
	* CIRCUMFLEX
	* DOUBLE_EQUAL
	* MORETHAN

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#goal_representation
 
def cooking_rice(rice: item, pot: item, stove: item):
    body:
        achieve_once inside(rice, pot) # Add rice to the pot
        achieve is_on(stove) # Ensure the stove is on

def scrambling_eggs(egg: item, fryingpan: item, stove: item):
    body:
        achieve_once inside(egg, fryingpan) # Add eggs to the frying pan
        achieve is_on(stove) # Ensure the stove is on

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind pot: item where:
            is_pot(pot)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
        
        cooking_rice(rice, pot, stove)
        
        scrambling_eggs(egg, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_cupboard_118(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

behavior find_oil_2149_around_cutting_board_2123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(oil,cutting_board_instance)
        else:
            exp(oil,cutting_board_instance)
    eff:
        unknown[oil]=False
        close[oil,cutting_board_instance]=True
        close[cutting_board_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_rice(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Once the stove is on, cook the rice

behavior scramble_eggs(fryingpan:item, stove:item):
    body:
        achieve is_on(stove)
        achieve_once on(fryingpan, stove)
        # Once the stove is on, scramble the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        prepare_rice(pot, stove)
        scramble_eggs(fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior prepare_rice(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Once the stove is on, cook the rice

behavior scramble_eggs(fryingpan:item, stove:item):
    body:
        achieve is_on(stove)
        achieve_once on(fryingpan, stove)
        # Once the stove is on, scramble the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        prepare_rice(pot, stove)
        scramble_eggs(fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(pot_2138)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(pot_2138)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_2138, stove_2135)
Robot find: Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close pot_2138. pot_2138 is close stove_2135. pot_2138 is on stove_2135. pot_2138 released by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to switch the stove back on to cook the rice in the pot and to scramble the eggs in the frying pan. The stove must be on to complete both cooking processes.
##############################
From agent.py
Human Instruction: You need to switch the stove back on to cook the rice in the pot and to scramble the eggs in the frying pan. The stove must be on to complete both cooking processes.

The actions you have taken:
Action 1: Walk to cupboard_117.
Action 2: look for pot_2138 around cupboard_117.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_rice_2108 around fridge_126.
Action 7: Grab food_rice_2108.
Action 8: Walk to pot_78.
Action 9: Put food_rice_2108 into pot_78.
Action 10: Walk to stove_2135.
Action 11: Switch on stove_2135.
Action 12: Switch off stove_2135.
Action 13: Open stove_2135.
Action 14: look for fryingpan_2154 around stove_2135.
Action 15: Switch on stove_2135.
Action 16: Walk to kitchen_counter_123.
Action 17: look for fryingpan_2154 around kitchen_counter_123.
Action 18: Walk to kitchen_counter_122.
Action 19: look for fryingpan_2154 around kitchen_counter_122.
Action 20: Walk to food_egg_2092.
Action 21: Grab food_egg_2092.
Action 22: Walk to fryingpan_2154.
Action 23: Put food_egg_2092 into fryingpan_2154.
Action 24: Walk to pot_2138.
Action 25: Grab pot_2138.
Action 26: Walk to stove_2135.
Action 27: Put pot_2138 on stove_2135.
Action 28: Walk to fryingpan_2154.
Action 29: Grab fryingpan_2154.
Action 30: Walk to stove_2135.
Action 31: Put fryingpan_2154 on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_knifeblock_76(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(wooden_spoon,knifeblock_instance)
        else:
            exp(wooden_spoon,knifeblock_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,knifeblock_instance]=True
        close[knifeblock_instance,wooden_spoon]=True
    

behavior find_oil_2149_around_cutting_board_2123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(oil,cutting_board_instance)
        else:
            exp(oil,cutting_board_instance)
    eff:
        unknown[oil]=False
        close[oil,cutting_board_instance]=True
        close[cutting_board_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior cook_rice(pot:item, rice:item, stove:item):
    body:
        achieve close_char(char, stove)
        achieve is_on(stove)
        achieve_inside(rice, pot)

def is_fryingpan_on_stove(pan:item, stove:item):
    symbol on_fryingpan_stove=on(pan, stove)
    return on_fryingpan_stove

behavior scramble_eggs(eggs:item, stove:item, pan:item):
    body:
        if is_fryingpan_on_stove(pan, stove):
            achieve inside(eggs, pan)
            achieve is_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind pot: item where:
            is_pot(pot)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        cook_rice(pot, rice, stove)
        scramble_eggs(egg, stove, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_inside not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_cutting_board_2123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(oil,cutting_board_instance)
        else:
            exp(oil,cutting_board_instance)
    eff:
        unknown[oil]=False
        close[oil,cutting_board_instance]=True
        close[cutting_board_instance,oil]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#goal_representation
 
behavior cook_rice(pot:item, rice:item, stove:item):
    body:
        achieve close_char(char, stove)
        achieve is_on(stove)
        achieve inside(rice, pot)

def is_fryingpan_on_stove(pan:item, stove:item):
    symbol on_fryingpan_stove=on(pan, stove)
    return on_fryingpan_stove

behavior scramble_eggs(eggs:item, stove:item, pan:item):
    body:
        if is_fryingpan_on_stove(pan, stove):
            achieve inside(eggs, pan)
            achieve is_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind pot: item where:
            is_pot(pot)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        cook_rice(pot, rice, stove)
        scramble_eggs(egg, stove, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_food_food_1000(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(oil,food_food_instance)
        else:
            exp(oil,food_food_instance)
    eff:
        unknown[oil]=False
        close[oil,food_food_instance]=True
        close[food_food_instance,oil]=True
    

behavior find_food_cheese_2088_around_microwave_135(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cheese,microwave_instance)
        else:
            exp(food_cheese,microwave_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,microwave_instance]=True
        close[microwave_instance,food_cheese]=True
    

behavior find_tea_2066_around_cupboard_118(tea:item):
    goal: not unknown(tea)
    body:
        assert is_tea(tea)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea,cupboard_instance)
        else:
            exp(tea,cupboard_instance)
    eff:
        unknown[tea]=False
        close[tea,cupboard_instance]=True
        close[cupboard_instance,tea]=True
    

#exp_behavior_end

#goal_representation
 
def rice_cooked(pot: item):
    # Check if the rice is cooked inside the pot
    symbol cooked = exists o: item : (is_food_rice(o) and inside(o, pot) and cooked(o))
    return cooked

def eggs_scrambled(pan: item):
    # Check if the eggs are scrambled in the pan
    symbol scrambled = exists o: item : (is_food_egg(o) and inside(o, pan) and scrambled(o))
    return scrambled

behavior cook_rice(pot: item, stove: item):
    body:
        if not rice_cooked(pot):
            achieve is_on(stove)
            achieve_once inside(pot, stove)
            achieve rice_cooked(pot)

behavior scramble_eggs(pan: item, stove: item):
    body:
        if not eggs_scrambled(pan):
            achieve is_on(stove)
            achieve_once inside(pan, stove)
            achieve eggs_scrambled(pan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        
        bind pot: item where:
            is_pot(pot)
            
        cook_rice(pot, stove)

        bind pan: item where:
            is_fryingpan(pan)

        scramble_eggs(pan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function cooked not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_wooden_spoon_2000_around_cupboard_118(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

behavior find_oil_2149_around_cutting_board_2123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(oil,cutting_board_instance)
        else:
            exp(oil,cutting_board_instance)
    eff:
        unknown[oil]=False
        close[oil,cutting_board_instance]=True
        close[cutting_board_instance,oil]=True
    

behavior find_measuring_cup_2012_around_cutting_board_2123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(measuring_cup,cutting_board_instance)
        else:
            exp(measuring_cup,cutting_board_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cutting_board_instance]=True
        close[cutting_board_instance,measuring_cup]=True
    

#goal_representation
 
def rice_cooked(pot: item):
    # Check if the rice is cooked inside the pot
    symbol cooked = exists o: item : (is_food_rice(o) and inside(o, pot) and has_water(o)) # Assume having water in rice equates to it being cooked
    return cooked

def eggs_scrambled(pan: item):
    # Check if the eggs are scrambled in the pan
    symbol scrambled = exists o: item : (is_food_egg(o) and inside(o, pan) and cut(o)) # Assume cutting eggs equates to scrambling
    return scrambled

behavior cook_rice(pot: item, stove: item):
    body:
        if not rice_cooked(pot):
            achieve is_on(stove)
            achieve_once inside(pot, stove)
            # Assume putting the pot on stove with water means it will cook

behavior scramble_eggs(pan: item, stove: item):
    body:
        if not eggs_scrambled(pan):
            achieve is_on(stove)
            achieve_once inside(pan, stove)
            # Assume putting the pan on stove with cut eggs means they will scramble

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        
        bind pot: item where:
            is_pot(pot)
            
        cook_rice(pot, stove)

        bind pan: item where:
            is_fryingpan(pan)

        scramble_eggs(pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def rice_cooked(pot: item):
    # Check if the rice is cooked inside the pot
    symbol cooked = exists o: item : (is_food_rice(o) and inside(o, pot) and has_water(o)) # Assume having water in rice equates to it being cooked
    return cooked

def eggs_scrambled(pan: item):
    # Check if the eggs are scrambled in the pan
    symbol scrambled = exists o: item : (is_food_egg(o) and inside(o, pan) and cut(o)) # Assume cutting eggs equates to scrambling
    return scrambled

behavior cook_rice(pot: item, stove: item):
    body:
        if not rice_cooked(pot):
            achieve is_on(stove)
            achieve_once inside(pot, stove)
            # Assume putting the pot on stove with water means it will cook

behavior scramble_eggs(pan: item, stove: item):
    body:
        if not eggs_scrambled(pan):
            achieve is_on(stove)
            achieve_once inside(pan, stove)
            # Assume putting the pan on stove with cut eggs means they will scramble

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        
        bind pot: item where:
            is_pot(pot)
            
        cook_rice(pot, stove)

        bind pan: item where:
            is_fryingpan(pan)

        scramble_eggs(pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)putin_executor(pot_2138, stove_2135)grab_executor(fryingpan_2154)putin_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(pot_2138)
Robot find: Robot is close to the stove_2135. Robot is close to the pot_2138. 
##############################
From agent.py
grab_executor(pot_2138)
Robot find: Robot is close to the stove_2135. Robot is close to the pot_2138. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the stove_2135. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(pot_2138, stove_2135)
Robot find: Robot is close to the stove_2135. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. pot_2138 is inside stove_2135. pot_2138 is close stove_2135. pot_2138 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the stove_2135. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the fryingpan_2154. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
putin_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the stove_2135. Robot is close to the pot_2138. Robot is close to the kitchen_counter_119. Robot is close to the fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is inside stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to switch the stove back on to cook the rice in the pot and to scramble the eggs in the frying pan. The stove must be on for both of these cooking processes to be completed.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_cutting_board_2123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(wooden_spoon,cutting_board_instance)
        else:
            exp(wooden_spoon,cutting_board_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cutting_board_instance]=True
        close[cutting_board_instance,wooden_spoon]=True
    

behavior find_pot_78_around_curtain_206(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==206
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(pot,curtain_instance)
        else:
            exp(pot,curtain_instance)
    eff:
        unknown[pot]=False
        close[pot,curtain_instance]=True
        close[curtain_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior mix_rice_and_eggs(rice:item, scrambled_eggs:item, pot:item, fryingpan:item, wooden_spoon:item): 
    body:
        achieve_once inside(rice, pot) # Ensure the rice is in the pot
        achieve_once inside(scrambled_eggs, fryingpan) # Ensure the scrambled eggs are in the frying pan
        achieve_once inhand(wooden_spoon) # Hold the wooden spoon
        achieve_once inside(rice, fryingpan) # Mix the rice and scrambled eggs in the frying pan temporarily

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind scrambled_eggs: item where:
            is_food_egg(scrambled_eggs)
        bind pot: item where:
            is_pot(pot)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon)
        mix_rice_and_eggs(rice, scrambled_eggs, pot, fryingpan, wooden_spoon)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior mix_rice_and_eggs(rice:item, scrambled_eggs:item, pot:item, fryingpan:item, wooden_spoon:item): 
    body:
        achieve_once inside(rice, pot) # Ensure the rice is in the pot
        achieve_once inside(scrambled_eggs, fryingpan) # Ensure the scrambled eggs are in the frying pan
        achieve_once inhand(wooden_spoon) # Hold the wooden spoon
        achieve_once inside(rice, fryingpan) # Mix the rice and scrambled eggs in the frying pan temporarily

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind scrambled_eggs: item where:
            is_food_egg(scrambled_eggs)
        bind pot: item where:
            is_pot(pot)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon)
        mix_rice_and_eggs(rice, scrambled_eggs, pot, fryingpan, wooden_spoon)
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2123)exp(wooden_spoon_2000, cutting_board_2123)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the cutting_board_2123. 
##############################
From agent.py
exp(wooden_spoon_2000, cutting_board_2123)
Fail to find wooden_spoon_2000 around cutting_board_2123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(wooden_spoon_2000, cupboard_118)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(wooden_spoon_2000, cupboard_118)
Fail to find wooden_spoon_2000 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(couch_198)exp(wooden_spoon_2000, couch_198)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)
##############################
From agent.py
walk_executor(couch_198)
Robot find: chair_2003, instrument_guitar_2028, rag_2052, mat_203, phone_2016, clothes_jacket_2119, Robot is close to the couch_198. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find wooden_spoon_2000 ?
Answer: The wooden_spoon_2000 is located inside bedroom_162. You can find it on table_199. The table is positioned close to the wooden_spoon_2000, so search the surface of the table to retrieve the item.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to switch the stove back on to cook the rice in the pot and to scramble the eggs in the frying pan. The stove must be on to complete both cooking processes.
The wooden_spoon_2000 is located inside bedroom_162. You can find it on table_199. The table is positioned close to the wooden_spoon_2000, so search the surface of the table to retrieve the item.

The actions you have taken:
Action 1: Walk to cupboard_117.
Action 2: look for pot_2138 around cupboard_117.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_rice_2108 around fridge_126.
Action 7: Grab food_rice_2108.
Action 8: Walk to pot_78.
Action 9: Put food_rice_2108 into pot_78.
Action 10: Walk to stove_2135.
Action 11: Switch on stove_2135.
Action 12: Switch off stove_2135.
Action 13: Open stove_2135.
Action 14: look for fryingpan_2154 around stove_2135.
Action 15: Switch on stove_2135.
Action 16: Walk to kitchen_counter_123.
Action 17: look for fryingpan_2154 around kitchen_counter_123.
Action 18: Walk to kitchen_counter_122.
Action 19: look for fryingpan_2154 around kitchen_counter_122.
Action 20: Walk to food_egg_2092.
Action 21: Grab food_egg_2092.
Action 22: Walk to fryingpan_2154.
Action 23: Put food_egg_2092 into fryingpan_2154.
Action 24: Walk to pot_2138.
Action 25: Grab pot_2138.
Action 26: Walk to stove_2135.
Action 27: Put pot_2138 on stove_2135.
Action 28: Walk to fryingpan_2154.
Action 29: Grab fryingpan_2154.
Action 30: Walk to stove_2135.
Action 31: Put fryingpan_2154 on stove_2135.
Action 32: Walk to pot_2138.
Action 33: Grab pot_2138.
Action 34: Walk to stove_2135.
Action 35: Put pot_2138 into stove_2135.
Action 36: Grab fryingpan_2154.
Action 37: Put fryingpan_2154 into stove_2135.
Action 38: Walk to cutting_board_2123.
Action 39: look for wooden_spoon_2000 around cutting_board_2123.
Action 40: Walk to cupboard_118.
Action 41: Open cupboard_118.
Action 42: look for wooden_spoon_2000 around cupboard_118.
Action 43: Walk to couch_198.

##############################
From agent.py
exp(wooden_spoon_2000, couch_198)
Fail to find wooden_spoon_2000 around couch_198. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_199)exp(wooden_spoon_2000, table_199)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)
##############################
From agent.py
walk_executor(table_199)
Robot find: wooden_spoon_2000, tea_bag_2023, drawing_201, drawing_202, Robot is close to the table_199. 
##############################
From agent.py
exp(wooden_spoon_2000, table_199)
Find wooden_spoon_2000. 
##############################
From agent.py-> find a plan in act()
walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)
##############################
From agent.py
walk_executor(wooden_spoon_2000)
Robot find: Robot is close to the table_199. Robot is close to the wooden_spoon_2000. 
##############################
From agent.py
grab_executor(wooden_spoon_2000)
Robot find: Robot is close to the table_199. Robot is close to the wooden_spoon_2000. Grabbing wooden_spoon_2000 by right hand. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the food_rice_2108. Robot is close to the pot_78. 
##############################
From agent.py
grab_executor(food_rice_2108)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the food_rice_2108. Robot is close to the pot_78. Grabbing food_rice_2108 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the food_rice_2108. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_rice_2108, fryingpan_2154)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the food_rice_2108. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. food_rice_2108 is inside fryingpan_2154. fryingpan_2154 is close food_rice_2108. food_rice_2108 is close fryingpan_2154. food_rice_2108 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(cupboard_117)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_rice_2108)', 'walk_executor(pot_78)', 'putin_executor(food_rice_2108, pot_78)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'switchoff_executor(stove_2135)', 'open_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_122)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_egg_2092, fryingpan_2154)', 'walk_executor(pot_2138)', 'grab_executor(pot_2138)', 'walk_executor(stove_2135)', 'put_executor(pot_2138, stove_2135)', 'walk_executor(fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'walk_executor(pot_2138)', 'grab_executor(pot_2138)', 'walk_executor(stove_2135)', 'putin_executor(pot_2138, stove_2135)', 'grab_executor(fryingpan_2154)', 'putin_executor(fryingpan_2154, stove_2135)', 'walk_executor(cutting_board_2123)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(couch_198)', 'walk_executor(table_199)', 'walk_executor(wooden_spoon_2000)', 'grab_executor(wooden_spoon_2000)', 'walk_executor(food_rice_2108)', 'grab_executor(food_rice_2108)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_rice_2108, fryingpan_2154)']
Time info:
Time consume: 330 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 65
goal generate times: 7
goal correct times: 2
action_num: 43

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
