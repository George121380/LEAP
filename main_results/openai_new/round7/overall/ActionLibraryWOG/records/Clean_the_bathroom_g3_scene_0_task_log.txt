From agent.py
Reset goals: The sub-goals are: 
['1. Find the toilet paper and use it to wipe the toilet.', '2. Throw the used toilet paper into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_bathroom_counter_41(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(toilet_paper,bathroom_counter_instance)
        else:
            exp(toilet_paper,bathroom_counter_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_counter_instance]=True
        close[bathroom_counter_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
def locate_toilet_paper():
    # Function to locate toilet paper in the environment 
    foreach tp: item:
        if is_toilet_paper(tp) and not visited(tp):
            observe(tp, "Locate and determine proximity to the toilet paper")

behavior use_toilet_paper(tp: item, toilet: item):
    body:
        achieve_once inhand(tp) # Temporarily hold the toilet paper to use it
        wipe(toilet) # Wipe the toilet with the toilet paper

def dispose_in_toilet(tp: item, toilet: item):
    # Behavior to dispose of the toilet paper in the toilet
    achieve_once inside(tp, toilet) # Throw the used toilet paper inside the toilet

behavior __goal__():
    body:
        if exists tp: item : (is_toilet_paper(tp) and not visited(tp)):
            locate_toilet_paper()
            # Locate the toilet paper if not yet found

        bind toilet: item where:
            is_toilet(toilet)
        # Binding the toilet

        foreach tp: item:
            if is_toilet_paper(tp):
                use_toilet_paper(tp, toilet)
                dispose_in_toilet(tp, toilet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Foreach statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_toilet_paper_2090_around_bathroom_counter_41(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(toilet_paper,bathroom_counter_instance)
        else:
            exp(toilet_paper,bathroom_counter_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_counter_instance]=True
        close[bathroom_counter_instance,toilet_paper]=True
    

#goal_representation
def locate_toilet_paper():
    # Function to locate toilet paper in the environment
    foreach tp: item:
        if is_toilet_paper(tp) and not visited(tp):
            observe(tp, "Locate and determine proximity to the toilet paper")

behavior use_toilet_paper(tp: item, toilet: item):
    body:
        achieve_once inhand(tp) # Temporarily hold the toilet paper to use it
        wipe(toilet) # Wipe the toilet with the toilet paper

def dispose_in_toilet(tp: item, toilet: item):
    # Behavior to dispose of the toilet paper in the toilet
    achieve_once inside(tp, toilet) # Throw the used toilet paper inside the toilet

behavior __goal__():
    body:
        if exists tp: item : (is_toilet_paper(tp) and not visited(tp)):
            locate_toilet_paper()
            # Locate the toilet paper if not yet found

        bind toilet: item where:
            is_toilet(toilet)
        # Binding the toilet

        foreach tp: item:
            if is_toilet_paper(tp) and visited(tp):
                use_toilet_paper(tp, toilet)
                dispose_in_toilet(tp, toilet)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Foreach statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_toilet_paper_2090_around_bathroom_counter_41(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(toilet_paper,bathroom_counter_instance)
        else:
            exp(toilet_paper,bathroom_counter_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_counter_instance]=True
        close[bathroom_counter_instance,toilet_paper]=True
    

behavior find_towel_2057_around_shower_36(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

#goal_representation
def locate_toilet_paper():
    # Function to locate toilet paper in the environment
    foreach item: item:
        if is_toilet_paper(item) and not visited(item):
            observe(item, "Locate and determine proximity to the toilet paper")

behavior use_toilet_paper(tp: item, toilet: item):
    body:
        achieve_once inhand(tp) # Temporarily hold the toilet paper to use it
        wipe(toilet) # Wipe the toilet with the toilet paper

def dispose_in_toilet(tp: item, toilet: item):
    # Behavior to dispose of the toilet paper in the toilet
    achieve_once inside(tp, toilet) # Throw the used toilet paper inside the toilet

behavior __goal__():
    body:
        if exists tp: item : (is_toilet_paper(tp) and not visited(tp)):
            locate_toilet_paper()
            # Locate the toilet paper if not yet found

        bind toilet: item where:
            is_toilet(toilet)
        # Binding the toilet

        foreach item: item:
            if is_toilet_paper(item) and visited(item):
                use_toilet_paper(item, toilet)
                dispose_in_toilet(item, toilet)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_bathroom_counter_41(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(toilet_paper,bathroom_counter_instance)
        else:
            exp(toilet_paper,bathroom_counter_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_counter_instance]=True
        close[bathroom_counter_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet(toilet:item):
    body:
        achieve dirty(toilet)
        wipe(toilet)
        achieve clean(toilet)

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Find the toilet paper

        achieve_once inhand(toilet_paper)
        # Hold the toilet paper temporarily

        bind toilet: item where:
            is_toilet(toilet)
        # Find the toilet

        achieve close_char(char, toilet)
        # Move the character closer to the toilet

        wipe_toilet(toilet)
        # Wipe the toilet with the toilet paper

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
def has_toilet_paper_near(char: character):
    # Function to check if theres toilet paper near the character
    symbol toilet_paper_near=exists paper: item : (is_toilet_paper(paper) and close_char(char, paper))
    return toilet_paper_near

behavior wipe_toilet(paper: item, toilet: item):
    body:
        achieve_once inhand(paper)
        achieve_once clean(toilet)

def find_toilet():
    # Function to find the toilet
    symbol find_toilet=exists toilet: item : (is_toilet(toilet))
    return find_toilet

behavior __goal__():
    body:
        if has_toilet_paper_near(char):
            # If theres toilet paper nearby
            bind paper: item where:
                is_toilet_paper(paper) and close_char(char, paper)
            # Find the toilet to clean
            if find_toilet():
                bind toilet: item where:
                    is_toilet(toilet)
                wipe_toilet(paper, toilet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wipe the toilet with toilet paper.', '2. Throw the used toilet paper into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_toilet_37(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==37
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet(t_paper:item, toilet:item):
    body:
        achieve_once inhand(t_paper)
        # Temporarily hold the toilet paper to wipe
        achieve clean(toilet)
        # Ensure the toilet is clean

behavior discard_toilet_paper(t_paper:item, toilet:item):
    body:
        achieve_once inside(t_paper, toilet)
        # Dispose of the toilet paper inside the toilet

behavior __goal__():
    body:
        bind t_paper: item where:
            is_toilet_paper(t_paper)

        bind toilet: item where:
            is_toilet(toilet)

        wipe_toilet(t_paper, toilet)
        discard_toilet_paper(t_paper, toilet)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wipe_toilet(t_paper:item, toilet:item):
    body:
        achieve_once inhand(t_paper)
        # Temporarily hold the toilet paper to wipe
        achieve clean(toilet)
        # Ensure the toilet is clean

behavior discard_toilet_paper(t_paper:item, toilet:item):
    body:
        achieve_once inside(t_paper, toilet)
        # Dispose of the toilet paper inside the toilet

behavior __goal__():
    body:
        bind t_paper: item where:
            is_toilet_paper(t_paper)

        bind toilet: item where:
            is_toilet(toilet)

        wipe_toilet(t_paper, toilet)
        discard_toilet_paper(t_paper, toilet)

##############################
From agent.py-> find a plan in act()
walk_executor(toilet_37)open_executor(toilet_37)exp(toilet_paper_2090, toilet_37)walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(toilet_37)
Robot find: toilet_paper_2090, Robot is close to the toilet_37. 
##############################
From agent.py
open_executor(toilet_37)
Robot find: Robot is close to the toilet_37. toilet_37 is opened. 
##############################
From agent.py
exp(toilet_paper_2090, toilet_37)
Find toilet_paper_2090. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_paper_2090)grab_executor(toilet_paper_2090)walk_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
walk_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. 
##############################
From agent.py
grab_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. Grabbing toilet_paper_2090 by right hand. 
##############################
From agent.py
walk_executor(toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. 
##############################
From agent.py
putin_executor(toilet_paper_2090, toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. toilet_paper_2090 is inside toilet_37. toilet_paper_2090 is close toilet_37. toilet_paper_2090 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to wipe the toilet with the toilet paper to ensure it is clean, rather than just putting the toilet paper into the toilet.
##############################
From agent.py
Human Instruction: The robot needs to wipe the toilet with the toilet paper to ensure it is clean, rather than just putting the toilet paper into the toilet.

The actions you have taken:
Action 1: Walk to toilet_37.
Action 2: Open toilet_37.
Action 3: look for toilet_paper_2090 around toilet_37.
Action 4: Walk to toilet_paper_2090.
Action 5: Grab toilet_paper_2090.
Action 6: Walk to toilet_37.
Action 7: Put toilet_paper_2090 into toilet_37.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_sink_42(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select toilet with ID 37

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select toilet paper with ID 2090

        achieve close_char(char, toilet)
        # Move the character closer to the toilet

        wipe(toilet)
        # Perform the action of wiping the toilet
        
        achieve_once inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select toilet with ID 37

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select toilet paper with ID 2090

        achieve close_char(char, toilet)
        # Move the character closer to the toilet

        wipe(toilet)
        # Perform the action of wiping the toilet
        
        achieve_once inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

##############################
From agent.py-> find a plan in act()
wipe_executor(toilet_37)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet(toilet:item):
    body:
        wipe(toilet)
        # Wipe the toilet with the toilet paper

behavior dispose_toilet_paper(toilet_paper:item, toilet:item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Dispose of the used toilet paper by placing it into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select the toilet with ID 37

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select the toilet paper with ID 2090

        wipe_toilet(toilet)
        dispose_toilet_paper(toilet_paper, toilet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wipe_toilet(toilet:item):
    body:
        wipe(toilet)
        # Wipe the toilet with the toilet paper

behavior dispose_toilet_paper(toilet_paper:item, toilet:item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Dispose of the used toilet paper by placing it into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select the toilet with ID 37

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select the toilet paper with ID 2090

        wipe_toilet(toilet)
        dispose_toilet_paper(toilet_paper, toilet)

##############################
From agent.py-> find a plan in act()
wipe_executor(toilet_37)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_napkin_2005_around_bathroom_counter_41(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(napkin,bathroom_counter_instance)
        else:
            exp(napkin,bathroom_counter_instance)
    eff:
        unknown[napkin]=False
        close[napkin,bathroom_counter_instance]=True
        close[bathroom_counter_instance,napkin]=True
    

behavior find_cleaning_solution_2073_around_sink_42(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
def cannot_wipe(toilet: item):
    # The function checks if the toilet is not wipeable due to any constraints
    symbol cannot_wipe= exists condition: bool : (condition == You can not wipe toilet_  str(id[toilet]))
    return cannot_wipe

behavior attempt_to_wipe(toilet: item, toilet_paper: item):
    body:
        if not cannot_wipe(toilet):
            achieve_once inhand(toilet_paper)
            achieve clean(toilet)

behavior dispose_of_toilet_paper(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        attempt_to_wipe(toilet, toilet_paper)
        dispose_of_toilet_paper(toilet, toilet_paper)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'can') at line 5674, column 68.
Expected one of: 
	* RPAR
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_napkin_2005_around_bathroom_counter_41(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(napkin,bathroom_counter_instance)
        else:
            exp(napkin,bathroom_counter_instance)
    eff:
        unknown[napkin]=False
        close[napkin,bathroom_counter_instance]=True
        close[bathroom_counter_instance,napkin]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_sink_42(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#goal_representation
 
def cannot_wipe(toilet: item):
    # The function checks if the toilet is not wipeable due to any constraints
    symbol cannot_wipe= exists condition: bool : (condition and You can not wipe toilet_ in condition and str(id[toilet]) in condition)
    return cannot_wipe

behavior attempt_to_wipe(toilet: item, toilet_paper: item):
    body:
        if not cannot_wipe(toilet):
            achieve_once inhand(toilet_paper)
            achieve clean(toilet)

behavior dispose_of_toilet_paper(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        attempt_to_wipe(toilet, toilet_paper)
        dispose_of_toilet_paper(toilet, toilet_paper)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'can') at line 5693, column 69.
Expected one of: 
	* RPAR
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2059_around_shower_36(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_sink_42(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#goal_representation
 
def cannot_wipe(toilet: item):
    # The function checks if the toilet is not wipeable due to any constraints
    symbol cannot_wipe = exists condition: bool : (You can not wipe toilet_ in condition and str(id[toilet]) in condition)
    return cannot_wipe

behavior attempt_to_wipe(toilet: item, toilet_paper: item):
    body:
        if not cannot_wipe(toilet):
            achieve_once inhand(toilet_paper)
            achieve clean(toilet)

behavior dispose_of_toilet_paper(toilet: item, toilet_paper: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        attempt_to_wipe(toilet, toilet_paper)
        dispose_of_toilet_paper(toilet, toilet_paper)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_vacuum_cleaner_2070_around_washing_machine_2007(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        # Temporarily grasp the toilet paper 
        achieve_once close_char(char, toilet) 
        # Ensure the character is close to the toilet
        wipe(toilet)
        # Wipe the toilet with the toilet paper

behavior throw_paper_into_toilet(toilet:item, toilet_paper:item):
    body:
        achieve_once inside(toilet_paper, toilet) 
        # Place the used toilet paper inside the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select toilet with ID 37

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select toilet paper with ID 2090

        wipe_toilet_with_paper(toilet, toilet_paper)
        throw_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        # Temporarily grasp the toilet paper 
        achieve_once close_char(char, toilet) 
        # Ensure the character is close to the toilet
        wipe(toilet)
        # Wipe the toilet with the toilet paper

behavior throw_paper_into_toilet(toilet:item, toilet_paper:item):
    body:
        achieve_once inside(toilet_paper, toilet) 
        # Place the used toilet paper inside the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select toilet with ID 37

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select toilet paper with ID 2090

        wipe_toilet_with_paper(toilet, toilet_paper)
        throw_paper_into_toilet(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
grab_executor(toilet_paper_2090)wipe_executor(toilet_37)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
grab_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. Grabbing toilet_paper_2090 by right hand. 
##############################
From agent.py
wipe_executor(toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. 
##############################
From agent.py
putin_executor(toilet_paper_2090, toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. toilet_paper_2090 is inside toilet_37. toilet_paper_2090 is close toilet_37. toilet_paper_2090 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_napkin_2005_around_trashcan_99(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper
        
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        achieve close_char(char, toilet_paper)
        # Approach the toilet paper
        
        achieve_once inhand(toilet_paper)
        # Temporarily hold the toilet paper

        achieve close_char(char, toilet)
        # Move close to the toilet

        achieve_once inside(toilet_paper, toilet)
        # Throw the toilet paper into the toilet
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper
        
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        achieve close_char(char, toilet_paper)
        # Approach the toilet paper
        
        achieve_once inhand(toilet_paper)
        # Temporarily hold the toilet paper

        achieve close_char(char, toilet)
        # Move close to the toilet

        achieve_once inside(toilet_paper, toilet)
        # Throw the toilet paper into the toilet
##############################
From agent.py-> find a plan in act()
grab_executor(toilet_paper_2090)putin_executor(toilet_paper_2090, toilet_37)
##############################
From agent.py
grab_executor(toilet_paper_2090)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. Grabbing toilet_paper_2090 by right hand. 
##############################
From agent.py
putin_executor(toilet_paper_2090, toilet_37)
Robot find: Robot is close to the toilet_paper_2090. Robot is close to the toilet_37. toilet_paper_2090 is inside toilet_37. toilet_paper_2090 is close toilet_37. toilet_paper_2090 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the toilet is wiped with toilet_paper_2090 before disposing of it into toilet_37. The current sequence did not ensure the toilet was cleaned with the paper as intended.
##############################
From agent.py
Human Instruction: You need to ensure the toilet is wiped with toilet_paper_2090 before disposing of it into toilet_37. The current sequence did not ensure the toilet was cleaned with the paper as intended.

Trial and Error: You can not wipe toilet_37You can not wipe toilet_37
The actions you have taken:
Action 1: Walk to toilet_37.
Action 2: Open toilet_37.
Action 3: look for toilet_paper_2090 around toilet_37.
Action 4: Walk to toilet_paper_2090.
Action 5: Grab toilet_paper_2090.
Action 6: Walk to toilet_37.
Action 7: Put toilet_paper_2090 into toilet_37.
Action 8: Grab toilet_paper_2090.
Action 9: Wipe toilet_37.
Action 10: Put toilet_paper_2090 into toilet_37.
Action 11: Grab toilet_paper_2090.
Action 12: Put toilet_paper_2090 into toilet_37.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior throw_used_toilet_paper(toilet_paper: item, toilet: item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select the designated toilet and toilet paper by their IDs
        
        throw_used_toilet_paper(toilet_paper, toilet)
        # Execute the action to throw the used toilet paper into the toilet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior throw_used_toilet_paper(toilet_paper:item, toilet:item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Dispose of the used toilet paper in the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper]==2090
        # Select the correct toilet paper

        bind toilet: item where:
            is_toilet(toilet) and id[toilet]==37
        # Select the correct toilet

        throw_used_toilet_paper(toilet_paper, toilet)
        # Execute the disposal of the used toilet paper into the toilet
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_shower_36(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(mat,shower_instance)
        else:
            exp(mat,shower_instance)
    eff:
        unknown[mat]=False
        close[mat,shower_instance]=True
        close[shower_instance,mat]=True
    

behavior find_napkin_2005_around_trashcan_99(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior throw_used_toilet_paper(toilet_paper:item, toilet:item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        throw_used_toilet_paper(toilet_paper, toilet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_napkin_2005_around_trashcan_99(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior throw_in_toilet(paper:item, toilet:item):
    body:
        achieve_once inside(paper, toilet) # Put the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37 # Bind to specified toilet
        bind paper: item where:
            is_toilet_paper(paper) and id[paper] == 2090 # Bind to specified toilet paper
        throw_in_toilet(paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_shower_38(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(cleaning_solution,shower_instance)
        else:
            exp(cleaning_solution,shower_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,shower_instance]=True
        close[shower_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def has_toilet_paper_in_toilet(toilet:item):
    # Function to check if there is toilet paper in a specified toilet
    symbol has_toilet_paper = exists paper: item : (is_toilet_paper(paper) and inside(paper, toilet))
    return has_toilet_paper

behavior throw_used_toilet_paper(used_paper:item, toilet:item):
    body:
        achieve_once inside(used_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select toilet with ID 37

        bind paper: item where:
            is_toilet_paper(paper) and id[paper] == 2090
        # Select toilet paper with ID 2090
        
        if has_toilet_paper_in_toilet(toilet):
            throw_used_toilet_paper(paper, toilet)
            # Throw the used toilet paper into the toilet
        else:
            observe(toilet_paper, "Check if toilet paper is on toilet_37")
            # Otherwise, observe the toilet paper to check if it is on the toilet

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: toilet_paper; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_napkin_2005_around_trashcan_99(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

#goal_representation
 
def has_toilet_paper_in_toilet(toilet:item):
    # Function to check if there is toilet paper in a specified toilet
    symbol has_toilet_paper = exists paper: item : (is_toilet_paper(paper) and inside(paper, toilet))
    return has_toilet_paper

behavior throw_used_toilet_paper(used_paper:item, toilet:item):
    body:
        achieve_once inside(used_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select toilet with ID 37

        bind paper: item where:
            is_toilet_paper(paper) and id[paper] == 2090
        # Select toilet paper with ID 2090

        if has_toilet_paper_in_toilet(toilet):
            throw_used_toilet_paper(paper, toilet)
            # Throw the used toilet paper into the toilet
        else:
            observe(paper, "Check if toilet paper is on toilet_37")
            # Otherwise, observe the toilet paper to check if it is on the toilet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior throw_toilet_paper_in_toilet(toilet_paper: item, toilet: item):
    body:
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2090
        # Select toilet paper with ID 2090

        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 37
        # Select toilet with ID 37

        throw_toilet_paper_in_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Wipe the toilet with toilet paper. Then throw it into the toilet.
Action History:
['walk_executor(toilet_37)', 'open_executor(toilet_37)', 'walk_executor(toilet_paper_2090)', 'grab_executor(toilet_paper_2090)', 'walk_executor(toilet_37)', 'putin_executor(toilet_paper_2090, toilet_37)', 'wipe_executor(toilet_37) (Failed)', 'wipe_executor(toilet_37) (Failed)', 'grab_executor(toilet_paper_2090)', 'wipe_executor(toilet_37)', 'putin_executor(toilet_paper_2090, toilet_37)', 'grab_executor(toilet_paper_2090)', 'putin_executor(toilet_paper_2090, toilet_37)']
Time info:
Time consume: 213 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 82
goal generate times: 15
goal correct times: 0
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
