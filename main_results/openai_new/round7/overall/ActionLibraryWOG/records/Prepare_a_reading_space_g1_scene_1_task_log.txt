From agent.py
Reset goals: The sub-goals are: 
['1. Identify which room is the home office.', '2. Find the book.', '3. Place the book on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2029_around_home_office_241(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(phone,home_office_instance)
        else:
            exp(phone,home_office_instance)
    eff:
        unknown[phone]=False
        close[phone,home_office_instance]=True
        close[home_office_instance,phone]=True
    

behavior find_headset_2131_around_home_office_241(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_keyboard_211_around_home_office_241(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(keyboard,home_office_instance)
        else:
            exp(keyboard,home_office_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,home_office_instance]=True
        close[home_office_instance,keyboard]=True
    

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_room(room:item):
    # Function to determine if a room serves as a home office
    symbol is_home_office_room= is_home_office(room)
    return is_home_office_room

behavior __goal__():
    body:
        if exists room: item : (is_home_office_room(room)):
            # If the home office is already identified based on available information
            bind room: item where:
                is_home_office_room(room)
            # Specify that we have identified the room as the home office
            achieve close_char(char, room)
            # Ensure the character moves to the home office room
        else:
            # If the home office is not identified yet, begin inspection
            foreach room: item:
                if not visited(room):
                    # Inspect all rooms that have not been visited
                    observe(room, "Check if this room is the home office")
                    # Observe to determine if a room is the home office

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_home_office_room(room:item):
    # Function to determine if a room serves as a home office
    symbol is_home_office_room= is_home_office(room)
    return is_home_office_room

behavior __goal__():
    body:
        if exists room: item : (is_home_office_room(room)):
            # If the home office is already identified based on available information
            bind room: item where:
                is_home_office_room(room)
            # Specify that we have identified the room as the home office
            achieve close_char(char, room)
            # Ensure the character moves to the home office room
        else:
            # If the home office is not identified yet, begin inspection
            foreach room: item:
                if not visited(room):
                    # Inspect all rooms that have not been visited
                    observe(room, "Check if this room is the home office")
                    # Observe to determine if a room is the home office

##############################
From agent.py-> find a plan in act()
walk_executor(home_office_241)
##############################
From agent.py
walk_executor(home_office_241)

##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_bookshelf_196(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation

def has_book_on_bookshelf(bookshelf: item):
    # Function to check if there is a book on the specified bookshelf
    symbol has_book = exists o: item : (is_book(o) and on(o, bookshelf))
    return has_book

behavior __goal__():
    body:
        # Check if there is a bookshelf with a book based on the available information
        if exists bookshelf: item : (is_bookshelf(bookshelf) and has_book_on_bookshelf(bookshelf)):
            bind bookshelf: item where:
                is_bookshelf(bookshelf) and has_book_on_bookshelf(bookshelf)
            # Select the bookshelf that has a book on it and approach it
            achieve close_char(char, bookshelf)
        else:
            # Check all unvisited bookshelves in the scene
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    observe(bookshelf,"Check is there any book on the bookshelf")

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def has_book_on_bookshelf(bookshelf: item):
    # Function to check if there is a book on the specified bookshelf
    symbol has_book = exists o: item : (is_book(o) and on(o, bookshelf))
    return has_book

behavior __goal__():
    body:
        # Check if there is a bookshelf with a book based on the available information
        if exists bookshelf: item : (is_bookshelf(bookshelf) and has_book_on_bookshelf(bookshelf)):
            bind bookshelf: item where:
                is_bookshelf(bookshelf) and has_book_on_bookshelf(bookshelf)
            # Select the bookshelf that has a book on it and approach it
            achieve close_char(char, bookshelf)
        else:
            # Check all unvisited bookshelves in the scene
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    observe(bookshelf,"Check is there any book on the bookshelf")

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)obs(bookshelf_124, Check is there any book on the bookshelf)walk_executor(bookshelf_196)open_executor(bookshelf_196)obs(bookshelf_196, Check is there any book on the bookshelf)walk_executor(bookshelf_275)obs(bookshelf_275, Check is there any book on the bookshelf)
##############################
From agent.py
walk_executor(bookshelf_124)
Robot find: book_2136, envelope_2055, book_2137, drawing_110, drawing_111, Robot is close to the bookshelf_124. 
##############################
From agent.py
open_executor(bookshelf_124)
Robot find: Robot is close to the bookshelf_124. bookshelf_124 is opened. 
##############################
From agent.py
obs(bookshelf_124, Check is there any book on the bookshelf)
Get this information:  book_2136 is on bookshelf_124. bookshelf_124 is close to envelope_2055. bookshelf_124 is close to doorjamb_37. bookshelf_124 is close to door_38. bookshelf_124 is close to floor_169. bookshelf_124 is close to floor_42. bookshelf_124 is close to floor_43. bookshelf_124 is close to floor_170. bookshelf_124 is close to floor_44. bookshelf_124 is close to wall_176. bookshelf_124 is close to wall_179. bookshelf_124 is close to wall_66. bookshelf_124 is close to bookshelf_196. bookshelf_124 is close to wall_70. bookshelf_124 is close to powersocket_72. bookshelf_124 is close to light_212. bookshelf_124 is close to book_2136. bookshelf_124 is close to book_2137. bookshelf_124 is close to photoframe_219. bookshelf_124 is close to drawing_110. bookshelf_124 is close to character_240. drawing_110 is on bookshelf_124. envelope_2055 is on bookshelf_124. bookshelf_124 is facing drawing_110. bookshelf_124 is facing drawing_111. bookshelf_124 is on floor_42. bookshelf_124 is on floor_43. book_2137 is on bookshelf_124. bookshelf_124 is inside dining_room_41. bookshelf_124 is CLEAN. bookshelf_124 is OPEN.
##############################
From agent.py
walk_executor(bookshelf_196)
Robot find: novel_2060, drawing_202, Robot is close to the bookshelf_196. 
##############################
From agent.py
open_executor(bookshelf_196)
Robot find: Robot is close to the photoframe_219. Robot is close to the bookshelf_196. bookshelf_196 is opened. 
##############################
From agent.py
obs(bookshelf_196, Check is there any book on the bookshelf)
Get this information:  novel_2060 is on bookshelf_196. bookshelf_196 is inside bedroom_162. photoframe_219 is inside bookshelf_196. bookshelf_196 is close to novel_2060. bookshelf_196 is close to toilet_15. bookshelf_196 is close to shower_16. bookshelf_196 is close to doorjamb_37. bookshelf_196 is close to door_38. bookshelf_196 is close to floor_169. bookshelf_196 is close to floor_170. bookshelf_196 is close to floor_43. bookshelf_196 is close to floor_42. bookshelf_196 is close to floor_44. bookshelf_196 is close to wall_176. bookshelf_196 is close to wall_179. bookshelf_196 is close to ceiling_52. bookshelf_196 is close to ceiling_182. bookshelf_196 is close to ceiling_183. bookshelf_196 is close to door_61. bookshelf_196 is close to doorjamb_190. bookshelf_196 is close to wall_66. bookshelf_196 is close to wall_70. bookshelf_196 is close to filing_cabinet_200. bookshelf_196 is close to powersocket_72. bookshelf_196 is close to light_212. bookshelf_196 is close to photoframe_219. bookshelf_196 is close to drawing_110. bookshelf_196 is close to bookshelf_124. bookshelf_196 is close to character_240. bookshelf_196 is facing drawing_202. bookshelf_196 is on floor_170. bookshelf_196 is OPEN. bookshelf_196 is DIRTY.
##############################
From agent.py
walk_executor(bookshelf_275)
Robot find: pencil_2020, Robot is close to the bookshelf_275. 
##############################
From agent.py
obs(bookshelf_275, Check is there any book on the bookshelf)
Get this information:  bookshelf_275 is inside home_office_241. pencil_2020 is on bookshelf_275. bookshelf_275 is on floor_262. bookshelf_275 is close to wall_65. bookshelf_275 is close to trashcan_99. bookshelf_275 is close to wall_68. bookshelf_275 is close to pencil_2020. bookshelf_275 is close to floor_262. bookshelf_275 is close to floor_50. bookshelf_275 is close to floor_51. bookshelf_275 is close to wall_246. bookshelf_275 is close to ceiling_59. bookshelf_275 is close to ceiling_252. bookshelf_275 is close to character_240. bookshelf_275 is CLEAN. bookshelf_275 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2014_around_table_114(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior find_coffee_table_in_home_office():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        foreach coffee_table: item:
            if is_table(coffee_table) and inside(coffee_table, home_office) and surfaces(coffee_table):
                achieve close_char(char, coffee_table)
                return

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book)
        
        find_coffee_table_in_home_office()
        bind coffee_table:item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)
            
        place_book_on_coffee_table(book, coffee_table)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n') at line 5226, column 23.
Expected one of: 
	* LONG_STRING
	* LSQB
	* DEC_NUMBER
	* FALSE
	* TILDE
	* ELLIPSIS
	* VARNAME
	* PLUS
	* TRUE
	* BIN_NUMBER
	* IMAG_NUMBER
	* MINUS
	* NONE
	* COLON
	* HEX_NUMBER
	* FORALL
	* OCT_NUMBER
	* NOT
	* LPAR
	* FINDALL
	* STRING
	* DO
	* FINDONE
	* FLOAT_NUMBER
	* EXISTS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pencil_2014_around_desk_272(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

#goal_representation
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior find_coffee_table_in_home_office():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        foreach coffee_table: item:
            if is_table(coffee_table) and inside(coffee_table, home_office) and surfaces(coffee_table):
                achieve close_char(char, coffee_table)
                return

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book)
        
        find_coffee_table_in_home_office()
        bind coffee_table:item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)
            
        place_book_on_coffee_table(book, coffee_table)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n') at line 5226, column 23.
Expected one of: 
	* LONG_STRING
	* LSQB
	* DEC_NUMBER
	* FALSE
	* TILDE
	* ELLIPSIS
	* VARNAME
	* PLUS
	* TRUE
	* BIN_NUMBER
	* IMAG_NUMBER
	* MINUS
	* NONE
	* COLON
	* HEX_NUMBER
	* FORALL
	* OCT_NUMBER
	* NOT
	* LPAR
	* FINDALL
	* STRING
	* DO
	* FINDONE
	* FLOAT_NUMBER
	* EXISTS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pencil_2020_around_pencil_2020(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind pencil_instance:item where:
            is_pencil(pencil_instance) and id[pencil_instance]==2020
        achieve close_char(char,pencil_instance)
        if can_open(pencil_instance):
            achieve_once open(pencil_instance)
            exp(pencil,pencil_instance)
        else:
            exp(pencil,pencil_instance)
    eff:
        unknown[pencil]=False
        close[pencil,pencil_instance]=True
        close[pencil_instance,pencil]=True
    

#goal_representation
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior find_coffee_table_in_home_office():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        foreach coffee_table: item:
            if is_table(coffee_table) and inside(coffee_table, home_office) and surfaces(coffee_table):
                achieve_once close_char(char, coffee_table)
                return

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and achieve_once inhand(book)
        
        find_coffee_table_in_home_office()
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)
            
        place_book_on_coffee_table(book, coffee_table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2020_around_pencil_2020(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind pencil_instance:item where:
            is_pencil(pencil_instance) and id[pencil_instance]==2020
        achieve close_char(char,pencil_instance)
        if can_open(pencil_instance):
            achieve_once open(pencil_instance)
            exp(pencil,pencil_instance)
        else:
            exp(pencil,pencil_instance)
    eff:
        unknown[pencil]=False
        close[pencil,pencil_instance]=True
        close[pencil_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office_241)
        # Select the table that is inside the home office
        bind book: item where:
            is_book(book) and inhand(book)
        # Select the book that is currently in hand
        place_book_on_table(book, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office_241; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pencil_2014_around_home_office_241(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

behavior find_chair_2003_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#goal_representation
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table that is inside the home office

        bind book: item where:
            is_book(book) and inhand(book)
        # Select the book that is currently in hand

        place_book_on_table(book, table)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2020_around_pencil_2020(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind pencil_instance:item where:
            is_pencil(pencil_instance) and id[pencil_instance]==2020
        achieve close_char(char,pencil_instance)
        if can_open(pencil_instance):
            achieve_once open(pencil_instance)
            exp(pencil,pencil_instance)
        else:
            exp(pencil,pencil_instance)
    eff:
        unknown[pencil]=False
        close[pencil,pencil_instance]=True
        close[pencil_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind home_office: item where:
            is_home_office(home_office)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        
        place_book_on_table(book, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind home_office: item where:
            is_home_office(home_office)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        
        place_book_on_table(book, table)

##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)
##############################
From agent.py
walk_executor(book_2136)
Robot find: Robot is close to the book_2136. Robot is close to the bookshelf_124. 
##############################
From agent.py
grab_executor(book_2136)
Robot find: Robot is close to the book_2136. Robot is close to the bookshelf_124. Grabbing book_2136 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(book_2136, table_270)
Robot find: Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. book_2136 is on table_270. table_270 is close book_2136. book_2136 is close table_270. book_2136 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffee table in home office.
Action History:
['walk_executor(home_office_241)', 'walk_executor(bookshelf_124)', 'open_executor(bookshelf_124)', 'walk_executor(bookshelf_196)', 'open_executor(bookshelf_196)', 'walk_executor(bookshelf_275)', 'walk_executor(book_2136)', 'grab_executor(book_2136)', 'walk_executor(table_270)', 'put_executor(book_2136, table_270)']
Time info:
Time consume: 95 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 151
goal generate times: 5
goal correct times: 0
action_num: 10

Task complete rate:
1
Scene_id: 1
##############################
