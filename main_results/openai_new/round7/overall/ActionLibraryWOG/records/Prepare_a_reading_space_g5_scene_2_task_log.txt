From agent.py
Reset goals: The sub-goals are: 
['1. Locate the spectacles and place them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2106_around_desk_375(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(spectacles,desk_instance)
        else:
            exp(spectacles,desk_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,desk_instance]=True
        close[desk_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_table(item: item):
    symbol is_target_location = exists room: item : (is_home_office(room) and inside(item, room) and is_table(item))
    return is_target_location

behavior locate_spectacles(spectacles: item):
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office_table(coffee_table)
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        locate_spectacles(spectacles)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_home_office_table(item: item):
    symbol is_target_location = exists room: item : (is_home_office(room) and inside(item, room) and is_table(item))
    return is_target_location

behavior locate_spectacles(spectacles: item):
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office_table(coffee_table)
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        locate_spectacles(spectacles)

##############################
From agent.py-> find a plan in act()
walk_executor(desk_375)exp(spectacles_2106, desk_375)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(desk_375)
Robot find: glue_2013, keyboard_382, chair_374, mouse_380, Robot is close to the desk_375. 
##############################
From agent.py
exp(spectacles_2106, desk_375)
Fail to find spectacles_2106 around desk_375. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_261)exp(spectacles_2106, desk_261)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(desk_261)
Robot find: chair_263, mat_237, drawing_238, Robot is close to the desk_261. 
##############################
From agent.py
exp(spectacles_2106, desk_261)
Fail to find spectacles_2106 around desk_261. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_193)exp(spectacles_2106, table_193)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the table_193. 
##############################
From agent.py
exp(spectacles_2106, table_193)
Fail to find spectacles_2106 around table_193. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(spectacles_2106, home_office_161)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(spectacles_2106, home_office_161)
Fail to find spectacles_2106 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(spectacles_2106, home_office_161)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(spectacles_2106, home_office_161)
Fail to find spectacles_2106 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(spectacles_2106, home_office_161)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find spectacles_2106 ?
Answer: Locate the dining room, specifically dining_room_1. Once inside, go to the kitchen_counter_128. The object you are looking for, spectacles_2106, will be positioned on top of kitchen_counter_128.
Re-decompose: None

##############################
From agent.py
Human Instruction: Locate the dining room, specifically dining_room_1. Once inside, go to the kitchen_counter_128. The object you are looking for, spectacles_2106, will be positioned on top of kitchen_counter_128.

The actions you have taken:
Action 1: Walk to desk_375.
Action 2: look for spectacles_2106 around desk_375.
Action 3: Walk to desk_261.
Action 4: look for spectacles_2106 around desk_261.
Action 5: Walk to table_193.
Action 6: look for spectacles_2106 around table_193.
Action 7: Walk to home_office_161.
Action 8: look for spectacles_2106 around home_office_161.
Action 9: Walk to home_office_161.
Action 10: look for spectacles_2106 around home_office_161.
Action 11: Walk to home_office_161.

##############################
From agent.py
exp(spectacles_2106, home_office_161)
Fail to find spectacles_2106 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(spectacles_2106, kitchen_counter_128)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(spectacles_2106, kitchen_counter_128)
Find spectacles_2106. 
##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. 
##############################
From agent.py
grab_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. Grabbing spectacles_2106 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. 
##############################
From agent.py
put_executor(spectacles_2106, table_193)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. table_193 is close spectacles_2106. spectacles_2106 is close table_193. spectacles_2106 is on table_193. spectacles_2106 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You found the spectacles but mistakenly placed them on table_193 instead of the coffee table in the home office. You need to move the spectacles from table_193 to the coffee table in the home office.
##############################
From agent.py
Human Instruction: You found the spectacles but mistakenly placed them on table_193 instead of the coffee table in the home office. You need to move the spectacles from table_193 to the coffee table in the home office.

The actions you have taken:
Action 1: Walk to desk_375.
Action 2: look for spectacles_2106 around desk_375.
Action 3: Walk to desk_261.
Action 4: look for spectacles_2106 around desk_261.
Action 5: Walk to table_193.
Action 6: look for spectacles_2106 around table_193.
Action 7: Walk to home_office_161.
Action 8: look for spectacles_2106 around home_office_161.
Action 9: Walk to home_office_161.
Action 10: look for spectacles_2106 around home_office_161.
Action 11: Walk to home_office_161.
Action 12: look for spectacles_2106 around home_office_161.
Action 13: Walk to kitchen_counter_128.
Action 14: look for spectacles_2106 around kitchen_counter_128.
Action 15: Walk to spectacles_2106.
Action 16: Grab spectacles_2106.
Action 17: Walk to table_193.
Action 18: Put spectacles_2106 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_374_around_home_office_161(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once inhand(spectacles)
        # Grab the spectacles for moving
        achieve_once on(spectacles, coffee_table)
        # Place the spectacles on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106
        # Select the spectacles with ID 2106
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office_161)
        # Select a table within the home office that serves as the coffee table
        
        move_spectacles_to_coffee_table(spectacles, coffee_table)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office_161; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_386_around_table_123(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#goal_representation

behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once inhand(spectacles)
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        
        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 161
        
        move_spectacles_to_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once inhand(spectacles)
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 161

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        move_spectacles_to_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once inhand(spectacles)
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106

        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 161

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        move_spectacles_to_coffee_table(spectacles, coffee_table)

##############################
From agent.py-> find a plan in act()
grab_executor(spectacles_2106)put_executor(spectacles_2106, table_193)
##############################
From agent.py
grab_executor(spectacles_2106)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. Grabbing spectacles_2106 by right hand. 
##############################
From agent.py
put_executor(spectacles_2106, table_193)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. spectacles_2106 is close table_193. spectacles_2106 is on table_193. spectacles_2106 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The spectacles need to be moved to the coffee table in the home office instead of table_193. Grab the spectacles from table_193 and place them on the coffee table in the home office.
##############################
From agent.py
Human Instruction: The spectacles need to be moved to the coffee table in the home office instead of table_193. Grab the spectacles from table_193 and place them on the coffee table in the home office.

The actions you have taken:
Action 1: Walk to desk_375.
Action 2: look for spectacles_2106 around desk_375.
Action 3: Walk to desk_261.
Action 4: look for spectacles_2106 around desk_261.
Action 5: Walk to table_193.
Action 6: look for spectacles_2106 around table_193.
Action 7: Walk to home_office_161.
Action 8: look for spectacles_2106 around home_office_161.
Action 9: Walk to home_office_161.
Action 10: look for spectacles_2106 around home_office_161.
Action 11: Walk to home_office_161.
Action 12: look for spectacles_2106 around home_office_161.
Action 13: Walk to kitchen_counter_128.
Action 14: look for spectacles_2106 around kitchen_counter_128.
Action 15: Walk to spectacles_2106.
Action 16: Grab spectacles_2106.
Action 17: Walk to table_193.
Action 18: Put spectacles_2106 on table_193.
Action 19: Grab spectacles_2106.
Action 20: Put spectacles_2106 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_386_around_mat_237(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==237
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item, home_office:item):
    body:
        achieve_once close(char, spectacles)
        achieve_once inhand(spectacles)
        achieve_once close_char(char, coffee_table)
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and is_grabbable(spectacles)
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure spectacles are moved to the coffee table in the home office
        move_spectacles_to_coffee_table(spectacles, coffee_table, home_office)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying close[observation, state](x: item, y: item).
  Arguments: O::char, V::spectacles
Argument #0 type does not match: expect item, got character.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_console_2027_around_home_office_161(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(console,home_office_instance)
        else:
            exp(console,home_office_instance)
    eff:
        unknown[console]=False
        close[console,home_office_instance]=True
        close[home_office_instance,console]=True
    

#goal_representation
behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item, home_office:item):
    body:
        achieve_once close_char(char, spectacles)
        achieve_once inhand(spectacles)
        achieve_once close_char(char, coffee_table)
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and is_grabbable(spectacles)
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        move_spectacles_to_coffee_table(spectacles, coffee_table, home_office)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_grabbable not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_laptop_2015_around_home_office_161(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laptop,home_office_instance)
        else:
            exp(laptop,home_office_instance)
    eff:
        unknown[laptop]=False
        close[laptop,home_office_instance]=True
        close[home_office_instance,laptop]=True
    

#goal_representation

behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item, home_office:item):
    body:
        achieve_once close_char(char, spectacles)
        achieve_once inhand(spectacles)
        achieve_once close_char(char, coffee_table)
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and grabbable(spectacles)
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        move_spectacles_to_coffee_table(spectacles, coffee_table, home_office)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior move_spectacles_to_coffee_table(spectacles:item, coffee_table:item, home_office:item):
    body:
        achieve_once close_char(char, spectacles)
        achieve_once inhand(spectacles)
        achieve_once close_char(char, coffee_table)
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and grabbable(spectacles)
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        move_spectacles_to_coffee_table(spectacles, coffee_table, home_office)

##############################
From agent.py-> find a plan in act()
grab_executor(spectacles_2106)put_executor(spectacles_2106, table_193)
##############################
From agent.py
grab_executor(spectacles_2106)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. Grabbing spectacles_2106 by right hand. 
##############################
From agent.py
put_executor(spectacles_2106, table_193)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. spectacles_2106 is close table_193. spectacles_2106 is on table_193. spectacles_2106 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to move the spectacles to the coffee table in the home office. Currently, the spectacles are on table_193, not on the coffee table in the home office. Grab the spectacles from table_193 and place them on the coffee table in the home office.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office: item where is_home_office(home_office))
        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5796, column 72.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_table(coffee_table) and exists home_office: item : (is_home_office(home_office) and inside(coffee_table, home_office))
        place_book_on_coffee_table(book, coffee_table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def in_home_office(x: item):
    # Check if the item is inside the home office
    symbol inside_home_office = exists room: item : (is_home_office(room) and inside(x, room))
    return inside_home_office

behavior observe_book(book:item):
    body:
        observe(book, "Determine the books location and surroundings")

behavior place_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table) 

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and in_home_office(book)
        # Select a book in the home office
        
        bind coffee_table: item where:
            is_table(coffee_table) and in_home_office(coffee_table)
        # Select a coffee table in the home office

        observe_book(book)
        place_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_coffee_table(table:item):
    # Function to check if the table is the coffee table located in the home office
    symbol is_home_office_coffee_table=exists office: item : (is_home_office(office) and inside(table, office))
    return is_home_office_coffee_table

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office_coffee_table(table)
        # Select the coffee table located in the home office

        bind book: item where:
            is_book(book)
        # Select the book to be placed on the table

        place_book_on_table(book, table) # Use the behavior to place the book on the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_home_office_coffee_table(table:item):
    # Function to check if the table is the coffee table located in the home office
    symbol is_home_office_coffee_table=exists office: item : (is_home_office(office) and inside(table, office))
    return is_home_office_coffee_table

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office_coffee_table(table)
        # Select the coffee table located in the home office

        bind book: item where:
            is_book(book)
        # Select the book to be placed on the table

        place_book_on_table(book, table) # Use the behavior to place the book on the coffee table

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(book_2091, bookshelf_189)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. 
##############################
From agent.py
open_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. bookshelf_189 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_189)
Fail to find book_2091 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to move the book from table_193 to the coffee table in the home office. Currently, the book is placed on table_193, which is not indicated as the coffee table in the home office.
##############################
From agent.py
Human Instruction: You need to move the book from table_193 to the coffee table in the home office. Currently, the book is placed on table_193, which is not indicated as the coffee table in the home office.

The actions you have taken:
Action 1: Walk to desk_375.
Action 2: look for spectacles_2106 around desk_375.
Action 3: Walk to desk_261.
Action 4: look for spectacles_2106 around desk_261.
Action 5: Walk to table_193.
Action 6: look for spectacles_2106 around table_193.
Action 7: Walk to home_office_161.
Action 8: look for spectacles_2106 around home_office_161.
Action 9: Walk to home_office_161.
Action 10: look for spectacles_2106 around home_office_161.
Action 11: Walk to home_office_161.
Action 12: look for spectacles_2106 around home_office_161.
Action 13: Walk to kitchen_counter_128.
Action 14: look for spectacles_2106 around kitchen_counter_128.
Action 15: Walk to spectacles_2106.
Action 16: Grab spectacles_2106.
Action 17: Walk to table_193.
Action 18: Put spectacles_2106 on table_193.
Action 19: Grab spectacles_2106.
Action 20: Put spectacles_2106 on table_193.
Action 21: Grab spectacles_2106.
Action 22: Put spectacles_2106 on table_193.
Action 23: Walk to bookshelf_189.
Action 24: Open bookshelf_189.
Action 25: look for book_2091 around bookshelf_189.
Action 26: Walk to bookshelf_136.
Action 27: look for book_2091 around bookshelf_136.
Action 28: Walk to book_2091.
Action 29: Grab book_2091.
Action 30: Walk to table_193.
Action 31: Put book_2091 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_curtain_294(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==294
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(book,curtain_instance)
        else:
            exp(book,curtain_instance)
    eff:
        unknown[book]=False
        close[book,curtain_instance]=True
        close[curtain_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def inside_home_office_161(table: item):
    # Function to check if the table is inside the home office with ID 161
    symbol inside_office = exists room: item : (is_home_office(room) and inside(table, room) and id[room] == 161)
    return inside_office

behavior place_book_on_table(book: item, table: item):
    body:
        achieve_once on(book, table)  # Place the book on the specified table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Bind the book with ID 2091
        
        bind table: item where:
            is_table(table) and inside_home_office_161(table) and id[table] == 193
        # Bind the table with ID 193 inside the home office
        
        place_book_on_table(book, table)  # Execute placing the book on the coffee table in home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office_161)
        # Select the coffee table inside the home office

        achieve_once on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office_161; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_table_123(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091
        
        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 161
        # Select the home office with ID 161

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        achieve_once on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_mat_201(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==201
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(book,mat_instance)
        else:
            exp(book,mat_instance)
    eff:
        unknown[book]=False
        close[book,mat_instance]=True
        close[mat_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select book with ID 2091

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office_161) and id[coffee_table] == 193
        # Select the coffee table inside the home office with ID 193

        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office_161; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_tablelamp_358(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==358
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(book,tablelamp_instance)
        else:
            exp(book,tablelamp_instance)
    eff:
        unknown[book]=False
        close[book,tablelamp_instance]=True
        close[tablelamp_instance,book]=True
    

behavior find_chair_263_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#goal_representation

behavior place_book_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office) and id[coffee_table] == 193

        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_curtain_294(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==294
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(book,curtain_instance)
        else:
            exp(book,curtain_instance)
    eff:
        unknown[book]=False
        close[book,curtain_instance]=True
        close[curtain_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book(table:item, book:item):
    body:
        achieve_once on(book, table) # Place the book on the specified table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office(inside_char(char, table))
        # Select the coffee table in the home office
        
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with the ID 2091

        find_book(table, book)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying is_home_office[observation, state](x: item).
  Arguments: inside_char(O::char, V::table)
Argument #0 type does not match: expect item, got bool.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_table_123(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

#goal_representation
 
behavior find_book(table:item, book:item):
    body:
        achieve_once on(book, table) 

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office(table))
        
        bind book: item where:
            is_book(book) and id[book] == 2091

        find_book(table, book)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function home_office not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_mouse_380(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==380
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(book,mouse_instance)
        else:
            exp(book,mouse_instance)
    eff:
        unknown[book]=False
        close[book,mouse_instance]=True
        close[mouse_instance,book]=True
    

#goal_representation
 
behavior find_book(table:item, book:item):
    body:
        achieve_once on(book, table) 

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office_161)
        
        bind book: item where:
            is_book(book) and id[book] == 2091

        find_book(table, book)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def in_home_office(table: item):
    # Function to check if a table is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091  # Use the unique ID to retrieve book_2091
        bind table: item where:
            is_table(table) and id[table] == 193 and in_home_office(table)
        # Select the table with ID 193 in the home office

        achieve_once on(book, table)
        # Place the book on the coffee table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_table_123(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

behavior find_chair_138_around_curtain_294(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==294
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(chair,curtain_instance)
        else:
            exp(chair,curtain_instance)
    eff:
        unknown[chair]=False
        close[chair,curtain_instance]=True
        close[curtain_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        # The ID of the book that needs to be placed on the coffee table
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table]==193
        # The ID of the coffee table in the home office where the book should be placed

        move_book_to_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5810, column 9.
Expected one of: 
	* _NEWLINE
	* AT
	* AMPERSAND
	* __ANON_4
	* OR
	* __ANON_3
	* MINUS
	* RSHIFT
	* __ANON_1
	* __ANON_5
	* MORETHAN
	* LESSTHAN
	* __ANON_7
	* IF
	* __ANON_6
	* COMMA
	* VBAR
	* AND
	* __ANON_8
	* __ANON_2
	* PERCENT
	* NOT_EQ
	* LESS_EQ
	* PLUS
	* CIRCUMFLEX
	* GREATER_EQ
	* DOUBLE_EQUAL
	* SLASH
	* EQUAL
	* FLOORDIV
	* __ANON_0
	* LSHIFT
	* STAR
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
def move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table]==193
        
        move_book_to_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5792, column 9.
Expected one of: 
	* _NEWLINE
	* AT
	* AMPERSAND
	* __ANON_4
	* OR
	* __ANON_3
	* MINUS
	* RSHIFT
	* __ANON_1
	* __ANON_5
	* MORETHAN
	* LESSTHAN
	* __ANON_7
	* IF
	* __ANON_6
	* COMMA
	* VBAR
	* AND
	* __ANON_8
	* __ANON_2
	* PERCENT
	* NOT_EQ
	* LESS_EQ
	* PLUS
	* CIRCUMFLEX
	* GREATER_EQ
	* DOUBLE_EQUAL
	* SLASH
	* EQUAL
	* FLOORDIV
	* __ANON_0
	* LSHIFT
	* STAR
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_table_123(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

#goal_representation
 
behavior move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table]==193
        
        move_book_to_coffee_table(book, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)
        
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] == 193
        place_book_on_coffee_table(book, coffee_table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_curtain_294(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==294
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(book,curtain_instance)
        else:
            exp(book,curtain_instance)
    eff:
        unknown[book]=False
        close[book,curtain_instance]=True
        close[curtain_instance,book]=True
    

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def in_home_office(table:item):
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

def is_coffee_table(table:item):
    # You may need additional specific criteria or observations in a real scenario, 
    # but for this example, the coffee table is assumed to be the table the book is on after execution
    # The observation or external marking would handle the real identification to confirm its the coffee table in home office
    # For the sake of this task, assume it meant previous tabletask identifier is correct
    symbol coffee_table = exists o: item : (is_book(o) and on(o, table))
    return coffee_table

behavior put_on_coffee_table_in_home_office(o:item, table:item):
    body:
        achieve_once on(o, table) # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and in_home_office(table) and is_coffee_table(table)
        # Select the coffee table in the home office
        bind book: item where:
            is_book(book) and inside(book, home_office_161)
        # Select the book to be placed on the coffee table
        put_on_coffee_table_in_home_office(book, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office_161; available variables: [Variable<book: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
def in_home_office(table:item):
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

def is_coffee_table(table:item):
    # You may need additional specific criteria or observations in a real scenario, 
    # but for this example, the coffee table is assumed to be the table the book is on after execution
    # The observation or external marking would handle the real identification to confirm its the coffee table in home office
    # For the sake of this task, assume it meant previous tabletask identifier is correct
    symbol coffee_table = exists o: item : (is_book(o) and on(o, table))
    return coffee_table

behavior put_on_coffee_table_in_home_office(o:item, table:item):
    body:
        achieve_once on(o, table) # Place the item on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and in_home_office(table) and is_coffee_table(table)
        # Select the coffee table in the home office
        bind book: item where:
            is_book(book) and inside(book, home_office_161)
        # Select the book to be placed on the coffee table
        put_on_coffee_table_in_home_office(book, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office_161; available variables: [Variable<book: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
def in_home_office(table:item):
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

def is_coffee_table(table:item):
    symbol coffee_table = exists o: item : (is_book(o) and on(o, table))
    return coffee_table

behavior put_on_coffee_table_in_home_office(o:item, table:item):
    body:
        achieve_once on(o, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and in_home_office(table) and is_coffee_table(table)
        bind book: item where:
            is_book(book) and inside(book, table)
        put_on_coffee_table_in_home_office(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_coffee_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        # Book identified with ID 2091
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table]==2068
        # Coffee table is table_2068 in the home office
        place_on_coffee_table(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Find my spectacles and put it on the coffe table in home office. Then find the book and put it on the coffe table in home office.
Action History:
['walk_executor(desk_375)', 'walk_executor(desk_261)', 'walk_executor(table_193)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(kitchen_counter_128)', 'walk_executor(spectacles_2106)', 'grab_executor(spectacles_2106)', 'walk_executor(table_193)', 'put_executor(spectacles_2106, table_193)', 'grab_executor(spectacles_2106)', 'put_executor(spectacles_2106, table_193)', 'grab_executor(spectacles_2106)', 'put_executor(spectacles_2106, table_193)', 'walk_executor(bookshelf_189)', 'open_executor(bookshelf_189)', 'walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)']
Time info:
Time consume: 308 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 45
goal generate times: 15
goal correct times: 7
action_num: 22

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
