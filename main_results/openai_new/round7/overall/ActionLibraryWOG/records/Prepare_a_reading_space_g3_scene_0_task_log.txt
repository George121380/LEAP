From agent.py
Reset goals: The sub-goals are: 
['1. Find a book.', '2. Put the book on the coffee table in the home office.', '3. Open the window in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_book_on_table(book:item):
    # Function to check if a book is on a specified table
    symbol has_book=exists o: item : (is_book(o) and on(o, table))
    return has_book

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and is_home_office(table) and is_book_on_table(book)):
            # If a book is found on the home office table, approach it
            bind table: item where:
                is_table(table) and is_home_office(table) and is_book_on_table(book)
            achieve close_char(char, table)

        else:
            # If no book is on the home office table, search for it in the environment
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Check if the book is here")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: table; available variables: [Variable<book: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2066_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
def is_book_on_table(book:item, table:item):
    # Function to check if a book is on a specified table
    symbol has_book=exists o: item : (is_book(o) and on(o, table))
    return has_book

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and is_home_office(table) and is_book_on_table(book, table)):
            # If a book is found on the home office table, approach it
            bind table: item where:
                is_table(table) and is_home_office(table) and is_book_on_table(book, table)
            achieve close_char(char, table)

        else:
            # If no book is on the home office table, search for it in the environment
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Check if the book is here")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: book; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2066_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
def is_book_on_table(book:item, table:item):
    # Function to check if a book is on a specified table
    symbol has_book=exists o: item : (is_book(o) and on(o, table))
    return has_book

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and is_home_office(table) and is_book_on_table(book, table)):
            # If a book is found on the home office table, approach it
            bind table: item where:
                is_table(table) and is_home_office(table) and is_book_on_table(book, table)
            achieve close_char(char, table)

        else:
            # If no book is found on the home office table, search for it in the environment
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Check if the book is here")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_book_and_unvisited(book:item):
    # Function to check if an item is a book and has not been visited
    symbol is_unvisited_book= is_book(book) and not visited(book)
    return is_unvisited_book

behavior find_book():
    body:
        foreach book: item:
            if is_book_and_unvisited(book):
                observe(book,"Inspect if it is the book we are looking for")
        
behavior __goal__():
    body:
        find_book()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_book_and_unvisited(book:item):
    # Function to check if an item is a book and has not been visited
    symbol is_unvisited_book= is_book(book) and not visited(book)
    return is_unvisited_book

behavior find_book():
    body:
        foreach book: item:
            if is_book_and_unvisited(book):
                observe(book,"Inspect if it is the book we are looking for")
        
behavior __goal__():
    body:
        find_book()

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(book_2066, bookshelf_101)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Inspect if it is the book we are looking for)walk_executor(bookshelf_101)exp(book_2067, bookshelf_101)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Inspect if it is the book we are looking for)
##############################
From agent.py
walk_executor(bookshelf_101)
Robot find: drawing_174, drawing_176, Robot is close to the bookshelf_101. 
##############################
From agent.py
open_executor(bookshelf_101)
Robot find: Robot is close to the photoframe_185. Robot is close to the bookshelf_101. bookshelf_101 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_101)
Fail to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Inspect if it is the book we are looking for)walk_executor(bookshelf_354)exp(book_2067, bookshelf_354)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Inspect if it is the book we are looking for)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Inspect if it is the book we are looking for)walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Inspect if it is the book we are looking for)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
open_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. book_2066 is opened. 
##############################
From agent.py
obs(book_2066, Inspect if it is the book we are looking for)
Get this information:  book_2066 is close to bookshelf_354. book_2066 is close to character_65. book_2066 is on bookshelf_354. book_2066 is inside home_office_319. book_2066 is OPEN.
##############################
From agent.py
walk_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. 
##############################
From agent.py
open_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. book_2067 is opened. 
##############################
From agent.py
obs(book_2067, Inspect if it is the book we are looking for)
Get this information:  book_2067 is close to bookshelf_354. book_2067 is close to character_65. book_2067 is on bookshelf_354. book_2067 is inside home_office_319. book_2067 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_apple_2009_around_fridge_289(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation

behavior place_book_on_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and visited(book)
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        place_book_on_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior place_book_on_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and visited(book)
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        place_book_on_table(book, coffee_table)

##############################
Goal representation from planning.py

#exp_behavior

behavior find_drawing_243_around_drawing_403(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==403
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2067 # Assuming book_2067 is the book identified
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office) # Locate the coffee table in the home office
        put_on_table(book, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_wall_clock_249_around_wallshelf_35(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#goal_representation
 
behavior put_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2067 # Assuming book_2067 is the book identified
        bind home_office: item where:
            is_home_office(home_office) # Declaratively bind home_office
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office) # Locate the coffee table in the home office
        put_on_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2067 # Assuming book_2067 is the book identified
        bind home_office: item where:
            is_home_office(home_office) # Declaratively bind home_office
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office) # Locate the coffee table in the home office
        put_on_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
grab_executor(book_2067)walk_executor(coffee_table_2068)put_executor(book_2067, coffee_table_2068)
##############################
From agent.py
grab_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. Grabbing book_2067 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2067. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2067, coffee_table_2068)
Robot find: Robot is close to the book_2067. Robot is close to the coffee_table_2068. coffee_table_2068 is close book_2067. book_2067 is close coffee_table_2068. book_2067 is on coffee_table_2068. book_2067 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior open_home_office_window(window:item, home_office:item):
    body:
        achieve_once open(window) # Open the window

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window inside the home office

        open_home_office_window(window, home_office)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior open_home_office_window(window:item, home_office:item):
    body:
        achieve_once open(window) # Open the window

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window inside the home office

        open_home_office_window(window, home_office)

##############################
From agent.py-> find a plan in act()
walk_executor(window_348)open_executor(window_348)
##############################
From agent.py
walk_executor(window_348)
Robot find: drawing_400, mat_401, pillow_405, Robot is close to the window_348. 
##############################
From agent.py
open_executor(window_348)
Robot find: Robot is close to the window_348. window_348 is opened. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find a book and put it on the coffe table in home office. Then open the window in the home office.
Action History:
['walk_executor(bookshelf_101)', 'open_executor(bookshelf_101)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'open_executor(book_2066)', 'walk_executor(book_2067)', 'open_executor(book_2067)', 'grab_executor(book_2067)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2067, coffee_table_2068)', 'walk_executor(window_348)', 'open_executor(window_348)']
Time info:
Time consume: 117 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 7
goal generate times: 5
goal correct times: 1
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
