From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash a lemon.', '2. Cut the lemon into slices.', '3. Boil water and pour it into a cup.', '4. Add lemon slices and sugar into the cup and mix.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_lemon(lemon:item):
    body:
        observe(lemon, "Check if it is dirty")
        if dirty(lemon):
            wash(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        find_and_wash_lemon(lemon)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_wash_lemon(lemon:item):
    body:
        observe(lemon, "Check if it is dirty")
        if dirty(lemon):
            wash(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        find_and_wash_lemon(lemon)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_lemon_2028, fridge_289)walk_executor(food_lemon_2028)obs(food_lemon_2028, Check if it is dirty)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_lemon_2028, fridge_289)
Find food_lemon_2028. 
##############################
From agent.py-> find a plan in act()
obs(food_lemon_2028, Check if it is dirty)
##############################
From agent.py
obs(food_lemon_2028, Check if it is dirty)
Get this information:  food_lemon_2028 is close to fridge_289. food_lemon_2028 is close to character_65. food_lemon_2028 is inside fridge_289. food_lemon_2028 is inside dining_room_201. food_lemon_2028 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_lemon(lemon: item, board: item):
    body:
        achieve_once on(lemon, board)
        # Place the lemon on the cutting board
        achieve cut(lemon)
        # Cut the lemon into slices

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon for cutting

        bind board: item where:
            is_cutting_board(board)
        # Select a cutting board for cutting the lemon

        cut_lemon(lemon, board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cut_lemon(lemon: item, board: item):
    body:
        achieve_once on(lemon, board)
        # Place the lemon on the cutting board
        achieve cut(lemon)
        # Cut the lemon into slices

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon for cutting

        bind board: item where:
            is_cutting_board(board)
        # Select a cutting board for cutting the lemon

        cut_lemon(lemon, board)

##############################
From agent.py-> find a plan in act()
grab_executor(food_lemon_2028)walk_executor(cutting_board_2051)put_executor(food_lemon_2028, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_lemon_2028)cut_executor(food_lemon_2028)
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_lemon_2028 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_lemon_2028, cutting_board_2051)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_lemon_2028. food_lemon_2028 is close cutting_board_2051. food_lemon_2028 is on cutting_board_2051. food_lemon_2028 released by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(knife_2050, kitchen_counter_230)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_lemon_2028)cut_executor(food_lemon_2028)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
cut_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior boil_water_and_pour(cup:item, stove:item, faucet:item):
    body:
        achieve has_water(cup)
        achieve_once inside(cup, pot)
        achieve_once is_on(stove)

behavior close_the_stove(stove:item):
    body:
        achieve_once is_off(stove)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        boil_water_and_pour(cup, stove, faucet)
        close_the_stove(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<cup: item>, Variable<stove: item>, Variable<faucet: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#goal_representation

behavior boil_water_and_pour(cup:item, stove:item, faucet:item, pot:item):
    body:
        achieve has_water(cup)
        achieve_once inside(cup, pot)
        achieve_once is_on(stove)

behavior close_the_stove(stove:item):
    body:
        achieve_once is_off(stove)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        bind pot: item where:
            is_pot(pot)
        boil_water_and_pour(cup, stove, faucet, pot)
        close_the_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior boil_water_and_pour(cup:item, stove:item, faucet:item, pot:item):
    body:
        achieve has_water(cup)
        achieve_once inside(cup, pot)
        achieve_once is_on(stove)

behavior close_the_stove(stove:item):
    body:
        achieve_once is_off(stove)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        bind pot: item where:
            is_pot(pot)
        boil_water_and_pour(cup, stove, faucet, pot)
        close_the_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(pot_2069)open_executor(pot_2069)putin_executor(cup_2063, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)switchoff_executor(stove_2065)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_couch_352(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_usable_pot(pot:item):
    return is_pot(pot) and open(pot)

def is_clean_faucet(faucet:item):
    return is_faucet(faucet) and is_off(faucet) and clean(faucet)

behavior boil_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior pour_water_into_cup(pot:item, cup:item):
    body:
        achieve inside(cup, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_usable_pot(pot) and id[pot] == 2069
        bind faucet: item where:
            is_clean_faucet(faucet) and id[faucet] == 43
        foreach cup: item:
            if is_cup(cup):
                boil_water(pot, faucet)
                pour_water_into_cup(pot, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation

behavior __heat_water__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        bind pot: item where:
            is_pot(pot)

        achieve has_water(pot)
        # Fill the pot with water from the faucet

        bind stove: item where:
            is_stove(stove)
        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the water

behavior __goal__():
    body:
        __heat_water__()

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior __heat_water__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        bind pot: item where:
            is_pot(pot)

        achieve has_water(pot)
        # Fill the pot with water from the faucet

        bind stove: item where:
            is_stove(stove)
        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the water

behavior __goal__():
    body:
        __heat_water__()

##############################
From agent.py-> find a plan in act()
put_executor(cup_2063, kitchen_counter_230)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
put_executor(cup_2063, kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. cup_2063 is close kitchen_counter_230. cup_2063 is on kitchen_counter_230. cup_2063 released by left hand. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to pour the boiled water from the pot into a cup. This involves switching off the stove, grabbing the pot, and pouring the contents into the cup.
##############################
From agent.py
Human Instruction: You need to pour the boiled water from the pot into a cup. This involves switching off the stove, grabbing the pot, and pouring the contents into the cup.

Trial and Error: You can not open pot_2069
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_lemon_2028 around fridge_289.
Action 5: Observe around food_lemon_2028 with the question of Check if it is dirty.
Action 6: Grab food_lemon_2028.
Action 7: Walk to cutting_board_2051.
Action 8: Put food_lemon_2028 on cutting_board_2051.
Action 9: Walk to kitchen_counter_230.
Action 10: look for knife_2050 around kitchen_counter_230.
Action 11: Walk to knife_2050.
Action 12: Grab knife_2050.
Action 13: Walk to food_lemon_2028.
Action 14: Cut food_lemon_2028.
Action 15: Walk to cup_2063.
Action 16: Grab cup_2063.
Action 17: Walk to faucet_43.
Action 18: Switch on faucet_43.
Action 19: Switch off faucet_43.
Action 20: Walk to pot_2069.
Action 21: Put cup_2063 on kitchen_counter_230.
Action 22: Open pot_2069.
Action 23: Grab pot_2069.
Action 24: Walk to faucet_43.
Action 25: Switch on faucet_43.
Action 26: Switch off faucet_43.
Action 27: Walk to stove_2065.
Action 28: Put pot_2069 on stove_2065.
Action 29: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_140_around_closetdrawer_384(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_clothes_hat_2045_around_basket_for_clothes_2006(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
def has_water_in_pot(pot:item):
    # Check if the pot has water
    symbol has_water=has_water(pot)
    return has_water

behavior boil_water(pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once on(pot, stove) # Place the pot on the stove

behavior pour_water_into_cup(pot:item, cup:item):
    body:
        achieve_once has_water(cup) # Pour water from the pot into the cup

behavior turn_off_stove(stove:item):
    body:
        achieve_once is_off(stove) # Turn off the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water_in_pot(pot)
        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        bind cup: item where:
            is_cup(cup)

        boil_water(pot, stove)
        turn_off_stove(stove)
        pour_water_into_cup(pot, cup)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
def has_water_in_pot(pot:item):
    # Check if the pot has water
    symbol has_water=has_water(pot)
    return has_water

behavior boil_water(pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once on(pot, stove) # Place the pot on the stove

behavior pour_water_into_cup(pot:item, cup:item):
    body:
        achieve_once has_water(cup) # Pour water from the pot into the cup

behavior turn_off_stove(stove:item):
    body:
        achieve_once is_off(stove) # Turn off the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water_in_pot(pot)
        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        bind cup: item where:
            is_cup(cup)

        boil_water(pot, stove)
        turn_off_stove(stove)
        pour_water_into_cup(pot, cup)
##############################
From agent.py-> find a plan in act()
switchoff_executor(stove_2065)
##############################
From agent.py
switchoff_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to grab the pot and pour its contents into the cup to complete the task of boiling water and pouring it into a cup.
##############################
From agent.py
Human Instruction: You need to grab the pot and pour its contents into the cup to complete the task of boiling water and pouring it into a cup.

Trial and Error: You can not open pot_2069
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_lemon_2028 around fridge_289.
Action 5: Observe around food_lemon_2028 with the question of Check if it is dirty.
Action 6: Grab food_lemon_2028.
Action 7: Walk to cutting_board_2051.
Action 8: Put food_lemon_2028 on cutting_board_2051.
Action 9: Walk to kitchen_counter_230.
Action 10: look for knife_2050 around kitchen_counter_230.
Action 11: Walk to knife_2050.
Action 12: Grab knife_2050.
Action 13: Walk to food_lemon_2028.
Action 14: Cut food_lemon_2028.
Action 15: Walk to cup_2063.
Action 16: Grab cup_2063.
Action 17: Walk to faucet_43.
Action 18: Switch on faucet_43.
Action 19: Switch off faucet_43.
Action 20: Walk to pot_2069.
Action 21: Put cup_2063 on kitchen_counter_230.
Action 22: Open pot_2069.
Action 23: Grab pot_2069.
Action 24: Walk to faucet_43.
Action 25: Switch on faucet_43.
Action 26: Switch off faucet_43.
Action 27: Walk to stove_2065.
Action 28: Put pot_2069 on stove_2065.
Action 29: Switch on stove_2065.
Action 30: Switch off stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_water_and_pour_in_cup(pot:item, cup:item, stove: item, faucet: item):
    body:
        achieve_once close_char(char, pot)
        # Ensure the character is close to the pot for manipulation
        achieve open(pot)
        # Ensure the pot is open for filling
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet to fill pot
        achieve is_on(faucet)
        # Turn on the faucet to fill water in pot
        achieve_once has_water(pot)
        # Fill the pot with water
        achieve is_off(faucet)
        # Turn off the faucet after filling the pot
        achieve_once close_char(char, stove)
        # Ensure the character is close to the stove
        achieve is_on(stove)
        # Turn on the stove to boil water in pot
        achieve_once has_water(cup)
        # Pour boiled water into the cup
    return

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
            # Identify the pot by its ID
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
            # Identify the cup by its ID
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
            # Identify the faucet by its ID
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
            # Identify the stove by its ID
        boil_water_and_pour_in_cup(pot, cup, stove, faucet)
        # Execute the behavior to boil water and pour it into the cup

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('RETURN', 'return') at line 5825, column 5.
Expected one of: 
	* GOAL
	* EFF
	* MINIMIZE
	* BODY
	* HEURISTIC
	* _DEDENT

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_103_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#goal_representation
behavior boil_water_and_pour_in_cup(pot:item, cup:item, stove: item, faucet: item):
    body:
        achieve_once close_char(char, pot)
        # Ensure the character is close to the pot for manipulation
        achieve open(pot)
        # Ensure the pot is open for filling
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet to fill pot
        achieve is_on(faucet)
        # Turn on the faucet to fill water in pot
        achieve_once has_water(pot)
        # Fill the pot with water
        achieve is_off(faucet)
        # Turn off the faucet after filling the pot
        achieve_once close_char(char, stove)
        # Ensure the character is close to the stove
        achieve is_on(stove)
        # Turn on the stove to boil water in pot
        achieve has_water(cup)
        # Pour boiled water into the cup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
            # Identify the pot by its ID
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
            # Identify the cup by its ID
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
            # Identify the faucet by its ID
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
            # Identify the stove by its ID
        boil_water_and_pour_in_cup(pot, cup, stove, faucet)
        # Execute the behavior to boil water and pour it into the cup
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_clothes_hat_2045_around_basket_for_clothes_2006(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
behavior boil_water_and_pour_into_cup(pot: item, stove: item):
    body:
        achieve_once is_on(stove)
        achieve has_water(pot)
        achieve_once inside(pot, stove)
        achieve_once is_off(stove)

behavior pour_water_into_cup(pot: item, cup: item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that already has water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the water with the pot

        bind cup: item where:
            is_cup(cup)
        # Select a cup for pouring water

        boil_water_and_pour_into_cup(pot, stove)
        pour_water_into_cup(pot, cup)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior boil_water_and_pour_into_cup(pot: item, stove: item):
    body:
        achieve_once is_on(stove)
        achieve has_water(pot)
        achieve_once inside(pot, stove)
        achieve_once is_off(stove)

behavior pour_water_into_cup(pot: item, cup: item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that already has water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the water with the pot

        bind cup: item where:
            is_cup(cup)
        # Select a cup for pouring water

        boil_water_and_pour_into_cup(pot, stove)
        pour_water_into_cup(pot, cup)
##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2065)switchoff_executor(stove_2065)open_executor(stove_2065)grab_executor(pot_2069)putin_executor(pot_2069, stove_2065)
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
switchoff_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned off. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by left hand. 
##############################
From agent.py
putin_executor(pot_2069, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is inside stove_2065. pot_2069 is close stove_2065. pot_2069 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to pour the water from the pot into the cup. The robot has boiled the water in the pot, but it has not yet poured the boiling water into the cup to complete the task.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_basket_for_clothes_2006(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_jacket,basket_for_clothes_instance)
        else:
            exp(clothes_jacket,basket_for_clothes_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
def lemon_slices_in_cup(cup:item, lemon:item):
    # Add lemon slices to the cup
    achieve_once inside(lemon, cup)

def sugar_in_cup(cup:item, sugar:item):
    # Add sugar to the cup
    achieve_once inside(sugar, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind lemon_slices: item where:
            is_food_lemon(lemon_slices) and cut(lemon_slices)
        # Select lemon slices

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        lemon_slices_in_cup(cup, lemon_slices)
        sugar_in_cup(cup, sugar)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_384(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#goal_representation
 
behavior lemon_slices_in_cup(cup:item, lemon:item):
    body:
        achieve_once inside(lemon, cup)

behavior sugar_in_cup(cup:item, sugar:item):
    body:
        achieve_once inside(sugar, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind lemon_slices: item where:
            is_food_lemon(lemon_slices) and cut(lemon_slices)
        # Select lemon slices

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        lemon_slices_in_cup(cup, lemon_slices)
        sugar_in_cup(cup, sugar)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior lemon_slices_in_cup(cup:item, lemon:item):
    body:
        achieve_once inside(lemon, cup)

behavior sugar_in_cup(cup:item, sugar:item):
    body:
        achieve_once inside(sugar, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind lemon_slices: item where:
            is_food_lemon(lemon_slices) and cut(lemon_slices)
        # Select lemon slices

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        lemon_slices_in_cup(cup, lemon_slices)
        sugar_in_cup(cup, sugar)

##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(cup_2063)putin_executor(food_lemon_2028, cup_2063)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by left hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_lemon_2028, cup_2063)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. cup_2063 is close food_lemon_2028. food_lemon_2028 is close cup_2063. food_lemon_2028 is inside cup_2063. food_lemon_2028 released by left hand. 
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_sugar_2039. 
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_sugar_2039. Grabbing food_sugar_2039 by left hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the knife_2050. Robot is close to the food_sugar_2039. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_sugar_2039, cup_2063)
Robot find: Robot is close to the knife_2050. Robot is close to the food_sugar_2039. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. cup_2063 is close food_sugar_2039. food_sugar_2039 is close cup_2063. food_sugar_2039 is inside cup_2063. food_sugar_2039 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a cup of lemon water with additional sugar.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_lemon_2028)', 'walk_executor(cutting_board_2051)', 'put_executor(food_lemon_2028, cutting_board_2051)', 'walk_executor(kitchen_counter_230)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_lemon_2028)', 'cut_executor(food_lemon_2028)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(pot_2069)', 'open_executor(pot_2069) (Failed)', 'put_executor(cup_2063, kitchen_counter_230)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'switchoff_executor(stove_2065)', 'switchon_executor(stove_2065)', 'switchoff_executor(stove_2065)', 'open_executor(stove_2065)', 'grab_executor(pot_2069)', 'putin_executor(pot_2069, stove_2065)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(cup_2063)', 'putin_executor(food_lemon_2028, cup_2063)', 'walk_executor(food_sugar_2039)', 'grab_executor(food_sugar_2039)', 'walk_executor(cup_2063)', 'putin_executor(food_sugar_2039, cup_2063)']
Time info:
Time consume: 204 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 73
goal generate times: 9
goal correct times: 2
action_num: 41

Task complete rate:
1
Scene_id: 0
##############################
