From agent.py
Reset goals: The sub-goals are: 
['1. Boil and peel the eggs.', '2. Wash and cut the vegetables.', '3. Squeeze the lemon and mix all ingredients in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_eggs(eggs:item, stove:item, pot:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water
        achieve_once inside(eggs, pot)
        # Place the eggs inside the pot filled with water
        achieve_once on(pot, stove)
        # Place the pot onto the stove
        achieve is_on(stove)
        # Turn on the stove to boil the eggs until they are finished

behavior peel_eggs(eggs:item):
    body:
        achieve clean(eggs)
        # Peel the boiled eggs until they are clean

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Choose a stove for boiling

        bind pot: item where:
            is_pot(pot)
        # Choose a pot for boiling

        bind eggs: item where:
            is_food_egg(eggs)
        # Choose eggs to boil

        boil_eggs(eggs, stove, pot)
        peel_eggs(eggs)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_eggs(eggs:item, stove:item, pot:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water
        achieve_once inside(eggs, pot)
        # Place the eggs inside the pot filled with water
        achieve_once on(pot, stove)
        # Place the pot onto the stove
        achieve is_on(stove)
        # Turn on the stove to boil the eggs until they are finished

behavior peel_eggs(eggs:item):
    body:
        achieve clean(eggs)
        # Peel the boiled eggs until they are clean

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Choose a stove for boiling

        bind pot: item where:
            is_pot(pot)
        # Choose a pot for boiling

        bind eggs: item where:
            is_food_egg(eggs)
        # Choose eggs to boil

        boil_eggs(eggs, stove, pot)
        peel_eggs(eggs)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_egg_2020)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(pot_2069, cupboard_229)
Fail to find pot_2069 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_egg_2020)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_egg_2020)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2020, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. pot_2069 is close food_egg_2020. food_egg_2020 is inside pot_2069. food_egg_2020 is close pot_2069. food_egg_2020 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have boiled the eggs by placing them in a pot with water on the stove and turning the stove on. However, you still need to peel the boiled eggs to complete the sub-task.
##############################
From agent.py
Human Instruction: You have boiled the eggs by placing them in a pot with water on the stove and turning the stove on. However, you still need to peel the boiled eggs to complete the sub-task.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to stove_2065.
Action 5: Open stove_2065.
Action 6: look for pot_2069 around stove_2065.
Action 7: Walk to pot_2069.
Action 8: Open pot_2069.
Action 9: Grab pot_2069.
Action 10: Walk to faucet_43.
Action 11: Switch on faucet_43.
Action 12: Switch off faucet_43.
Action 13: Walk to fridge_289.
Action 14: Switch off fridge_289.
Action 15: Open fridge_289.
Action 16: look for food_egg_2020 around fridge_289.
Action 17: Grab food_egg_2020.
Action 18: Put food_egg_2020 into pot_2069.
Action 19: Walk to stove_2065.
Action 20: Put pot_2069 on stove_2065.
Action 21: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_boiled(food_egg:item):
    symbol boiled=exists s: item : (is_stove(s) and on(food_egg, s) and is_on(s))
    return boiled

def selected_eggs(egg_id:int):
    return id[egg_1]==egg_id or id[egg_2]==egg_id

behavior peel_egg(egg:item):
    body:
        achieve clean(egg)

behavior __goal__():
    body:
        bind egg_1: item where:
            is_food_egg(egg_1) and inside(egg_1, pot_2069)
        bind egg_2: item where:
            is_food_egg(egg_2) and inside(egg_2, pot_2069) and not selected_eggs(id[egg_2])
        
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        
        observe(pot, "Check if eggs are boiled")
        
        if is_boiled(egg_1) and is_boiled(egg_2):
            peel_egg(egg_1)
            peel_egg(egg_2)
        else:
            achieve on(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "typed_argument":

Unknown type: int, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#goal_representation
 
def is_boiled(food_egg:item):
    symbol boiled=exists s: item : (is_stove(s) and on(food_egg, s) and is_on(s))
    return boiled

def selected_eggs(egg_id:id):
    return id[egg_1]==egg_id or id[egg_2]==egg_id

behavior peel_egg(egg:item):
    body:
        achieve clean(egg)

behavior __goal__():
    body:
        bind egg_1: item where:
            is_food_egg(egg_1) and inside(egg_1, pot_2069)
        bind egg_2: item where:
            is_food_egg(egg_2) and inside(egg_2, pot_2069) and not selected_eggs(id[egg_2])
        
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        
        observe(pot, "Check if eggs are boiled")
        
        if is_boiled(egg_1) and is_boiled(egg_2):
            peel_egg(egg_1)
            peel_egg(egg_2)
        else:
            achieve on(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: egg_1; available variables: [Variable<egg_id: id>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_fork_2081_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

#goal_representation
 
def is_boiled(food_egg:item):
    symbol boiled=exists s: item : (is_stove(s) and on(food_egg, s) and is_on(s))
    return boiled

def selected_eggs(egg_id:id):
    return id[egg_1]==egg_id or id[egg_2]==egg_id

behavior peel_egg(egg:item):
    body:
        achieve clean(egg)

behavior __goal__():
    body:
        bind egg_1: item where:
            is_food_egg(egg_1) and inside(egg_1, pot_2069)
        bind egg_2: item where:
            is_food_egg(egg_2) and inside(egg_2, pot_2069) and id[egg_1] = id[egg_2]
        
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        
        observe(pot, "Check if eggs are boiled")
        
        if is_boiled(egg_1) and is_boiled(egg_2):
            peel_egg(egg_1)
            peel_egg(egg_2)
        else:
            achieve on(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior boil_eggs(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot to boil

    achieve_once on(pot, stove)
    # Place the pot on the stove to boil the eggs

    achieve is_on(stove)
    # Turn the stove on to boil the eggs

    achieve is_off(stove)
    # Turn the stove off after boiling

behavior peel_eggs(egg:item):
    body:
        achieve_once open(egg)
        # Peel the boiled egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water inside

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_eggs(egg, pot, stove)
        peel_eggs(egg)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('ACHIEVE_ONCE', 'achieve_once') at line 5787, column 5.
Expected one of: 
	* GOAL
	* EFF
	* HEURISTIC
	* _DEDENT
	* BODY
	* MINIMIZE

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior boil_eggs(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot to boil

        achieve_once on(pot, stove)
        # Place the pot on the stove to boil the eggs

        achieve is_on(stove)
        # Turn the stove on to boil the eggs

        achieve_once is_off(stove)
        # Turn the stove off after boiling

behavior peel_eggs(egg:item):
    body:
        achieve_once open(egg)
        # Peel the boiled egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water inside

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_eggs(egg, pot, stove)
        peel_eggs(egg)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_bowl_2072_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_boiled_egg_in_pot(pot:item):
    # Function to check if there is a boiled egg in the specified pot
    symbol boiled_egg=exists o: item : (is_food_egg(o) and inside(o, pot))
    return boiled_egg

behavior peel_boiled_eggs(egg:item):
    body:
        achieve cut(egg) # This indicates starting to peel the boiled egg

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select stove with ID 2065

        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select pot on the stove

        if has_boiled_egg_in_pot(pot):
            # If there is a boiled egg in the pot, retrieve and peel it
            foreach egg: item:
                if is_food_egg(egg) and inside(egg, pot):
                    achieve_once inhand(egg)
                    peel_boiled_eggs(egg)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_boiled_egg_in_pot(pot:item):
    # Function to check if there is a boiled egg in the specified pot
    symbol boiled_egg=exists o: item : (is_food_egg(o) and inside(o, pot))
    return boiled_egg

behavior peel_boiled_eggs(egg:item):
    body:
        achieve cut(egg) # This indicates starting to peel the boiled egg

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select stove with ID 2065

        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select pot on the stove

        if has_boiled_egg_in_pot(pot):
            # If there is a boiled egg in the pot, retrieve and peel it
            foreach egg: item:
                if is_food_egg(egg) and inside(egg, pot):
                    achieve_once inhand(egg)
                    peel_boiled_eggs(egg)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the pot_2069. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the pot_2069. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, cutting_board_2051)
Robot find: Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_egg_2020. food_egg_2020 is close cutting_board_2051. food_egg_2020 is on cutting_board_2051. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
cut_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have boiled the eggs by placing them in a pot with water on the stove and turning the stove on. However, you still need to peel the boiled eggs to complete the sub-task.
##############################
From agent.py
Human Instruction: You have boiled the eggs by placing them in a pot with water on the stove and turning the stove on. However, you still need to peel the boiled eggs to complete the sub-task.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to stove_2065.
Action 5: Open stove_2065.
Action 6: look for pot_2069 around stove_2065.
Action 7: Walk to pot_2069.
Action 8: Open pot_2069.
Action 9: Grab pot_2069.
Action 10: Walk to faucet_43.
Action 11: Switch on faucet_43.
Action 12: Switch off faucet_43.
Action 13: Walk to fridge_289.
Action 14: Switch off fridge_289.
Action 15: Open fridge_289.
Action 16: look for food_egg_2020 around fridge_289.
Action 17: Grab food_egg_2020.
Action 18: Put food_egg_2020 into pot_2069.
Action 19: Walk to stove_2065.
Action 20: Put pot_2069 on stove_2065.
Action 21: Switch on stove_2065.
Action 22: Walk to food_egg_2020.
Action 23: Grab food_egg_2020.
Action 24: Walk to cutting_board_2051.
Action 25: Put food_egg_2020 on cutting_board_2051.
Action 26: Walk to knife_2050.
Action 27: Grab knife_2050.
Action 28: Walk to food_egg_2020.
Action 29: Cut food_egg_2020.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg():
    body:
        achieve has_water(pot_2069)
        achieve is_on(stove_2065)
        achieve_once inside(food_egg_2020, pot_2069)
        achieve_once is_off(stove_2065)
        # Ensure there is water in the pot, stove is on, egg is inside pot, and then turn off the stove

behavior peel_egg():
    body:
        # To peel the boiled egg, transition it to appropriate conditions
        achieve_once inhand(food_egg_2020)
        achieve cut(food_egg_2020)
        # Grabs the egg to peel, cut to remove the peel
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        bind egg: item where:
            is_food_egg(egg) and id[egg]==2020
        
        boil_egg()
        peel_egg()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot_2069; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#goal_representation
 
behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve has_water(pot)
        achieve is_on(stove)
        achieve_once inside(egg, pot)
        achieve_once is_off(stove)
        # Ensure there is water in the pot, stove is on, egg is inside pot, and then turn off the stove

behavior peel_egg(egg:item):
    body:
        # To peel the boiled egg, transition it to appropriate conditions
        achieve_once inhand(egg)
        achieve cut(egg)
        # Grabs the egg to peel, cut to remove the peel
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        bind egg: item where:
            is_food_egg(egg) and id[egg]==2020
        
        boil_egg(pot, stove, egg)
        peel_egg(egg)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_dishwasher_1001(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

behavior find_bowl_2072_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior boil_eggs(pot:item, eggs:item, stove:item):
    body:
        achieve has_water(pot) 
        # Ensure the pot is filled with water
        achieve_once inside(eggs, pot)
        # Place the eggs into the pot for boiling
        achieve_once on(pot, stove)
        # Put the pot on the stove for boiling
        achieve is_on(stove)
        # Turn on the stove to boil the eggs

behavior peel_egg(egg:item):
    body:
        achieve cut(egg)
        # Slice or peel the boiled egg

behavior __goal__():
    body:
        bind pot_2069: item where:
            is_pot(pot_2069) and id[pot_2069] == 2069
        # Select the pot with ID 2069

        bind eggs: item where:
            is_food_egg(eggs) and id[eggs] == 2020
        # Select the eggs with ID 2020
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        boil_eggs(pot_2069, eggs, stove)
        # Boil the eggs
        
        peel_egg(eggs)
        # Peel the boiled eggs

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior boil_eggs(pot:item, eggs:item, stove:item):
    body:
        achieve has_water(pot) 
        # Ensure the pot is filled with water
        achieve_once inside(eggs, pot)
        # Place the eggs into the pot for boiling
        achieve_once on(pot, stove)
        # Put the pot on the stove for boiling
        achieve is_on(stove)
        # Turn on the stove to boil the eggs

behavior peel_egg(egg:item):
    body:
        achieve cut(egg)
        # Slice or peel the boiled egg

behavior __goal__():
    body:
        bind pot_2069: item where:
            is_pot(pot_2069) and id[pot_2069] == 2069
        # Select the pot with ID 2069

        bind eggs: item where:
            is_food_egg(eggs) and id[eggs] == 2020
        # Select the eggs with ID 2020
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        boil_eggs(pot_2069, eggs, stove)
        # Boil the eggs
        
        peel_egg(eggs)
        # Peel the boiled eggs

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_egg_2020, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the pot_2069. pot_2069 is close food_egg_2020. food_egg_2020 is inside pot_2069. food_egg_2020 is close pot_2069. food_egg_2020 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have successfully boiled the eggs by placing them in a pot with water on the stove and turning the stove on. However, you still need to peel the boiled eggs to complete the sub-task.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_bookshelf_354(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cd_player,bookshelf_instance)
        else:
            exp(cd_player,bookshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,bookshelf_instance]=True
        close[bookshelf_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
def needs_washing(vegetable:item):
    # Function to check if the vegetable is dirty and needs washing
    symbol is_dirty=dirty(vegetable)
    return is_dirty

def is_cuttable(vegetable:item):
    # Function to check if the vegetable can be cut
    symbol can_cut=cuttable(vegetable)
    return can_cut

behavior wash_and_cut_vegetables(vegetable:item, sink:item, cutting_board:item):
    body:
        if needs_washing(vegetable):
            # If the vegetable is dirty, wash it first
            achieve_once clean(vegetable)
        
        if is_cuttable(vegetable):
            # Place the cuttable vegetable on the cutting board
            achieve_once on(vegetable, cutting_board)
            achieve_once cut(vegetable)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select cutting board to use for cutting
        
        foreach vegetable: item:
            # Identify and handle each vegetable that needs washing and cutting
            if is_food_vegetable(vegetable) and needs_washing(vegetable) and not visited(vegetable):
                observe(vegetable,"Check if this vegetable is dirty and needs cutting")
                # Observe to identify if the vegetable is dirty and cuttable
                
            bind sink: item where:
                is_sink(sink) and has_water(sink)
            # Select the sink for washing

            wash_and_cut_vegetables(vegetable, sink, cutting_board)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_sink_231(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(mat,sink_instance)
        else:
            exp(mat,sink_instance)
    eff:
        unknown[mat]=False
        close[mat,sink_instance]=True
        close[sink_instance,mat]=True
    

behavior find_towel_2059_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_fork_2081_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior wash_and_cut_vegetable(vegetable:item, cutting_board:item, knife:item):
    # Behavior to wash and cut the vegetables
    body:
        achieve clean(vegetable) # Wash the vegetable to ensure its clean
        achieve_once on(vegetable, cutting_board) # Place the vegetable on the cutting board
        achieve_once inhand(knife) 
        achieve cut(vegetable) # Cut the vegetable on the cutting board

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        wash_and_cut_vegetable(vegetable, cutting_board, knife)
        # Invoke behavior to wash and cut the vegetable
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior wash_and_cut_vegetable(vegetable:item, cutting_board:item, knife:item):
    # Behavior to wash and cut the vegetables
    body:
        achieve clean(vegetable) # Wash the vegetable to ensure its clean
        achieve_once on(vegetable, cutting_board) # Place the vegetable on the cutting board
        achieve_once inhand(knife) 
        achieve cut(vegetable) # Cut the vegetable on the cutting board

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        wash_and_cut_vegetable(vegetable, cutting_board, knife)
        # Invoke behavior to wash and cut the vegetable
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_vegetable_2041. food_vegetable_2041 is close cutting_board_2051. food_vegetable_2041 is on cutting_board_2051. food_vegetable_2041 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon(lemon:item):
    body:
        achieve_once inhand(lemon)
        achieve_once on(lemon, bowl)
        achieve open(bowl)
        achieve inside(lemon, bowl)
        squeeze(lemon)
        achieve cut(lemon)  # Assuming the lemon needs to be cut to be squeezed

behavior mix_ingredients(ingredients: list, bowl: item):
    body:
        foreach ingredient: item in ingredients:
            achieve_once inside(ingredient, bowl)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and not cut(lemon) # Ensure lemon is not already cut
        # Ensure we have a lemon available
        
        bind bowl: item where:
            is_bowl(bowl)
            
        foreach ingredient: item:
            if (is_food_egg(ingredient) or is_food_vegetable(ingredient)) and cut(ingredient):
                achieve_once inside(ingredient, bowl)
                # Include eggs and vegetables that have been cut in the bowl

        squeeze_lemon(lemon)
        mix_ingredients([food_egg_2020, food_vegetable_2041], bowl)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5818, column 34.
Expected one of: 
	* COMMA
	* LSQB
	* COLON
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#goal_representation
 
behavior squeeze_lemon(lemon:item):
    body:
        achieve_once inhand(lemon)
        achieve open(lemon)
        achieve cut(lemon) # Ensure the lemon is cut for squeezing
        squeeze(lemon)

behavior mix_ingredients(ingredients: list, bowl: item):
    body:
        foreach ingredient: item in ingredients:
            achieve_once inside(ingredient, bowl)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and not cut(lemon)
        
        bind bowl: item where:
            is_bowl(bowl)
        
        foreach ingredient: item:
            if (is_food_egg(ingredient) or is_food_vegetable(ingredient)) and cut(ingredient):
                achieve_once inside(ingredient, bowl)

        squeeze_lemon(lemon)
        mix_ingredients([food_egg_2020, food_vegetable_2041], bowl)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5816, column 34.
Expected one of: 
	* COMMA
	* LSQB
	* COLON
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#goal_representation
 
behavior squeeze_lemon(lemon:item):
    body:
        achieve_once inhand(lemon)
        achieve open(lemon)
        achieve cut(lemon) # Ensure the lemon is cut for squeezing
        squeeze(lemon)

behavior mix_ingredients(ingredients: list, bowl: item):
    body:
        foreach ingredient: item in ingredients:
            achieve_once inside(ingredient, bowl)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and not cut(lemon)
        
        bind bowl: item where:
            is_bowl(bowl)
        
        foreach ingredient: item:
            if (is_food_egg(ingredient) or is_food_vegetable(ingredient)) and cut(ingredient):
                achieve_once inside(ingredient, bowl)

        squeeze_lemon(lemon)
        mix_ingredients([food_egg_2020, food_vegetable_2041, lemon], bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_all_ingredients(bowl:item):
    body:
        achieve_once inside_char(char, bowl)
        # Ensure the character is close to the bowl to mix the ingredients and squeeze the lemon
        achieve_once open(bowl)
        # Ensure the bowl is open for mixing ingredients

behavior squeeze_lemon(lemon:item):
    body:
        achieve_once inhand(lemon)
        # Temporarily hold the lemon
        squeeze(lemon) 
        # Squeeze the lemon

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and on(bowl, is_kitchen_counter(bowl))
        # Select a bowl on the kitchen counter
        
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select the cut eggs

        mix_all_ingredients(bowl)

        foreach ingredient: item:
            if ingredient == lemon:
                squeeze_lemon(lemon)
            else if inside(ingredient, is_pot(ingredient)) or inside(ingredient, is_cutting_board(ingredient)):
                achieve_once inside(ingredient, bowl)
                # Add ingredient into the bowl

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IF', 'if') at line 5844, column 18.
Expected one of: 
	* COLON
Previous tokens: [Token('ELSE', 'else')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#goal_representation
 
behavior mix_all_ingredients(bowl:item):
    body:
        achieve_once inside_char(char, bowl)
        # Ensure the character is close to the bowl to mix the ingredients and squeeze the lemon
        achieve_once open(bowl)
        # Ensure the bowl is open for mixing ingredients

behavior squeeze_lemon(lemon:item):
    body:
        achieve_once inhand(lemon)
        # Temporarily hold the lemon
        squeeze(lemon) 
        # Squeeze the lemon

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and on(bowl, is_kitchen_counter(bowl))
        # Select a bowl on the kitchen counter
        
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select the cut eggs

        mix_all_ingredients(bowl)

        foreach ingredient: item:
            if ingredient == lemon:
                squeeze_lemon(lemon)
            elif inside(ingredient, is_pot(ingredient)) or inside(ingredient, is_cutting_board(ingredient)):
                achieve_once inside(ingredient, bowl)
                # Add ingredient into the bowl

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inside') at line 5844, column 18.
Expected one of: 
	* _NEWLINE
	* AT
	* AMPERSAND
	* __ANON_4
	* OR
	* __ANON_3
	* MINUS
	* RSHIFT
	* __ANON_1
	* __ANON_5
	* MORETHAN
	* LESSTHAN
	* __ANON_7
	* IF
	* __ANON_6
	* COMMA
	* VBAR
	* AND
	* __ANON_8
	* __ANON_2
	* PERCENT
	* NOT_EQ
	* LESS_EQ
	* PLUS
	* CIRCUMFLEX
	* GREATER_EQ
	* DOUBLE_EQUAL
	* SLASH
	* EQUAL
	* FLOORDIV
	* __ANON_0
	* LSHIFT
	* STAR
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#goal_representation
 
behavior mix_all_ingredients(bowl:item):
    body:
        achieve_once close_char(char, bowl)
        # Ensure the character is close to the bowl to mix the ingredients and squeeze the lemon
        achieve_once open(bowl)
        # Ensure the bowl is open for mixing ingredients

behavior squeeze_lemon(lemon:item):
    body:
        achieve_once inhand(lemon)
        # Temporarily hold the lemon
        squeeze(lemon) 
        # Squeeze the lemon

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and on(bowl, is_kitchen_counter(bowl))
        # Select a bowl on the kitchen counter
        
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select the cut eggs

        mix_all_ingredients(bowl)

        foreach ingredient: item:
            if ingredient == lemon:
                squeeze_lemon(lemon)
            elif inside(ingredient, is_pot(ingredient)) or inside(ingredient, is_cutting_board(ingredient)):
                achieve_once inside(ingredient, bowl)
                # Add ingredient into the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_and_mix_ingredients(ingredients: list, lemon: item, bowl: item):
    body:
        achieve_once inhand(lemon)
        # Hold the lemon in hand to squeeze it into the bowl
        squeeze(lemon)
        # Squeeze the lemon to extract the juice

behavior mix_all_ingredients(ingredients: list, bowl: item):
    body:
        foreach ingredient: item:
            if ingredient in ingredients:
                achieve_once inside(ingredient, bowl)
        # Add all ingredients into the bowl

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        
        bind ingredients: list where:
            exists item1: item : (is_food_egg(item1))
            and exists item2: item : (is_food_vegetable(item2))
        # Select the ingredients

        squeeze_and_mix_ingredients(ingredients, lemon, bowl)
        mix_all_ingredients(ingredients, bowl)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5817, column 27.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#goal_representation
 
behavior squeeze_and_mix_ingredients(ingredients: list, lemon: item, bowl: item):
    body:
        achieve_once inhand(lemon)
        # Hold the lemon in hand to squeeze it into the bowl
        squeeze(lemon)
        # Squeeze the lemon to extract the juice
        foreach ingredient: item:
            if ingredient in ingredients:
                achieve_once inside(ingredient, bowl)
        # Add all ingredients, including lemon juice, into the bowl

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        
        bind ingredients: list where:
            exists item1: item : (is_food_egg(item1))
            and exists item2: item : (is_food_vegetable(item2))
        # Select the ingredients

        squeeze_and_mix_ingredients(ingredients, lemon, bowl)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5814, column 27.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#goal_representation
 
behavior squeeze_and_mix_ingredients(ingredients: list, lemon: item, bowl: item):
    body:
        achieve_once inhand(lemon)
        # Hold the lemon in hand to squeeze it into the bowl
        squeeze(lemon)
        # Squeeze the lemon to extract the juice
        foreach ingredient: item in ingredients:
            achieve_once inside(ingredient, bowl)
        # Add all ingredients, including lemon juice, into the bowl

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        
        bind ingredients: list where:
            exists item1: item : (is_food_egg(item1))
            and exists item2: item : (is_food_vegetable(item2))
        # Select the ingredients

        squeeze_and_mix_ingredients(ingredients, lemon, bowl)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_egg_2020)', 'putin_executor(food_egg_2020, pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(cutting_board_2051)', 'put_executor(food_egg_2020, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_egg_2020)', 'cut_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(pot_2069)', 'putin_executor(food_egg_2020, pot_2069)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'put_executor(food_vegetable_2041, cutting_board_2051)', 'walk_executor(food_vegetable_2041)', 'cut_executor(food_vegetable_2041)']
Time info:
Time consume: 352 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 50
goal generate times: 11
goal correct times: 2
action_num: 39

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 18 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
