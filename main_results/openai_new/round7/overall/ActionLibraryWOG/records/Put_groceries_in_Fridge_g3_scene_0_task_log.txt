From agent.py
Reset goals: The sub-goals are: 
['1. Find the fridge.', '2. Throw all the items in the fridge into the trashcan.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_fridge_unvisited(item: item):
    # Check if an item is an unvisited fridge
    return is_fridge(item) and not visited(item)

behavior __goal__():
    body:
        if exists fridge: item : is_fridge(fridge):
            # If there is a known fridge, approach it directly
            bind fridge: item where:
                is_fridge(fridge)
            achieve close_char(char, fridge)
        
        else:
            # If the fridge is not already identified in known info, observe all unvisited items to identify a fridge
            foreach item: item:
                if is_fridge_unvisited(item):
                    observe(item, "Check if this is the fridge")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_fridge_unvisited(item: item):
    # Check if an item is an unvisited fridge
    return is_fridge(item) and not visited(item)

behavior __goal__():
    body:
        if exists fridge: item : is_fridge(fridge):
            # If there is a known fridge, approach it directly
            bind fridge: item where:
                is_fridge(fridge)
            achieve close_char(char, fridge)
        
        else:
            # If the fridge is not already identified in known info, observe all unvisited items to identify a fridge
            foreach item: item:
                if is_fridge_unvisited(item):
                    observe(item, "Check if this is the fridge")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2037_around_cupboard_229(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_food_banana_2011_around_light_64(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_banana,light_instance)
        else:
            exp(food_banana,light_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,light_instance]=True
        close[light_instance,food_banana]=True
    

behavior find_food_steak_2008_around_light_64(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_steak,light_instance)
        else:
            exp(food_steak,light_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,light_instance]=True
        close[light_instance,food_steak]=True
    

behavior find_food_pizza_2034_around_light_64(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_pizza,light_instance)
        else:
            exp(food_pizza,light_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,light_instance]=True
        close[light_instance,food_pizza]=True
    

behavior find_food_bread_2012_around_cupboard_229(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_food_kiwi_2027_around_light_64(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_kiwi,light_instance)
        else:
            exp(food_kiwi,light_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,light_instance]=True
        close[light_instance,food_kiwi]=True
    

behavior find_food_apple_2009_around_trashcan_99(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_apple,trashcan_instance)
        else:
            exp(food_apple,trashcan_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,trashcan_instance]=True
        close[trashcan_instance,food_apple]=True
    

behavior find_food_peanut_butter_2033_around_cutting_board_2051(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_peanut_butter,cutting_board_instance)
        else:
            exp(food_peanut_butter,cutting_board_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cutting_board_instance]=True
        close[cutting_board_instance,food_peanut_butter]=True
    

behavior find_food_turkey_2040_around_trashcan_99(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_turkey,trashcan_instance)
        else:
            exp(food_turkey,trashcan_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,trashcan_instance]=True
        close[trashcan_instance,food_turkey]=True
    

behavior find_food_oatmeal_2030_around_light_64(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_oatmeal,light_instance)
        else:
            exp(food_oatmeal,light_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,light_instance]=True
        close[light_instance,food_oatmeal]=True
    

behavior find_food_ice_cream_2025_around_light_64(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_ice_cream,light_instance)
        else:
            exp(food_ice_cream,light_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,light_instance]=True
        close[light_instance,food_ice_cream]=True
    

behavior find_food_fish_2021_around_light_64(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_fish,light_instance)
        else:
            exp(food_fish,light_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,light_instance]=True
        close[light_instance,food_fish]=True
    

behavior find_food_sugar_2039_around_photoframe_185(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==185
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(food_sugar,photoframe_instance)
        else:
            exp(food_sugar,photoframe_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,photoframe_instance]=True
        close[photoframe_instance,food_sugar]=True
    

behavior find_food_carrot_2014_around_trashcan_99(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_carrot,trashcan_instance)
        else:
            exp(food_carrot,trashcan_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,trashcan_instance]=True
        close[trashcan_instance,food_carrot]=True
    

behavior find_food_cereal_2015_around_kitchen_counter_230(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

behavior find_food_cheese_2016_around_cutting_board_2051(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_cheese,cutting_board_instance)
        else:
            exp(food_cheese,cutting_board_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,cutting_board_instance]=True
        close[cutting_board_instance,food_cheese]=True
    

behavior find_food_food_2022_around_toaster_292(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_food,toaster_instance)
        else:
            exp(food_food,toaster_instance)
    eff:
        unknown[food_food]=False
        close[food_food,toaster_instance]=True
        close[toaster_instance,food_food]=True
    

behavior find_food_chicken_2017_around_cutting_board_2051(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_chicken,cutting_board_instance)
        else:
            exp(food_chicken,cutting_board_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cutting_board_instance]=True
        close[cutting_board_instance,food_chicken]=True
    

behavior find_food_potato_2035_around_trashcan_99(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_potato,trashcan_instance)
        else:
            exp(food_potato,trashcan_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,trashcan_instance]=True
        close[trashcan_instance,food_potato]=True
    

behavior find_food_jam_2026_around_light_64(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_jam,light_instance)
        else:
            exp(food_jam,light_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,light_instance]=True
        close[light_instance,food_jam]=True
    

behavior find_food_orange_2031_around_trashcan_99(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_orange,trashcan_instance)
        else:
            exp(food_orange,trashcan_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,trashcan_instance]=True
        close[trashcan_instance,food_orange]=True
    

behavior find_food_lemon_2028_around_microwave_297(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_lemon,microwave_instance)
        else:
            exp(food_lemon,microwave_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,microwave_instance]=True
        close[microwave_instance,food_lemon]=True
    

behavior find_food_bacon_2010_around_trashcan_99(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_bacon,trashcan_instance)
        else:
            exp(food_bacon,trashcan_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,trashcan_instance]=True
        close[trashcan_instance,food_bacon]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_donut_2019_around_toaster_292(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_donut,toaster_instance)
        else:
            exp(food_donut,toaster_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,toaster_instance]=True
        close[toaster_instance,food_donut]=True
    

behavior find_food_rice_2036_around_stove_2065(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_rice,stove_instance)
        else:
            exp(food_rice,stove_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,stove_instance]=True
        close[stove_instance,food_rice]=True
    

behavior find_food_hamburger_2024_around_microwave_297(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_hamburger,microwave_instance)
        else:
            exp(food_hamburger,microwave_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,microwave_instance]=True
        close[microwave_instance,food_hamburger]=True
    

behavior find_food_cake_2013_around_microwave_297(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cake,microwave_instance)
        else:
            exp(food_cake,microwave_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,microwave_instance]=True
        close[microwave_instance,food_cake]=True
    

behavior find_food_noodles_2029_around_microwave_297(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_noodles,microwave_instance)
        else:
            exp(food_noodles,microwave_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,microwave_instance]=True
        close[microwave_instance,food_noodles]=True
    

behavior find_food_fruit_2023_around_microwave_297(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_fruit,microwave_instance)
        else:
            exp(food_fruit,microwave_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,microwave_instance]=True
        close[microwave_instance,food_fruit]=True
    

behavior find_food_egg_2020_around_light_64(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_egg,light_instance)
        else:
            exp(food_egg,light_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,light_instance]=True
        close[light_instance,food_egg]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_food(item:item):
    # This function checks if an item is classified as food
    symbol is_food_item = (
        is_food_apple(item) or is_food_banana(item) or is_food_oatmeal(item) or 
        is_food_cereal(item) or is_food_egg(item) or is_food_rice(item) or 
        is_food_meat(item) or is_food_fish(item) or is_food_food(item) or 
        is_food_jam(item) or is_food_cheese(item) or is_food_fruit(item) or 
        is_food_donut(item) or is_food_hamburger(item) or is_food_ice_cream(item) or 
        is_food_pizza(item) or is_food_chicken(item) or is_food_turkey(item) or 
        is_food_noodles(item) or is_food_vegetable(item) or is_food_pear(item) or 
        is_food_peanut_butter(item) or is_food_bacon(item) or is_food_fruit(item) or 
        is_food_potato(item) or is_food_dessert(item) or is_food_onion(item) or 
        is_food_sugar(item) or is_food_torte(item) or is_food_food(item))
    return is_food_item

behavior throw_item_in_trash(item:item, trashcan:item):
    body:
        achieve_once inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        foreach item: item:
            if is_food(item) and inside(item, fridge):
                bind trashcan: item where:
                    is_trashcan(trashcan)
                throw_item_in_trash(item, trashcan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function is_food_meat not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_salt_2037_around_kitchen_counter_230(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_food_banana_2011_around_light_64(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_banana,light_instance)
        else:
            exp(food_banana,light_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,light_instance]=True
        close[light_instance,food_banana]=True
    

behavior find_food_steak_2008_around_light_64(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_steak,light_instance)
        else:
            exp(food_steak,light_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,light_instance]=True
        close[light_instance,food_steak]=True
    

behavior find_food_pizza_2034_around_light_64(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_pizza,light_instance)
        else:
            exp(food_pizza,light_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,light_instance]=True
        close[light_instance,food_pizza]=True
    

behavior find_food_bread_2012_around_microwave_297(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_bread,microwave_instance)
        else:
            exp(food_bread,microwave_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,microwave_instance]=True
        close[microwave_instance,food_bread]=True
    

behavior find_food_snack_2038_around_microwave_297(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_snack,microwave_instance)
        else:
            exp(food_snack,microwave_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,microwave_instance]=True
        close[microwave_instance,food_snack]=True
    

behavior find_food_kiwi_2027_around_microwave_297(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_kiwi,microwave_instance)
        else:
            exp(food_kiwi,microwave_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,microwave_instance]=True
        close[microwave_instance,food_kiwi]=True
    

behavior find_food_apple_2009_around_kitchen_counter_230(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_apple,kitchen_counter_instance)
        else:
            exp(food_apple,kitchen_counter_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_apple]=True
    

behavior find_food_peanut_butter_2033_around_trashcan_99(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_peanut_butter,trashcan_instance)
        else:
            exp(food_peanut_butter,trashcan_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,trashcan_instance]=True
        close[trashcan_instance,food_peanut_butter]=True
    

behavior find_food_turkey_2040_around_cutting_board_2051(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_turkey,cutting_board_instance)
        else:
            exp(food_turkey,cutting_board_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,cutting_board_instance]=True
        close[cutting_board_instance,food_turkey]=True
    

behavior find_food_oatmeal_2030_around_toaster_292(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_oatmeal,toaster_instance)
        else:
            exp(food_oatmeal,toaster_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,toaster_instance]=True
        close[toaster_instance,food_oatmeal]=True
    

behavior find_food_ice_cream_2025_around_trashcan_99(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_ice_cream,trashcan_instance)
        else:
            exp(food_ice_cream,trashcan_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,trashcan_instance]=True
        close[trashcan_instance,food_ice_cream]=True
    

behavior find_food_fish_2021_around_kitchen_counter_230(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_carrot_2014_around_light_64(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_carrot,light_instance)
        else:
            exp(food_carrot,light_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,light_instance]=True
        close[light_instance,food_carrot]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_food_cheese_2016_around_kitchen_counter_230(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cheese,kitchen_counter_instance)
        else:
            exp(food_cheese,kitchen_counter_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cheese]=True
    

behavior find_food_food_2022_around_microwave_297(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_food,microwave_instance)
        else:
            exp(food_food,microwave_instance)
    eff:
        unknown[food_food]=False
        close[food_food,microwave_instance]=True
        close[microwave_instance,food_food]=True
    

behavior find_food_chicken_2017_around_cutting_board_2051(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_chicken,cutting_board_instance)
        else:
            exp(food_chicken,cutting_board_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cutting_board_instance]=True
        close[cutting_board_instance,food_chicken]=True
    

behavior find_food_potato_2035_around_stove_2065(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_potato,stove_instance)
        else:
            exp(food_potato,stove_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,stove_instance]=True
        close[stove_instance,food_potato]=True
    

behavior find_food_jam_2026_around_trashcan_99(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_jam,trashcan_instance)
        else:
            exp(food_jam,trashcan_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,trashcan_instance]=True
        close[trashcan_instance,food_jam]=True
    

behavior find_food_orange_2031_around_trashcan_99(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_orange,trashcan_instance)
        else:
            exp(food_orange,trashcan_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,trashcan_instance]=True
        close[trashcan_instance,food_orange]=True
    

behavior find_food_lemon_2028_around_light_64(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_lemon,light_instance)
        else:
            exp(food_lemon,light_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,light_instance]=True
        close[light_instance,food_lemon]=True
    

behavior find_food_dessert_2018_around_microwave_297(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_dessert,microwave_instance)
        else:
            exp(food_dessert,microwave_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,microwave_instance]=True
        close[microwave_instance,food_dessert]=True
    

behavior find_food_bacon_2010_around_trashcan_99(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_bacon,trashcan_instance)
        else:
            exp(food_bacon,trashcan_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,trashcan_instance]=True
        close[trashcan_instance,food_bacon]=True
    

behavior find_food_vegetable_2041_around_microwave_297(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_vegetable,microwave_instance)
        else:
            exp(food_vegetable,microwave_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,microwave_instance]=True
        close[microwave_instance,food_vegetable]=True
    

behavior find_food_donut_2019_around_kitchen_counter_230(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_donut,kitchen_counter_instance)
        else:
            exp(food_donut,kitchen_counter_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_donut]=True
    

behavior find_food_rice_2036_around_microwave_297(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_rice,microwave_instance)
        else:
            exp(food_rice,microwave_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,microwave_instance]=True
        close[microwave_instance,food_rice]=True
    

behavior find_food_hamburger_2024_around_kitchen_counter_230(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_food_cake_2013_around_microwave_297(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cake,microwave_instance)
        else:
            exp(food_cake,microwave_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,microwave_instance]=True
        close[microwave_instance,food_cake]=True
    

behavior find_food_noodles_2029_around_microwave_297(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_noodles,microwave_instance)
        else:
            exp(food_noodles,microwave_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,microwave_instance]=True
        close[microwave_instance,food_noodles]=True
    

behavior find_food_fruit_2023_around_trashcan_99(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_fruit,trashcan_instance)
        else:
            exp(food_fruit,trashcan_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,trashcan_instance]=True
        close[trashcan_instance,food_fruit]=True
    

behavior find_food_egg_2020_around_trashcan_99(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_egg,trashcan_instance)
        else:
            exp(food_egg,trashcan_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,trashcan_instance]=True
        close[trashcan_instance,food_egg]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#goal_representation
 
def is_food(item:item):
    # This function checks if an item is classified as food
    symbol is_food_item = (
        is_food_apple(item) or is_food_banana(item) or is_food_oatmeal(item) or 
        is_food_cereal(item) or is_food_egg(item) or is_food_rice(item) or 
        is_food_steak(item) or is_food_fish(item) or is_food_food(item) or 
        is_food_jam(item) or is_food_cheese(item) or is_food_fruit(item) or 
        is_food_donut(item) or is_food_hamburger(item) or is_food_ice_cream(item) or 
        is_food_pizza(item) or is_food_chicken(item) or is_food_turkey(item) or 
        is_food_noodles(item) or is_food_vegetable(item) or is_food_pear(item) or 
        is_food_peanut_butter(item) or is_food_bacon(item) or is_food_fruit(item) or 
        is_food_potato(item) or is_food_dessert(item) or is_food_onion(item) or 
        is_food_sugar(item) or is_food_torte(item) or is_food_food(item))
    return is_food_item

behavior throw_item_in_trash(item:item, trashcan:item):
    body:
        achieve_once inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        foreach item: item:
            if is_food(item) and inside(item, fridge):
                bind trashcan: item where:
                    is_trashcan(trashcan)
                throw_item_in_trash(item, trashcan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function is_food_pear not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_salt_2037_around_microwave_297(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_salt,microwave_instance)
        else:
            exp(food_salt,microwave_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,microwave_instance]=True
        close[microwave_instance,food_salt]=True
    

behavior find_food_banana_2011_around_trashcan_99(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_banana,trashcan_instance)
        else:
            exp(food_banana,trashcan_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,trashcan_instance]=True
        close[trashcan_instance,food_banana]=True
    

behavior find_food_steak_2008_around_stove_2065(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_steak,stove_instance)
        else:
            exp(food_steak,stove_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,stove_instance]=True
        close[stove_instance,food_steak]=True
    

behavior find_food_pizza_2034_around_light_64(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_pizza,light_instance)
        else:
            exp(food_pizza,light_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,light_instance]=True
        close[light_instance,food_pizza]=True
    

behavior find_food_bread_2012_around_cupboard_229(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_food_snack_2038_around_cutting_board_2051(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_snack,cutting_board_instance)
        else:
            exp(food_snack,cutting_board_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,cutting_board_instance]=True
        close[cutting_board_instance,food_snack]=True
    

behavior find_food_kiwi_2027_around_cutting_board_2051(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_kiwi,cutting_board_instance)
        else:
            exp(food_kiwi,cutting_board_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,cutting_board_instance]=True
        close[cutting_board_instance,food_kiwi]=True
    

behavior find_food_apple_2009_around_trashcan_99(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_apple,trashcan_instance)
        else:
            exp(food_apple,trashcan_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,trashcan_instance]=True
        close[trashcan_instance,food_apple]=True
    

behavior find_food_peanut_butter_2033_around_trashcan_99(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_peanut_butter,trashcan_instance)
        else:
            exp(food_peanut_butter,trashcan_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,trashcan_instance]=True
        close[trashcan_instance,food_peanut_butter]=True
    

behavior find_food_turkey_2040_around_microwave_297(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_turkey,microwave_instance)
        else:
            exp(food_turkey,microwave_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,microwave_instance]=True
        close[microwave_instance,food_turkey]=True
    

behavior find_food_oatmeal_2030_around_light_64(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_oatmeal,light_instance)
        else:
            exp(food_oatmeal,light_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,light_instance]=True
        close[light_instance,food_oatmeal]=True
    

behavior find_food_ice_cream_2025_around_light_64(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_ice_cream,light_instance)
        else:
            exp(food_ice_cream,light_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,light_instance]=True
        close[light_instance,food_ice_cream]=True
    

behavior find_food_fish_2021_around_dishwasher_1001(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_fish,dishwasher_instance)
        else:
            exp(food_fish,dishwasher_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,dishwasher_instance]=True
        close[dishwasher_instance,food_fish]=True
    

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_carrot_2014_around_light_64(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_carrot,light_instance)
        else:
            exp(food_carrot,light_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,light_instance]=True
        close[light_instance,food_carrot]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_food_cheese_2016_around_light_64(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_cheese,light_instance)
        else:
            exp(food_cheese,light_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,light_instance]=True
        close[light_instance,food_cheese]=True
    

behavior find_food_food_2022_around_stove_2065(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_food,stove_instance)
        else:
            exp(food_food,stove_instance)
    eff:
        unknown[food_food]=False
        close[food_food,stove_instance]=True
        close[stove_instance,food_food]=True
    

behavior find_food_chicken_2017_around_microwave_297(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_chicken,microwave_instance)
        else:
            exp(food_chicken,microwave_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,microwave_instance]=True
        close[microwave_instance,food_chicken]=True
    

behavior find_food_potato_2035_around_cutting_board_2051(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_potato,cutting_board_instance)
        else:
            exp(food_potato,cutting_board_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cutting_board_instance]=True
        close[cutting_board_instance,food_potato]=True
    

behavior find_food_jam_2026_around_kitchen_counter_230(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_jam,kitchen_counter_instance)
        else:
            exp(food_jam,kitchen_counter_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_jam]=True
    

behavior find_food_orange_2031_around_trashcan_99(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_orange,trashcan_instance)
        else:
            exp(food_orange,trashcan_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,trashcan_instance]=True
        close[trashcan_instance,food_orange]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_food_bacon_2010_around_light_64(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_bacon,light_instance)
        else:
            exp(food_bacon,light_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,light_instance]=True
        close[light_instance,food_bacon]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_donut_2019_around_microwave_297(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_donut,microwave_instance)
        else:
            exp(food_donut,microwave_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,microwave_instance]=True
        close[microwave_instance,food_donut]=True
    

behavior find_food_rice_2036_around_curtain_24(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==24
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_rice,curtain_instance)
        else:
            exp(food_rice,curtain_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,curtain_instance]=True
        close[curtain_instance,food_rice]=True
    

behavior find_food_hamburger_2024_around_light_64(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_hamburger,light_instance)
        else:
            exp(food_hamburger,light_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,light_instance]=True
        close[light_instance,food_hamburger]=True
    

behavior find_food_cake_2013_around_microwave_297(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cake,microwave_instance)
        else:
            exp(food_cake,microwave_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,microwave_instance]=True
        close[microwave_instance,food_cake]=True
    

behavior find_food_noodles_2029_around_microwave_297(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_noodles,microwave_instance)
        else:
            exp(food_noodles,microwave_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,microwave_instance]=True
        close[microwave_instance,food_noodles]=True
    

behavior find_food_fruit_2023_around_trashcan_99(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_fruit,trashcan_instance)
        else:
            exp(food_fruit,trashcan_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,trashcan_instance]=True
        close[trashcan_instance,food_fruit]=True
    

behavior find_food_egg_2020_around_microwave_297(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_egg,microwave_instance)
        else:
            exp(food_egg,microwave_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,microwave_instance]=True
        close[microwave_instance,food_egg]=True
    

behavior find_food_onion_2032_around_microwave_297(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

#goal_representation
 
def is_food(item:item):
    # This function checks if an item is classified as food
    symbol is_food_item = (
        is_food_apple(item) or is_food_banana(item) or is_food_oatmeal(item) or 
        is_food_cereal(item) or is_food_egg(item) or is_food_rice(item) or 
        is_food_steak(item) or is_food_fish(item) or is_food_food(item) or 
        is_food_jam(item) or is_food_cheese(item) or is_food_fruit(item) or 
        is_food_donut(item) or is_food_hamburger(item) or is_food_ice_cream(item) or 
        is_food_pizza(item) or is_food_chicken(item) or is_food_turkey(item) or 
        is_food_noodles(item) or is_food_vegetable(item) or is_food_peanut_butter(item) or 
        is_food_bacon(item) or is_food_onion(item) or 
        is_food_sugar(item) or is_food_torte(item) or is_food_food(item))
    return is_food_item

behavior throw_item_in_trash(item:item, trashcan:item):
    body:
        achieve_once inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        foreach item: item:
            if is_food(item) and inside(item, fridge):
                bind trashcan: item where:
                    is_trashcan(trashcan)
                throw_item_in_trash(item, trashcan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2037_around_kitchen_counter_230(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_food_banana_2011_around_light_64(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_banana,light_instance)
        else:
            exp(food_banana,light_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,light_instance]=True
        close[light_instance,food_banana]=True
    

behavior find_food_steak_2008_around_microwave_297(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_steak,microwave_instance)
        else:
            exp(food_steak,microwave_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,microwave_instance]=True
        close[microwave_instance,food_steak]=True
    

behavior find_food_pizza_2034_around_light_64(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_pizza,light_instance)
        else:
            exp(food_pizza,light_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,light_instance]=True
        close[light_instance,food_pizza]=True
    

behavior find_food_bread_2012_around_microwave_297(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_bread,microwave_instance)
        else:
            exp(food_bread,microwave_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,microwave_instance]=True
        close[microwave_instance,food_bread]=True
    

behavior find_food_snack_2038_around_microwave_297(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_snack,microwave_instance)
        else:
            exp(food_snack,microwave_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,microwave_instance]=True
        close[microwave_instance,food_snack]=True
    

behavior find_food_kiwi_2027_around_trashcan_99(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_kiwi,trashcan_instance)
        else:
            exp(food_kiwi,trashcan_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,trashcan_instance]=True
        close[trashcan_instance,food_kiwi]=True
    

behavior find_food_apple_2009_around_trashcan_99(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_apple,trashcan_instance)
        else:
            exp(food_apple,trashcan_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,trashcan_instance]=True
        close[trashcan_instance,food_apple]=True
    

behavior find_food_peanut_butter_2033_around_trashcan_99(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_peanut_butter,trashcan_instance)
        else:
            exp(food_peanut_butter,trashcan_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,trashcan_instance]=True
        close[trashcan_instance,food_peanut_butter]=True
    

behavior find_food_turkey_2040_around_cutting_board_2051(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_turkey,cutting_board_instance)
        else:
            exp(food_turkey,cutting_board_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,cutting_board_instance]=True
        close[cutting_board_instance,food_turkey]=True
    

behavior find_food_oatmeal_2030_around_trashcan_99(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_oatmeal,trashcan_instance)
        else:
            exp(food_oatmeal,trashcan_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,trashcan_instance]=True
        close[trashcan_instance,food_oatmeal]=True
    

behavior find_food_ice_cream_2025_around_trashcan_99(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_ice_cream,trashcan_instance)
        else:
            exp(food_ice_cream,trashcan_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,trashcan_instance]=True
        close[trashcan_instance,food_ice_cream]=True
    

behavior find_food_fish_2021_around_light_64(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_fish,light_instance)
        else:
            exp(food_fish,light_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,light_instance]=True
        close[light_instance,food_fish]=True
    

behavior find_food_sugar_2039_around_microwave_297(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_sugar,microwave_instance)
        else:
            exp(food_sugar,microwave_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,microwave_instance]=True
        close[microwave_instance,food_sugar]=True
    

behavior find_food_carrot_2014_around_light_64(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_carrot,light_instance)
        else:
            exp(food_carrot,light_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,light_instance]=True
        close[light_instance,food_carrot]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_food_cheese_2016_around_kitchen_counter_230(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cheese,kitchen_counter_instance)
        else:
            exp(food_cheese,kitchen_counter_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cheese]=True
    

behavior find_food_food_2022_around_stove_2065(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_food,stove_instance)
        else:
            exp(food_food,stove_instance)
    eff:
        unknown[food_food]=False
        close[food_food,stove_instance]=True
        close[stove_instance,food_food]=True
    

behavior find_food_chicken_2017_around_microwave_297(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_chicken,microwave_instance)
        else:
            exp(food_chicken,microwave_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,microwave_instance]=True
        close[microwave_instance,food_chicken]=True
    

behavior find_food_potato_2035_around_cutting_board_2051(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_potato,cutting_board_instance)
        else:
            exp(food_potato,cutting_board_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cutting_board_instance]=True
        close[cutting_board_instance,food_potato]=True
    

behavior find_food_jam_2026_around_microwave_297(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_jam,microwave_instance)
        else:
            exp(food_jam,microwave_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,microwave_instance]=True
        close[microwave_instance,food_jam]=True
    

behavior find_food_orange_2031_around_trashcan_99(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_orange,trashcan_instance)
        else:
            exp(food_orange,trashcan_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,trashcan_instance]=True
        close[trashcan_instance,food_orange]=True
    

behavior find_food_lemon_2028_around_microwave_297(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_lemon,microwave_instance)
        else:
            exp(food_lemon,microwave_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,microwave_instance]=True
        close[microwave_instance,food_lemon]=True
    

behavior find_food_bacon_2010_around_trashcan_99(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_bacon,trashcan_instance)
        else:
            exp(food_bacon,trashcan_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,trashcan_instance]=True
        close[trashcan_instance,food_bacon]=True
    

behavior find_food_vegetable_2041_around_cutting_board_2051(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_vegetable,cutting_board_instance)
        else:
            exp(food_vegetable,cutting_board_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cutting_board_instance]=True
        close[cutting_board_instance,food_vegetable]=True
    

behavior find_food_donut_2019_around_microwave_297(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_donut,microwave_instance)
        else:
            exp(food_donut,microwave_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,microwave_instance]=True
        close[microwave_instance,food_donut]=True
    

behavior find_food_rice_2036_around_microwave_297(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_rice,microwave_instance)
        else:
            exp(food_rice,microwave_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,microwave_instance]=True
        close[microwave_instance,food_rice]=True
    

behavior find_food_hamburger_2024_around_trashcan_99(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_hamburger,trashcan_instance)
        else:
            exp(food_hamburger,trashcan_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,trashcan_instance]=True
        close[trashcan_instance,food_hamburger]=True
    

behavior find_food_cake_2013_around_microwave_297(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cake,microwave_instance)
        else:
            exp(food_cake,microwave_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,microwave_instance]=True
        close[microwave_instance,food_cake]=True
    

behavior find_food_noodles_2029_around_stove_2065(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_noodles,stove_instance)
        else:
            exp(food_noodles,stove_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,stove_instance]=True
        close[stove_instance,food_noodles]=True
    

behavior find_food_fruit_2023_around_microwave_297(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_fruit,microwave_instance)
        else:
            exp(food_fruit,microwave_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,microwave_instance]=True
        close[microwave_instance,food_fruit]=True
    

behavior find_food_egg_2020_around_light_64(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_egg,light_instance)
        else:
            exp(food_egg,light_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,light_instance]=True
        close[light_instance,food_egg]=True
    

behavior find_food_onion_2032_around_cutting_board_2051(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def has_item_in_fridge(fridge:item):
    # Function to check if there are items in a specified fridge
    symbol has_items = exists o: item : (inside(o, fridge))
    return has_items

behavior throw_item_in_trash(o: item, trashcan: item):
    body:
        achieve_once inside(o, trashcan)
        # Place the item inside the trash can

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289
        
        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select an available trash can
        
        if has_item_in_fridge(fridge):
            foreach o: item:
            # Iterate over all items that are inside the fridge
                if inside(o, fridge):
                    throw_item_in_trash(o, trashcan)
        # If there are items in the fridge, throw each item into the trashcan
        
        achieve_once closed(fridge)
        # Make sure the fridge is closed after removing all items

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2037_around_kitchen_counter_230(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_food_banana_2011_around_light_64(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_banana,light_instance)
        else:
            exp(food_banana,light_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,light_instance]=True
        close[light_instance,food_banana]=True
    

behavior find_food_steak_2008_around_oven_295(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_steak,oven_instance)
        else:
            exp(food_steak,oven_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,oven_instance]=True
        close[oven_instance,food_steak]=True
    

behavior find_food_pizza_2034_around_light_64(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_pizza,light_instance)
        else:
            exp(food_pizza,light_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,light_instance]=True
        close[light_instance,food_pizza]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_116(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

behavior find_food_bread_2012_around_microwave_297(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_bread,microwave_instance)
        else:
            exp(food_bread,microwave_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,microwave_instance]=True
        close[microwave_instance,food_bread]=True
    

behavior find_food_kiwi_2027_around_trashcan_99(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_kiwi,trashcan_instance)
        else:
            exp(food_kiwi,trashcan_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,trashcan_instance]=True
        close[trashcan_instance,food_kiwi]=True
    

behavior find_food_apple_2009_around_trashcan_99(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_apple,trashcan_instance)
        else:
            exp(food_apple,trashcan_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,trashcan_instance]=True
        close[trashcan_instance,food_apple]=True
    

behavior find_food_peanut_butter_2033_around_light_64(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_peanut_butter,light_instance)
        else:
            exp(food_peanut_butter,light_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,light_instance]=True
        close[light_instance,food_peanut_butter]=True
    

behavior find_food_turkey_2040_around_microwave_297(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_turkey,microwave_instance)
        else:
            exp(food_turkey,microwave_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,microwave_instance]=True
        close[microwave_instance,food_turkey]=True
    

behavior find_food_oatmeal_2030_around_trashcan_99(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_oatmeal,trashcan_instance)
        else:
            exp(food_oatmeal,trashcan_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,trashcan_instance]=True
        close[trashcan_instance,food_oatmeal]=True
    

behavior find_food_ice_cream_2025_around_trashcan_99(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_ice_cream,trashcan_instance)
        else:
            exp(food_ice_cream,trashcan_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,trashcan_instance]=True
        close[trashcan_instance,food_ice_cream]=True
    

behavior find_food_fish_2021_around_light_64(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_fish,light_instance)
        else:
            exp(food_fish,light_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,light_instance]=True
        close[light_instance,food_fish]=True
    

behavior find_food_sugar_2039_around_light_64(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_sugar,light_instance)
        else:
            exp(food_sugar,light_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,light_instance]=True
        close[light_instance,food_sugar]=True
    

behavior find_food_carrot_2014_around_light_64(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_carrot,light_instance)
        else:
            exp(food_carrot,light_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,light_instance]=True
        close[light_instance,food_carrot]=True
    

behavior find_food_cereal_2015_around_kitchen_counter_230(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

behavior find_food_cheese_2016_around_trashcan_99(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_cheese,trashcan_instance)
        else:
            exp(food_cheese,trashcan_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,trashcan_instance]=True
        close[trashcan_instance,food_cheese]=True
    

behavior find_food_food_2022_around_cupboard_229(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

behavior find_food_chicken_2017_around_microwave_297(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_chicken,microwave_instance)
        else:
            exp(food_chicken,microwave_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,microwave_instance]=True
        close[microwave_instance,food_chicken]=True
    

behavior find_food_potato_2035_around_light_64(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_potato,light_instance)
        else:
            exp(food_potato,light_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,light_instance]=True
        close[light_instance,food_potato]=True
    

behavior find_food_jam_2026_around_light_64(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_jam,light_instance)
        else:
            exp(food_jam,light_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,light_instance]=True
        close[light_instance,food_jam]=True
    

behavior find_food_orange_2031_around_trashcan_99(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_orange,trashcan_instance)
        else:
            exp(food_orange,trashcan_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,trashcan_instance]=True
        close[trashcan_instance,food_orange]=True
    

behavior find_food_lemon_2028_around_microwave_297(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_lemon,microwave_instance)
        else:
            exp(food_lemon,microwave_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,microwave_instance]=True
        close[microwave_instance,food_lemon]=True
    

behavior find_food_dessert_2018_around_light_64(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_dessert,light_instance)
        else:
            exp(food_dessert,light_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,light_instance]=True
        close[light_instance,food_dessert]=True
    

behavior find_food_bacon_2010_around_stove_2065(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_bacon,stove_instance)
        else:
            exp(food_bacon,stove_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,stove_instance]=True
        close[stove_instance,food_bacon]=True
    

behavior find_food_vegetable_2041_around_cutting_board_2051(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_vegetable,cutting_board_instance)
        else:
            exp(food_vegetable,cutting_board_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cutting_board_instance]=True
        close[cutting_board_instance,food_vegetable]=True
    

behavior find_food_donut_2019_around_microwave_297(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_donut,microwave_instance)
        else:
            exp(food_donut,microwave_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,microwave_instance]=True
        close[microwave_instance,food_donut]=True
    

behavior find_food_rice_2036_around_light_64(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_rice,light_instance)
        else:
            exp(food_rice,light_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,light_instance]=True
        close[light_instance,food_rice]=True
    

behavior find_food_hamburger_2024_around_toaster_292(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_hamburger,toaster_instance)
        else:
            exp(food_hamburger,toaster_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,toaster_instance]=True
        close[toaster_instance,food_hamburger]=True
    

behavior find_food_cake_2013_around_trashcan_99(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_cake,trashcan_instance)
        else:
            exp(food_cake,trashcan_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,trashcan_instance]=True
        close[trashcan_instance,food_cake]=True
    

behavior find_food_noodles_2029_around_microwave_297(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_noodles,microwave_instance)
        else:
            exp(food_noodles,microwave_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,microwave_instance]=True
        close[microwave_instance,food_noodles]=True
    

behavior find_food_fruit_2023_around_light_64(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_fruit,light_instance)
        else:
            exp(food_fruit,light_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,light_instance]=True
        close[light_instance,food_fruit]=True
    

behavior find_food_egg_2020_around_light_64(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_egg,light_instance)
        else:
            exp(food_egg,light_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,light_instance]=True
        close[light_instance,food_egg]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior throw_item_in_trash(item:item, trashcan:item):
    body:
        achieve_once inside(item, trashcan)

behavior close_fridge(fridge:item):
    body:
        achieve_once closed(fridge)

def items_in_fridge(fridge:item):
    # Check if there is any item inside the fridge
    symbol has_items=exists o: item : (inside(o, fridge))
    return has_items
    
behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        bind trashcan: item where:
            is_trashcan(trashcan)
        
        foreach item: item:
            if inside(item, fridge):
                throw_item_in_trash(item, trashcan)
        
        close_fridge(fridge)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2037_around_cupboard_229(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_food_banana_2011_around_light_64(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_banana,light_instance)
        else:
            exp(food_banana,light_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,light_instance]=True
        close[light_instance,food_banana]=True
    

behavior find_food_steak_2008_around_trashcan_99(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_steak,trashcan_instance)
        else:
            exp(food_steak,trashcan_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,trashcan_instance]=True
        close[trashcan_instance,food_steak]=True
    

behavior find_milk_2043_around_stove_2065(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(milk,stove_instance)
        else:
            exp(milk,stove_instance)
    eff:
        unknown[milk]=False
        close[milk,stove_instance]=True
        close[stove_instance,milk]=True
    

behavior find_food_pizza_2034_around_light_64(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_pizza,light_instance)
        else:
            exp(food_pizza,light_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,light_instance]=True
        close[light_instance,food_pizza]=True
    

behavior find_food_bread_2012_around_microwave_297(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_bread,microwave_instance)
        else:
            exp(food_bread,microwave_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,microwave_instance]=True
        close[microwave_instance,food_bread]=True
    

behavior find_food_snack_2038_around_light_64(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_snack,light_instance)
        else:
            exp(food_snack,light_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,light_instance]=True
        close[light_instance,food_snack]=True
    

behavior find_food_kiwi_2027_around_trashcan_99(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_kiwi,trashcan_instance)
        else:
            exp(food_kiwi,trashcan_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,trashcan_instance]=True
        close[trashcan_instance,food_kiwi]=True
    

behavior find_food_apple_2009_around_kitchen_counter_230(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_apple,kitchen_counter_instance)
        else:
            exp(food_apple,kitchen_counter_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_apple]=True
    

behavior find_food_peanut_butter_2033_around_cupboard_229(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

behavior find_food_turkey_2040_around_microwave_297(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_turkey,microwave_instance)
        else:
            exp(food_turkey,microwave_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,microwave_instance]=True
        close[microwave_instance,food_turkey]=True
    

behavior find_food_oatmeal_2030_around_light_64(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_oatmeal,light_instance)
        else:
            exp(food_oatmeal,light_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,light_instance]=True
        close[light_instance,food_oatmeal]=True
    

behavior find_food_ice_cream_2025_around_trashcan_99(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_ice_cream,trashcan_instance)
        else:
            exp(food_ice_cream,trashcan_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,trashcan_instance]=True
        close[trashcan_instance,food_ice_cream]=True
    

behavior find_food_fish_2021_around_trashcan_99(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_fish,trashcan_instance)
        else:
            exp(food_fish,trashcan_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,trashcan_instance]=True
        close[trashcan_instance,food_fish]=True
    

behavior find_food_sugar_2039_around_microwave_297(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_sugar,microwave_instance)
        else:
            exp(food_sugar,microwave_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,microwave_instance]=True
        close[microwave_instance,food_sugar]=True
    

behavior find_food_carrot_2014_around_light_64(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_carrot,light_instance)
        else:
            exp(food_carrot,light_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,light_instance]=True
        close[light_instance,food_carrot]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_food_cheese_2016_around_kitchen_counter_230(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cheese,kitchen_counter_instance)
        else:
            exp(food_cheese,kitchen_counter_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cheese]=True
    

behavior find_food_food_2022_around_light_64(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_food,light_instance)
        else:
            exp(food_food,light_instance)
    eff:
        unknown[food_food]=False
        close[food_food,light_instance]=True
        close[light_instance,food_food]=True
    

behavior find_food_chicken_2017_around_microwave_297(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_chicken,microwave_instance)
        else:
            exp(food_chicken,microwave_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,microwave_instance]=True
        close[microwave_instance,food_chicken]=True
    

behavior find_food_potato_2035_around_stove_2065(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_potato,stove_instance)
        else:
            exp(food_potato,stove_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,stove_instance]=True
        close[stove_instance,food_potato]=True
    

behavior find_food_jam_2026_around_stove_2065(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_jam,stove_instance)
        else:
            exp(food_jam,stove_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,stove_instance]=True
        close[stove_instance,food_jam]=True
    

behavior find_food_orange_2031_around_trashcan_99(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_orange,trashcan_instance)
        else:
            exp(food_orange,trashcan_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,trashcan_instance]=True
        close[trashcan_instance,food_orange]=True
    

behavior find_food_lemon_2028_around_microwave_297(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_lemon,microwave_instance)
        else:
            exp(food_lemon,microwave_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,microwave_instance]=True
        close[microwave_instance,food_lemon]=True
    

behavior find_food_dessert_2018_around_microwave_297(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_dessert,microwave_instance)
        else:
            exp(food_dessert,microwave_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,microwave_instance]=True
        close[microwave_instance,food_dessert]=True
    

behavior find_food_bacon_2010_around_microwave_297(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_bacon,microwave_instance)
        else:
            exp(food_bacon,microwave_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,microwave_instance]=True
        close[microwave_instance,food_bacon]=True
    

behavior find_food_vegetable_2041_around_cupboard_229(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_donut_2019_around_light_64(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_donut,light_instance)
        else:
            exp(food_donut,light_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,light_instance]=True
        close[light_instance,food_donut]=True
    

behavior find_food_rice_2036_around_stove_2065(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_rice,stove_instance)
        else:
            exp(food_rice,stove_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,stove_instance]=True
        close[stove_instance,food_rice]=True
    

behavior find_food_hamburger_2024_around_microwave_297(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_hamburger,microwave_instance)
        else:
            exp(food_hamburger,microwave_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,microwave_instance]=True
        close[microwave_instance,food_hamburger]=True
    

behavior find_food_cake_2013_around_microwave_297(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cake,microwave_instance)
        else:
            exp(food_cake,microwave_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,microwave_instance]=True
        close[microwave_instance,food_cake]=True
    

behavior find_food_noodles_2029_around_microwave_297(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_noodles,microwave_instance)
        else:
            exp(food_noodles,microwave_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,microwave_instance]=True
        close[microwave_instance,food_noodles]=True
    

behavior find_food_fruit_2023_around_light_64(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_fruit,light_instance)
        else:
            exp(food_fruit,light_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,light_instance]=True
        close[light_instance,food_fruit]=True
    

behavior find_food_egg_2020_around_trashcan_99(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_egg,trashcan_instance)
        else:
            exp(food_egg,trashcan_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,trashcan_instance]=True
        close[trashcan_instance,food_egg]=True
    

behavior find_food_onion_2032_around_cutting_board_2051(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def has_item_in_fridge(fridge:item):
    # Check if there are any items inside the fridge
    symbol has_item = exists o: item : (inside(o, fridge))
    return has_item

behavior throw_item_in_trash(o:item, trashcan:item):
    body:
        achieve_once inside(o, trashcan)
        # Place the item inside the trashcan

behavior close_the_fridge(fridge:item):
    body:
        achieve_once closed(fridge)
        # Close the fridge door

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289
        
        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select a trashcan

        if has_item_in_fridge(fridge):
            foreach o: item:
                if inside(o, fridge):
                    throw_item_in_trash(o, trashcan)
                    # Throw each item from the fridge into the trashcan

        close_the_fridge(fridge)
        # Ensure the fridge is closed after throwing all items

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_light_64(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_banana,light_instance)
        else:
            exp(food_banana,light_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,light_instance]=True
        close[light_instance,food_banana]=True
    

behavior find_food_steak_2008_around_curtain_24(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==24
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_steak,curtain_instance)
        else:
            exp(food_steak,curtain_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,curtain_instance]=True
        close[curtain_instance,food_steak]=True
    

behavior find_food_pizza_2034_around_microwave_297(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_pizza,microwave_instance)
        else:
            exp(food_pizza,microwave_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,microwave_instance]=True
        close[microwave_instance,food_pizza]=True
    

behavior find_food_bread_2012_around_microwave_297(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_bread,microwave_instance)
        else:
            exp(food_bread,microwave_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,microwave_instance]=True
        close[microwave_instance,food_bread]=True
    

behavior find_food_kiwi_2027_around_trashcan_99(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_kiwi,trashcan_instance)
        else:
            exp(food_kiwi,trashcan_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,trashcan_instance]=True
        close[trashcan_instance,food_kiwi]=True
    

behavior find_food_apple_2009_around_trashcan_99(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_apple,trashcan_instance)
        else:
            exp(food_apple,trashcan_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,trashcan_instance]=True
        close[trashcan_instance,food_apple]=True
    

behavior find_food_peanut_butter_2033_around_trashcan_99(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_peanut_butter,trashcan_instance)
        else:
            exp(food_peanut_butter,trashcan_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,trashcan_instance]=True
        close[trashcan_instance,food_peanut_butter]=True
    

behavior find_food_turkey_2040_around_stove_2065(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_turkey,stove_instance)
        else:
            exp(food_turkey,stove_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,stove_instance]=True
        close[stove_instance,food_turkey]=True
    

behavior find_food_oatmeal_2030_around_trashcan_99(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_oatmeal,trashcan_instance)
        else:
            exp(food_oatmeal,trashcan_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,trashcan_instance]=True
        close[trashcan_instance,food_oatmeal]=True
    

behavior find_food_ice_cream_2025_around_trashcan_99(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_ice_cream,trashcan_instance)
        else:
            exp(food_ice_cream,trashcan_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,trashcan_instance]=True
        close[trashcan_instance,food_ice_cream]=True
    

behavior find_food_fish_2021_around_microwave_297(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_fish,microwave_instance)
        else:
            exp(food_fish,microwave_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,microwave_instance]=True
        close[microwave_instance,food_fish]=True
    

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_carrot_2014_around_light_64(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_carrot,light_instance)
        else:
            exp(food_carrot,light_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,light_instance]=True
        close[light_instance,food_carrot]=True
    

behavior find_food_cereal_2015_around_microwave_297(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cereal,microwave_instance)
        else:
            exp(food_cereal,microwave_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,microwave_instance]=True
        close[microwave_instance,food_cereal]=True
    

behavior find_food_cheese_2016_around_microwave_297(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cheese,microwave_instance)
        else:
            exp(food_cheese,microwave_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,microwave_instance]=True
        close[microwave_instance,food_cheese]=True
    

behavior find_food_food_2022_around_trashcan_99(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_food,trashcan_instance)
        else:
            exp(food_food,trashcan_instance)
    eff:
        unknown[food_food]=False
        close[food_food,trashcan_instance]=True
        close[trashcan_instance,food_food]=True
    

behavior find_food_chicken_2017_around_light_64(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_chicken,light_instance)
        else:
            exp(food_chicken,light_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,light_instance]=True
        close[light_instance,food_chicken]=True
    

behavior find_food_potato_2035_around_cutting_board_2051(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_potato,cutting_board_instance)
        else:
            exp(food_potato,cutting_board_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cutting_board_instance]=True
        close[cutting_board_instance,food_potato]=True
    

behavior find_food_jam_2026_around_light_64(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_jam,light_instance)
        else:
            exp(food_jam,light_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,light_instance]=True
        close[light_instance,food_jam]=True
    

behavior find_food_orange_2031_around_stove_2065(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_orange,stove_instance)
        else:
            exp(food_orange,stove_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,stove_instance]=True
        close[stove_instance,food_orange]=True
    

behavior find_food_lemon_2028_around_microwave_297(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_lemon,microwave_instance)
        else:
            exp(food_lemon,microwave_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,microwave_instance]=True
        close[microwave_instance,food_lemon]=True
    

behavior find_food_dessert_2018_around_light_64(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_dessert,light_instance)
        else:
            exp(food_dessert,light_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,light_instance]=True
        close[light_instance,food_dessert]=True
    

behavior find_food_bacon_2010_around_trashcan_99(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_bacon,trashcan_instance)
        else:
            exp(food_bacon,trashcan_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,trashcan_instance]=True
        close[trashcan_instance,food_bacon]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_donut_2019_around_stove_2065(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_donut,stove_instance)
        else:
            exp(food_donut,stove_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,stove_instance]=True
        close[stove_instance,food_donut]=True
    

behavior find_food_rice_2036_around_trashcan_99(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_rice,trashcan_instance)
        else:
            exp(food_rice,trashcan_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,trashcan_instance]=True
        close[trashcan_instance,food_rice]=True
    

behavior find_food_hamburger_2024_around_microwave_297(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_hamburger,microwave_instance)
        else:
            exp(food_hamburger,microwave_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,microwave_instance]=True
        close[microwave_instance,food_hamburger]=True
    

behavior find_food_cake_2013_around_microwave_297(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cake,microwave_instance)
        else:
            exp(food_cake,microwave_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,microwave_instance]=True
        close[microwave_instance,food_cake]=True
    

behavior find_food_noodles_2029_around_microwave_297(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_noodles,microwave_instance)
        else:
            exp(food_noodles,microwave_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,microwave_instance]=True
        close[microwave_instance,food_noodles]=True
    

behavior find_food_fruit_2023_around_kitchen_counter_230(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_food_egg_2020_around_light_64(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_egg,light_instance)
        else:
            exp(food_egg,light_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,light_instance]=True
        close[light_instance,food_egg]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior throw_in_trash(item: item, trashcan: item):
    body:
        achieve_once inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and close_char(char, fridge) # Ensure the character is close to the fridge, which is the one already found
        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select all items inside the fridge to throw them in the trashcan
        foreach item: item:
            if inside(item, fridge):
                throw_in_trash(item, trashcan)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2037_around_kitchen_counter_230(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_food_banana_2011_around_trashcan_99(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_banana,trashcan_instance)
        else:
            exp(food_banana,trashcan_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,trashcan_instance]=True
        close[trashcan_instance,food_banana]=True
    

behavior find_food_steak_2008_around_stove_2065(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_steak,stove_instance)
        else:
            exp(food_steak,stove_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,stove_instance]=True
        close[stove_instance,food_steak]=True
    

behavior find_milk_2043_around_kitchen_counter_230(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

behavior find_food_pizza_2034_around_light_64(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_pizza,light_instance)
        else:
            exp(food_pizza,light_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,light_instance]=True
        close[light_instance,food_pizza]=True
    

behavior find_food_bread_2012_around_stove_2065(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_bread,stove_instance)
        else:
            exp(food_bread,stove_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,stove_instance]=True
        close[stove_instance,food_bread]=True
    

behavior find_food_kiwi_2027_around_light_64(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_kiwi,light_instance)
        else:
            exp(food_kiwi,light_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,light_instance]=True
        close[light_instance,food_kiwi]=True
    

behavior find_food_apple_2009_around_trashcan_99(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_apple,trashcan_instance)
        else:
            exp(food_apple,trashcan_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,trashcan_instance]=True
        close[trashcan_instance,food_apple]=True
    

behavior find_food_peanut_butter_2033_around_trashcan_99(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_peanut_butter,trashcan_instance)
        else:
            exp(food_peanut_butter,trashcan_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,trashcan_instance]=True
        close[trashcan_instance,food_peanut_butter]=True
    

behavior find_food_turkey_2040_around_kitchen_counter_230(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_turkey,kitchen_counter_instance)
        else:
            exp(food_turkey,kitchen_counter_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_turkey]=True
    

behavior find_food_oatmeal_2030_around_microwave_297(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_oatmeal,microwave_instance)
        else:
            exp(food_oatmeal,microwave_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,microwave_instance]=True
        close[microwave_instance,food_oatmeal]=True
    

behavior find_food_ice_cream_2025_around_trashcan_99(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_ice_cream,trashcan_instance)
        else:
            exp(food_ice_cream,trashcan_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,trashcan_instance]=True
        close[trashcan_instance,food_ice_cream]=True
    

behavior find_food_fish_2021_around_trashcan_99(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_fish,trashcan_instance)
        else:
            exp(food_fish,trashcan_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,trashcan_instance]=True
        close[trashcan_instance,food_fish]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

behavior find_food_carrot_2014_around_light_64(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_carrot,light_instance)
        else:
            exp(food_carrot,light_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,light_instance]=True
        close[light_instance,food_carrot]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_food_cheese_2016_around_microwave_297(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cheese,microwave_instance)
        else:
            exp(food_cheese,microwave_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,microwave_instance]=True
        close[microwave_instance,food_cheese]=True
    

behavior find_food_food_2022_around_stove_2065(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_food,stove_instance)
        else:
            exp(food_food,stove_instance)
    eff:
        unknown[food_food]=False
        close[food_food,stove_instance]=True
        close[stove_instance,food_food]=True
    

behavior find_food_chicken_2017_around_light_64(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_chicken,light_instance)
        else:
            exp(food_chicken,light_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,light_instance]=True
        close[light_instance,food_chicken]=True
    

behavior find_food_potato_2035_around_stove_2065(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_potato,stove_instance)
        else:
            exp(food_potato,stove_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,stove_instance]=True
        close[stove_instance,food_potato]=True
    

behavior find_food_jam_2026_around_cupboard_229(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_jam,cupboard_instance)
        else:
            exp(food_jam,cupboard_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,cupboard_instance]=True
        close[cupboard_instance,food_jam]=True
    

behavior find_food_orange_2031_around_light_64(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_orange,light_instance)
        else:
            exp(food_orange,light_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,light_instance]=True
        close[light_instance,food_orange]=True
    

behavior find_food_lemon_2028_around_stove_2065(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_lemon,stove_instance)
        else:
            exp(food_lemon,stove_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,stove_instance]=True
        close[stove_instance,food_lemon]=True
    

behavior find_food_dessert_2018_around_microwave_297(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_dessert,microwave_instance)
        else:
            exp(food_dessert,microwave_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,microwave_instance]=True
        close[microwave_instance,food_dessert]=True
    

behavior find_food_bacon_2010_around_light_64(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_bacon,light_instance)
        else:
            exp(food_bacon,light_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,light_instance]=True
        close[light_instance,food_bacon]=True
    

behavior find_food_vegetable_2041_around_cupboard_229(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_donut_2019_around_microwave_297(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_donut,microwave_instance)
        else:
            exp(food_donut,microwave_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,microwave_instance]=True
        close[microwave_instance,food_donut]=True
    

behavior find_food_rice_2036_around_trashcan_99(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_rice,trashcan_instance)
        else:
            exp(food_rice,trashcan_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,trashcan_instance]=True
        close[trashcan_instance,food_rice]=True
    

behavior find_food_hamburger_2024_around_microwave_297(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_hamburger,microwave_instance)
        else:
            exp(food_hamburger,microwave_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,microwave_instance]=True
        close[microwave_instance,food_hamburger]=True
    

behavior find_food_cake_2013_around_microwave_297(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cake,microwave_instance)
        else:
            exp(food_cake,microwave_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,microwave_instance]=True
        close[microwave_instance,food_cake]=True
    

behavior find_food_noodles_2029_around_microwave_297(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_noodles,microwave_instance)
        else:
            exp(food_noodles,microwave_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,microwave_instance]=True
        close[microwave_instance,food_noodles]=True
    

behavior find_food_egg_2020_around_trashcan_99(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_egg,trashcan_instance)
        else:
            exp(food_egg,trashcan_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,trashcan_instance]=True
        close[trashcan_instance,food_egg]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior throw_items_from_fridge_to_trashcan(item:item, trashcan:item):
    body:
        achieve_once inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        bind trashcan: item where:
            is_trashcan(trashcan)

        foreach item: item:
            if inside(item, fridge):
                throw_items_from_fridge_to_trashcan(item, trashcan)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2037_around_cupboard_229(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_food_banana_2011_around_light_64(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_banana,light_instance)
        else:
            exp(food_banana,light_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,light_instance]=True
        close[light_instance,food_banana]=True
    

behavior find_food_steak_2008_around_oven_295(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_steak,oven_instance)
        else:
            exp(food_steak,oven_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,oven_instance]=True
        close[oven_instance,food_steak]=True
    

behavior find_milk_2043_around_trashcan_99(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(milk,trashcan_instance)
        else:
            exp(milk,trashcan_instance)
    eff:
        unknown[milk]=False
        close[milk,trashcan_instance]=True
        close[trashcan_instance,milk]=True
    

behavior find_food_pizza_2034_around_trashcan_99(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_pizza,trashcan_instance)
        else:
            exp(food_pizza,trashcan_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,trashcan_instance]=True
        close[trashcan_instance,food_pizza]=True
    

behavior find_food_bread_2012_around_microwave_297(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_bread,microwave_instance)
        else:
            exp(food_bread,microwave_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,microwave_instance]=True
        close[microwave_instance,food_bread]=True
    

behavior find_food_snack_2038_around_microwave_297(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_snack,microwave_instance)
        else:
            exp(food_snack,microwave_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,microwave_instance]=True
        close[microwave_instance,food_snack]=True
    

behavior find_food_kiwi_2027_around_stove_2065(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_kiwi,stove_instance)
        else:
            exp(food_kiwi,stove_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,stove_instance]=True
        close[stove_instance,food_kiwi]=True
    

behavior find_food_apple_2009_around_trashcan_99(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_apple,trashcan_instance)
        else:
            exp(food_apple,trashcan_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,trashcan_instance]=True
        close[trashcan_instance,food_apple]=True
    

behavior find_food_peanut_butter_2033_around_trashcan_99(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_peanut_butter,trashcan_instance)
        else:
            exp(food_peanut_butter,trashcan_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,trashcan_instance]=True
        close[trashcan_instance,food_peanut_butter]=True
    

behavior find_food_turkey_2040_around_microwave_297(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_turkey,microwave_instance)
        else:
            exp(food_turkey,microwave_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,microwave_instance]=True
        close[microwave_instance,food_turkey]=True
    

behavior find_food_oatmeal_2030_around_light_64(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_oatmeal,light_instance)
        else:
            exp(food_oatmeal,light_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,light_instance]=True
        close[light_instance,food_oatmeal]=True
    

behavior find_food_ice_cream_2025_around_trashcan_99(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_ice_cream,trashcan_instance)
        else:
            exp(food_ice_cream,trashcan_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,trashcan_instance]=True
        close[trashcan_instance,food_ice_cream]=True
    

behavior find_food_fish_2021_around_light_64(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_fish,light_instance)
        else:
            exp(food_fish,light_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,light_instance]=True
        close[light_instance,food_fish]=True
    

behavior find_food_sugar_2039_around_microwave_297(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_sugar,microwave_instance)
        else:
            exp(food_sugar,microwave_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,microwave_instance]=True
        close[microwave_instance,food_sugar]=True
    

behavior find_food_carrot_2014_around_light_64(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_carrot,light_instance)
        else:
            exp(food_carrot,light_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,light_instance]=True
        close[light_instance,food_carrot]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_food_cheese_2016_around_kitchen_counter_230(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cheese,kitchen_counter_instance)
        else:
            exp(food_cheese,kitchen_counter_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cheese]=True
    

behavior find_food_food_2022_around_light_64(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_food,light_instance)
        else:
            exp(food_food,light_instance)
    eff:
        unknown[food_food]=False
        close[food_food,light_instance]=True
        close[light_instance,food_food]=True
    

behavior find_food_chicken_2017_around_microwave_297(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_chicken,microwave_instance)
        else:
            exp(food_chicken,microwave_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,microwave_instance]=True
        close[microwave_instance,food_chicken]=True
    

behavior find_food_potato_2035_around_stove_2065(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_potato,stove_instance)
        else:
            exp(food_potato,stove_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,stove_instance]=True
        close[stove_instance,food_potato]=True
    

behavior find_food_jam_2026_around_light_64(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_jam,light_instance)
        else:
            exp(food_jam,light_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,light_instance]=True
        close[light_instance,food_jam]=True
    

behavior find_food_orange_2031_around_trashcan_99(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_orange,trashcan_instance)
        else:
            exp(food_orange,trashcan_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,trashcan_instance]=True
        close[trashcan_instance,food_orange]=True
    

behavior find_food_lemon_2028_around_microwave_297(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_lemon,microwave_instance)
        else:
            exp(food_lemon,microwave_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,microwave_instance]=True
        close[microwave_instance,food_lemon]=True
    

behavior find_food_dessert_2018_around_microwave_297(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_dessert,microwave_instance)
        else:
            exp(food_dessert,microwave_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,microwave_instance]=True
        close[microwave_instance,food_dessert]=True
    

behavior find_food_bacon_2010_around_microwave_297(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_bacon,microwave_instance)
        else:
            exp(food_bacon,microwave_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,microwave_instance]=True
        close[microwave_instance,food_bacon]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_donut_2019_around_microwave_297(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_donut,microwave_instance)
        else:
            exp(food_donut,microwave_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,microwave_instance]=True
        close[microwave_instance,food_donut]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_hamburger_2024_around_microwave_297(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_hamburger,microwave_instance)
        else:
            exp(food_hamburger,microwave_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,microwave_instance]=True
        close[microwave_instance,food_hamburger]=True
    

behavior find_food_cake_2013_around_microwave_297(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cake,microwave_instance)
        else:
            exp(food_cake,microwave_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,microwave_instance]=True
        close[microwave_instance,food_cake]=True
    

behavior find_food_noodles_2029_around_microwave_297(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_noodles,microwave_instance)
        else:
            exp(food_noodles,microwave_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,microwave_instance]=True
        close[microwave_instance,food_noodles]=True
    

behavior find_food_fruit_2023_around_trashcan_99(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_fruit,trashcan_instance)
        else:
            exp(food_fruit,trashcan_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,trashcan_instance]=True
        close[trashcan_instance,food_fruit]=True
    

behavior find_food_egg_2020_around_light_64(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_egg,light_instance)
        else:
            exp(food_egg,light_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,light_instance]=True
        close[light_instance,food_egg]=True
    

behavior find_food_onion_2032_around_cutting_board_2051(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_inside_fridge(item: item):
    # Check if the item is within the fridge
    return exists fridge: item : (is_fridge(fridge) and inside(item, fridge))

behavior move_to_trash(item: item, trashcan: item):
    body:
        achieve_once inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select a trash can

        foreach item: item:
            if is_item_inside_fridge(item):
                move_to_trash(item, trashcan)
        # Move each item from the fridge to the trashcan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2037_around_kitchen_counter_230(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_food_banana_2011_around_microwave_297(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_banana,microwave_instance)
        else:
            exp(food_banana,microwave_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,microwave_instance]=True
        close[microwave_instance,food_banana]=True
    

behavior find_food_steak_2008_around_stove_2065(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_steak,stove_instance)
        else:
            exp(food_steak,stove_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,stove_instance]=True
        close[stove_instance,food_steak]=True
    

behavior find_milk_2043_around_light_64(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(milk,light_instance)
        else:
            exp(milk,light_instance)
    eff:
        unknown[milk]=False
        close[milk,light_instance]=True
        close[light_instance,milk]=True
    

behavior find_food_pizza_2034_around_curtain_24(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==24
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_pizza,curtain_instance)
        else:
            exp(food_pizza,curtain_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,curtain_instance]=True
        close[curtain_instance,food_pizza]=True
    

behavior find_food_bread_2012_around_microwave_297(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_bread,microwave_instance)
        else:
            exp(food_bread,microwave_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,microwave_instance]=True
        close[microwave_instance,food_bread]=True
    

behavior find_food_snack_2038_around_microwave_297(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_snack,microwave_instance)
        else:
            exp(food_snack,microwave_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,microwave_instance]=True
        close[microwave_instance,food_snack]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_kiwi_2027_around_curtain_24(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==24
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_kiwi,curtain_instance)
        else:
            exp(food_kiwi,curtain_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,curtain_instance]=True
        close[curtain_instance,food_kiwi]=True
    

behavior find_food_apple_2009_around_microwave_297(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_apple,microwave_instance)
        else:
            exp(food_apple,microwave_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,microwave_instance]=True
        close[microwave_instance,food_apple]=True
    

behavior find_food_peanut_butter_2033_around_trashcan_99(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_peanut_butter,trashcan_instance)
        else:
            exp(food_peanut_butter,trashcan_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,trashcan_instance]=True
        close[trashcan_instance,food_peanut_butter]=True
    

behavior find_food_turkey_2040_around_microwave_297(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_turkey,microwave_instance)
        else:
            exp(food_turkey,microwave_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,microwave_instance]=True
        close[microwave_instance,food_turkey]=True
    

behavior find_food_oatmeal_2030_around_cutting_board_2051(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_oatmeal,cutting_board_instance)
        else:
            exp(food_oatmeal,cutting_board_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,cutting_board_instance]=True
        close[cutting_board_instance,food_oatmeal]=True
    

behavior find_food_ice_cream_2025_around_trashcan_99(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_ice_cream,trashcan_instance)
        else:
            exp(food_ice_cream,trashcan_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,trashcan_instance]=True
        close[trashcan_instance,food_ice_cream]=True
    

behavior find_food_fish_2021_around_trashcan_99(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_fish,trashcan_instance)
        else:
            exp(food_fish,trashcan_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,trashcan_instance]=True
        close[trashcan_instance,food_fish]=True
    

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_food_carrot_2014_around_trashcan_99(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_carrot,trashcan_instance)
        else:
            exp(food_carrot,trashcan_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,trashcan_instance]=True
        close[trashcan_instance,food_carrot]=True
    

behavior find_food_cereal_2015_around_stove_2065(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_cereal,stove_instance)
        else:
            exp(food_cereal,stove_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,stove_instance]=True
        close[stove_instance,food_cereal]=True
    

behavior find_food_cheese_2016_around_trashcan_99(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_cheese,trashcan_instance)
        else:
            exp(food_cheese,trashcan_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,trashcan_instance]=True
        close[trashcan_instance,food_cheese]=True
    

behavior find_food_food_2022_around_cutting_board_2051(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_food,cutting_board_instance)
        else:
            exp(food_food,cutting_board_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cutting_board_instance]=True
        close[cutting_board_instance,food_food]=True
    

behavior find_food_chicken_2017_around_stove_2065(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_chicken,stove_instance)
        else:
            exp(food_chicken,stove_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,stove_instance]=True
        close[stove_instance,food_chicken]=True
    

behavior find_food_potato_2035_around_trashcan_99(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_potato,trashcan_instance)
        else:
            exp(food_potato,trashcan_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,trashcan_instance]=True
        close[trashcan_instance,food_potato]=True
    

behavior find_food_jam_2026_around_light_64(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_jam,light_instance)
        else:
            exp(food_jam,light_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,light_instance]=True
        close[light_instance,food_jam]=True
    

behavior find_food_orange_2031_around_light_64(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_orange,light_instance)
        else:
            exp(food_orange,light_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,light_instance]=True
        close[light_instance,food_orange]=True
    

behavior find_food_lemon_2028_around_microwave_297(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_lemon,microwave_instance)
        else:
            exp(food_lemon,microwave_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,microwave_instance]=True
        close[microwave_instance,food_lemon]=True
    

behavior find_food_dessert_2018_around_microwave_297(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_dessert,microwave_instance)
        else:
            exp(food_dessert,microwave_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,microwave_instance]=True
        close[microwave_instance,food_dessert]=True
    

behavior find_food_bacon_2010_around_trashcan_99(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_bacon,trashcan_instance)
        else:
            exp(food_bacon,trashcan_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,trashcan_instance]=True
        close[trashcan_instance,food_bacon]=True
    

behavior find_food_vegetable_2041_around_microwave_297(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_vegetable,microwave_instance)
        else:
            exp(food_vegetable,microwave_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,microwave_instance]=True
        close[microwave_instance,food_vegetable]=True
    

behavior find_food_donut_2019_around_light_64(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_donut,light_instance)
        else:
            exp(food_donut,light_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,light_instance]=True
        close[light_instance,food_donut]=True
    

behavior find_food_rice_2036_around_curtain_24(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==24
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_rice,curtain_instance)
        else:
            exp(food_rice,curtain_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,curtain_instance]=True
        close[curtain_instance,food_rice]=True
    

behavior find_food_hamburger_2024_around_stove_2065(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_hamburger,stove_instance)
        else:
            exp(food_hamburger,stove_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,stove_instance]=True
        close[stove_instance,food_hamburger]=True
    

behavior find_food_cake_2013_around_microwave_297(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cake,microwave_instance)
        else:
            exp(food_cake,microwave_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,microwave_instance]=True
        close[microwave_instance,food_cake]=True
    

behavior find_food_noodles_2029_around_stove_2065(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_noodles,stove_instance)
        else:
            exp(food_noodles,stove_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,stove_instance]=True
        close[stove_instance,food_noodles]=True
    

behavior find_food_fruit_2023_around_cutting_board_2051(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_fruit,cutting_board_instance)
        else:
            exp(food_fruit,cutting_board_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,cutting_board_instance]=True
        close[cutting_board_instance,food_fruit]=True
    

behavior find_food_egg_2020_around_trashcan_99(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_egg,trashcan_instance)
        else:
            exp(food_egg,trashcan_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,trashcan_instance]=True
        close[trashcan_instance,food_egg]=True
    

behavior find_food_onion_2032_around_cupboard_229(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior throw_item_in_trash(item:item, trashcan:item):
    body:
        achieve_once inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        
        bind trashcan: item where:
            is_trashcan(trashcan)
        
        foreach item: item:
            if inside(item, fridge):
                throw_item_in_trash(item, trashcan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2037_around_microwave_297(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_salt,microwave_instance)
        else:
            exp(food_salt,microwave_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,microwave_instance]=True
        close[microwave_instance,food_salt]=True
    

behavior find_food_banana_2011_around_trashcan_99(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_banana,trashcan_instance)
        else:
            exp(food_banana,trashcan_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,trashcan_instance]=True
        close[trashcan_instance,food_banana]=True
    

behavior find_food_steak_2008_around_trashcan_99(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_steak,trashcan_instance)
        else:
            exp(food_steak,trashcan_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,trashcan_instance]=True
        close[trashcan_instance,food_steak]=True
    

behavior find_milk_2043_around_cupboard_229(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(milk,cupboard_instance)
        else:
            exp(milk,cupboard_instance)
    eff:
        unknown[milk]=False
        close[milk,cupboard_instance]=True
        close[cupboard_instance,milk]=True
    

behavior find_food_pizza_2034_around_light_64(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_pizza,light_instance)
        else:
            exp(food_pizza,light_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,light_instance]=True
        close[light_instance,food_pizza]=True
    

behavior find_food_bread_2012_around_microwave_297(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_bread,microwave_instance)
        else:
            exp(food_bread,microwave_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,microwave_instance]=True
        close[microwave_instance,food_bread]=True
    

behavior find_food_snack_2038_around_microwave_297(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_snack,microwave_instance)
        else:
            exp(food_snack,microwave_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,microwave_instance]=True
        close[microwave_instance,food_snack]=True
    

behavior find_food_kiwi_2027_around_light_64(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_kiwi,light_instance)
        else:
            exp(food_kiwi,light_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,light_instance]=True
        close[light_instance,food_kiwi]=True
    

behavior find_food_apple_2009_around_kitchen_counter_230(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_apple,kitchen_counter_instance)
        else:
            exp(food_apple,kitchen_counter_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_apple]=True
    

behavior find_food_peanut_butter_2033_around_cupboard_229(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

behavior find_food_turkey_2040_around_microwave_297(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_turkey,microwave_instance)
        else:
            exp(food_turkey,microwave_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,microwave_instance]=True
        close[microwave_instance,food_turkey]=True
    

behavior find_food_oatmeal_2030_around_microwave_297(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_oatmeal,microwave_instance)
        else:
            exp(food_oatmeal,microwave_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,microwave_instance]=True
        close[microwave_instance,food_oatmeal]=True
    

behavior find_food_ice_cream_2025_around_light_64(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_ice_cream,light_instance)
        else:
            exp(food_ice_cream,light_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,light_instance]=True
        close[light_instance,food_ice_cream]=True
    

behavior find_food_fish_2021_around_trashcan_99(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_fish,trashcan_instance)
        else:
            exp(food_fish,trashcan_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,trashcan_instance]=True
        close[trashcan_instance,food_fish]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

behavior find_food_carrot_2014_around_trashcan_99(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_carrot,trashcan_instance)
        else:
            exp(food_carrot,trashcan_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,trashcan_instance]=True
        close[trashcan_instance,food_carrot]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_food_cheese_2016_around_microwave_297(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_cheese,microwave_instance)
        else:
            exp(food_cheese,microwave_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,microwave_instance]=True
        close[microwave_instance,food_cheese]=True
    

behavior find_food_food_2022_around_toaster_292(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_food,toaster_instance)
        else:
            exp(food_food,toaster_instance)
    eff:
        unknown[food_food]=False
        close[food_food,toaster_instance]=True
        close[toaster_instance,food_food]=True
    

behavior find_food_chicken_2017_around_microwave_297(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_chicken,microwave_instance)
        else:
            exp(food_chicken,microwave_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,microwave_instance]=True
        close[microwave_instance,food_chicken]=True
    

behavior find_food_potato_2035_around_stove_2065(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_potato,stove_instance)
        else:
            exp(food_potato,stove_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,stove_instance]=True
        close[stove_instance,food_potato]=True
    

behavior find_food_jam_2026_around_trashcan_99(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_jam,trashcan_instance)
        else:
            exp(food_jam,trashcan_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,trashcan_instance]=True
        close[trashcan_instance,food_jam]=True
    

behavior find_food_orange_2031_around_light_64(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_orange,light_instance)
        else:
            exp(food_orange,light_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,light_instance]=True
        close[light_instance,food_orange]=True
    

behavior find_food_lemon_2028_around_microwave_297(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_lemon,microwave_instance)
        else:
            exp(food_lemon,microwave_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,microwave_instance]=True
        close[microwave_instance,food_lemon]=True
    

behavior find_food_dessert_2018_around_microwave_297(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_dessert,microwave_instance)
        else:
            exp(food_dessert,microwave_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,microwave_instance]=True
        close[microwave_instance,food_dessert]=True
    

behavior find_food_bacon_2010_around_light_64(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_bacon,light_instance)
        else:
            exp(food_bacon,light_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,light_instance]=True
        close[light_instance,food_bacon]=True
    

behavior find_food_vegetable_2041_around_stove_2065(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_vegetable,stove_instance)
        else:
            exp(food_vegetable,stove_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,stove_instance]=True
        close[stove_instance,food_vegetable]=True
    

behavior find_food_donut_2019_around_microwave_297(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_donut,microwave_instance)
        else:
            exp(food_donut,microwave_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,microwave_instance]=True
        close[microwave_instance,food_donut]=True
    

behavior find_food_rice_2036_around_microwave_297(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_rice,microwave_instance)
        else:
            exp(food_rice,microwave_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,microwave_instance]=True
        close[microwave_instance,food_rice]=True
    

behavior find_food_hamburger_2024_around_microwave_297(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_hamburger,microwave_instance)
        else:
            exp(food_hamburger,microwave_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,microwave_instance]=True
        close[microwave_instance,food_hamburger]=True
    

behavior find_food_cake_2013_around_light_64(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==64
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_cake,light_instance)
        else:
            exp(food_cake,light_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,light_instance]=True
        close[light_instance,food_cake]=True
    

behavior find_food_noodles_2029_around_microwave_297(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_noodles,microwave_instance)
        else:
            exp(food_noodles,microwave_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,microwave_instance]=True
        close[microwave_instance,food_noodles]=True
    

behavior find_food_fruit_2023_around_doorjamb_347(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==347
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(food_fruit,doorjamb_instance)
        else:
            exp(food_fruit,doorjamb_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,doorjamb_instance]=True
        close[doorjamb_instance,food_fruit]=True
    

behavior find_food_egg_2020_around_trashcan_99(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_egg,trashcan_instance)
        else:
            exp(food_egg,trashcan_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,trashcan_instance]=True
        close[trashcan_instance,food_egg]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation

behavior throw_items_in_trashcan(item:item, trashcan:item):
    body:
        achieve_once inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with the known ID since it has been visited earlier
        
        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select a trashcan
        
        foreach item: item:
        # Iterate over all items inside the fridge to throw them into the trashcan
            if inside(item, fridge):
                throw_items_in_trashcan(item, trashcan)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Throw all the items in the fridge to the trashcan.
Action History:
['walk_executor(fridge_289)']
Time info:
Time consume: 514 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 101
goal generate times: 10
goal correct times: 0
action_num: 1

Task complete rate:
Keystate: k1 - Requires: 150 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
