From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup and pour milk into it.', '2. Heat the cup of milk in the microwave.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_cupboard_117(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(measuring_cup,cupboard_instance)
        else:
            exp(measuring_cup,cupboard_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cupboard_instance]=True
        close[cupboard_instance,measuring_cup]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2133_around_cupboard_117(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_milk_into_cup(cup:item, milk:item):
    body:
        achieve_once inside(milk, cup)

def has_a_cup():
    # Check if there is a cup available
    symbol cup_exists = exists c: item : (is_cup(c))
    return cup_exists

behavior __goal__():
    body:
        if has_a_cup():
            # If theres a cup, use it for pouring milk
            bind cup: item where:
                is_cup(cup)
            # Select the cup
            bind milk: item where:
                is_milk(milk)
            # Select the milk
            pour_milk_into_cup(cup, milk)
        else:
            # If theres no known cup, search for a cup
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Find a cup")

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior pour_milk_into_cup(cup:item, milk:item):
    body:
        achieve_once inside(milk, cup)

def has_a_cup():
    # Check if there is a cup available
    symbol cup_exists = exists c: item : (is_cup(c))
    return cup_exists

behavior __goal__():
    body:
        if has_a_cup():
            # If theres a cup, use it for pouring milk
            bind cup: item where:
                is_cup(cup)
            # Select the cup
            bind milk: item where:
                is_milk(milk)
            # Select the milk
            pour_milk_into_cup(cup, milk)
        else:
            # If theres no known cup, search for a cup
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Find a cup")

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(cup_2132, cupboard_117)
Fail to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Fail to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(cup_2132, kitchen_counter_122)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_122)
Fail to find cup_2132 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)exp(cup_2132, sink_19)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, mat_32, phone_2029, cleaning_solution_2143, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
exp(cup_2132, sink_19)
Fail to find cup_2132 around sink_19. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(cup_2132, kitchen_counter_119)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_119)
Fail to find cup_2132 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(cup_2132, kitchen_counter_123)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: Locate dining_room_41. Once inside, find table_114. Cup_2132 is on table_114. Look for any cups on the table, and identify cup_2132 among them.
Re-decompose: None

##############################
From agent.py
Human Instruction: Locate dining_room_41. Once inside, find table_114. Cup_2132 is on table_114. Look for any cups on the table, and identify cup_2132 among them.

The actions you have taken:
Action 1: Walk to cupboard_117.
Action 2: look for cup_2132 around cupboard_117.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for cup_2132 around cupboard_118.
Action 6: Walk to kitchen_counter_122.
Action 7: look for cup_2132 around kitchen_counter_122.
Action 8: Walk to sink_19.
Action 9: look for cup_2132 around sink_19.
Action 10: Walk to kitchen_counter_119.
Action 11: look for cup_2132 around kitchen_counter_119.
Action 12: Walk to kitchen_counter_123.

##############################
From agent.py
exp(cup_2132, kitchen_counter_123)
Fail to find cup_2132 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Robot is close to the cup_2132. 
##############################
From agent.py
putin_executor(milk_2115, cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Robot is close to the cup_2132. milk_2115 is close cup_2132. cup_2132 is close milk_2115. milk_2115 is inside cup_2132. milk_2115 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fryingpan_2154(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(food_egg,fryingpan_instance)
        else:
            exp(food_egg,fryingpan_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fryingpan_instance]=True
        close[fryingpan_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(microwave:item, cup:item):
    body:
        achieve_once open(microwave) # Open the microwave door
        achieve_once inside(cup, microwave) # Place the cup of milk inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        # Locate a microwave
        
        bind cup: item where:
            is_cup(cup) and inside(cup, dining_room_41) and id[cup] == 2132
        # Locate cup_2132 which is in the dining_room_41
        
        heat_milk(microwave, cup)
        # Heat the cup of milk in the microwave

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room_41; available variables: [Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior heat_milk(microwave: item, cup: item):
    body:
        achieve_once open(microwave) # Open the microwave door
        achieve_once inside(cup, microwave) # Place the cup of milk inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        # Locate a microwave
        
        bind cup: item where:
            is_cup(cup) and inside(cup, dining_room_41) and id[cup] == 2132
        # Locate cup_2132 which is in the dining_room_41
        
        bind dining_room_41: item where:
            is_dining_room(dining_room_41)
        
        heat_milk(microwave, cup)
        # Heat the cup of milk in the microwave

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2139_around_washing_machine_2079(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

behavior find_stereo_2050_around_tvstand_116(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
def is_microwave_ready(microwave:item):
    # Check if the microwave is ready for use, meaning its off and closed
    symbol microwave_ready = exists state: bool : (is_off(microwave) and closed(microwave))
    return microwave_ready

behavior heat_milk(microwave:item, cup:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup of milk inside the microwave

behavior start_microwave(microwave:item):
    body:
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
       
        bind cup: item where:
            is_cup(cup) and on(cup, table_114)
        
        if is_microwave_ready(microwave):
            # Check if the microwave is ready for use
            heat_milk(microwave, cup) 
            # Place the cup of milk in the microwave
            start_microwave(microwave)
            # Start the microwave to heat the milk
        
        else:
            # If the microwave is not ready, inspect its state
            observe(microwave, "Check if the microwave is off and closed")
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":


##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def is_microwave_ready(microwave:item):
    # Check if the microwave is ready for use, meaning its off and closed
    symbol microwave_ready = exists state: bool : (is_off(microwave) and closed(microwave))
    return microwave_ready

behavior heat_milk(microwave:item, cup:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup of milk inside the microwave

behavior start_microwave(microwave:item):
    body:
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
       
        bind cup: item where:
            is_cup(cup) and on(cup, table_114)
        
        if is_microwave_ready(microwave):
            # Check if the microwave is ready for use
            heat_milk(microwave, cup) 
            # Place the cup of milk in the microwave
            start_microwave(microwave)
            # Start the microwave to heat the milk
        
        else:
            # If the microwave is not ready, inspect its state
            observe(microwave, "Check if the microwave is off and closed")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":


##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tea_bag_2023_around_microwave_135(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(tea_bag,microwave_instance)
        else:
            exp(tea_bag,microwave_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,microwave_instance]=True
        close[microwave_instance,tea_bag]=True
    

behavior find_sauce_2148_around_fridge_126(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

behavior find_shampoo_2019_around_bathroom_cabinet_17(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(shampoo,bathroom_cabinet_instance)
        else:
            exp(shampoo,bathroom_cabinet_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,shampoo]=True
    

#goal_representation
 
behavior open_microwave(microwave:item):
    body:
        achieve_once open(microwave)
        # Open the microwave door

behavior place_cup_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup of milk inside the microwave

behavior close_microwave(microwave:item):
    body:
        achieve_once closed(microwave)
        # Close the microwave door

behavior turn_on_microwave(microwave:item):
    body:
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        
        bind cup: item where:
            is_cup(cup) and on(cup, table_114)

        if is_microwave_ready(microwave):
            open_microwave(microwave)
            place_cup_in_microwave(cup, microwave)
            close_microwave(microwave)
            turn_on_microwave(microwave)
        else:
            observe(microwave, "Check if the microwave is off and closed")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_cup_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Put the cup inside the microwave
        
behavior start_microwave(microwave:item):
    body:
        achieve_once closed(microwave)
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        # Select cup with ID 2132

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        place_cup_in_microwave(cup, microwave)
        # Place the cup in the microwave
        
        start_microwave(microwave)
        # Start the microwave

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_cup_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Put the cup inside the microwave
        
behavior start_microwave(microwave:item):
    body:
        achieve_once closed(microwave)
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        # Select cup with ID 2132

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        place_cup_in_microwave(cup, microwave)
        # Place the cup in the microwave
        
        start_microwave(microwave)
        # Start the microwave

##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)open_executor(microwave_135)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(microwave_135)putin_executor(cup_2132, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
grab_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the cup_2132. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
putin_executor(cup_2132, microwave_135)
Robot find: Robot is close to the cup_2132. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. cup_2132 is inside microwave_135. microwave_135 is close cup_2132. cup_2132 is close microwave_135. cup_2132 released by right hand. 
##############################
From agent.py
close_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is closed. 
##############################
From agent.py
switchon_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Get a cup of milk and heat it by microwave.
Action History:
['walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_122)', 'walk_executor(sink_19)', 'walk_executor(kitchen_counter_119)', 'walk_executor(kitchen_counter_123)', 'walk_executor(table_114)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(cup_2132)', 'putin_executor(milk_2115, cup_2132)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(cup_2132)', 'grab_executor(cup_2132)', 'walk_executor(microwave_135)', 'putin_executor(cup_2132, microwave_135)', 'close_executor(microwave_135)', 'switchon_executor(microwave_135)']
Time info:
Time consume: 144 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 148
goal generate times: 4
goal correct times: 0
action_num: 20

Task complete rate:
1
Scene_id: 1
##############################
