From agent.py
Reset goals: The sub-goals are: 
['Use a pot to boil water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        # Check if the pot contains water, if not, check any faucet
        if not has_water(pot):
            foreach faucet: item:
                if is_faucet(faucet) and not visited(faucet):
                    observe(faucet, "Find a faucet to fill the pot with water")
                    # Observe the state of faucets to find where to fill the pot

            achieve_once has_water(pot)
            # Fill pot with water

        foreach stove: item:
            if is_stove(stove) and not visited(stove):
                observe(stove, "Ensure that the stove is ready for use")

        achieve_once on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        # Check if the pot contains water, if not, check any faucet
        if not has_water(pot):
            foreach faucet: item:
                if is_faucet(faucet) and not visited(faucet):
                    observe(faucet, "Find a faucet to fill the pot with water")
                    # Observe the state of faucets to find where to fill the pot

            achieve_once has_water(pot)
            # Fill pot with water

        foreach stove: item:
            if is_stove(stove) and not visited(stove):
                observe(stove, "Ensure that the stove is ready for use")

        achieve_once on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)obs(faucet_43, Find a faucet to fill the pot with water)walk_executor(faucet_232)obs(faucet_232, Find a faucet to fill the pot with water)walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)open_executor(stove_2065)obs(stove_2065, Ensure that the stove is ready for use)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
obs(faucet_43, Find a faucet to fill the pot with water)
Get this information:  faucet_43 is close to floor_2. faucet_43 is close to floor_3. faucet_43 is close to floor_4. faucet_43 is close to bathroom_cabinet_40. faucet_43 is close to bathroom_counter_41. faucet_43 is close to sink_42. faucet_43 is close to wall_9. faucet_43 is close to wall_12. faucet_43 is close to ceiling_16. faucet_43 is close to ceiling_21. faucet_43 is close to basket_for_clothes_2006. faucet_43 is close to character_65. faucet_43 is on bathroom_counter_41. faucet_43 is inside bathroom_1. faucet_43 is OFF. faucet_43 is CLEAN.
##############################
From agent.py
walk_executor(faucet_232)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
obs(faucet_232, Find a faucet to fill the pot with water)
Get this information:  faucet_232 is close to floor_7. faucet_232 is close to wall_11. faucet_232 is close to wall_15. faucet_232 is close to ceiling_18. faucet_232 is close to coffe_maker_290. faucet_232 is close to shower_36. faucet_232 is close to toaster_292. faucet_232 is close to toilet_37. faucet_232 is close to oven_295. faucet_232 is close to microwave_297. faucet_232 is close to floor_202. faucet_232 is close to floor_203. faucet_232 is close to floor_204. faucet_232 is close to wall_211. faucet_232 is close to wall_212. faucet_232 is close to ceiling_216. faucet_232 is close to ceiling_221. faucet_232 is close to cupboard_229. faucet_232 is close to kitchen_counter_230. faucet_232 is close to sink_231. faucet_232 is close to character_65. faucet_232 is facing drawing_238. faucet_232 is facing drawing_239. faucet_232 is facing drawing_240. faucet_232 is facing drawing_241. faucet_232 is facing drawing_242. faucet_232 is facing drawing_243. faucet_232 is on kitchen_counter_230. faucet_232 is inside dining_room_201. faucet_232 is OFF. faucet_232 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(pot_2069, cupboard_229)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)open_executor(stove_2065)obs(stove_2065, Ensure that the stove is ready for use)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
obs(stove_2065, Ensure that the stove is ready for use)
Get this information:  stove_2065 is on kitchen_counter_230. stove_2065 is inside dining_room_201. stove_2065 is close to kitchen_counter_230. stove_2065 is close to character_65. stove_2065 is OFF. stove_2065 is OPEN.
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Use pot to boil some water.
Action History:
['walk_executor(faucet_43)', 'walk_executor(faucet_232)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 46 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 10
goal generate times: 1
goal correct times: 0
action_num: 14

Task complete rate:
1
Scene_id: 0
##############################
