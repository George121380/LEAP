From agent.py
Reset goals: The sub-goals are: 
['1. Obtain a cup and pour milk into it.', '2. Heat the milk in the microwave.', '3. Add cereal to the heated milk.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2006_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior obtain_cup(cup:item):
    body:
        achieve_once inhand(cup)
        # Temporarily hold the cup in hand

behavior pour_milk(cup:item, milk:item):
    body:
        achieve has_water(cup) # Here the state has_water is used as a synonym for the cup containing milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        obtain_cup(cup)
        pour_milk(cup, milk)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior obtain_cup(cup:item):
    body:
        achieve_once inhand(cup)
        # Temporarily hold the cup in hand

behavior pour_milk(cup:item, milk:item):
    body:
        achieve has_water(cup) # Here the state has_water is used as a synonym for the cup containing milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        obtain_cup(cup)
        pour_milk(cup, milk)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_187)exp(cup_2087, wallshelf_187)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(wallshelf_187)
Robot find: Robot is close to the wallshelf_187. 
##############################
From agent.py
exp(cup_2087, wallshelf_187)
Fail to find cup_2087 around wallshelf_187. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_191)exp(cup_2087, wallshelf_191)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(wallshelf_191)
Robot find: Robot is close to the wallshelf_191. 
##############################
From agent.py
exp(cup_2087, wallshelf_191)
Fail to find cup_2087 around wallshelf_191. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_190)exp(cup_2087, wallshelf_190)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(wallshelf_190)
Robot find: Robot is close to the wallshelf_190. 
##############################
From agent.py
exp(cup_2087, wallshelf_190)
Fail to find cup_2087 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(cup_2087, kitchen_counter_132)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_132)
Fail to find cup_2087 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Go to dining_room_1. Locate table_123; cup_2087 is on table_123.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1. Locate table_123; cup_2087 is on table_123.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for cup_2087 around cupboard_131.
Action 4: Walk to wallshelf_187.
Action 5: look for cup_2087 around wallshelf_187.
Action 6: Walk to wallshelf_191.
Action 7: look for cup_2087 around wallshelf_191.
Action 8: Walk to wallshelf_190.
Action 9: look for cup_2087 around wallshelf_190.
Action 10: Walk to kitchen_counter_132.
Action 11: look for cup_2087 around kitchen_counter_132.
Action 12: Walk to kitchen_counter_128.

##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has obtained the cup by grabbing it but has not yet poured milk into it. You need to locate the milk and pour it into the cup to complete this sub-task.
##############################
From agent.py
Human Instruction: The robot has obtained the cup by grabbing it but has not yet poured milk into it. You need to locate the milk and pour it into the cup to complete this sub-task.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for cup_2087 around cupboard_131.
Action 4: Walk to wallshelf_187.
Action 5: look for cup_2087 around wallshelf_187.
Action 6: Walk to wallshelf_191.
Action 7: look for cup_2087 around wallshelf_191.
Action 8: Walk to wallshelf_190.
Action 9: look for cup_2087 around wallshelf_190.
Action 10: Walk to kitchen_counter_132.
Action 11: look for cup_2087 around kitchen_counter_132.
Action 12: Walk to kitchen_counter_128.
Action 13: look for cup_2087 around kitchen_counter_128.
Action 14: Walk to table_123.
Action 15: look for cup_2087 around table_123.
Action 16: Walk to cup_2087.
Action 17: Grab cup_2087.
Action 18: Walk to faucet_134.
Action 19: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk(milk:item):
    # Check if the item is milk
    symbol is_milk_item = is_milk(milk)
    return is_milk_item

behavior find_and_obtain_milk(cup:item, milk:item):
    body:
        if not inside(milk, cup):
            # Ensure milk ends up in the cup
            achieve_once inside(milk, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Find an instance of the cup
        
        if not exists milk:item : (is_milk(milk)):
            # If milk is not found, locate it
            foreach o: item:
                if is_milk(o) and not visited(o):
                    observe(o, "Look for milk")   
        else:
            bind milk: item where:
                is_milk(milk)
            # Select the instance of milk
            find_and_obtain_milk(cup, milk)
            # Pour the milk into the cup once obtained

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'milk') at line 5812, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def has_milk(milk:item):
    # Check if the item is milk
    symbol is_milk_item = is_milk(milk)
    return is_milk_item

def not_visited_milk_within_scope():
    # Function to find unvisited milk item in the scene
    symbol found_unvisited_milk = exists o: item : (is_milk(o) and not visited(o))
    return found_unvisited_milk

behavior find_and_obtain_milk(cup:item):
    body:
        if not exists milk: item : (is_milk(milk) and inside(milk, cup)):
            if not_visited_milk_within_scope():
                foreach o: item:
                    if is_milk(o) and not visited(o):
                        observe(o, "Look for milk")   
            else:
                bind milk: item where:
                    is_milk(milk)
                achieve_once inside(milk, cup)
                # Ensure milk ends up in the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Find an instance of the cup
        find_and_obtain_milk(cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'milk') at line 5807, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
def has_milk_in_cup(milk:item, cup:item):
    # Check if there is milk in the specified cup
    symbol milk_in_cup = is_milk(milk) and inside(milk, cup)
    return milk_in_cup

def not_visited_milk_within_scope():
    # Function to find unvisited milk item in the scene
    symbol found_unvisited_milk = exists o: item : (is_milk(o) and not visited(o))
    return found_unvisited_milk

behavior find_and_obtain_milk(cup:item):
    body:
        if not exists milk: item : has_milk_in_cup(milk, cup):
            if not_visited_milk_within_scope():
                foreach o: item:
                    if is_milk(o) and not visited(o):
                        observe(o, "Look for milk")   
            else:
                bind milk: item where:
                    is_milk(milk)
                achieve_once inside(milk, cup)
                # Ensure milk ends up in the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Find an instance of the cup
        find_and_obtain_milk(cup)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior locate_milk_and_pour_into_cup(cup:item):
    body:
        bind milk: item where:
            is_milk(milk)
        
        achieve_once inside(milk, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inhand(cup) # The character already has the cup

        bind milk: item where:
            is_milk(milk)

        locate_milk_and_pour_into_cup(cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior locate_milk_and_pour_into_cup(cup:item):
    body:
        bind milk: item where:
            is_milk(milk)
        
        achieve_once inside(milk, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inhand(cup) # The character already has the cup

        bind milk: item where:
            is_milk(milk)

        locate_milk_and_pour_into_cup(cup)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the cup_2087. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the cup_2087. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the cup_2087. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the cup_2087. Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the cup_2087. Robot is close to the fridge_140. Robot is close to the milk_2074. Grabbing milk_2074 by left hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the cup_2087. Robot is close to the milk_2074. 
##############################
From agent.py
putin_executor(milk_2074, cup_2087)
Robot find: Robot is close to the cup_2087. Robot is close to the milk_2074. milk_2074 is close cup_2087. milk_2074 is inside cup_2087. cup_2087 is close milk_2074. milk_2074 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_cup_filled_with_milk(cup:item):
    # Function to check if the cup is filled with milk
    symbol filled_with_milk=exists o: item : (is_milk(o) and inside(o, cup))
    return filled_with_milk

behavior heat_milk_in_microwave(milk:item, microwave:item):
    body:
        bind cup: item where:
            is_cup(cup) and is_cup_filled_with_milk(cup) 
        # Select the cup already filled with milk

        achieve_once inside(cup, microwave)
        # Place the cup of milk inside the microwave

        achieve_once closed(microwave)
        # Close the microwave door

        achieve_once is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(milk, microwave)
        # Invoke behavior to heat the milk in the microwave

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_cup_filled_with_milk(cup:item):
    # Function to check if the cup is filled with milk
    symbol filled_with_milk=exists o: item : (is_milk(o) and inside(o, cup))
    return filled_with_milk

behavior heat_milk_in_microwave(milk:item, microwave:item):
    body:
        bind cup: item where:
            is_cup(cup) and is_cup_filled_with_milk(cup) 
        # Select the cup already filled with milk

        achieve_once inside(cup, microwave)
        # Place the cup of milk inside the microwave

        achieve_once closed(microwave)
        # Close the microwave door

        achieve_once is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(milk, microwave)
        # Invoke behavior to heat the milk in the microwave

##############################
From agent.py-> find a plan in act()
walk_executor(microwave_149)open_executor(microwave_149)putin_executor(cup_2087, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
putin_executor(cup_2087, microwave_149)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is close cup_2087. cup_2087 is inside microwave_149. cup_2087 is close microwave_149. cup_2087 released by right hand. 
##############################
From agent.py
close_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is closed. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_kitchen_counter_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_cereal_on_cup(cup:item):
    # Function to check if there is cereal in the specified cup
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, cup))
    return has_cereal

behavior __goal__():
    body:
        bind cup_with_milk: item where:
            is_cup(cup_with_milk) and inside(milk_2074, cup_with_milk) # milk_2074 is already inside the cup_2087 as per your records

        if exists o: item : (is_food_cereal(o)):
            bind cereal: item where:
                is_food_cereal(cereal)
            achieve_once inside(cereal, cup_with_milk)

        else:
            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Check if this is cereal and is it available for use")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: milk_2074; available variables: [Variable<cup_with_milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2016_around_kitchen_counter_129(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#goal_representation
def has_cereal_on_cup(cup:item):
    # Function to check if there is cereal in the specified cup
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, cup))
    return has_cereal

behavior __goal__():
    body:
        bind cup_with_milk: item where:
            is_cup(cup_with_milk) and is_milk(milk_2074) and inside(milk_2074, cup_with_milk)

        if exists o: item : (is_food_cereal(o)):
            bind cereal: item where:
                is_food_cereal(cereal)
            achieve_once inside(cereal, cup_with_milk)

        else:
            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Check if this is cereal and is it available for use")
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: milk_2074; available variables: [Variable<cup_with_milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_kitchen_counter_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
def has_cereal_on_cup(cup:item):
    # Function to check if there is cereal in the specified cup
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, cup))
    return has_cereal

def is_milk_in_cup(cup_with_milk:item):
    # Function to check if there is milk in the specified cup
    symbol has_milk=exists milk: item : (is_milk(milk) and inside(milk, cup_with_milk))
    return has_milk

behavior __goal__():
    body:
        bind cup_with_milk: item where:
            is_cup(cup_with_milk) and is_milk_in_cup(cup_with_milk)

        if exists o: item : (is_food_cereal(o)):
            bind cereal: item where:
                is_food_cereal(cereal)
            achieve_once inside(cereal, cup_with_milk)

        else:
            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Check if this is cereal and is it available for use")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_cereal_on_cup(cup:item):
    # Function to check if there is cereal in the specified cup
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, cup))
    return has_cereal

def is_milk_in_cup(cup_with_milk:item):
    # Function to check if there is milk in the specified cup
    symbol has_milk=exists milk: item : (is_milk(milk) and inside(milk, cup_with_milk))
    return has_milk

behavior __goal__():
    body:
        bind cup_with_milk: item where:
            is_cup(cup_with_milk) and is_milk_in_cup(cup_with_milk)

        if exists o: item : (is_food_cereal(o)):
            bind cereal: item where:
                is_food_cereal(cereal)
            achieve_once inside(cereal, cup_with_milk)

        else:
            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Check if this is cereal and is it available for use")

##############################
From agent.py-> find a plan in act()
walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the fridge_140. Grabbing food_cereal_2048 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the microwave_149. 
##############################
From agent.py
putin_executor(food_cereal_2048, cup_2087)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the microwave_149. food_cereal_2048 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(wallshelf_187)', 'walk_executor(wallshelf_191)', 'walk_executor(wallshelf_190)', 'walk_executor(kitchen_counter_132)', 'walk_executor(kitchen_counter_128)', 'walk_executor(table_123)', 'walk_executor(cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(cup_2087)', 'putin_executor(milk_2074, cup_2087)', 'walk_executor(microwave_149)', 'open_executor(microwave_149)', 'putin_executor(cup_2087, microwave_149)', 'close_executor(microwave_149)', 'switchon_executor(microwave_149)', 'walk_executor(food_cereal_2048)', 'grab_executor(food_cereal_2048)', 'walk_executor(cup_2087)', 'putin_executor(food_cereal_2048, cup_2087)']
Time info:
Time consume: 204 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 116
goal generate times: 5
goal correct times: 2
action_num: 28

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
