From agent.py
Reset goals: The sub-goals are: 
['1. Heat the milk to a suitable temperature.', '2. Add cereal to the heated milk.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
# Define a behavior to heat milk to a suitable temperature using a microwave
behavior heat_milk(milk:item, microwave:item):
    body:
        achieve_once inside(milk, microwave)
        # Place the milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Bind a milk item
        bind microwave: item where:
            is_microwave(microwave)
        # Bind a microwave item
        heat_milk(milk, microwave)
        # Heat the milk using the microwave

#goal_representation_end

##############################
From agent.py->reset_goal
 
# Define a behavior to heat milk to a suitable temperature using a microwave
behavior heat_milk(milk:item, microwave:item):
    body:
        achieve_once inside(milk, microwave)
        # Place the milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Bind a milk item
        bind microwave: item where:
            is_microwave(microwave)
        # Bind a microwave item
        heat_milk(milk, microwave)
        # Heat the milk using the microwave

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(milk_2115, fridge_126)
Fail to find milk_2115 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(milk_2115, cupboard_117)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(milk_2115, cupboard_117)
Fail to find milk_2115 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(milk_2115, cupboard_118)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(milk_2115, cupboard_118)
Fail to find milk_2115 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(milk_2115, kitchen_counter_119)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_119)
Fail to find milk_2115 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)exp(milk_2115, oven_127)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
exp(milk_2115, oven_127)
Fail to find milk_2115 around oven_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(milk_2115, kitchen_counter_122)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find milk_2115 ?
Answer: You can find milk_2115 on table_114, which is located inside dining_room_41. Make sure to check on the table for the milk near any other items that might be placed there.
Re-decompose: None

##############################
From agent.py
Human Instruction: You can find milk_2115 on table_114, which is located inside dining_room_41. Make sure to check on the table for the milk near any other items that might be placed there.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for milk_2115 around fridge_126.
Action 5: Walk to cupboard_117.
Action 6: look for milk_2115 around cupboard_117.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for milk_2115 around cupboard_118.
Action 10: Walk to kitchen_counter_119.
Action 11: look for milk_2115 around kitchen_counter_119.
Action 12: Walk to oven_127.
Action 13: Open oven_127.
Action 14: look for milk_2115 around oven_127.
Action 15: Walk to kitchen_counter_122.

##############################
From agent.py
exp(milk_2115, kitchen_counter_122)
Fail to find milk_2115 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(milk_2115, table_114)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(milk_2115, table_114)
Find milk_2115. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the milk_2115. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
putin_executor(milk_2115, microwave_135)
Robot find: Robot is close to the milk_2115. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. milk_2115 is close microwave_135. microwave_135 is close milk_2115. milk_2115 is inside microwave_135. milk_2115 released by right hand. 
##############################
From agent.py
close_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is closed. 
##############################
From agent.py
switchon_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table]==114
        # Select table with ID 114 in the dining room

        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select milk with ID 2115
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        achieve inside(cereal, milk)
        # Add cereal to the milk

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2021_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_heated_milk(milk:item, cereal:item):
    body:
        achieve_once inside(cereal, milk)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk]==2115
        bind cereal: item where:
            is_food_cereal(cereal)
        add_cereal_to_heated_milk(milk, cereal)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
bind heated_milk: item where:
    is_milk(heated_milk) and inside(heated_milk, microwave_135)

bind cereal: item where:
    is_food_cereal(cereal)

behavior add_cereal_to_milk(milk:item, cereal:item):
    body:
        achieve_once inside(cereal, milk)

behavior __goal__():
    body:
        add_cereal_to_milk(heated_milk, cereal)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BIND', 'bind') at line 5496, column 1.
Expected one of: 
	* DOMAIN
	* _NEWLINE
	* INCLUDE
	* BEHAVIOR
	* GENERATOR
	* GOAL
	* FEATURE
	* $END
	* INIT
	* CONTROLLER
	* DEF
	* _PRAGMA_KEYWORD
	* UNDIRECTED_GENERATOR
	* TYPEDEF
	* IMPORT
	* OBJECTS
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#goal_representation
behavior add_cereal_to_milk(milk:item, cereal:item):
    body:
        achieve_once inside(cereal, milk)

behavior __goal__():
    body:
        bind heated_milk: item where:
            is_milk(heated_milk) and inside(heated_milk, microwave_135)
        
        bind cereal: item where:
            is_food_cereal(cereal)
        
        add_cereal_to_milk(heated_milk, cereal)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: microwave_135; available variables: [Variable<heated_milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2001_around_box_2038(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind box_instance:item where:
            is_box(box_instance) and id[box_instance]==2038
        achieve close_char(char,box_instance)
        if can_open(box_instance):
            achieve_once open(box_instance)
            exp(food_food,box_instance)
        else:
            exp(food_food,box_instance)
    eff:
        unknown[food_food]=False
        close[food_food,box_instance]=True
        close[box_instance,food_food]=True
    

#goal_representation
behavior add_cereal_to_milk(milk:item, cereal:item):
    body:
        achieve_once inside(cereal, milk)

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) and inside(milk_2115, microwave)
        
        bind heated_milk: item where:
            is_milk(heated_milk) and inside(heated_milk, microwave)
        
        bind cereal: item where:
            is_food_cereal(cereal)
        
        add_cereal_to_milk(heated_milk, cereal)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_119)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'walk_executor(kitchen_counter_122)', 'walk_executor(table_114)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(microwave_135)', 'putin_executor(milk_2115, microwave_135)', 'close_executor(microwave_135)', 'switchon_executor(microwave_135)']
Time info:
Time consume: 112 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 101
goal generate times: 4
goal correct times: 2
action_num: 19

Task complete rate:
Keystate: k1 - Requires: 14 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
