From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt to be ironed.', '2. Iron the shirt.', '3. Place the ironed shirt on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2117_around_basket_for_clothes_2078(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

behavior find_clothes_shirt_2158_around_basket_for_clothes_2078(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_shirt_present(shirt:item):
    # Function to check if specified item is recognized as a shirt in the current information
    return is_clothes_shirt(shirt)

behavior __goal__():
    body:
        if exists shirt: item : (is_clothes_shirt(shirt) and not visited(shirt)):
            # If we have identified any unvisited shirt already, move to it
            bind shirt: item where:
                is_clothes_shirt(shirt) and not visited(shirt)
            achieve close_char(char, shirt)

        else:
            # Observe all items that have not been visited until we identify a shirt
            foreach item: item:
                if not visited(item) and (is_clothes(item) or lookable(item)):
                    observe(item,"Check if it is a shirt")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_shirt_present(shirt:item):
    # Function to check if specified item is recognized as a shirt in the current information
    return is_clothes_shirt(shirt)

behavior __goal__():
    body:
        if exists shirt: item : (is_clothes_shirt(shirt) and not visited(shirt)):
            # If we have identified any unvisited shirt already, move to it
            bind shirt: item where:
                is_clothes_shirt(shirt) and not visited(shirt)
            achieve close_char(char, shirt)

        else:
            # Observe all items that have not been visited until we identify a shirt
            foreach item: item:
                if not visited(item) and (is_clothes(item) or lookable(item)):
                    observe(item,"Check if it is a shirt")

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2078)exp(clothes_shirt_2158, basket_for_clothes_2078)walk_executor(clothes_shirt_2158)
##############################
From agent.py
walk_executor(basket_for_clothes_2078)
Robot find: clothes_pants_2157, clothes_shirt_2158, clothes_socks_2159, clothes_skirt_2160, Robot is close to the clothes_pants_2157. Robot is close to the clothes_shirt_2158. Robot is close to the clothes_socks_2159. Robot is close to the clothes_skirt_2160. Robot is close to the basket_for_clothes_2078. 
##############################
From agent.py
exp(clothes_shirt_2158, basket_for_clothes_2078)
Find clothes_shirt_2158. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Iron the shirt.', '2. Put the shirt on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def iron_on(x: item):
    # Function to check if the iron is turned on
    symbol is_on= exists item1: item: (is_iron(item1) and is_on(item1))
    return is_on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and close_char(char, shirt)
        # Select a shirt item that is close to the character

        bind iron: item where:
            is_iron(iron)
        # Select an iron in the environment

        if iron_on(iron):
            # If the iron is already on, proceed with ironing
            achieve clean(shirt)       
        else:
            # If the iron is not on, ensure its plugged, on, and use it for ironing
            achieve plugged(iron)
            achieve is_on(iron)
            achieve clean(shirt) 

#goal_representation_end

##############################
From agent.py->reset_goal
 
def iron_on(x: item):
    # Function to check if the iron is turned on
    symbol is_on= exists item1: item: (is_iron(item1) and is_on(item1))
    return is_on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and close_char(char, shirt)
        # Select a shirt item that is close to the character

        bind iron: item where:
            is_iron(iron)
        # Select an iron in the environment

        if iron_on(iron):
            # If the iron is already on, proceed with ironing
            achieve clean(shirt)       
        else:
            # If the iron is not on, ensure its plugged, on, and use it for ironing
            achieve plugged(iron)
            achieve is_on(iron)
            achieve clean(shirt) 

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2144)exp(iron_2161, ironing_board_2144)walk_executor(iron_2161)plugin_executor(iron_2161)switchon_executor(iron_2161)walk_executor(clothes_shirt_2158)grab_executor(clothes_shirt_2158)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(clothes_shirt_2158)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(ironing_board_2144)
Robot find: Robot is close to the ironing_board_2144. 
##############################
From agent.py
exp(iron_2161, ironing_board_2144)
Fail to find iron_2161 around ironing_board_2144. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt and iron it.', '2. Put the ironed shirt on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2161_around_cupboard_117(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(iron,cupboard_instance)
        else:
            exp(iron,cupboard_instance)
    eff:
        unknown[iron]=False
        close[iron,cupboard_instance]=True
        close[cupboard_instance,iron]=True
    

behavior find_clothes_pants_2157_around_washing_machine_2079(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_pants,washing_machine_instance)
        else:
            exp(clothes_pants,washing_machine_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,washing_machine_instance]=True
        close[washing_machine_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
def has_iron_near_ironing_board(ironing_board:item):
    # Function to check if there is an iron near a specified ironing board
    symbol has_iron_near= exists o: item : (is_iron(o) and close(o, ironing_board))
    return has_iron_near

behavior find_shirt_and_iron_it(shirt:item, ironing_board:item):
    body:
        achieve_once inhand(shirt)
        # Pick up the shirt momentarily
        if has_iron_near_ironing_board(ironing_board):
            bind iron: item where:
                is_iron(iron) and close(iron, ironing_board)
            # Ensure the iron is plugged in and switched on for use
            achieve plugged(iron)
            achieve is_on(iron)
            # Iron the shirt
            achieve clean(shirt)

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        # Assume the basket is known, attempt to locate the shirt within
        foreach shirt: item:
            if is_clothes_shirt(shirt) and inside(shirt, basket):
                observe(shirt, "Check if the shirt is inside the basket")

        if exists shirt: item : (is_clothes_shirt(shirt) and inside(shirt, basket)):
            bind shirt: item where:
                is_clothes_shirt(shirt) and inside(shirt, basket)
                # Validate the shirt is inside the basket
            achieve close_char(char, shirt)
            # Approach the basket if the shirt is found
            bind ironing_board: item where:
                is_ironing_board(ironing_board)
            # Move to the ironing board
            achieve close_char(char, ironing_board)
            find_shirt_and_iron_it(shirt, ironing_board)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2161_around_cupboard_117(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(iron,cupboard_instance)
        else:
            exp(iron,cupboard_instance)
    eff:
        unknown[iron]=False
        close[iron,cupboard_instance]=True
        close[cupboard_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def is_ironing_board_present():
    # Check if ironing_board_2144 is already observed and is known to be in the scene
    symbol board_found = exists board: item : (is_ironing_board(board))
    return board_found

def is_shirt_near_basket():
    # Check if the shirt is known to be near the basket
    symbol shirt_known = exists shirt: item : (is_clothes_shirt(shirt) and close(shirt, basket_for_clothes_2078))
    return shirt_known

behavior find_and_prepare_iron():
    body:
        bind iron: item where:
            is_iron(iron)
        achieve close_char(char, iron)

behavior engage_ironing_board():
    body:
        bind board: item where:
            is_ironing_board(board)
        achieve close_char(char, board)

behavior handle_shirt():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and close(shirt, basket_for_clothes_2078)
        achieve_once inhand(shirt)

behavior __goal__():
    body:
        # Check if the ironing board is already known and close_char can be directed correctly
        if is_ironing_board_present():
            engage_ironing_board()
        else:
            # Explore for the ironing board
            foreach board: item:
                if is_ironing_board(board) and not visited(board):
                    observe(board, "Locate ironing board and gather necessary items")

        # Check if the shirt is known to be near the basket, else search for it actively
        if not is_shirt_near_basket():
            foreach shirt: item:
                if is_clothes_shirt(shirt) and not visited(shirt):
                    observe(basket_for_clothes_2078, "Find the shirt close to the basket")
        
        # Initiate finding and preparing the iron
        find_and_prepare_iron()

        # Progress to handling the shirt
        handle_shirt()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: basket_for_clothes_2078; available variables: [Variable<shirt: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_hat_2117_around_washing_machine_2079(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_hat,washing_machine_instance)
        else:
            exp(clothes_hat,washing_machine_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,washing_machine_instance]=True
        close[washing_machine_instance,clothes_hat]=True
    

behavior find_iron_2161_around_cupboard_117(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(iron,cupboard_instance)
        else:
            exp(iron,cupboard_instance)
    eff:
        unknown[iron]=False
        close[iron,cupboard_instance]=True
        close[cupboard_instance,iron]=True
    

#goal_representation
 
def is_ironing_board_present():
    # Check if ironing_board_2144 is already observed and is known to be in the scene
    symbol board_found = exists board: item : (is_ironing_board(board))
    return board_found

def is_shirt_near_basket(basket: item):
    # Check if the shirt is known to be near the basket
    symbol shirt_known = exists shirt: item : (is_clothes_shirt(shirt) and close(shirt, basket))
    return shirt_known

behavior find_and_prepare_iron(iron: item):
    body:
        achieve close_char(char, iron)

behavior engage_ironing_board(board: item):
    body:
        achieve close_char(char, board)

behavior handle_shirt(shirt: item):
    body:
        achieve_once inhand(shirt)

behavior __goal__():
    body:
        bind basket_for_clothes_2078: item where:
            is_basket_for_clothes(basket_for_clothes_2078)
        
        # Check if the ironing board is already known and close_char can be directed correctly
        if is_ironing_board_present():
            bind board: item where:
                is_ironing_board(board)
            engage_ironing_board(board)
        else:
            # Explore for the ironing board
            foreach board: item:
                if is_ironing_board(board) and not visited(board):
                    observe(board, "Locate ironing board and gather necessary items")

        # Check if the shirt is known to be near the basket, else search for it actively
        if not is_shirt_near_basket(basket_for_clothes_2078):
            foreach shirt: item:
                if is_clothes_shirt(shirt) and not visited(shirt):
                    observe(basket_for_clothes_2078, "Find the shirt close to the basket")
        
        bind iron_2161: item where:
            is_iron(iron_2161)
        # Initiate finding and preparing the iron
        find_and_prepare_iron(iron_2161)

        bind clothes_shirt_2158: item where:
            is_clothes_shirt(clothes_shirt_2158) and close(clothes_shirt_2158, basket_for_clothes_2078)
        # Progress to handling the shirt
        handle_shirt(clothes_shirt_2158)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2155_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_rag_2025_around_cupboard_117(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(rag,cupboard_instance)
        else:
            exp(rag,cupboard_instance)
    eff:
        unknown[rag]=False
        close[rag,cupboard_instance]=True
        close[cupboard_instance,rag]=True
    

behavior find_brush_2002_around_cupboard_118(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(brush,cupboard_instance)
        else:
            exp(brush,cupboard_instance)
    eff:
        unknown[brush]=False
        close[brush,cupboard_instance]=True
        close[cupboard_instance,brush]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once clean(shirt) # Ensure the shirt is clean before ironing
        achieve_once plugged(iron) # Plug in the iron
        achieve_once is_on(iron) # Turn on the iron
        achieve close(shirt, ironing_board) # Ensure the shirt is close to the ironing board for ironing
        achieve_once inhand(shirt) # Temporarily hold the shirt while ironing
        # Ironing process assumed as ironing needs to be held with free hands

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2158
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2144
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        find_and_iron_shirt(shirt, iron, ironing_board)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Iron a shirt, and put it in on the bed.
Action History:
['walk_executor(basket_for_clothes_2078)', 'walk_executor(ironing_board_2144)']
Time info:
Time consume: 88 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 119
goal generate times: 5
goal correct times: 0
action_num: 2

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: 0.0
Scene_id: 1
##############################
