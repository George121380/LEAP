From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the sliced bananas until golden brown.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_kitchen_counter_122(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_bananas(banana: item):
    body:
        achieve clean(banana)  # Ensure the bananas are clean before peeling them
        # Peel the bananas and then move on to slicing them

behavior slice_bananas(banana: item):
    body:
        achieve cut(banana)  # Slice the bananas into appropriate pieces

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        peel_bananas(banana)
        slice_bananas(banana)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_bananas(banana: item):
    body:
        achieve clean(banana)  # Ensure the bananas are clean before peeling them
        # Peel the bananas and then move on to slicing them

behavior slice_bananas(banana: item):
    body:
        achieve cut(banana)  # Slice the bananas into appropriate pieces

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        peel_bananas(banana)
        slice_bananas(banana)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_banana_2083, kitchen_counter_122)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_banana_2083)switchoff_executor(faucet_20)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_banana_2083, kitchen_counter_122)
Fail to find food_banana_2083 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(food_banana_2083, cupboard_117)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_banana_2083)switchoff_executor(faucet_20)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(food_banana_2083, cupboard_117)
Fail to find food_banana_2083 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_banana_2083, fridge_126)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_banana_2083)switchoff_executor(faucet_20)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_banana_2083, fridge_126)
Find food_banana_2083. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_banana_2083 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_banana_2083, cutting_board_2123)
Robot find: Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_banana_2083. food_banana_2083 is close cutting_board_2123. food_banana_2083 is on cutting_board_2123. food_banana_2083 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_76)
Robot find: Robot is close to the knifeblock_76. 
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Fail to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(orchid_285)exp(knife_2122, orchid_285)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(orchid_285)
Robot find: shoes_2033, pillow_287, shampoo_2019, pillow_286, pencil_2014, phone_2017, drawing_288, brush_2002, Robot is close to the orchid_285. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
exp(knife_2122, orchid_285)
Fail to find knife_2122 around orchid_285. 
##############################
From agent.py-> find a plan in act()
walk_executor(toaster_132)open_executor(toaster_132)exp(knife_2122, toaster_132)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(toaster_132)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the toaster_132. 
##############################
From agent.py
open_executor(toaster_132)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the toaster_132. toaster_132 is opened. 
##############################
From agent.py
exp(knife_2122, toaster_132)
Fail to find knife_2122 around toaster_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)exp(knife_2122, fryingpan_2154)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2122 ?
Answer: The target item, knife_2122, is located inside dining_room_41. You can find it on top of table_114. Look for table_114 in the dining room and you will find knife_2122 placed on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, knife_2122, is located inside dining_room_41. You can find it on top of table_114. Look for table_114 in the dining room and you will find knife_2122 placed on it.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for food_banana_2083 around kitchen_counter_122.
Action 3: Walk to cupboard_117.
Action 4: look for food_banana_2083 around cupboard_117.
Action 5: Walk to fridge_126.
Action 6: Switch off fridge_126.
Action 7: Open fridge_126.
Action 8: look for food_banana_2083 around fridge_126.
Action 9: Grab food_banana_2083.
Action 10: Walk to cutting_board_2123.
Action 11: Put food_banana_2083 on cutting_board_2123.
Action 12: Walk to knifeblock_76.
Action 13: look for knife_2122 around knifeblock_76.
Action 14: Walk to orchid_285.
Action 15: look for knife_2122 around orchid_285.
Action 16: Walk to toaster_132.
Action 17: Open toaster_132.
Action 18: look for knife_2122 around toaster_132.
Action 19: Walk to fryingpan_2154.

##############################
From agent.py
exp(knife_2122, fryingpan_2154)
Fail to find knife_2122 around fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(knife_2122, kitchen_counter_123)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(knife_2122, kitchen_counter_123)
Fail to find knife_2122 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
cut_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to peel the banana before slicing it. Ensure the bananas are clean and then peel them. After that, the slicing process can be considered complete.
##############################
From agent.py
Human Instruction: You need to peel the banana before slicing it. Ensure the bananas are clean and then peel them. After that, the slicing process can be considered complete.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for food_banana_2083 around kitchen_counter_122.
Action 3: Walk to cupboard_117.
Action 4: look for food_banana_2083 around cupboard_117.
Action 5: Walk to fridge_126.
Action 6: Switch off fridge_126.
Action 7: Open fridge_126.
Action 8: look for food_banana_2083 around fridge_126.
Action 9: Grab food_banana_2083.
Action 10: Walk to cutting_board_2123.
Action 11: Put food_banana_2083 on cutting_board_2123.
Action 12: Walk to knifeblock_76.
Action 13: look for knife_2122 around knifeblock_76.
Action 14: Walk to orchid_285.
Action 15: look for knife_2122 around orchid_285.
Action 16: Walk to toaster_132.
Action 17: Open toaster_132.
Action 18: look for knife_2122 around toaster_132.
Action 19: Walk to fryingpan_2154.
Action 20: look for knife_2122 around fryingpan_2154.
Action 21: Walk to kitchen_counter_123.
Action 22: look for knife_2122 around kitchen_counter_123.
Action 23: Walk to knife_2035.
Action 24: Grab knife_2035.
Action 25: Walk to food_banana_2083.
Action 26: Cut food_banana_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_light_73(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==73
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(knife,light_instance)
        else:
            exp(knife,light_instance)
    eff:
        unknown[knife]=False
        close[knife,light_instance]=True
        close[light_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def clean_banana(banana:item):
    # Function to ensure the banana is clean before proceeding
    if not clean(banana):
        wash(banana)

behavior peel_and_slice_banana(banana:item, cutting_board:item, knife:item):
    body:
        clean_banana(banana) # Before peeling or slicing, ensure the banana is clean
        achieve_once on(banana, cutting_board) # Place the banana on the cutting board
        achieve_once inhand(knife) # Take the knife in hand to peel and slice
        achieve cut(banana) # Peel and slice the banana continuously

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana to be peeled and sliced
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        peel_and_slice_banana(banana, cutting_board, knife)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_sink_120(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(knife,sink_instance)
        else:
            exp(knife,sink_instance)
    eff:
        unknown[knife]=False
        close[knife,sink_instance]=True
        close[sink_instance,knife]=True
    

#goal_representation
behavior peel_and_slice_banana(banana:item, cutting_board:item, knife:item):
    body:
        clean_banana(banana) # Before peeling or slicing, ensure the banana is clean
        achieve_once on(banana, cutting_board) # Place the banana on the cutting board
        achieve_once inhand(knife) # Take the knife in hand to peel and slice
        achieve cut(banana) # Peel and slice the banana continuously

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana to be peeled and sliced
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        peel_and_slice_banana(banana, cutting_board, knife)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function clean_banana not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tea_bag_2023_around_cupboard_118(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea_bag,cupboard_instance)
        else:
            exp(tea_bag,cupboard_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,cupboard_instance]=True
        close[cupboard_instance,tea_bag]=True
    

behavior find_knife_2122_around_sink_120(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(knife,sink_instance)
        else:
            exp(knife,sink_instance)
    eff:
        unknown[knife]=False
        close[knife,sink_instance]=True
        close[sink_instance,knife]=True
    

#goal_representation
 
behavior peel_and_slice_banana(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board) # Place the banana on the cutting board
        achieve_once inhand(knife) # Take the knife in hand to peel and slice
        achieve cut(banana) # Peel and slice the banana continuously

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana to be peeled and sliced
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        peel_and_slice_banana(banana, cutting_board, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior peel_and_slice_banana(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board) # Place the banana on the cutting board
        achieve_once inhand(knife) # Take the knife in hand to peel and slice
        achieve cut(banana) # Peel and slice the banana continuously

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana to be peeled and sliced
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        peel_and_slice_banana(banana, cutting_board, knife)

##############################
From agent.py-> find a plan in act()
cut_executor(food_banana_2083)
##############################
From agent.py
cut_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to peel the banana before slicing it. Ensure that the bananas are clean and peeled; the slicing process alone is incomplete.
##############################
From agent.py
Human Instruction: You need to peel the banana before slicing it. Ensure that the bananas are clean and peeled; the slicing process alone is incomplete.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for food_banana_2083 around kitchen_counter_122.
Action 3: Walk to cupboard_117.
Action 4: look for food_banana_2083 around cupboard_117.
Action 5: Walk to fridge_126.
Action 6: Switch off fridge_126.
Action 7: Open fridge_126.
Action 8: look for food_banana_2083 around fridge_126.
Action 9: Grab food_banana_2083.
Action 10: Walk to cutting_board_2123.
Action 11: Put food_banana_2083 on cutting_board_2123.
Action 12: Walk to knifeblock_76.
Action 13: look for knife_2122 around knifeblock_76.
Action 14: Walk to orchid_285.
Action 15: look for knife_2122 around orchid_285.
Action 16: Walk to toaster_132.
Action 17: Open toaster_132.
Action 18: look for knife_2122 around toaster_132.
Action 19: Walk to fryingpan_2154.
Action 20: look for knife_2122 around fryingpan_2154.
Action 21: Walk to kitchen_counter_123.
Action 22: look for knife_2122 around kitchen_counter_123.
Action 23: Walk to knife_2035.
Action 24: Grab knife_2035.
Action 25: Walk to food_banana_2083.
Action 26: Cut food_banana_2083.
Action 27: Cut food_banana_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_sink_120(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(knife,sink_instance)
        else:
            exp(knife,sink_instance)
    eff:
        unknown[knife]=False
        close[knife,sink_instance]=True
        close[sink_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_and_slice_bananas(banana: item, knife: item, cutting_board: item):
    body:
        achieve clean(banana) # Ensure the banana is clean before peeling
        achieve_once on(banana, cutting_board) # Place the banana on the cutting board temporarily for slicing
        achieve_once cut(banana) # Slice the peeled banana

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana to peel and slice
        
        bind knife: item where:
            is_knife(knife)
        # Select an available knife for slicing

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select an available cutting board for slicing
        
        achieve_once on(banana, cutting_board)
        # After fetching the banana, place it on the cutting board
        
        peel_and_slice_bananas(banana, knife, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior peel_and_slice_bananas(banana: item, knife: item, cutting_board: item):
    body:
        achieve clean(banana) # Ensure the banana is clean before peeling
        achieve_once on(banana, cutting_board) # Place the banana on the cutting board temporarily for slicing
        achieve_once cut(banana) # Slice the peeled banana

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana to peel and slice
        
        bind knife: item where:
            is_knife(knife)
        # Select an available knife for slicing

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select an available cutting board for slicing
        
        achieve_once on(banana, cutting_board)
        # After fetching the banana, place it on the cutting board
        
        peel_and_slice_bananas(banana, knife, cutting_board)

##############################
From agent.py-> find a plan in act()
cut_executor(food_banana_2083)
##############################
From agent.py
cut_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to peel the banana before slicing it. So far, you've only sliced the banana, which does not satisfy the full requirements of the task. Ensure the banana is peeled before slicing.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_clothes_dress_2116_around_basket_for_clothes_2078(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_with_oil(pan:item):
    # Function to check if a frying pan has oil inside it
    symbol has_oil=exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

behavior heat_oil(pan:item, stove:item):
    body:
        achieve_once closed(stove)
        achieve_once is_on(stove)
        
        if not is_fryingpan_with_oil(pan):
            # Ensure there is oil in the frying pan before heating
            bind oil: item where:
                is_oil(oil)
            achieve_once inside(oil, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind stove: item where:
            is_stove(stove)
            
        heat_oil(pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_fryingpan_with_oil(pan:item):
    # Function to check if a frying pan has oil inside it
    symbol has_oil=exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

behavior heat_oil(pan:item, stove:item):
    body:
        achieve_once closed(stove)
        achieve_once is_on(stove)
        
        if not is_fryingpan_with_oil(pan):
            # Ensure there is oil in the frying pan before heating
            bind oil: item where:
                is_oil(oil)
            achieve_once inside(oil, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        bind stove: item where:
            is_stove(stove)
            
        heat_oil(pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. oil_2149 is inside fryingpan_2154. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2122_around_cupboard_118(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior fry_bananas(fryingpan:item, banana:item):
    body:
        achieve_once inside(banana, fryingpan)
        achieve cut(banana)
        observe(fryingpan, "Check if the bananas are golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind banana: item where:
            is_food_banana(banana) and cut(banana)

        fry_bananas(fryingpan, banana)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2035_around_light_73(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==73
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(knife,light_instance)
        else:
            exp(knife,light_instance)
    eff:
        unknown[knife]=False
        close[knife,light_instance]=True
        close[light_instance,knife]=True
    

behavior find_pot_2138_around_sink_19(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(banana: item, pan: item):
    body:
        achieve_once inside(banana, pan)
        # Place banana slices inside the frying pan
        achieve_once is_on(stove)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the sliced banana

        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_bananas(banana, pan)
        # Fry the bananas in the pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<banana: item>, Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_bowl_2141(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(oil,bowl_instance)
        else:
            exp(oil,bowl_instance)
    eff:
        unknown[oil]=False
        close[oil,bowl_instance]=True
        close[bowl_instance,oil]=True
    

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_knife_2035_around_light_73(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==73
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(knife,light_instance)
        else:
            exp(knife,light_instance)
    eff:
        unknown[knife]=False
        close[knife,light_instance]=True
        close[light_instance,knife]=True
    

#goal_representation
behavior fry_bananas(banana: item, pan: item, stove: item):
    body:
        achieve_once inside(banana, pan)
        # Place banana slices inside the frying pan
        achieve_once is_on(stove)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the sliced banana

        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_bananas(banana, pan, stove)
        # Fry the bananas in the pan
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2122_around_sink_120(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(knife,sink_instance)
        else:
            exp(knife,sink_instance)
    eff:
        unknown[knife]=False
        close[knife,sink_instance]=True
        close[sink_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(bananas: item, pan: item, stove: item):
    body:
        achieve cut(bananas)
        # Ensure bananas are sliced before frying
        achieve inside(oil_2149, pan)
        # Ensure the pan has oil inside for frying bananas
        achieve_once is_on(stove)
        # Turn on the stove to start frying
        achieve golden_brown(bananas)
        # Fry bananas until they turn golden brown

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135
        
        bind pan: item where:
            is_fryingpan(pan) and id[pan] == 2154
        # Select the frying pan with ID 2154
        
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select the sliced bananas for frying, confirming they are cut
        
        fry_bananas(bananas, pan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: oil_2149; available variables: [Variable<bananas: item>, Variable<pan: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_bowl_2141(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(oil,bowl_instance)
        else:
            exp(oil,bowl_instance)
    eff:
        unknown[oil]=False
        close[oil,bowl_instance]=True
        close[bowl_instance,oil]=True
    

behavior find_tea_2066_around_bookshelf_196(tea:item):
    goal: not unknown(tea)
    body:
        assert is_tea(tea)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(tea,bookshelf_instance)
        else:
            exp(tea,bookshelf_instance)
    eff:
        unknown[tea]=False
        close[tea,bookshelf_instance]=True
        close[bookshelf_instance,tea]=True
    

behavior find_knife_2035_around_light_73(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==73
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(knife,light_instance)
        else:
            exp(knife,light_instance)
    eff:
        unknown[knife]=False
        close[knife,light_instance]=True
        close[light_instance,knife]=True
    

#goal_representation
 
behavior fry_bananas(bananas: item, pan: item, stove: item, oil: item):
    body:
        achieve cut(bananas)
        # Ensure bananas are sliced before frying
        achieve inside(oil, pan)
        # Ensure the pan has oil inside for frying bananas
        achieve_once is_on(stove)
        # Turn on the stove to start frying
        achieve golden_brown(bananas)
        # Fry bananas until they turn golden brown

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135
        
        bind pan: item where:
            is_fryingpan(pan) and id[pan] == 2154
        # Select the frying pan with ID 2154
        
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select the sliced bananas for frying, confirming they are cut
        
        bind oil: item where:
            is_oil(oil) and id[oil] == 2149
        # Select the oil with ID 2149
        
        fry_bananas(bananas, pan, stove, oil)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function golden_brown not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2122_around_sink_120(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(knife,sink_instance)
        else:
            exp(knife,sink_instance)
    eff:
        unknown[knife]=False
        close[knife,sink_instance]=True
        close[sink_instance,knife]=True
    

#goal_representation
behavior fry_bananas(bananas: item, pan: item, stove: item, oil: item):
    body:
        achieve cut(bananas)
        # Ensure bananas are sliced before frying
        achieve inside(oil, pan)
        # Ensure the pan has oil inside for frying bananas
        achieve_once is_on(stove)
        # Turn on the stove to start frying
        achieve golden(bananas)
        # Fry bananas

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135
        
        bind pan: item where:
            is_fryingpan(pan) and id[pan] == 2154
        # Select the frying pan with ID 2154
        
        bind bananas: item where:
            is_food_banana(bananas) and cut(bananas)
        # Select the sliced bananas for frying, confirming they are cut
        
        bind oil: item where:
            is_oil(oil) and id[oil] == 2149
        # Select the oil with ID 2149
        
        fry_bananas(bananas, pan, stove, oil)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(cupboard_117)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_banana_2083)', 'walk_executor(cutting_board_2123)', 'put_executor(food_banana_2083, cutting_board_2123)', 'walk_executor(knifeblock_76)', 'walk_executor(orchid_285)', 'walk_executor(toaster_132)', 'open_executor(toaster_132)', 'walk_executor(fryingpan_2154)', 'walk_executor(kitchen_counter_123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_banana_2083)', 'cut_executor(food_banana_2083)', 'cut_executor(food_banana_2083)', 'cut_executor(food_banana_2083)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2149, fryingpan_2154)']
Time info:
Time consume: 223 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 143
goal generate times: 7
goal correct times: 4
action_num: 26

Task complete rate:
Keystate: k1 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
