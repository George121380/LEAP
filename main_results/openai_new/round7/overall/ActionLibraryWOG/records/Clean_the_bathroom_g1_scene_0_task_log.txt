From agent.py
Reset goals: The sub-goals are: 
['Clean the bathroom sink directly.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_dirty_sink(sink: item):
    # Function to check if a sink is dirty
    symbol is_dirty= dirty(sink)
    return is_dirty

behavior clean_sink_directly(sink: item):
    body:
        if is_dirty_sink(sink):
            scrub(sink)  # Scrub the sink to remove dirt
            rinse(sink)  # Rinse the sink after scrubbing

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink to clean
        clean_sink_directly(sink)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_dirty_sink(sink: item):
    # Function to check if a sink is dirty
    symbol is_dirty= dirty(sink)
    return is_dirty

behavior clean_sink_directly(sink: item):
    body:
        if is_dirty_sink(sink):
            scrub(sink)  # Scrub the sink to remove dirt
            rinse(sink)  # Rinse the sink after scrubbing

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink to clean
        clean_sink_directly(sink)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)scrub_executor(sink_42)rinse_executor(sink_42)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
scrub_executor(sink_42)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the sink_42. sink_42 is cleaned. 
##############################
From agent.py
rinse_executor(sink_42)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Clean the bathroom sink directly.
Action History:
['walk_executor(sink_42)', 'scrub_executor(sink_42)', 'rinse_executor(sink_42)']
Time info:
Time consume: 16 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 111
goal generate times: 1
goal correct times: 0
action_num: 3

Task complete rate:
1
Scene_id: 0
##############################
