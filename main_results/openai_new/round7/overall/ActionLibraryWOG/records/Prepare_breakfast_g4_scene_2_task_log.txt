From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta.', '2. Mix the cooked chicken and pasta together.', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_132(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_clothes_hat_2076_around_basket_for_clothes_2040(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_chicken_and_pasta(chicken:item, pasta:item, pot:item, stove:item):
    body:
        achieve_once has_water(pot) # Ensure pot has water for boiling pasta
        achieve_once inside(pasta, pot)
        achieve_once inside(chicken, pot)

behavior start_stove(stove:item):
    body:
        achieve_once is_on(stove) # Turn on the stove to cook the contents

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select chicken item
        
        bind pasta: item where:
            is_dry_pasta(pasta) # Select pasta item
        
        bind pot: item where:
            is_pot(pot) # Select a pot for cooking
        
        bind stove: item where:
            is_stove(stove) # Select the stove
        
        cook_chicken_and_pasta(chicken, pasta, pot, stove) # Add chicken and pasta to pot for cooking
        start_stove(stove) # Begin the cooking process

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior cook_chicken_and_pasta(chicken:item, pasta:item, pot:item, stove:item):
    body:
        achieve_once has_water(pot) # Ensure pot has water for boiling pasta
        achieve_once inside(pasta, pot)
        achieve_once inside(chicken, pot)

behavior start_stove(stove:item):
    body:
        achieve_once is_on(stove) # Turn on the stove to cook the contents

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select chicken item
        
        bind pasta: item where:
            is_dry_pasta(pasta) # Select pasta item
        
        bind pot: item where:
            is_pot(pot) # Select a pot for cooking
        
        bind stove: item where:
            is_stove(stove) # Select the stove
        
        cook_chicken_and_pasta(chicken, pasta, pot, stove) # Add chicken and pasta to pot for cooking
        start_stove(stove) # Begin the cooking process

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(pot_54, kitchen_counter_132)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_132)exp(dry_pasta_2073, kitchen_counter_132)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(pot_54, kitchen_counter_132)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_132)exp(dry_pasta_2073, kitchen_counter_132)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(dry_pasta_2073, kitchen_counter_132)
Fail to find dry_pasta_2073 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(cupboard_130)exp(dry_pasta_2073, cupboard_130)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the pot_54. Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(dry_pasta_2073, cupboard_130)
Fail to find dry_pasta_2073 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(ceilinglamp_288)exp(dry_pasta_2073, ceilinglamp_288)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(ceilinglamp_288)
Robot find: Robot is close to the pot_54. Robot is close to the ceilinglamp_288. 
##############################
From agent.py
exp(dry_pasta_2073, ceilinglamp_288)
Fail to find dry_pasta_2073 around ceilinglamp_288. 
##############################
From agent.py-> find a plan in act()
walk_executor(bed_376)exp(dry_pasta_2073, bed_376)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(bed_376)
Robot find: mat_386, clothes_underwear_2022, pillow_370, drawing_389, pillow_368, drawing_388, Robot is close to the pot_54. Robot is close to the bed_376. Robot is close to the mat_386. 
##############################
From agent.py
exp(dry_pasta_2073, bed_376)
Fail to find dry_pasta_2073 around bed_376. 
##############################
From agent.py-> find a plan in act()
walk_executor(clothes_underwear_2022)exp(dry_pasta_2073, clothes_underwear_2022)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(clothes_underwear_2022)
Robot find: Robot is close to the pot_54. Robot is close to the bed_376. Robot is close to the clothes_underwear_2022. 
##############################
From agent.py
exp(dry_pasta_2073, clothes_underwear_2022)
Fail to find dry_pasta_2073 around clothes_underwear_2022. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(dry_pasta_2073, cupboard_131)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the pot_54. Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the pot_54. Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find dry_pasta_2073 ?
Answer: Robot, please retrieve the dry_pasta_2073. It is located inside dining_room_1. You can find the dry_pasta_2073 on top of fridge_140, which is a nearby landmark.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, please retrieve the dry_pasta_2073. It is located inside dining_room_1. You can find the dry_pasta_2073 on top of fridge_140, which is a nearby landmark.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for pot_54 around kitchen_counter_132.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to kitchen_counter_132.
Action 9: look for dry_pasta_2073 around kitchen_counter_132.
Action 10: Walk to faucet_308.
Action 11: Switch off faucet_308.
Action 12: Walk to cupboard_130.
Action 13: look for dry_pasta_2073 around cupboard_130.
Action 14: Walk to faucet_134.
Action 15: Switch on faucet_134.
Action 16: Switch off faucet_134.
Action 17: Walk to ceilinglamp_288.
Action 18: look for dry_pasta_2073 around ceilinglamp_288.
Action 19: Walk to bed_376.
Action 20: look for dry_pasta_2073 around bed_376.
Action 21: Walk to clothes_underwear_2022.
Action 22: look for dry_pasta_2073 around clothes_underwear_2022.
Action 23: Walk to cupboard_131.
Action 24: Open cupboard_131.

##############################
From agent.py
exp(dry_pasta_2073, cupboard_131)
Fail to find dry_pasta_2073 around cupboard_131. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta.', '2. Mix the chicken and pasta together and put them on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2093_around_fridge_140(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

behavior find_dry_pasta_2073_around_fridge_140(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(dry_pasta,fridge_instance)
        else:
            exp(dry_pasta,fridge_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,fridge_instance]=True
        close[fridge_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def has_dry_pasta_nearby(location:item):
    # Function to check if dry pasta is nearby a specified location
    symbol pasta_nearby= exists o: item : (is_dry_pasta(o) and close_char(char, o) and close(location, o))
    return pasta_nearby

def has_pot_nearby(location:item):
    # Function to check if a pot is nearby a specified location
    symbol pot_nearby= exists o: item : (is_pot(o) and close_char(char, o) and close(location, o))
    return pot_nearby

def inside_dining_room(item:item):
    # Function to check if an item is inside the dining room
    symbol inside_dining=exists room: item : (is_dining_room(room) and inside(item, room))
    return inside_dining

behavior find_dry_pasta():
    body:
        if not exists o: item : (is_dry_pasta(o) and close_char(char, o)):
            # If dry pasta is not found around the character, search for it
            foreach location: item:
                if inside_dining_room(location) and not visited(location):
                    observe(location, "Check for dry pasta")

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        bind pot: item where:
            is_pot(pot)
        
        if not has_dry_pasta_nearby(dining_room_1):
            find_dry_pasta()
        
        if not has_pot_nearby(kitchen_counter_132):
            achieve close_char(char, kitchen_counter_132)
            # Ensure robot is near kitchen counter to utilize the pot
        
        achieve_once inhand(pasta) and inhand(pot)
        # Command the robot to hold onto dry pasta and the pot

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5874, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_54_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2073_around_fridge_140(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(dry_pasta,fridge_instance)
        else:
            exp(dry_pasta,fridge_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,fridge_instance]=True
        close[fridge_instance,dry_pasta]=True
    

#goal_representation
def has_dry_pasta_nearby(location:item):
    # Function to check if dry pasta is nearby a specified location
    symbol pasta_nearby= exists o: item : (is_dry_pasta(o) and close_char(char, o) and close(location, o))
    return pasta_nearby

def has_pot_nearby(location:item):
    # Function to check if a pot is nearby a specified location
    symbol pot_nearby= exists o: item : (is_pot(o) and close_char(char, o) and close(location, o))
    return pot_nearby

def inside_dining_room(item:item):
    # Function to check if an item is inside the dining room
    symbol inside_dining=exists room: item : (is_dining_room(room) and inside(item, room))
    return inside_dining

behavior find_dry_pasta():
    body:
        if not exists o: item : (is_dry_pasta(o) and close_char(char, o)):
            # If dry pasta is not found around the character, search for it
            foreach location: item:
                if inside_dining_room(location) and not visited(location):
                    observe(location, "Check for dry pasta")

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        bind pot: item where:
            is_pot(pot)
        
        if not has_dry_pasta_nearby(dining_room_1):
            find_dry_pasta()
        
        if not has_pot_nearby(kitchen_counter_132):
            achieve close_char(char, kitchen_counter_132)
            # Ensure robot is near kitchen counter to utilize the pot
        
        achieve_once inhand(pasta)
        achieve_once inhand(pot)
        # Command the robot to hold onto dry pasta and the pot
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5873, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_onion_2026_around_fridge_140(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#goal_representation
 
def has_dry_pasta_nearby(location:item):
    # Function to check if dry pasta is nearby a specified location
    symbol pasta_nearby= exists o: item : (is_dry_pasta(o) and close_char(char, o) and close(location, o))
    return pasta_nearby

def has_pot_nearby(location:item):
    # Function to check if a pot is nearby a specified location
    symbol pot_nearby= exists o: item : (is_pot(o) and close_char(char, o) and close(location, o))
    return pot_nearby

def inside_dining_room(item:item):
    # Function to check if an item is inside the dining room
    symbol inside_dining=exists room: item : (is_dining_room(room) and inside(item, room))
    return inside_dining

behavior find_dry_pasta():
    body:
        if not exists o: item : (is_dry_pasta(o) and close_char(char, o)):
            # If dry pasta is not found around the character, search for it
            foreach location: item:
                if inside_dining_room(location) and not visited(location):
                    observe(location, "Check for dry pasta")

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        bind pot: item where:
            is_pot(pot)
        
        if not has_dry_pasta_nearby(dining_room_1):
            find_dry_pasta()
        
        if not has_pot_nearby(kitchen_counter_132):
            achieve close_char(char, kitchen_counter_132)
            # Ensure robot is near kitchen counter to utilize the pot
        
        achieve_once inhand(pasta)
        achieve_once inhand(pot)
        # Command the robot to hold onto dry pasta and the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_clothes_hat_2076_around_basket_for_clothes_2040(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

behavior find_dry_pasta_2073_around_fridge_140(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(dry_pasta,fridge_instance)
        else:
            exp(dry_pasta,fridge_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,fridge_instance]=True
        close[fridge_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
behavior heat_water(pot:item, faucet:item, stove:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water
        achieve_once inside(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn the stove on to heat the water

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot) # Add the pasta to the pot

behavior cook_chicken(chicken:item, stove:item):
    body:
        achieve_once inside(chicken, stove)
        achieve is_on(stove)

behavior find_pot_with_water(pot:item, faucet:item, stove:item):
    body:
        if exists pot: item : (is_pot(pot) and has_water(pot) and on(pot, stove)):
            achieve close_char(char, pot)
        else:
            foreach pot: item :
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Check if there is water in the pot and if it is on the stove")

behavior find_chicken(chicken:item, fridge:item):
    body:
        if exists chicken: item : (is_food_chicken(chicken) and inside(chicken, fridge)):
            achieve close_char(char, chicken)
        else:
            foreach chicken: item :
                if is_food_chicken(chicken) and not visited(chicken):
                    observe(chicken, "Locate the chicken in the fridge")

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove)

        bind fridge: item where:
            is_fridge(fridge)

        bind pasta: item where:
            is_dry_pasta(pasta) and on(pasta, fridge)

        find_chicken(chicken, fridge)

        find_pot_with_water(pot, faucet, stove)

        heat_water(pot, faucet, stove)

        cook_pasta(pasta, pot)

        cook_chicken(chicken, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable pot already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2093_around_fridge_140(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

behavior find_dry_pasta_2073_around_fridge_140(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(dry_pasta,fridge_instance)
        else:
            exp(dry_pasta,fridge_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,fridge_instance]=True
        close[fridge_instance,dry_pasta]=True
    

#goal_representation
behavior heat_water(pot:item, faucet:item, stove:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water
        achieve_once inside(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn the stove on to heat the water

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot) # Add the pasta to the pot

behavior cook_chicken(chicken:item, stove:item):
    body:
        achieve_once inside(chicken, stove)
        achieve is_on(stove)

behavior find_pot_with_water(pot:item, faucet:item, stove:item):
    body:
        if exists p: item : (is_pot(p) and has_water(p) and on(p, stove)):
            achieve close_char(char, p)
        else:
            foreach p: item :
                if is_pot(p) and not visited(p):
                    observe(p, "Check if there is water in the pot and if it is on the stove")

behavior find_chicken(chicken:item, fridge:item):
    body:
        if exists c: item : (is_food_chicken(c) and inside(c, fridge)):
            achieve close_char(char, c)
        else:
            foreach c: item :
                if is_food_chicken(c) and not visited(c):
                    observe(c, "Locate the chicken in the fridge")

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove)

        bind fridge: item where:
            is_fridge(fridge)

        bind pasta: item where:
            is_dry_pasta(pasta) and on(pasta, fridge)

        find_chicken(chicken, fridge)

        find_pot_with_water(pot, faucet, stove)

        heat_water(pot, faucet, stove)

        cook_pasta(pasta, pot)

        cook_chicken(chicken, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: p; available variables: [Variable<pot: item>, Variable<faucet: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_clothes_hat_2076_around_ironing_board_2099(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_hat,ironing_board_instance)
        else:
            exp(clothes_hat,ironing_board_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,ironing_board_instance]=True
        close[ironing_board_instance,clothes_hat]=True
    

behavior find_pot_54_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2073_around_fridge_140(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(dry_pasta,fridge_instance)
        else:
            exp(dry_pasta,fridge_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,fridge_instance]=True
        close[fridge_instance,dry_pasta]=True
    

#goal_representation
 
behavior heat_water(pot:item, faucet:item, stove:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water
        achieve_once inside(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn the stove on to heat the water

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot) # Add the pasta to the pot

behavior cook_chicken(chicken:item, stove:item):
    body:
        achieve_once inside(chicken, stove)
        achieve is_on(stove)

behavior find_pot_with_water(pot:item, faucet:item, stove:item):
    body:
        if exists p: item : (is_pot(p) and has_water(p) and on(p, stove)):
            achieve close_char(char, p)
        else:
            foreach p: item:
                if is_pot(p) and not visited(p):
                    observe(p, "Check if there is water in the pot and if it is on the stove")

behavior find_chicken(chicken:item, fridge:item):
    body:
        if exists c: item : (is_food_chicken(c) and inside(c, fridge)):
            achieve close_char(char, c)
        else:
            foreach c: item:
                if is_food_chicken(c) and not visited(c):
                    observe(c, "Locate the chicken in the fridge")

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove)

        bind fridge: item where:
            is_fridge(fridge)

        bind pasta: item where:
            is_dry_pasta(pasta) and on(pasta, fridge)

        find_chicken(chicken, fridge)

        find_pot_with_water(pot, faucet, stove)

        heat_water(pot, faucet, stove)

        cook_pasta(pasta, pot)

        cook_chicken(chicken, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_clothes_hat_2076_around_basket_for_clothes_2040(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_dry_pasta_2073_around_fridge_140(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(dry_pasta,fridge_instance)
        else:
            exp(dry_pasta,fridge_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,fridge_instance]=True
        close[fridge_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_cooking_pot(pot: item, faucet: item):
    body:
        achieve has_water(pot)

behavior obtain_dry_pasta(dry_pasta: item, fridge: item):
    body:
        achieve close_char(char, dry_pasta)

behavior cook_chicken_pasta(stove: item, pot: item, chicken: item, faucet: item):
    body:
        achieve inside(dry_pasta, pot)
        achieve inside(chicken, pot)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        bind faucet: item where:
            is_faucet(faucet) and exists o: item : (inside(o, kitchen_counter_132))
        prepare_cooking_pot(pot, faucet)

        bind fridge: item where:
            is_fridge(fridge) and exists y: item : (inside(dry_pasta, y))
        obtain_dry_pasta(dry_pasta_2073, fridge)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        bind stove: item where:
            is_stove(stove) and exists x: item : (inside(x, kitchen_counter_132))
        cook_chicken_pasta(stove, pot, chicken, faucet)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5893, column 42.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_clothes_hat_2076_around_basket_for_clothes_2040(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_dry_pasta_2073_around_fridge_140(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(dry_pasta,fridge_instance)
        else:
            exp(dry_pasta,fridge_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,fridge_instance]=True
        close[fridge_instance,dry_pasta]=True
    

#goal_representation
 
behavior prepare_cooking_pot(pot: item, faucet: item):
    body:
        achieve has_water(pot)

behavior obtain_dry_pasta(dry_pasta: item, fridge: item):
    body:
        achieve close_char(char, dry_pasta)

behavior cook_chicken_pasta(stove: item, pot: item, chicken: item, faucet: item):
    body:
        achieve inside(dry_pasta, pot)
        achieve inside(chicken, pot)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        bind faucet: item where:
            is_faucet(faucet) and exists o: item : (inside(o, kitchen_counter_132))
        prepare_cooking_pot(pot, faucet)

        bind fridge: item where:
            is_fridge(fridge) and exists dry_pasta: item : (is_dry_pasta(dry_pasta) and on(dry_pasta, fridge))
        obtain_dry_pasta(dry_pasta_2073, fridge)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        bind stove: item where:
            is_stove(stove) and exists x: item : (inside(x, kitchen_counter_132))
        cook_chicken_pasta(stove, pot, chicken, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5894, column 42.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_salt_2068_around_fridge_140(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_salt,fridge_instance)
        else:
            exp(food_salt,fridge_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,fridge_instance]=True
        close[fridge_instance,food_salt]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
behavior prepare_cooking_pot(pot: item, faucet: item):
    body:
        achieve has_water(pot)

behavior obtain_dry_pasta(dry_pasta: item, fridge: item):
    body:
        achieve_once inhand(dry_pasta)

behavior cook_chicken_pasta(stove: item, pot: item, chicken: item, dry_pasta: item):
    body:
        achieve inside(dry_pasta, pot)
        achieve inside(chicken, pot)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        bind faucet: item where:
            is_faucet(faucet) and exists o: item : (inside(o, kitchen_counter_132))
        prepare_cooking_pot(pot, faucet)

        bind fridge: item where:
            is_fridge(fridge) and exists dry_pasta: item : (is_dry_pasta(dry_pasta) and on(dry_pasta, fridge))
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and on(dry_pasta, fridge)
        obtain_dry_pasta(dry_pasta, fridge)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        bind stove: item where:
            is_stove(stove) and exists x: item : (inside(x, kitchen_counter_132))
        cook_chicken_pasta(stove, pot, chicken, dry_pasta)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_132)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(kitchen_counter_132)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(cupboard_130)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(ceilinglamp_288)', 'walk_executor(bed_376)', 'walk_executor(clothes_underwear_2022)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)']
Time info:
Time consume: 262 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 75
goal generate times: 4
goal correct times: 2
action_num: 18

Task complete rate:
Keystate: k1 - Requires: 7 steps
Keystate: k2 - Requires: 15 steps
Keystate: k3 - Requires: 11 steps
Keystate: k4 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
