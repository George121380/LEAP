From agent.py
Reset goals: The sub-goals are: 
['1. Wipe the toilet with toilet paper.', '2. Throw the used toilet paper into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_toilet_15(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_bathroom_counter(x: item):
    return is_bathroom_counter(x)

def has_toilet_paper(toilet: item):
    # Check if the toilet has toilet paper
    symbol has_tp = exists o: item : (is_toilet_paper(o) and close(o, toilet))
    return has_tp

behavior wipe_toilet_with_paper(toilet: item, toilet_paper: item):
    body:
        achieve_once inhand(toilet_paper)
        # Grasping the toilet paper to wipe the toilet
        achieve_once clean(toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        bind bathroom_counter: item where:
            is_bathroom_counter(bathroom_counter)
        if not visited(bathroom_counter):
            observe(bathroom_counter, "Check if there is any toilet paper")
        foreach toilet_paper: item:
            if is_toilet_paper(toilet_paper) and close(toilet_paper, toilet):
                wipe_toilet_with_paper(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_bathroom_counter(x: item):
    return is_bathroom_counter(x)

def has_toilet_paper(toilet: item):
    # Check if the toilet has toilet paper
    symbol has_tp = exists o: item : (is_toilet_paper(o) and close(o, toilet))
    return has_tp

behavior wipe_toilet_with_paper(toilet: item, toilet_paper: item):
    body:
        achieve_once inhand(toilet_paper)
        # Grasping the toilet paper to wipe the toilet
        achieve_once clean(toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        bind bathroom_counter: item where:
            is_bathroom_counter(bathroom_counter)
        if not visited(bathroom_counter):
            observe(bathroom_counter, "Check if there is any toilet paper")
        foreach toilet_paper: item:
            if is_toilet_paper(toilet_paper) and close(toilet_paper, toilet):
                wipe_toilet_with_paper(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_counter_18)obs(bathroom_counter_18, Check if there is any toilet paper)
##############################
From agent.py
walk_executor(bathroom_counter_18)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the bathroom_counter_18. 
##############################
From agent.py
obs(bathroom_counter_18, Check if there is any toilet paper)
Get this information:  bathroom_counter_18 is close to mat_32. bathroom_counter_18 is close to walllamp_34. bathroom_counter_18 is close to wall_3. bathroom_counter_18 is close to wall_4. bathroom_counter_18 is close to walllamp_36. bathroom_counter_18 is close to floor_10. bathroom_counter_18 is close to floor_11. bathroom_counter_18 is close to phone_2029. bathroom_counter_18 is close to floor_14. bathroom_counter_18 is close to bathroom_cabinet_17. bathroom_counter_18 is close to sink_19. bathroom_counter_18 is close to faucet_20. bathroom_counter_18 is close to character_240. faucet_20 is on bathroom_counter_18. sink_19 is inside bathroom_counter_18. bathroom_counter_18 is facing drawing_33. phone_2029 is on bathroom_counter_18. bathroom_counter_18 is inside bathroom_1. bathroom_counter_18 is CLEAN. bathroom_counter_18 is CLOSED.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to find toilet paper, grab it, and wipe the toilet with it.
##############################
From agent.py
Human Instruction: You need to find toilet paper, grab it, and wipe the toilet with it.

The actions you have taken:
Action 1: Walk to bathroom_counter_18.
Action 2: Observe around bathroom_counter_18 with the question of Check if there is any toilet paper.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def is_toilet_dirtied(toilet:item):
    # Function to check if the toilet is dirtied and requires cleaning
    symbol dirtied= dirty(toilet)
    return dirtied

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper

        bind toilet: item where:
            is_toilet(toilet) and is_toilet_dirtied(toilet)
        # Select the toilet that is needing cleaning

        achieve_once inhand(toilet_paper)
        # Temporarily hold the toilet paper to wipe the toilet

        achieve_once clean(toilet)
        # Achieve a clean state for the toilet after wiping

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
def has_toilet_paper(obj:item):
    # Check if an object is toilet paper
    symbol is_toilet_paper = is_toilet_paper(obj)
    return is_toilet_paper

behavior wipe_toilet_with_tp(tp:item, toilet:item):
    body:
        achieve_once inhand(tp) # Use achieve_once as the toilet paper needs to be held temporarily for wiping
        wipe(toilet) # Perform the wiping action

behavior __goal__():
    body:
        bind tp: item where:
             is_toilet_paper(tp)
        # Bind an item that is identified as toilet paper
        
        if exists toilet: item : (is_toilet(toilet) and close_char(char, toilet)):
            # If a toilet is found and is close
            bind toilet: item where:
                is_toilet(toilet) and close_char(char, toilet)
            achieve_once close_char(char, toilet)

        else:
            # If no close toilet is found, continue searching
            foreach toilet: item:
                if is_toilet(toilet) and not visited(toilet):
                    observe(toilet,"Check is there any toilet paper in this location")
        
        wipe_toilet_with_tp(tp, toilet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: toilet; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_rag_2025_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#goal_representation
 
def has_toilet_paper(obj:item):
    # Check if an object is toilet paper
    symbol is_toilet_paper = is_toilet_paper(obj)
    return is_toilet_paper

behavior wipe_toilet_with_tp(tp:item, toilet:item):
    body:
        achieve_once inhand(tp) # Use achieve_once as the toilet paper needs to be held temporarily for wiping
        wipe(toilet) # Perform the wiping action

behavior __goal__():
    body:
        bind tp: item where:
            is_toilet_paper(tp)
        # Bind an item that is identified as toilet paper
        
        if exists toilet: item : (is_toilet(toilet) and close_char(char, toilet)):
            # If a toilet is found and is close
            bind toilet: item where:
                is_toilet(toilet) and close_char(char, toilet)

        else:
            # If no close toilet is found, continue searching
            foreach toilet: item:
                if is_toilet(toilet) and not visited(toilet):
                    observe(toilet,"Check is there any toilet paper in this location")
        
        wipe_toilet_with_tp(tp, toilet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: toilet; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#goal_representation
 
def has_toilet_paper(obj:item):
    # Check if an object is toilet paper
    symbol is_toilet_paper = is_toilet_paper(obj)
    return is_toilet_paper

behavior wipe_toilet_with_tp(tp:item, toilet:item):
    body:
        achieve_once inhand(tp) # Use achieve_once as the toilet paper needs to be held temporarily for wiping
        wipe(toilet) # Perform the wiping action

behavior __goal__():
    body:
        bind tp: item where:
            is_toilet_paper(tp)
        # Bind an item that is identified as toilet paper
        
        bind toilet: item where:
            is_toilet(toilet) and close_char(char, toilet)
        # Bind an item that is identified as a close toilet
        
        wipe_toilet_with_tp(tp, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation

def has_toilet_paper(bathroom_counter:item):
    # Function to check if toilet paper is present on the specified bathroom counter
    symbol has_toilet_paper=exists o: item : (is_toilet_paper(o) and close(o, bathroom_counter))
    return has_toilet_paper

def clean_toilet_with_paper(toilet_paper:item, toilet:item):
    # Behavior that defines wiping the toilet with toilet paper
    achieve_once inhand(toilet_paper)
    achieve_once close_char(char, toilet)
    wipe(toilet)

behavior __goal__():
    body:
        bind bathroom_counter: item where:
            is_bathroom_counter(bathroom_counter)
        # Define bathroom_counter item
        
        bind toilet: item where:
            is_toilet(toilet)
        # Define toilet item
        
        if has_toilet_paper(bathroom_counter):
            # If toilet paper is already known to be on the bathroom counter, proceed to use it
            bind toilet_paper: item where:
                is_toilet_paper(toilet_paper) and close(toilet_paper, bathroom_counter)
            clean_toilet_with_paper(toilet_paper, toilet)
        else:
            # If the toilet paper is not known, check for toilet paper on all unvisited counters
            foreach bathroom_counter: item:
                if is_bathroom_counter(bathroom_counter) and not visited(bathroom_counter):
                    observe(bathroom_counter, "Check if there is any toilet paper")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#goal_representation
 
def has_toilet_paper(bathroom_counter:item):
    # Function to check if toilet paper is present on the specified bathroom counter
    symbol has_toilet_paper=exists o: item : (is_toilet_paper(o) and close(o, bathroom_counter))
    return has_toilet_paper

behavior clean_toilet_with_paper(toilet_paper:item, toilet:item):
    body:
        achieve_once inhand(toilet_paper)
        achieve_once close_char(char, toilet)
        wipe(toilet)

behavior __goal__():
    body:
        bind bathroom_counter: item where:
            is_bathroom_counter(bathroom_counter)
        # Define bathroom_counter item
        
        bind toilet: item where:
            is_toilet(toilet)
        # Define toilet item
        
        if has_toilet_paper(bathroom_counter):
            # If toilet paper is already known to be on the bathroom counter, proceed to use it
            bind toilet_paper: item where:
                is_toilet_paper(toilet_paper) and close(toilet_paper, bathroom_counter)
            clean_toilet_with_paper(toilet_paper, toilet)
        else:
            # If the toilet paper is not known, check for toilet paper on all unvisited counters
            foreach bathroom_counter: item:
                if is_bathroom_counter(bathroom_counter) and not visited(bathroom_counter):
                    observe(bathroom_counter, "Check if there is any toilet paper")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Wipe the toilet with toilet paper, then throw the used toilet paper into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
def has_toilet_paper_in_bathroom(bathroom_counter: item):
    # Function to check if theres toilet paper near the bathroom counter
    symbol has_toilet_paper = exists o: item : (is_toilet_paper(o) and close(o, bathroom_counter))
    return has_toilet_paper

behavior fetch_toilet_paper(bathroom_counter: item):
    body:
        if exists toilet_paper: item : (is_toilet_paper(toilet_paper) and close(toilet_paper, bathroom_counter)):
            bind toilet_paper: item where:
                is_toilet_paper(toilet_paper) and close(toilet_paper, bathroom_counter)
            achieve_once inhand(toilet_paper)

        else:
            foreach bathroom_counter: item:
                if is_bathroom_counter(bathroom_counter) and not visited(bathroom_counter):
                    observe(bathroom_counter, "Check if there is any toilet paper")

behavior wipe_and_discard(toilet: item, toilet_paper: item):
    body:
        wipe(toilet)
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind bathroom_counter: item where:
            is_bathroom_counter(bathroom_counter) and has_toilet_paper_in_bathroom(bathroom_counter)
        fetch_toilet_paper(bathroom_counter)
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and inhand(toilet_paper)
        
        bind toilet: item where:
            is_toilet(toilet)
        wipe_and_discard(toilet, toilet_paper)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable bathroom_counter already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_toilet_paper_2076_around_toilet_15(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#goal_representation
 
def has_toilet_paper_in_bathroom(bathroom_counter: item):
    # Function to check if theres toilet paper near the bathroom counter
    symbol has_toilet_paper = exists o: item : (is_toilet_paper(o) and close(o, bathroom_counter))
    return has_toilet_paper

behavior fetch_toilet_paper(bathroom_counter: item):
    body:
        if exists toilet_paper: item : (is_toilet_paper(toilet_paper) and close(toilet_paper, bathroom_counter)):
            bind toilet_paper: item where:
                is_toilet_paper(toilet_paper) and close(toilet_paper, bathroom_counter)
            achieve_once inhand(toilet_paper)

        else:
            foreach bathroom_counter_iter: item:
                if is_bathroom_counter(bathroom_counter_iter) and not visited(bathroom_counter_iter):
                    observe(bathroom_counter_iter, "Check if there is any toilet paper")

behavior wipe_and_discard(toilet: item, toilet_paper: item):
    body:
        wipe(toilet)
        achieve_once inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind bathroom_counter: item where:
            is_bathroom_counter(bathroom_counter) and has_toilet_paper_in_bathroom(bathroom_counter)
        fetch_toilet_paper(bathroom_counter)
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and inhand(toilet_paper)
        
        bind toilet: item where:
            is_toilet(toilet)
        wipe_and_discard(toilet, toilet_paper)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation

def find_toilet_paper():
    foreach item: item:
        if is_toilet_paper(item) and not visited(item):
            observe(item, "Check if the item is toilet paper")
            if not visited(item):
                break

def find_toilet():
    foreach t: item:
        if is_toilet(t) and not visited(t):
            observe(t, "Check if the item is a toilet")
            if not visited(t):
                break

behavior __goal__():
    body:
        find_toilet_paper()  # Find a toilet paper, check through each item
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and visited(toilet_paper) = 1
        # Bind the first toilet paper found

        find_toilet()  # Find a toilet, check through each item
        bind toilet: item where:
            is_toilet(toilet) and visited(toilet) = 1
        # Bind the first toilet found
            
        behavior wipe():
            achieve_once inhand(toilet_paper)
            symbol has_toilet = exists t: item : (is_toilet(t) and close_char(char, t))
            if has_toilet:
                achieve dirty(toilet)
            # Wipe the toilet till its clean
                
        behavior throw_toilet_paper():
            achieve_once on(toilet_paper, toilet)
            # Wipe in the toilet with toilet paper and throw it

        wipe()
        throw_toilet_paper()


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5214, column 69.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_toilet_paper_2076_around_sink_120(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(toilet_paper,sink_instance)
        else:
            exp(toilet_paper,sink_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,sink_instance]=True
        close[sink_instance,toilet_paper]=True
    

#goal_representation
 
def find_toilet_paper():
    foreach item: item:
        if is_toilet_paper(item) and not visited(item):
            observe(item, "Check if the item is toilet paper")
            if visited(item):
                break

def find_toilet():
    foreach t: item:
        if is_toilet(t) and not visited(t):
            observe(t, "Check if the item is a toilet")
            if visited(t):
                break

behavior __goal__():
    body:
        find_toilet_paper()  # Find a toilet paper, check through each item
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and visited(toilet_paper)
        # Bind the first toilet paper found

        find_toilet()  # Find a toilet, check through each item
        bind toilet: item where:
            is_toilet(toilet) and visited(toilet)
        # Bind the first toilet found
            
        behavior wipe():
            achieve_once inhand(toilet_paper)
            symbol has_toilet = exists t: item : (is_toilet(t) and close_char(char, t))
            if has_toilet:
                achieve dirty(toilet)
            # Wipe the toilet till its clean
                
        behavior throw_toilet_paper():
            achieve_once on(toilet_paper, toilet)
            # Wipe in the toilet with toilet paper and throw it

        wipe()
        throw_toilet_paper()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BEHAVIOR', 'behavior') at line 5222, column 9.
Expected one of: 
	* SEQUENTIAL
	* LONG_STRING
	* ASSERT_HOLD
	* VARNAME
	* TRUE
	* PASS
	* FORALL
	* PACHIEVE_ONCE
	* SYMBOL
	* PLUS
	* _DEDENT
	* BIND
	* FOREACH
	* FINDONE
	* MINUS
	* ACHIEVE
	* NOT
	* LET
	* CRITICAL
	* IF
	* TILDE
	* NONE
	* ASSERT_ONCE
	* COLON
	* EXISTS
	* UNORDERED
	* DO
	* PACHIEVE
	* ACHIEVE_HOLD
	* PROMOTABLE
	* HEX_NUMBER
	* FALSE
	* FINDALL
	* ACHIEVE_ONCE
	* LSQB
	* _LLSQB
	* WHILE
	* ALTERNATIVE
	* BIN_NUMBER
	* LPAR
	* RETURN
	* FLOAT_NUMBER
	* ELLIPSIS
	* IMAG_NUMBER
	* UNTRACK
	* STAR
	* STRING
	* PREAMBLE
	* ASSERT
	* COMMIT
	* OCT_NUMBER
	* DEC_NUMBER
	* PACHIEVE_HOLD

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#goal_representation
def find_toilet_paper():
    foreach item: item:
        if is_toilet_paper(item) and not visited(item):
            observe(item, "Check if the item is toilet paper")
            if visited(item):
                break

def find_toilet():
    foreach t: item:
        if is_toilet(t) and not visited(t):
            observe(t, "Check if the item is a toilet")
            if visited(t):
                break

behavior wipe_with_toilet_paper(toilet_paper: item, toilet: item):
    body:
        achieve_once inhand(toilet_paper)
        wipe(toilet)
        # Wipe the toilet with the toilet paper

behavior throw_toilet_paper_in_toilet(toilet_paper: item, toilet: item):
    body:
        achieve_once on(toilet_paper, toilet)
        # Throw the toilet paper in the toilet

behavior __goal__():
    body:
        find_toilet_paper()  # Find a toilet paper, check through each item
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and visited(toilet_paper)
        # Bind the first toilet paper found

        find_toilet()  # Find a toilet, check through each item
        bind toilet: item where:
            is_toilet(toilet) and visited(toilet)
        # Bind the first toilet found

        wipe_with_toilet_paper(toilet_paper, toilet)
        throw_toilet_paper_in_toilet(toilet_paper, toilet)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        # Hold the toilet paper to wipe the toilet
        wipe(toilet)
        # Wipe the toilet with the held toilet paper

behavior throw_toilet_paper_into_toilet(toilet_paper:item, toilet:item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Dispose of the used toilet paper by placing it inside the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Identify the toilet instance

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Identify the toilet paper instance

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        throw_toilet_paper_into_toilet(toilet_paper, toilet)
        # Execute the wiping and disposing actions
#goal_representation_end

##############################
From agent.py->reset_goal
behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        # Hold the toilet paper to wipe the toilet
        wipe(toilet)
        # Wipe the toilet with the held toilet paper

behavior throw_toilet_paper_into_toilet(toilet_paper:item, toilet:item):
    body:
        achieve_once inside(toilet_paper, toilet)
        # Dispose of the used toilet paper by placing it inside the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Identify the toilet instance

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Identify the toilet paper instance

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        throw_toilet_paper_into_toilet(toilet_paper, toilet)
        # Execute the wiping and disposing actions
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_17)open_executor(bathroom_cabinet_17)exp(toilet_paper_2076, bathroom_cabinet_17)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)wipe_executor(toilet_15)open_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(bathroom_cabinet_17)
Robot find: Robot is close to the bathroom_cabinet_17. 
##############################
From agent.py
open_executor(bathroom_cabinet_17)
Robot find: tooth_paste_2059, Robot is close to the bathroom_cabinet_17. Robot is close to the tooth_paste_2059. bathroom_cabinet_17 is opened. 
##############################
From agent.py
exp(toilet_paper_2076, bathroom_cabinet_17)
Fail to find toilet_paper_2076 around bathroom_cabinet_17. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_15)open_executor(toilet_15)exp(toilet_paper_2076, toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)wipe_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(toilet_15)
Robot find: toilet_paper_2076, Robot is close to the toilet_15. 
##############################
From agent.py
open_executor(toilet_15)
Robot find: Robot is close to the toilet_15. toilet_15 is opened. 
##############################
From agent.py
exp(toilet_paper_2076, toilet_15)
Find toilet_paper_2076. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)wipe_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. 
##############################
From agent.py
grab_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Grabbing toilet_paper_2076 by right hand. 
##############################
From agent.py
walk_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py
wipe_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py
putin_executor(toilet_paper_2076, toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. toilet_paper_2076 is inside toilet_15. toilet_paper_2076 is close toilet_15. toilet_paper_2076 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wipe the toilet with toilet paper. Then throw it into the toilet.
Action History:
['walk_executor(bathroom_counter_18)', 'walk_executor(bathroom_cabinet_17)', 'open_executor(bathroom_cabinet_17)', 'walk_executor(toilet_15)', 'open_executor(toilet_15)', 'walk_executor(toilet_paper_2076)', 'grab_executor(toilet_paper_2076)', 'walk_executor(toilet_15)', 'wipe_executor(toilet_15)', 'putin_executor(toilet_paper_2076, toilet_15)']
Time info:
Time consume: 188 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 57
goal generate times: 7
goal correct times: 1
action_num: 10

Task complete rate:
1
Scene_id: 1
##############################
