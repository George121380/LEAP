From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_clothes_hat_2045_around_basket_for_clothes_2006(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure the pot is filled with water
        achieve inside(egg, pot) # Place egg inside the pot

behavior boil_water(stove:item):
    body:
        achieve is_on(stove) # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)

        boil_egg(egg, pot, stove)
        boil_water(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure the pot is filled with water
        achieve inside(egg, pot) # Place egg inside the pot

behavior boil_water(stove:item):
    body:
        achieve is_on(stove) # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)

        boil_egg(egg, pot, stove)
        boil_water(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(pot_2069, cupboard_229)
Fail to find pot_2069 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2020, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. pot_2069 is close food_egg_2020. food_egg_2020 is inside pot_2069. food_egg_2020 is close pot_2069. food_egg_2020 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure the pot is filled with water. Currently, there is no evidence in the list of actions that water has been added to the pot. The pot must contain water along with the egg to complete the task of boiling the egg.
##############################
From agent.py
Human Instruction: The robot needs to ensure the pot is filled with water. Currently, there is no evidence in the list of actions that water has been added to the pot. The pot must contain water along with the egg to complete the task of boiling the egg.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to kitchen_counter_230.
Action 5: look for pot_2069 around kitchen_counter_230.
Action 6: Walk to pot_2069.
Action 7: Open pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Switch off faucet_43.
Action 12: Walk to fridge_289.
Action 13: Switch off fridge_289.
Action 14: Open fridge_289.
Action 15: look for food_egg_2020 around fridge_289.
Action 16: Grab food_egg_2020.
Action 17: Put food_egg_2020 into pot_2069.
Action 18: Walk to stove_2065.
Action 19: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_361_around_closetdrawer_150(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_water(pot:item):
    # Function to check if the pot has water
    symbol water_present = has_water(pot)
    return water_present

behavior fill_water_into_pot(pot:item, faucet:item):
    body:
        achieve_once has_water(pot) 
        # Fill water into the pot from the faucet

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, pot)
        # The egg is placed inside the pot
        achieve_once is_on(stove)
        # The stove is turned on to boil the contents within the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Binding a pot instance for use
        
        bind faucet: item where:
            is_faucet(faucet)
        # Binding a faucet instance for use
        
        bind stove: item where:
            is_stove(stove)
        # Binding a stove instance for use
        
        bind egg: item where:
            is_food_egg(egg)
        # Binding an egg instance for use

        if not pot_has_water(pot):
            fill_water_into_pot(pot, faucet)
            
        boil_egg(pot, stove, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_359_around_closetdrawer_384(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_384(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_pot_has_water(pot:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Ensure the pot has water
        ensure_pot_has_water(pot)
        
        bind stove: item where:
            is_stove(stove)
        # Ensure the stove is turned on
        achieve is_on(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_374_around_closetdrawer_384(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_384(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
def pot_has_water(pot:item):
    # Function to check if the pot has water
    symbol has_water_in_pot = exists o: item : (is_faucet(o) and has_water(pot))
    return has_water_in_pot

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)
        if exists faucet: item : (is_faucet(faucet) and pot_has_water(pot)):
            # If we have already found that the pot has water, we can directly proceed
            achieve once inside(egg, pot)
        else:
            observe(pot, "Check if the pot has water")
            foreach faucet : item:
                if is_faucet(faucet) and not visited(faucet):
                    # Check all faucets to fill the pot with water
                    observe(faucet, "Find a faucet to fill the pot with water")
        achieve_once on(pot, stove)
        # Put the pot on the stove
        achieve is_on(stove)
        # Turn on the stove
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inside') at line 5836, column 26.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_hanger_124_around_closetdrawer_384(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_clothes_hat_2045_around_dresser_123(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_hat,dresser_instance)
        else:
            exp(clothes_hat,dresser_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,dresser_instance]=True
        close[dresser_instance,clothes_hat]=True
    

#goal_representation
 
def pot_has_water(pot:item):
    # Function to check if the pot has water
    symbol has_water_in_pot = exists o: item : (is_faucet(o) and has_water(pot))
    return has_water_in_pot

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)
        if exists faucet: item : (is_faucet(faucet) and pot_has_water(pot)):
            # If we have already found that the pot has water, we can directly proceed
            achieve_once inside(egg, pot)
        else:
            observe(pot, "Check if the pot has water")
            foreach faucet : item:
                if is_faucet(faucet) and not visited(faucet):
                    # Check all faucets to fill the pot with water
                    observe(faucet, "Find a faucet to fill the pot with water")
        achieve_once on(pot, stove)
        # Put the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def pot_has_water(pot:item):
    # Function to check if the pot has water
    symbol has_water_in_pot = exists o: item : (is_faucet(o) and has_water(pot))
    return has_water_in_pot

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)
        if exists faucet: item : (is_faucet(faucet) and pot_has_water(pot)):
            # If we have already found that the pot has water, we can directly proceed
            achieve_once inside(egg, pot)
        else:
            observe(pot, "Check if the pot has water")
            foreach faucet : item:
                if is_faucet(faucet) and not visited(faucet):
                    # Check all faucets to fill the pot with water
                    observe(faucet, "Find a faucet to fill the pot with water")
        achieve_once on(pot, stove)
        # Put the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

##############################
From agent.py-> find a plan in act()
put_executor(pot_2069, stove_2065)
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the pot contains water before placing it on the oven to boil the egg. The current list of actions does not include filling the pot with water. You need to go back, fill the pot with water using a faucet, and then proceed to boil the egg.
##############################
From agent.py
Human Instruction: The robot needs to ensure that the pot contains water before placing it on the oven to boil the egg. The current list of actions does not include filling the pot with water. You need to go back, fill the pot with water using a faucet, and then proceed to boil the egg.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to kitchen_counter_230.
Action 5: look for pot_2069 around kitchen_counter_230.
Action 6: Walk to pot_2069.
Action 7: Open pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Switch off faucet_43.
Action 12: Walk to fridge_289.
Action 13: Switch off fridge_289.
Action 14: Open fridge_289.
Action 15: look for food_egg_2020 around fridge_289.
Action 16: Grab food_egg_2020.
Action 17: Put food_egg_2020 into pot_2069.
Action 18: Walk to stove_2065.
Action 19: Switch on stove_2065.
Action 20: Put pot_2069 on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_141_around_closetdrawer_384(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_egg(pot: item, stove: item, egg: item):
    body:
        achieve_once inside(egg, pot)
        # Put the egg inside the pot
        achieve_once on(pot, stove)
        # Put the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        bind egg: item where:
            is_food_egg(egg)
        fill_pot_with_water(pot, faucet)
        boil_egg(pot, stove, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if the pot has water
    return has_water(pot)

def ensure_pot_has_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior boil_egg(pot: item, stove: item):
    body:
        if not has_water_in_pot(pot):
            observe(pot, "Check if the pot has water")
            ensure_pot_has_water(pot, faucet_43) # Assuming faucet_43 based on the actions

        achieve_once inside(food_egg_2020, pot)
        # Place the egg in the pot

        achieve_once on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        boil_egg(pot, stove)
        # Call the boil_egg behavior with the selected pot and stove

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5787, column 9.
Expected one of: 
	* OR
	* __ANON_3
	* __ANON_0
	* AND
	* PLUS
	* LESS_EQ
	* PERCENT
	* FLOORDIV
	* GREATER_EQ
	* __ANON_5
	* __ANON_1
	* _NEWLINE
	* SLASH
	* MINUS
	* IF
	* __ANON_2
	* RSHIFT
	* __ANON_7
	* AT
	* LESSTHAN
	* AMPERSAND
	* COMMA
	* __ANON_4
	* LSHIFT
	* SEMICOLON
	* VBAR
	* NOT_EQ
	* __ANON_8
	* STAR
	* EQUAL
	* __ANON_6
	* CIRCUMFLEX
	* DOUBLE_EQUAL
	* MORETHAN

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if the pot has water
    return has_water(pot)

def ensure_pot_has_water(pot: item, faucet: item):
    # Ensure the pot is filled with water
    body:
        achieve has_water(pot)

behavior boil_egg(pot: item, stove: item):
    body:
        if not has_water_in_pot(pot):
            observe(pot, "Check if the pot has water")
            ensure_pot_has_water(pot, faucet_43) # Assuming faucet_43 based on the actions

        achieve_once inside(food_egg_2020, pot)
        # Place the egg in the pot

        achieve_once on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065

        boil_egg(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5788, column 9.
Expected one of: 
	* OR
	* __ANON_3
	* __ANON_0
	* AND
	* PLUS
	* LESS_EQ
	* PERCENT
	* FLOORDIV
	* GREATER_EQ
	* __ANON_5
	* __ANON_1
	* _NEWLINE
	* SLASH
	* MINUS
	* IF
	* __ANON_2
	* RSHIFT
	* __ANON_7
	* AT
	* LESSTHAN
	* AMPERSAND
	* COMMA
	* __ANON_4
	* LSHIFT
	* SEMICOLON
	* VBAR
	* NOT_EQ
	* __ANON_8
	* STAR
	* EQUAL
	* __ANON_6
	* CIRCUMFLEX
	* DOUBLE_EQUAL
	* MORETHAN

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if the pot has water
    return has_water(pot)

def ensure_pot_has_water(pot: item, faucet: item):
    # Ensure the pot is filled with water
    achieve has_water(pot)

behavior boil_egg(pot: item, stove: item):
    body:
        if not has_water_in_pot(pot):
            observe(pot, "Check if the pot has water")
            ensure_pot_has_water(pot, faucet_43) # Assuming faucet_43 based on the actions

        achieve_once inside(food_egg_2020, pot)
        # Place the egg in the pot

        achieve_once on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065

        boil_egg(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Pot with water

        bind egg: item where:
            is_food_egg(egg)
        # The egg to be boiled

        bind stove: item where:
            is_stove(stove)
        # The stove to be used

        if not has_water(pot):
            bind faucet: item where:
                is_faucet(faucet)
            fill_pot_with_water(pot, faucet)

        boil_egg(pot, stove, egg)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_112_around_shower_36(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(hanger,shower_instance)
        else:
            exp(hanger,shower_instance)
    eff:
        unknown[hanger]=False
        close[hanger,shower_instance]=True
        close[shower_instance,hanger]=True
    

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior boil_egg(pot:item, stove:item):
    body:
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot_2069: item where:
            is_pot(pot_2069)
        bind faucet_43: item where:
            is_faucet(faucet_43)
        bind stove_2065: item where:
            is_stove(stove_2065)
        
        fill_pot_with_water(pot_2069, faucet_43)
        place_on_stove(pot_2069, stove_2065)
        boil_egg(pot_2069, stove_2065)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_shower_36(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(chair,shower_instance)
        else:
            exp(chair,shower_instance)
    eff:
        unknown[chair]=False
        close[chair,shower_instance]=True
        close[shower_instance,chair]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_384(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior water_pot(pot: item):
    body:
        achieve has_water(pot)  # Fill the pot with water

behavior boil_egg(pot: item, stove: item, egg: item):
    body:
        achieve_once on(pot, stove)  # Place the pot on the stove
        achieve inside(egg, pot)  # Place the egg inside the pot
        achieve is_on(stove)  # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)  # Find a pot to boil water
        bind stove: item where:
            is_stove(stove)  # Locate a stove for boiling
        bind egg: item where:
            is_food_egg(egg)  # Locate the egg for boiling

        water_pot(pot)  # Fill the pot with water
        boil_egg(pot, stove, egg)  # Place the waterfilled pot on the stove to boil the egg

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_138_around_closetdrawer_384(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_150(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
def check_pot_has_water(pot:item):
    # Function to check if the pot has water
    symbol pot_has_water=exists x: item : (x==pot and has_water(x))
    return pot_has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inhand(pot)
        achieve_once close_char(char, faucet)
        achieve has_water(pot) # Fill the pot with water

behavior place_pot_on_stove_and_boil(pot:item, stove:item, egg:item):
    body:
        achieve_once close_char(char, stove)
        achieve_once inside(egg, pot) # Put the egg inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43

        if not check_pot_has_water(pot):
            fill_pot_with_water(pot, faucet)

        place_pot_on_stove_and_boil(pot, stove, egg)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_138_around_dresser_123(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(hanger,dresser_instance)
        else:
            exp(hanger,dresser_instance)
    eff:
        unknown[hanger]=False
        close[hanger,dresser_instance]=True
        close[dresser_instance,hanger]=True
    

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior fill_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior boil_egg(pot:item, stove:item):
    body:
        achieve_once inside(food_egg_2020, pot)
        achieve_on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        fill_with_water(pot)
        boil_egg(pot, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_egg_2020; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_hanger_374_around_closetdrawer_384(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_clothes_hat_2045_around_dresser_123(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_hat,dresser_instance)
        else:
            exp(clothes_hat,dresser_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,dresser_instance]=True
        close[dresser_instance,clothes_hat]=True
    

#goal_representation
 
behavior fill_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind egg: item where:
            is_food_egg(egg)
        fill_with_water(pot)
        boil_egg(egg, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_111_around_dresser_123(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(hanger,dresser_instance)
        else:
            exp(hanger,dresser_instance)
    eff:
        unknown[hanger]=False
        close[hanger,dresser_instance]=True
        close[dresser_instance,hanger]=True
    

behavior find_clothes_hat_2045_around_basket_for_clothes_2006(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_water(pot:item):
    symbol full=has_water(pot)
    return full

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve inside(egg, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and pot_has_water(pot)
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)
        boil_egg(pot, stove, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_sink_42(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_hanger_132_around_desk_104(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(hanger,desk_instance)
        else:
            exp(hanger,desk_instance)
    eff:
        unknown[hanger]=False
        close[hanger,desk_instance]=True
        close[desk_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)

behavior boil_egg(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        
        fill_pot_with_water(pot, faucet)
        boil_egg(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Boil egg.
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_egg_2020)', 'putin_executor(food_egg_2020, pot_2069)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)']
Time info:
Time consume: 208 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 91
goal generate times: 13
goal correct times: 1
action_num: 17

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
