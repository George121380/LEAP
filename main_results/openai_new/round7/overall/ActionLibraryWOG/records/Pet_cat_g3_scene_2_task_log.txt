From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water and place it on the table in the home office.', '2. Find the cat and place it on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl)
        achieve_once closed(faucet)

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office
        bind faucet: item where:
            is_faucet(faucet)
        fill_bowl_with_water(bowl, faucet) 
        place_bowl_on_table(bowl, table) 
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl)
        achieve_once closed(faucet)

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        bind home_office: item where:
            is_home_office(home_office)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office
        bind faucet: item where:
            is_faucet(faucet)
        fill_bowl_with_water(bowl, faucet) 
        place_bowl_on_table(bowl, table) 
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_cup_2087_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior fill_bowl_with_water(bowl:item):
    body:
        achieve has_water(bowl)
        # Fill the bowl with water

behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        fill_bowl_with_water(bowl)
        put_on_table(bowl, table)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_bowl_with_water(bowl:item):
    body:
        achieve has_water(bowl)
        # Fill the bowl with water

behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Place the item on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        fill_bowl_with_water(bowl)
        put_on_table(bowl, table)
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(bowl_2095, cupboard_131)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(table_193)put_executor(bowl_2095, table_193)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(bowl_2095, cupboard_131)
Fail to find bowl_2095 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(bowl_2095, kitchen_counter_132)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(table_193)put_executor(bowl_2095, table_193)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(bowl_2095, kitchen_counter_132)
Fail to find bowl_2095 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(bowl_2095, kitchen_counter_129)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(table_193)put_executor(bowl_2095, table_193)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(bowl_2095, kitchen_counter_129)
Fail to find bowl_2095 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2080)exp(bowl_2095, cutting_board_2080)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(table_193)put_executor(bowl_2095, table_193)
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(bowl_2095, cutting_board_2080)
Fail to find bowl_2095 around cutting_board_2080. 
##############################
From agent.py-> find a plan in act()
walk_executor(window_40)open_executor(window_40)exp(bowl_2095, window_40)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(table_193)put_executor(bowl_2095, table_193)
##############################
From agent.py
walk_executor(window_40)
Robot find: Robot is close to the window_40. 
##############################
From agent.py
open_executor(window_40)
Robot find: Robot is close to the window_40. window_40 is opened. 
##############################
From agent.py
exp(bowl_2095, window_40)
Fail to find bowl_2095 around window_40. 
##############################
From agent.py-> find a plan in act()
walk_executor(toaster_144)open_executor(toaster_144)exp(bowl_2095, toaster_144)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(table_193)put_executor(bowl_2095, table_193)
##############################
From agent.py
walk_executor(toaster_144)
Robot find: Robot is close to the toaster_144. Robot is close to the kitchen_counter_129. 
##############################
From agent.py
open_executor(toaster_144)
Robot find: Robot is close to the toaster_144. Robot is close to the kitchen_counter_129. toaster_144 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2095 ?
Answer: To locate bowl_2095, go to dining_room_1. Once inside, find table_123. Bowl_2095 is on table_123.
Re-decompose: None

##############################
From agent.py
Human Instruction: To locate bowl_2095, go to dining_room_1. Once inside, find table_123. Bowl_2095 is on table_123.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for bowl_2095 around cupboard_131.
Action 4: Walk to kitchen_counter_132.
Action 5: look for bowl_2095 around kitchen_counter_132.
Action 6: Walk to kitchen_counter_129.
Action 7: look for bowl_2095 around kitchen_counter_129.
Action 8: Walk to cutting_board_2080.
Action 9: look for bowl_2095 around cutting_board_2080.
Action 10: Walk to window_40.
Action 11: Open window_40.
Action 12: look for bowl_2095 around window_40.
Action 13: Walk to toaster_144.
Action 14: Open toaster_144.

##############################
From agent.py
exp(bowl_2095, toaster_144)
Fail to find bowl_2095 around toaster_144. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(bowl_2095, table_123)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(table_193)put_executor(bowl_2095, table_193)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(bowl_2095, table_123)
Find bowl_2095. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(table_193)put_executor(bowl_2095, table_193)
##############################
From agent.py
walk_executor(bowl_2095)
Robot find: Robot is close to the table_123. Robot is close to the bowl_2095. 
##############################
From agent.py
grab_executor(bowl_2095)
Robot find: Robot is close to the table_123. Robot is close to the bowl_2095. Grabbing bowl_2095 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the bowl_2095. Robot is close to the table_193. 
##############################
From agent.py
put_executor(bowl_2095, table_193)
Robot find: Robot is close to the bowl_2095. Robot is close to the table_193. table_193 is close bowl_2095. bowl_2095 is close table_193. bowl_2095 is on table_193. bowl_2095 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill bowl_2095 with water. The bowl has not been filled with water before being placed on table_193 in the home office.
##############################
From agent.py
Human Instruction: You need to fill bowl_2095 with water. The bowl has not been filled with water before being placed on table_193 in the home office.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for bowl_2095 around cupboard_131.
Action 4: Walk to kitchen_counter_132.
Action 5: look for bowl_2095 around kitchen_counter_132.
Action 6: Walk to kitchen_counter_129.
Action 7: look for bowl_2095 around kitchen_counter_129.
Action 8: Walk to cutting_board_2080.
Action 9: look for bowl_2095 around cutting_board_2080.
Action 10: Walk to window_40.
Action 11: Open window_40.
Action 12: look for bowl_2095 around window_40.
Action 13: Walk to toaster_144.
Action 14: Open toaster_144.
Action 15: look for bowl_2095 around toaster_144.
Action 16: Walk to table_123.
Action 17: look for bowl_2095 around table_123.
Action 18: Walk to bowl_2095.
Action 19: Grab bowl_2095.
Action 20: Walk to faucet_134.
Action 21: Switch off faucet_134.
Action 22: Walk to table_193.
Action 23: Put bowl_2095 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_bowl(bowl:item):
    # Function to check if the bowl has water
    return has_water(bowl)

behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl)
        # Fill the bowl with water

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and grabbable(bowl)
        # Select a bowl that is grabbable

        bind table: item where:
            is_table(table) and id[table] == 193
        # Select table with ID 193 in the home office

        bind faucet: item where:
            is_faucet(faucet)

        if not has_water_in_bowl(bowl):
            fill_bowl_with_water(bowl, faucet)
            # Fill the bowl with water at the specified faucet

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_in_bowl(bowl:item):
    # Function to check if the bowl has water
    return has_water(bowl)

behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once has_water(bowl)
        # Fill the bowl with water

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and grabbable(bowl)
        # Select a bowl that is grabbable

        bind table: item where:
            is_table(table) and id[table] == 193
        # Select table with ID 193 in the home office

        bind faucet: item where:
            is_faucet(faucet)

        if not has_water_in_bowl(bowl):
            fill_bowl_with_water(bowl, faucet)
            # Fill the bowl with water at the specified faucet

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

##############################
From agent.py-> find a plan in act()
grab_executor(bowl_2095)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(table_193)put_executor(bowl_2095, table_193)
##############################
From agent.py
grab_executor(bowl_2095)
Robot find: Robot is close to the bowl_2095. Robot is close to the table_193. Grabbing bowl_2095 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the bowl_2095. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the bowl_2095. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the bowl_2095. Robot is close to the table_193. 
##############################
From agent.py
put_executor(bowl_2095, table_193)
Robot find: Robot is close to the bowl_2095. Robot is close to the table_193. bowl_2095 is close table_193. bowl_2095 is on table_193. bowl_2095 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The bowl needs to be filled with water before placing it on the table in the home office. First, find a faucet, fill the bowl with water, and then place it on table_193 in the home office.
##############################
From agent.py
Human Instruction: The bowl needs to be filled with water before placing it on the table in the home office. First, find a faucet, fill the bowl with water, and then place it on table_193 in the home office.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for bowl_2095 around cupboard_131.
Action 4: Walk to kitchen_counter_132.
Action 5: look for bowl_2095 around kitchen_counter_132.
Action 6: Walk to kitchen_counter_129.
Action 7: look for bowl_2095 around kitchen_counter_129.
Action 8: Walk to cutting_board_2080.
Action 9: look for bowl_2095 around cutting_board_2080.
Action 10: Walk to window_40.
Action 11: Open window_40.
Action 12: look for bowl_2095 around window_40.
Action 13: Walk to toaster_144.
Action 14: Open toaster_144.
Action 15: look for bowl_2095 around toaster_144.
Action 16: Walk to table_123.
Action 17: look for bowl_2095 around table_123.
Action 18: Walk to bowl_2095.
Action 19: Grab bowl_2095.
Action 20: Walk to faucet_134.
Action 21: Switch off faucet_134.
Action 22: Walk to table_193.
Action 23: Put bowl_2095 on table_193.
Action 24: Grab bowl_2095.
Action 25: Walk to faucet_308.
Action 26: Switch off faucet_308.
Action 27: Walk to table_193.
Action 28: Put bowl_2095 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve has_water(bowl)

def is_in_home_office(item:item):
    symbol is_in_office = exists room: item: (is_home_office(room) and inside(item, room))
    return is_in_office

behavior place_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_a_free_hand(char)
        # Select a bowl
        
        bind faucet: item where:
            is_faucet(faucet) and is_off(faucet)
        # Select a faucet thats off

        fill_bowl_with_water(bowl, faucet)

        bind table: item where:
            is_table(table) and is_in_home_office(table)
        # Select a table in the home office
        
        place_on_table(bowl, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve has_water(bowl)

def is_in_home_office(item:item):
    symbol is_in_office = exists room: item: (is_home_office(room) and inside(item, room))
    return is_in_office

behavior place_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_a_free_hand(char)
        # Select a bowl
        
        bind faucet: item where:
            is_faucet(faucet) and is_off(faucet)
        # Select a faucet thats off

        fill_bowl_with_water(bowl, faucet)

        bind table: item where:
            is_table(table) and is_in_home_office(table)
        # Select a table in the home office
        
        place_on_table(bowl, table)

##############################
From agent.py-> find a plan in act()
grab_executor(bowl_2095)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(table_193)put_executor(bowl_2095, table_193)
##############################
From agent.py
grab_executor(bowl_2095)
Robot find: Robot is close to the bowl_2095. Robot is close to the table_193. Grabbing bowl_2095 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the bowl_2095. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the bowl_2095. Robot is close to the table_193. 
##############################
From agent.py
put_executor(bowl_2095, table_193)
Robot find: Robot is close to the bowl_2095. Robot is close to the table_193. bowl_2095 is close table_193. bowl_2095 is on table_193. bowl_2095 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The bowl needs to be filled with water. Make sure to turn on the faucet with the bowl positioned to catch the water.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2082_around_couch_192(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior find_cat_and_place(cat:item, table:item):
    body:
        achieve_once on(cat, table) # Place the cat on the table temporarily

def find_cat(cat:item):
    symbol cat_found=exists o: item : (is_cat(o) and inside_char(o, inside_cat))
    return cat_found

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office
        
        if find_cat(cat):
            # If we have already found the cat, place it on the table
            find_cat_and_place(cat, table)
        else:
            # If the cat is not found, observe the environment to locate it
            foreach room: item:
                if is_home_office(room) and not visited(room):
                    observe(room, "Check if the cat is inside the home office")
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: inside_cat; available variables: [Variable<cat: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

behavior find_cat_2082_around_home_office_161(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cat,home_office_instance)
        else:
            exp(cat,home_office_instance)
    eff:
        unknown[cat]=False
        close[cat,home_office_instance]=True
        close[home_office_instance,cat]=True
    

#goal_representation
 
def find_cat(cat:item):
    symbol cat_found=exists o: item : (is_cat(o) and inside_char(o, home_office))
    return cat_found

behavior find_cat_and_place(cat:item, table:item):
    body:
        achieve_once on(cat, table) # Place the cat on the table temporarily

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office
        
        if find_cat(cat):
            # If we have already found the cat, place it on the table
            find_cat_and_place(cat, table)
        else:
            # If the cat is not found, observe the environment to locate it
            foreach room: item:
                if is_home_office(room) and not visited(room):
                    observe(room, "Check if the cat is inside the home office")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: home_office; available variables: [Variable<cat: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cat_2082_around_home_office_161(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cat,home_office_instance)
        else:
            exp(cat,home_office_instance)
    eff:
        unknown[cat]=False
        close[cat,home_office_instance]=True
        close[home_office_instance,cat]=True
    

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#goal_representation
 
def find_cat(cat:item, home_office:item):
    symbol cat_found=exists o: item : (is_cat(o) and inside_char(o, home_office))
    return cat_found

behavior find_cat_and_place(cat:item, table:item):
    body:
        achieve_once on(cat, table) # Place the cat on the table temporarily

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office
        
        if find_cat(cat, home_office):
            # If we have already found the cat, place it on the table
            find_cat_and_place(cat, table)
        else:
            # If the cat is not found, observe the environment to locate it
            foreach room: item:
                if is_home_office(room) and not visited(room):
                    observe(room, "Check if the cat is inside the home office")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_cat_2082_around_home_office_161(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cat,home_office_instance)
        else:
            exp(cat,home_office_instance)
    eff:
        unknown[cat]=False
        close[cat,home_office_instance]=True
        close[home_office_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_cat_to_table(cat: item, table: item):
    body:
        achieve_once on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Identify the cat
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Identify the table in the home office

        achieve close_char(char, cat)
        # Approach the cat
        
        move_cat_to_table(cat, table)
        # Move the cat to the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cat_2082_around_home_office_161(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cat,home_office_instance)
        else:
            exp(cat,home_office_instance)
    eff:
        unknown[cat]=False
        close[cat,home_office_instance]=True
        close[home_office_instance,cat]=True
    

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#goal_representation
 
behavior move_cat_to_table(cat: item, table: item):
    body:
        achieve_once on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Identify the cat

        bind table: item where:
            is_table(table) and inside(table, home_office_319)
        # Identify the table in the home office, assume home_office_319 is the home office

        achieve close_char(char, cat)
        # Approach the cat

        move_cat_to_table(cat, table)
        # Move the cat to the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office_319; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_cat_2082_around_home_office_161(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cat,home_office_instance)
        else:
            exp(cat,home_office_instance)
    eff:
        unknown[cat]=False
        close[cat,home_office_instance]=True
        close[home_office_instance,cat]=True
    

#goal_representation
 
behavior move_cat_to_table(cat: item, table: item):
    body:
        achieve_once on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Identify the cat

        bind table: item where:
            is_table(table) and inside(table, home_office_319)
        # Identify the table in the home office, assume home_office_319 is the home office
        
        bind home_office_319: item where:
            is_home_office(home_office_319)
        # Define the home office variable

        achieve close_char(char, cat)
        # Approach the cat

        move_cat_to_table(cat, table)
        # Move the cat to the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_cat_2082_around_home_office_161(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cat,home_office_instance)
        else:
            exp(cat,home_office_instance)
    eff:
        unknown[cat]=False
        close[cat,home_office_instance]=True
        close[home_office_instance,cat]=True
    

#exp_behavior_end

#goal_representation
behavior place_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)
  
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
        bind cat: item where:
            is_cat(cat)
        achieve close_char(char, cat)
        place_on_table(cat, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_cat_2082_around_home_office_161(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cat,home_office_instance)
        else:
            exp(cat,home_office_instance)
    eff:
        unknown[cat]=False
        close[cat,home_office_instance]=True
        close[home_office_instance,cat]=True
    

#goal_representation
 
behavior place_on_table(item: item, table: item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        bind cat: item where:
            is_cat(cat)
        achieve close_char(char, cat)
        place_on_table(cat, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_cat_2082_around_home_office_161(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cat,home_office_instance)
        else:
            exp(cat,home_office_instance)
    eff:
        unknown[cat]=False
        close[cat,home_office_instance]=True
        close[home_office_instance,cat]=True
    

#exp_behavior_end

#goal_representation
behavior find_cat_and_put_on_table(cat:item, table:item):
    body:
        achieve_once inhand(cat)
        achieve_once on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        bind table: item where:
            is_table(table) and inside(table, home_office_241)

        observe(cat, "Locate the cat")
        find_cat_and_put_on_table(cat, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office_241; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_cat_2082_around_home_office_161(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cat,home_office_instance)
        else:
            exp(cat,home_office_instance)
    eff:
        unknown[cat]=False
        close[cat,home_office_instance]=True
        close[home_office_instance,cat]=True
    

#goal_representation
behavior find_cat_and_put_on_table(cat:item, table:item):
    body:
        achieve_once inhand(cat)
        achieve_once on(cat, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind cat: item where:
            is_cat(cat)
        
        bind table: item where:
            is_table(table) and inside(table, home_office)

        observe(cat, "Locate the cat")
        find_cat_and_put_on_table(cat, table)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior find_cat_and_put_on_table(cat:item, table:item):
    body:
        achieve_once inhand(cat)
        achieve_once on(cat, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind cat: item where:
            is_cat(cat)
        
        bind table: item where:
            is_table(table) and inside(table, home_office)

        observe(cat, "Locate the cat")
        find_cat_and_put_on_table(cat, table)
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(cat_2082, home_office_161)walk_executor(cat_2082)obs(cat_2082, Locate the cat)grab_executor(cat_2082)walk_executor(table_193)put_executor(cat_2082, table_193)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(cat_2082, home_office_161)
Fail to find cat_2082 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(cat_2082, home_office_161)walk_executor(cat_2082)obs(cat_2082, Locate the cat)grab_executor(cat_2082)walk_executor(table_193)put_executor(cat_2082, table_193)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(cat_2082, home_office_161)
Fail to find cat_2082 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(cat_2082, home_office_161)walk_executor(cat_2082)obs(cat_2082, Locate the cat)grab_executor(cat_2082)walk_executor(table_193)put_executor(cat_2082, table_193)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(cat_2082, home_office_161)
Fail to find cat_2082 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(cat_2082, home_office_161)walk_executor(cat_2082)obs(cat_2082, Locate the cat)grab_executor(cat_2082)walk_executor(table_193)put_executor(cat_2082, table_193)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(cat_2082, home_office_161)
Fail to find cat_2082 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(cat_2082, home_office_161)walk_executor(cat_2082)obs(cat_2082, Locate the cat)grab_executor(cat_2082)walk_executor(table_193)put_executor(cat_2082, table_193)
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cat_2082 ?
Answer: Go to the home office labeled as home_office_161. Inside, locate couch_192. The target object, cat_2082, is on couch_192.
Re-decompose: None

##############################
From agent.py
Human Instruction: The bowl needs to be filled with water before placing it on the table in the home office. First, find a faucet, fill the bowl with water, and then place it on table_193 in the home office.
Go to the home office labeled as home_office_161. Inside, locate couch_192. The target object, cat_2082, is on couch_192.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for bowl_2095 around cupboard_131.
Action 4: Walk to kitchen_counter_132.
Action 5: look for bowl_2095 around kitchen_counter_132.
Action 6: Walk to kitchen_counter_129.
Action 7: look for bowl_2095 around kitchen_counter_129.
Action 8: Walk to cutting_board_2080.
Action 9: look for bowl_2095 around cutting_board_2080.
Action 10: Walk to window_40.
Action 11: Open window_40.
Action 12: look for bowl_2095 around window_40.
Action 13: Walk to toaster_144.
Action 14: Open toaster_144.
Action 15: look for bowl_2095 around toaster_144.
Action 16: Walk to table_123.
Action 17: look for bowl_2095 around table_123.
Action 18: Walk to bowl_2095.
Action 19: Grab bowl_2095.
Action 20: Walk to faucet_134.
Action 21: Switch off faucet_134.
Action 22: Walk to table_193.
Action 23: Put bowl_2095 on table_193.
Action 24: Grab bowl_2095.
Action 25: Walk to faucet_308.
Action 26: Switch off faucet_308.
Action 27: Walk to table_193.
Action 28: Put bowl_2095 on table_193.
Action 29: Grab bowl_2095.
Action 30: Walk to faucet_134.
Action 31: Switch on faucet_134.
Action 32: Switch off faucet_134.
Action 33: Walk to table_193.
Action 34: Put bowl_2095 on table_193.
Action 35: Walk to home_office_161.
Action 36: look for cat_2082 around home_office_161.
Action 37: Walk to home_office_161.
Action 38: look for cat_2082 around home_office_161.
Action 39: Walk to home_office_161.
Action 40: look for cat_2082 around home_office_161.
Action 41: Walk to home_office_161.
Action 42: look for cat_2082 around home_office_161.
Action 43: Walk to home_office_161.

##############################
From agent.py
exp(cat_2082, home_office_161)
Fail to find cat_2082 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(couch_192)exp(cat_2082, couch_192)walk_executor(cat_2082)obs(cat_2082, Locate the cat)grab_executor(cat_2082)walk_executor(table_193)put_executor(cat_2082, table_193)
##############################
From agent.py
walk_executor(couch_192)
Robot find: vacuum_cleaner_2094, cat_2082, Robot is close to the couch_192. 
##############################
From agent.py
exp(cat_2082, couch_192)
Find cat_2082. 
##############################
From agent.py-> find a plan in act()
walk_executor(cat_2082)obs(cat_2082, Locate the cat)grab_executor(cat_2082)walk_executor(table_193)put_executor(cat_2082, table_193)
##############################
From agent.py
walk_executor(cat_2082)
Robot find: Robot is close to the couch_192. Robot is close to the cat_2082. 
##############################
From agent.py
obs(cat_2082, Locate the cat)
Get this information:  cat_2082 is inside home_office_161. cat_2082 is close to couch_192. cat_2082 is close to character_219. cat_2082 is on couch_192. cat_2082 is DIRTY.
##############################
From agent.py
grab_executor(cat_2082)
Robot find: Robot is close to the couch_192. Robot is close to the cat_2082. Grabbing cat_2082 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the cat_2082. Robot is close to the table_193. 
##############################
From agent.py
put_executor(cat_2082, table_193)
Robot find: Robot is close to the cat_2082. Robot is close to the table_193. table_193 is close cat_2082. cat_2082 is close table_193. cat_2082 is on table_193. cat_2082 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a bowl of water and put the bowl on the table in home office. Then find my cat put it on the table.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(kitchen_counter_132)', 'walk_executor(kitchen_counter_129)', 'walk_executor(cutting_board_2080)', 'walk_executor(window_40)', 'open_executor(window_40)', 'walk_executor(toaster_144)', 'open_executor(toaster_144)', 'walk_executor(table_123)', 'walk_executor(bowl_2095)', 'grab_executor(bowl_2095)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(table_193)', 'put_executor(bowl_2095, table_193)', 'grab_executor(bowl_2095)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(table_193)', 'put_executor(bowl_2095, table_193)', 'grab_executor(bowl_2095)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(table_193)', 'put_executor(bowl_2095, table_193)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(home_office_161)', 'walk_executor(couch_192)', 'walk_executor(cat_2082)', 'grab_executor(cat_2082)', 'walk_executor(table_193)', 'put_executor(cat_2082, table_193)']
Time info:
Time consume: 311 seconds
Exp_helper query times: 2
Guidance query times: 0
library scale: 119
goal generate times: 8
goal correct times: 2
action_num: 37

Task complete rate:
1
Scene_id: 2
##############################
