From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and then toast it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_kitchen_counter_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior slice_bread(bread: item, cutting_board: item):
    body:
        achieve_once on(bread, cutting_board)
        # Place the bread on the cutting board to slice it
        achieve cut(bread)
        # Slice the bread

behavior toast_bread(bread: item, toaster: item):
    body:
        achieve_once inside(bread, toaster)
        # Place the sliced bread inside the toaster
        achieve_once plugged(toaster)
        # Ensure the toaster is plugged in
        achieve_once is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select a bread item
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        slice_bread(bread, cutting_board)
        # Slice the bread using the cutting board
        
        toast_bread(bread, toaster)
        # Toast the sliced bread using the toaster
#goal_representation_end

##############################
From agent.py->reset_goal
behavior slice_bread(bread: item, cutting_board: item):
    body:
        achieve_once on(bread, cutting_board)
        # Place the bread on the cutting board to slice it
        achieve cut(bread)
        # Slice the bread

behavior toast_bread(bread: item, toaster: item):
    body:
        achieve_once inside(bread, toaster)
        # Place the sliced bread inside the toaster
        achieve_once plugged(toaster)
        # Ensure the toaster is plugged in
        achieve_once is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select a bread item
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        slice_bread(bread, cutting_board)
        # Slice the bread using the cutting board
        
        toast_bread(bread, toaster)
        # Toast the sliced bread using the toaster
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_bread_2084, kitchen_counter_123)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)walk_executor(toaster_132)open_executor(toaster_132)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)close_executor(toaster_132)switchon_executor(toaster_132)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_bread_2084, kitchen_counter_123)
Fail to find food_bread_2084 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bread_2084, fridge_126)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_bread_2084)cut_executor(food_bread_2084)walk_executor(toaster_132)open_executor(toaster_132)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)close_executor(toaster_132)switchon_executor(toaster_132)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_bread_2084, fridge_126)
Fail to find food_bread_2084 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(food_bread_2084, cupboard_117)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_bread_2084)cut_executor(food_bread_2084)walk_executor(toaster_132)open_executor(toaster_132)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)close_executor(toaster_132)switchon_executor(toaster_132)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(food_bread_2084, cupboard_117)
Fail to find food_bread_2084 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(toaster_132)open_executor(toaster_132)exp(food_bread_2084, toaster_132)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)close_executor(toaster_132)switchon_executor(toaster_132)
##############################
From agent.py
walk_executor(toaster_132)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. Robot is close to the toaster_132. 
##############################
From agent.py
open_executor(toaster_132)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the toaster_132. toaster_132 is opened. 
##############################
From agent.py
exp(food_bread_2084, toaster_132)
Fail to find food_bread_2084 around toaster_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2123)exp(food_bread_2084, cutting_board_2123)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)close_executor(toaster_132)switchon_executor(toaster_132)
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_bread_2084, cutting_board_2123)
Fail to find food_bread_2084 around cutting_board_2123. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)exp(food_bread_2084, oven_127)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)close_executor(toaster_132)switchon_executor(toaster_132)
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find food_bread_2084 ?
Answer: The target item, food_bread_2084, is located inside dining_room_41. It is on top of table_114. You can find it by looking on table_114 within the dining room.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, food_bread_2084, is located inside dining_room_41. It is on top of table_114. You can find it by looking on table_114 within the dining room.

The actions you have taken:
Action 1: Walk to kitchen_counter_123.
Action 2: look for food_bread_2084 around kitchen_counter_123.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_bread_2084 around fridge_126.
Action 7: Walk to cupboard_117.
Action 8: look for food_bread_2084 around cupboard_117.
Action 9: Walk to toaster_132.
Action 10: Open toaster_132.
Action 11: look for food_bread_2084 around toaster_132.
Action 12: Walk to cutting_board_2123.
Action 13: look for food_bread_2084 around cutting_board_2123.
Action 14: Walk to oven_127.
Action 15: Open oven_127.

##############################
From agent.py
exp(food_bread_2084, oven_127)
Fail to find food_bread_2084 around oven_127. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice and toast the bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
behavior slice_and_toast_bread(bread: item, toaster: item, cutting_board: item):
    body:
        achieve_once on(bread, cutting_board) # Place the bread on a cutting board for slicing
        achieve_once cut(bread) # Slice the bread
        achieve_once inside(bread, toaster) # Place sliced bread inside the toaster

behavior plug_in_toaster(toaster: item):
    body:
        achieve_once plugged(toaster) # Plug in the toaster to a power source
        achieve_once is_on(toaster) # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the specific bread instance

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and on(bread, table) and inside(table, dining_room)
        # Select the table with the bread on it inside the dining room

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        slice_and_toast_bread(bread, toaster, cutting_board)
        plug_in_toaster(toaster)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def is_bread_present_on_table(table:item):
    # Function to check if there is bread on the specified table
    symbol has_bread=exists o: item : (is_food_bread(o) and on(o, table))
    return has_bread

behavior fetch_the_bread_from_table(table:item, bread:item):
    body:
        achieve close_char(char, table) 
        # Approach the table containing bread
        achieve_once inhand(bread) 
        # Pick up the bread

behavior cut_and_toast_bread(bread:item, toaster:item):
    body:
        achieve_once cut(bread) 
        # Slice the bread
        achieve_once inside(bread, toaster)
        # Insert bread into toaster
        achieve_once plugged(toaster)
        # Ensure toaster is plugged in
        achieve_once is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        if exists table: item : (is_table(table) and has_bread_present_on_table(table)):
            # There is an identified table with bread
            bind bread: item where:
                is_food_bread(bread) and on(bread, table)
            # Select the bread on the table
            fetch_the_bread_from_table(table, bread)

        else:
            # Identify table and fetch bread on it by observation since its not identified
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check unvisited tables for bread
                    observe(table,"Check for bread on the table")
        
        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster
        cut_and_toast_bread(bread, toaster)
        # Cut and toast the bread with the toaster

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function has_bread_present_on_table not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#goal_representation
 
def is_bread_present_on_table(table:item):
    # Function to check if there is bread on the specified table
    symbol has_bread=exists o: item : (is_food_bread(o) and on(o, table))
    return has_bread

behavior fetch_the_bread_from_table(table:item, bread:item):
    body:
        achieve close_char(char, table) 
        # Approach the table containing bread
        achieve_once inhand(bread) 
        # Pick up the bread

behavior cut_and_toast_bread(bread:item, toaster:item):
    body:
        achieve_once cut(bread) 
        # Slice the bread
        achieve_once inside(bread, toaster)
        # Insert bread into toaster
        achieve_once plugged(toaster)
        # Ensure toaster is plugged in
        achieve_once is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        if exists table: item : (is_table(table) and is_bread_present_on_table(table)):
            # There is an identified table with bread
            bind bread: item where:
                is_food_bread(bread) and on(bread, table)
            # Select the bread on the table
            fetch_the_bread_from_table(table, bread)

        else:
            # Identify table and fetch bread on it by observation since its not identified
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check unvisited tables for bread
                    observe(table,"Check for bread on the table")
        
        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster
        cut_and_toast_bread(bread, toaster)
        # Cut and toast the bread with the toaster

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: bread; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#goal_representation
 
def is_bread_present_on_table(table:item):
    # Function to check if there is bread on the specified table
    symbol has_bread=exists o: item : (is_food_bread(o) and on(o, table))
    return has_bread

behavior fetch_the_bread_from_table(table:item, bread:item):
    body:
        achieve close_char(char, table) 
        # Approach the table containing bread
        achieve_once inhand(bread) 
        # Pick up the bread

behavior cut_and_toast_bread(bread:item, toaster:item):
    body:
        achieve_once cut(bread) 
        # Slice the bread
        achieve_once inside(bread, toaster)
        # Insert bread into toaster
        achieve_once plugged(toaster)
        # Ensure toaster is plugged in
        achieve_once is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        if exists table: item : (is_table(table) and is_bread_present_on_table(table)):
            # There is an identified table with bread
            bind bread: item where:
                is_food_bread(bread) and on(bread, table)
            # Select the bread on the table
            fetch_the_bread_from_table(table, bread)

        else:
            # Identify table and fetch bread on it by observation since its not identified
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check unvisited tables for bread
                    observe(table,"Check for bread on the table")
        
        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        # Ensure that bread is defined before calling the behavior that uses it
        if exists bread: item : (is_food_bread(bread)):
            cut_and_toast_bread(bread, toaster)
        # Cut and toast the bread with the toaster

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def is_bread_on_table(table:item):
    # Function to check if there is bread on the specified table
    symbol has_bread = exists o: item : (is_food_bread(o) and on(o, table))
    return has_bread

behavior __goal__():
    body:
        if exists table: item : (is_table(table) and id[table] == 114 and is_bread_on_table(table)):
            # Check if table_114 has bread based on the available information
            bind table: item where:
                is_table(table) and id[table] == 114 and is_bread_on_table(table) # Consistent with the if condition above
            bind bread: item where:
                is_food_bread(bread) and on(bread, table)

            achieve close_char(char, table)
            # Move the character closer to the table with bread
            
            if not visited(toaster_132):
                observe(toaster_132, "Check if the toaster is ready for use")
                # Observe the toaster to determine its readiness

            foreach o: item:
                if is_food_bread(o) and is_food(o):
                    achieve_once cut(o)
                    # Slice the bread
                    achieve_once inside(o, toaster_132)
                    # Place the bread inside the toaster
                    achieve is_on(toaster_132)
                    # Toast the bread

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: toaster_132; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#goal_representation
 
def is_bread_on_table(table:item):
    # Function to check if there is bread on the specified table
    symbol has_bread = exists o: item : (is_food_bread(o) and on(o, table))
    return has_bread

behavior __goal__():
    body:
        bind toaster: item where:
            is_toaster(toaster) and id[toaster] == 132
        # Declare toaster before using it

        if exists table: item : (is_table(table) and id[table] == 114 and is_bread_on_table(table)):
            # Check if table_114 has bread based on the available information
            bind table: item where:
                is_table(table) and id[table] == 114 and is_bread_on_table(table) # Consistent with the if condition above
            bind bread: item where:
                is_food_bread(bread) and on(bread, table)

            achieve close_char(char, table)
            # Move the character closer to the table with bread
            
            if not visited(toaster):
                observe(toaster, "Check if the toaster is ready for use")
                # Observe the toaster to determine its readiness

            foreach o: item:
                if is_food_bread(o) and is_food(o):
                    achieve_once cut(o)
                    # Slice the bread
                    achieve_once inside(o, toaster)
                    # Place the bread inside the toaster
                    achieve is_on(toaster)
                    # Toast the bread

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Slice the bread.', '2. Toast the sliced bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_bread(table:item):
    body:
        # Check if the bread is on the specified table
        observe(table, "Check if food_bread_2084 is on the table")

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table] == 114
        # Select table_114 inside the dining room

        if not exists bread: item : (is_food_bread(bread) and on(bread, table)):
            # If food_bread_2084 is not known to be on table_114, observe the table
            find_bread(table)
        else:
            # If the bread is found, move close to it
            achieve close_char(char, bread)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'bread') at line 5439, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#goal_representation

def is_bread_on_table(table:item):
    # Function to check if the bread exists on the specified table
    symbol has_bread=exists b: item : (is_food_bread(b) and on(b, table))
    return has_bread

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table] == 114
        # Select table_114 inside the dining room

        if not exists bread: item : (is_food_bread(bread) and on(bread, table)):
            # If food_bread_2084 is not known to be on table_114, observe the table
            find_bread(table)
        else:
            # If the bread is found, move close to it
            bind bread: item where:
                is_food_bread(bread) and on(bread, table)
            achieve close_char(char, bread)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'bread') at line 5439, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2035_around_knife_2035(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2035
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#goal_representation
 
def is_bread_on_table(table:item):
    # Function to check if the bread exists on the specified table
    symbol has_bread=exists b: item : (is_food_bread(b) and on(b, table))
    return has_bread

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table] == 114
        # Select table_114 inside the dining room

        if not is_bread_on_table(table):
            # If food_bread_2084 is not known to be on table_114, observe the table
            observe(table, "Check if food_bread_2084 is on the table")
        else:
            # If the bread is found, move close to it
            bind bread: item where:
                is_food_bread(bread) and on(bread, table)
            achieve close_char(char, bread)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_bread_on_table(table:item):
    # Function to check if the bread exists on the specified table
    symbol has_bread=exists b: item : (is_food_bread(b) and on(b, table))
    return has_bread

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table] == 114
        # Select table_114 inside the dining room

        if not is_bread_on_table(table):
            # If food_bread_2084 is not known to be on table_114, observe the table
            observe(table, "Check if food_bread_2084 is on the table")
        else:
            # If the bread is found, move close to it
            bind bread: item where:
                is_food_bread(bread) and on(bread, table)
            achieve close_char(char, bread)

##############################
From agent.py-> find a plan in act()
walk_executor(table_114)obs(table_114, Check if food_bread_2084 is on the table)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
obs(table_114, Check if food_bread_2084 is on the table)
Get this information:  cup_2049 is on table_114. box_2038 is on table_114. clothes_hat_2117 is on table_114. table_114 is inside dining_room_41. milk_2115 is on table_114. cup_2134 is on table_114. table_114 is facing drawing_110. table_114 is facing drawing_111. check_2058 is on table_114. clothes_gloves_2118 is on table_114. table_114 is close to cup_2049. table_114 is close to check_2058. table_114 is close to food_bread_2084. table_114 is close to floor_44. table_114 is close to floor_47. table_114 is close to floor_48. table_114 is close to floor_50. table_114 is close to dry_pasta_2114. table_114 is close to milk_2115. table_114 is close to clothes_hat_2117. table_114 is close to clothes_gloves_2118. table_114 is close to knife_2122. table_114 is close to cup_2132. table_114 is close to cup_2133. table_114 is close to cup_2134. table_114 is close to table_cloth_2005. table_114 is close to food_food_2021. table_114 is close to mat_102. table_114 is close to pillow_103. table_114 is close to pillow_104. table_114 is close to pillow_105. table_114 is close to pillow_106. table_114 is close to bench_113. table_114 is close to bench_115. table_114 is close to box_2038. table_114 is close to character_240. cup_2132 is on table_114. table_114 is on mat_102. table_114 is on floor_47. food_food_2021 is on table_114. knife_2122 is on table_114. cup_2133 is on table_114. table_cloth_2005 is on table_114. food_bread_2084 is on table_114. dry_pasta_2114 is on table_114. table_114 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to slice the bread. Although you've located the bread on table_114, you have not yet performed any action to slice it. Use the knife on the table to proceed with slicing the bread.
##############################
From agent.py
Human Instruction: You need to slice the bread. Although you've located the bread on table_114, you have not yet performed any action to slice it. Use the knife on the table to proceed with slicing the bread.

The actions you have taken:
Action 1: Walk to kitchen_counter_123.
Action 2: look for food_bread_2084 around kitchen_counter_123.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_bread_2084 around fridge_126.
Action 7: Walk to cupboard_117.
Action 8: look for food_bread_2084 around cupboard_117.
Action 9: Walk to toaster_132.
Action 10: Open toaster_132.
Action 11: look for food_bread_2084 around toaster_132.
Action 12: Walk to cutting_board_2123.
Action 13: look for food_bread_2084 around cutting_board_2123.
Action 14: Walk to oven_127.
Action 15: Open oven_127.
Action 16: look for food_bread_2084 around oven_127.
Action 17: Walk to table_114.
Action 18: Observe around table_114 with the question of Check if food_bread_2084 is on the table.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2155_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_knife_2122_around_table_199(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(knife,table_instance)
        else:
            exp(knife,table_instance)
    eff:
        unknown[knife]=False
        close[knife,table_instance]=True
        close[table_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread:item, knife:item, table:item):
    body:
        achieve_once close_char(char, table) # Approach the table where the bread is located
        achieve_once close_char(char, knife) # Approach the knife on the table
        achieve_once inhand(knife) # Temporarily hold the knife
        achieve cut(bread) # Slice the bread with the knife

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select bread
        bind knife: item where:
            is_knife(knife)
        # Select knife
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select table with ID 114
        slice_bread(bread, knife, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior slice_bread(bread:item, knife:item, table:item):
    body:
        achieve_once close_char(char, table) # Approach the table where the bread is located
        achieve_once close_char(char, knife) # Approach the knife on the table
        achieve_once inhand(knife) # Temporarily hold the knife
        achieve cut(bread) # Slice the bread with the knife

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select bread
        bind knife: item where:
            is_knife(knife)
        # Select knife
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select table with ID 114
        slice_bread(bread, knife, table)

##############################
From agent.py-> find a plan in act()
walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(food_bread_2084)cut_executor(food_bread_2084)
##############################
From agent.py
walk_executor(knife_2122)
Robot find: Robot is close to the table_114. Robot is close to the knife_2122. 
##############################
From agent.py
grab_executor(knife_2122)
Robot find: Robot is close to the table_114. Robot is close to the knife_2122. Grabbing knife_2122 by right hand. 
##############################
From agent.py
walk_executor(food_bread_2084)
Robot find: Robot is close to the table_114. Robot is close to the knife_2122. Robot is close to the food_bread_2084. 
##############################
From agent.py
grab_executor(food_bread_2084)
Robot find: Robot is close to the table_114. Robot is close to the knife_2122. Robot is close to the food_bread_2084. Grabbing food_bread_2084 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2122. Robot is close to the food_bread_2084. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_bread_2084, cutting_board_2123)
Robot find: Robot is close to the knife_2122. Robot is close to the food_bread_2084. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_bread_2084. food_bread_2084 is close cutting_board_2123. food_bread_2084 is on cutting_board_2123. food_bread_2084 released by left hand. 
##############################
From agent.py
walk_executor(food_bread_2084)
Robot find: Robot is close to the knife_2122. Robot is close to the food_bread_2084. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_bread_2084)
Robot find: Robot is close to the knife_2122. Robot is close to the food_bread_2084. Robot is close to the cutting_board_2123. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_table_199(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(knife,table_instance)
        else:
            exp(knife,table_instance)
    eff:
        unknown[knife]=False
        close[knife,table_instance]=True
        close[table_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_bread_sliced(bread:item):
    # Function to check if the bread is sliced
    symbol sliced= cut(bread)
    return sliced

def in_toaster(bread:item, toaster:item):
    # Function to check if the bread is in the toaster
    symbol is_inside= inside(bread, toaster)
    return is_inside

behavior toast_bread(bread:item, toaster:item):
    body:
        if not in_toaster(bread, toaster):
            achieve_once inside(bread, toaster) # Place the sliced bread inside the toaster
            achieve_once closed(toaster) # Ensure the toaster is closed
            achieve is_on(toaster) # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind toast_bread: item where:
            is_toaster(toast_bread)
        # Select a toaster

        bind sliced_bread: item where:
            is_food_bread(sliced_bread) and is_bread_sliced(sliced_bread)
        # Select the sliced bread

        toast_bread(sliced_bread, toast_bread)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_bread_sliced(bread:item):
    # Function to check if the bread is sliced
    symbol sliced= cut(bread)
    return sliced

def in_toaster(bread:item, toaster:item):
    # Function to check if the bread is in the toaster
    symbol is_inside= inside(bread, toaster)
    return is_inside

behavior toast_bread(bread:item, toaster:item):
    body:
        if not in_toaster(bread, toaster):
            achieve_once inside(bread, toaster) # Place the sliced bread inside the toaster
            achieve_once closed(toaster) # Ensure the toaster is closed
            achieve is_on(toaster) # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind toast_bread: item where:
            is_toaster(toast_bread)
        # Select a toaster

        bind sliced_bread: item where:
            is_food_bread(sliced_bread) and is_bread_sliced(sliced_bread)
        # Select the sliced bread

        toast_bread(sliced_bread, toast_bread)

##############################
From agent.py-> find a plan in act()
grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)close_executor(toaster_132)switchon_executor(toaster_132)
##############################
From agent.py
grab_executor(food_bread_2084)
Robot find: Robot is close to the knife_2122. Robot is close to the food_bread_2084. Robot is close to the cutting_board_2123. Grabbing food_bread_2084 by left hand. 
##############################
From agent.py
walk_executor(toaster_132)
Robot find: Robot is close to the knife_2122. Robot is close to the food_bread_2084. Robot is close to the kitchen_counter_122. Robot is close to the toaster_132. 
##############################
From agent.py
putin_executor(food_bread_2084, toaster_132)
Robot find: Robot is close to the knife_2122. Robot is close to the food_bread_2084. Robot is close to the kitchen_counter_122. Robot is close to the toaster_132. toaster_132 is close food_bread_2084. food_bread_2084 is inside toaster_132. food_bread_2084 is close toaster_132. food_bread_2084 released by left hand. 
##############################
From agent.py
close_executor(toaster_132)
Robot find: Robot is close to the knife_2122. Robot is close to the kitchen_counter_122. Robot is close to the toaster_132. toaster_132 is closed. 
##############################
From agent.py
switchon_executor(toaster_132)
Robot find: Robot is close to the knife_2122. Robot is close to the kitchen_counter_122. Robot is close to the toaster_132. toaster_132 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Slice and toast bread.
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(cupboard_117)', 'walk_executor(toaster_132)', 'open_executor(toaster_132)', 'walk_executor(cutting_board_2123)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'walk_executor(table_114)', 'walk_executor(knife_2122)', 'grab_executor(knife_2122)', 'walk_executor(food_bread_2084)', 'grab_executor(food_bread_2084)', 'walk_executor(cutting_board_2123)', 'put_executor(food_bread_2084, cutting_board_2123)', 'walk_executor(food_bread_2084)', 'cut_executor(food_bread_2084)', 'grab_executor(food_bread_2084)', 'walk_executor(toaster_132)', 'putin_executor(food_bread_2084, toaster_132)', 'close_executor(toaster_132)', 'switchon_executor(toaster_132)']
Time info:
Time consume: 202 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 70
goal generate times: 7
goal correct times: 3
action_num: 24

Task complete rate:
1
Scene_id: 1
##############################
