From agent.py
Reset goals: The sub-goals are: 
['Turn on the computer in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_laptop_2015_around_computer_2110(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(laptop,computer_instance)
        else:
            exp(laptop,computer_instance)
    eff:
        unknown[laptop]=False
        close[laptop,computer_instance]=True
        close[computer_instance,laptop]=True
    

behavior find_mouse_380_around_computer_2110(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_keyboard_2111_around_computer_2110(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_computer(computer:item):
    body:
        achieve_once plugged(computer)
        # Ensure the computer is plugged in before attempting to turn it on
        achieve_once is_on(computer)
        # Turn the computer on

behavior find_and_turn_on_computer():
    body:
        foreach computer: item:
            if is_computer(computer) and not visited(computer):
                observe(computer,"Find the computer and check if it can be turned on")
                if has_switch(computer):
                    turn_on_computer(computer)

behavior __goal__():
    body:
        if exists computer: item : (is_computer(computer) and has_switch(computer)):
            # Check if there is a computer with a switch based on known information
            bind computer: item where:
                is_computer(computer) and has_switch(computer)
            # Select the computer with a switch
            turn_on_computer(computer)
        else:
            # If no computer with a switch is found, initiate exploration to locate and turn on one
            find_and_turn_on_computer()

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior turn_on_computer(computer:item):
    body:
        achieve_once plugged(computer)
        # Ensure the computer is plugged in before attempting to turn it on
        achieve_once is_on(computer)
        # Turn the computer on

behavior find_and_turn_on_computer():
    body:
        foreach computer: item:
            if is_computer(computer) and not visited(computer):
                observe(computer,"Find the computer and check if it can be turned on")
                if has_switch(computer):
                    turn_on_computer(computer)

behavior __goal__():
    body:
        if exists computer: item : (is_computer(computer) and has_switch(computer)):
            # Check if there is a computer with a switch based on known information
            bind computer: item where:
                is_computer(computer) and has_switch(computer)
            # Select the computer with a switch
            turn_on_computer(computer)
        else:
            # If no computer with a switch is found, initiate exploration to locate and turn on one
            find_and_turn_on_computer()

##############################
From agent.py-> find a plan in act()
walk_executor(computer_2110)switchon_executor(computer_2110)
##############################
From agent.py
walk_executor(computer_2110)
Robot find: dvd_player_2000, mouse_2112, chair_2119, keyboard_2111, pillow_195, laser_pointer_2025, mat_201, oil_2005, drawing_196, Robot is close to the table_193. Robot is close to the computer_2110. 
##############################
From agent.py
switchon_executor(computer_2110)
Robot find: Robot is close to the table_193. Robot is close to the computer_2110. computer_2110 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Turn on the computer in home office.
Action History:
['walk_executor(computer_2110)', 'switchon_executor(computer_2110)']
Time info:
Time consume: 18 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 115
goal generate times: 1
goal correct times: 0
action_num: 2

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
