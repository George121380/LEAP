From agent.py
Reset goals: The sub-goals are: 
['1. Find the pizza and hamburger.', '2. Put the pizza and hamburger on a plate.', '3. Heat them in the microwave.', '4. Put the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

behavior find_food_hamburger_2024_around_oven_295(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_hamburger,oven_instance)
        else:
            exp(food_hamburger,oven_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,oven_instance]=True
        close[oven_instance,food_hamburger]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_found(food_pizza:item, food_hamburger:item):
    # Function to check if both pizza and hamburger are found
    return visited(food_pizza) and visited(food_hamburger)
    
behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza from items

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger from items

        if not is_item_found(pizza, hamburger):
            if not visited(pizza):
                observe(pizza, "Locate the pizza")
            if not visited(hamburger):
                observe(hamburger, "Locate the hamburger")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_item_found(food_pizza:item, food_hamburger:item):
    # Function to check if both pizza and hamburger are found
    return visited(food_pizza) and visited(food_hamburger)
    
behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza from items

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger from items

        if not is_item_found(pizza, hamburger):
            if not visited(pizza):
                observe(pizza, "Locate the pizza")
            if not visited(hamburger):
                observe(hamburger, "Locate the hamburger")

##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)exp(food_pizza_2034, oven_295)walk_executor(food_pizza_2034)obs(food_pizza_2034, Locate the pizza)walk_executor(oven_295)exp(food_hamburger_2024, oven_295)walk_executor(food_hamburger_2024)obs(food_hamburger_2024, Locate the hamburger)
##############################
From agent.py
walk_executor(oven_295)
Robot find: drawing_240, drawing_238, drawing_239, Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
exp(food_pizza_2034, oven_295)
Fail to find food_pizza_2034 around oven_295. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_pizza_2034, fridge_289)walk_executor(food_pizza_2034)obs(food_pizza_2034, Locate the pizza)walk_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)obs(food_hamburger_2024, Locate the hamburger)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_pizza_2034, fridge_289)
Find food_pizza_2034. 
##############################
From agent.py-> find a plan in act()
obs(food_pizza_2034, Locate the pizza)obs(food_hamburger_2024, Locate the hamburger)
##############################
From agent.py
obs(food_pizza_2034, Locate the pizza)
Get this information:  food_pizza_2034 is inside fridge_289. food_pizza_2034 is inside dining_room_201. food_pizza_2034 is close to fridge_289. food_pizza_2034 is close to character_65. food_pizza_2034 is CLEAN.
##############################
From agent.py
obs(food_hamburger_2024, Locate the hamburger)
Get this information:  food_hamburger_2024 is inside fridge_289. food_hamburger_2024 is inside dining_room_201. food_hamburger_2024 is close to fridge_289. food_hamburger_2024 is close to character_65. food_hamburger_2024 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_closetdrawer_119(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cat,closetdrawer_instance)
        else:
            exp(cat,closetdrawer_instance)
    eff:
        unknown[cat]=False
        close[cat,closetdrawer_instance]=True
        close[closetdrawer_instance,cat]=True
    

behavior find_plate_1000_around_table_226(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(food: item, plate: item):
    body:
        if not inhand(food):
            grab(food)
        if not on(food, plate):
            put_on(food, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate from items

        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        # Select pizza from items
        
        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        # Select hamburger from items

        # Place pizza on the plate
        place_food_on_plate(food_pizza, plate)

        # Place hamburger on the plate
        place_food_on_plate(food_hamburger, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_food_on_plate(food: item, plate: item):
    body:
        if not inhand(food):
            grab(food)
        if not on(food, plate):
            put_on(food, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate from items

        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        # Select pizza from items
        
        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        # Select hamburger from items

        # Place pizza on the plate
        place_food_on_plate(food_pizza, plate)

        # Place hamburger on the plate
        place_food_on_plate(food_hamburger, plate)

##############################
From agent.py-> find a plan in act()
grab_executor(food_pizza_2034)walk_executor(table_226)exp(plate_1000, table_226)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
grab_executor(food_pizza_2034)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_pizza_2034 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: drawing_243, bowl_2071, coffee_filter_2000, drawing_2003, drawing_241, bowl_2072, mat_236, fork_2080, drawing_242, fork_2081, mat_237, Robot is close to the food_pizza_2034. Robot is close to the table_226. 
##############################
From agent.py
exp(plate_1000, table_226)
Fail to find plate_1000 around table_226. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(plate_1000, kitchen_counter_230)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_pizza_2034. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(plate_1000, kitchen_counter_230)
Fail to find plate_1000 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the food_pizza_2034. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the sink_231. Robot is close to the plate_1000. 
##############################
From agent.py
put_executor(food_pizza_2034, plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the sink_231. Robot is close to the plate_1000. plate_1000 is close food_pizza_2034. food_pizza_2034 is close plate_1000. food_pizza_2034 is on plate_1000. food_pizza_2034 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. Grabbing food_hamburger_2024 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_hamburger_2024, plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_hamburger_2024. food_hamburger_2024 is close plate_1000. food_hamburger_2024 is on plate_1000. food_hamburger_2024 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_microwave_plugged(microwave: item):
    # Function to check if the microwave is plugged in
    return plugged(microwave)

def is_food_heated(plate: item, microwave: item):
    # Function to check if the food on the plate has been heated
    return inside(plate, microwave) and not is_on(microwave)

behavior heat_plate_with_food(microwave: item, plate: item):
    body:
        if not is_microwave_plugged(microwave):
            plugin(microwave)
            # Plug in the microwave if its not plugged in

        if not inside(plate, microwave):
            put_inside(plate, microwave)
            # Put the plate with the pizza and hamburger inside the microwave

        if open(microwave):
            closes(microwave)
            # Close the microwave door if its open

        if is_off(microwave):
            switch_on(microwave)
            # Turn on the microwave to start heating

        # Wait for the heating process (assumed to succeed)

        if is_on(microwave):
            switch_off(microwave)
            # After heating, turn off the microwave to stop it

        if open(microwave):
            closes(microwave)
            # Ensure the microwave door is closed at the end

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)
        # Select the plate with pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_plate_with_food(microwave, plate)
        # Heat the plate with the pizza and hamburger inside the microwave

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_microwave_plugged(microwave: item):
    # Function to check if the microwave is plugged in
    return plugged(microwave)

def is_food_heated(plate: item, microwave: item):
    # Function to check if the food on the plate has been heated
    return inside(plate, microwave) and not is_on(microwave)

behavior heat_plate_with_food(microwave: item, plate: item):
    body:
        if not is_microwave_plugged(microwave):
            plugin(microwave)
            # Plug in the microwave if its not plugged in

        if not inside(plate, microwave):
            put_inside(plate, microwave)
            # Put the plate with the pizza and hamburger inside the microwave

        if open(microwave):
            closes(microwave)
            # Close the microwave door if its open

        if is_off(microwave):
            switch_on(microwave)
            # Turn on the microwave to start heating

        # Wait for the heating process (assumed to succeed)

        if is_on(microwave):
            switch_off(microwave)
            # After heating, turn off the microwave to stop it

        if open(microwave):
            closes(microwave)
            # Ensure the microwave door is closed at the end

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2034, plate) and on(food_hamburger_2024, plate)
        # Select the plate with pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_plate_with_food(microwave, plate)
        # Heat the plate with the pizza and hamburger inside the microwave

##############################
From agent.py-> find a plan in act()
walk_executor(microwave_297)open_executor(microwave_297)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(plate_1000, microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is close plate_1000. plate_1000 is inside microwave_297. plate_1000 is close microwave_297. plate_1000 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned on. 
##############################
From agent.py
switchoff_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and close_char(char, plate)
        # Select the plate that is close to the character

        bind table: item where:
            is_table(table) and in_dining_room(table)
        # Select a table in the dining room

        walk_to(plate)
        # Move the character close to the plate

        grab(plate)
        # Grab the plate

        walk_to(table)
        # Move the character close to the table

        put_on(plate, table)
        # Put the plate on the table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and close_char(char, plate)
        # Select the plate that is close to the character

        bind table: item where:
            is_table(table) and in_dining_room(table)
        # Select a table in the dining room

        walk_to(plate)
        # Move the character close to the plate

        grab(plate)
        # Grab the plate

        walk_to(table)
        # Move the character close to the table

        put_on(plate, table)
        # Put the plate on the table in the dining room

##############################
From agent.py-> find a plan in act()
walk_executor(plate_1000)open_executor(microwave_297)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the microwave_297. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. microwave_297 is opened. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the plate_1000. Robot is close to the table_226. 
##############################
From agent.py
put_executor(plate_1000, table_226)
Robot find: Robot is close to the plate_1000. Robot is close to the table_226. plate_1000 is close table_226. plate_1000 is on table_226. table_226 is close plate_1000. plate_1000 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_pizza_2034)', 'walk_executor(table_226)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(kitchen_counter_230)', 'walk_executor(sink_231)', 'walk_executor(plate_1000)', 'put_executor(food_pizza_2034, plate_1000)', 'walk_executor(food_hamburger_2024)', 'grab_executor(food_hamburger_2024)', 'walk_executor(plate_1000)', 'put_executor(food_hamburger_2024, plate_1000)', 'walk_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(plate_1000)', 'grab_executor(plate_1000)', 'walk_executor(microwave_297)', 'putin_executor(plate_1000, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)', 'switchoff_executor(microwave_297)', 'walk_executor(plate_1000)', 'open_executor(microwave_297)', 'grab_executor(plate_1000)', 'walk_executor(table_226)', 'put_executor(plate_1000, table_226)']
Time info:
Time consume: 206 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 33
goal generate times: 4
goal correct times: 0
action_num: 31

Task complete rate:
1
Scene_id: 0
##############################
