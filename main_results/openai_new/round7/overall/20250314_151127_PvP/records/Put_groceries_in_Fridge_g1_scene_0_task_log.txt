From agent.py
Reset goals: The sub-goals are: 
['1. Find the milk, turkey, egg, fish, and chicken in the kitchen. ', '2. Determine an appropriate table in the dining room.', '3. Place the milk, turkey, egg, fish, and chicken on the identified table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_food_turkey_2040_around_kitchen_counter_230(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_turkey,kitchen_counter_instance)
        else:
            exp(food_turkey,kitchen_counter_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_turkey]=True
    

behavior find_food_fish_2021_around_kitchen_counter_230(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_in_kitchen(food: item):
    # Function to check if specific food items are located in the kitchen
    symbol found_food=exists location: item : (inside(location, kitchen) and (is_food_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)))
    return found_food

behavior __goal__():
    body:
        if exists kitchen: item : (is_food_in_kitchen(milk) and is_food_in_kitchen(turkey) and is_food_in_kitchen(egg) and is_food_in_kitchen(fish) and is_food_in_kitchen(chicken)):
            # If we know the required food items are in the kitchen, proceed to find them
            bind kitchen: item where:
                is_kitchen(kitchen)

        else:
            # Otherwise, check all rooms categorized as kitchens to find the items
            foreach kitchen: item:
                if is_kitchen(kitchen) and not visited(kitchen):
                    observe(kitchen, "Locate milk, turkey, egg, fish, and chicken in the kitchen")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_fish_2021_around_stove_2065(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_fish,stove_instance)
        else:
            exp(food_fish,stove_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,stove_instance]=True
        close[stove_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_found(kitchen:item):
    # Function to check if milk, turkey, egg, fish, and chicken are in the kitchen
    symbol has_food=exists o: item : (inside(o, kitchen) and (is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o)))
    return has_food

behavior locate_food_in_kitchen(food: item):
    body:
        if not visited(food):
            observe(food, "Locate the food in the kitchen")

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Select the kitchen counter

        if not is_food_found(kitchen):
            foreach food: item:
                if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)) and not visited(food):
                    locate_food_in_kitchen(food)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_food_found(kitchen:item):
    # Function to check if milk, turkey, egg, fish, and chicken are in the kitchen
    symbol has_food=exists o: item : (inside(o, kitchen) and (is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o)))
    return has_food

behavior locate_food_in_kitchen(food: item):
    body:
        if not visited(food):
            observe(food, "Locate the food in the kitchen")

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Select the kitchen counter

        if not is_food_found(kitchen):
            foreach food: item:
                if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)) and not visited(food):
                    locate_food_in_kitchen(food)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_chicken_2017, kitchen_counter_230)walk_executor(food_chicken_2017)obs(food_chicken_2017, Locate the food in the kitchen)walk_executor(kitchen_counter_230)exp(food_egg_2020, kitchen_counter_230)walk_executor(food_egg_2020)obs(food_egg_2020, Locate the food in the kitchen)walk_executor(stove_2065)open_executor(stove_2065)exp(food_fish_2021, stove_2065)walk_executor(food_fish_2021)obs(food_fish_2021, Locate the food in the kitchen)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_turkey_2040, fridge_289)walk_executor(food_turkey_2040)obs(food_turkey_2040, Locate the food in the kitchen)walk_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)obs(milk_2043, Locate the food in the kitchen)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_chicken_2017, kitchen_counter_230)
Fail to find food_chicken_2017 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)obs(food_chicken_2017, Locate the food in the kitchen)walk_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)obs(food_egg_2020, Locate the food in the kitchen)walk_executor(fridge_289)exp(food_fish_2021, fridge_289)walk_executor(food_fish_2021)obs(food_fish_2021, Locate the food in the kitchen)walk_executor(fridge_289)exp(food_turkey_2040, fridge_289)walk_executor(food_turkey_2040)obs(food_turkey_2040, Locate the food in the kitchen)walk_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)obs(milk_2043, Locate the food in the kitchen)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
obs(food_chicken_2017, Locate the food in the kitchen)obs(food_egg_2020, Locate the food in the kitchen)obs(food_fish_2021, Locate the food in the kitchen)obs(food_turkey_2040, Locate the food in the kitchen)obs(milk_2043, Locate the food in the kitchen)
##############################
From agent.py
obs(food_chicken_2017, Locate the food in the kitchen)
Get this information:  food_chicken_2017 is inside fridge_289. food_chicken_2017 is inside dining_room_201. food_chicken_2017 is close to fridge_289. food_chicken_2017 is close to character_65. food_chicken_2017 is CLEAN.
##############################
From agent.py
obs(food_egg_2020, Locate the food in the kitchen)
Get this information:  food_egg_2020 is inside fridge_289. food_egg_2020 is inside dining_room_201. food_egg_2020 is close to fridge_289. food_egg_2020 is close to character_65. food_egg_2020 is CLEAN.
##############################
From agent.py
obs(food_fish_2021, Locate the food in the kitchen)
Get this information:  food_fish_2021 is inside fridge_289. food_fish_2021 is inside dining_room_201. food_fish_2021 is close to fridge_289. food_fish_2021 is close to character_65. food_fish_2021 is DIRTY.
##############################
From agent.py
obs(food_turkey_2040, Locate the food in the kitchen)
Get this information:  food_turkey_2040 is inside fridge_289. food_turkey_2040 is inside dining_room_201. food_turkey_2040 is close to fridge_289. food_turkey_2040 is close to character_65. food_turkey_2040 is CLEAN.
##############################
From agent.py
obs(milk_2043, Locate the food in the kitchen)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_dining_room(table: item):
    # Check if the table is inside the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        if exists table: item : is_table(table) and is_table_in_dining_room(table):
            # If a table in the dining room is already known, approach it
            bind table: item where:
                is_table(table) and is_table_in_dining_room(table)
            walk_to(table)
        
        else:
            # Explore to find an appropriate table in the dining room
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Determine if this table is appropriate for placing items")
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_table_in_dining_room(table: item):
    # Check if the table is inside the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        if exists table: item : is_table(table) and is_table_in_dining_room(table):
            # If a table in the dining room is already known, approach it
            bind table: item where:
                is_table(table) and is_table_in_dining_room(table)
            walk_to(table)
        
        else:
            # Explore to find an appropriate table in the dining room
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Determine if this table is appropriate for placing items")
 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        if not inhand(milk):
            grab(milk)
        if not on(milk, table):
            put_on(milk, table)

        if not inhand(turkey):
            grab(turkey)
        if not on(turkey, table):
            put_on(turkey, table)

        if not inhand(egg):
            grab(egg)
        if not on(egg, table):
            put_on(egg, table)

        if not inhand(fish):
            grab(fish)
        if not on(fish, table):
            put_on(fish, table)

        if not inhand(chicken):
            grab(chicken)
        if not on(chicken, table):
            put_on(chicken, table)

def is_table_in_dining_room(table: item):
    # Check if the table is inside the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and is_table_in_dining_room(dining_table)
        # Select a table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        place_items_on_table(milk, turkey, egg, fish, chicken, dining_table)
        # Place all items on the selected table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_items_on_table(milk: item, turkey: item, egg: item, fish: item, chicken: item, table: item):
    body:
        if not inhand(milk):
            grab(milk)
        if not on(milk, table):
            put_on(milk, table)

        if not inhand(turkey):
            grab(turkey)
        if not on(turkey, table):
            put_on(turkey, table)

        if not inhand(egg):
            grab(egg)
        if not on(egg, table):
            put_on(egg, table)

        if not inhand(fish):
            grab(fish)
        if not on(fish, table):
            put_on(fish, table)

        if not inhand(chicken):
            grab(chicken)
        if not on(chicken, table):
            put_on(chicken, table)

def is_table_in_dining_room(table: item):
    # Check if the table is inside the dining room
    symbol in_dining_room = exists room: item : (is_dining_room(room) and inside(table, room))
    return in_dining_room

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and is_table_in_dining_room(dining_table)
        # Select a table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        place_items_on_table(milk, turkey, egg, fish, chicken, dining_table)
        # Place all items on the selected table in the dining room

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)walk_executor(food_turkey_2040)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the milk_2043. Robot is close to the table_226. 
##############################
From agent.py
put_executor(milk_2043, table_226)
Robot find: Robot is close to the milk_2043. Robot is close to the table_226. milk_2043 is close table_226. table_226 is close milk_2043. milk_2043 is on table_226. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_turkey_2040)
Robot find: Robot is close to the food_turkey_2040. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot find: Robot is close to the food_turkey_2040. Robot is close to the fridge_289. Grabbing food_turkey_2040 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_turkey_2040. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_turkey_2040, table_226)
Robot find: Robot is close to the food_turkey_2040. Robot is close to the table_226. food_turkey_2040 is close table_226. table_226 is close food_turkey_2040. food_turkey_2040 is on table_226. food_turkey_2040 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_egg_2020. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_egg_2020, table_226)
Robot find: Robot is close to the food_egg_2020. Robot is close to the table_226. food_egg_2020 is close table_226. table_226 is close food_egg_2020. food_egg_2020 is on table_226. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the fridge_289. Robot is close to the food_fish_2021. 
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the fridge_289. Robot is close to the food_fish_2021. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_fish_2021, table_226)
Robot find: Robot is close to the food_fish_2021. Robot is close to the table_226. food_fish_2021 is close table_226. table_226 is close food_fish_2021. food_fish_2021 is on table_226. food_fish_2021 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the table_226. 
##############################
From agent.py
put_executor(food_chicken_2017, table_226)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the table_226. food_chicken_2017 is close table_226. table_226 is close food_chicken_2017. food_chicken_2017 is on table_226. food_chicken_2017 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put milk, turkey, egg, fish and chicken on one of the table in dining room.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(table_226)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(table_226)', 'put_executor(milk_2043, table_226)', 'walk_executor(food_turkey_2040)', 'grab_executor(food_turkey_2040)', 'walk_executor(table_226)', 'put_executor(food_turkey_2040, table_226)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(table_226)', 'put_executor(food_egg_2020, table_226)', 'walk_executor(food_fish_2021)', 'grab_executor(food_fish_2021)', 'walk_executor(table_226)', 'put_executor(food_fish_2021, table_226)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(table_226)', 'put_executor(food_chicken_2017, table_226)']
Time info:
Time consume: 254 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 54
goal generate times: 4
goal correct times: 0
action_num: 25

Task complete rate:
1
Scene_id: 0
##############################
