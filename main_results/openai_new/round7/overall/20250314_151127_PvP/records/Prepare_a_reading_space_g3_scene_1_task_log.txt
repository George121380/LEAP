From agent.py
Reset goals: The sub-goals are: 
['1. Find a book and put it on the coffee table in the home office.', '2. Open the window in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2137_around_bookshelf_275(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(table: item):
    # Check if the table is the correct coffee table in the home office
    return is_table(table) and id[table] == 193

behavior locate_and_place_book(book: item, table: item):
    body:
        if not inhand(book):
            grab(book)
        # Place the book on the table
        if not on(book, table):
            put_on(book, table)

behavior locate_table_and_place_book(book: item):
    body:
        # Evaluate if this is the correct coffee table
        bind table: item where:
            is_table(table) and is_coffee_table_in_home_office(table)

        if not visited(table):
            observe(table, "Verify if this table is the correct coffee table")

        if is_coffee_table_in_home_office(table):
            walk_to(table)
            locate_and_place_book(book, table)
        else:
            foreach table: item:
                if not on(book, table):
                    walk_to(table)
                    locate_and_place_book(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Ensure the correct book is selected

        if not visited(book):
            walk_to(book)

        locate_table_and_place_book(book)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_bookshelf_275(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_grab_book(book:item, table:item):
    body:
        if not inhand(book):
            walk_to(book)
            grab(book)
        if not on(book, table):
            walk_to(table)
            put_on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Bind to the home office
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Bind to the coffee table inside the home office

        bind book: item where:
            is_book(book)
        # Bind to the book

        find_and_grab_book(book, coffee_table)
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_grab_book(book:item, table:item):
    body:
        if not inhand(book):
            walk_to(book)
            grab(book)
        if not on(book, table):
            walk_to(table)
            put_on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Bind to the home office
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Bind to the coffee table inside the home office

        bind book: item where:
            is_book(book)
        # Bind to the book

        find_and_grab_book(book, coffee_table)
 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_275)exp(book_2136, bookshelf_275)walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)
##############################
From agent.py
walk_executor(bookshelf_275)
Robot find: pencil_2020, Robot is close to the bookshelf_275. 
##############################
From agent.py
exp(book_2136, bookshelf_275)
Fail to find book_2136 around bookshelf_275. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_196)open_executor(bookshelf_196)exp(book_2136, bookshelf_196)walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)
##############################
From agent.py
walk_executor(bookshelf_196)
Robot find: novel_2060, drawing_202, Robot is close to the bookshelf_196. 
##############################
From agent.py
open_executor(bookshelf_196)
Robot find: Robot is close to the photoframe_219. Robot is close to the bookshelf_196. bookshelf_196 is opened. 
##############################
From agent.py
exp(book_2136, bookshelf_196)
Fail to find book_2136 around bookshelf_196. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)exp(book_2136, bookshelf_124)walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)
##############################
From agent.py
walk_executor(bookshelf_124)
Robot find: book_2136, envelope_2055, book_2137, drawing_110, drawing_111, Robot is close to the bookshelf_124. 
##############################
From agent.py
open_executor(bookshelf_124)
Robot find: Robot is close to the bookshelf_124. bookshelf_124 is opened. 
##############################
From agent.py
exp(book_2136, bookshelf_124)
Find book_2136. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)
##############################
From agent.py
walk_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. 
##############################
From agent.py
grab_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. Grabbing book_2136 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(book_2136, table_270)
Robot find: Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. book_2136 is on table_270. table_270 is close book_2136. book_2136 is close table_270. book_2136 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior open_window(window: item):
    body:
        if not open(window) and can_open(window):
            opens(window)  # Open the window if its not already open and can be opened

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select a window in the home office

        open_window(window)
        # Open the window in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Check if the window is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(window, room))
    return in_home_office

behavior open_window(window: item):
    body:
        if not open(window):
            opens(window)  # Open the window if it is not already open

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window in the home office

        open_window(window)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_window_in_home_office(window: item):
    # Check if the window is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(window, room))
    return in_home_office

behavior open_window(window: item):
    body:
        if not open(window):
            opens(window)  # Open the window if it is not already open

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window in the home office

        open_window(window)

##############################
From agent.py-> find a plan in act()
walk_executor(window_310)open_executor(window_310)
##############################
From agent.py
walk_executor(window_310)
Robot find: Robot is close to the window_310. 
##############################
From agent.py
open_executor(window_310)
Robot find: Robot is close to the window_310. window_310 is opened. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find a book and put it on the coffe table in home office. Then open the window in the home office.
Action History:
['walk_executor(bookshelf_275)', 'walk_executor(bookshelf_196)', 'open_executor(bookshelf_196)', 'walk_executor(bookshelf_124)', 'open_executor(bookshelf_124)', 'walk_executor(book_2136)', 'grab_executor(book_2136)', 'walk_executor(table_270)', 'put_executor(book_2136, table_270)', 'walk_executor(window_310)', 'open_executor(window_310)']
Time info:
Time consume: 195 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 50
goal generate times: 4
goal correct times: 0
action_num: 11

Task complete rate:
1
Scene_id: 1
##############################
