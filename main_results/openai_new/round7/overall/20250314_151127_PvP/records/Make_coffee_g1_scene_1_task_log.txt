From agent.py
Reset goals: The sub-goals are: 
['1. Add coffee grounds and water to the coffee maker.', '2. Turn on the coffee maker to brew the coffee.', '3. Pour the brewed coffee into a cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2142_around_dishwasher_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_food_food_2001_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_detergent_2011_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_coffee_grounds_and_water_to_coffee_maker(coffee_grounds: item, coffee_maker: item, water_container: item):
    body:
        if not inhand(coffee_grounds):
            grab(coffee_grounds)
        if open(coffee_maker) and not inside(coffee_grounds, coffee_maker):
            put_inside(coffee_grounds, coffee_maker)
        
        if not has_water(water_container):
            get_water(water_container)
            
        if not inhand(water_container):
            grab(water_container)
        if open(coffee_maker) and not inside(water_container, coffee_maker):
            put_inside(water_container, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        
        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) # Assuming coffee_grounds is categorized under food
        # Select coffee grounds
        
        bind water_container: item where:
            is_faucet(water_container) or is_bowl(water_container)
        # Select a water source container which could be a faucet or bowl

        add_coffee_grounds_and_water_to_coffee_maker(coffee_grounds, coffee_maker, water_container)


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior add_coffee_grounds_and_water_to_coffee_maker(coffee_grounds: item, coffee_maker: item, water_container: item):
    body:
        if not inhand(coffee_grounds):
            grab(coffee_grounds)
        if open(coffee_maker) and not inside(coffee_grounds, coffee_maker):
            put_inside(coffee_grounds, coffee_maker)
        
        if not has_water(water_container):
            get_water(water_container)
            
        if not inhand(water_container):
            grab(water_container)
        if open(coffee_maker) and not inside(water_container, coffee_maker):
            put_inside(water_container, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        
        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) # Assuming coffee_grounds is categorized under food
        # Select coffee grounds
        
        bind water_container: item where:
            is_faucet(water_container) or is_bowl(water_container)
        # Select a water source container which could be a faucet or bowl

        add_coffee_grounds_and_water_to_coffee_maker(coffee_grounds, coffee_maker, water_container)


##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_food_2094, fridge_126)walk_executor(food_food_2094)grab_executor(food_food_2094)walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(bowl_2140, dishwasher_129)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_121)walk_executor(kitchen_counter_119)put_executor(food_food_2094, kitchen_counter_119)switchon_executor(faucet_121)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_food_2094, fridge_126)
Find food_food_2094. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_food_2094)walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(bowl_2140, dishwasher_129)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_121)walk_executor(kitchen_counter_119)put_executor(food_food_2094, kitchen_counter_119)switchon_executor(faucet_121)switchoff_executor(faucet_121)
##############################
From agent.py
grab_executor(food_food_2094)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_food_2094 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the food_food_2094. Robot is close to the dishwasher_129. 
##############################
From agent.py
open_executor(dishwasher_129)
Robot find: detergent_2011, measuring_cup_2012, Robot is close to the food_food_2094. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is opened. 
##############################
From agent.py
exp(bowl_2140, dishwasher_129)
Fail to find bowl_2140 around dishwasher_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(bowl_2140, cupboard_118)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the food_food_2094. Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the food_food_2094. Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(bowl_2140, cupboard_118)
Fail to find bowl_2140 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(bowl_2140, cupboard_117)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the food_food_2094. Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(bowl_2140, cupboard_117)
Fail to find bowl_2140 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(bowl_2140, kitchen_counter_122)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the food_food_2094. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_122)
Fail to find bowl_2140 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(bowl_2140, kitchen_counter_123)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the food_food_2094. Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_123)
Fail to find bowl_2140 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_food_2094. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the food_food_2094. Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. 
##############################
From agent.py
grab_executor(bowl_2140)
Robot find: Robot is close to the food_food_2094. Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. Grabbing bowl_2140 by left hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the food_food_2094. Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_food_2094. Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_food_2094. Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add coffee grounds and water to the coffee maker. The robot has grabbed the coffee grounds (food_food_2094) and filled a bowl (presumably bowl_2140) with water, but hasn't added them to the coffee maker yet.
##############################
From agent.py
Human Instruction: You need to add coffee grounds and water to the coffee maker. The robot has grabbed the coffee grounds (food_food_2094) and filled a bowl (presumably bowl_2140) with water, but hasn't added them to the coffee maker yet.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_food_2094 around fridge_126.
Action 5: Grab food_food_2094.
Action 6: Walk to dishwasher_129.
Action 7: Open dishwasher_129.
Action 8: look for bowl_2140 around dishwasher_129.
Action 9: Walk to cupboard_118.
Action 10: Open cupboard_118.
Action 11: look for bowl_2140 around cupboard_118.
Action 12: Walk to cupboard_117.
Action 13: look for bowl_2140 around cupboard_117.
Action 14: Walk to kitchen_counter_122.
Action 15: look for bowl_2140 around kitchen_counter_122.
Action 16: Walk to kitchen_counter_123.
Action 17: look for bowl_2140 around kitchen_counter_123.
Action 18: Walk to kitchen_counter_119.
Action 19: look for bowl_2140 around kitchen_counter_119.
Action 20: Walk to bowl_2140.
Action 21: Grab bowl_2140.
Action 22: Walk to faucet_20.
Action 23: Switch on faucet_20.
Action 24: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_food_orange_2027(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2027
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(food_food,food_orange_instance)
        else:
            exp(food_food,food_orange_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_orange_instance]=True
        close[food_orange_instance,food_food]=True
    

behavior find_coffee_filter_2065_around_coffe_maker_130(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==130
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_grounds_and_water_to_coffee_maker(coffee_grounds: item, water: item, coffee_maker: item):
    body:
        if not inhand(coffee_grounds):
            grab(coffee_grounds)
        if not inside(coffee_grounds, coffee_maker):
            put_inside(coffee_grounds, coffee_maker)

        if not inhand(water):
            grab(water)
        if not inside(water, coffee_maker):
            put_inside(water, coffee_maker)

behavior __goal__():
    body:
        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) and id[coffee_grounds] == 2094
        # Select the coffee grounds with ID 2094

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140
        # Select the bowl with ID 2140 (holding water)

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        add_grounds_and_water_to_coffee_maker(coffee_grounds, bowl, coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_grounds_and_water_to_coffee_maker(coffee_grounds: item, water: item, coffee_maker: item):
    body:
        if not inhand(coffee_grounds):
            grab(coffee_grounds)
        if not inside(coffee_grounds, coffee_maker):
            put_inside(coffee_grounds, coffee_maker)

        if not inhand(water):
            grab(water)
        if not inside(water, coffee_maker):
            put_inside(water, coffee_maker)

behavior __goal__():
    body:
        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) and id[coffee_grounds] == 2094
        # Select the coffee grounds with ID 2094

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140
        # Select the bowl with ID 2140 (holding water)

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        add_grounds_and_water_to_coffee_maker(coffee_grounds, bowl, coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)put_executor(bowl_2140, kitchen_counter_122)open_executor(coffe_maker_130)putin_executor(food_food_2094, coffe_maker_130)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(coffe_maker_130)putin_executor(bowl_2140, coffe_maker_130)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: Robot is close to the food_food_2094. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(bowl_2140, kitchen_counter_122)
Robot find: Robot is close to the food_food_2094. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_122. bowl_2140 is close kitchen_counter_122. kitchen_counter_122 is close bowl_2140. bowl_2140 is on kitchen_counter_122. bowl_2140 released by left hand. 
##############################
From agent.py
open_executor(coffe_maker_130)
Robot find: Robot is close to the food_food_2094. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_122. coffe_maker_130 is opened. 
##############################
From agent.py
putin_executor(food_food_2094, coffe_maker_130)
Robot find: coffee_filter_2065, Robot is close to the food_food_2094. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_122. Robot is close to the coffe_maker_130. food_food_2094 is inside coffe_maker_130. coffe_maker_130 is close food_food_2094. food_food_2094 is close coffe_maker_130. food_food_2094 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the bowl_2140. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
grab_executor(bowl_2140)
Robot find: Robot is close to the bowl_2140. Robot is close to the kitchen_counter_122. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the bowl_2140. Robot is close to the kitchen_counter_122. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the food_food_2094. 
##############################
From agent.py
putin_executor(bowl_2140, coffe_maker_130)
Robot find: Robot is close to the bowl_2140. Robot is close to the kitchen_counter_122. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the food_food_2094. bowl_2140 is close coffe_maker_130. coffe_maker_130 is close bowl_2140. bowl_2140 is inside coffe_maker_130. bowl_2140 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready_to_brew(coffee_maker: item):
    # Check if the coffee maker is ready to brew
    return has_a_free_hand(char) and has_switch(coffee_maker) and is_off(coffee_maker)

behavior turn_on_and_brew_coffee(coffee_maker: item):
    body:
        if is_coffee_maker_ready_to_brew(coffee_maker):
            switch_on(coffee_maker)
        if not is_on(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has been turned on and is brewing")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        turn_on_and_brew_coffee(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_coffee_maker_ready_to_brew(coffee_maker: item):
    # Check if the coffee maker is ready to brew
    return has_a_free_hand(char) and has_switch(coffee_maker) and is_off(coffee_maker)

behavior turn_on_and_brew_coffee(coffee_maker: item):
    body:
        if is_coffee_maker_ready_to_brew(coffee_maker):
            switch_on(coffee_maker)
        if not is_on(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has been turned on and is brewing")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        turn_on_and_brew_coffee(coffee_maker)

##############################
From agent.py-> find a plan in act()
close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
close_executor(coffe_maker_130)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the coffe_maker_130. coffe_maker_130 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the coffe_maker_130. coffe_maker_130 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2021_around_toaster_132(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_food,toaster_instance)
        else:
            exp(food_food,toaster_instance)
    eff:
        unknown[food_food]=False
        close[food_food,toaster_instance]=True
        close[toaster_instance,food_food]=True
    

behavior find_cup_2133_around_toaster_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(cup,toaster_instance)
        else:
            exp(cup,toaster_instance)
    eff:
        unknown[cup]=False
        close[cup,toaster_instance]=True
        close[toaster_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_coffee(coffee_maker:item):
    # Function to check if the coffee maker has brewed coffee
    symbol brewed=exists coffee: item : (is_cup(coffee) and inside(coffee, coffee_maker))
    return brewed

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        if not inside(cup, coffee_maker):
            put_inside(cup, coffee_maker)
            # Place the cup under the coffee maker
        if has_water(coffee_maker) and has_coffee(coffee_maker):
            put_on(coffee_maker, cup)
            # Pour the coffee into the cup

def is_coffee_maker_ready(coffee_maker: item):
    # Check if the coffee maker contains brewed coffee
    return has_coffee(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        if is_coffee_maker_ready(coffee_maker):
            pour_coffee_into_cup(coffee_maker, cup)
        else:
            observe(coffee_maker, "Ensure the coffee is brewed")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_coffee(coffee_maker:item):
    # Function to check if the coffee maker has brewed coffee
    symbol brewed=exists coffee: item : (is_cup(coffee) and inside(coffee, coffee_maker))
    return brewed

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        if not inside(cup, coffee_maker):
            put_inside(cup, coffee_maker)
            # Place the cup under the coffee maker
        if has_water(coffee_maker) and has_coffee(coffee_maker):
            put_on(coffee_maker, cup)
            # Pour the coffee into the cup

def is_coffee_maker_ready(coffee_maker: item):
    # Check if the coffee maker contains brewed coffee
    return has_coffee(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        if is_coffee_maker_ready(coffee_maker):
            pour_coffee_into_cup(coffee_maker, cup)
        else:
            observe(coffee_maker, "Ensure the coffee is brewed")

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_130)open_executor(coffe_maker_130)obs(coffe_maker_130, Ensure the coffee is brewed)
##############################
From agent.py
switchoff_executor(coffe_maker_130)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the coffe_maker_130. coffe_maker_130 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_130)
Robot find: Robot is close to the bowl_2140. Robot is close to the kitchen_counter_122. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the food_food_2094. coffe_maker_130 is opened. 
##############################
From agent.py
obs(coffe_maker_130, Ensure the coffee is brewed)
Get this information:  coffe_maker_130 is inside dining_room_41. food_food_2094 is inside coffe_maker_130. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to food_food_2094. coffe_maker_130 is close to character_240. coffe_maker_130 is close to bowl_2140. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. bowl_2140 is inside coffe_maker_130. coffe_maker_130 is OFF. coffe_maker_130 is PLUGGED_IN. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to pour the brewed coffee into a cup. Ensure that there's a cup available and positioned to receive the coffee.
##############################
From agent.py
Human Instruction: You need to pour the brewed coffee into a cup. Ensure that there's a cup available and positioned to receive the coffee.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_food_2094 around fridge_126.
Action 5: Grab food_food_2094.
Action 6: Walk to dishwasher_129.
Action 7: Open dishwasher_129.
Action 8: look for bowl_2140 around dishwasher_129.
Action 9: Walk to cupboard_118.
Action 10: Open cupboard_118.
Action 11: look for bowl_2140 around cupboard_118.
Action 12: Walk to cupboard_117.
Action 13: look for bowl_2140 around cupboard_117.
Action 14: Walk to kitchen_counter_122.
Action 15: look for bowl_2140 around kitchen_counter_122.
Action 16: Walk to kitchen_counter_123.
Action 17: look for bowl_2140 around kitchen_counter_123.
Action 18: Walk to kitchen_counter_119.
Action 19: look for bowl_2140 around kitchen_counter_119.
Action 20: Walk to bowl_2140.
Action 21: Grab bowl_2140.
Action 22: Walk to faucet_20.
Action 23: Switch on faucet_20.
Action 24: Switch off faucet_20.
Action 25: Walk to kitchen_counter_122.
Action 26: Put bowl_2140 on kitchen_counter_122.
Action 27: Open coffe_maker_130.
Action 28: Put food_food_2094 into coffe_maker_130.
Action 29: Walk to bowl_2140.
Action 30: Grab bowl_2140.
Action 31: Walk to coffe_maker_130.
Action 32: Put bowl_2140 into coffe_maker_130.
Action 33: Close coffe_maker_130.
Action 34: Switch on coffe_maker_130.
Action 35: Switch off coffe_maker_130.
Action 36: Open coffe_maker_130.
Action 37: Observe around coffe_maker_130 with the question of Ensure the coffee is brewed.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_toaster_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(cup,toaster_instance)
        else:
            exp(cup,toaster_instance)
    eff:
        unknown[cup]=False
        close[cup,toaster_instance]=True
        close[toaster_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_brewed(coffee_maker: item):
    # Function to check if coffee is brewed
    symbol brewed=exists coffee: item : (is_coffee_filter(coffee) and inside(coffee, coffee_maker))
    return brewed

behavior ensure_cup_positioned(cup:item, coffee_maker:item):
    body:
        if not close_char(char, cup):
            walk_to(cup)
        if not on(cup, coffee_maker):
            put_on(cup, coffee_maker)

behavior pour_coffee(inhand_obj:item, cup:item):
    body:
        if drinkable(inhand_obj) and pourable(inhand_obj):
            if not inside(inhand_obj, cup):
                put_inside(inhand_obj, cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Ensure the coffee maker is selected

        bind cup: item where:
            is_cup(cup)
        # Ensure a cup is selected

        if is_coffee_brewed(coffee_maker):
            ensure_cup_positioned(cup, coffee_maker)
            pour_coffee(cup, coffee_maker)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_coffee_brewed(coffee_maker: item):
    # Function to check if coffee is brewed
    symbol brewed=exists coffee: item : (is_coffee_filter(coffee) and inside(coffee, coffee_maker))
    return brewed

behavior ensure_cup_positioned(cup:item, coffee_maker:item):
    body:
        if not close_char(char, cup):
            walk_to(cup)
        if not on(cup, coffee_maker):
            put_on(cup, coffee_maker)

behavior pour_coffee(inhand_obj:item, cup:item):
    body:
        if drinkable(inhand_obj) and pourable(inhand_obj):
            if not inside(inhand_obj, cup):
                put_inside(inhand_obj, cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Ensure the coffee maker is selected

        bind cup: item where:
            is_cup(cup)
        # Ensure a cup is selected

        if is_coffee_brewed(coffee_maker):
            ensure_cup_positioned(cup, coffee_maker)
            pour_coffee(cup, coffee_maker)


##############################
From agent.py-> find a plan in act()
walk_executor(toaster_132)open_executor(toaster_132)exp(cup_2132, toaster_132)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(toaster_132)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the toaster_132. 
##############################
From agent.py
open_executor(toaster_132)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the toaster_132. toaster_132 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: Robot, please go to dining_room_41. Once inside, look for table_114. Cup_2132 will be on table_114.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to pour the brewed coffee into a cup. Ensure that there's a cup available and positioned to receive the coffee.
Robot, please go to dining_room_41. Once inside, look for table_114. Cup_2132 will be on table_114.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_food_2094 around fridge_126.
Action 5: Grab food_food_2094.
Action 6: Walk to dishwasher_129.
Action 7: Open dishwasher_129.
Action 8: look for bowl_2140 around dishwasher_129.
Action 9: Walk to cupboard_118.
Action 10: Open cupboard_118.
Action 11: look for bowl_2140 around cupboard_118.
Action 12: Walk to cupboard_117.
Action 13: look for bowl_2140 around cupboard_117.
Action 14: Walk to kitchen_counter_122.
Action 15: look for bowl_2140 around kitchen_counter_122.
Action 16: Walk to kitchen_counter_123.
Action 17: look for bowl_2140 around kitchen_counter_123.
Action 18: Walk to kitchen_counter_119.
Action 19: look for bowl_2140 around kitchen_counter_119.
Action 20: Walk to bowl_2140.
Action 21: Grab bowl_2140.
Action 22: Walk to faucet_20.
Action 23: Switch on faucet_20.
Action 24: Switch off faucet_20.
Action 25: Walk to kitchen_counter_122.
Action 26: Put bowl_2140 on kitchen_counter_122.
Action 27: Open coffe_maker_130.
Action 28: Put food_food_2094 into coffe_maker_130.
Action 29: Walk to bowl_2140.
Action 30: Grab bowl_2140.
Action 31: Walk to coffe_maker_130.
Action 32: Put bowl_2140 into coffe_maker_130.
Action 33: Close coffe_maker_130.
Action 34: Switch on coffe_maker_130.
Action 35: Switch off coffe_maker_130.
Action 36: Open coffe_maker_130.
Action 37: Observe around coffe_maker_130 with the question of Ensure the coffee is brewed.
Action 38: Walk to toaster_132.
Action 39: Open toaster_132.

##############################
From agent.py
exp(cup_2132, toaster_132)
Fail to find cup_2132 around toaster_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
grab_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the food_food_2094. Robot is close to the coffee_filter_2065. Robot is close to the kitchen_counter_122. Robot is close to the bowl_2140. 
##############################
From agent.py
put_executor(cup_2132, coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the food_food_2094. Robot is close to the coffee_filter_2065. Robot is close to the kitchen_counter_122. Robot is close to the bowl_2140. coffe_maker_130 is close cup_2132. cup_2132 is close coffe_maker_130. cup_2132 is on coffe_maker_130. cup_2132 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to pour the brewed coffee from the coffee maker into cup_2132.
##############################
From agent.py
Human Instruction: The robot needs to pour the brewed coffee from the coffee maker into cup_2132.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_food_2094 around fridge_126.
Action 5: Grab food_food_2094.
Action 6: Walk to dishwasher_129.
Action 7: Open dishwasher_129.
Action 8: look for bowl_2140 around dishwasher_129.
Action 9: Walk to cupboard_118.
Action 10: Open cupboard_118.
Action 11: look for bowl_2140 around cupboard_118.
Action 12: Walk to cupboard_117.
Action 13: look for bowl_2140 around cupboard_117.
Action 14: Walk to kitchen_counter_122.
Action 15: look for bowl_2140 around kitchen_counter_122.
Action 16: Walk to kitchen_counter_123.
Action 17: look for bowl_2140 around kitchen_counter_123.
Action 18: Walk to kitchen_counter_119.
Action 19: look for bowl_2140 around kitchen_counter_119.
Action 20: Walk to bowl_2140.
Action 21: Grab bowl_2140.
Action 22: Walk to faucet_20.
Action 23: Switch on faucet_20.
Action 24: Switch off faucet_20.
Action 25: Walk to kitchen_counter_122.
Action 26: Put bowl_2140 on kitchen_counter_122.
Action 27: Open coffe_maker_130.
Action 28: Put food_food_2094 into coffe_maker_130.
Action 29: Walk to bowl_2140.
Action 30: Grab bowl_2140.
Action 31: Walk to coffe_maker_130.
Action 32: Put bowl_2140 into coffe_maker_130.
Action 33: Close coffe_maker_130.
Action 34: Switch on coffe_maker_130.
Action 35: Switch off coffe_maker_130.
Action 36: Open coffe_maker_130.
Action 37: Observe around coffe_maker_130 with the question of Ensure the coffee is brewed.
Action 38: Walk to toaster_132.
Action 39: Open toaster_132.
Action 40: look for cup_2132 around toaster_132.
Action 41: Walk to table_114.
Action 42: look for cup_2132 around table_114.
Action 43: Walk to cup_2132.
Action 44: Grab cup_2132.
Action 45: Walk to coffe_maker_130.
Action 46: Put cup_2132 on coffe_maker_130.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_bathroom_cabinet_17(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(food_food,bathroom_cabinet_instance)
        else:
            exp(food_food,bathroom_cabinet_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def is_brewed(coffee_maker: item):
    # Function to check if the coffee is brewed in the coffee maker
    symbol coffee_brewed=exists o: item : (is_coffe_maker(coffee_maker) and is_coffee_brewed(o))
    return coffee_brewed

behavior pour_coffee_into_cup(coffee_maker: item, cup: item):
    body:
        if is_brewed(coffee_maker):
            if not inside(cup, coffee_maker):
                grab(cup)
                # Ensure the cup is in hand for pouring coffee
                if not close_char(char, coffee_maker):
                    walk_to(coffee_maker)
                if not inhand(cup):
                    grab(cup)
                # Get close to the coffee maker with the cup
                pourable(cup)
                # Ensure the cup can receive the brewed coffee
                put_on(cup, coffee_maker)
                # Pour brewed coffee into the cup
        else:
            observe(coffee_maker,"Ensure the coffee is brewed")
            # Observe the coffee maker to confirm the coffee is brewed

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==130
        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_bowl_2141(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

behavior find_food_butter_2007_around_bowl_2141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_butter,bowl_instance)
        else:
            exp(food_butter,bowl_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,bowl_instance]=True
        close[bowl_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_poured(cup: item):
    # Function to check if the coffee is poured into the specified cup
    symbol is_poured=exists coffee: item : (is_cup(cup) and drinkable(coffee) and inside(coffee, cup))
    return is_poured

behavior pour_coffee_into_cup(coffee_maker: item, cup: item):
    body:
        if not is_coffee_poured(cup):
            if not inside(cup, coffee_maker):
                grab(cup)
                walk_to(coffee_maker)
                put_on(cup, coffee_maker)
            observe(coffee_maker, "Pour the brewed coffee into the cup")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Select coffe_maker_130

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select cup_2132

        pour_coffee_into_cup(coffee_maker, cup)
        # Pour the brewed coffee into the selected cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_coffee_poured(cup: item):
    # Function to check if the coffee is poured into the specified cup
    symbol is_poured=exists coffee: item : (is_cup(cup) and drinkable(coffee) and inside(coffee, cup))
    return is_poured

behavior pour_coffee_into_cup(coffee_maker: item, cup: item):
    body:
        if not is_coffee_poured(cup):
            if not inside(cup, coffee_maker):
                grab(cup)
                walk_to(coffee_maker)
                put_on(cup, coffee_maker)
            observe(coffee_maker, "Pour the brewed coffee into the cup")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Select coffe_maker_130

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select cup_2132

        pour_coffee_into_cup(coffee_maker, cup)
        # Pour the brewed coffee into the selected cup

##############################
From agent.py-> find a plan in act()
grab_executor(cup_2132)walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)obs(coffe_maker_130, Pour the brewed coffee into the cup)
##############################
From agent.py
grab_executor(cup_2132)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the food_food_2094. Robot is close to the coffee_filter_2065. Robot is close to the kitchen_counter_122. Robot is close to the bowl_2140. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the food_food_2094. Robot is close to the coffee_filter_2065. Robot is close to the kitchen_counter_122. Robot is close to the bowl_2140. 
##############################
From agent.py
put_executor(cup_2132, coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the food_food_2094. Robot is close to the coffee_filter_2065. Robot is close to the kitchen_counter_122. Robot is close to the bowl_2140. cup_2132 is close coffe_maker_130. cup_2132 is on coffe_maker_130. cup_2132 released by right hand. 
##############################
From agent.py
obs(coffe_maker_130, Pour the brewed coffee into the cup)
Get this information:  coffe_maker_130 is inside dining_room_41. food_food_2094 is inside coffe_maker_130. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to food_food_2094. coffe_maker_130 is close to bowl_2140. coffe_maker_130 is close to character_240. coffe_maker_130 is close to cup_2132. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. cup_2132 is on coffe_maker_130. bowl_2140 is inside coffe_maker_130. coffe_maker_130 is OFF. coffe_maker_130 is PLUGGED_IN. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to actually pour the brewed coffee from the coffee maker into cup_2132. Currently, the cup is positioned on the coffee maker, but no action has been taken to pour the coffee into the cup.
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_food_2094)', 'walk_executor(dishwasher_129)', 'open_executor(dishwasher_129)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(cupboard_117)', 'walk_executor(kitchen_counter_122)', 'walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_119)', 'walk_executor(bowl_2140)', 'grab_executor(bowl_2140)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(kitchen_counter_122)', 'put_executor(bowl_2140, kitchen_counter_122)', 'open_executor(coffe_maker_130)', 'putin_executor(food_food_2094, coffe_maker_130)', 'walk_executor(bowl_2140)', 'grab_executor(bowl_2140)', 'walk_executor(coffe_maker_130)', 'putin_executor(bowl_2140, coffe_maker_130)', 'close_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)', 'switchoff_executor(coffe_maker_130)', 'open_executor(coffe_maker_130)', 'walk_executor(toaster_132)', 'open_executor(toaster_132)', 'walk_executor(table_114)', 'walk_executor(cup_2132)', 'grab_executor(cup_2132)', 'walk_executor(coffe_maker_130)', 'put_executor(cup_2132, coffe_maker_130)', 'grab_executor(cup_2132)', 'walk_executor(coffe_maker_130)', 'put_executor(cup_2132, coffe_maker_130)']
Time info:
Time consume: 234 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 86
goal generate times: 7
goal correct times: 0
action_num: 39

Task complete rate:
Keystate: k1 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
