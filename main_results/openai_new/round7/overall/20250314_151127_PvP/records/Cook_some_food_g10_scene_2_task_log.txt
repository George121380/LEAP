From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the chicken.', '2. Boil the noodles and chicken together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_kitchen_counter_129(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_clean(chicken:item):
    # Function to check if the chicken is clean
    return clean(chicken)

behavior find_and_wash_chicken(chicken:item):
    body:
        if dirty(chicken):
            wash(chicken)
            # Wash the chicken to make it clean

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        find_and_wash_chicken(chicken)
        # Find the chicken and wash it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_kitchen_counter_129(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_soap_2037_around_sink_307(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_clean(chicken: item):
    # Function to check if the chicken is clean
    return clean(chicken)

behavior find_and_wash_chicken(chicken: item):
    body:
        if not visited(chicken):
            observe(chicken, "Find and inspect the chicken")
        if dirty(chicken):
            wash(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        walk_to(chicken)
        # Move to the chicken

        if not is_chicken_clean(chicken):
            find_and_wash_chicken(chicken)
        # Wash the chicken if it is not clean

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_chicken_clean(chicken: item):
    # Function to check if the chicken is clean
    return clean(chicken)

behavior find_and_wash_chicken(chicken: item):
    body:
        if not visited(chicken):
            observe(chicken, "Find and inspect the chicken")
        if dirty(chicken):
            wash(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        walk_to(chicken)
        # Move to the chicken

        if not is_chicken_clean(chicken):
            find_and_wash_chicken(chicken)
        # Wash the chicken if it is not clean

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(food_chicken_2050, kitchen_counter_129)walk_executor(food_chicken_2050)obs(food_chicken_2050, Find and inspect the chicken)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(food_chicken_2050, kitchen_counter_129)
Fail to find food_chicken_2050 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)obs(food_chicken_2050, Find and inspect the chicken)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have found the chicken, but you still need to wash it to complete this sub-task.
##############################
From agent.py
Human Instruction: You have found the chicken, but you still need to wash it to complete this sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for food_chicken_2050 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_chicken_2050 around fridge_140.
Action 7: Walk to food_chicken_2050.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_console_2027_around_desk_261(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(console,desk_instance)
        else:
            exp(console,desk_instance)
    eff:
        unknown[console]=False
        close[console,desk_instance]=True
        close[desk_instance,console]=True
    

behavior find_crayon_2030_around_desk_375(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(crayon,desk_instance)
        else:
            exp(crayon,desk_instance)
    eff:
        unknown[crayon]=False
        close[crayon,desk_instance]=True
        close[desk_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_chicken(chicken: item):
    body:
        if dirty(chicken):
            wash(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select the chicken with ID 2050

        wash_chicken(chicken)
        # Wash the chicken if it is dirty

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_sink_307(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_chicken(chicken: item):
    body:
        if not clean(chicken):
            wash(chicken)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 129
        # Select kitchen_counter_129

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select food_chicken_2050

        walk_to(kitchen_counter)
        # Approach the kitchen counter

        walk_to(chicken)
        # Approach the chicken
        
        find_and_wash_chicken(chicken)
        # Wash the chicken if it is not clean

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_wash_chicken(chicken: item):
    body:
        if not clean(chicken):
            wash(chicken)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 129
        # Select kitchen_counter_129

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select food_chicken_2050

        walk_to(kitchen_counter)
        # Approach the kitchen counter

        walk_to(chicken)
        # Approach the chicken
        
        find_and_wash_chicken(chicken)
        # Wash the chicken if it is not clean

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)walk_executor(food_chicken_2050)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have found the chicken, but you still need to wash it to complete this sub-task.
##############################
From agent.py
Human Instruction: You have found the chicken, but you still need to wash it to complete this sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for food_chicken_2050 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_chicken_2050 around fridge_140.
Action 7: Walk to food_chicken_2050.
Action 8: Walk to kitchen_counter_129.
Action 9: Walk to food_chicken_2050.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

behavior find_cleaning_solution_2098_around_sink_307(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_clothes_pants_2113_around_basket_for_clothes_2040(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_pants,basket_for_clothes_instance)
        else:
            exp(clothes_pants,basket_for_clothes_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_chicken(chicken:item):
    body:
        if dirty(chicken):
            wash(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken from items

        if not close_char(char, chicken):
            walk_to(chicken)

        wash_chicken(chicken)
        # Wash the chicken if it is dirty

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_console_2027_around_desk_375(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(console,desk_instance)
        else:
            exp(console,desk_instance)
    eff:
        unknown[console]=False
        close[console,desk_instance]=True
        close[desk_instance,console]=True
    

behavior find_clothes_pants_2113_around_basket_for_clothes_2040(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_pants,basket_for_clothes_instance)
        else:
            exp(clothes_pants,basket_for_clothes_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_found(chicken: item):
    # Check if the chicken has been visited and found
    return visited(chicken)

behavior find_and_wash_chicken(chicken: item):
    body:
        if not inhand(chicken):
            grab(chicken)
        if dirty(chicken):
            wash(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        if not is_chicken_found(chicken):
            walk_to(chicken)

        find_and_wash_chicken(chicken)
        # Find and wash the chicken
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_chicken_found(chicken: item):
    # Check if the chicken has been visited and found
    return visited(chicken)

behavior find_and_wash_chicken(chicken: item):
    body:
        if not inhand(chicken):
            grab(chicken)
        if dirty(chicken):
            wash(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        if not is_chicken_found(chicken):
            walk_to(chicken)

        find_and_wash_chicken(chicken)
        # Find and wash the chicken
 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have found and grabbed the chicken, but you still need to wash it to complete this sub-task.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_oven_141(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(plate,oven_instance)
        else:
            exp(plate,oven_instance)
    eff:
        unknown[plate]=False
        close[plate,oven_instance]=True
        close[oven_instance,plate]=True
    

behavior find_cup_2087_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_bowl_2097_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_towel_2083_around_sink_307(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles_and_chicken(together:item, pot:item, stove:item):
    body:
        foreach item_in_pot: item:
            if is_food_noodles(item_in_pot) or is_food_chicken(item_in_pot):
                if not inside(item_in_pot, pot):
                    put_inside(item_in_pot, pot)

        if not has_water(pot):
            get_water(pot)

        if not on(pot, stove):
            put_on(pot, stove)

behavior ensure_stove_is_on(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        boil_noodles_and_chicken(noodles, pot, stove)
        boil_noodles_and_chicken(chicken, pot, stove)

        ensure_stove_is_on(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles_and_chicken(together_pot:item, stove:item, noodles:item, chicken:item):
    body:
        if not inside(noodles, together_pot):
            put_inside(noodles, together_pot)
        if not inside(chicken, together_pot):
            put_inside(chicken, together_pot)
        if not has_water(together_pot):
            get_water(together_pot)
        if not on(together_pot, stove):
            put_on(together_pot, stove)

behavior start_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)
            
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use for boiling
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove to use for boiling
        
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles from items
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken from items
        
        boil_noodles_and_chicken(pot, stove, noodles, chicken)
        start_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_crayon_2020_around_desk_375(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(crayon,desk_instance)
        else:
            exp(crayon,desk_instance)
    eff:
        unknown[crayon]=False
        close[crayon,desk_instance]=True
        close[desk_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
def is_stove_with_pot(pot: item, stove: item):
    # Function to check if the pot is on the stove
    return on(pot, stove)

behavior fill_pot_with_water_and_place_on_stove(pot: item, stove: item):
    body:
        if not has_water(pot):
            get_water(pot)
        if not on(pot, stove):
            put_on(pot, stove)

behavior boil_with_stove_on(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water_and_place_on_stove(pot, stove)

        boil_with_stove_on(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_stove_with_pot(pot: item, stove: item):
    # Function to check if the pot is on the stove
    return on(pot, stove)

behavior fill_pot_with_water_and_place_on_stove(pot: item, stove: item):
    body:
        if not has_water(pot):
            get_water(pot)
        if not on(pot, stove):
            put_on(pot, stove)

behavior boil_with_stove_on(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water_and_place_on_stove(pot, stove)

        boil_with_stove_on(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by left hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wash the chicken before boiling it with the noodles. Additionally, ensure the pot is filled with water before putting it on the stove to boil.
##############################
From agent.py
Human Instruction: You need to wash the chicken before boiling it with the noodles. Additionally, ensure the pot is filled with water before putting it on the stove to boil.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for food_chicken_2050 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_chicken_2050 around fridge_140.
Action 7: Walk to food_chicken_2050.
Action 8: Walk to kitchen_counter_129.
Action 9: Walk to food_chicken_2050.
Action 10: Walk to food_chicken_2050.
Action 11: Grab food_chicken_2050.
Action 12: Walk to pot_2093.
Action 13: Open pot_2093.
Action 14: Grab pot_2093.
Action 15: Walk to faucet_134.
Action 16: Switch off faucet_134.
Action 17: Walk to stove_2090.
Action 18: Put pot_2093 on stove_2090.
Action 19: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_bowl_2097_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_stove_on_with_water_and_chicken(noodles:item, chicken:item, pot:item):
    # Check if the pot with water, chicken, and noodles is on the stove and the stove is on
    return has_water(pot) and inside(chicken, pot) and inside(noodles, pot) and on(pot, stove) and is_on(stove)

behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill the pot with water if it doesnt have any

behavior place_items_in_pot_and_on_stove(noodles:item, chicken:item, pot:item, stove:item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot) # Place the chicken in the pot
        if not inside(noodles, pot):
            put_inside(noodles, pot) # Place the noodles in the pot
        if not on(pot, stove):
            put_on(pot, stove) # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        if not is_stove_on_with_water_and_chicken(noodles, chicken, pot):
            walk_to(pot)
            fill_pot_with_water(pot)
            place_items_in_pot_and_on_stove(noodles, chicken, pot, stove)

        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_bowl_2095_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_water_in_pot(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior boil_noodles_and_chicken(pot:item, stove:item, noodles:item, chicken:item):
    body:
        if not inside(noodles, pot):
            put_inside(noodles, pot)
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not on(pot, stove):
            put_on(pot, stove)
        ensure_water_in_pot(pot)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        boil_noodles_and_chicken(pot, stove, noodles, chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_bowl_2095_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_with_water_on_stove(pot: item, stove: item):
    # Check if a pot with water is on the stove
    return is_pot(pot) and has_water(pot) and on(pot, stove)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior start_stove(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior boil_noodles_and_chicken(together_item_1: item, together_item_2: item, pot: item):
    body:
        if not inside(together_item_1, pot):
            put_inside(together_item_1, pot)
        if not inside(together_item_2, pot):
            put_inside(together_item_2, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles item
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        boil_noodles_and_chicken(noodles, chicken, pot)
        start_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_console_2027_around_desk_375(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(console,desk_instance)
        else:
            exp(console,desk_instance)
    eff:
        unknown[console]=False
        close[console,desk_instance]=True
        close[desk_instance,console]=True
    

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_crayon_2030_around_kitchen_counter_128(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(crayon,kitchen_counter_instance)
        else:
            exp(crayon,kitchen_counter_instance)
    eff:
        unknown[crayon]=False
        close[crayon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Check if the pot has water
    return has_water(pot)

behavior boil_noodles_and_chicken(noodles: item, chicken: item, pot: item, stove: item):
    body:
        if not inhand(noodles):
            grab(noodles)
        if not inhand(chicken):
            grab(chicken)
        if not inside(noodles, pot):
            put_inside(noodles, pot)
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not on(pot, stove):
            put_on(pot, stove)

behavior start_boiling(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind chicken: item where:
            is_food_chicken(chicken) and clean(chicken)
        # Select the washed chicken

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        if not has_water_in_pot(pot):
            walk_to(faucet_134)
            get_water(pot)

        boil_noodles_and_chicken(noodles, chicken, pot, stove)
        start_boiling(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_ready_to_boil(pot: item, stove: item, chicken: item):
    # Check if pot is on the stove with chicken inside
    return on(pot, stove) and inside(chicken, pot)

behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior boil_noodles_and_chicken(noodles: item, chicken: item, pot: item, stove: item):
    body:
        if not inside(noodles, pot):
            put_inside(noodles, pot)
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        fill_pot_with_water(pot)
        if not on(pot, stove):
            put_on(pot, stove)

behavior heat_pot_with_content(pot: item, stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot_2093
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove_2090
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select food_chicken_2050
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        if not is_pot_ready_to_boil(pot, stove, chicken):
            boil_noodles_and_chicken(noodles, chicken, pot, stove)

        heat_pot_with_content(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation

def is_pot_with_noodles_and_chicken(pot: item):
    # Function to check if the pot contains both noodles and chicken
    symbol has_noodles_and_chicken = exists o1: item : (is_food_noodles(o1) and inside(o1, pot)) and exists o2: item : (is_food_chicken(o2) and inside(o2, pot))
    return has_noodles_and_chicken

def is_pot_on_stove(pot: item, stove: item):
    # Function to check if the pot is on the stove
    return on(pot, stove)

behavior prepare_pot_for_boiling(pot: item, noodles: item, chicken: item):
    body:
        if not inside(noodles, pot):
            put_inside(noodles, pot)
        if not inside(chicken, pot):
            put_inside(chicken, pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior boil_noodles_and_chicken(pot: item, stove: item):
    body:
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        if not is_pot_with_noodles_and_chicken(pot):
            prepare_pot_for_boiling(pot, noodles, chicken)

        boil_noodles_and_chicken(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. boil the noodles and chicken together." ?
Answer: The plan deviates because the chicken should be cut into pieces before boiling. Begin by putting the chicken on the cutting board and cutting it into pieces. Then find a pot and fill it with water. Put the pot on the stove and turn on the stove. Finally, put the chicken and noodles in the pot.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the chicken on the cutting board and cut it into pieces.', '2. Find a pot and fill it with water.', '3. Put the pot on the stove and turn on the stove.', '4. Put the chicken and noodles in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_chicken_for_boiling(chicken: item, cutting_board: item, pot: item, faucet: item, stove: item):
    body:
        if not inhand(chicken):
            grab(chicken)

        if not on(chicken, cutting_board):
            put_on(chicken, cutting_board)

        if not cut(chicken):
            cuts(chicken)

        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)

        if not on(pot, stove):
            walk_to(stove)
            put_on(pot, stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to be prepared

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board for cutting the chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling

        bind stove: item where:
            is_stove(stove)
        # Select the stove for cooking

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet for filling the pot with water
        
        prepare_chicken_for_boiling(chicken, cutting_board, pot, faucet, stove)
        # Prepare the chicken for boiling by cutting it into pieces

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior prepare_chicken_for_boiling(chicken: item, cutting_board: item, pot: item, faucet: item, stove: item):
    body:
        if not inhand(chicken):
            grab(chicken)

        if not on(chicken, cutting_board):
            put_on(chicken, cutting_board)

        if not cut(chicken):
            cuts(chicken)

        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)

        if not on(pot, stove):
            walk_to(stove)
            put_on(pot, stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to be prepared

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board for cutting the chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling

        bind stove: item where:
            is_stove(stove)
        # Select the stove for cooking

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet for filling the pot with water
        
        prepare_chicken_for_boiling(chicken, cutting_board, pot, faucet, stove)
        # Prepare the chicken for boiling by cutting it into pieces

##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)walk_executor(faucet_134)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_308)walk_executor(kitchen_counter_128)put_executor(knife_2036, kitchen_counter_128)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_chicken_2050. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_chicken_2050, cutting_board_2080)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_chicken_2050 is close cutting_board_2080. cutting_board_2080 is close food_chicken_2050. food_chicken_2050 is on cutting_board_2080. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot find: Robot is close to the knifeblock_52. 
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Fail to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(cupboard_130)exp(knife_2036, cupboard_130)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)walk_executor(faucet_134)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_308)walk_executor(kitchen_counter_128)put_executor(knife_2036, kitchen_counter_128)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_chicken_2050, cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_128. food_chicken_2050 is close cutting_board_2080. food_chicken_2050 is on cutting_board_2080. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(knife_2036, cupboard_130)
Fail to find knife_2036 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(home_office_161)exp(knife_2036, home_office_161)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)walk_executor(faucet_134)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_308)walk_executor(kitchen_counter_128)put_executor(knife_2036, kitchen_counter_128)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_chicken_2050, cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_128. food_chicken_2050 is close cutting_board_2080. food_chicken_2050 is on cutting_board_2080. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(knife_2036, home_office_161)
Fail to find knife_2036 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(home_office_161)exp(knife_2036, home_office_161)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)walk_executor(faucet_134)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_308)walk_executor(kitchen_counter_128)put_executor(knife_2036, kitchen_counter_128)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_chicken_2050, cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_128. food_chicken_2050 is close cutting_board_2080. food_chicken_2050 is on cutting_board_2080. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(home_office_161)

##############################
From agent.py
exp(knife_2036, home_office_161)
Fail to find knife_2036 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(cupboard_131)open_executor(cupboard_131)exp(knife_2036, cupboard_131)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)walk_executor(faucet_134)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_308)walk_executor(kitchen_counter_128)put_executor(knife_2036, kitchen_counter_128)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_chicken_2050, cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_128. food_chicken_2050 is close cutting_board_2080. food_chicken_2050 is on cutting_board_2080. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2036 ?
Answer: Locate knife_2036 by going to dining_room_1. Inside dining_room_1, find dishwasher_143. Knife_2036 is inside dishwasher_143.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to wash the chicken before boiling it with the noodles. Additionally, ensure the pot is filled with water before putting it on the stove to boil.
Locate knife_2036 by going to dining_room_1. Inside dining_room_1, find dishwasher_143. Knife_2036 is inside dishwasher_143.

Human Guidance: The plan deviates because the chicken should be cut into pieces before boiling. Begin by putting the chicken on the cutting board and cutting it into pieces. Then find a pot and fill it with water. Put the pot on the stove and turn on the stove. Finally, put the chicken and noodles in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for food_chicken_2050 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_chicken_2050 around fridge_140.
Action 7: Walk to food_chicken_2050.
Action 8: Walk to kitchen_counter_129.
Action 9: Walk to food_chicken_2050.
Action 10: Walk to food_chicken_2050.
Action 11: Grab food_chicken_2050.
Action 12: Walk to pot_2093.
Action 13: Open pot_2093.
Action 14: Grab pot_2093.
Action 15: Walk to faucet_134.
Action 16: Switch off faucet_134.
Action 17: Walk to stove_2090.
Action 18: Put pot_2093 on stove_2090.
Action 19: Switch on stove_2090.
Action 20: Walk to cutting_board_2080.
Action 21: Put food_chicken_2050 on cutting_board_2080.
Action 22: Walk to knifeblock_52.
Action 23: look for knife_2036 around knifeblock_52.
Action 24: Walk to food_chicken_2050.
Action 25: Grab food_chicken_2050.
Action 26: Walk to cutting_board_2080.
Action 27: Put food_chicken_2050 on cutting_board_2080.
Action 28: Walk to cupboard_130.
Action 29: look for knife_2036 around cupboard_130.
Action 30: Walk to food_chicken_2050.
Action 31: Grab food_chicken_2050.
Action 32: Walk to cutting_board_2080.
Action 33: Put food_chicken_2050 on cutting_board_2080.
Action 34: Walk to home_office_161.
Action 35: look for knife_2036 around home_office_161.
Action 36: Walk to food_chicken_2050.
Action 37: Grab food_chicken_2050.
Action 38: Walk to cutting_board_2080.
Action 39: Put food_chicken_2050 on cutting_board_2080.
Action 40: Walk to home_office_161.
Action 41: look for knife_2036 around home_office_161.
Action 42: Walk to food_chicken_2050.
Action 43: Grab food_chicken_2050.
Action 44: Walk to cutting_board_2080.
Action 45: Put food_chicken_2050 on cutting_board_2080.
Action 46: Walk to cupboard_131.
Action 47: Open cupboard_131.

##############################
From agent.py
exp(knife_2036, cupboard_131)
Fail to find knife_2036 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)walk_executor(faucet_134)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_308)walk_executor(kitchen_counter_128)put_executor(knife_2036, kitchen_counter_128)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_chicken_2050, cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_128. food_chicken_2050 is close cutting_board_2080. food_chicken_2050 is on cutting_board_2080. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)walk_executor(faucet_134)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_308)walk_executor(kitchen_counter_128)put_executor(knife_2036, kitchen_counter_128)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_chicken_2050, cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_128. food_chicken_2050 is close cutting_board_2080. food_chicken_2050 is on cutting_board_2080. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. 
##############################
From agent.py
grab_executor(knife_2036)
Robot find: Robot is close to the knife_2036. Robot is close to the dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. 
##############################
From agent.py
cut_executor(food_chicken_2050)
Robot find: Robot is close to the knife_2036. Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the knife_2036. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the pot_2093. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the knife_2036. Robot is close to the stove_2090. Robot is close to the pot_2093. Grabbing pot_2093 by left hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the knife_2036. Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: Robot is close to the knife_2036. Robot is close to the pot_2093. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(knife_2036, kitchen_counter_128)
Robot find: Robot is close to the knife_2036. Robot is close to the pot_2093. Robot is close to the kitchen_counter_128. knife_2036 is close kitchen_counter_128. kitchen_counter_128 is close knife_2036. knife_2036 is on kitchen_counter_128. knife_2036 released by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_console_2027_around_home_office_161(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(console,home_office_instance)
        else:
            exp(console,home_office_instance)
    eff:
        unknown[console]=False
        close[console,home_office_instance]=True
        close[home_office_instance,console]=True
    

behavior find_book_2092_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_crayon_2020_around_desk_261(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(crayon,desk_instance)
        else:
            exp(crayon,desk_instance)
    eff:
        unknown[crayon]=False
        close[crayon,desk_instance]=True
        close[desk_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior find_pot_and_fill(pot: item):
    body:
        if not inhand(pot):
            grab(pot)
        walk_to(pot)
        fill_pot_with_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        find_pot_and_fill(pot)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior find_pot_and_fill(pot: item):
    body:
        if not inhand(pot):
            grab(pot)
        walk_to(pot)
        fill_pot_with_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        find_pot_and_fill(pot)


##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)walk_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the pot_2093. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_console_2027_around_home_office_161(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(console,home_office_instance)
        else:
            exp(console,home_office_instance)
    eff:
        unknown[console]=False
        close[console,home_office_instance]=True
        close[home_office_instance,console]=True
    

behavior find_book_2091_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_crayon_2030_around_home_office_161(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(crayon,home_office_instance)
        else:
            exp(crayon,home_office_instance)
    eff:
        unknown[crayon]=False
        close[crayon,home_office_instance]=True
        close[home_office_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove_with_water(pot: item, stove: item):
    # Function to check if the pot with water is on the stove
    return on(pot, stove) and has_water(pot)

behavior put_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water

        if not is_pot_on_stove_with_water(pot, stove):
            put_pot_on_stove(pot, stove)
            # Put the pot on the stove

        if is_off(stove):
            switch_on(stove)
            # Turn on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pot_on_stove_with_water(pot: item, stove: item):
    # Function to check if the pot with water is on the stove
    return on(pot, stove) and has_water(pot)

behavior put_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water

        if not is_pot_on_stove_with_water(pot, stove):
            put_pot_on_stove(pot, stove)
            # Put the pot on the stove

        if is_off(stove):
            switch_on(stove)
            # Turn on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_microwave_149(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
def is_ready_to_add_to_pot(chicken: item, noodles: item, pot: item):
    # Check if the chicken is cut and both chicken and noodles are ready to be added to the pot
    return cut(chicken) and not on(chicken, pot) and not on(noodles, pot)

behavior prepare_chicken_and_noodles(chicken: item, noodles: item, pot: item):
    body:
        if not cut(chicken):
            cuts(chicken)
        walk_to(pot)
        if not inhand(chicken):
            grab(chicken)
        if not on(chicken, pot):
            put_on(chicken, pot)
        if not inhand(noodles):
            grab(noodles)
        if not on(noodles, pot):
            put_on(noodles, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind noodles: item where:
            is_food_noodles(noodles)
        bind pot: item where:
            is_pot(pot)

        if not is_ready_to_add_to_pot(chicken, noodles, pot):
            prepare_chicken_and_noodles(chicken, noodles, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_microwave_149(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

behavior find_juice_2034_around_microwave_149(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(juice,microwave_instance)
        else:
            exp(juice,microwave_instance)
    eff:
        unknown[juice]=False
        close[juice,microwave_instance]=True
        close[microwave_instance,juice]=True
    

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_and_place_in_pot(pot: item, chicken: item, noodles: item):
    body:
        if not inhand(chicken):
            grab(chicken)
        if dirty(chicken):
            wash(chicken)
        if not clean(chicken):
            rinse(chicken)

        if not inside(chicken, pot):
            put_inside(chicken, pot)
        
        if not inhand(noodles):
            grab(noodles)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2090)
        # Select the pot already on the stove

        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the already cut chicken

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        clean_and_place_in_pot(pot, chicken, noodles)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_microwave_149(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_chopped_and_clean(chicken: item):
    # Function to check if the chicken is chopped and clean
    return cut(chicken) and clean(chicken)

def is_pot_ready_with_water(pot: item):
    # Function to check if the pot is on the stove and has water
    return on(pot, stove) and has_water(pot)

behavior grab_and_clean_item(item: item):
    body:
        if not inhand(item):
            grab(item)
        if dirty(item):
            wash(item)

behavior place_ingredients_in_pot(chicken: item, noodles: item, pot: item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        if not is_chicken_chopped_and_clean(chicken):
            if not cut(chicken):
                cuts(chicken)
            grab_and_clean_item(chicken)

        if not is_pot_ready_with_water(pot):
            if not on(pot, stove):
                put_on(pot, stove)
            if not has_water(pot):
                get_water(pot)

        place_ingredients_in_pot(chicken, noodles, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_microwave_149(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

behavior find_bowl_2095_around_microwave_149(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(bowl,microwave_instance)
        else:
            exp(bowl,microwave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,microwave_instance]=True
        close[microwave_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_put_chicken_and_noodles_in_pot(chicken:item, noodles:item, pot:item):
    body:
        if not clean(chicken):
            wash(chicken)
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        wash_and_put_chicken_and_noodles_in_pot(chicken, noodles, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_in_pot(chicken: item, noodles: item, pot: item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken from items

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles from items

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        place_items_in_pot(chicken, noodles, pot)
        # Place chicken and noodles into the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_microwave_149(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_bowl_2097_around_table_193(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_food_in_pot(chicken: item, noodles: item, pot: item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        put_food_in_pot(chicken, noodles, pot)
        # Put the chicken and noodles inside the pot

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "4. put the chicken and noodles in the pot." ?
Answer: Put the chicken and noodles in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_console_2027_around_home_office_161(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(console,home_office_instance)
        else:
            exp(console,home_office_instance)
    eff:
        unknown[console]=False
        close[console,home_office_instance]=True
        close[home_office_instance,console]=True
    

behavior find_oil_2005_around_microwave_149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_wash_chicken(chicken: item):
    body:
        # Check if the chicken has been washed
        if dirty(chicken):
            if not inhand(chicken):
                grab(chicken)
            wash(chicken)

behavior grab_and_put_in_pot(chicken: item, noodles: item, pot: item):
    body:
        if not inhand(chicken):
            grab(chicken)
        if not inside(chicken, pot):
            put_inside(chicken, pot)

        if not inhand(noodles):
            grab(noodles)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles

        bind pot: item where:
            is_pot(pot)
        # Select pot

        grab_and_wash_chicken(chicken)
        grab_and_put_in_pot(chicken, noodles, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_soap_2038_around_sink_307(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_noodles_and_chicken(noodles:item, chicken:item):
    body:
        if is_food_noodles(noodles) and not clean(noodles):
            rinse(noodles)
        if is_food_chicken(chicken) and dirty(chicken):
            wash(chicken)

behavior put_items_in_pot(noodles:item, chicken:item, pot:item):
    body:
        if not inside(noodles, pot):
            if not inhand(noodles):
                grab(noodles)
            put_inside(noodles, pot)
        if not inside(chicken, pot):
            if not inhand(chicken):
                grab(chicken)
            put_inside(chicken, pot)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles

        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the chicken that has been cut

        bind pot: item where:
            is_pot(pot) and has_water(pot) and on(pot, stove_2090)
        # Select the pot that has water and is on the stove

        wash_noodles_and_chicken(noodles, chicken)
        # Wash noodles and chicken if needed

        put_items_in_pot(noodles, chicken, pot)
        # Put the washed noodles and chicken into the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_oven_141(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def in_pot(chicken: item, noodles: item, pot: item):
    # Function to check if both chicken and noodles are inside the pot
    return inside(chicken, pot) and inside(noodles, pot)

behavior put_chicken_and_noodles_in_pot(chicken: item, noodles: item, pot: item):
    body:
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the cut chicken

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        if not in_pot(chicken, noodles, pot):
            put_chicken_and_noodles_in_pot(chicken, noodles, pot)
        # Put the chicken and noodles in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_oven_141(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_onion,oven_instance)
        else:
            exp(food_onion,oven_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,oven_instance]=True
        close[oven_instance,food_onion]=True
    

behavior find_food_butter_2018_around_microwave_149(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_butter,microwave_instance)
        else:
            exp(food_butter,microwave_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,microwave_instance]=True
        close[microwave_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_chicken_and_noodles_in_pot(chicken:item, noodles:item, pot:item):
    body:
        if not inhand(chicken):
            grab(chicken)
        if not inside(chicken, pot):
            put_inside(chicken, pot)

        if not inhand(noodles):
            grab(noodles)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the cut chicken

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        walk_to(chicken)
        walk_to(noodles)
        walk_to(pot)
        put_chicken_and_noodles_in_pot(chicken, noodles, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_oil_2005_around_microwave_149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

behavior find_soap_2038_around_sink_307(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_put_chicken_noodles_in_pot(chicken:item, noodles:item, pot:item):
    body:
        if is_food_chicken(chicken) and not (dirty(chicken) and clean(chicken)):
            walk_to(chicken)
            wash(chicken) # Wash the chicken if it is dirty
        
        if not inhand(chicken):
            grab(chicken)
        
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        
        if not inhand(noodles):
            grab(noodles)
        
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        wash_and_put_chicken_noodles_in_pot(chicken, noodles, pot)
        # Wash the chicken if dirty and put both the chicken and noodles in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_microwave_149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_items_in_pot(chicken: item, noodles: item, pot: item):
    body:
        if not inhand(chicken):
            grab(chicken)
        if not inside(chicken, pot):
            put_inside(chicken, pot)
            
        if not inhand(noodles):
            grab(noodles)
        if not inside(noodles, pot):
            put_inside(noodles, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the cut chicken

        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        put_items_in_pot(chicken, noodles, pot)
        # Put the chicken and noodles in the pot
 
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)open_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the food_chicken_2050. 
##############################
Error record: write() argument must be str, not None
##############################
