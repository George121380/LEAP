From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the coffee table in the home office.', '2. Prepare a cup of hot milk and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_2119_around_couch_192(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(table: item):
    # Function to verify if the specified table is a coffee table inside the home office
    symbol is_coffee_table=exists room: item : (is_home_office(room) and inside(table, room))
    return is_coffee_table

behavior find_and_place_book_on_table(book:item, table:item):
    body:
        if not inhand(book):
            grab(book)
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book from items
        
        bind home_office: item where:
            is_home_office(home_office)
        # Locate the home office

        bind table: item where:
            is_table(table) and is_coffee_table_in_home_office(table)
        # Select a coffee table inside the home office

        walk_to(book)
        # Approach the book
        
        find_and_place_book_on_table(book, table)
        # Place the book on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_coffee_table_in_home_office(table: item):
    # Function to verify if the specified table is a coffee table inside the home office
    symbol is_coffee_table=exists room: item : (is_home_office(room) and inside(table, room))
    return is_coffee_table

behavior find_and_place_book_on_table(book:item, table:item):
    body:
        if not inhand(book):
            grab(book)
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book from items
        
        bind home_office: item where:
            is_home_office(home_office)
        # Locate the home office

        bind table: item where:
            is_table(table) and is_coffee_table_in_home_office(table)
        # Select a coffee table inside the home office

        walk_to(book)
        # Approach the book
        
        find_and_place_book_on_table(book, table)
        # Place the book on the coffee table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(book_2091, bookshelf_189)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. 
##############################
From agent.py
open_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. bookshelf_189 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_189)
Fail to find book_2091 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(book_2091, bookshelf_188)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_188)
Robot find: drawing_196, Robot is close to the bookshelf_188. 
##############################
From agent.py
open_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. bookshelf_188 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_188)
Fail to find book_2091 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_260)open_executor(bookshelf_260)exp(book_2091, bookshelf_260)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_260)
Robot find: drawing_238, chair_263, mat_237, Robot is close to the bookshelf_260. 
##############################
From agent.py
open_executor(bookshelf_260)
Robot find: Robot is close to the bookshelf_260. Robot is close to the photoframe_246. bookshelf_260 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_260)
Fail to find book_2091 around bookshelf_260. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(book_2091, bookshelf_137)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_137)
Robot find: cup_2089, book_2092, drawing_118, Robot is close to the bookshelf_137. 
##############################
From agent.py
open_executor(bookshelf_137)
Robot find: Robot is close to the bookshelf_137. Robot is close to the photoframe_102. bookshelf_137 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_137)
Fail to find book_2091 around bookshelf_137. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2092)grab_executor(book_2092)walk_executor(table_193)put_executor(book_2092, table_193)
##############################
From agent.py
walk_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. 
##############################
From agent.py
grab_executor(book_2092)
Robot find: Robot is close to the bookshelf_137. Robot is close to the book_2092. Grabbing book_2092 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, Robot is close to the book_2092. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2092, table_193)
Robot find: Robot is close to the book_2092. Robot is close to the table_193. table_193 is close book_2092. book_2092 is close table_193. book_2092 is on table_193. book_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to find book_2091 and put it on the coffee table in the home office. Currently, you placed book_2092 on table_193, but book_2091 has not been found or placed on the correct coffee table.
##############################
From agent.py
Human Instruction: You need to find book_2091 and put it on the coffee table in the home office. Currently, you placed book_2092 on table_193, but book_2091 has not been found or placed on the correct coffee table.

The actions you have taken:
Action 1: Walk to bookshelf_189.
Action 2: Open bookshelf_189.
Action 3: look for book_2091 around bookshelf_189.
Action 4: Walk to bookshelf_188.
Action 5: Open bookshelf_188.
Action 6: look for book_2091 around bookshelf_188.
Action 7: Walk to bookshelf_260.
Action 8: Open bookshelf_260.
Action 9: look for book_2091 around bookshelf_260.
Action 10: Walk to bookshelf_137.
Action 11: Open bookshelf_137.
Action 12: look for book_2091 around bookshelf_137.
Action 13: Walk to book_2092.
Action 14: Grab book_2092.
Action 15: Walk to table_193.
Action 16: Put book_2092 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_correct_coffee_table(table: item):
    # Check if the table is the correct coffee table in the home office
    return id[table] == 193

behavior locate_and_place_book(book: item, table: item):
    body:
        if not inhand(book):
            grab(book)
        # Place the book correctly on the table in the home office
        if not on(book, table):
            put_on(book, table)

behavior locate_table_and_place_book(book: item):
    body:
        # Evaluate if this is the correct coffee table
        bind table: item where:
            is_table(table) and is_correct_coffee_table(table)

        if not visited(table):
            observe(table, "Verify if this table is the correct coffee table")

        if is_correct_coffee_table(table):
            walk_to(table)
            locate_and_place_book(book, table)
        else:
            foreach table: item:
                if not on(book, table):
                    walk_to(table)
                    locate_and_place_book(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Ensure the required book is selected

        if not visited(book):
            walk_to(book)

        locate_table_and_place_book(book)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_correct_coffee_table(table: item):
    # Check if the table is the correct coffee table in the home office
    return id[table] == 193

behavior locate_and_place_book(book: item, table: item):
    body:
        if not inhand(book):
            grab(book)
        # Place the book correctly on the table in the home office
        if not on(book, table):
            put_on(book, table)

behavior locate_table_and_place_book(book: item):
    body:
        # Evaluate if this is the correct coffee table
        bind table: item where:
            is_table(table) and is_correct_coffee_table(table)

        if not visited(table):
            observe(table, "Verify if this table is the correct coffee table")

        if is_correct_coffee_table(table):
            walk_to(table)
            locate_and_place_book(book, table)
        else:
            foreach table: item:
                if not on(book, table):
                    walk_to(table)
                    locate_and_place_book(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Ensure the required book is selected

        if not visited(book):
            walk_to(book)

        locate_table_and_place_book(book)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_372)open_executor(bookshelf_372)exp(book_2091, bookshelf_372)walk_executor(book_2091)walk_executor(table_193)obs(table_193, Verify if this table is the correct coffee table)walk_executor(table_193)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_372)
Robot find: stamp_2031, drawing_389, Robot is close to the bookshelf_372. 
##############################
From agent.py
open_executor(bookshelf_372)
Robot find: Robot is close to the bookshelf_372. bookshelf_372 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_372)
Fail to find book_2091 around bookshelf_372. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(book_2091, table_127)walk_executor(book_2091)walk_executor(table_193)obs(table_193, Verify if this table is the correct coffee table)walk_executor(table_193)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find book_2091 ?
Answer: Locate book_2091 by going to dining_room_1. Inside this room, find bookshelf_136. book_2091 is on this bookshelf. Look closely for it among the other books. It should be near the other books on bookshelf_136.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to find book_2091 and put it on the coffee table in the home office. Currently, you placed book_2092 on table_193, but book_2091 has not been found or placed on the correct coffee table.
Locate book_2091 by going to dining_room_1. Inside this room, find bookshelf_136. book_2091 is on this bookshelf. Look closely for it among the other books. It should be near the other books on bookshelf_136.

The actions you have taken:
Action 1: Walk to bookshelf_189.
Action 2: Open bookshelf_189.
Action 3: look for book_2091 around bookshelf_189.
Action 4: Walk to bookshelf_188.
Action 5: Open bookshelf_188.
Action 6: look for book_2091 around bookshelf_188.
Action 7: Walk to bookshelf_260.
Action 8: Open bookshelf_260.
Action 9: look for book_2091 around bookshelf_260.
Action 10: Walk to bookshelf_137.
Action 11: Open bookshelf_137.
Action 12: look for book_2091 around bookshelf_137.
Action 13: Walk to book_2092.
Action 14: Grab book_2092.
Action 15: Walk to table_193.
Action 16: Put book_2092 on table_193.
Action 17: Walk to bookshelf_372.
Action 18: Open bookshelf_372.
Action 19: look for book_2091 around bookshelf_372.
Action 20: Walk to table_127.

##############################
From agent.py
exp(book_2091, table_127)
Fail to find book_2091 around table_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)walk_executor(table_193)obs(table_193, Verify if this table is the correct coffee table)walk_executor(table_193)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)walk_executor(table_193)obs(table_193, Verify if this table is the correct coffee table)walk_executor(table_193)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the table_193. 
##############################
From agent.py
obs(table_193, Verify if this table is the correct coffee table)
Get this information:  computer_2110 is on table_193. table_193 is close to mouse_2112. table_193 is close to couch_192. table_193 is close to pillow_195. table_193 is close to floor_164. table_193 is close to floor_165. table_193 is close to chair_2119. table_193 is close to curtain_199. table_193 is close to orchid_200. table_193 is close to floor_168. table_193 is close to wall_170. table_193 is close to floor_167. table_193 is close to mat_201. table_193 is close to laser_pointer_2025. table_193 is close to wall_174. table_193 is close to dvd_player_2000. table_193 is close to oil_2005. table_193 is close to computer_2110. table_193 is close to keyboard_2111. table_193 is close to book_2092. table_193 is close to character_219. table_193 is facing drawing_196. keyboard_2111 is on table_193. book_2092 is on table_193. oil_2005 is on table_193. orchid_200 is on table_193. table_193 is inside home_office_161. dvd_player_2000 is on table_193. mouse_2112 is on table_193. laser_pointer_2025 is on table_193. table_193 is CLEAN.
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the table_193. 
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_cup_2089(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2089
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_coffee():
    # Check if a specific table is the coffee table in the home office
    symbol is_coffee_table=exists table: item : (is_table(table) and id[table] == 193)
    return is_coffee_table

behavior locate_coffee_table():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Verify if this table is the coffee table in the home office")

behavior prepare_hot_milk_and_place(milk:item, table:item):
    body:
        if not is_on(milk):
            switch_on(milk) # Start heating the milk if its not already heated

        if open(milk):
            closes(milk) # Close the milks container if open, assuming it needs to be closed for heating

        if not clean(milk):
            wipe(milk) # Clean the milk container if necessary

        if not inhand(milk):
            grab(milk) # Grab the milk if not already in hand

        walk_to(table)

        if not on(milk, table):
            put_on(milk, table) # Place the hot milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        if not is_table_coffee():
            locate_coffee_table()

        bind table: item where:
            is_table(table) and id[table] == 193
        # Ensure the character approaches the coffee table

        prepare_hot_milk_and_place(milk, table)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2087_around_cupboard_130(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_pot_54_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2073_around_cupboard_130(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_home_office(table: item):
    # Checks if the table is inside the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office
    
behavior prepare_hot_milk(milk:item, cup:item, stove:item):
    body:
        bind pot: item where:
            is_pot(pot)
        if not inside(milk, pot):
            get_water(pot)
            # Use water as a synonym for getting milk

        if not has_water(pot):
            get_water(pot)
            # Ensure the pot has milk

        if not on(pot, stove):
            put_on(pot, stove)
            # Put pot on stove

        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to heat pot
        
        # Simulating the boiling process
        
        if is_on(stove):
            switch_off(stove)
            # Turn off stove after boiling the milk

        if not inhand(cup):
            grab(cup)
            # Grab the cup to pour the hot milk

        if inhand(cup) and has_water(pot):
            grab(pot)
            put_inside(cup, pot)
            # Pour the hot milk into the cup

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_table(coffee_table) and is_table_in_home_office(coffee_table)
            and id[coffee_table] == 193
        # Select table_193 which is the coffee table in the home office
        
        bind hot_milk: item where:
            is_milk(hot_milk)
        # Select hot milk item

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind stove: item where:
            is_stove(stove)
        # Select a stove to heat the milk
        
        prepare_hot_milk(hot_milk, cup, stove)
        
        walk_to(coffee_table)
        if inhand(cup):
            put_on(cup, coffee_table)
        # Place the cup of hot milk on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cupboard_130(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_dry_pasta_2073_around_cupboard_130(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def is_hot_milk_ready(cup:item):
    # Determine if the cup contains hot milk
    return has_water(cup) and on(cup, table) and id[cup] == 364

behavior make_hot_milk(milk: item, stove: item, cup: item):
    body:
        if not has_water(cup):
            get_water(cup)
        walk_to(stove)
        put_on(milk, stove)
        if is_off(stove):
            switch_on(stove)
        # Assumed action to heat milk would be successful
        if not is_on(stove):
            switch_off(stove)
        # Milk gets transferred into the cup after heating
        if not inside(milk, cup):
            put_inside(milk, cup)

behavior put_hot_milk_on_table(cup: item, table: item):
    body:
        if not on(cup, table):
            put_on(cup, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table]==193
        # Bind table with ID 193

        bind milk: item where:
            is_milk(milk)
        # Bind the milk item

        bind stove: item where:
            is_stove(stove)
        # Bind a stove

        bind cup: item where:
            is_cup(cup) and grabbable(cup)
        # Bind a cup

        if not is_hot_milk_ready(cup):
            make_hot_milk(milk, stove, cup)

        walk_to(table)
        put_hot_milk_on_table(cup, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2073_around_cupboard_130(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_pot_54_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_cup_2088_around_cupboard_130(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_coffee_table(table: item):
    # Check if the specified table is the coffee table in the home office
    return is_table_in_home_office(table) and id[table] == 193

def is_table_in_home_office(table: item):
    # Check if the specified table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior prepare_hot_milk(milk:item, stove:item, pot:item):
    body:
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water if it doesnt have any

        if not inside(milk, pot):
            put_inside(milk, pot)
            # Pour milk into the pot

        if not on(pot, stove):
            put_on(pot, stove)
            # Place pot on the stove

        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to heat milk inside the pot

behavior place_cup_on_table(cup:item, table:item):
    body:
        if not inhand(cup):
            walk_to(cup)
            grab(cup)
            # Grab the cup to place it on a table

        if not on(cup, table):
            put_on(cup, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        prepare_hot_milk(milk, stove, pot)

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind table: item where:
            is_table(table) and is_home_office_coffee_table(table)
        # Select the coffee table in the home office

        place_cup_on_table(cup, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_cup_2089(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2089
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_dry_pasta_2073_around_cupboard_130(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def is_cup_in_home_office(cup: item):
    # Check if the cup is in the home office
    symbol cup_in_home_office = exists room: item : (is_home_office(room) and inside(cup, room))
    return cup_in_home_office

behavior prepare_hot_milk(milk: item, cup: item):
    body:
        if not has_water(cup):
            get_water(cup)
            # Fill the cup with water

behavior heat_milk(cup: item, stove: item):
    body:
        if is_off(stove):
            switch_on(stove)
        if not on(cup, stove):
            put_on(cup, stove)
            # Place the cup on the stove for heating

behavior place_item_on_table(item: item, table: item):
    body:
        if not on(item, table):
            put_on(item, table)
            # Place item on the table

behavior ensure_stove_is_off(stove: item):
    body:
        if is_on(stove):
            switch_off(stove)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind table: item where:
            is_table(table) and is_cup_in_home_office(cup) 
        # Select a table in the home office

        prepare_hot_milk(milk, cup)
        heat_milk(cup, stove)
        ensure_stove_is_off(stove)
        place_item_on_table(milk, table)
        place_item_on_table(cup, table)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2073_around_cupboard_130(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_cup_2088_around_cupboard_130(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table(table: item):
    # Determine if the table is the correct coffee table 
    return id[table] == 193

def is_home_office_table(table: item):
    # Check if the table is inside the home office and is the coffee table
    return is_table_in_home_office(table) and is_coffee_table(table)

def is_table_in_home_office(table: item):
    # Check if the specified table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior prepare_hot_milk(cup:item, stove:item):
    body:
        if not is_on(stove):
            switch_on(stove)
        if not has_water(cup):
            get_water(cup)
        if open(stove):
            close(stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select the correct coffee table in the home office

        bind cup: item where:
            is_cup(cup)
        # Bind a cup object

        bind stove: item where:
            is_stove(stove)
        # Bind a stove object

        prepare_hot_milk(cup, stove)
        # Prepare the cup of hot milk

        walk_to(table)
        # Walk to the coffee table

        if inhand(cup):
            put_on(cup, table)
        # Place the cup on the coffee table

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. prepare a cup of hot milk and put it on the coffee table in the home office." ?
Answer: Find the milk in the fridge, put it in a cup, put the cup in the microwave. Turn on the microwave. Finally, put the cup on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cupboard_130(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

def is_coffee_table_in_home_office(table: item):
    # Function to check if a table is the coffee table in the home office
    return is_table(table) and id[table] == 193

behavior prepare_milk_and_put_on_table(milk:item, cup:item, microwave:item, table:item):
    body:
        walk_to(milk)
        grab(milk)
        bind fridge: item where:
            is_fridge(fridge)
        observe(fridge, "Find the milk in the fridge")

        walk_to(cup)
        grab(cup)
        put_inside(milk, cup)

        walk_to(microwave)
        put_inside(cup, microwave)

        if open(microwave):
            closes(microwave)

        if is_off(microwave):
            switch_on(microwave)

        switch_off(microwave)
        opens(microwave)

        if inside(cup, microwave):
            grab(cup)

        walk_to(table)
        put_on(cup, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and is_coffee_table_in_home_office(table)
        # Select the coffee table in the home office

        prepare_milk_and_put_on_table(milk, cup, microwave, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_coffee_table_in_home_office(table: item):
    # Function to check if a table is the coffee table in the home office
    return is_table(table) and id[table] == 193

behavior prepare_milk_and_put_on_table(milk:item, cup:item, microwave:item, table:item):
    body:
        walk_to(milk)
        grab(milk)
        bind fridge: item where:
            is_fridge(fridge)
        observe(fridge, "Find the milk in the fridge")

        walk_to(cup)
        grab(cup)
        put_inside(milk, cup)

        walk_to(microwave)
        put_inside(cup, microwave)

        if open(microwave):
            closes(microwave)

        if is_off(microwave):
            switch_on(microwave)

        switch_off(microwave)
        opens(microwave)

        if inside(cup, microwave):
            grab(cup)

        walk_to(table)
        put_on(cup, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and is_coffee_table_in_home_office(table)
        # Select the coffee table in the home office

        prepare_milk_and_put_on_table(milk, cup, microwave, table)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(fridge_140)obs(fridge_140, Find the milk in the fridge)walk_executor(cup_2089)grab_executor(cup_2089)putin_executor(milk_2074, cup_2089)walk_executor(microwave_149)open_executor(microwave_149)putin_executor(cup_2089, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(cup_2089)grab_executor(cup_2089)walk_executor(table_193)put_executor(cup_2089, table_193)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(fridge_140)obs(fridge_140, Find the milk in the fridge)walk_executor(cup_2089)grab_executor(cup_2089)putin_executor(milk_2074, cup_2089)walk_executor(microwave_149)open_executor(microwave_149)putin_executor(cup_2089, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(cup_2089)grab_executor(cup_2089)walk_executor(table_193)put_executor(cup_2089, table_193)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. 
##############################
From agent.py
obs(fridge_140, Find the milk in the fridge)
Get this information:  food_rice_2067 is inside fridge_140. food_jam_2059 is inside fridge_140. food_sugar_2070 is inside fridge_140. food_apple_2043 is inside fridge_140. food_dessert_2051 is inside fridge_140. food_noodles_2062 is inside fridge_140. fridge_140 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_pizza_2065 is inside fridge_140. food_cake_2046 is inside fridge_140. food_hamburger_2057 is inside fridge_140. food_salt_2068 is inside fridge_140. food_cheese_2049 is inside fridge_140. food_kiwi_2060 is inside fridge_140. food_donut_2052 is inside fridge_140. food_turkey_2071 is inside fridge_140. food_bacon_2044 is inside fridge_140. sauce_2101 is inside fridge_140. food_oatmeal_2063 is inside fridge_140. dry_pasta_2073 is on fridge_140. food_food_2055 is inside fridge_140. food_carrot_2047 is inside fridge_140. food_potato_2066 is inside fridge_140. food_ice_cream_2058 is inside fridge_140. food_snack_2069 is inside fridge_140. food_chicken_2050 is inside fridge_140. food_lemon_2061 is inside fridge_140. food_vegetable_2072 is inside fridge_140. fridge_140 is close to food_cereal_2048. fridge_140 is close to food_cheese_2049. fridge_140 is close to food_chicken_2050. fridge_140 is close to food_dessert_2051. fridge_140 is close to food_donut_2052. fridge_140 is close to food_egg_2053. fridge_140 is close to food_fish_2054. fridge_140 is close to food_food_2055. fridge_140 is close to food_fruit_2056. fridge_140 is close to food_hamburger_2057. fridge_140 is close to food_ice_cream_2058. fridge_140 is close to food_jam_2059. fridge_140 is close to food_kiwi_2060. fridge_140 is close to food_lemon_2061. fridge_140 is close to food_noodles_2062. fridge_140 is close to food_oatmeal_2063. fridge_140 is close to food_peanut_butter_2064. fridge_140 is close to food_pizza_2065. fridge_140 is close to food_potato_2066. fridge_140 is close to food_rice_2067. fridge_140 is close to food_salt_2068. fridge_140 is close to food_snack_2069. fridge_140 is close to food_sugar_2070. fridge_140 is close to food_turkey_2071. fridge_140 is close to food_vegetable_2072. fridge_140 is close to dry_pasta_2073. fridge_140 is close to milk_2074. fridge_140 is close to cupboard_131. fridge_140 is close to floor_22. fridge_140 is close to ceiling_34. fridge_140 is close to wall_7. fridge_140 is close to wall_8. fridge_140 is close to kitchen_counter_129. fridge_140 is close to sauce_2101. fridge_140 is close to chair_138. fridge_140 is close to toaster_144. fridge_140 is close to food_steak_2042. fridge_140 is close to food_apple_2043. fridge_140 is close to food_bacon_2044. fridge_140 is close to food_banana_2045. fridge_140 is close to food_cake_2046. fridge_140 is close to food_carrot_2047. fridge_140 is close to character_219. food_steak_2042 is inside fridge_140. food_egg_2053 is inside fridge_140. fridge_140 is on floor_22. food_peanut_butter_2064 is inside fridge_140. food_banana_2045 is inside fridge_140. food_fruit_2056 is inside fridge_140. food_cereal_2048 is inside fridge_140. fridge_140 is CLEAN. fridge_140 is OPEN. fridge_140 is OFF. fridge_140 is PLUGGED_IN.
##############################
From agent.py
walk_executor(cup_2089)
Robot find: Robot is close to the milk_2074. Robot is close to the cup_2089. Robot is close to the bookshelf_137. 
##############################
From agent.py
grab_executor(cup_2089)
Robot find: Robot is close to the milk_2074. Robot is close to the cup_2089. Robot is close to the bookshelf_137. Grabbing cup_2089 by left hand. 
##############################
From agent.py
putin_executor(milk_2074, cup_2089)
Robot find: Robot is close to the milk_2074. Robot is close to the cup_2089. Robot is close to the bookshelf_137. milk_2074 is close cup_2089. cup_2089 is close milk_2074. milk_2074 is inside cup_2089. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(microwave_149)
Robot find: pot_54, Robot is close to the cup_2089. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the cup_2089. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
putin_executor(cup_2089, microwave_149)
Robot find: Robot is close to the cup_2089. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. cup_2089 is inside microwave_149. microwave_149 is close cup_2089. cup_2089 is close microwave_149. cup_2089 released by left hand. 
##############################
From agent.py
close_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is closed. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned on. 
##############################
From agent.py
switchoff_executor(microwave_149)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is turned off. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the cup_2089. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. microwave_149 is opened. 
##############################
From agent.py
walk_executor(cup_2089)
Robot find: Robot is close to the cup_2089. Robot is close to the microwave_149. 
##############################
From agent.py
grab_executor(cup_2089)
Robot find: Robot is close to the cup_2089. Robot is close to the microwave_149. Grabbing cup_2089 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the cup_2089. Robot is close to the table_193. 
##############################
From agent.py
put_executor(cup_2089, table_193)
Robot find: Robot is close to the cup_2089. Robot is close to the table_193. table_193 is close cup_2089. cup_2089 is close table_193. cup_2089 is on table_193. cup_2089 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.
Action History:
['walk_executor(bookshelf_189)', 'open_executor(bookshelf_189)', 'walk_executor(bookshelf_188)', 'open_executor(bookshelf_188)', 'walk_executor(bookshelf_260)', 'open_executor(bookshelf_260)', 'walk_executor(bookshelf_137)', 'open_executor(bookshelf_137)', 'walk_executor(book_2092)', 'grab_executor(book_2092)', 'walk_executor(table_193)', 'put_executor(book_2092, table_193)', 'walk_executor(bookshelf_372)', 'open_executor(bookshelf_372)', 'walk_executor(table_127)', 'walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'walk_executor(table_193)', 'walk_executor(table_193)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(fridge_140)', 'walk_executor(cup_2089)', 'grab_executor(cup_2089)', 'putin_executor(milk_2074, cup_2089)', 'walk_executor(microwave_149)', 'open_executor(microwave_149)', 'putin_executor(cup_2089, microwave_149)', 'close_executor(microwave_149)', 'switchon_executor(microwave_149)', 'switchoff_executor(microwave_149)', 'open_executor(microwave_149)', 'walk_executor(cup_2089)', 'grab_executor(cup_2089)', 'walk_executor(table_193)', 'put_executor(cup_2089, table_193)']
Time info:
Time consume: 562 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 43
goal generate times: 9
goal correct times: 0
action_num: 43

Task complete rate:
1
Scene_id: 2
##############################
