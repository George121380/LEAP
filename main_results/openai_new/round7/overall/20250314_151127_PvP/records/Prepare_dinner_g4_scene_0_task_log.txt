From agent.py
Reset goals: The sub-goals are: 
['1. Wash and prepare the rice and egg.', '2. Cook the rice and then add the egg to fry them together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def is_kitchen_counter(kitchen_counter: item):
    # Function to determine if an item is a kitchen counter
    symbol is_counter=exists counter: item : (is_kitchen_counter(counter) and inside(counter, kitchen_counter))
    return is_counter

behavior wash_and_prepare_ingredients(rice: item, egg: item, sink: item):
    body:
        if dirty(rice) or not has_water(rice):
            if not inhand(rice):
                walk_to(rice)
                grab(rice)
            walk_to(sink)
            wash(rice)
        if dirty(egg):
            if not inhand(egg):
                walk_to(egg)
                grab(egg)
            walk_to(sink)
            wash(egg)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Select the kitchen counter

        bind sink: item where:
            is_sink(sink) and inside(sink, kitchen)
        # Select the sink

        # Wash and prepare rice and egg using the identified sink
        wash_and_prepare_ingredients(rice, egg, sink)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_kitchen_counter(kitchen_counter: item):
    # Function to determine if an item is a kitchen counter
    symbol is_counter=exists counter: item : (is_kitchen_counter(counter) and inside(counter, kitchen_counter))
    return is_counter

behavior wash_and_prepare_ingredients(rice: item, egg: item, sink: item):
    body:
        if dirty(rice) or not has_water(rice):
            if not inhand(rice):
                walk_to(rice)
                grab(rice)
            walk_to(sink)
            wash(rice)
        if dirty(egg):
            if not inhand(egg):
                walk_to(egg)
                grab(egg)
            walk_to(sink)
            wash(egg)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Select the kitchen counter

        bind sink: item where:
            is_sink(sink) and inside(sink, kitchen)
        # Select the sink

        # Wash and prepare rice and egg using the identified sink
        wash_and_prepare_ingredients(rice, egg, sink)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_rice_2036, cupboard_229)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(sink_231)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_rice_2036, cupboard_229)
Fail to find food_rice_2036 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(sink_231)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_rice_2036, fridge_289)
Find food_rice_2036. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(sink_231)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the fridge_289. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the fridge_289. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(sink_231)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, soap_2054, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, plate_1000, Robot is close to the food_rice_2036. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the food_rice_2036. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_rice_2036. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_rice_2036)
Robot find: Robot is close to the food_rice_2036. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_rice_2036. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wash and prepare the egg as well. The rice has been washed, but this sub-task requires both the rice and the egg to be prepared. Ensure to grab and wash the food_egg_2020 next.
##############################
From agent.py
Human Instruction: You need to wash and prepare the egg as well. The rice has been washed, but this sub-task requires both the rice and the egg to be prepared. Ensure to grab and wash the food_egg_2020 next.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for food_rice_2036 around cupboard_229.
Action 4: Walk to fridge_289.
Action 5: Switch off fridge_289.
Action 6: Open fridge_289.
Action 7: look for food_rice_2036 around fridge_289.
Action 8: Walk to food_rice_2036.
Action 9: Grab food_rice_2036.
Action 10: Walk to sink_231.
Action 11: Walk to faucet_43.
Action 12: Switch on faucet_43.
Action 13: Wash food_rice_2036.
Action 14: Switch off faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_table_226(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_egg_in_fridge(egg: item, fridge: item):
    # Function to check if the egg is inside the fridge
    return inside(egg, fridge)

behavior ensure_rice_and_egg_clean(rice: item, egg: item):
    body:
        if dirty(rice):
            walk_to(rice)
            wash(rice)
        if dirty(egg):
            walk_to(egg)
            wash(egg)

behavior grab_egg(egg: item):
    body:
        if not inhand(egg):
            grab(egg)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and id[rice]==2036
        # Select food_rice_2036

        ensure_rice_and_egg_clean(rice, egg)

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select fridge_289

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select food_egg_2020
        
        if not is_egg_in_fridge(egg, fridge):
            walk_to(fridge)
            opens(fridge)
            grab_egg(egg)
            ensure_rice_and_egg_clean(rice, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_cutting_board_2051(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(mat,cutting_board_instance)
        else:
            exp(mat,cutting_board_instance)
    eff:
        unknown[mat]=False
        close[mat,cutting_board_instance]=True
        close[cutting_board_instance,mat]=True
    

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_food_egg_in_fridge(fridge:item):
    # Function to check if there is an egg with id 2020 in the fridge
    symbol has_food_egg=exists o: item : (is_food_egg(o) and id[o] == 2020 and inside(o, fridge))
    return has_food_egg

behavior prepare_egg(egg:item, sink:item):
    body:
        if close_char(char, sink):
            walk_to(sink)
        if inhand(egg):
            if dirty(egg):
                wash(egg)

behavior fetch_and_wash_egg(fridge:item, egg:item, sink:item):
    body:
        if open(fridge):
            closes(fridge)
        if not inhand(egg):
            grab(egg)
            if id[egg]==2020:
                prepare_egg(egg, sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select the sink
        
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289 
        # Select the fridge with ID 289

        if has_food_egg_in_fridge(fridge):
            opens(fridge)
            bind egg: item where:
                is_food_egg(egg) and id[egg]==2020
            fetch_and_wash_egg(fridge, egg, sink)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_food_egg_in_fridge(fridge:item):
    # Function to check if there is an egg with id 2020 in the fridge
    symbol has_food_egg=exists o: item : (is_food_egg(o) and id[o] == 2020 and inside(o, fridge))
    return has_food_egg

behavior prepare_egg(egg:item, sink:item):
    body:
        if close_char(char, sink):
            walk_to(sink)
        if inhand(egg):
            if dirty(egg):
                wash(egg)

behavior fetch_and_wash_egg(fridge:item, egg:item, sink:item):
    body:
        if open(fridge):
            closes(fridge)
        if not inhand(egg):
            grab(egg)
            if id[egg]==2020:
                prepare_egg(egg, sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select the sink
        
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289 
        # Select the fridge with ID 289

        if has_food_egg_in_fridge(fridge):
            opens(fridge)
            bind egg: item where:
                is_food_egg(egg) and id[egg]==2020
            fetch_and_wash_egg(fridge, egg, sink)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)open_executor(fridge_289)close_executor(fridge_289)open_executor(fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the food_rice_2036. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_egg_in_fridge():
    # Function to check if theres an egg in fridge_289
    symbol egg_in_fridge=exists o: item : (is_food_egg(o) and inside(o, fridge_289))
    return egg_in_fridge

behavior wash_egg_and_rice(egg: item, rice: item, faucet: item):
    body:
        if not clean(rice):
            walk_to(faucet)
            switch_on(faucet)
            wash(rice)
            switch_off(faucet)
        
        if not clean(egg):
            walk_to(faucet)
            switch_on(faucet)
            wash(egg)
            switch_off(faucet)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet_43

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select food_rice_2036

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select fridge_289

        if not is_food_egg_in_fridge():
            walk_to(fridge)
            if not open(fridge):
                switch_off(fridge)
                opens(fridge)
                # Open the fridge
            observe(fridge, "Identify the items inside the fridge")

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select food_egg_2020

        wash_egg_and_rice(egg, rice, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_mousepad_167(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mat,mousepad_instance)
        else:
            exp(mat,mousepad_instance)
    eff:
        unknown[mat]=False
        close[mat,mousepad_instance]=True
        close[mousepad_instance,mat]=True
    

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def find_and_grab_egg(egg:item, sink:item):
    # Find and grab the egg if it isnt close
    body:
        if not close_char(char, egg):
            walk_to(egg)  # Move towards the egg
        grab(egg)  # Grab the egg

behavior wash_items(egg: item, sink: item, faucet: item):
    body:
        if dirty(egg):
            find_and_grab_egg(egg, sink)
            walk_to(sink)
            walk_to(faucet)
            switch_on(faucet)  # Switch on the faucet
            wash(egg)  # Wash the egg
            switch_off(faucet)  # Switch off the faucet

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and clean(rice)
        # Select already washed rice

        bind egg: item where:
            is_food_egg(egg) and dirty(egg)
        # Select dirty egg

        bind sink: item where:
            is_sink(sink) and id[sink]==231
        # Select the sink with ID 231

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        wash_items(egg, sink, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_prepare_food_egg_2020(food_egg:item, sink:item, faucet:item):
    body:
        if not clean(food_egg):
            walk_to(sink)
            if is_off(faucet):
                switch_on(faucet)
            wash(food_egg)
            switch_off(faucet)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the food_rice_2036 which has been washed

        bind food_egg: item where:
            is_food_egg(food_egg) and id[food_egg] == 2020
        # Select the egg that needs to be washed

        bind sink: item where:
            is_sink(sink) and id[sink] == 231
        # Select sink_231 where the egg will be washed

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet_43 for washing egg

        walk_to(food_egg)
        # Move close to the egg

        grab(food_egg)
        # Hold the egg to wash it

        wash_and_prepare_food_egg_2020(food_egg, sink, faucet)
        # Wash the egg at the sink

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_and_prepare_food_egg_2020(food_egg:item, sink:item, faucet:item):
    body:
        if not clean(food_egg):
            walk_to(sink)
            if is_off(faucet):
                switch_on(faucet)
            wash(food_egg)
            switch_off(faucet)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the food_rice_2036 which has been washed

        bind food_egg: item where:
            is_food_egg(food_egg) and id[food_egg] == 2020
        # Select the egg that needs to be washed

        bind sink: item where:
            is_sink(sink) and id[sink] == 231
        # Select sink_231 where the egg will be washed

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet_43 for washing egg

        walk_to(food_egg)
        # Move close to the egg

        grab(food_egg)
        # Hold the egg to wash it

        wash_and_prepare_food_egg_2020(food_egg, sink, faucet)
        # Wash the egg at the sink

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the food_rice_2036. Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_rice_2036. Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wash the egg (food_egg_2020) at the sink. Ensure the faucet is on, wash the egg, and then turn off the faucet.
##############################
From agent.py
Human Instruction: You need to wash the egg (food_egg_2020) at the sink. Ensure the faucet is on, wash the egg, and then turn off the faucet.

Trial and Error: You can not open fridge_289
The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for food_rice_2036 around cupboard_229.
Action 4: Walk to fridge_289.
Action 5: Switch off fridge_289.
Action 6: Open fridge_289.
Action 7: look for food_rice_2036 around fridge_289.
Action 8: Walk to food_rice_2036.
Action 9: Grab food_rice_2036.
Action 10: Walk to sink_231.
Action 11: Walk to faucet_43.
Action 12: Switch on faucet_43.
Action 13: Wash food_rice_2036.
Action 14: Switch off faucet_43.
Action 15: Walk to fridge_289.
Action 16: Walk to food_egg_2020.
Action 17: Grab food_egg_2020.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_table_226(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior walk_to_sink_and_wash_egg(faucet: item, egg: item):
    body:
        walk_to(faucet)
        if is_off(faucet):
            switch_on(faucet)
        if not clean(egg):
            wash(egg)
        if is_on(faucet):
            switch_off(faucet)

behavior wash_rice(rice: item, faucet: item):
    body:
        walk_to(faucet)
        if is_off(faucet):
            switch_on(faucet)
        if not clean(rice):
            wash(rice)
        if is_on(faucet):
            switch_off(faucet)

behavior prepare_rice_and_egg():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg with ID 2020

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43
        
        if not clean(rice):
            wash_rice(rice, faucet)
        if not clean(egg):
            walk_to_sink_and_wash_egg(faucet, egg)

behavior __goal__():
    body:
        prepare_rice_and_egg()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_microwave_297(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(bowl,microwave_instance)
        else:
            exp(bowl,microwave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,microwave_instance]=True
        close[microwave_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_food_egg(food:item, faucet:item):
    body:
        if not clean(food):
            switch_on(faucet)
            # Turn on the faucet
            wash(food)
            # Wash the egg
            switch_off(faucet)
            # Turn off the faucet

behavior prepare_and_wash_rice(rice:item, faucet:item):
    body:
        if not clean(rice):
            switch_on(faucet)
            # Turn on the faucet
            wash(rice)
            # Wash the rice
            switch_off(faucet)
            # Turn off the faucet

behavior __goal__():
    body:
        bind food_rice: item where:
            is_food_rice(food_rice) and id[food_rice] == 2036
        # Select rice with ID 2036

        bind food_egg: item where:
            is_food_egg(food_egg) and id[food_egg] == 2020
        # Select egg with ID 2020

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet with ID 43

        walk_to(food_rice)
        # Approach the rice
        prepare_and_wash_rice(food_rice, faucet)
        # Prepare and wash the rice

        walk_to(food_egg)
        # Approach the egg
        wash_food_egg(food_egg, faucet)
        # Wash the egg

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_food_egg(food:item, faucet:item):
    body:
        if not clean(food):
            switch_on(faucet)
            # Turn on the faucet
            wash(food)
            # Wash the egg
            switch_off(faucet)
            # Turn off the faucet

behavior prepare_and_wash_rice(rice:item, faucet:item):
    body:
        if not clean(rice):
            switch_on(faucet)
            # Turn on the faucet
            wash(rice)
            # Wash the rice
            switch_off(faucet)
            # Turn off the faucet

behavior __goal__():
    body:
        bind food_rice: item where:
            is_food_rice(food_rice) and id[food_rice] == 2036
        # Select rice with ID 2036

        bind food_egg: item where:
            is_food_egg(food_egg) and id[food_egg] == 2020
        # Select egg with ID 2020

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet with ID 43

        walk_to(food_rice)
        # Approach the rice
        prepare_and_wash_rice(food_rice, faucet)
        # Prepare and wash the rice

        walk_to(food_egg)
        # Approach the egg
        wash_food_egg(food_egg, faucet)
        # Wash the egg

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2036)walk_executor(food_egg_2020)
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The egg (food_egg_2020) needs to be washed. You need to approach the sink (sink_231), turn on the faucet (faucet_43), wash the egg, and turn off the faucet afterward.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice_and_add_egg(rice:item, egg:item):
    body:
        if not cut(rice):
            put_inside(rice, stove)
            # Put the rice on the stove to start cooking
        
        if not inhand(egg) and has_a_free_hand(char):
            grab(egg)
            # Grab the egg to prepare for frying

behavior fry_egg_with_rice(egg:item, stove:item):
    body:
        if inhand(egg):
            put_on(egg, stove)
            # Place the egg on the stove for frying with the rice

behavior ensure_stove_is_on(stove:item):
    body:
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to start cooking the rice and egg

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice that was washed and prepared

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg to be cooked

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        walk_to(stove)
        # Approach the stove

        cook_rice_and_add_egg(rice, egg)
        fry_egg_with_rice(egg, stove)
        ensure_stove_is_on(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_table_226(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_ready_to_cook(rice:item, egg:item, pot:item):
    # Check if rice and egg are inside the pot and ready to cook
    return inside(rice, pot) and inside(egg, pot)

behavior boil_rice_and_egg(pot:item, stove:item):
    body:
        if on(pot, stove) and not is_on(stove):
            switch_on(stove)
            # Turn on the stove to start cooking the rice and egg

behavior prepare_food(rice:item, egg:item, pot:item):
    body:
        if not inside(rice, pot):
            grab(rice)
            put_inside(rice, pot)
            # Put rice in the pot

        if not inside(egg, pot):
            grab(egg)
            put_inside(egg, pot)
            # Put egg in the pot

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select rice with ID 2036

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select egg with ID 2020

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not is_food_ready_to_cook(rice, egg, pot):
            prepare_food(rice, egg, pot)

        boil_rice_and_egg(pot, stove)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_ready_to_cook(rice:item, egg:item, pot:item):
    # Check if rice and egg are inside the pot and ready to cook
    return inside(rice, pot) and inside(egg, pot)

behavior boil_rice_and_egg(pot:item, stove:item):
    body:
        if on(pot, stove) and not is_on(stove):
            switch_on(stove)
            # Turn on the stove to start cooking the rice and egg

behavior prepare_food(rice:item, egg:item, pot:item):
    body:
        if not inside(rice, pot):
            grab(rice)
            put_inside(rice, pot)
            # Put rice in the pot

        if not inside(egg, pot):
            grab(egg)
            put_inside(egg, pot)
            # Put egg in the pot

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select rice with ID 2036

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select egg with ID 2020

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not is_food_ready_to_cook(rice, egg, pot):
            prepare_food(rice, egg, pot)

        boil_rice_and_egg(pot, stove)


##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(food_egg_2020, kitchen_counter_230)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)open_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, kitchen_counter_230)
Robot find: Robot is close to the food_rice_2036. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_egg_2020. food_egg_2020 is close kitchen_counter_230. food_egg_2020 is on kitchen_counter_230. food_egg_2020 released by left hand. 
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the food_rice_2036. Grabbing food_rice_2036 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def has_both_rice_and_egg_in_pot(pot:item):
    # Function to check if both rice and egg are in the pot
    symbol contains_both=exists o: item : (inside(food_rice_2036, pot) and inside(food_egg_2020, pot))
    return contains_both

behavior grab_and_place_rice_egg(rice:item, egg:item, pot:item):
    body:
        if not inhand(rice):
            grab(rice)
        if not inside(rice, pot):
            put_inside(rice, pot)
        if not inhand(egg):
            grab(egg)
        if not inside(egg, pot):
            put_inside(egg, pot)

behavior cook_rice_and_egg(stove:item, pot:item):
    body:
        if has_both_rice_and_egg_in_pot(pot) and on(pot, stove) and is_off(stove):
            switch_on(stove)
            # Ensure the stove is on to cook the rice and egg

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot) and id[pot] == 2069

        bind stove: item where:
            is_stove(stove)

        walk_to(pot)
        grab_and_place_rice_egg(rice, egg, pot)
        cook_rice_and_egg(stove, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_with_water_and_egg_on_stove(pot: item, stove: item):
    # Check if the pot with water and egg is on the stove
    symbol has_water_and_egg=exists o: item : ((is_pot(pot) and is_food_egg(o)) and has_water(pot) and inside(o, pot) and on(pot, stove))
    return has_water_and_egg

behavior put_rice_in_pot(rice: item, pot: item):
    body:
        if not inside(rice, pot):
            put_inside(rice, pot)

behavior cook_rice_and_egg(rice: item, egg: item, pot: item, stove: item):
    body:
        if is_pot_with_water_and_egg_on_stove(pot, stove):
            put_rice_in_pot(rice, pot)
            # Add rice to the pot containing water and egg, on the stove

        if is_off(stove):
            switch_on(stove)
            # Switch on the stove to start cooking if its off

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot 
        
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg) and inside(egg, pot)
        # Select the egg already inside the pot

        if not is_pot_with_water_and_egg_on_stove(pot, stove):
            if not on(pot, stove):
                put_on(pot, stove)
        
        cook_rice_and_egg(rice, egg, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_bowl_2071_around_microwave_297(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(bowl,microwave_instance)
        else:
            exp(bowl,microwave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,microwave_instance]=True
        close[microwave_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_ready_to_cook(rice:item, egg:item, pot:item):
    # Check if rice and egg are ready to be cooked together
    return (inside(rice, pot) and inside(egg, pot))

behavior grab_and_add_to_pot(item:item, pot:item):
    body:
        if not inside(item, pot):
            if not inhand(item):
                grab(item)
            put_inside(item, pot)

behavior cook_rice_and_egg(stove:item, pot:item):
    body:
        if on(pot, stove):
            if is_off(stove):
                switch_on(stove)
                # Turn on the stove to cook the rice and egg together
        else:
            put_on(pot, stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select food_rice_2036

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select food_egg_2020

        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot_2069

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not is_ready_to_cook(rice, egg, pot):
            grab_and_add_to_pot(rice, pot)
            grab_and_add_to_pot(egg, pot)

        cook_rice_and_egg(stove, pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_ready_to_cook(rice:item, egg:item, pot:item):
    # Check if rice and egg are ready to be cooked together
    return (inside(rice, pot) and inside(egg, pot))

behavior grab_and_add_to_pot(item:item, pot:item):
    body:
        if not inside(item, pot):
            if not inhand(item):
                grab(item)
            put_inside(item, pot)

behavior cook_rice_and_egg(stove:item, pot:item):
    body:
        if on(pot, stove):
            if is_off(stove):
                switch_on(stove)
                # Turn on the stove to cook the rice and egg together
        else:
            put_on(pot, stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select food_rice_2036

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select food_egg_2020

        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot_2069

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not is_ready_to_cook(rice, egg, pot):
            grab_and_add_to_pot(rice, pot)
            grab_and_add_to_pot(egg, pot)

        cook_rice_and_egg(stove, pot)

##############################
From agent.py-> find a plan in act()
put_executor(food_rice_2036, kitchen_counter_230)open_executor(pot_2069)grab_executor(food_rice_2036)putin_executor(food_rice_2036, pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
put_executor(food_rice_2036, kitchen_counter_230)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_rice_2036. food_rice_2036 is close kitchen_counter_230. food_rice_2036 is on kitchen_counter_230. food_rice_2036 released by left hand. food_rice_2036 released by right hand. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
putin_executor(food_rice_2036, pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_rice_2036. food_rice_2036 is inside pot_2069. food_rice_2036 is close pot_2069. food_rice_2036 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Robot is close to the food_rice_2036. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_egg_2020, pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Robot is close to the food_rice_2036. Robot is close to the pot_2069. pot_2069 is close food_egg_2020. food_egg_2020 is inside pot_2069. food_egg_2020 is close pot_2069. food_egg_2020 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Robot is close to the food_rice_2036. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to switch on the stove to cook the rice and egg together in the pot on the stove. The task is not complete until the cooking process is initiated by turning on the stove.
##############################
From agent.py
Human Instruction: You need to switch on the stove to cook the rice and egg together in the pot on the stove. The task is not complete until the cooking process is initiated by turning on the stove.

Trial and Error: You can not open fridge_289You can not open pot_2069
The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for food_rice_2036 around cupboard_229.
Action 4: Walk to fridge_289.
Action 5: Switch off fridge_289.
Action 6: Open fridge_289.
Action 7: look for food_rice_2036 around fridge_289.
Action 8: Walk to food_rice_2036.
Action 9: Grab food_rice_2036.
Action 10: Walk to sink_231.
Action 11: Walk to faucet_43.
Action 12: Switch on faucet_43.
Action 13: Wash food_rice_2036.
Action 14: Switch off faucet_43.
Action 15: Walk to fridge_289.
Action 16: Walk to food_egg_2020.
Action 17: Grab food_egg_2020.
Action 18: Walk to food_rice_2036.
Action 19: Walk to food_egg_2020.
Action 20: Walk to kitchen_counter_230.
Action 21: Put food_egg_2020 on kitchen_counter_230.
Action 22: Walk to food_rice_2036.
Action 23: Grab food_rice_2036.
Action 24: Walk to pot_2069.
Action 25: Put food_rice_2036 on kitchen_counter_230.
Action 26: Open pot_2069.
Action 27: Grab food_rice_2036.
Action 28: Put food_rice_2036 into pot_2069.
Action 29: Walk to food_egg_2020.
Action 30: Grab food_egg_2020.
Action 31: Walk to pot_2069.
Action 32: Put food_egg_2020 into pot_2069.
Action 33: Grab pot_2069.
Action 34: Walk to stove_2065.
Action 35: Put pot_2069 on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice_with_egg(rice: item, egg: item, pot: item, stove: item):
    body:
        if not inside(rice, pot):
            put_inside(rice, pot)
        
        if not inside(egg, pot):
            put_inside(egg, pot)
        
        if on(pot, stove) and is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_rice_with_egg(rice, egg, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_rice_with_egg(rice: item, egg: item, pot: item, stove: item):
    body:
        if not inside(rice, pot):
            put_inside(rice, pot)
        
        if not inside(egg, pot):
            put_inside(egg, pot)
        
        if on(pot, stove) and is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_rice_with_egg(rice, egg, pot, stove)

##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2065)
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(sink_231)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_rice_2036)', 'switchoff_executor(faucet_43)', 'walk_executor(fridge_289)', 'open_executor(fridge_289) (Failed)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(food_rice_2036)', 'walk_executor(food_egg_2020)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_egg_2020, kitchen_counter_230)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(pot_2069)', 'open_executor(pot_2069) (Failed)', 'put_executor(food_rice_2036, kitchen_counter_230)', 'open_executor(pot_2069)', 'grab_executor(food_rice_2036)', 'putin_executor(food_rice_2036, pot_2069)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(pot_2069)', 'putin_executor(food_egg_2020, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 296 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 100
goal generate times: 14
goal correct times: 0
action_num: 36

Task complete rate:
Keystate: k1 - Requires: 6 steps
Keystate: k2 - Requires: 16 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
