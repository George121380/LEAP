From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_128(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker:item):
    # Check if the coffee maker is plugged in and has water
    return plugged(coffee_maker) and has_water(coffee_maker)

behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        if not plugged(coffee_maker):
            plugin(coffee_maker)

behavior ensure_coffee_maker_is_on(coffee_maker:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior make_coffee(coffee_maker:item, coffee_filter:item, cup:item):
    body:
        if not inside(coffee_filter, coffee_maker):
            put_inside(coffee_filter, coffee_maker)
        if not close_char(char, cup):
            grab(cup)
        put_on(cup, coffee_maker)  # Assume coffee is brewed into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        # Select a coffee filter

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        if not is_coffee_maker_ready(coffee_maker):
            if not has_water(coffee_maker):
                fill_coffee_maker_with_water(coffee_maker)
            if not plugged(coffee_maker):
                plug_in_coffee_maker(coffee_maker)
        
        ensure_coffee_maker_is_on(coffee_maker)
        # Ensure the coffee maker is turned on to brew coffee

        make_coffee(coffee_maker, coffee_filter, cup)
        # Make a cup of coffee using the coffee maker

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_coffee_maker_ready(coffee_maker:item):
    # Check if the coffee maker is plugged in and has water
    return plugged(coffee_maker) and has_water(coffee_maker)

behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        if not plugged(coffee_maker):
            plugin(coffee_maker)

behavior ensure_coffee_maker_is_on(coffee_maker:item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior make_coffee(coffee_maker:item, coffee_filter:item, cup:item):
    body:
        if not inside(coffee_filter, coffee_maker):
            put_inside(coffee_filter, coffee_maker)
        if not close_char(char, cup):
            grab(cup)
        put_on(cup, coffee_maker)  # Assume coffee is brewed into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        # Select a coffee filter

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        if not is_coffee_maker_ready(coffee_maker):
            if not has_water(coffee_maker):
                fill_coffee_maker_with_water(coffee_maker)
            if not plugged(coffee_maker):
                plug_in_coffee_maker(coffee_maker)
        
        ensure_coffee_maker_is_on(coffee_maker)
        # Ensure the coffee maker is turned on to brew coffee

        make_coffee(coffee_maker, coffee_filter, cup)
        # Make a cup of coffee using the coffee maker

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)switchon_executor(coffe_maker_147)walk_executor(kitchen_counter_128)exp(coffee_filter_2035, kitchen_counter_128)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(coffee_filter_2035)grab_executor(coffee_filter_2035)walk_executor(coffe_maker_147)putin_executor(coffee_filter_2035, coffe_maker_147)walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(coffee_filter_2035, kitchen_counter_128)
Fail to find coffee_filter_2035 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(coffee_filter_2035, kitchen_counter_132)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(coffee_filter_2035)grab_executor(coffee_filter_2035)walk_executor(coffe_maker_147)putin_executor(coffee_filter_2035, coffe_maker_147)walk_executor(kitchen_counter_132)exp(cup_2087, kitchen_counter_132)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(coffee_filter_2035, kitchen_counter_132)
Fail to find coffee_filter_2035 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(coffee_filter_2035, cupboard_131)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(coffee_filter_2035)grab_executor(coffee_filter_2035)walk_executor(coffe_maker_147)putin_executor(coffee_filter_2035, coffe_maker_147)walk_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(coffee_filter_2035, cupboard_131)
Fail to find coffee_filter_2035 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(coffee_filter_2035, cupboard_130)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(coffee_filter_2035)grab_executor(coffee_filter_2035)walk_executor(coffe_maker_147)putin_executor(coffee_filter_2035, coffe_maker_147)walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(coffee_filter_2035, cupboard_130)
Fail to find coffee_filter_2035 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(coffee_filter_2035, dishwasher_143)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(coffee_filter_2035)grab_executor(coffee_filter_2035)walk_executor(coffe_maker_147)putin_executor(coffee_filter_2035, coffe_maker_147)walk_executor(sink_133)exp(cup_2087, sink_133)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(coffee_filter_2035, dishwasher_143)
Fail to find coffee_filter_2035 around dishwasher_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(doorjamb_182)exp(coffee_filter_2035, doorjamb_182)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(coffee_filter_2035)grab_executor(coffee_filter_2035)walk_executor(coffe_maker_147)putin_executor(coffee_filter_2035, coffe_maker_147)walk_executor(sink_133)exp(cup_2087, sink_133)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(doorjamb_182)
Robot find: pillow_195, drawing_196, Robot is close to the doorjamb_182. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find coffee_filter_2035 ?
Answer: Find the coffee_filter_2035 inside the bedroom_327. It is located within the filing_cabinet_378.
Re-decompose: None

##############################
From agent.py
Human Instruction: Find the coffee_filter_2035 inside the bedroom_327. It is located within the filing_cabinet_378.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to kitchen_counter_128.
Action 4: look for coffee_filter_2035 around kitchen_counter_128.
Action 5: Walk to kitchen_counter_132.
Action 6: look for coffee_filter_2035 around kitchen_counter_132.
Action 7: Walk to cupboard_131.
Action 8: Open cupboard_131.
Action 9: look for coffee_filter_2035 around cupboard_131.
Action 10: Walk to cupboard_130.
Action 11: look for coffee_filter_2035 around cupboard_130.
Action 12: Walk to dishwasher_143.
Action 13: Open dishwasher_143.
Action 14: look for coffee_filter_2035 around dishwasher_143.
Action 15: Walk to doorjamb_182.

##############################
From agent.py
exp(coffee_filter_2035, doorjamb_182)
Fail to find coffee_filter_2035 around doorjamb_182. 
##############################
From agent.py-> find a plan in act()
walk_executor(filing_cabinet_378)exp(coffee_filter_2035, filing_cabinet_378)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(coffee_filter_2035)grab_executor(coffee_filter_2035)walk_executor(coffe_maker_147)putin_executor(coffee_filter_2035, coffe_maker_147)walk_executor(sink_307)exp(cup_2087, sink_307)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(filing_cabinet_378)
Robot find: food_bread_2016, crayon_2020, needle_2024, check_2033, alcohol_2002, coffee_filter_2035, soap_2037, bills_2009, drawing_387, Robot is close to the food_bread_2016. Robot is close to the crayon_2020. Robot is close to the needle_2024. Robot is close to the check_2033. Robot is close to the alcohol_2002. Robot is close to the coffee_filter_2035. Robot is close to the soap_2037. Robot is close to the bills_2009. Robot is close to the filing_cabinet_378. 
##############################
From agent.py
exp(coffee_filter_2035, filing_cabinet_378)
Find coffee_filter_2035. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(coffee_filter_2035)grab_executor(coffee_filter_2035)walk_executor(coffe_maker_147)putin_executor(coffee_filter_2035, coffe_maker_147)walk_executor(sink_307)exp(cup_2087, sink_307)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is opened. 
##############################
From agent.py
walk_executor(coffee_filter_2035)
Robot find: Robot is close to the filing_cabinet_378. Robot is close to the coffee_filter_2035. 
##############################
From agent.py
grab_executor(coffee_filter_2035)
Robot find: Robot is close to the filing_cabinet_378. Robot is close to the coffee_filter_2035. Grabbing coffee_filter_2035 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the coffee_filter_2035. Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
putin_executor(coffee_filter_2035, coffe_maker_147)
Robot find: Robot is close to the coffee_filter_2035. Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffee_filter_2035 is inside coffe_maker_147. coffe_maker_147 is close coffee_filter_2035. coffee_filter_2035 is close coffe_maker_147. coffee_filter_2035 released by right hand. 
##############################
From agent.py
walk_executor(sink_307)
Robot find: detergent_2108, drawing_296, towel_rack_298, Robot is close to the bathroom_counter_306. Robot is close to the sink_307. 
##############################
From agent.py
exp(cup_2087, sink_307)
Fail to find cup_2087 around sink_307. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. Robot is close to the coffee_filter_2035. 
##############################
From agent.py
close_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
put_executor(cup_2087, coffe_maker_147)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is close cup_2087. cup_2087 is close coffe_maker_147. cup_2087 is on coffe_maker_147. cup_2087 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure the coffee maker is plugged in and filled with water. These steps appear to be missing from the actions taken. Once completed, confirm the coffee maker is switched on, and the coffee will brew into the cup.
##############################
From agent.py
Human Instruction: Ensure the coffee maker is plugged in and filled with water. These steps appear to be missing from the actions taken. Once completed, confirm the coffee maker is switched on, and the coffee will brew into the cup.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to kitchen_counter_128.
Action 4: look for coffee_filter_2035 around kitchen_counter_128.
Action 5: Walk to kitchen_counter_132.
Action 6: look for coffee_filter_2035 around kitchen_counter_132.
Action 7: Walk to cupboard_131.
Action 8: Open cupboard_131.
Action 9: look for coffee_filter_2035 around cupboard_131.
Action 10: Walk to cupboard_130.
Action 11: look for coffee_filter_2035 around cupboard_130.
Action 12: Walk to dishwasher_143.
Action 13: Open dishwasher_143.
Action 14: look for coffee_filter_2035 around dishwasher_143.
Action 15: Walk to doorjamb_182.
Action 16: look for coffee_filter_2035 around doorjamb_182.
Action 17: Walk to filing_cabinet_378.
Action 18: look for coffee_filter_2035 around filing_cabinet_378.
Action 19: Walk to coffe_maker_147.
Action 20: Switch off coffe_maker_147.
Action 21: Open coffe_maker_147.
Action 22: Walk to coffee_filter_2035.
Action 23: Grab coffee_filter_2035.
Action 24: Walk to coffe_maker_147.
Action 25: Put coffee_filter_2035 into coffe_maker_147.
Action 26: Walk to sink_307.
Action 27: look for cup_2087 around sink_307.
Action 28: Walk to coffe_maker_147.
Action 29: Close coffe_maker_147.
Action 30: Switch on coffe_maker_147.
Action 31: Walk to table_123.
Action 32: look for cup_2087 around table_123.
Action 33: Walk to cup_2087.
Action 34: Grab cup_2087.
Action 35: Walk to coffe_maker_147.
Action 36: Put cup_2087 on coffe_maker_147.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_powersocket_259(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==259
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(cup,powersocket_instance)
        else:
            exp(cup,powersocket_instance)
    eff:
        unknown[cup]=False
        close[cup,powersocket_instance]=True
        close[powersocket_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker:item):
    # Check if the coffee maker is ready to brew coffee
    return plugged(coffee_maker) and is_on(coffee_maker) and has_water(coffee_maker)

behavior ensure_coffee_maker_is_ready(coffee_maker:item):
    body:
        if not plugged(coffee_maker) and has_plug(coffee_maker):
            plugin(coffee_maker)
        if not has_water(coffee_maker):
            get_water(coffee_maker)
        if not is_on(coffee_maker):
            switch_on(coffee_maker)

behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        if not on(cup, coffee_maker):
            put_on(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup used for brewing

        if not is_coffee_maker_ready(coffee_maker):
            ensure_coffee_maker_is_ready(coffee_maker)

        brew_coffee(coffee_maker, cup)
        # Brew coffee into the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker: item):
    # Function to check if the coffee maker is ready to brew
    return is_on(coffee_maker) and has_water(coffee_maker)

behavior ensure_coffee_maker_ready(coffee_maker: item):
    body:
        if not plugged(coffee_maker):
            plugin(coffee_maker)
        if not has_water(coffee_maker):
            water(coffee_maker)
        if is_off(coffee_maker) and has_switch(coffee_maker):
            switch_on(coffee_maker)

behavior make_coffee(cup: item, coffee_maker: item):
    body:
        if is_coffee_maker_ready(coffee_maker):
            put_on(cup, coffee_maker)
            # Coffee will brew into the cup
        else:
            ensure_coffee_maker_ready(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        walk_to(coffee_maker)
        # Approach the coffee maker

        make_coffee(cup, coffee_maker)
        # Make coffee into the cup using the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_jam_2059_around_fridge_140(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_jam,fridge_instance)
        else:
            exp(food_jam,fridge_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,fridge_instance]=True
        close[fridge_instance,food_jam]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker: item):
    # Function to check if the coffee maker is plugged in and the switch is on
    return plugged(coffee_maker) and is_on(coffee_maker) and has_water(coffee_maker)

behavior ensure_coffee_maker_is_ready(coffee_maker: item):
    body:
        if not plugged(coffee_maker) and has_plug(coffee_maker):
            plugin(coffee_maker)

        if not has_water(coffee_maker):
            walk_to(sink_307)
            water(coffee_maker)

        if is_off(coffee_maker) and has_switch(coffee_maker):
            switch_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select cup_2087

        walk_to(coffee_maker)

        if not is_coffee_maker_ready(coffee_maker):
            ensure_coffee_maker_is_ready(coffee_maker)

        if not on(cup, coffee_maker):
            put_on(cup, coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_coffee_maker_is_ready(coffee_maker:item):
    # Function to ensure the coffee maker is plugged in and filled with water
    if not plugged(coffee_maker):
        plugin(coffee_maker)
    if not has_water(coffee_maker):
        get_water(coffee_maker)

behavior make_coffee(coffee_make_behavior:item, cup:item):
    body:
        ensure_coffee_maker_is_ready(coffee_make_behavior)
        # Fill the cup with coffee from the coffee maker
        if not inside(cup, coffee_make_behavior):
            put_on(cup, coffee_make_behavior)
        if is_off(coffee_make_behavior):
            switch_on(coffee_make_behavior)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        # Select the coffee maker

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        # Select the coffee filter

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup

        walk_to(coffee_maker)
        if not open(coffee_maker):
            opens(coffee_maker)
        
        if not inside(coffee_filter, coffee_maker):
            put_inside(coffee_filter, coffee_maker)

        if open(coffee_maker):
            closes(coffee_maker)

        make_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def check_coffee_maker_ready(coffee_maker:item):
    # Function to check if the coffee maker is plugged in and has water
    return plugged(coffee_maker) and has_water(coffee_maker)

behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        if not plugged(coffee_maker):
            plugin(coffee_maker)
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior prepare_coffee(coffee_maker:item, coffee_filter:item, cup:item):
    body:
        ensure_coffee_maker_ready(coffee_maker)
        if not visited(coffee_maker):
            walk_to(coffee_maker)
        if is_on(coffee_maker):
            switch_off(coffee_maker)
        if not inside(coffee_filter, coffee_maker):
            put_inside(coffee_filter, coffee_maker)
        if not close_char(char, cup):
            walk_to(cup)
            grab(cup)
        if not on(cup, coffee_maker):
            put_on(cup, coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==147
        # Select coffee_maker_147

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter) and id[coffee_filter]==2035
        # Select coffee_filter_2035

        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087

        prepare_coffee(coffee_maker, coffee_filter, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def check_coffee_maker_ready(coffee_maker:item):
    # Function to check if the coffee maker is plugged in and has water
    return plugged(coffee_maker) and has_water(coffee_maker)

behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        if not plugged(coffee_maker):
            plugin(coffee_maker)
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior prepare_coffee(coffee_maker:item, coffee_filter:item, cup:item):
    body:
        ensure_coffee_maker_ready(coffee_maker)
        if not visited(coffee_maker):
            walk_to(coffee_maker)
        if is_on(coffee_maker):
            switch_off(coffee_maker)
        if not inside(coffee_filter, coffee_maker):
            put_inside(coffee_filter, coffee_maker)
        if not close_char(char, cup):
            walk_to(cup)
            grab(cup)
        if not on(cup, coffee_maker):
            put_on(cup, coffee_maker)
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==147
        # Select coffee_maker_147

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter) and id[coffee_filter]==2035
        # Select coffee_filter_2035

        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087

        prepare_coffee(coffee_maker, coffee_filter, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned off. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure the coffee maker is plugged in and filled with water. Once these steps are completed, switch on the coffee maker to brew the coffee into the cup.
##############################
From agent.py
Human Instruction: Ensure the coffee maker is plugged in and filled with water. Once these steps are completed, switch on the coffee maker to brew the coffee into the cup.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to kitchen_counter_128.
Action 4: look for coffee_filter_2035 around kitchen_counter_128.
Action 5: Walk to kitchen_counter_132.
Action 6: look for coffee_filter_2035 around kitchen_counter_132.
Action 7: Walk to cupboard_131.
Action 8: Open cupboard_131.
Action 9: look for coffee_filter_2035 around cupboard_131.
Action 10: Walk to cupboard_130.
Action 11: look for coffee_filter_2035 around cupboard_130.
Action 12: Walk to dishwasher_143.
Action 13: Open dishwasher_143.
Action 14: look for coffee_filter_2035 around dishwasher_143.
Action 15: Walk to doorjamb_182.
Action 16: look for coffee_filter_2035 around doorjamb_182.
Action 17: Walk to filing_cabinet_378.
Action 18: look for coffee_filter_2035 around filing_cabinet_378.
Action 19: Walk to coffe_maker_147.
Action 20: Switch off coffe_maker_147.
Action 21: Open coffe_maker_147.
Action 22: Walk to coffee_filter_2035.
Action 23: Grab coffee_filter_2035.
Action 24: Walk to coffe_maker_147.
Action 25: Put coffee_filter_2035 into coffe_maker_147.
Action 26: Walk to sink_307.
Action 27: look for cup_2087 around sink_307.
Action 28: Walk to coffe_maker_147.
Action 29: Close coffe_maker_147.
Action 30: Switch on coffe_maker_147.
Action 31: Walk to table_123.
Action 32: look for cup_2087 around table_123.
Action 33: Walk to cup_2087.
Action 34: Grab cup_2087.
Action 35: Walk to coffe_maker_147.
Action 36: Put cup_2087 on coffe_maker_147.
Action 37: Walk to coffe_maker_147.
Action 38: Switch off coffe_maker_147.
Action 39: Switch on coffe_maker_147.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_orchid_200(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind orchid_instance:item where:
            is_orchid(orchid_instance) and id[orchid_instance]==200
        achieve close_char(char,orchid_instance)
        if can_open(orchid_instance):
            achieve_once open(orchid_instance)
            exp(cup,orchid_instance)
        else:
            exp(cup,orchid_instance)
    eff:
        unknown[cup]=False
        close[cup,orchid_instance]=True
        close[orchid_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_filled_and_on(coffee_maker: item):
    # Function to check if the coffee maker is filled with water and switched on
    return has_water(coffee_maker) and is_on(coffee_maker)

behavior fill_coffee_maker(coffee_maker: item):
    body:
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior switch_on_coffee_maker(coffee_maker: item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior brew_coffee(cup: item, coffee_maker: item):
    body:
        if not on(cup, coffee_maker):
            put_on(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        # Select coffee_maker_147

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select cup_2087

        walk_to(coffee_maker)
        # Walk to the coffee maker

        if not plugged(coffee_maker):
            plugin(coffee_maker)
        # Plug in the coffee maker if its not plugged in

        fill_coffee_maker(coffee_maker)
        # Ensure the coffee maker is filled with water

        switch_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

        brew_coffee(cup, coffee_maker)
        # Brew coffee into the cup


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_coffee_maker_filled_and_on(coffee_maker: item):
    # Function to check if the coffee maker is filled with water and switched on
    return has_water(coffee_maker) and is_on(coffee_maker)

behavior fill_coffee_maker(coffee_maker: item):
    body:
        if not has_water(coffee_maker):
            get_water(coffee_maker)

behavior switch_on_coffee_maker(coffee_maker: item):
    body:
        if is_off(coffee_maker):
            switch_on(coffee_maker)

behavior brew_coffee(cup: item, coffee_maker: item):
    body:
        if not on(cup, coffee_maker):
            put_on(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        # Select coffee_maker_147

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select cup_2087

        walk_to(coffee_maker)
        # Walk to the coffee maker

        if not plugged(coffee_maker):
            plugin(coffee_maker)
        # Plug in the coffee maker if its not plugged in

        fill_coffee_maker(coffee_maker)
        # Ensure the coffee maker is filled with water

        switch_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

        brew_coffee(cup, coffee_maker)
        # Brew coffee into the cup


##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure the coffee maker is filled with water and plugged in before switching it on to brew the coffee.
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'walk_executor(kitchen_counter_128)', 'walk_executor(kitchen_counter_132)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'walk_executor(doorjamb_182)', 'walk_executor(filing_cabinet_378)', 'walk_executor(coffe_maker_147)', 'switchoff_executor(coffe_maker_147)', 'open_executor(coffe_maker_147)', 'walk_executor(coffee_filter_2035)', 'grab_executor(coffee_filter_2035)', 'walk_executor(coffe_maker_147)', 'putin_executor(coffee_filter_2035, coffe_maker_147)', 'walk_executor(sink_307)', 'walk_executor(coffe_maker_147)', 'close_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'walk_executor(table_123)', 'walk_executor(cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(coffe_maker_147)', 'put_executor(cup_2087, coffe_maker_147)', 'walk_executor(coffe_maker_147)', 'switchoff_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'walk_executor(coffe_maker_147)']
Time info:
Time consume: 189 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 155
goal generate times: 7
goal correct times: 0
action_num: 31

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
