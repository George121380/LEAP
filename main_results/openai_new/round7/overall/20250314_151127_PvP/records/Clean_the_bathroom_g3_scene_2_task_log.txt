From agent.py
Reset goals: The sub-goals are: 
['Wipe the toilet with toilet paper, then throw the toilet paper into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2118_around_bathroom_counter_306(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(toilet_paper,bathroom_counter_instance)
        else:
            exp(toilet_paper,bathroom_counter_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_counter_instance]=True
        close[bathroom_counter_instance,toilet_paper]=True
    

behavior find_cleaning_solution_2098_around_bathroom_counter_306(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior wipe_the_toilet(toilet:item, toilet_paper:item):
    body:
        if not clean(toilet):
            if not inhand(toilet_paper):
                grab(toilet_paper)
            walk_to(toilet)
            wipe(toilet)

behavior throw_paper_in_toilet(toilet:item, toilet_paper:item):
    body:
        if inhand(toilet_paper):
            if not inside(toilet_paper, toilet):
                put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_the_toilet(toilet, toilet_paper)
        throw_paper_in_toilet(toilet, toilet_paper)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2118_around_bathroom_cabinet_305(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
def is_toilet_paper_inhand_and_clean(toilet_paper: item):
    # Check if toilet paper is in hand and whether the toilet is clean
    return inhand(toilet_paper) and not dirty(toilet_paper)

behavior wipe_toilet_with_paper(toilet: item, toilet_paper: item):
    body:
        if not inhand(toilet_paper):
            grab(toilet_paper)
        if not is_toilet_paper_inhand_and_clean(toilet_paper):
            wipe(toilet)

behavior throw_toilet_paper_in_toilet(toilet_paper: item, toilet: item):
    body:
        if inhand(toilet_paper):
            walk_to(toilet)
            throw(toilet_paper, toilet)
            empty_a_hand()

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        
        bind toilet_paper: item where: 
            is_toilet_paper(toilet_paper)
        
        wipe_toilet_with_paper(toilet, toilet_paper)
        throw_toilet_paper_in_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2118_around_bathroom_counter_306(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(toilet_paper,bathroom_counter_instance)
        else:
            exp(toilet_paper,bathroom_counter_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_counter_instance]=True
        close[bathroom_counter_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_paper(toilet: item, toilet_paper: item):
    body:
        if not inhand(toilet_paper):
            grab(toilet_paper)
        if dirty(toilet):
            wipe(toilet)

behavior throw_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper

        walk_to(toilet)
        # Move to the toilet

        wipe_toilet_with_paper(toilet, toilet_paper)
        # Wipe the toilet with toilet paper

        throw_toilet_paper_into_toilet(toilet, toilet_paper)
        # Throw the used toilet paper into the toilet

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wipe_toilet_with_paper(toilet: item, toilet_paper: item):
    body:
        if not inhand(toilet_paper):
            grab(toilet_paper)
        if dirty(toilet):
            wipe(toilet)

behavior throw_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper

        walk_to(toilet)
        # Move to the toilet

        wipe_toilet_with_paper(toilet, toilet_paper)
        # Wipe the toilet with toilet paper

        throw_toilet_paper_into_toilet(toilet, toilet_paper)
        # Throw the used toilet paper into the toilet

##############################
From agent.py-> find a plan in act()
walk_executor(toilet_302)walk_executor(bathroom_counter_306)exp(toilet_paper_2118, bathroom_counter_306)walk_executor(toilet_paper_2118)grab_executor(toilet_paper_2118)walk_executor(toilet_302)open_executor(toilet_302)putin_executor(toilet_paper_2118, toilet_302)
##############################
From agent.py
walk_executor(toilet_302)
Robot find: toilet_paper_2118, Robot is close to the toilet_302. 
##############################
From agent.py
walk_executor(bathroom_counter_306)
Robot find: towel_rack_298, drawing_296, Robot is close to the bathroom_counter_306. 
##############################
From agent.py
exp(toilet_paper_2118, bathroom_counter_306)
Find toilet_paper_2118. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_302)walk_executor(toilet_paper_2118)grab_executor(toilet_paper_2118)walk_executor(toilet_302)open_executor(toilet_302)putin_executor(toilet_paper_2118, toilet_302)
##############################
From agent.py
walk_executor(toilet_302)
Robot find: Robot is close to the toilet_302. 
##############################
From agent.py
walk_executor(toilet_paper_2118)
Robot find: Robot is close to the toilet_paper_2118. 
##############################
From agent.py
grab_executor(toilet_paper_2118)
Robot find: Robot is close to the toilet_paper_2118. Grabbing toilet_paper_2118 by right hand. 
##############################
From agent.py
walk_executor(toilet_302)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. 
##############################
From agent.py
open_executor(toilet_302)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. toilet_302 is opened. 
##############################
From agent.py
putin_executor(toilet_paper_2118, toilet_302)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. toilet_paper_2118 is close toilet_302. toilet_paper_2118 is inside toilet_302. toilet_paper_2118 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wipe the toilet with the toilet paper before throwing it into the toilet.
##############################
From agent.py
Human Instruction: You need to wipe the toilet with the toilet paper before throwing it into the toilet.

The actions you have taken:
Action 1: Walk to toilet_302.
Action 2: Walk to bathroom_counter_306.
Action 3: look for toilet_paper_2118 around bathroom_counter_306.
Action 4: Walk to toilet_302.
Action 5: Walk to toilet_paper_2118.
Action 6: Grab toilet_paper_2118.
Action 7: Walk to toilet_302.
Action 8: Open toilet_302.
Action 9: Put toilet_paper_2118 into toilet_302.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_sink_307(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet: item, toilet_paper: item):
    body:
        if not clean(toilet):
            wipe(toilet)

behavior throw_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        if inhand(toilet_paper):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 302
        # Select toilet_302

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2118
        # Select toilet_paper_2118

        walk_to(toilet)
        # Approach the toilet

        if not inhand(toilet_paper):
            grab(toilet_paper)
            # Pick up the toilet paper

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        throw_toilet_paper_into_toilet(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wipe_toilet_with_toilet_paper(toilet: item, toilet_paper: item):
    body:
        if not clean(toilet):
            wipe(toilet)

behavior throw_toilet_paper_into_toilet(toilet: item, toilet_paper: item):
    body:
        if inhand(toilet_paper):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 302
        # Select toilet_302

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2118
        # Select toilet_paper_2118

        walk_to(toilet)
        # Approach the toilet

        if not inhand(toilet_paper):
            grab(toilet_paper)
            # Pick up the toilet paper

        wipe_toilet_with_toilet_paper(toilet, toilet_paper)
        throw_toilet_paper_into_toilet(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
walk_executor(toilet_302)walk_executor(toilet_paper_2118)grab_executor(toilet_paper_2118)putin_executor(toilet_paper_2118, toilet_302)
##############################
From agent.py
walk_executor(toilet_302)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. 
##############################
From agent.py
walk_executor(toilet_paper_2118)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. 
##############################
From agent.py
grab_executor(toilet_paper_2118)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. Grabbing toilet_paper_2118 by right hand. 
##############################
From agent.py
putin_executor(toilet_paper_2118, toilet_302)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. toilet_paper_2118 is close toilet_302. toilet_paper_2118 is inside toilet_302. toilet_paper_2118 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wipe the toilet with the toilet paper before throwing it into the toilet. Wiping action is missing.
##############################
From agent.py
Human Instruction: You need to wipe the toilet with the toilet paper before throwing it into the toilet. Wiping action is missing.

The actions you have taken:
Action 1: Walk to toilet_302.
Action 2: Walk to bathroom_counter_306.
Action 3: look for toilet_paper_2118 around bathroom_counter_306.
Action 4: Walk to toilet_302.
Action 5: Walk to toilet_paper_2118.
Action 6: Grab toilet_paper_2118.
Action 7: Walk to toilet_302.
Action 8: Open toilet_302.
Action 9: Put toilet_paper_2118 into toilet_302.
Action 10: Walk to toilet_302.
Action 11: Walk to toilet_paper_2118.
Action 12: Grab toilet_paper_2118.
Action 13: Put toilet_paper_2118 into toilet_302.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_clean_and_closed_toilet_paper(toilet_paper:item):
    # Function to check if the toilet paper is clean and not inside the toilet
    return clean(toilet_paper) and not inside(toilet_paper, toilet)

behavior clean_and_dispose_toilet(toilet_paper:item, toilet:item):
    body:
        if dirty(toilet):
            if not inhand(toilet_paper):
                grab(toilet_paper)
            walk_to(toilet)
            wipe(toilet)
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        if not is_clean_and_closed_toilet_paper(toilet_paper):
            clean_and_dispose_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet_paper:item, toilet:item):
    body:
        if not clean(toilet):
            wipe(toilet)
            # Wipe the toilet with toilet paper

behavior throw_toilet_paper_into_toilet(toilet_paper:item, toilet:item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)
            # Throw the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper

        wipe_toilet_with_toilet_paper(toilet_paper, toilet)
        throw_toilet_paper_into_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior wipe_toilet_and_dispose(toilet_paper: item, toilet: item):
    body:
        if not clean(toilet):
            wipe(toilet)
            # Wipe the toilet with the toilet paper if its not clean
        if inhand(toilet_paper):
            put_inside(toilet_paper, toilet)
            # Dispose of the used toilet paper in the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 302
        # Select the toilet with ID 302

        if not inhand(toilet_paper):
            walk_to(toilet_paper)
            grab(toilet_paper)
            # Ensure the toilet paper is in hand

        walk_to(toilet)
        # Move to the toilet location

        wipe_toilet_and_dispose(toilet_paper, toilet)
        # Execute the actions of wiping the toilet and disposing of the toilet paper
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior wipe_toilet_and_dispose(toilet_paper: item, toilet: item):
    body:
        if not clean(toilet):
            wipe(toilet)
            # Wipe the toilet with the toilet paper if its not clean
        if inhand(toilet_paper):
            put_inside(toilet_paper, toilet)
            # Dispose of the used toilet paper in the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 302
        # Select the toilet with ID 302

        if not inhand(toilet_paper):
            walk_to(toilet_paper)
            grab(toilet_paper)
            # Ensure the toilet paper is in hand

        walk_to(toilet)
        # Move to the toilet location

        wipe_toilet_and_dispose(toilet_paper, toilet)
        # Execute the actions of wiping the toilet and disposing of the toilet paper
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_paper_2118)grab_executor(toilet_paper_2118)walk_executor(toilet_302)putin_executor(toilet_paper_2118, toilet_302)
##############################
From agent.py
walk_executor(toilet_paper_2118)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. 
##############################
From agent.py
grab_executor(toilet_paper_2118)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. Grabbing toilet_paper_2118 by right hand. 
##############################
From agent.py
walk_executor(toilet_302)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. 
##############################
From agent.py
putin_executor(toilet_paper_2118, toilet_302)
Robot find: Robot is close to the toilet_paper_2118. Robot is close to the toilet_302. toilet_paper_2118 is close toilet_302. toilet_paper_2118 is inside toilet_302. toilet_paper_2118 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wipe the toilet with the toilet paper before disposing of it in the toilet. The wiping action is missing from the current actions taken.
##############################
Task Summary:
Task Goal:
Wipe the toilet with toilet paper. Then throw it into the toilet.
Action History:
['walk_executor(toilet_302)', 'walk_executor(bathroom_counter_306)', 'walk_executor(toilet_302)', 'walk_executor(toilet_paper_2118)', 'grab_executor(toilet_paper_2118)', 'walk_executor(toilet_302)', 'open_executor(toilet_302)', 'putin_executor(toilet_paper_2118, toilet_302)', 'walk_executor(toilet_302)', 'walk_executor(toilet_paper_2118)', 'grab_executor(toilet_paper_2118)', 'putin_executor(toilet_paper_2118, toilet_302)', 'walk_executor(toilet_paper_2118)', 'grab_executor(toilet_paper_2118)', 'walk_executor(toilet_302)', 'putin_executor(toilet_paper_2118, toilet_302)']
Time info:
Time consume: 119 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 148
goal generate times: 7
goal correct times: 0
action_num: 16

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
