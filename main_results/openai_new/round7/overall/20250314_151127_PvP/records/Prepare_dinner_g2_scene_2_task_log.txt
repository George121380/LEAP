From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and the onion.', '2. Place the chicken and the onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_132(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_soap_2037_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior clean_items(chicken:item, onion:item):
    body:
        if dirty(chicken):
            wash(chicken)
        if dirty(onion):
            wash(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        clean_items(chicken, onion)
        # Clean chicken and onion if they are dirty
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_kitchen_counter_132(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_onion_2026_around_kitchen_counter_132(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_towel_2083_around_bathroom_counter_306(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior clean_items(item1: item, item2: item, water_source: item):
    body:
        if not clean(item1):
            if not inhand(item1):
                grab(item1)
            if not has_water(item1):
                get_water(item1)
            wash(item1)

        if not clean(item2):
            if not inhand(item2):
                grab(item2)
            if not has_water(item2):
                get_water(item2)
            wash(item2)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink for water source
        
        clean_items(chicken, onion, sink)
        # Clean the chicken and onion using the water source
#goal_representation_end

##############################
From agent.py->reset_goal
behavior clean_items(item1: item, item2: item, water_source: item):
    body:
        if not clean(item1):
            if not inhand(item1):
                grab(item1)
            if not has_water(item1):
                get_water(item1)
            wash(item1)

        if not clean(item2):
            if not inhand(item2):
                grab(item2)
            if not has_water(item2):
                get_water(item2)
            wash(item2)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink for water source
        
        clean_items(chicken, onion, sink)
        # Clean the chicken and onion using the water source
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_chicken_2050, kitchen_counter_132)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(faucet_308)switchoff_executor(faucet_308)switchon_executor(faucet_308)wash_executor(food_chicken_2050)switchoff_executor(faucet_308)walk_executor(kitchen_counter_132)exp(food_onion_2026, kitchen_counter_132)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(faucet_134)walk_executor(kitchen_counter_132)put_executor(food_chicken_2050, kitchen_counter_132)switchoff_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_onion_2026)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_chicken_2050, kitchen_counter_132)
Fail to find food_chicken_2050 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(faucet_308)switchoff_executor(faucet_308)switchon_executor(faucet_308)wash_executor(food_chicken_2050)switchoff_executor(faucet_308)walk_executor(cupboard_130)exp(food_onion_2026, cupboard_130)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(faucet_134)walk_executor(kitchen_counter_132)put_executor(food_chicken_2050, kitchen_counter_132)switchoff_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_onion_2026)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_onion_2026, cupboard_130)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(faucet_134)switchoff_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_onion_2026)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_onion_2026, cupboard_130)
Fail to find food_onion_2026 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_onion_2026, cupboard_131)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(faucet_134)switchoff_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_onion_2026)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_onion_2026, cupboard_131)
Fail to find food_onion_2026 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)exp(food_onion_2026, oven_141)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(faucet_134)switchoff_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_onion_2026)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the oven_141. 
##############################
From agent.py
open_executor(oven_141)
Robot find: food_butter_2018, dough_2021, food_onion_2026, tray_142, Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
exp(food_onion_2026, oven_141)
Find food_onion_2026. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_dirty_and_in_right_area(item: item, area: item):
    # Function to check if the item is dirty and in the specific area
    return dirty(item) and inside(item, area)

behavior clean_item(item: item):
    body:
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen) and id[kitchen] == 132

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        if is_dirty_and_in_right_area(chicken, kitchen):
            walk_to(chicken)
            clean_item(chicken)

        if is_dirty_and_in_right_area(onion, kitchen):
            walk_to(onion)
            clean_item(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_chicken_on_counter_or_fridge():
    # Function to check if food_chicken_2050 is around kitchen_counter_132 or fridge_140
    symbol found_chicken_counter=exists o: item : (o == food_chicken_2050 and close(o, kitchen_counter_132))
    symbol found_chicken_fridge=exists o: item : (o == food_chicken_2050 and close(o, fridge_140))
    return found_chicken_counter or found_chicken_fridge

def is_food_onion_close_to_cupboard():
    # Function to check if food_onion_2026 is around cupboard_130 or cupboard_131
    symbol found_onion_cupboard=exists o: item : (o == food_onion_2026 and (close(o, cupboard_130) or close(o, cupboard_131)))
    return found_onion_cupboard

behavior verify_cleanliness_of_items(item:item):
    body:
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind kitchen_counter_132: item where:
            is_kitchen_counter(kitchen_counter_132)
        # Select kitchen_counter_132

        bind fridge_140: item where:
            is_fridge(fridge_140)
        # Select fridge_140

        bind cupboard_130: item where:
            is_cupboard(cupboard_130)
        # Select cupboard_130

        bind cupboard_131: item where:
            is_cupboard(cupboard_131)
        # Select cupboard_131

        bind oven_141: item where:
            is_oven(oven_141)
        # Select oven_141

        if is_food_chicken_on_counter_or_fridge():
            bind food_chicken_2050: item where:
                is_food_chicken(food_chicken_2050)
            walk_to(food_chicken_2050)
            verify_cleanliness_of_items(food_chicken_2050)

        if is_food_onion_close_to_cupboard():
            bind food_onion_2026: item where:
                is_food_onion(food_onion_2026)
            walk_to(food_onion_2026)
            verify_cleanliness_of_items(food_onion_2026)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2037_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item_and_obtain(y: item):
    body:
        if dirty(y):
            observe(y, "Check the state of the item, is it dirty")
            wash(y)
            # Wash the item if dirty

behavior clean_chicken_and_onion(chicken:item, onion:item):
    body:
        if dirty(chicken) or dirty(onion):
            observe(chicken, "Check if the chicken is dirty")
            clean_item_and_obtain(chicken)
            
            observe(onion, "Check if the onion is dirty")
            clean_item_and_obtain(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_chicken_and_onion(chicken, onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2038_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_clean(food:item):
    # Function to check if a food item is clean
    return clean(food)

def obtain_chicken()  item:
    bind chicken: item where:
        is_food_chicken(chicken)
    return chicken

def obtain_onion()  item:
    bind onion: item where:
        is_food_onion(onion)
    return onion

behavior clean_food(food:item):
    body:
        if not clean(food):
            wash(food)

behavior __goal__():
    body:
        bind chicken: item = obtain_chicken()
        bind onion: item = obtain_onion()

        if not is_food_clean(chicken):
            walk_to(chicken)
            clean_food(chicken)

        if not is_food_clean(onion):
            walk_to(onion)
            clean_food(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_clean_items(obj: item):
    # Function to check if an item (chicken or onion) is clean
    return is_clean(obj)

behavior clean_item(item: item):
    body:
        if dirty(item):
            walk_to(item)
            if not inhand(item):
                grab(item)
            wash(item)

behavior clean_chicken_and_onion(chicken: item, onion: item):
    body:
        if not has_clean_items(chicken):
            clean_item(chicken)
        if not has_clean_items(onion):
            clean_item(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select chicken_2050

        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2026
        # Select onion_2026

        clean_chicken_and_onion(chicken, onion)
        # Clean the chicken and onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_towel_2083_around_sink_133(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_soap_2038_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item: item):
    body:
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind to the chicken item
        
        bind onion: item where:
            is_food_onion(onion)
        # Bind to the onion item

        walk_to(chicken)
        # Move close to the chicken to clean it
        clean_item(chicken)
        # Wash the chicken if it is dirty

        walk_to(onion)
        # Move close to the onion to clean it
        clean_item(onion)
        # Wash the onion if it is dirty

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_item(item: item):
    body:
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind to the chicken item
        
        bind onion: item where:
            is_food_onion(onion)
        # Bind to the onion item

        walk_to(chicken)
        # Move close to the chicken to clean it
        clean_item(chicken)
        # Wash the chicken if it is dirty

        walk_to(onion)
        # Move close to the onion to clean it
        clean_item(onion)
        # Wash the onion if it is dirty

##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)walk_executor(food_onion_2026)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
walk_executor(food_onion_2026)
Robot find: Robot is close to the food_onion_2026. Robot is close to the oven_141. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to clean the chicken and onion by washing them.
##############################
From agent.py
Human Instruction: You need to clean the chicken and onion by washing them.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for food_chicken_2050 around kitchen_counter_132.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_chicken_2050 around fridge_140.
Action 7: Walk to cupboard_130.
Action 8: look for food_onion_2026 around cupboard_130.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for food_onion_2026 around cupboard_131.
Action 12: Walk to oven_141.
Action 13: Open oven_141.
Action 14: look for food_onion_2026 around oven_141.
Action 15: Walk to food_chicken_2050.
Action 16: Walk to food_onion_2026.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_towel_2083_around_sink_133(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_soap_2038_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_clean_chicken_onion():
    # Check if both chicken and onion are clean
    symbol clean_chicken = exists c: item : (is_food_chicken(c) and clean(c))
    symbol clean_onion = exists o: item : (is_food_onion(o) and clean(o))
    return clean_chicken and clean_onion

behavior clean_item(item: item):
    body:
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        if not has_clean_chicken_onion():
            walk_to(chicken)
            clean_item(chicken) # Clean the chicken
            walk_to(onion)
            clean_item(onion) # Clean the onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_soap_2038_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_known_location(chicken: item, onion: item):
    # Function to confirm if the locations of the chicken and onion are known
    return visited(chicken) and visited(onion)

behavior clean_items(item1: item, item2: item):
    body:
        if dirty(item1):
            wash(item1)
        if dirty(item2):
            wash(item2)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        if not has_known_location(chicken, onion):
            if not visited(chicken):
                observe(chicken, "Confirm the location of the chicken")
            if not visited(onion):
                observe(onion, "Confirm the location of the onion")

        walk_to(chicken)
        # Move to the location of the chicken
        clean_items(chicken, onion)
        # Clean both the chicken and the onion

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_known_location(chicken: item, onion: item):
    # Function to confirm if the locations of the chicken and onion are known
    return visited(chicken) and visited(onion)

behavior clean_items(item1: item, item2: item):
    body:
        if dirty(item1):
            wash(item1)
        if dirty(item2):
            wash(item2)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        if not has_known_location(chicken, onion):
            if not visited(chicken):
                observe(chicken, "Confirm the location of the chicken")
            if not visited(onion):
                observe(onion, "Confirm the location of the onion")

        walk_to(chicken)
        # Move to the location of the chicken
        clean_items(chicken, onion)
        # Clean both the chicken and the onion

##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)obs(food_chicken_2050, Confirm the location of the chicken)walk_executor(food_onion_2026)obs(food_onion_2026, Confirm the location of the onion)walk_executor(food_chicken_2050)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
obs(food_chicken_2050, Confirm the location of the chicken)
Get this information:  food_chicken_2050 is close to fridge_140. food_chicken_2050 is close to character_219. food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside fridge_140. food_chicken_2050 is CLEAN.
##############################
From agent.py
walk_executor(food_onion_2026)
Robot find: Robot is close to the food_onion_2026. Robot is close to the oven_141. 
##############################
From agent.py
obs(food_onion_2026, Confirm the location of the onion)
Get this information:  food_onion_2026 is close to oven_141. food_onion_2026 is close to character_219. food_onion_2026 is inside dining_room_1. food_onion_2026 is inside oven_141. food_onion_2026 is CLEAN.
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_soap_2038_around_faucet_134(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==134
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(soap,faucet_instance)
        else:
            exp(soap,faucet_instance)
    eff:
        unknown[soap]=False
        close[soap,faucet_instance]=True
        close[faucet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_and_onion_in_oven(chicken: item, onion: item, oven: item):
    body:
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_chicken_and_onion_in_oven(chicken: item, onion: item, oven: item):
    body:
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2050)walk_executor(oven_141)putin_executor(food_chicken_2050, oven_141)
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. 
##############################
From agent.py
putin_executor(food_chicken_2050, oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is close food_chicken_2050. food_chicken_2050 is close oven_141. food_chicken_2050 is inside oven_141. food_chicken_2050 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the onion into the oven. Currently, only the chicken has been placed inside the oven.
##############################
From agent.py
Human Instruction: You need to put the onion into the oven. Currently, only the chicken has been placed inside the oven.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for food_chicken_2050 around kitchen_counter_132.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_chicken_2050 around fridge_140.
Action 7: Walk to cupboard_130.
Action 8: look for food_onion_2026 around cupboard_130.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for food_onion_2026 around cupboard_131.
Action 12: Walk to oven_141.
Action 13: Open oven_141.
Action 14: look for food_onion_2026 around oven_141.
Action 15: Walk to food_chicken_2050.
Action 16: Walk to food_onion_2026.
Action 17: Walk to food_chicken_2050.
Action 18: Observe around food_chicken_2050 with the question of Confirm the location of the chicken.
Action 19: Walk to food_onion_2026.
Action 20: Observe around food_onion_2026 with the question of Confirm the location of the onion.
Action 21: Walk to food_chicken_2050.
Action 22: Grab food_chicken_2050.
Action 23: Walk to oven_141.
Action 24: Put food_chicken_2050 into oven_141.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_food_in_oven(onion:item, oven:item):
    body:
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven_141)
        # Chicken is already placed inside the oven

        bind onion: item where:
            is_food_onion(onion)
        
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        
        put_food_in_oven(onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_and_onion_in_oven(oven: item):
    # Function to check if the chicken and onion are both in the oven
    symbol has_chicken_and_onion = exists chicken: item : (is_food_chicken(chicken) and inside(chicken, oven)) and exists onion: item : (is_food_onion(onion) and inside(onion, oven))
    return has_chicken_and_onion

behavior put_onion_in_oven(onion: item, oven: item):
    body:
        if not inside(onion, oven):
            walk_to(onion)
            grab(onion)
            walk_to(oven)
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select oven_141
        
        if not has_chicken_and_onion_in_oven(oven):
            bind onion: item where:
                is_food_onion(onion) and not inside(onion, oven)
            # Select the onion not in oven
            put_onion_in_oven(onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_onion_in_oven(onion: item, oven: item):
    body:
        walk_to(onion)
        grab(onion)
        walk_to(oven)
        if open(oven):
            put_inside(onion, oven)
        else:
            opens(oven)
            put_inside(onion, oven)

behavior ensure_oven_is_on(oven: item):
    body:
        if is_off(oven):
            switch_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken already inside the oven

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion that needs to be placed in the oven

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        if not inside(onion, oven):
            put_onion_in_oven(onion, oven)

        ensure_oven_is_on(oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_onion_in_oven(onion: item, oven: item):
    body:
        walk_to(onion)
        grab(onion)
        walk_to(oven)
        if open(oven):
            put_inside(onion, oven)
        else:
            opens(oven)
            put_inside(onion, oven)

behavior ensure_oven_is_on(oven: item):
    body:
        if is_off(oven):
            switch_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken already inside the oven

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion that needs to be placed in the oven

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        if not inside(onion, oven):
            put_onion_in_oven(onion, oven)

        ensure_oven_is_on(oven)

##############################
From agent.py-> find a plan in act()
close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
close_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is closed. 
##############################
From agent.py
switchon_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the onion into the oven. Currently, only the chicken has been placed inside the oven.
##############################
From agent.py
Human Instruction: You need to put the onion into the oven. Currently, only the chicken has been placed inside the oven.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for food_chicken_2050 around kitchen_counter_132.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_chicken_2050 around fridge_140.
Action 7: Walk to cupboard_130.
Action 8: look for food_onion_2026 around cupboard_130.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for food_onion_2026 around cupboard_131.
Action 12: Walk to oven_141.
Action 13: Open oven_141.
Action 14: look for food_onion_2026 around oven_141.
Action 15: Walk to food_chicken_2050.
Action 16: Walk to food_onion_2026.
Action 17: Walk to food_chicken_2050.
Action 18: Observe around food_chicken_2050 with the question of Confirm the location of the chicken.
Action 19: Walk to food_onion_2026.
Action 20: Observe around food_onion_2026 with the question of Confirm the location of the onion.
Action 21: Walk to food_chicken_2050.
Action 22: Grab food_chicken_2050.
Action 23: Walk to oven_141.
Action 24: Put food_chicken_2050 into oven_141.
Action 25: Close oven_141.
Action 26: Switch on oven_141.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_onion_in_oven(onion: item, oven: item):
    body:
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven) and id[oven]==141
        # Select the oven with ID 141

        put_onion_in_oven(onion, oven)
        # Put the onion in the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
def insert_onion_into_oven_if_absent(onion:item, oven:item):
    if not inside(onion, oven):
        put_inside(onion, oven)

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        insert_onion_into_oven_if_absent(onion, oven)
        # Insert the onion into the oven if it hasnt been placed yet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_bowl_2097_around_wallshelf_190(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior put_onion_in_oven(onion:item, oven:item):
    body:
        if not inside(onion, oven):
            put_inside(onion, oven)
            # Place the onion inside the oven

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        if not inside(onion, oven):
            walk_to(onion)
            # Move to the onion

            grab(onion)
            # Grab the onion

            walk_to(oven)
            # Move to the oven

            put_onion_in_oven(onion, oven)
        # Ensure the onion is placed inside the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_onion_in_oven(onion:item, oven:item):
    body:
        # Place the onion in the oven
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior ensure_oven_on(oven:item):
    body:
        if is_off(oven):
            switch_on(oven) # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken already in the oven

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion to put in the oven

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        # Since the chicken is already in the oven, focus on the onion
        put_onion_in_oven(onion, oven)
        
        # Ensure the oven is switched on
        ensure_oven_on(oven)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_onion_in_oven(onion:item, oven:item):
    body:
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_onion_in_oven(onion, oven)
        # Place the onion in the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior place_onion_in_oven(onion: item, oven: item):
    body:
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven_141)
        # Select the chicken already in the oven
        
        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2026
        # Select the onion with ID 2026

        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141

        walk_to(onion)
        grab(onion)
        
        walk_to(oven)
        opens(oven)
        
        place_onion_in_oven(onion, oven)
        
        closes(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the chicken and onion in the oven to roast." ?
Answer: Put the chicken and onion in the oven. Then turn on the oven.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the chicken and onion in the oven, then turn on the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_food_in_oven(chicken: item, onion: item, oven: item):
    body:
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior turn_on_oven(oven: item):
    body:
        if is_off(oven):
            switch_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_food_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_chicken_and_onion_in_oven(chicken: item, onion: item, oven: item):
    body:
        if not inside(chicken, oven):
            grab(chicken)
            put_inside(chicken, oven)

        if not inside(onion, oven):
            grab(onion)
            put_inside(onion, oven)

behavior turn_on_oven(oven: item):
    body:
        if is_off(oven):
            switch_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_chicken_and_onion_in_oven(chicken, onion, oven)
        # Put the chicken and onion in the oven

        turn_on_oven(oven)
        # Turn on the oven
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior place_food_in_oven(chicken:item, onion:item, oven:item):
    body:
        if not inhand(chicken):
            grab(chicken)
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inhand(onion):
            grab(onion)
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior ensure_oven_is_on(oven:item):
    body:
        if is_off(oven) and not open(oven):
            walk_to(oven)
            switch_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind oven: item where:
            is_oven(oven)
        # Select the oven item

        walk_to(oven)
        place_food_in_oven(chicken, onion, oven)
        ensure_oven_is_on(oven)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_food_in_oven(chicken:item, onion:item, oven:item):
    body:
        if not inhand(chicken):
            grab(chicken)
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inhand(onion):
            grab(onion)
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior ensure_oven_is_on(oven:item):
    body:
        if is_off(oven) and not open(oven):
            walk_to(oven)
            switch_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind oven: item where:
            is_oven(oven)
        # Select the oven item

        walk_to(oven)
        place_food_in_oven(chicken, onion, oven)
        ensure_oven_is_on(oven)
##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)switchoff_executor(oven_141)open_executor(oven_141)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)putin_executor(food_chicken_2050, oven_141)walk_executor(food_onion_2026)grab_executor(food_onion_2026)putin_executor(food_onion_2026, oven_141)
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the oven_141. 
##############################
From agent.py
switchoff_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned off. 
##############################
From agent.py
open_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
putin_executor(food_chicken_2050, oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. food_chicken_2050 is close oven_141. food_chicken_2050 is inside oven_141. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2026)
Robot find: Robot is close to the oven_141. Robot is close to the food_onion_2026. 
##############################
From agent.py
grab_executor(food_onion_2026)
Robot find: Robot is close to the oven_141. Robot is close to the food_onion_2026. Grabbing food_onion_2026 by right hand. 
##############################
From agent.py
putin_executor(food_onion_2026, oven_141)
Robot find: Robot is close to the oven_141. Robot is close to the food_onion_2026. food_onion_2026 is close oven_141. food_onion_2026 is inside oven_141. food_onion_2026 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(kitchen_counter_132)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(oven_141)', 'open_executor(oven_141)', 'walk_executor(food_chicken_2050)', 'walk_executor(food_onion_2026)', 'walk_executor(food_chicken_2050)', 'walk_executor(food_onion_2026)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(oven_141)', 'putin_executor(food_chicken_2050, oven_141)', 'close_executor(oven_141)', 'switchon_executor(oven_141)', 'walk_executor(oven_141)', 'switchoff_executor(oven_141)', 'open_executor(oven_141)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'putin_executor(food_chicken_2050, oven_141)', 'walk_executor(food_onion_2026)', 'grab_executor(food_onion_2026)', 'putin_executor(food_onion_2026, oven_141)']
Time info:
Time consume: 296 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 136
goal generate times: 23
goal correct times: 0
action_num: 28

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
