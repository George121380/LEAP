From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt and the skirt to be ironed.', '2. Iron the shirt and the skirt.', '3. Place the ironed shirt and skirt on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2116_around_basket_for_clothes_2040(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_clothes_item_shirt_or_skirt(x: item):
    # Function to check if an item is a shirt or a skirt
    return is_clothes_shirt(x) or is_clothes_skirt(x)

behavior find_clothes_for_ironing():
    body:
        foreach item: item:
            if is_clothes_item_shirt_or_skirt(item) and not visited(item):
                observe(item, "Check if this is the shirt or skirt to be ironed")

behavior __goal__():
    body:
        find_clothes_for_ironing()
        # Locate the shirt and the skirt for ironing

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_clothes_item_shirt_or_skirt(x: item):
    # Function to check if an item is a shirt or a skirt
    return is_clothes_shirt(x) or is_clothes_skirt(x)

behavior find_clothes_for_ironing():
    body:
        foreach item: item:
            if is_clothes_item_shirt_or_skirt(item) and not visited(item):
                observe(item, "Check if this is the shirt or skirt to be ironed")

behavior __goal__():
    body:
        find_clothes_for_ironing()
        # Locate the shirt and the skirt for ironing

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2040)exp(clothes_shirt_2114, basket_for_clothes_2040)walk_executor(clothes_shirt_2114)obs(clothes_shirt_2114, Check if this is the shirt or skirt to be ironed)walk_executor(basket_for_clothes_2040)exp(clothes_skirt_2116, basket_for_clothes_2040)walk_executor(clothes_skirt_2116)obs(clothes_skirt_2116, Check if this is the shirt or skirt to be ironed)
##############################
From agent.py
walk_executor(basket_for_clothes_2040)
Robot find: clothes_pants_2113, clothes_shirt_2114, clothes_socks_2115, clothes_skirt_2116, Robot is close to the clothes_pants_2113. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_socks_2115. Robot is close to the clothes_skirt_2116. Robot is close to the basket_for_clothes_2040. 
##############################
From agent.py
exp(clothes_shirt_2114, basket_for_clothes_2040)
Find clothes_shirt_2114. 
##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2114, Check if this is the shirt or skirt to be ironed)obs(clothes_skirt_2116, Check if this is the shirt or skirt to be ironed)
##############################
From agent.py
obs(clothes_shirt_2114, Check if this is the shirt or skirt to be ironed)
Get this information:  clothes_shirt_2114 is close to basket_for_clothes_2040. clothes_shirt_2114 is close to character_219. clothes_shirt_2114 is inside basket_for_clothes_2040. clothes_shirt_2114 is inside bathroom_265. clothes_shirt_2114 is DIRTY.
##############################
From agent.py
obs(clothes_skirt_2116, Check if this is the shirt or skirt to be ironed)
Get this information:  clothes_skirt_2116 is inside basket_for_clothes_2040. clothes_skirt_2116 is inside bathroom_265. clothes_skirt_2116 is close to basket_for_clothes_2040. clothes_skirt_2116 is close to character_219. clothes_skirt_2116 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_iron(iron: item):
    body:
        if not is_on(iron) and has_switch(iron):
            switch_on(iron)
            # Turn on the iron if its off and has a switch

behavior iron_clothes(clothes: item, ironing_board: item):
    body:
        if not on(clothes, ironing_board):
            if not inhand(clothes):
                grab(clothes)
            put_on(clothes, ironing_board)
        # Iron the clothes after placing them on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select shirt from items

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select skirt from items

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        walk_to(ironing_board)
        # Approach the ironing board

        turn_on_iron(iron)
        # Ensure that the iron is turned on

        iron_clothes(shirt, ironing_board)
        # Iron the shirt

        iron_clothes(skirt, ironing_board)
        # Iron the skirt
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior turn_on_iron(iron: item):
    body:
        if not is_on(iron) and has_switch(iron):
            switch_on(iron)
            # Turn on the iron if its off and has a switch

behavior iron_clothes(clothes: item, ironing_board: item):
    body:
        if not on(clothes, ironing_board):
            if not inhand(clothes):
                grab(clothes)
            put_on(clothes, ironing_board)
        # Iron the clothes after placing them on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select shirt from items

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select skirt from items

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        walk_to(ironing_board)
        # Approach the ironing board

        turn_on_iron(iron)
        # Ensure that the iron is turned on

        iron_clothes(shirt, ironing_board)
        # Iron the shirt

        iron_clothes(skirt, ironing_board)
        # Iron the skirt
##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2099)exp(iron_2117, ironing_board_2099)walk_executor(iron_2117)plugin_executor(iron_2117)switchon_executor(iron_2117)walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(ironing_board_2099)put_executor(clothes_shirt_2114, ironing_board_2099)walk_executor(clothes_skirt_2116)grab_executor(clothes_skirt_2116)walk_executor(ironing_board_2099)put_executor(clothes_skirt_2116, ironing_board_2099)
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: iron_2117, Robot is close to the ironing_board_2099. 
##############################
From agent.py
exp(iron_2117, ironing_board_2099)
Find iron_2117. 
##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2099)plugin_executor(iron_2117)switchon_executor(iron_2117)walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(ironing_board_2099)put_executor(clothes_shirt_2114, ironing_board_2099)walk_executor(clothes_skirt_2116)grab_executor(clothes_skirt_2116)walk_executor(ironing_board_2099)put_executor(clothes_skirt_2116, ironing_board_2099)
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: Robot is close to the ironing_board_2099. 
##############################
From agent.py
plugin_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. iron_2117 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. iron_2117 is turned on. 
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the basket_for_clothes_2040. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the basket_for_clothes_2040. Robot is close to the clothes_shirt_2114. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. 
##############################
From agent.py
put_executor(clothes_shirt_2114, ironing_board_2099)
Robot find: Robot is close to the clothes_shirt_2114. Robot is close to the ironing_board_2099. ironing_board_2099 is close clothes_shirt_2114. clothes_shirt_2114 is close ironing_board_2099. clothes_shirt_2114 is on ironing_board_2099. clothes_shirt_2114 released by right hand. 
##############################
From agent.py
walk_executor(clothes_skirt_2116)
Robot find: Robot is close to the basket_for_clothes_2040. Robot is close to the clothes_skirt_2116. 
##############################
From agent.py
grab_executor(clothes_skirt_2116)
Robot find: Robot is close to the basket_for_clothes_2040. Robot is close to the clothes_skirt_2116. Grabbing clothes_skirt_2116 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the ironing_board_2099. 
##############################
From agent.py
put_executor(clothes_skirt_2116, ironing_board_2099)
Robot find: Robot is close to the clothes_skirt_2116. Robot is close to the ironing_board_2099. ironing_board_2099 is close clothes_skirt_2116. clothes_skirt_2116 is close ironing_board_2099. clothes_skirt_2116 is on ironing_board_2099. clothes_skirt_2116 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The shirt and the skirt are placed on the ironing board but have not been ironed. You need to iron both the shirt and the skirt using the iron. Once this is done, the sub-task will be complete.
##############################
From agent.py
Human Instruction: The shirt and the skirt are placed on the ironing board but have not been ironed. You need to iron both the shirt and the skirt using the iron. Once this is done, the sub-task will be complete.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Observe around clothes_shirt_2114 with the question of Check if this is the shirt or skirt to be ironed.
Action 4: Observe around clothes_skirt_2116 with the question of Check if this is the shirt or skirt to be ironed.
Action 5: Walk to ironing_board_2099.
Action 6: look for iron_2117 around ironing_board_2099.
Action 7: Walk to ironing_board_2099.
Action 8: Plug in iron_2117.
Action 9: Switch on iron_2117.
Action 10: Walk to clothes_shirt_2114.
Action 11: Grab clothes_shirt_2114.
Action 12: Walk to ironing_board_2099.
Action 13: Put clothes_shirt_2114 on ironing_board_2099.
Action 14: Walk to clothes_skirt_2116.
Action 15: Grab clothes_skirt_2116.
Action 16: Walk to ironing_board_2099.
Action 17: Put clothes_skirt_2116 on ironing_board_2099.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_after_shave_2029_around_bathroom_counter_306(after_shave:item):
    goal: not unknown(after_shave)
    body:
        assert is_after_shave(after_shave)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(after_shave,bathroom_counter_instance)
        else:
            exp(after_shave,bathroom_counter_instance)
    eff:
        unknown[after_shave]=False
        close[after_shave,bathroom_counter_instance]=True
        close[bathroom_counter_instance,after_shave]=True
    

behavior find_cleaning_solution_2098_around_kitchen_counter_132(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

behavior find_towel_2083_around_bathroom_counter_306(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior retrieve_and_iron_clothes(clothes_shirt:item, clothes_skirt:item, ironing_board:item, iron:item):
    body:
        if not inhand(clothes_shirt):
            walk_to(clothes_shirt)
            grab(clothes_shirt)
        if not on(clothes_shirt, ironing_board):
            put_on(clothes_shirt, ironing_board)

        if not inhand(clothes_skirt):
            walk_to(clothes_skirt)
            grab(clothes_skirt)
        if not on(clothes_skirt, ironing_board):
            put_on(clothes_skirt, ironing_board)

        if not plugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)
        
        # Assuming ironing action takes place here

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2114
        # Select clothes_shirt_2114

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and id[clothes_skirt] == 2116
        # Select clothes_skirt_2116

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        # Select ironing_board_2099

        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select iron_2117

        retrieve_and_iron_clothes(clothes_shirt, clothes_skirt, ironing_board, iron)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior retrieve_and_iron_clothes(clothes_shirt:item, clothes_skirt:item, ironing_board:item, iron:item):
    body:
        if not inhand(clothes_shirt):
            walk_to(clothes_shirt)
            grab(clothes_shirt)
        if not on(clothes_shirt, ironing_board):
            put_on(clothes_shirt, ironing_board)

        if not inhand(clothes_skirt):
            walk_to(clothes_skirt)
            grab(clothes_skirt)
        if not on(clothes_skirt, ironing_board):
            put_on(clothes_skirt, ironing_board)

        if not plugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)
        
        # Assuming ironing action takes place here

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2114
        # Select clothes_shirt_2114

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and id[clothes_skirt] == 2116
        # Select clothes_skirt_2116

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        # Select ironing_board_2099

        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select iron_2117

        retrieve_and_iron_clothes(clothes_shirt, clothes_skirt, ironing_board, iron)
##############################
From agent.py-> find a plan in act()
walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(ironing_board_2099)put_executor(clothes_shirt_2114, ironing_board_2099)walk_executor(clothes_skirt_2116)grab_executor(clothes_skirt_2116)walk_executor(ironing_board_2099)put_executor(clothes_skirt_2116, ironing_board_2099)
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. Grabbing clothes_shirt_2114 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
put_executor(clothes_shirt_2114, ironing_board_2099)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_shirt_2114. clothes_shirt_2114 is close ironing_board_2099. clothes_shirt_2114 is on ironing_board_2099. clothes_shirt_2114 released by right hand. 
##############################
From agent.py
walk_executor(clothes_skirt_2116)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. 
##############################
From agent.py
grab_executor(clothes_skirt_2116)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. Grabbing clothes_skirt_2116 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2099)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. 
##############################
From agent.py
put_executor(clothes_skirt_2116, ironing_board_2099)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. clothes_skirt_2116 is close ironing_board_2099. clothes_skirt_2116 is on ironing_board_2099. clothes_skirt_2116 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to iron the shirt and the skirt, as they have only been placed on the ironing board but not ironed yet.
##############################
From agent.py
Human Instruction: You need to iron the shirt and the skirt, as they have only been placed on the ironing board but not ironed yet.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Observe around clothes_shirt_2114 with the question of Check if this is the shirt or skirt to be ironed.
Action 4: Observe around clothes_skirt_2116 with the question of Check if this is the shirt or skirt to be ironed.
Action 5: Walk to ironing_board_2099.
Action 6: look for iron_2117 around ironing_board_2099.
Action 7: Walk to ironing_board_2099.
Action 8: Plug in iron_2117.
Action 9: Switch on iron_2117.
Action 10: Walk to clothes_shirt_2114.
Action 11: Grab clothes_shirt_2114.
Action 12: Walk to ironing_board_2099.
Action 13: Put clothes_shirt_2114 on ironing_board_2099.
Action 14: Walk to clothes_skirt_2116.
Action 15: Grab clothes_skirt_2116.
Action 16: Walk to ironing_board_2099.
Action 17: Put clothes_skirt_2116 on ironing_board_2099.
Action 18: Walk to clothes_shirt_2114.
Action 19: Grab clothes_shirt_2114.
Action 20: Walk to ironing_board_2099.
Action 21: Put clothes_shirt_2114 on ironing_board_2099.
Action 22: Walk to clothes_skirt_2116.
Action 23: Grab clothes_skirt_2116.
Action 24: Walk to ironing_board_2099.
Action 25: Put clothes_skirt_2116 on ironing_board_2099.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2076_around_washing_machine_2041(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_hat,washing_machine_instance)
        else:
            exp(clothes_hat,washing_machine_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,washing_machine_instance]=True
        close[washing_machine_instance,clothes_hat]=True
    

behavior find_towel_2083_around_bathroom_counter_306(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

behavior find_clothes_dress_2075_around_bed_264(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_dress,bed_instance)
        else:
            exp(clothes_dress,bed_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,bed_instance]=True
        close[bed_instance,clothes_dress]=True
    

behavior find_pajamas_2039_around_bed_264(pajamas:item):
    goal: not unknown(pajamas)
    body:
        assert is_pajamas(pajamas)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pajamas,bed_instance)
        else:
            exp(pajamas,bed_instance)
    eff:
        unknown[pajamas]=False
        close[pajamas,bed_instance]=True
        close[bed_instance,pajamas]=True
    

#exp_behavior_end

#goal_representation
 
def has_ironed_items(clothes:item, iron:item, ironing_board:item):
    # Function to check if a shirt and skirt have been ironed on the ironing board
    return on(clothes, ironing_board)

behavior iron_clothes(clothes:item, iron:item, ironing_board:item):
    body:
        if not inhand(iron):
            grab(iron)
        if close_char(char, clothes):
            if not has_ironed_items(clothes, iron, ironing_board):
                put_on(clothes, ironing_board)
                # Assume ironing succeeds once placed on the ironing board
                # Note: Its assumed a real ironing operation takes place here

behavior ensure_iron_is_on(iron:item):
    body:
        if not plugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        # Select clothes_shirt_2114

        bind skirt: item where:
            is_clothes_skirt(skirt) and id[skirt] == 2116
        # Select clothes_skirt_2116

        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select iron_2117

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        # Select ironing_board_2099

        ensure_iron_is_on(iron)
        # Ensure the iron is on before starting to iron

        iron_clothes(shirt, iron, ironing_board)
        # Iron the shirt

        iron_clothes(skirt, iron, ironing_board)
        # Iron the skirt

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_ironed_items(clothes:item, iron:item, ironing_board:item):
    # Function to check if a shirt and skirt have been ironed on the ironing board
    return on(clothes, ironing_board)

behavior iron_clothes(clothes:item, iron:item, ironing_board:item):
    body:
        if not inhand(iron):
            grab(iron)
        if close_char(char, clothes):
            if not has_ironed_items(clothes, iron, ironing_board):
                put_on(clothes, ironing_board)
                # Assume ironing succeeds once placed on the ironing board
                # Note: Its assumed a real ironing operation takes place here

behavior ensure_iron_is_on(iron:item):
    body:
        if not plugged(iron):
            plugin(iron)
        if is_off(iron):
            switch_on(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        # Select clothes_shirt_2114

        bind skirt: item where:
            is_clothes_skirt(skirt) and id[skirt] == 2116
        # Select clothes_skirt_2116

        bind iron: item where:
            is_iron(iron) and id[iron] == 2117
        # Select iron_2117

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2099
        # Select ironing_board_2099

        ensure_iron_is_on(iron)
        # Ensure the iron is on before starting to iron

        iron_clothes(shirt, iron, ironing_board)
        # Iron the shirt

        iron_clothes(skirt, iron, ironing_board)
        # Iron the skirt

##############################
From agent.py-> find a plan in act()
walk_executor(iron_2117)grab_executor(iron_2117)
##############################
From agent.py
walk_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. 
##############################
From agent.py
grab_executor(iron_2117)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Grabbing iron_2117 by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The shirt and skirt have been placed on the ironing board, and the iron is ready, but the actual ironing action has not taken place. You need to simulate the action of ironing by assuming the clothing is ironed once placed on the board with the iron on. Proceed to simulate the completion of ironing the shirt and skirt.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2119_around_curtain_198(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==198
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(chair,curtain_instance)
        else:
            exp(chair,curtain_instance)
    eff:
        unknown[chair]=False
        close[chair,curtain_instance]=True
        close[curtain_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_ironed_clothes_on_bed(clothes:item, bed:item):
    body:
        if not inhand(clothes):
            grab(clothes)
        if not on(clothes, bed):
            put_on(clothes, bed)

behavior __goal__():
    body:
        bind bed: item where:
            is_bed(bed)
        # Select a bed

        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        # Select the ironed shirt

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)
        # Select the ironed skirt

        place_ironed_clothes_on_bed(clothes_shirt, bed)
        place_ironed_clothes_on_bed(clothes_skirt, bed)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_ironed_clothes_on_bed(clothes:item, bed:item):
    body:
        if not inhand(clothes):
            grab(clothes)
        if not on(clothes, bed):
            put_on(clothes, bed)

behavior __goal__():
    body:
        bind bed: item where:
            is_bed(bed)
        # Select a bed

        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        # Select the ironed shirt

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt)
        # Select the ironed skirt

        place_ironed_clothes_on_bed(clothes_shirt, bed)
        place_ironed_clothes_on_bed(clothes_skirt, bed)

##############################
From agent.py-> find a plan in act()
walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(bed_264)put_executor(clothes_shirt_2114, bed_264)walk_executor(clothes_skirt_2116)grab_executor(clothes_skirt_2116)walk_executor(bed_264)put_executor(clothes_skirt_2116, bed_264)
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the ironing_board_2099. Robot is close to the iron_2117. Robot is close to the clothes_shirt_2114. Grabbing clothes_shirt_2114 by left hand. 
##############################
From agent.py
walk_executor(bed_264)
Robot find: clothes_scarf_2079, pillow_239, clothes_dress_2075, pillow_240, clothes_jacket_2078, mat_237, drawing_238, Robot is close to the iron_2117. Robot is close to the clothes_shirt_2114. Robot is close to the bed_264. 
##############################
From agent.py
put_executor(clothes_shirt_2114, bed_264)
Robot find: Robot is close to the iron_2117. Robot is close to the clothes_shirt_2114. Robot is close to the bed_264. bed_264 is close clothes_shirt_2114. clothes_shirt_2114 is close bed_264. clothes_shirt_2114 is on bed_264. clothes_shirt_2114 released by left hand. 
##############################
From agent.py
walk_executor(clothes_skirt_2116)
Robot find: Robot is close to the iron_2117. Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. 
##############################
From agent.py
grab_executor(clothes_skirt_2116)
Robot find: Robot is close to the iron_2117. Robot is close to the ironing_board_2099. Robot is close to the clothes_skirt_2116. Grabbing clothes_skirt_2116 by left hand. 
##############################
From agent.py
walk_executor(bed_264)
Robot find: Robot is close to the iron_2117. Robot is close to the clothes_skirt_2116. Robot is close to the bed_264. 
##############################
From agent.py
put_executor(clothes_skirt_2116, bed_264)
Robot find: Robot is close to the iron_2117. Robot is close to the clothes_skirt_2116. Robot is close to the bed_264. clothes_skirt_2116 is close bed_264. bed_264 is close clothes_skirt_2116. clothes_skirt_2116 is on bed_264. clothes_skirt_2116 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to iron the shirt and skirt before placing them on the bed.
##############################
From agent.py
Human Instruction: You need to iron the shirt and skirt before placing them on the bed.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2040.
Action 2: look for clothes_shirt_2114 around basket_for_clothes_2040.
Action 3: Observe around clothes_shirt_2114 with the question of Check if this is the shirt or skirt to be ironed.
Action 4: Observe around clothes_skirt_2116 with the question of Check if this is the shirt or skirt to be ironed.
Action 5: Walk to ironing_board_2099.
Action 6: look for iron_2117 around ironing_board_2099.
Action 7: Walk to ironing_board_2099.
Action 8: Plug in iron_2117.
Action 9: Switch on iron_2117.
Action 10: Walk to clothes_shirt_2114.
Action 11: Grab clothes_shirt_2114.
Action 12: Walk to ironing_board_2099.
Action 13: Put clothes_shirt_2114 on ironing_board_2099.
Action 14: Walk to clothes_skirt_2116.
Action 15: Grab clothes_skirt_2116.
Action 16: Walk to ironing_board_2099.
Action 17: Put clothes_skirt_2116 on ironing_board_2099.
Action 18: Walk to clothes_shirt_2114.
Action 19: Grab clothes_shirt_2114.
Action 20: Walk to ironing_board_2099.
Action 21: Put clothes_shirt_2114 on ironing_board_2099.
Action 22: Walk to clothes_skirt_2116.
Action 23: Grab clothes_skirt_2116.
Action 24: Walk to ironing_board_2099.
Action 25: Put clothes_skirt_2116 on ironing_board_2099.
Action 26: Walk to iron_2117.
Action 27: Grab iron_2117.
Action 28: Walk to clothes_shirt_2114.
Action 29: Grab clothes_shirt_2114.
Action 30: Walk to bed_264.
Action 31: Put clothes_shirt_2114 on bed_264.
Action 32: Walk to clothes_skirt_2116.
Action 33: Grab clothes_skirt_2116.
Action 34: Walk to bed_264.
Action 35: Put clothes_skirt_2116 on bed_264.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def are_clothes_ironed(shirt:item, skirt:item):
    # Function to check if the clothes are ironed
    symbol shirt_ironed=exists x: item : (is_clothes_shirt(x) and clean(x))
    symbol skirt_ironed=exists y: item : (is_clothes_skirt(y) and clean(y))
    return shirt_ironed and skirt_ironed

behavior place_on_bed(cloth:item, bed:item):
    body:
        if inhand(cloth):
            put_on(cloth, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt
        
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt
        
        bind bed: item where:
            is_bed(bed)
        # Select the bed
        
        if are_clothes_ironed(shirt, skirt):
            walk_to(shirt)
            grab(shirt)
            walk_to(bed)
            place_on_bed(shirt, bed)
        
            walk_to(skirt)
            grab(skirt)
            walk_to(bed)
            place_on_bed(skirt, bed)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2076_around_clothes_dress_2075(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind clothes_dress_instance:item where:
            is_clothes_dress(clothes_dress_instance) and id[clothes_dress_instance]==2075
        achieve close_char(char,clothes_dress_instance)
        if can_open(clothes_dress_instance):
            achieve_once open(clothes_dress_instance)
            exp(clothes_hat,clothes_dress_instance)
        else:
            exp(clothes_hat,clothes_dress_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,clothes_dress_instance]=True
        close[clothes_dress_instance,clothes_hat]=True
    

behavior find_clothes_underwear_2022_around_washing_machine_2041(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_underwear,washing_machine_instance)
        else:
            exp(clothes_underwear,washing_machine_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,washing_machine_instance]=True
        close[washing_machine_instance,clothes_underwear]=True
    

behavior find_towel_2083_around_shower_303(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==303
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_bed(items: list, bed: item):
    body:
        foreach item in items:
            if not inhand(item):
                grab(item)
            if not on(item, bed):
                put_on(item, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the ironed shirt

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the ironed skirt

        bind bed: item where:
            is_bed(bed)
        # Select the bed

        place_items_on_bed([shirt, skirt], bed)
        # Place the ironed shirt and skirt on the bed

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2076_around_washing_machine_2041(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_hat,washing_machine_instance)
        else:
            exp(clothes_hat,washing_machine_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,washing_machine_instance]=True
        close[washing_machine_instance,clothes_hat]=True
    

behavior find_clothes_underwear_2022_around_washing_machine_2041(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_underwear,washing_machine_instance)
        else:
            exp(clothes_underwear,washing_machine_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,washing_machine_instance]=True
        close[washing_machine_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_clothes_on_bed(clothes_shirt_2114:item, clothes_skirt_2116:item, bed:item):
    body:
        if not inhand(clothes_shirt_2114):
            grab(clothes_shirt_2114)
        if not on(clothes_shirt_2114, bed):
            put_on(clothes_shirt_2114, bed)
        if not inhand(clothes_skirt_2116):
            grab(clothes_skirt_2116)
        if not on(clothes_skirt_2116, bed):
            put_on(clothes_skirt_2116, bed)

behavior __goal__():
    body:
        bind clothes_shirt_2114: item where:
            is_clothes_shirt(clothes_shirt_2114) and clean(clothes_shirt_2114)
        # Grab the clean shirt

        bind clothes_skirt_2116: item where:
            is_clothes_skirt(clothes_skirt_2116) and clean(clothes_skirt_2116)
        # Grab the clean skirt
        
        bind bed: item where:
            is_bed(bed) and id[bed]==264
        # Find the bed
         
        place_clothes_on_bed(clothes_shirt_2114, clothes_skirt_2116, bed)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pajamas_2039_around_washing_machine_2041(pajamas:item):
    goal: not unknown(pajamas)
    body:
        assert is_pajamas(pajamas)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(pajamas,washing_machine_instance)
        else:
            exp(pajamas,washing_machine_instance)
    eff:
        unknown[pajamas]=False
        close[pajamas,washing_machine_instance]=True
        close[washing_machine_instance,pajamas]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_ironed_clothes_on_bed(clothes:item, bed:item):
    body:
        if not inhand(clothes):
            grab(clothes)
        if not on(clothes, bed):
            put_on(clothes, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Bind to the ironed shirt

        bind skirt: item where:
            is_clothes_skirt(skirt) and clean(skirt)
        # Bind to the ironed skirt

        bind bed: item where:
            is_bed(bed)
        # Bind to the bed

        place_ironed_clothes_on_bed(shirt, bed)
        place_ironed_clothes_on_bed(skirt, bed)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2076_around_clothes_dress_2075(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind clothes_dress_instance:item where:
            is_clothes_dress(clothes_dress_instance) and id[clothes_dress_instance]==2075
        achieve close_char(char,clothes_dress_instance)
        if can_open(clothes_dress_instance):
            achieve_once open(clothes_dress_instance)
            exp(clothes_hat,clothes_dress_instance)
        else:
            exp(clothes_hat,clothes_dress_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,clothes_dress_instance]=True
        close[clothes_dress_instance,clothes_hat]=True
    

behavior find_clothes_underwear_2022_around_washing_machine_2041(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_underwear,washing_machine_instance)
        else:
            exp(clothes_underwear,washing_machine_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,washing_machine_instance]=True
        close[washing_machine_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
def is_bed_surfaces(bed:item):
    # Check if the bed has a surface property
    return surfaces(bed)

behavior place_ironed_clothes_on_bed(clothes:item, bed:item):
    body:
        if not inhand(clothes):
            grab(clothes)
        if not on(clothes, bed):
            put_on(clothes, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Bind the ironed shirt

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Bind the ironed skirt

        bind bed: item where:
            is_bed(bed) and is_bed_surfaces(bed)
        # Bind the bed that can support items on its surface

        place_ironed_clothes_on_bed(shirt, bed)
        # Place the shirt on the bed

        place_ironed_clothes_on_bed(skirt, bed)
        # Place the skirt on the bed

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_bed_surfaces(bed:item):
    # Check if the bed has a surface property
    return surfaces(bed)

behavior place_ironed_clothes_on_bed(clothes:item, bed:item):
    body:
        if not inhand(clothes):
            grab(clothes)
        if not on(clothes, bed):
            put_on(clothes, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Bind the ironed shirt

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Bind the ironed skirt

        bind bed: item where:
            is_bed(bed) and is_bed_surfaces(bed)
        # Bind the bed that can support items on its surface

        place_ironed_clothes_on_bed(shirt, bed)
        # Place the shirt on the bed

        place_ironed_clothes_on_bed(skirt, bed)
        # Place the skirt on the bed

##############################
From agent.py-> find a plan in act()
walk_executor(clothes_shirt_2114)grab_executor(clothes_shirt_2114)walk_executor(bed_264)put_executor(clothes_shirt_2114, bed_264)grab_executor(clothes_skirt_2116)put_executor(clothes_skirt_2116, bed_264)
##############################
From agent.py
walk_executor(clothes_shirt_2114)
Robot find: Robot is close to the iron_2117. Robot is close to the bed_264. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
grab_executor(clothes_shirt_2114)
Robot find: Robot is close to the iron_2117. Robot is close to the bed_264. Robot is close to the clothes_shirt_2114. Grabbing clothes_shirt_2114 by left hand. 
##############################
From agent.py
walk_executor(bed_264)
Robot find: Robot is close to the iron_2117. Robot is close to the bed_264. Robot is close to the clothes_shirt_2114. 
##############################
From agent.py
put_executor(clothes_shirt_2114, bed_264)
Robot find: Robot is close to the iron_2117. Robot is close to the bed_264. Robot is close to the clothes_shirt_2114. clothes_shirt_2114 is close bed_264. clothes_shirt_2114 is on bed_264. clothes_shirt_2114 released by left hand. 
##############################
From agent.py
grab_executor(clothes_skirt_2116)
Robot find: Robot is close to the iron_2117. Robot is close to the bed_264. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_skirt_2116. Grabbing clothes_skirt_2116 by left hand. 
##############################
From agent.py
put_executor(clothes_skirt_2116, bed_264)
Robot find: Robot is close to the iron_2117. Robot is close to the bed_264. Robot is close to the clothes_shirt_2114. Robot is close to the clothes_skirt_2116. clothes_skirt_2116 is close bed_264. clothes_skirt_2116 is on bed_264. clothes_skirt_2116 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Iron the shirt and the skirt, and place them on the bed.
Action History:
['walk_executor(basket_for_clothes_2040)', 'walk_executor(ironing_board_2099)', 'walk_executor(ironing_board_2099)', 'plugin_executor(iron_2117)', 'switchon_executor(iron_2117)', 'walk_executor(clothes_shirt_2114)', 'grab_executor(clothes_shirt_2114)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_shirt_2114, ironing_board_2099)', 'walk_executor(clothes_skirt_2116)', 'grab_executor(clothes_skirt_2116)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_skirt_2116, ironing_board_2099)', 'walk_executor(clothes_shirt_2114)', 'grab_executor(clothes_shirt_2114)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_shirt_2114, ironing_board_2099)', 'walk_executor(clothes_skirt_2116)', 'grab_executor(clothes_skirt_2116)', 'walk_executor(ironing_board_2099)', 'put_executor(clothes_skirt_2116, ironing_board_2099)', 'walk_executor(iron_2117)', 'grab_executor(iron_2117)', 'walk_executor(clothes_shirt_2114)', 'grab_executor(clothes_shirt_2114)', 'walk_executor(bed_264)', 'put_executor(clothes_shirt_2114, bed_264)', 'walk_executor(clothes_skirt_2116)', 'grab_executor(clothes_skirt_2116)', 'walk_executor(bed_264)', 'put_executor(clothes_skirt_2116, bed_264)', 'walk_executor(clothes_shirt_2114)', 'grab_executor(clothes_shirt_2114)', 'walk_executor(bed_264)', 'put_executor(clothes_shirt_2114, bed_264)', 'grab_executor(clothes_skirt_2116)', 'put_executor(clothes_skirt_2116, bed_264)']
Time info:
Time consume: 270 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 112
goal generate times: 10
goal correct times: 0
action_num: 37

Task complete rate:
Keystate: k1 - Requires: 5 steps
Keystate: k2 - Requires: 5 steps
Keystate: k3 - Requires: 0 steps
Keystate: k4 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 2
##############################
