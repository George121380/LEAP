From agent.py
Reset goals: The sub-goals are: 
['1. Find milk and cereal.', '2. Pour milk into a cup and heat it.', '3. Add cereal to the heated milk in the cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2015_around_table_107(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_cereal,table_instance)
        else:
            exp(food_cereal,table_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,table_instance]=True
        close[table_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_or_cereal(item: item):
    # Function to check if an item is either milk or cereal
    return is_milk(item) or is_food_cereal(item)

behavior locate_milk_and_cereal(milk: item, cereal: item):
    body:
        if not visited(milk):
            observe(milk, "Find the milk item")
        if not visited(cereal):
            observe(cereal, "Find the cereal item")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        locate_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_milk_or_cereal(item: item):
    # Function to check if an item is either milk or cereal
    return is_milk(item) or is_food_cereal(item)

behavior locate_milk_and_cereal(milk: item, cereal: item):
    body:
        if not visited(milk):
            observe(milk, "Find the milk item")
        if not visited(cereal):
            observe(cereal, "Find the cereal item")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        locate_milk_and_cereal(milk, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)obs(milk_2043, Find the milk item)walk_executor(table_107)exp(food_cereal_2015, table_107)walk_executor(food_cereal_2015)open_executor(food_cereal_2015)obs(food_cereal_2015, Find the cereal item)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
obs(milk_2043, Find the milk item)open_executor(food_cereal_2015)obs(food_cereal_2015, Find the cereal item)
##############################
From agent.py
obs(milk_2043, Find the milk item)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
def is_milk_and_cereal_found(fridge:item):
    # Function to check if milk and cereal are found near the fridge
    symbol milk_found=exists milk: item : (is_milk(milk) and close(milk, fridge))
    symbol cereal_found=exists cereal: item : (is_food_cereal(cereal) and close(cereal, fridge))
    return milk_found and cereal_found

behavior check_fridge_for_milk_and_cereal(fridge: item):
    body:
        if not visited(fridge):
            observe(fridge, "Locate milk_2043 and find cereal_2015 nearby")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289

        if not is_milk_and_cereal_found(fridge):
            check_fridge_for_milk_and_cereal(fridge)
        else:
            walk_to(fridge)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
def is_milk_and_cereal_found(fridge:item):
    # Function to check if milk and cereal are found near the fridge
    symbol milk_found=exists milk: item : (is_milk(milk) and close(milk, fridge))
    symbol cereal_found=exists cereal: item : (is_food_cereal(cereal) and close(cereal, fridge))
    return milk_found and cereal_found

behavior check_fridge_for_milk_and_cereal(fridge: item):
    body:
        if not visited(fridge):
            observe(fridge, "Locate milk_2043 and find cereal_2015 nearby")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289

        if not is_milk_and_cereal_found(fridge):
            check_fridge_for_milk_and_cereal(fridge)
        else:
            walk_to(fridge)
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def in_hand(item: item):
    # Function to check if an item is in hand
    symbol is_in_hand = inhand(item)
    return is_in_hand

behavior grab_item(item: item):
    body:
        if not in_hand(item):
            grab(item)

behavior put_milk_in_cup(milk: item, cup: item):
    body:
        if not inhand(milk):
            grab_item(milk)
        if not inside(milk, cup):
            put_inside(milk, cup)
            # Pour milk into the cup

behavior heat_milk(microwave: item, cup: item):
    body:
        if not inside(cup, microwave):
            put_inside(cup, microwave)
            # Put the cup with milk in the microwave

        if open(microwave):
            closes(microwave)
            # Close the microwave door if open

        if is_off(microwave):
            switch_on(microwave)
            # Turn on the microwave to heat the milk

        if is_on(microwave):
            switch_off(microwave)
            # After heating, switch off the microwave

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select a milk item
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup item
        
        put_milk_in_cup(milk, cup)

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        heat_milk(microwave, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def in_hand(item: item):
    # Function to check if an item is in hand
    symbol is_in_hand = inhand(item)
    return is_in_hand

behavior grab_item(item: item):
    body:
        if not in_hand(item):
            grab(item)

behavior put_milk_in_cup(milk: item, cup: item):
    body:
        if not inhand(milk):
            grab_item(milk)
        if not inside(milk, cup):
            put_inside(milk, cup)
            # Pour milk into the cup

behavior heat_milk(microwave: item, cup: item):
    body:
        if not inside(cup, microwave):
            put_inside(cup, microwave)
            # Put the cup with milk in the microwave

        if open(microwave):
            closes(microwave)
            # Close the microwave door if open

        if is_off(microwave):
            switch_on(microwave)
            # Turn on the microwave to heat the milk

        if is_on(microwave):
            switch_off(microwave)
            # After heating, switch off the microwave

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select a milk item
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup item
        
        put_milk_in_cup(milk, cup)

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        heat_milk(microwave, cup)

##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(table_107)exp(cup_2063, table_107)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(microwave_297)putin_executor(cup_2063, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(table_107)
Robot find: mat_173, clothes_hat_2045, clothes_gloves_2046, drawing_176, drawing_174, drawing_175, Robot is close to the milk_2043. Robot is close to the table_107. 
##############################
From agent.py
exp(cup_2063, table_107)
Fail to find cup_2063 around table_107. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(cup_2063, table_226)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(microwave_297)putin_executor(cup_2063, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)
##############################
From agent.py
walk_executor(table_226)
Robot find: drawing_243, bowl_2071, coffee_filter_2000, drawing_2003, drawing_241, bowl_2072, mat_236, fork_2080, drawing_238, drawing_242, fork_2081, mat_237, Robot is close to the milk_2043. Robot is close to the table_226. 
##############################
From agent.py
exp(cup_2063, table_226)
Fail to find cup_2063 around table_226. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(cup_2063, coffee_table_2068)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(microwave_297)putin_executor(cup_2063, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the milk_2043. Robot is close to the coffee_table_2068. 
##############################
From agent.py
exp(cup_2063, coffee_table_2068)
Fail to find cup_2063 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(cup_2063, table_355)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(microwave_297)putin_executor(cup_2063, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, drawing_404, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the milk_2043. Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
exp(cup_2063, table_355)
Fail to find cup_2063 around table_355. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(cup_2063, cupboard_229)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(microwave_297)putin_executor(cup_2063, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the milk_2043. Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the milk_2043. Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(cup_2063, cupboard_229)
Fail to find cup_2063 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(microwave_297)putin_executor(cup_2063, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(microwave_297)putin_executor(cup_2063, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is opened. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the microwave_297. 
##############################
From agent.py
putin_executor(cup_2063, microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the microwave_297. microwave_297 is close cup_2063. cup_2063 is close microwave_297. cup_2063 is inside microwave_297. cup_2063 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is turned on. 
##############################
From agent.py
switchoff_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_closetdrawer_382(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(plate,closetdrawer_instance)
        else:
            exp(plate,closetdrawer_instance)
    eff:
        unknown[plate]=False
        close[plate,closetdrawer_instance]=True
        close[closetdrawer_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_milk(cereal:item, cup:item):
    body:
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup_2063 which has the heated milk inside
        
        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2015
        # Select food_cereal_2015
        
        add_cereal_to_milk(cereal, cup)
        # Add cereal to the heated milk in the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_cereal_to_milk(cereal:item, cup:item):
    body:
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup_2063 which has the heated milk inside
        
        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2015
        # Select food_cereal_2015
        
        add_cereal_to_milk(cereal, cup)
        # Add cereal to the heated milk in the cup

##############################
From agent.py-> find a plan in act()
walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
walk_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. 
##############################
From agent.py
grab_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. Grabbing food_cereal_2015 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the microwave_297. 
##############################
From agent.py
putin_executor(food_cereal_2015, cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the microwave_297. food_cereal_2015 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'open_executor(food_cereal_2015) (Failed)', 'walk_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(table_107)', 'walk_executor(table_226)', 'walk_executor(coffee_table_2068)', 'walk_executor(table_355)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(microwave_297)', 'putin_executor(cup_2063, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)', 'switchoff_executor(microwave_297)', 'walk_executor(food_cereal_2015)', 'grab_executor(food_cereal_2015)', 'walk_executor(cup_2063)', 'putin_executor(food_cereal_2015, cup_2063)']
Time info:
Time consume: 180 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 18
goal generate times: 4
goal correct times: 0
action_num: 28

Task complete rate:
Keystate: k1 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
