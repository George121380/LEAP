From agent.py
Reset goals: The sub-goals are: 
['1. Place the bowls and plates in the dishwasher and start the washing cycle.', '2. Wash the forks by hand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2142_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_plate_2152_around_dishwasher_129(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_detergent_2155_around_kitchen_counter_119(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(detergent,kitchen_counter_instance)
        else:
            exp(detergent,kitchen_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,kitchen_counter_instance]=True
        close[kitchen_counter_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior load_dishwasher(bowl_or_plate:item, dishwasher:item):
    body:
        if not inside(bowl_or_plate, dishwasher):
            put_inside(bowl_or_plate, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        if open(dishwasher):
            closes(dishwasher)
        if is_off(dishwasher):
            switch_on(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)

        foreach bowl_or_plate: item:
            if is_bowl(bowl_or_plate) or is_plate(bowl_or_plate):
                load_dishwasher(bowl_or_plate, dishwasher)
        start_dishwasher(dishwasher)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior load_dishwasher(bowl_or_plate:item, dishwasher:item):
    body:
        if not inside(bowl_or_plate, dishwasher):
            put_inside(bowl_or_plate, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        if open(dishwasher):
            closes(dishwasher)
        if is_off(dishwasher):
            switch_on(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)

        foreach bowl_or_plate: item:
            if is_bowl(bowl_or_plate) or is_plate(bowl_or_plate):
                load_dishwasher(bowl_or_plate, dishwasher)
        start_dishwasher(dishwasher)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(dishwasher_129)open_executor(dishwasher_129)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(kitchen_counter_119)exp(bowl_2141, kitchen_counter_119)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(kitchen_counter_119)exp(bowl_2142, kitchen_counter_119)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)exp(plate_2152, dishwasher_129)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)close_executor(dishwasher_129)switchon_executor(dishwasher_129)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_129)open_executor(dishwasher_129)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)close_executor(dishwasher_129)switchon_executor(dishwasher_129)
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. 
##############################
From agent.py
open_executor(dishwasher_129)
Robot find: detergent_2011, measuring_cup_2012, Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is opened. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(bowl_2140)
Robot find: Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2140. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. 
##############################
From agent.py
putin_executor(bowl_2140, dishwasher_129)
Robot find: Robot is close to the bowl_2140. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is close bowl_2140. bowl_2140 is close dishwasher_129. bowl_2140 is inside dishwasher_129. bowl_2140 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(bowl_2141)
Robot find: Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. Grabbing bowl_2141 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2141. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the measuring_cup_2012. 
##############################
From agent.py
putin_executor(bowl_2141, dishwasher_129)
Robot find: Robot is close to the bowl_2141. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the measuring_cup_2012. dishwasher_129 is close bowl_2141. bowl_2141 is inside dishwasher_129. bowl_2141 is close dishwasher_129. bowl_2141 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2142)
Robot find: iron_2161, Robot is close to the bowl_2142. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(bowl_2142)
Robot find: Robot is close to the bowl_2142. Robot is close to the kitchen_counter_119. Grabbing bowl_2142 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2142. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. 
##############################
From agent.py
putin_executor(bowl_2142, dishwasher_129)
Robot find: Robot is close to the bowl_2142. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. dishwasher_129 is close bowl_2142. bowl_2142 is close dishwasher_129. bowl_2142 is inside dishwasher_129. bowl_2142 released by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the plate_2152. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. Robot is close to the bowl_2142. 
##############################
From agent.py
putin_executor(plate_2152, dishwasher_129)
Robot find: Robot is close to the plate_2152. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. Robot is close to the bowl_2142. dishwasher_129 is close plate_2152. plate_2152 is inside dishwasher_129. plate_2152 is close dishwasher_129. plate_2152 released by right hand. 
##############################
From agent.py
close_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. dishwasher_129 is closed. 
##############################
From agent.py
switchon_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. dishwasher_129 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2155_around_cupboard_117(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

behavior find_soap_2126_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item, sink:item):
    body:
        if not inhand(fork):
            grab(fork)
            # Ensure the fork is in hand

        if not close_char(char, sink):
            walk_to(sink)
            # Move to the sink for washing

        if dirty(fork):
            wash(fork)
            # Wash the fork if it is dirty

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select the sink

        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_forks_by_hand(fork, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        if not clean(fork):
            wash(fork) # Washes the fork by hand if it is not clean

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2011_around_sink_120(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_cleaning_solution_2143_around_cupboard_117(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_fork(fork:item):
    body:
        if not inhand(fork):
            grab(fork)
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                find_and_wash_fork(fork)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_wash_fork(fork:item):
    body:
        if not inhand(fork):
            grab(fork)
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                find_and_wash_fork(fork)

##############################
From agent.py-> find a plan in act()
walk_executor(fork_2150)grab_executor(fork_2150)walk_executor(fork_2151)grab_executor(fork_2151)
##############################
From agent.py
walk_executor(fork_2150)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(fork_2150)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Grabbing fork_2150 by right hand. 
##############################
From agent.py
walk_executor(fork_2151)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. 
##############################
From agent.py
grab_executor(fork_2151)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. Grabbing fork_2151 by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You should manually wash the forks (fork_2150 and fork_2151) by performing wash actions on them, as the task of "wash the forks by hand" is not completed by simply grabbing them.
##############################
From agent.py
Human Instruction: You should manually wash the forks (fork_2150 and fork_2151) by performing wash actions on them, as the task of "wash the forks by hand" is not completed by simply grabbing them.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for bowl_2140 around kitchen_counter_119.
Action 3: Walk to dishwasher_129.
Action 4: Open dishwasher_129.
Action 5: Walk to bowl_2140.
Action 6: Grab bowl_2140.
Action 7: Walk to dishwasher_129.
Action 8: Put bowl_2140 into dishwasher_129.
Action 9: Walk to bowl_2141.
Action 10: Grab bowl_2141.
Action 11: Walk to dishwasher_129.
Action 12: Put bowl_2141 into dishwasher_129.
Action 13: Walk to bowl_2142.
Action 14: Grab bowl_2142.
Action 15: Walk to dishwasher_129.
Action 16: Put bowl_2142 into dishwasher_129.
Action 17: Walk to plate_2152.
Action 18: Grab plate_2152.
Action 19: Walk to dishwasher_129.
Action 20: Put plate_2152 into dishwasher_129.
Action 21: Close dishwasher_129.
Action 22: Switch on dishwasher_129.
Action 23: Walk to fork_2150.
Action 24: Grab fork_2150.
Action 25: Walk to fork_2151.
Action 26: Grab fork_2151.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2011_around_sink_120(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_soap_2125_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork1: item, fork2: item):
    body:
        if dirty(fork1):
            wash(fork1)
        if dirty(fork2):
            wash(fork2)

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and id[fork1] == 2150
        # Select fork_2150

        bind fork2: item where:
            is_fork(fork2) and id[fork2] == 2151
        # Select fork_2151

        wash_forks_by_hand(fork1, fork2)
        # Wash forks by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2155_around_sink_120(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_soap_2126_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_grab_fork(fork:item):
    body:
        if not inhand(fork):
            grab(fork)

behavior wash_fork_by_hand(fork: item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and id[fork1] == 2150
        # Select fork_2150

        bind fork2: item where:
            is_fork(fork2) and id[fork2] == 2151
        # Select fork_2151

        find_and_grab_fork(fork1)
        # Ensure fork_2150 is in hand
        wash_fork_by_hand(fork1)
        # Wash fork_2150 by hand

        if inhand(fork1):
            empty_a_hand()
        # Empty a hand after washing

        find_and_grab_fork(fork2)
        # Ensure fork_2151 is in hand
        wash_fork_by_hand(fork2)
        # Wash fork_2151 by hand

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_grab_fork(fork:item):
    body:
        if not inhand(fork):
            grab(fork)

behavior wash_fork_by_hand(fork: item):
    body:
        if dirty(fork):
            wash(fork)

behavior __goal__():
    body:
        bind fork1: item where:
            is_fork(fork1) and id[fork1] == 2150
        # Select fork_2150

        bind fork2: item where:
            is_fork(fork2) and id[fork2] == 2151
        # Select fork_2151

        find_and_grab_fork(fork1)
        # Ensure fork_2150 is in hand
        wash_fork_by_hand(fork1)
        # Wash fork_2150 by hand

        if inhand(fork1):
            empty_a_hand()
        # Empty a hand after washing

        find_and_grab_fork(fork2)
        # Ensure fork_2151 is in hand
        wash_fork_by_hand(fork2)
        # Wash fork_2151 by hand

##############################
From agent.py-> find a plan in act()
put_executor(fork_2150, kitchen_counter_119)
##############################
From agent.py
put_executor(fork_2150, kitchen_counter_119)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. fork_2150 is close kitchen_counter_119. fork_2150 is on kitchen_counter_119. fork_2150 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wash fork_2150 and fork_2151 by hand. The current actions show that both forks were grabbed, but no wash action has been performed on them.
##############################
From agent.py
Human Instruction: You need to wash fork_2150 and fork_2151 by hand. The current actions show that both forks were grabbed, but no wash action has been performed on them.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for bowl_2140 around kitchen_counter_119.
Action 3: Walk to dishwasher_129.
Action 4: Open dishwasher_129.
Action 5: Walk to bowl_2140.
Action 6: Grab bowl_2140.
Action 7: Walk to dishwasher_129.
Action 8: Put bowl_2140 into dishwasher_129.
Action 9: Walk to bowl_2141.
Action 10: Grab bowl_2141.
Action 11: Walk to dishwasher_129.
Action 12: Put bowl_2141 into dishwasher_129.
Action 13: Walk to bowl_2142.
Action 14: Grab bowl_2142.
Action 15: Walk to dishwasher_129.
Action 16: Put bowl_2142 into dishwasher_129.
Action 17: Walk to plate_2152.
Action 18: Grab plate_2152.
Action 19: Walk to dishwasher_129.
Action 20: Put plate_2152 into dishwasher_129.
Action 21: Close dishwasher_129.
Action 22: Switch on dishwasher_129.
Action 23: Walk to fork_2150.
Action 24: Grab fork_2150.
Action 25: Walk to fork_2151.
Action 26: Grab fork_2151.
Action 27: Put fork_2150 on kitchen_counter_119.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2011_around_sink_19(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_soap_2126_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation

behavior wash_fork_by_hand(fork:item):
    body:
        if dirty(fork):
            wash(fork)
            # Wash the fork by hand if it is dirty

behavior __goal__():
    body:
        bind fork_1: item where:
            is_fork(fork_1) and id[fork_1] == 2150
        # Select fork_2150 for washing
        
        bind fork_2: item where:
            is_fork(fork_2) and id[fork_2] == 2151
        # Select fork_2151 for washing

        walk_to(fork_1)
        # Move to fork_2150
        wash_fork_by_hand(fork_1)
        # Wash fork_2150 by hand
        
        walk_to(fork_2)
        # Move to fork_2151
        wash_fork_by_hand(fork_2)
        # Wash fork_2151 by hand

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior wash_fork_by_hand(fork:item):
    body:
        if dirty(fork):
            wash(fork)
            # Wash the fork by hand if it is dirty

behavior __goal__():
    body:
        bind fork_1: item where:
            is_fork(fork_1) and id[fork_1] == 2150
        # Select fork_2150 for washing
        
        bind fork_2: item where:
            is_fork(fork_2) and id[fork_2] == 2151
        # Select fork_2151 for washing

        walk_to(fork_1)
        # Move to fork_2150
        wash_fork_by_hand(fork_1)
        # Wash fork_2150 by hand
        
        walk_to(fork_2)
        # Move to fork_2151
        wash_fork_by_hand(fork_2)
        # Wash fork_2151 by hand

##############################
From agent.py-> find a plan in act()
walk_executor(fork_2150)walk_executor(fork_2151)
##############################
From agent.py
walk_executor(fork_2150)
Robot find: Robot is close to the fork_2150. Robot is close to the kitchen_counter_119. Robot is close to the fork_2151. 
##############################
From agent.py
walk_executor(fork_2151)
Robot find: Robot is close to the fork_2151. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wash fork_2150 and fork_2151 by hand. No wash action has been performed on them.
##############################
Task Summary:
Task Goal:
Wash the bowls and plates with dishwasher. And wash forks by hand.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(dishwasher_129)', 'open_executor(dishwasher_129)', 'walk_executor(bowl_2140)', 'grab_executor(bowl_2140)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2140, dishwasher_129)', 'walk_executor(bowl_2141)', 'grab_executor(bowl_2141)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2141, dishwasher_129)', 'walk_executor(bowl_2142)', 'grab_executor(bowl_2142)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2142, dishwasher_129)', 'walk_executor(plate_2152)', 'grab_executor(plate_2152)', 'walk_executor(dishwasher_129)', 'putin_executor(plate_2152, dishwasher_129)', 'close_executor(dishwasher_129)', 'switchon_executor(dishwasher_129)', 'walk_executor(fork_2150)', 'grab_executor(fork_2150)', 'walk_executor(fork_2151)', 'grab_executor(fork_2151)', 'put_executor(fork_2150, kitchen_counter_119)', 'walk_executor(fork_2150)', 'walk_executor(fork_2151)']
Time info:
Time consume: 107 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 120
goal generate times: 7
goal correct times: 0
action_num: 28

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 1
##############################
