From agent.py
Reset goals: The sub-goals are: 
['1. Wipe the toilet with toilet paper.', '2. Throw the used toilet paper into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet_paper: item, toilet: item):
    body:
        if not inhand(toilet_paper):
            grab(toilet_paper)
        if dirty(toilet):
            wipe(toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper

        walk_to(toilet)
        # Approach the toilet

        wipe_toilet_with_toilet_paper(toilet_paper, toilet)
        # Wipe the toilet with the toilet paper

        put_inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wipe_toilet_with_toilet_paper(toilet_paper: item, toilet: item):
    body:
        if not inhand(toilet_paper):
            grab(toilet_paper)
        if dirty(toilet):
            wipe(toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper

        walk_to(toilet)
        # Approach the toilet

        wipe_toilet_with_toilet_paper(toilet_paper, toilet)
        # Wipe the toilet with the toilet paper

        put_inside(toilet_paper, toilet)
        # Throw the used toilet paper into the toilet

##############################
From agent.py-> find a plan in act()
walk_executor(toilet_15)walk_executor(bathroom_cabinet_17)open_executor(bathroom_cabinet_17)exp(toilet_paper_2076, bathroom_cabinet_17)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)open_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(toilet_15)
Robot find: toilet_paper_2076, drawing_33, Robot is close to the toilet_15. 
##############################
From agent.py
walk_executor(bathroom_cabinet_17)
Robot find: Robot is close to the bathroom_cabinet_17. 
##############################
From agent.py
open_executor(bathroom_cabinet_17)
Robot find: tooth_paste_2059, Robot is close to the bathroom_cabinet_17. Robot is close to the tooth_paste_2059. bathroom_cabinet_17 is opened. 
##############################
From agent.py
exp(toilet_paper_2076, bathroom_cabinet_17)
Find toilet_paper_2076. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)open_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(toilet_15)
Robot find: Robot is close to the toilet_15. 
##############################
From agent.py
walk_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. 
##############################
From agent.py
grab_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Grabbing toilet_paper_2076 by right hand. 
##############################
From agent.py
walk_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py
open_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. toilet_15 is opened. 
##############################
From agent.py
putin_executor(toilet_paper_2076, toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. toilet_paper_2076 is inside toilet_15. toilet_paper_2076 is close toilet_15. toilet_paper_2076 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to wipe the toilet with the toilet paper.
##############################
From agent.py
Human Instruction: The robot needs to wipe the toilet with the toilet paper.

The actions you have taken:
Action 1: Walk to toilet_15.
Action 2: Walk to bathroom_cabinet_17.
Action 3: Open bathroom_cabinet_17.
Action 4: look for toilet_paper_2076 around bathroom_cabinet_17.
Action 5: Walk to toilet_15.
Action 6: Walk to toilet_paper_2076.
Action 7: Grab toilet_paper_2076.
Action 8: Walk to toilet_15.
Action 9: Open toilet_15.
Action 10: Put toilet_paper_2076 into toilet_15.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_paper(toilet: item, toilet_paper: item):
    body:
        if not inhand(toilet_paper):
            grab(toilet_paper)
        if dirty(toilet):
            wipe(toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select toilet_15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
        # Select toilet_paper_2076

        wipe_toilet_with_paper(toilet, toilet_paper)
        # Wipe the toilet with the toilet paper

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wipe_toilet_with_paper(toilet: item, toilet_paper: item):
    body:
        if not inhand(toilet_paper):
            grab(toilet_paper)
        if dirty(toilet):
            wipe(toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select toilet_15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper] == 2076
        # Select toilet_paper_2076

        wipe_toilet_with_paper(toilet, toilet_paper)
        # Wipe the toilet with the toilet paper

##############################
From agent.py-> find a plan in act()
grab_executor(toilet_paper_2076)
##############################
From agent.py
grab_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. Grabbing toilet_paper_2076 by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to perform the action of wiping the toilet with the toilet paper. Currently, the robot has grabbed the toilet paper and walked to the toilet, but it has not yet wiped the toilet.
##############################
From agent.py
Human Instruction: The robot needs to perform the action of wiping the toilet with the toilet paper. Currently, the robot has grabbed the toilet paper and walked to the toilet, but it has not yet wiped the toilet.

The actions you have taken:
Action 1: Walk to toilet_15.
Action 2: Walk to bathroom_cabinet_17.
Action 3: Open bathroom_cabinet_17.
Action 4: look for toilet_paper_2076 around bathroom_cabinet_17.
Action 5: Walk to toilet_15.
Action 6: Walk to toilet_paper_2076.
Action 7: Grab toilet_paper_2076.
Action 8: Walk to toilet_15.
Action 9: Open toilet_15.
Action 10: Put toilet_paper_2076 into toilet_15.
Action 11: Grab toilet_paper_2076.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2125_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_cupboard_117(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

behavior find_rag_2025_around_bench_115(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==115
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(rag,bench_instance)
        else:
            exp(rag,bench_instance)
    eff:
        unknown[rag]=False
        close[rag,bench_instance]=True
        close[bench_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def is_toilet_ready_for_wiping(toilet:item, toilet_paper:item):
    # Check if the toilet is not clean and the toilet paper is in hand
    return dirty(toilet) and inhand(toilet_paper)

behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        if dirty(toilet):
            wipe(toilet)
            # Wipe the toilet to clean it

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select toilet_15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper
        
        if not is_toilet_ready_for_wiping(toilet, toilet_paper):
            if not inhand(toilet_paper):
                grab(toilet_paper)
        
        walk_to(toilet)
        # Move to the toilet
        
        wipe_toilet_with_toilet_paper(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_toilet_ready_for_wiping(toilet:item, toilet_paper:item):
    # Check if the toilet is not clean and the toilet paper is in hand
    return dirty(toilet) and inhand(toilet_paper)

behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):
    body:
        if dirty(toilet):
            wipe(toilet)
            # Wipe the toilet to clean it

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select toilet_15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper
        
        if not is_toilet_ready_for_wiping(toilet, toilet_paper):
            if not inhand(toilet_paper):
                grab(toilet_paper)
        
        walk_to(toilet)
        # Move to the toilet
        
        wipe_toilet_with_toilet_paper(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
walk_executor(toilet_15)
##############################
From agent.py
walk_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to perform the action of wiping the toilet with the toilet paper.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior throw_used_toilet_paper_into_toilet(toilet_paper:item, toilet:item):
    body:
        if inhand(toilet_paper):
            put_inside(toilet_paper, toilet)
            # Put the used toilet paper inside the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and inhand(toilet_paper)
        # Select toilet paper that is already in hand

        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select toilet with ID 15

        throw_used_toilet_paper_into_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior throw_used_toilet_paper_into_toilet(toilet_paper:item, toilet:item):
    body:
        if inhand(toilet_paper):
            put_inside(toilet_paper, toilet)
            # Put the used toilet paper inside the toilet

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and inhand(toilet_paper)
        # Select toilet paper that is already in hand

        bind toilet: item where:
            is_toilet(toilet) and id[toilet] == 15
        # Select toilet with ID 15

        throw_used_toilet_paper_into_toilet(toilet_paper, toilet)

##############################
From agent.py-> find a plan in act()
putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
putin_executor(toilet_paper_2076, toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. toilet_paper_2076 is inside toilet_15. toilet_paper_2076 is close toilet_15. toilet_paper_2076 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Wipe the toilet with toilet paper. Then throw it into the toilet.
Action History:
['walk_executor(toilet_15)', 'walk_executor(bathroom_cabinet_17)', 'open_executor(bathroom_cabinet_17)', 'walk_executor(toilet_15)', 'walk_executor(toilet_paper_2076)', 'grab_executor(toilet_paper_2076)', 'walk_executor(toilet_15)', 'open_executor(toilet_15)', 'putin_executor(toilet_paper_2076, toilet_15)', 'grab_executor(toilet_paper_2076)', 'walk_executor(toilet_15)', 'putin_executor(toilet_paper_2076, toilet_15)']
Time info:
Time consume: 71 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 70
goal generate times: 4
goal correct times: 0
action_num: 12

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 1
##############################
