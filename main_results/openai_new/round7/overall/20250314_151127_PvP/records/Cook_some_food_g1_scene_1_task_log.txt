From agent.py
Reset goals: The sub-goals are: 
['1. Find a pot and fill it with water.', '2. Place the pot on the stove and turn on the stove.', '3. Add the vegetables to the pot and boil them.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_detergent_2011_around_bathroom_cabinet_17(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_pot_and_fill_with_water(pot: item, water_source: item):
    body:
        if not has_water(pot):
            walk_to(water_source)
            if not inhand(pot):
                grab(pot)
            get_water(pot)
            empty_a_hand()

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind water_source: item where:
            is_sink(water_source) or is_faucet(water_source)
        # Select a water source, either a sink or a faucet

        find_pot_and_fill_with_water(pot, water_source)
        # Find a pot and fill it with water from the selected water source

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior find_pot_and_fill_with_water(pot:item):
    body:
        if not inhand(pot):
            grab(pot)
        if not has_water(pot):
            get_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        find_pot_and_fill_with_water(pot)
        # Find the pot and fill it with water

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_pot_and_fill_with_water(pot:item):
    body:
        if not inhand(pot):
            grab(pot)
        if not has_water(pot):
            get_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        find_pot_and_fill_with_water(pot)
        # Find the pot and fill it with water

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)walk_executor(pot_2138)grab_executor(pot_2138)open_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(pot_2138, cupboard_118)
Fail to find pot_2138 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_kitchen_counter_123(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove_and_turn_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            if not inhand(pot):
                grab(pot)
            put_on(pot, stove)

        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_on_stove_and_turn_on_stove(pot, stove)
        # Place the pot on the stove and turn on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_pot_on_stove_and_turn_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            if not inhand(pot):
                grab(pot)
            put_on(pot, stove)

        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_on_stove_and_turn_on_stove(pot, stove)
        # Place the pot on the stove and turn on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def are_vegetables_in_pot(vegetables: item, pot: item):
    # Check if the vegetables are inside the pot
    return inside(vegetables, pot)

behavior place_vegetables_in_pot(vegetables: item, pot: item):
    body:
        if not inhand(vegetables):
            grab(vegetables)
        if not are_vegetables_in_pot(vegetables, pot):
            put_inside(vegetables, pot)

behavior ensure_stove_is_on(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the vegetables with ID 2041

        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        place_vegetables_in_pot(vegetables, pot)
        # Place the vegetables in the pot

        ensure_stove_is_on(stove)
        # Ensure the stove is on to boil the vegetables

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2009_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_carrot_2015_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2113_around_bowl_2141(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_vegetable,bowl_instance)
        else:
            exp(food_vegetable,bowl_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,bowl_instance]=True
        close[bowl_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove(pot: item, stove: item):
    # Check if the pot is on the stove
    return is_pot(pot) and on(pot, stove)

def is_vegetable_in_pot(vegetable: item, pot: item):
    # Check if the vegetable is in the pot
    return is_food_vegetable(vegetable) and inside(vegetable, pot)

behavior add_vegetables_to_pot_and_boil(vegetable: item, pot: item, stove: item):
    body:
        if not inhand(vegetable):
            grab(vegetable)
        if not is_vegetable_in_pot(vegetable, pot):
            put_inside(vegetable, pot)

        if is_pot_on_stove(pot, stove) and is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select pot_78

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove_2135

        add_vegetables_to_pot_and_boil(vegetable, pot, stove)
        # Add vegetables to the pot and start boiling


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pot_on_stove(pot: item, stove: item):
    # Check if the pot is on the stove
    return is_pot(pot) and on(pot, stove)

def is_vegetable_in_pot(vegetable: item, pot: item):
    # Check if the vegetable is in the pot
    return is_food_vegetable(vegetable) and inside(vegetable, pot)

behavior add_vegetables_to_pot_and_boil(vegetable: item, pot: item, stove: item):
    body:
        if not inhand(vegetable):
            grab(vegetable)
        if not is_vegetable_in_pot(vegetable, pot):
            put_inside(vegetable, pot)

        if is_pot_on_stove(pot, stove) and is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select pot_78

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove_2135

        add_vegetables_to_pot_and_boil(vegetable, pot, stove)
        # Add vegetables to the pot and start boiling


##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2141)exp(food_vegetable_2113, bowl_2141)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2141. 
##############################
From agent.py
exp(food_vegetable_2113, bowl_2141)
Fail to find food_vegetable_2113 around bowl_2141. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_vegetable_2113, fridge_126)
Find food_vegetable_2113. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. food_vegetable_2113 is inside pot_78. pot_78 is close food_vegetable_2113. food_vegetable_2113 is close pot_78. food_vegetable_2113 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil vegetables with a pot on the stove.
Action History:
['walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(bowl_2141)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_vegetable_2113)', 'walk_executor(pot_78)', 'putin_executor(food_vegetable_2113, pot_78)']
Time info:
Time consume: 101 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 115
goal generate times: 5
goal correct times: 0
action_num: 17

Task complete rate:
Keystate: k1 - Requires: 7 steps
Keystate: k2 - Requires: 5 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
