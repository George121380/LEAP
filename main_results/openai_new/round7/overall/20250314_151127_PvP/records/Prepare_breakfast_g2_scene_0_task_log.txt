From agent.py
Reset goals: The sub-goals are: 
['1. Crack the egg into the frying pan.', '2. Scramble it until fully cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def locate_and_crack_egg(egg: item, fryingpan: item):
    body:
        if not inhand(egg):
            grab(egg)
        if open(egg) or cut(egg):
            # If the egg is already cracked, were ready to move on
            put_inside(egg, fryingpan)
        else:
            put_inside(egg, fryingpan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cuttable(egg)
        # Select the egg from items

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan from items

        locate_and_crack_egg(egg, fryingpan)
        # Crack the egg directly into the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_egg_into_fryingpan(egg:item, fryingpan:item):
    body:
        if not inside(egg, fryingpan):
            grab(egg)
            walk_to(fryingpan)
            put_inside(egg, fryingpan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg that is a food item

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        crack_egg_into_fryingpan(egg, fryingpan)
        # Crack the egg into the frying pan

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior crack_egg_into_fryingpan(egg:item, fryingpan:item):
    body:
        if not inside(egg, fryingpan):
            grab(egg)
            walk_to(fryingpan)
            put_inside(egg, fryingpan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg that is a food item

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        crack_egg_into_fryingpan(egg, fryingpan)
        # Crack the egg into the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_egg_2020, kitchen_counter_230)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_egg_2020, kitchen_counter_230)
Fail to find food_egg_2020 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_table_226(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_bowl_2071_around_table_226(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg(egg:item, fryingpan:item):
    body:
        if close_char(char, fryingpan):
            if not cut(egg):
                cuts(egg)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg with ID 2020

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select the fryingpan with ID 2083

        scramble_egg(egg, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior scramble_egg(egg:item, fryingpan:item):
    body:
        if close_char(char, fryingpan):
            if not cut(egg):
                cuts(egg)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg with ID 2020

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select the fryingpan with ID 2083

        scramble_egg(egg, fryingpan)

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. 
##############################
From agent.py
put_executor(food_egg_2020, cutting_board_2051)
Robot find: Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. cutting_board_2051 is close food_egg_2020. food_egg_2020 is close cutting_board_2051. food_egg_2020 is on cutting_board_2051. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
cut_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the egg back into the fryingpan_2083 after cutting it, and then scramble it in the fryingpan to consider it fully cooked.
##############################
From agent.py
Human Instruction: You need to place the egg back into the fryingpan_2083 after cutting it, and then scramble it in the fryingpan to consider it fully cooked.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_egg_2020 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Grab food_egg_2020.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_egg_2020 into fryingpan_2083.
Action 10: Grab food_egg_2020.
Action 11: Walk to cutting_board_2051.
Action 12: Put food_egg_2020 on cutting_board_2051.
Action 13: Walk to knife_2050.
Action 14: Grab knife_2050.
Action 15: Walk to food_egg_2020.
Action 16: Cut food_egg_2020.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_117(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_vacuum_cleaner_2070_around_washing_machine_2007(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not on(egg, fryingpan):
            put_on(egg, fryingpan)

behavior scramble_until_fully_cooked(egg:item, fryingpan:item):
    body:
        if on(egg, fryingpan):
            walk_to(fryingpan)
            observe(egg, "Scramble the egg in the fryingpan to check if it is fully cooked")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the egg that has been cut
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select fryingpan_2083
        
        scramble_egg_in_fryingpan(egg, fryingpan)
        scramble_until_fully_cooked(egg, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not on(egg, fryingpan):
            put_on(egg, fryingpan)

behavior scramble_until_fully_cooked(egg:item, fryingpan:item):
    body:
        if on(egg, fryingpan):
            walk_to(fryingpan)
            observe(egg, "Scramble the egg in the fryingpan to check if it is fully cooked")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the egg that has been cut
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select fryingpan_2083
        
        scramble_egg_in_fryingpan(egg, fryingpan)
        scramble_until_fully_cooked(egg, fryingpan)

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(fryingpan_2083)put_executor(food_egg_2020, fryingpan_2083)walk_executor(fryingpan_2083)obs(food_egg_2020, Scramble the egg in the fryingpan to check if it is fully cooked)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_egg_2020 is close fryingpan_2083. food_egg_2020 is on fryingpan_2083. food_egg_2020 released by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
obs(food_egg_2020, Scramble the egg in the fryingpan to check if it is fully cooked)
Get this information:  food_egg_2020 is inside dining_room_201. food_egg_2020 is close to fryingpan_2083. food_egg_2020 is on fryingpan_2083. food_egg_2020 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to scramble the egg in the fryingpan until it is fully cooked. The actions taken so far do not include scrambling the egg, only placing it in the fryingpan.
##############################
From agent.py
Human Instruction: You need to scramble the egg in the fryingpan until it is fully cooked. The actions taken so far do not include scrambling the egg, only placing it in the fryingpan.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_egg_2020 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Grab food_egg_2020.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_egg_2020 into fryingpan_2083.
Action 10: Grab food_egg_2020.
Action 11: Walk to cutting_board_2051.
Action 12: Put food_egg_2020 on cutting_board_2051.
Action 13: Walk to knife_2050.
Action 14: Grab knife_2050.
Action 15: Walk to food_egg_2020.
Action 16: Cut food_egg_2020.
Action 17: Grab food_egg_2020.
Action 18: Walk to fryingpan_2083.
Action 19: Put food_egg_2020 on fryingpan_2083.
Action 20: Walk to fryingpan_2083.
Action 21: Observe around food_egg_2020 with the question of Scramble the egg in the fryingpan to check if it is fully cooked.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_with_egg(fryingpan: item, egg: item):
    # Function to check if the egg is in the frying pan
    return inside(egg, fryingpan)

behavior scramble_egg_until_cooked(egg: item, fryingpan: item):
    body:
        if not cut(egg):
            cuts(egg)
        if inside(egg, fryingpan):
            observe(fryingpan, "Scramble the egg in the frying pan to check if it is fully cooked")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cuttable(egg) and id[egg]==2020
        # Select egg_2020

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select fryingpan_2083

        if not is_fryingpan_with_egg(fryingpan, egg):
            walk_to(fryingpan)
            if not inhand(egg):
                grab(egg)
            put_inside(egg, fryingpan)

        scramble_egg_until_cooked(egg, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_fryingpan_with_egg(fryingpan: item, egg: item):
    # Function to check if the egg is in the frying pan
    return inside(egg, fryingpan)

behavior scramble_egg_until_cooked(egg: item, fryingpan: item):
    body:
        if not cut(egg):
            cuts(egg)
        if inside(egg, fryingpan):
            observe(fryingpan, "Scramble the egg in the frying pan to check if it is fully cooked")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cuttable(egg) and id[egg]==2020
        # Select egg_2020

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select fryingpan_2083

        if not is_fryingpan_with_egg(fryingpan, egg):
            walk_to(fryingpan)
            if not inhand(egg):
                grab(egg)
            put_inside(egg, fryingpan)

        scramble_egg_until_cooked(egg, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)grab_executor(food_egg_2020)putin_executor(food_egg_2020, fryingpan_2083)obs(fryingpan_2083, Scramble the egg in the frying pan to check if it is fully cooked)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. food_egg_2020 is inside fryingpan_2083. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by left hand. 
##############################
From agent.py
obs(fryingpan_2083, Scramble the egg in the frying pan to check if it is fully cooked)
Get this information:  fryingpan_2083 is inside dining_room_201. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close to kitchen_counter_230. fryingpan_2083 is close to food_egg_2020. fryingpan_2083 is close to character_65. fryingpan_2083 is on kitchen_counter_230. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to actually scramble the egg in the frying pan. Although the egg has been placed in the frying pan, there is no action that involves scrambling it to ensure it is fully cooked.
##############################
Task Summary:
Task Goal:
Scramble egg by the fryingpan.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)', 'grab_executor(food_egg_2020)', 'walk_executor(cutting_board_2051)', 'put_executor(food_egg_2020, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_egg_2020)', 'cut_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'put_executor(food_egg_2020, fryingpan_2083)', 'walk_executor(fryingpan_2083)', 'walk_executor(fryingpan_2083)', 'grab_executor(food_egg_2020)', 'putin_executor(food_egg_2020, fryingpan_2083)']
Time info:
Time consume: 111 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 159
goal generate times: 5
goal correct times: 0
action_num: 21

Task complete rate:
Keystate: k1 - Requires: 8 steps
Keystate: k2 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
