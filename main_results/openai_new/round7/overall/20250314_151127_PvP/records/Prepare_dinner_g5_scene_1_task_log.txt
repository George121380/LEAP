From agent.py
Reset goals: The sub-goals are: 
['1. Fry the steak.', '2. Cut the steak and put it on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_stove_with_fryingpan_and_steak(stove: item):
    # Function to check if there is a frying pan with steak on the stove
    symbol fryingpan_with_steak=exists fryingpan: item : (is_fryingpan(fryingpan) and on(fryingpan, stove) and exists steak: item : (is_food_steak(steak) and inside(steak, fryingpan)))
    return fryingpan_with_steak

behavior place_steak_in_fryingpan(steak: item, fryingpan: item):
    body:
        if not inside(steak, fryingpan):
            if not inhand(steak):
                grab(steak)
            put_inside(steak, fryingpan)

behavior place_fryingpan_on_stove(fryingpan: item, stove: item):
    body:
        if not on(fryingpan, stove):
            if not inhand(fryingpan):
                grab(fryingpan)
            put_on(fryingpan, stove)

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        if not is_stove_with_fryingpan_and_steak(stove):
            walk_to(fryingpan)
            # Ensure the character is close to the frying pan

            place_steak_in_fryingpan(steak, fryingpan)
            # Place the steak in the frying pan

            walk_to(stove)
            # Ensure the character is close to the stove

            place_fryingpan_on_stove(fryingpan, stove)
            # Place the frying pan on the stove

        turn_on_stove(stove)
        # Turn on the stove to start frying the steak

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_dry_pasta_2114_around_kitchen_counter_119(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def is_fry_pan_ready(frying_pan: item):
    # Function to check if the frying pan is on the stove and ready to be used
    return is_fryingpan(frying_pan) and on(frying_pan, stove)

behavior place_steak_on_fry_pan(steak: item, frying_pan: item):
    body:
        if not inhand(steak):
            grab(steak)
        if not on(steak, frying_pan):
            put_on(steak, frying_pan)

behavior fry_steak(frying_pan: item, steak: item, stove: item):
    body:
        if not is_fry_pan_ready(frying_pan):
            put_on(frying_pan, stove)
        place_steak_on_fry_pan(steak, frying_pan)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak item

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_steak(frying_pan, steak, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_dry_pasta_2114_around_kitchen_counter_119(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_steak_for_frying(fryingpan:item, steak:item, stove:item):
    body:
        if not inside(steak, fryingpan):
            grab(steak)
            put_on(steak, fryingpan)
        if not on(fryingpan, stove):
            grab(fryingpan)
            put_on(fryingpan, stove)

behavior fry_steak(fryingpan:item, stove:item):
    body:
        if not is_on(stove) and has_switch(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind steak: item where:
            is_food_steak(steak)
        # Select the steak to be fried

        bind stove: item where:
            is_stove(stove)
        # Select a stove to cook on

        prepare_steak_for_frying(fryingpan, steak, stove)
        fry_steak(fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_steak_for_frying(fryingpan:item, steak:item, stove:item):
    body:
        if not inside(steak, fryingpan):
            grab(steak)
            put_on(steak, fryingpan)
        if not on(fryingpan, stove):
            grab(fryingpan)
            put_on(fryingpan, stove)

behavior fry_steak(fryingpan:item, stove:item):
    body:
        if not is_on(stove) and has_switch(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind steak: item where:
            is_food_steak(steak)
        # Select the steak to be fried

        bind stove: item where:
            is_stove(stove)
        # Select a stove to cook on

        prepare_steak_for_frying(fryingpan, steak, stove)
        fry_steak(fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_steak_2080, fridge_126)
Find food_steak_2080. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2080)walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_steak_2080 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_steak_2080. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the food_steak_2080. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2080)walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the food_steak_2080. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. Grabbing food_steak_2080 by left hand. 
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the food_steak_2080. Robot is close to the cupboard_118. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_food_food_1000(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(dry_pasta,food_food_instance)
        else:
            exp(dry_pasta,food_food_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,food_food_instance]=True
        close[food_food_instance,dry_pasta]=True
    

behavior find_oil_2149_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_detergent_2011_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_steak_in_fryingpan(food_steak:item, fryingpan:item, stove:item):
    body:
        if not inhand(food_steak):
            grab(food_steak)
        if not on(food_steak, fryingpan):
            put_on(food_steak, fryingpan)
            
behavior start_cooking_steak(fryingpan:item, stove:item):
    body:
        if open(stove):
            closes(stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind food_steak: item where:
            is_food_steak(food_steak) and id[food_steak] == 2080
        # Select the steak with ID 2080

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select the frying pan with ID 2154

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        prepare_steak_in_fryingpan(food_steak, fryingpan, stove)
        # Prepare the steak in the frying pan on the stove

        start_cooking_steak(fryingpan, stove)
        # Start cooking the steak

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior prepare_steak_in_fryingpan(food_steak:item, fryingpan:item, stove:item):
    body:
        if not inhand(food_steak):
            grab(food_steak)
        if not on(food_steak, fryingpan):
            put_on(food_steak, fryingpan)
            
behavior start_cooking_steak(fryingpan:item, stove:item):
    body:
        if open(stove):
            closes(stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind food_steak: item where:
            is_food_steak(food_steak) and id[food_steak] == 2080
        # Select the steak with ID 2080

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select the frying pan with ID 2154

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        prepare_steak_in_fryingpan(food_steak, fryingpan, stove)
        # Prepare the steak in the frying pan on the stove

        start_cooking_steak(fryingpan, stove)
        # Start cooking the steak

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(fryingpan_2154, kitchen_counter_123)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)close_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the food_steak_2080. Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_123)
Fail to find fryingpan_2154 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2123)exp(fryingpan_2154, cutting_board_2123)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)close_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(fryingpan_2154, cutting_board_2123)
Fail to find fryingpan_2154 around cutting_board_2123. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fry the steak.', '2. Cut the steak.', '3. Put the steak on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_food_butter_2007_around_kitchen_counter_122(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

behavior find_fryingpan_2154_around_microwave_135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(fryingpan,microwave_instance)
        else:
            exp(fryingpan,microwave_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,microwave_instance]=True
        close[microwave_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_on_stove(fryingpan:item, stove:item):
    # Function to check if the frying pan is on the stove
    return on(fryingpan, stove)

behavior ensure_steak_is_frying(steak:item, stove:item):
    body:
        if inhand(steak):
            put_on(steak, stove)

behavior fry_steak_on_stove(stove:item, fryingpan:item, steak:item):
    body:
        if not is_fryingpan_on_stove(fryingpan, stove):
            put_on(fryingpan, stove)  # Place the frying pan on the stove

        if not is_on(stove):
            switch_on(stove)  # Turn on the stove

        ensure_steak_is_frying(steak, fryingpan)

        if inhand(steak):
            empty_a_hand()

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove_2135

        bind steak: item where:
            is_food_steak(steak) and id[steak] == 2080
        # Select food_steak_2080

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select fryingpan_2154

        fry_steak_on_stove(stove, fryingpan, steak)  

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_oil_2013_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_fryingpan_2154_around_oven_127(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_nearby(location:item):
    # Function to check if a frying pan is available near a location
    symbol has_fryingpan=exists fryingpan: item : (is_fryingpan(fryingpan) and close(fryingpan, location) and grabbable(fryingpan))
    return has_fryingpan

def is_steak_nearby(location:item):
    # Function to check if a steak is available near a location
    symbol has_steak=exists steak: item : (is_food_steak(steak) and close(steak, location) and grabbable(steak))
    return has_steak

def is_stove_ready(stove: item):
    # Function to check if the stove is ready for use
    return is_on(stove)

behavior fry_the_steak(steak: item, fryingpan: item, stove: item):
    body:
        if not inhand(steak):
            grab(steak)
        if not on(steak, fryingpan):
            put_on(steak, fryingpan)
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) 
        # Select the steak food item

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135 
        # Select stove_2135

        if not is_fryingpan_nearby(stove):
            foreach location: item:
                if is_kitchen_counter(location) or is_cutting_board(location):
                    if not visited(location):
                        observe(location, "Check for frying pan presence")

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and is_fryingpan_nearby(stove)
        # Select frying pan if nearby the stove

        fry_the_steak(steak, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_frying_pan_with_steak_on_stove(stove: item, frying_pan: item, steak: item):
    # Function to check if theres a frying pan with steak on the stove
    return is_fryingpan(frying_pan) and inhand(frying_pan) and on(frying_pan, stove) and inhand(steak)

behavior place_steak_on_fryingpan(steak: item, frying_pan: item):
    body:
        if not on(steak, frying_pan):
            put_on(steak, frying_pan)

behavior place_fryingpan_on_stove(frying_pan: item, stove: item):
    body:
        if not on(frying_pan, stove):
            put_on(frying_pan, stove)

behavior fry_steak(stove: item, frying_pan: item, steak: item):
    body:
        if not is_on(stove):
            switch_on(stove)  # Lets turn the stove on to start frying

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and id[frying_pan] == 2154
        # Select fryingpan with ID 2154
        
        bind steak: item where:
            is_food_steak(steak) and id[steak] == 2080
        # Select steak with ID 2080

        if not is_frying_pan_with_steak_on_stove(stove, frying_pan, steak):
            if not inhand(frying_pan):
                walk_to(frying_pan)
                grab(frying_pan)

            if not inhand(steak):
                walk_to(steak)
                grab(steak)

            place_steak_on_fryingpan(steak, frying_pan)
            place_fryingpan_on_stove(frying_pan, stove)
        
        fry_steak(stove, frying_pan, steak)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_frying_pan_with_steak_on_stove(stove: item, frying_pan: item, steak: item):
    # Function to check if theres a frying pan with steak on the stove
    return is_fryingpan(frying_pan) and inhand(frying_pan) and on(frying_pan, stove) and inhand(steak)

behavior place_steak_on_fryingpan(steak: item, frying_pan: item):
    body:
        if not on(steak, frying_pan):
            put_on(steak, frying_pan)

behavior place_fryingpan_on_stove(frying_pan: item, stove: item):
    body:
        if not on(frying_pan, stove):
            put_on(frying_pan, stove)

behavior fry_steak(stove: item, frying_pan: item, steak: item):
    body:
        if not is_on(stove):
            switch_on(stove)  # Lets turn the stove on to start frying

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and id[frying_pan] == 2154
        # Select fryingpan with ID 2154
        
        bind steak: item where:
            is_food_steak(steak) and id[steak] == 2080
        # Select steak with ID 2080

        if not is_frying_pan_with_steak_on_stove(stove, frying_pan, steak):
            if not inhand(frying_pan):
                walk_to(frying_pan)
                grab(frying_pan)

            if not inhand(steak):
                walk_to(steak)
                grab(steak)

            place_steak_on_fryingpan(steak, frying_pan)
            place_fryingpan_on_stove(frying_pan, stove)
        
        fry_steak(stove, frying_pan, steak)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)walk_executor(kitchen_counter_119)put_executor(food_steak_2080, kitchen_counter_119)walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the food_steak_2080. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)walk_executor(kitchen_counter_122)put_executor(food_steak_2080, kitchen_counter_122)grab_executor(fryingpan_2154)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_steak_2080. Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: Robot is close to the food_steak_2080. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(food_steak_2080, kitchen_counter_122)
Robot find: Robot is close to the food_steak_2080. Robot is close to the kitchen_counter_122. food_steak_2080 is close kitchen_counter_122. kitchen_counter_122 is close food_steak_2080. food_steak_2080 is on kitchen_counter_122. food_steak_2080 released by left hand. food_steak_2080 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the food_steak_2080. Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(food_steak_2080)
Robot find: Robot is close to the food_steak_2080. Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the food_steak_2080. Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. Grabbing food_steak_2080 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fryingpan_2154. 
##############################
From agent.py
put_executor(food_steak_2080, fryingpan_2154)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fryingpan_2154. food_steak_2080 is close fryingpan_2154. fryingpan_2154 is close food_steak_2080. food_steak_2080 is on fryingpan_2154. food_steak_2080 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_the_steak(steak: item):
    body:
        if not cut(steak):
            cuts(steak)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak item

        cut_the_steak(steak)
        # Cut the steak
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cut_the_steak(steak: item):
    body:
        if not cut(steak):
            cuts(steak)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak item

        cut_the_steak(steak)
        # Cut the steak
 
##############################
From agent.py-> find a plan in act()
walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_steak_2080)cut_executor(food_steak_2080)
##############################
From agent.py
walk_executor(food_steak_2080)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the food_steak_2080. 
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the food_steak_2080. Grabbing food_steak_2080 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_steak_2080, cutting_board_2123)
Robot find: Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_steak_2080. food_steak_2080 is close cutting_board_2123. food_steak_2080 is on cutting_board_2123. food_steak_2080 released by right hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_steak_2080)
Robot find: Robot is close to the knife_2035. Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_steak_2080)
Robot find: Robot is close to the knife_2035. Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_2068_around_tray_2068(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(tray,tray_instance)
        else:
            exp(tray,tray_instance)
    eff:
        unknown[tray]=False
        close[tray,tray_instance]=True
        close[tray_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
def is_plate_in_kitchen(plate:item):
    # Function to check if a plate is in the kitchen
    symbol in_kitchen=exists room: item : (is_kitchen(room) and inside(plate, room))
    return in_kitchen

behavior place_steak_on_plate(steak: item, plate: item):
    body:
        if inhand(steak) and not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the steak that has been cut

        bind plate: item where:
            is_plate(plate) and is_plate_in_kitchen(plate)
        # Select a plate that is inside the kitchen

        if not inhand(steak):
            grab(steak)
        place_steak_on_plate(steak, plate)
        # Place the steak on the plate

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_2068_around_tray_2068(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(tray,tray_instance)
        else:
            exp(tray,tray_instance)
    eff:
        unknown[tray]=False
        close[tray,tray_instance]=True
        close[tray_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_steak_on_plate(steak: item, plate: item):
    body:
        if not inhand(steak):
            grab(steak)
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind food_steak: item where:
            is_food_steak(food_steak)
        # Select the steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        put_steak_on_plate(food_steak, plate)
        # Put the steak on the plate

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_steak_on_plate(steak: item, plate: item):
    body:
        if not inhand(steak):
            grab(steak)
        if not on(steak, plate):
            put_on(steak, plate)

behavior __goal__():
    body:
        bind food_steak: item where:
            is_food_steak(food_steak)
        # Select the steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        put_steak_on_plate(food_steak, plate)
        # Put the steak on the plate

##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2080)walk_executor(plate_2152)put_executor(food_steak_2080, plate_2152)
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the knife_2035. Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. Grabbing food_steak_2080 by left hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the knife_2035. Robot is close to the food_steak_2080. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_steak_2080, plate_2152)
Robot find: Robot is close to the knife_2035. Robot is close to the food_steak_2080. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. food_steak_2080 is close plate_2152. plate_2152 is close food_steak_2080. food_steak_2080 is on plate_2152. food_steak_2080 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried a steak. Then cut it and put it on a plate.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_steak_2080)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'grab_executor(food_steak_2080)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118) (Failed)', 'walk_executor(kitchen_counter_123)', 'walk_executor(cutting_board_2123)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fryingpan_2154)', 'walk_executor(kitchen_counter_122)', 'put_executor(food_steak_2080, kitchen_counter_122)', 'grab_executor(fryingpan_2154)', 'walk_executor(food_steak_2080)', 'grab_executor(food_steak_2080)', 'walk_executor(fryingpan_2154)', 'put_executor(food_steak_2080, fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_steak_2080)', 'grab_executor(food_steak_2080)', 'walk_executor(cutting_board_2123)', 'put_executor(food_steak_2080, cutting_board_2123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_steak_2080)', 'cut_executor(food_steak_2080)', 'grab_executor(food_steak_2080)', 'walk_executor(plate_2152)', 'put_executor(food_steak_2080, plate_2152)']
Time info:
Time consume: 594 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 59
goal generate times: 10
goal correct times: 0
action_num: 34

Task complete rate:
Keystate: k1 - Requires: 8 steps
Keystate: k2 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
