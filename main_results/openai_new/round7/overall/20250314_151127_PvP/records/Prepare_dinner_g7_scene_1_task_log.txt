From agent.py
Reset goals: The sub-goals are: 
['1. Find the necessary ingredients and cooking pot for the fish soup.', '2. Prepare the fish by cleaning and cutting it as needed.', '3. Add the fish and other ingredients to the pot and cook them together to make the soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_onion_2009_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient_to_collect(item: item):
    # Function to check if an item is a necessary ingredient for fish soup
    return is_food_fish(item) or is_food_onion(item) or is_food_potato(item)

def is_pot_needed(pot: item):
    # Function to check if a pot is needed for the task
    return is_pot(pot)

behavior find_ingredients_and_pot():
    body:
        foreach item: item:
            if is_ingredient_to_collect(item) or is_pot_needed(item):
                if not visited(item):
                    observe(item, "Locate the necessary ingredients and pot for fish soup")

behavior __goal__():
    body:
        find_ingredients_and_pot()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_ingredient_to_collect(item: item):
    # Function to check if an item is a necessary ingredient for fish soup
    return is_food_fish(item) or is_food_onion(item) or is_food_potato(item)

def is_pot_needed(pot: item):
    # Function to check if a pot is needed for the task
    return is_pot(pot)

behavior find_ingredients_and_pot():
    body:
        foreach item: item:
            if is_ingredient_to_collect(item) or is_pot_needed(item):
                if not visited(item):
                    observe(item, "Locate the necessary ingredients and pot for fish soup")

behavior __goal__():
    body:
        find_ingredients_and_pot()

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)obs(food_fish_2093, Locate the necessary ingredients and pot for fish soup)walk_executor(fridge_126)exp(food_onion_2104, fridge_126)walk_executor(food_onion_2104)obs(food_onion_2104, Locate the necessary ingredients and pot for fish soup)walk_executor(fridge_126)exp(food_potato_2107, fridge_126)walk_executor(food_potato_2107)obs(food_potato_2107, Locate the necessary ingredients and pot for fish soup)walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Locate the necessary ingredients and pot for fish soup)walk_executor(cupboard_118)exp(pot_78, cupboard_118)walk_executor(pot_78)open_executor(pot_78)obs(pot_78, Locate the necessary ingredients and pot for fish soup)walk_executor(fridge_126)exp(food_onion_2009, fridge_126)walk_executor(food_onion_2009)obs(food_onion_2009, Locate the necessary ingredients and pot for fish soup)walk_executor(cupboard_118)exp(pot_2040, cupboard_118)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Locate the necessary ingredients and pot for fish soup)walk_executor(fridge_126)exp(food_onion_2048, fridge_126)walk_executor(food_onion_2048)obs(food_onion_2048, Locate the necessary ingredients and pot for fish soup)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
obs(food_fish_2093, Locate the necessary ingredients and pot for fish soup)obs(food_onion_2104, Locate the necessary ingredients and pot for fish soup)obs(food_potato_2107, Locate the necessary ingredients and pot for fish soup)walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Locate the necessary ingredients and pot for fish soup)walk_executor(cupboard_118)exp(pot_78, cupboard_118)walk_executor(pot_78)open_executor(pot_78)obs(pot_78, Locate the necessary ingredients and pot for fish soup)walk_executor(fridge_126)exp(food_onion_2009, fridge_126)walk_executor(food_onion_2009)obs(food_onion_2009, Locate the necessary ingredients and pot for fish soup)walk_executor(cupboard_118)exp(pot_2040, cupboard_118)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Locate the necessary ingredients and pot for fish soup)walk_executor(food_onion_2048)obs(food_onion_2048, Locate the necessary ingredients and pot for fish soup)
##############################
From agent.py
obs(food_fish_2093, Locate the necessary ingredients and pot for fish soup)
Get this information:  food_fish_2093 is inside dining_room_41. food_fish_2093 is inside fridge_126. food_fish_2093 is close to fridge_126. food_fish_2093 is close to character_240. food_fish_2093 is DIRTY.
##############################
From agent.py
obs(food_onion_2104, Locate the necessary ingredients and pot for fish soup)
Get this information:  food_onion_2104 is close to fridge_126. food_onion_2104 is close to character_240. food_onion_2104 is inside dining_room_41. food_onion_2104 is inside fridge_126. food_onion_2104 is CLEAN.
##############################
From agent.py
obs(food_potato_2107, Locate the necessary ingredients and pot for fish soup)
Get this information:  food_potato_2107 is close to fridge_126. food_potato_2107 is close to character_240. food_potato_2107 is inside dining_room_41. food_potato_2107 is inside fridge_126. food_potato_2107 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(pot_2138, cupboard_118)
Fail to find pot_2138 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(pot_2138, cupboard_117)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Locate the necessary ingredients and pot for fish soup)walk_executor(pot_78)obs(pot_78, Locate the necessary ingredients and pot for fish soup)walk_executor(kitchen_counter_119)exp(food_onion_2009, kitchen_counter_119)walk_executor(food_onion_2009)obs(food_onion_2009, Locate the necessary ingredients and pot for fish soup)walk_executor(cupboard_117)exp(pot_2040, cupboard_117)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Locate the necessary ingredients and pot for fish soup)walk_executor(food_onion_2048)obs(food_onion_2048, Locate the necessary ingredients and pot for fish soup)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(pot_2138, cupboard_117)
Fail to find pot_2138 around cupboard_117. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find and clean the fish and any other ingredients needed for the soup.', '2. Cook the fish together with the ingredients in a pot to make the soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2041_around_kitchen_counter_119(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_butter_2007_around_oven_127(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_found_and_clean(pot:item, cupboard:item):
    # Function to check if the pot is found and clean
    return visited(pot) and clean(pot)

def in_hand_limit():
    # Checks if the character can hold more items
    return has_a_free_hand(char)

behavior grab_and_clean_food(item:item):
    body:
        if not inhand(item):
            grab(item)
        if not clean(item):
            wash(item)

behavior find_and_clean_ingredients(fish:item, onion:item, potato:item):
    body:
        if not clean(fish):
            wash(fish) # Clean the fish
        if not clean(onion):
            wash(onion) # Clean the onion
        if not clean(potato):
            wash(potato) # Clean the potato

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind onion: item where:
            is_food_onion(onion)
        bind potato: item where:
            is_food_potato(potato)
        bind cupboard: item where:
            is_cupboard(cupboard)
      
        if not inhand(fish) and in_hand_limit():
            walk_to(fish)
            grab_and_clean_food(fish)

        if not inhand(onion) and in_hand_limit():
            walk_to(onion)
            grab_and_clean_food(onion)

        if not inhand(potato) and in_hand_limit():
            walk_to(potato)
            grab_and_clean_food(potato)
        
        bind pot: item where:
            is_pot(pot) and inside(pot, cupboard)
        
        if not is_pot_found_and_clean(pot, cupboard):
            if not clean(pot):
                wash(pot)
        
        find_and_clean_ingredients(fish, onion, potato)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2041_around_kitchen_counter_119(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_pot_78_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_oil_2149_around_kitchen_counter_119(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def identify_fish_ingredients(fish:item):
    # Function to identify the fish ingredient
    if not visited(fish):
        observe(fish, "Locate the fish for the soup")

def identify_and_clean_other_ingredient(ingredient:item):
    # Function to identify and clean other ingredients for the soup
    if not visited(ingredient):
        observe(ingredient, "Locate the ingredient for the soup")
    if not clean(ingredient):
        wash(ingredient)

behavior find_and_clean_fish_ingredients():
    body:
        bind fish: item where:
            is_food_fish(fish)
        identify_fish_ingredients(fish)
        # Identify the fish to be used in the soup

behavior find_and_clean_other_ingredients():
    body:
        foreach ingredient: item:
            if is_food_onion(ingredient) or is_food_potato(ingredient):
                identify_and_clean_other_ingredient(ingredient)
                # Identify and clean each other ingredient needed

behavior __goal__():
    body:
        find_and_clean_fish_ingredients()
        # Find and clean the fish needed for the soup
        
        find_and_clean_other_ingredients()
        # Find and clean other ingredients needed for the soup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2041_around_kitchen_counter_119(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_food_carrot_2086_around_kitchen_counter_119(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_pot_78_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_fish_or_vegetables_around_fridge_126():
    # Function to check if fish or vegetables are around fridge_126
    symbol has_ingredients = exists o: item : (
        (is_food_fish(o) or is_food_onion(o) or is_food_potato(o)) and close_char(char, o)
    )
    return has_ingredients

behavior find_and_grab_ingredients(fish: item, onion: item, potato: item):
    body:
        # Check and grab fish
        if not inhand(fish):
            grab(fish)
        # Check and grab onion, ensure a free hand
        if not inhand(onion) and has_a_free_hand(char):
            grab(onion)
        # Check and grab potato, ensure a free hand
        if not inhand(potato) and has_a_free_hand(char):
            grab(potato)

behavior observe_around_fridge(obj: item):
    body:
        observe(obj, "Locate the necessary ingredients and pot for fish soup")


behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select the fridge with ID 126

        # Initial action for task
        walk_to(fridge)
        switch_off(fridge)
        opens(fridge)

        if not visited(fridge) or not has_fish_or_vegetables_around_fridge_126():
            observe_around_fridge(fridge)

        bind fish: item where:
            is_food_fish(fish) and close_char(char, fish)
        # Bind fish around fridge

        bind onion: item where:
            is_food_onion(onion) and close_char(char, onion)
        # Bind onion around fridge
  
        bind potato: item where:
            is_food_potato(potato) and close_char(char, potato)
        # Bind potato around fridge

        walk_to(cupboard_118)
        # Locate and bind pot
        opens(cupboard_118)

        if not visited(cupboard_118):
            observe(cupboard_118, "Find the pot")

        bind pot: item where:
            is_pot(pot) and close_char(char, pot)

        find_and_grab_ingredients(fish, onion, potato)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2109_around_kitchen_counter_119(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_food_carrot_2015_around_kitchen_counter_119(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_oil_2149_around_kitchen_counter_119(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_pot_2138_around_knifeblock_76(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(pot,knifeblock_instance)
        else:
            exp(pot,knifeblock_instance)
    eff:
        unknown[pot]=False
        close[pot,knifeblock_instance]=True
        close[knifeblock_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredients_found(food_fish:item, food_onion:item, food_potato:item, pot:item):
    # Function to check if fish, onion, potato, and pot have been found
    return visited(food_fish) and visited(food_onion) and visited(food_potato) and visited(pot)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind potato: item where:
            is_food_potato(potato)
        # Select the potato item

        bind pot: item where:
            is_pot(pot)
        # Select the pot item

        if not is_ingredients_found(fish, onion, potato, pot):
            if not visited(fish):
                observe(fish, "Locate the necessary ingredients and pot for fish soup")
            if not visited(onion):
                observe(onion, "Locate the necessary ingredients and pot for fish soup")
            if not visited(potato):
                observe(potato, "Locate the necessary ingredients and pot for fish soup")
            if not visited(pot):
                observe(pot, "Locate the necessary ingredients and pot for fish soup")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_ingredients_found(food_fish:item, food_onion:item, food_potato:item, pot:item):
    # Function to check if fish, onion, potato, and pot have been found
    return visited(food_fish) and visited(food_onion) and visited(food_potato) and visited(pot)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind potato: item where:
            is_food_potato(potato)
        # Select the potato item

        bind pot: item where:
            is_pot(pot)
        # Select the pot item

        if not is_ingredients_found(fish, onion, potato, pot):
            if not visited(fish):
                observe(fish, "Locate the necessary ingredients and pot for fish soup")
            if not visited(onion):
                observe(onion, "Locate the necessary ingredients and pot for fish soup")
            if not visited(potato):
                observe(potato, "Locate the necessary ingredients and pot for fish soup")
            if not visited(pot):
                observe(pot, "Locate the necessary ingredients and pot for fish soup")

##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)obs(pot_78, Locate the necessary ingredients and pot for fish soup)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
obs(pot_78, Locate the necessary ingredients and pot for fish soup)
Get this information:  pot_78 is close to tray_128. pot_78 is close to wall_64. pot_78 is close to wall_67. pot_78 is close to toaster_132. pot_78 is close to wall_68. pot_78 is close to knifeblock_76. pot_78 is close to walllamp_141. pot_78 is close to floor_46. pot_78 is close to cupboard_117. pot_78 is close to cupboard_118. pot_78 is close to kitchen_counter_119. pot_78 is close to ceiling_55. pot_78 is close to kitchen_counter_122. pot_78 is close to sink_120. pot_78 is close to stovefan_125. pot_78 is close to oven_127. pot_78 is close to character_240. pot_78 is on oven_127. pot_78 is inside dining_room_41. pot_78 is OPEN. pot_78 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to clean the fish, as it is currently identified as DIRTY.
##############################
From agent.py
Human Instruction: You need to clean the fish, as it is currently identified as DIRTY.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_fish_2093 around fridge_126.
Action 5: Observe around food_fish_2093 with the question of Locate the necessary ingredients and pot for fish soup.
Action 6: Observe around food_onion_2104 with the question of Locate the necessary ingredients and pot for fish soup.
Action 7: Observe around food_potato_2107 with the question of Locate the necessary ingredients and pot for fish soup.
Action 8: Walk to cupboard_118.
Action 9: Open cupboard_118.
Action 10: look for pot_2138 around cupboard_118.
Action 11: Walk to cupboard_117.
Action 12: look for pot_2138 around cupboard_117.
Action 13: Walk to pot_78.
Action 14: Observe around pot_78 with the question of Locate the necessary ingredients and pot for fish soup.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2041_around_kitchen_counter_119(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_food_carrot_2086_around_kitchen_counter_119(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_observe_dirty_items():
    body:
        foreach item: item:
            # Find and observe food ingredients to clean
            if is_food_fish(item) or is_food_onion(item) or is_food_potato(item):
                observe(item, "Locate the necessary ingredients and pot for fish soup")

behavior find_items_for_fish_soup():
    body:
        # Select ingredients that we have already observed
        bind fish: item where:
            is_food_fish(fish) and dirty(fish)
        bind onion: item where:
            is_food_onion(onion)
        bind potato: item where:
            is_food_potato(potato)
        # Also select the pot for boiling soup
        bind pot: item where:
            is_pot(pot)

behavior clean_items(item: item):
    body:
        # If the item is dirty, clean it
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        find_and_observe_dirty_items()
        find_items_for_fish_soup()
        
        # Clean all selected ingredients available as dirty
        foreach item: item:
            if dirty(item):
                clean_items(item)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2109_around_kitchen_counter_122(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_78_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_dirty_fish_cleaned(fish:item):
    # Check if the dirty fish has been cleaned
    return clean(fish)

behavior clean_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior find_ingredient_and_clean(item:item):
    body:
        if is_food_fish(item):
            clean_fish(item)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish needed for the soup

        if not is_dirty_fish_cleaned(fish):
            find_ingredient_and_clean(fish)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_dirty_fish_cleaned(fish:item):
    # Check if the dirty fish has been cleaned
    return clean(fish)

behavior clean_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior find_ingredient_and_clean(item:item):
    body:
        if is_food_fish(item):
            clean_fish(item)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish needed for the soup

        if not is_dirty_fish_cleaned(fish):
            find_ingredient_and_clean(fish)

##############################
From agent.py-> find a plan in act()
walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_fish_2093 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2109_around_kitchen_counter_119(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_oil_2013_around_kitchen_counter_119(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient_inside_pot(pot: item, ingredient: item):
    # Function to check if an ingredient is inside the pot
    return inside(ingredient, pot)

behavior put_ingredient_in_pot(ingredient: item, pot: item):
    body:
        if not is_ingredient_inside_pot(pot, ingredient):
            if not inhand(ingredient):
                grab(ingredient)
            put_inside(ingredient, pot)

behavior cook_fish_soup(stove: item, pot: item):
    body:
        if not is_on(stove) and on(pot, stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        bind pot: item where:
            is_pot(pot)
        
        bind fish: item where:
            is_food_fish(fish)

        foreach ingredient: item:
            # If ingredient is fish, potato, or onion, place it in the pot
            if is_food_fish(ingredient) or is_food_onion(ingredient) or is_food_potato(ingredient):
                put_ingredient_in_pot(ingredient, pot)

        walk_to(stove)
        put_on(pot, stove)
        
        cook_fish_soup(stove, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2109_around_kitchen_counter_119(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_oil_2149_around_kitchen_counter_119(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_required_ingredients_for_soup(pot:item):
    # Function to check if the pot has the fish and necessary ingredients for fish soup
    symbol has_ingredients=exists o: item : ((is_food_fish(o) or is_food_onion(o) or is_food_potato(o)) and inside(o, pot))
    return has_ingredients

def is_stove_with_pot_and_water(stove: item, pot: item):
    # Function to check if there is a pot with water on the stove
    return is_pot(pot) and has_water(pot) and on(pot, stove)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior cook_fish_and_ingredients(fish:item, onion:item, potato:item, pot:item):
    body:
        if not inside(fish, pot):
            put_inside(fish, pot)
        if not inside(onion, pot):
            put_inside(onion, pot)
        if not inside(potato, pot):
            put_inside(potato, pot)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        bind pot: item where:
            is_pot(pot) and id[pot] == 2138

        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2093

        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2104

        bind potato: item where:
            is_food_potato(potato) and id[potato] == 2107

        if not has_required_ingredients_for_soup(pot):
            cook_fish_and_ingredients(fish, onion, potato, pot)

        if not is_stove_with_pot_and_water(stove, pot):
            fill_pot_with_water(pot)
            place_pot_on_stove(pot, stove)

        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2109_around_kitchen_counter_119(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def are_ingredients_in_pot(fish: item, pot: item, stove: item):
    # Check if all necessary ingredients are inside the pot and placed on the stove
    return inside(fish, pot) and on(pot, stove)

def is_fish_prepared(fish: item):
    # Check if the fish is clean
    return clean(fish)

behavior put_fish_in_pot(fish: item, pot: item):
    body:
        if not inside(fish, pot):
            if not inhand(fish):
                grab(fish)
            put_inside(fish, pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            if not inhand(pot):
                grab(pot)
            put_on(pot, stove)

behavior cook_soup(fish: item, pot: item, stove: item):
    body:
        if are_ingredients_in_pot(fish, pot, stove) and not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind stove: item where:
            is_stove(stove)

        if not is_fish_prepared(fish):
            walk_to(fish)

        if not are_ingredients_in_pot(fish, pot, stove):
            put_fish_in_pot(fish, pot)
            place_pot_on_stove(pot, stove)

        cook_soup(fish, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def are_ingredients_in_pot(fish: item, pot: item, stove: item):
    # Check if all necessary ingredients are inside the pot and placed on the stove
    return inside(fish, pot) and on(pot, stove)

def is_fish_prepared(fish: item):
    # Check if the fish is clean
    return clean(fish)

behavior put_fish_in_pot(fish: item, pot: item):
    body:
        if not inside(fish, pot):
            if not inhand(fish):
                grab(fish)
            put_inside(fish, pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            if not inhand(pot):
                grab(pot)
            put_on(pot, stove)

behavior cook_soup(fish: item, pot: item, stove: item):
    body:
        if are_ingredients_in_pot(fish, pot, stove) and not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind stove: item where:
            is_stove(stove)

        if not is_fish_prepared(fish):
            walk_to(fish)

        if not are_ingredients_in_pot(fish, pot, stove):
            put_fish_in_pot(fish, pot)
            place_pot_on_stove(pot, stove)

        cook_soup(fish, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)putin_executor(food_fish_2093, pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_fish_2093. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
putin_executor(food_fish_2093, pot_78)
Robot find: Robot is close to the food_fish_2093. Robot is close to the pot_78. Robot is close to the oven_127. pot_78 is close food_fish_2093. food_fish_2093 is inside pot_78. food_fish_2093 is close pot_78. food_fish_2093 released by right hand. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_fish_2093. Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(cupboard_117)', 'walk_executor(pot_78)', 'walk_executor(food_fish_2093)', 'grab_executor(food_fish_2093)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_fish_2093)', 'switchoff_executor(faucet_20)', 'walk_executor(pot_78)', 'putin_executor(food_fish_2093, pot_78)', 'grab_executor(pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)']
Time info:
Time consume: 214 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 148
goal generate times: 10
goal correct times: 0
action_num: 19

Task complete rate:
Keystate: k1 - Requires: 20 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
