From agent.py
Reset goals: The sub-goals are: 
['1. Find and heat the milk to the desired temperature.', '2. Add cereal to the heated milk.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_heated(milk:item, microwave:item):
    # Check if the milk is heated in the microwave
    return inside(milk, microwave) and not is_on(microwave)

behavior heat_milk(microwave: item, milk: item):
    body:
        if not inside(milk, microwave):
            put_inside(milk, microwave)
            # Put the milk inside the microwave

        if open(microwave):
            closes(microwave)
            # Close the microwave door if its open

        if is_off(microwave):
            switch_on(microwave)
            # Switch on the microwave to heat the milk

        # Wait for the heating process (assumed to succeed)

        if is_on(microwave):
            switch_off(microwave)
            # After heating, switch off the microwave

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        walk_to(milk)
        # Approach the milk

        heat_milk(microwave, milk)
        # Heat the milk to desired temperature

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_milk_heated(milk:item, microwave:item):
    # Check if the milk is heated in the microwave
    return inside(milk, microwave) and not is_on(microwave)

behavior heat_milk(microwave: item, milk: item):
    body:
        if not inside(milk, microwave):
            put_inside(milk, microwave)
            # Put the milk inside the microwave

        if open(microwave):
            closes(microwave)
            # Close the microwave door if its open

        if is_off(microwave):
            switch_on(microwave)
            # Switch on the microwave to heat the milk

        # Wait for the heating process (assumed to succeed)

        if is_on(microwave):
            switch_off(microwave)
            # After heating, switch off the microwave

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        walk_to(milk)
        # Approach the milk

        heat_milk(microwave, milk)
        # Heat the milk to desired temperature

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)switchoff_executor(microwave_135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(milk_2115, fridge_126)
Fail to find milk_2115 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(milk_2115, kitchen_counter_119)walk_executor(milk_2115)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)switchoff_executor(microwave_135)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(milk_2115, kitchen_counter_119)
Fail to find milk_2115 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(milk_2115, cupboard_118)walk_executor(milk_2115)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)switchoff_executor(microwave_135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(milk_2115, cupboard_118)
Fail to find milk_2115 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(milk_2115, cupboard_117)walk_executor(milk_2115)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)switchoff_executor(microwave_135)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(milk_2115, cupboard_117)
Fail to find milk_2115 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2141)exp(milk_2115, bowl_2141)walk_executor(milk_2115)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)switchoff_executor(microwave_135)
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(milk_2115, bowl_2141)
Fail to find milk_2115 around bowl_2141. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_food_1000)exp(milk_2115, food_food_1000)walk_executor(milk_2115)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)switchoff_executor(microwave_135)
##############################
From agent.py
walk_executor(food_food_1000)
Robot find: Robot is close to the food_food_1000. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find milk_2115 ?
Answer: Locate the dining room labeled dining_room_41. Inside, find table_114. The milk_2115 is on table_114, so look on top of the table for milk_2115.
Re-decompose: None

##############################
From agent.py
Human Instruction: Locate the dining room labeled dining_room_41. Inside, find table_114. The milk_2115 is on table_114, so look on top of the table for milk_2115.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for milk_2115 around fridge_126.
Action 5: Walk to kitchen_counter_119.
Action 6: look for milk_2115 around kitchen_counter_119.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for milk_2115 around cupboard_118.
Action 10: Walk to cupboard_117.
Action 11: look for milk_2115 around cupboard_117.
Action 12: Walk to bowl_2141.
Action 13: look for milk_2115 around bowl_2141.
Action 14: Walk to food_food_1000.

##############################
From agent.py
exp(milk_2115, food_food_1000)
Fail to find milk_2115 around food_food_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(milk_2115, table_114)walk_executor(milk_2115)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)switchoff_executor(microwave_135)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(milk_2115, table_114)
Find milk_2115. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)switchoff_executor(microwave_135)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
walk_executor(microwave_135)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the milk_2115. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
putin_executor(milk_2115, microwave_135)
Robot find: Robot is close to the milk_2115. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. milk_2115 is close microwave_135. microwave_135 is close milk_2115. milk_2115 is inside microwave_135. milk_2115 released by right hand. 
##############################
From agent.py
close_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is closed. 
##############################
From agent.py
switchon_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is turned on. 
##############################
From agent.py
switchoff_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def is_cereal_added(milk: item):
    # Function to check if cereal is added to milk
    symbol cereal_added = exists cereal: item : (is_food_cereal(cereal) and inside(cereal, milk))
    return cereal_added

behavior add_cereal_to_milk(cereal: item, milk: item):
    body:
        if not inhand(cereal):
            grab(cereal)
        if not is_cereal_added(milk):
            put_inside(cereal, milk)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        bind milk: item where:
            is_milk(milk) and plugged(milk)
        # Select the heated milk with known setup

        add_cereal_to_milk(cereal, milk)
        # Add cereal to the heated milk

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def has_cereal_in_cup(cup: item):
    # Function to check if there is already cereal in the cup with heated milk
    symbol has_cereal=exists cereal: item : (is_food_cereal(cereal) and inside(cereal, cup))
    return has_cereal

behavior add_cereal_to_cup(cereal:item, cup:item):
    body:
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind heated_milk: item where:
            is_milk(heated_milk) and on(heated_milk, microwave_135)
        # Select the heated milk that is close to the microwave

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal from items

        bind cup: item where:
            is_cup(cup) and inside(heated_milk, cup)
        # Select the cup containing the heated milk

        if not has_cereal_in_cup(cup):
            add_cereal_to_cup(cereal, cup)
            # Add cereal to the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2064_around_stove_2135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_food,stove_instance)
        else:
            exp(food_food,stove_instance)
    eff:
        unknown[food_food]=False
        close[food_food,stove_instance]=True
        close[stove_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_heated(milk: item, microwave: item):
    # Function to check if the milk has been heated
    return inside(milk, microwave) and not is_on(microwave)

behavior add_cereal_to_milk(milk: item, cereal: item):
    body:
        if not inhand(cereal):
            grab(cereal)
        if not inside(cereal, milk):
            put_inside(cereal, milk)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the heated milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        if is_milk_heated(milk, milk):
            walk_to(milk)
            add_cereal_to_milk(milk, cereal)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_dry_pasta_2114(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind dry_pasta_instance:item where:
            is_dry_pasta(dry_pasta_instance) and id[dry_pasta_instance]==2114
        achieve close_char(char,dry_pasta_instance)
        if can_open(dry_pasta_instance):
            achieve_once open(dry_pasta_instance)
            exp(food_food,dry_pasta_instance)
        else:
            exp(food_food,dry_pasta_instance)
    eff:
        unknown[food_food]=False
        close[food_food,dry_pasta_instance]=True
        close[dry_pasta_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_has_heated_milk(pot: item):
    symbol has_heated_milk = exists o: item : (is_milk(o) and inside(o, pot) and not is_on(microwave_135))
    return has_heated_milk

def is_cereal_added(cereal: item, pot: item):
    return inside(cereal, pot)

behavior add_cereal_to_heated_milk(cereal: item, pot: item):
    body:
        if not is_cereal_added(cereal, pot):
            put_inside(cereal, pot)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        
        bind pot: item where:
            is_pot(pot) and is_pot_has_heated_milk(pot)

        add_cereal_to_heated_milk(cereal, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_add_cereal(cereal: item, milk: item):
    body:
        if not inhand(cereal):
            grab(cereal)
        if not inside(cereal, milk):
            put_inside(cereal, milk)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the heated milk with ID 2115

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        grab_and_add_cereal(cereal, milk)
        # Add the cereal to the heated milk

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_hot_milk(milk: item, cereal: item):
    body:
        if not inhand(cereal):
            grab(cereal)
        if not inside(cereal, milk):
            put_inside(cereal, milk)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the heated milk with ID 2115

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        add_cereal_to_hot_milk(milk, cereal)
        # Add cereal to the heated milk

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. add cereal to the heated milk." ?
Answer: Find a cup to put the milk in. Then add cereal into the cup.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Find a cup, pour the hot milk into it, and then add cereal.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_cup_2133(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2133
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(food_food,cup_instance)
        else:
            exp(food_food,cup_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cup_instance]=True
        close[cup_instance,food_food]=True
    

behavior find_measuring_cup_2012_around_dishwasher_129(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(measuring_cup,dishwasher_instance)
        else:
            exp(measuring_cup,dishwasher_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,dishwasher_instance]=True
        close[dishwasher_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_hot_milk_and_cereal_ready(cup: item):
    # Function to check if the hot milk and cereal are ready in the cup
    symbol has_hot_milk_and_cereal = exists cereal: item : (is_food_cereal(cereal) and inside(cereal, cup))
    return has_hot_milk_and_cereal

behavior pour_hot_milk_into_cup(milk: item, cup: item):
    body:
        if not inside(milk, cup):
            put_inside(milk, cup)

behavior add_cereal_to_cup(cereal: item, cup: item):
    body:
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select milk with ID 2115

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        pour_hot_milk_into_cup(milk, cup)
        add_cereal_to_cup(cereal, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_hot_milk_and_cereal_ready(cup: item):
    # Function to check if the hot milk and cereal are ready in the cup
    symbol has_hot_milk_and_cereal = exists cereal: item : (is_food_cereal(cereal) and inside(cereal, cup))
    return has_hot_milk_and_cereal

behavior pour_hot_milk_into_cup(milk: item, cup: item):
    body:
        if not inside(milk, cup):
            put_inside(milk, cup)

behavior add_cereal_to_cup(cereal: item, cup: item):
    body:
        if not inside(cereal, cup):
            put_inside(cereal, cup)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select milk with ID 2115

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        pour_hot_milk_into_cup(milk, cup)
        add_cereal_to_cup(cereal, cup)

##############################
From agent.py-> find a plan in act()
open_executor(microwave_135)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)walk_executor(food_cereal_2087)grab_executor(food_cereal_2087)walk_executor(cup_2132)putin_executor(food_cereal_2087, cup_2132)
##############################
From agent.py
open_executor(microwave_135)
Robot find: Robot is close to the milk_2115. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the milk_2115. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the milk_2115. Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
putin_executor(milk_2115, cup_2132)
Robot find: Robot is close to the milk_2115. Robot is close to the table_114. Robot is close to the cup_2132. milk_2115 is close cup_2132. cup_2132 is close milk_2115. milk_2115 is inside cup_2132. milk_2115 released by right hand. 
##############################
From agent.py
walk_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. 
##############################
From agent.py
grab_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. Grabbing food_cereal_2087 by right hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the food_cereal_2087. Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
putin_executor(food_cereal_2087, cup_2132)
Robot find: Robot is close to the food_cereal_2087. Robot is close to the table_114. Robot is close to the cup_2132. cup_2132 is close food_cereal_2087. food_cereal_2087 is inside cup_2132. food_cereal_2087 is close cup_2132. food_cereal_2087 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(kitchen_counter_119)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(cupboard_117)', 'walk_executor(bowl_2141)', 'walk_executor(food_food_1000)', 'walk_executor(table_114)', 'walk_executor(milk_2115)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(microwave_135)', 'putin_executor(milk_2115, microwave_135)', 'close_executor(microwave_135)', 'switchon_executor(microwave_135)', 'switchoff_executor(microwave_135)', 'open_executor(microwave_135)', 'grab_executor(milk_2115)', 'walk_executor(cup_2132)', 'putin_executor(milk_2115, cup_2132)', 'walk_executor(food_cereal_2087)', 'grab_executor(food_cereal_2087)', 'walk_executor(cup_2132)', 'putin_executor(food_cereal_2087, cup_2132)']
Time info:
Time consume: 153 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 112
goal generate times: 8
goal correct times: 0
action_num: 28

Task complete rate:
Keystate: k1 - Requires: 5 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
