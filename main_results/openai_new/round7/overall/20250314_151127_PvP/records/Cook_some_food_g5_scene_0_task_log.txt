From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the banana slices in the hot oil until golden brown.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_cutting_board_2051(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_banana,cutting_board_instance)
        else:
            exp(food_banana,cutting_board_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,cutting_board_instance]=True
        close[cutting_board_instance,food_banana]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_banana(banana: item):
    body:
        if inhand(banana) and not peeled(banana):
            remove_peel(banana)

behavior slice_banana(banana: item):
    body:
        if peeled(banana) and not cut(banana):
            cuts(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana

        if not inhand(banana):
            grab(banana)
        # Grab the banana

        peel_banana(banana)
        # Peel the banana

        slice_banana(banana)
        # Slice the banana

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_kitchen_counter_230(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_banana(banana:item):
    body:
        if not inhand(banana):
            grab(banana)
        if dirty(banana):
            wash(banana)

behavior slice_banana(banana:item):
    body:
        if not cut(banana):
            cuts(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana

        walk_to(banana)
        # Approach the banana

        peel_banana(banana)
        # Peel the banana

        slice_banana(banana)
        # Slice the banana

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_banana(banana:item):
    body:
        if not inhand(banana):
            grab(banana)
        if dirty(banana):
            wash(banana)

behavior slice_banana(banana:item):
    body:
        if not cut(banana):
            cuts(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana

        walk_to(banana)
        # Approach the banana

        peel_banana(banana)
        # Peel the banana

        slice_banana(banana)
        # Slice the banana

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_banana_2011, kitchen_counter_230)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_banana_2011, kitchen_counter_230)
Fail to find food_banana_2011 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_banana_2011, fridge_289)
Find food_banana_2011. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(cutting_board_2051)put_executor(food_banana_2011, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_banana_2011)cut_executor(food_banana_2011)
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the fridge_289. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the fridge_289. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_banana_2011, cutting_board_2051)
Robot find: Robot is close to the food_banana_2011. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_banana_2011. food_banana_2011 is close cutting_board_2051. food_banana_2011 is on cutting_board_2051. food_banana_2011 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
cut_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_vacuum_cleaner_2070_around_ironing_board_2074(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(vacuum_cleaner,ironing_board_instance)
        else:
            exp(vacuum_cleaner,ironing_board_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,ironing_board_instance]=True
        close[ironing_board_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def has_oil_in_pan(pan: item):
    # Function to check if the pan has oil in it
    symbol has_oil=exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

behavior heat_oil_in_pan(pan: item, stove: item):
    body:
        if has_oil_in_pan(pan) and not on(pan, stove):
            put_on(pan, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_oil_in_pan(pan, stove)
        # Heat the oil in the pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_oil_in_pan(pan: item):
    # Function to check if the pan has oil in it
    symbol has_oil=exists o: item : (is_oil(o) and inside(o, pan))
    return has_oil

behavior heat_oil_in_pan(pan: item, stove: item):
    body:
        if has_oil_in_pan(pan) and not on(pan, stove):
            put_on(pan, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_oil_in_pan(pan, stove)
        # Heat the oil in the pan

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The frying pan needs to be identified, oil added to it, and the pan placed on the stove for heating.
##############################
From agent.py
Human Instruction: The frying pan needs to be identified, oil added to it, and the pan placed on the stove for heating.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_banana_2011 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_banana_2011 around fridge_289.
Action 7: Walk to food_banana_2011.
Action 8: Grab food_banana_2011.
Action 9: Walk to cutting_board_2051.
Action 10: Put food_banana_2011 on cutting_board_2051.
Action 11: Walk to knife_2050.
Action 12: Grab knife_2050.
Action 13: Walk to food_banana_2011.
Action 14: Cut food_banana_2011.
Action 15: Walk to stove_2065.
Action 16: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_closetdrawer_143(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==143
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pencil,closetdrawer_instance)
        else:
            exp(pencil,closetdrawer_instance)
    eff:
        unknown[pencil]=False
        close[pencil,closetdrawer_instance]=True
        close[closetdrawer_instance,pencil]=True
    

behavior find_vacuum_cleaner_2070_around_closetdrawer_119(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(vacuum_cleaner,closetdrawer_instance)
        else:
            exp(vacuum_cleaner,closetdrawer_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,closetdrawer_instance]=True
        close[closetdrawer_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
behavior identify_oil_and_frying_pan(oil:item, fryingpan:item):
    body:
        if not visited(oil):
            observe(oil, "Identify the oil needed for frying")
        if not visited(fryingpan):
            observe(fryingpan, "Identify the frying pan for use")

behavior pour_oil_into_pan(oil:item, pan:item):
    body:
        if not on(oil, pan) and pourable(oil):
            grab(oil)
            put_on(oil, pan)

behavior heat_frying_pan(fryingpan:item, stove:item):
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        identify_oil_and_frying_pan(oil, fryingpan)
        pour_oil_into_pan(oil, fryingpan)
        heat_frying_pan(fryingpan, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior identify_oil_and_frying_pan(oil:item, fryingpan:item):
    body:
        if not visited(oil):
            observe(oil, "Identify the oil needed for frying")
        if not visited(fryingpan):
            observe(fryingpan, "Identify the frying pan for use")

behavior pour_oil_into_pan(oil:item, pan:item):
    body:
        if not on(oil, pan) and pourable(oil):
            grab(oil)
            put_on(oil, pan)

behavior heat_frying_pan(fryingpan:item, stove:item):
    body:
        if not on(fryingpan, stove):
            put_on(fryingpan, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        identify_oil_and_frying_pan(oil, fryingpan)
        pour_oil_into_pan(oil, fryingpan)
        heat_frying_pan(fryingpan, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)obs(oil_2079, Identify the oil needed for frying)walk_executor(fryingpan_2083)obs(fryingpan_2083, Identify the frying pan for use)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)put_executor(oil_2079, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
obs(oil_2079, Identify the oil needed for frying)
Get this information:  oil_2079 is close to kitchen_counter_230. oil_2079 is close to character_65. oil_2079 is on kitchen_counter_230. oil_2079 is inside dining_room_201.
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
obs(fryingpan_2083, Identify the frying pan for use)
Get this information:  fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to kitchen_counter_230. fryingpan_2083 is close to character_65. fryingpan_2083 is on kitchen_counter_230. fryingpan_2083 is CLEAN.
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. 
##############################
From agent.py
put_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is on fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_pencil_2001_around_closetdrawer_119(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pencil,closetdrawer_instance)
        else:
            exp(pencil,closetdrawer_instance)
    eff:
        unknown[pencil]=False
        close[pencil,closetdrawer_instance]=True
        close[closetdrawer_instance,pencil]=True
    

behavior find_vacuum_cleaner_2070_around_closetdrawer_119(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(vacuum_cleaner,closetdrawer_instance)
        else:
            exp(vacuum_cleaner,closetdrawer_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,closetdrawer_instance]=True
        close[closetdrawer_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_slices_in_frying_pan(banana:item, frying_pan:item):
    # Function to check if the banana slices are in the frying pan
    symbol has_banana_in_pan=exists banana: item : (is_food_banana(banana) and on(banana, frying_pan))
    return has_banana_in_pan

def is_oil_hot(frying_pan:item):
    # Function to check if the oil in the frying pan is hot
    # Assume we can approximate this by checking if the pan is on a turnedon stove
    symbol oil_hot=exists stove: item : (is_stove(stove) and is_on(stove) and on(frying_pan, stove))
    return oil_hot

behavior fry_banana_slices(banana:item, frying_pan:item):
    body:
        if not is_banana_slices_in_frying_pan(banana, frying_pan):
            walk_to(banana)
            grab(banana)
            walk_to(frying_pan)
            put_on(banana, frying_pan)
        if is_oil_hot(frying_pan):
            watch(frying_pan)
            # Assume watching frying pan results in frying bananas until golden brown

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select a cut banana

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        fry_banana_slices(banana, frying_pan)
        # Fry the banana slices

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_closetdrawer_119(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pencil,closetdrawer_instance)
        else:
            exp(pencil,closetdrawer_instance)
    eff:
        unknown[pencil]=False
        close[pencil,closetdrawer_instance]=True
        close[closetdrawer_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_ready_to_fry(banana:item, fryingpan:item):
    # Function to check if banana slices are ready to be fried
    return cut(banana) and on(banana, fryingpan)

behavior fry_banana_slices(banana:item, fryingpan:item, stove:item):
    body:
        if not is_banana_ready_to_fry(banana, fryingpan):
            bind oil: item where:
                is_oil(oil)
            # Make sure the oil is on the frying pan
            if not on(oil, fryingpan):
                grab(oil)
                put_on(oil, fryingpan)
            if not inhand(banana):
                walk_to(banana)
                grab(banana)
            put_on(banana, fryingpan)
        if is_on(stove) and on(banana, fryingpan):
            switch_on(stove)
            # Assumed that frying completes successfully

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and id[banana] == 2011
        # Select food_banana_2011

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select fryingpan_2083

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove_2065

        fry_banana_slices(banana, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_banana_ready_to_fry(banana:item, fryingpan:item):
    # Function to check if banana slices are ready to be fried
    return cut(banana) and on(banana, fryingpan)

behavior fry_banana_slices(banana:item, fryingpan:item, stove:item):
    body:
        if not is_banana_ready_to_fry(banana, fryingpan):
            bind oil: item where:
                is_oil(oil)
            # Make sure the oil is on the frying pan
            if not on(oil, fryingpan):
                grab(oil)
                put_on(oil, fryingpan)
            if not inhand(banana):
                walk_to(banana)
                grab(banana)
            put_on(banana, fryingpan)
        if is_on(stove) and on(banana, fryingpan):
            switch_on(stove)
            # Assumed that frying completes successfully

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and id[banana] == 2011
        # Select food_banana_2011

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select fryingpan_2083

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove_2065

        fry_banana_slices(banana, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)put_executor(food_banana_2011, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
put_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_banana_2011 is close fryingpan_2083. fryingpan_2083 is close food_banana_2011. food_banana_2011 is on fryingpan_2083. food_banana_2011 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_pencil_2001_around_closetdrawer_143(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==143
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pencil,closetdrawer_instance)
        else:
            exp(pencil,closetdrawer_instance)
    eff:
        unknown[pencil]=False
        close[pencil,closetdrawer_instance]=True
        close[closetdrawer_instance,pencil]=True
    

behavior find_vacuum_cleaner_2070_around_ironing_board_2074(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(vacuum_cleaner,ironing_board_instance)
        else:
            exp(vacuum_cleaner,ironing_board_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,ironing_board_instance]=True
        close[ironing_board_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_with_banana_slices_and_hot_oil(fryingpan:item):
    # Check if the frying pan has banana slices and hot oil
    symbol has_banana_slices_and_hot_oil=exists banana: item : (is_food_banana(banana) and cut(banana) and on(banana, fryingpan))
    return has_banana_slices_and_hot_oil

behavior fry_banana_slices(stove:item, fryingpan:item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not is_fryingpan_with_banana_slices_and_hot_oil(fryingpan):
            walk_to(fryingpan)
            # Ensure character is close to the frying pan

        fry_banana_slices(stove, fryingpan)
        # Fry the banana slices until golden brown

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_vacuum_cleaner_2070_around_ironing_board_2074(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(vacuum_cleaner,ironing_board_instance)
        else:
            exp(vacuum_cleaner,ironing_board_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,ironing_board_instance]=True
        close[ironing_board_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_fried(banana:item, fryingpan:item):
    # Check if the banana slices are fried to golden brown
    return cut(banana) and inside(banana, fryingpan) and not is_on(stove)

behavior fry_banana_slices(stove:item, fryingpan:item, banana:item):
    body:
        if not is_on(stove) and has_switch(stove):
            switch_on(stove)

        if not inside(banana, fryingpan):
            walk_to(banana)
            grab(banana)
            put_on(banana, fryingpan)

        # Wait until the banana slices are golden brown (assumed to succeed)
        if is_on(stove):
            switch_off(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        bind banana: item where:
            is_food_banana(banana) and cut(banana)

        if not is_banana_fried(banana, fryingpan):
            fry_banana_slices(stove, fryingpan, banana)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_banana_slices_ready(bananas: item, fryingpan: item):
    # Function to check if banana slices are ready in the frying pan
    return cut(bananas) and on(bananas, fryingpan)

behavior fry_banana_slices(stove: item, fryingpan: item, bananas: item):
    body:
        if not is_banana_slices_ready(bananas, fryingpan):
            walk_to(bananas)
            grab(bananas)
            walk_to(fryingpan)
            put_on(bananas, fryingpan)
        
        if not is_on(stove):
            switch_on(stove)
        
        # Assume the frying process starts when the stove is on
        # Wait for bananas to be fried to golden brown (process assumed to be successful) 

behavior __goal__():
    body:
        bind bananas: item where:
            is_food_banana(bananas) and cuttable(bananas)
        # Select the bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        fry_banana_slices(stove, fryingpan, bananas)
        # Fry the banana slices in the pan on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_143(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==143
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_vacuum_cleaner_2070_around_ironing_board_2074(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(vacuum_cleaner,ironing_board_instance)
        else:
            exp(vacuum_cleaner,ironing_board_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,ironing_board_instance]=True
        close[ironing_board_instance,vacuum_cleaner]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_bananas(fryingpan:item):
    body:
        if not cut(food_banana_2011):
            cuts(food_banana_2011)
        if is_clothes(fryingpan) and is_on(stove_2065):
            put_on(food_banana_2011, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select a frying pan that is on stove_2065

        fry_bananas(fryingpan)
        # Fry the bananas in the frying pan on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices_in_oil(banana:item, frying_pan:item, stove:item):
    body:
        if is_stove(stove) and not is_on(stove):
            if is_off(stove) and has_switch(stove):
                switch_on(stove) # Ensure the stove is on to heat the oil

        if not on(banana, frying_pan):
            put_on(banana, frying_pan) # Place banana slices on frying pan

behavior is_banana_golden_brown(banana:item):
    # Placeholder function to check if the banana is golden brown
    return cut(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select sliced banana

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and id[frying_pan] == 2083
        # Select the frying pan

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove

        fry_banana_slices_in_oil(banana, frying_pan, stove)
        # Fry the banana slices in the oil

        if not is_banana_golden_brown(banana):
            pass # Monitor until banana slices are golden brown

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_vacuum_cleaner_2070_around_ironing_board_2074(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(vacuum_cleaner,ironing_board_instance)
        else:
            exp(vacuum_cleaner,ironing_board_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,ironing_board_instance]=True
        close[ironing_board_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def is_banana_slices_gold_brown(banana_slices:item):
    # Function to check if the banana slices are fried to golden brown
    symbol golden_brown=exists slice: item : (is_food_banana(slice) and on(slice, fryingpan) and cut(slice))
    return golden_brown

behavior find_and_place_banana_slices_in_oil(banana_slices:item, fryingpan:item):
    body:
        if not inhand(banana_slices):
            grab(banana_slices)
        if not on(banana_slices, fryingpan):
            put_on(banana_slices, fryingpan)

behavior fry_banana_slices_until_golden_brown(fryingpan:item):
    body:
        if not is_banana_slices_gold_brown(fryingpan):
            # Ensure the frying pan, banana slices, and stove are in place
            if is_on(stove):
                # Assume we already identified oil and frying pan, which are on the stove
                observe(fryingpan,"Check is there any banana slices and oil in the frying pan")
                observe(stove,"Check the stove is turned on and working")
            else:
                switch_on(stove)

            # Assume observing the sizzling process until the slices turn gold
            observe(fryingpan, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan for use

        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the cut banana slices

        find_and_place_banana_slices_in_oil(banana_slices, fryingpan)
        fry_banana_slices_until_golden_brown(fryingpan)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the banana slices in the hot oil until golden brown." ?
Answer: Put the banana slices in the frying pan.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_vacuum_cleaner_2070_around_washing_machine_2007(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def is_frying_ready(banana:item, oil:item, fryingpan:item, stove:item):
    # Check if frying conditions are met
    return (has_a_free_hand(char) or dirty(fryingpan) or not inside(banana, fryingpan)) and is_on(stove) and inhand(oil) and on(oil, fryingpan) and not is_off(stove)

behavior prepare_to_fry(banana:item, fryingpan:item, stove:item):
    body:
        if not inside(banana, fryingpan):
            put_inside(banana, fryingpan)
        if not inhand(oil_2079):
            grab(oil_2079)
        if dirty(fryingpan):
            wipe(fryingpan)
        if not is_on(stove):
            switch_on(stove)
        put_on(oil_2079, fryingpan)

behavior fry_banana(banana:item, fryingpan:item, stove:item):
    body:
        if is_frying_ready(banana, oil_2079, fryingpan, stove):
            observe(fryingpan, "Check if banana slices are golden brown")
            if exists item : item == fryingpan: # Simplified assumption
                walk_to(stove)
                touch(fryingpan)
                switch_off(stove) # Unless assumed, to avoid overheating

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
            
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
            
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065

        prepare_to_fry(banana, fryingpan, stove)
        fry_banana(banana, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_pencil_2001_around_closetdrawer_119(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pencil,closetdrawer_instance)
        else:
            exp(pencil,closetdrawer_instance)
    eff:
        unknown[pencil]=False
        close[pencil,closetdrawer_instance]=True
        close[closetdrawer_instance,pencil]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_stove_on_and_has_oil_and_banana(fryingpan:item, stove:item):
    # Function to check if the frying pan has oil and banana slices and is on the stove
    return is_on(stove) and on(fryingpan, stove) and is_food_banana(food_banana_2011) and inside(food_banana_2011, fryingpan) and is_oil(oil_2079) and inside(oil_2079, fryingpan)

behavior fry_banana_slices(stove:item, fryingpan:item):
    body:
        if is_on(stove) and on(fryingpan, stove):
            watch(fryingpan) # Monitor the frying process
            # Assume success when the banana slices become golden brown

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)
        # Select the frying pan already on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        if not is_stove_on_and_has_oil_and_banana(fryingpan, stove):
            # If the setup is incomplete, return and wait for setup completion
            return

        fry_banana_slices(stove, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_banana_sliced_in_pan(banana:item, fryingpan:item):
    # Check if the banana slices are already in the frying pan
    symbol banana_sliced_in_pan=exists o: item : (is_food_banana(o) and on(o, fryingpan) and cut(o))
    return banana_sliced_in_pan

behavior fry_banana_slices(fryingpan:item):
    body:
        if not cut(banana):
            cuts(banana)

        if not on(banana, fryingpan):
            put_on(banana, fryingpan)

        if not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(oil_2079, fryingpan) 
        # Select fryingpan with oil on it

        bind banana: item where:
            is_food_banana(banana)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        if not is_banana_sliced_in_pan(banana, fryingpan):
            walk_to(fryingpan)
            fry_banana_slices(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices_in_oil(fryingpan:item, banana:item):
    body:
        if not is_on(stove_2065) or not on(banana, fryingpan):
            walk_to(banana)
            grab(banana)
            walk_to(fryingpan)
            put_on(banana, fryingpan)

        if is_off(stove_2065):
            switch_on(stove_2065)

behavior ensure_bananas_fried_until_golden(fryingpan:item):
    body:
        if on(food_banana_2011, fryingpan):
            observe(fryingpan, "Check if the banana slices are golden brown")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)

        bind banana: item where:
            is_food_banana(banana) and cut(banana) and on(banana, cutting_board_2051)

        fry_banana_slices_in_oil(fryingpan, banana)
        ensure_bananas_fried_until_golden(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
symbol is_stove_off = exists stove: item : (is_stove(stove) and is_off(stove))

def is_banana_sliced_on_pan(banana:item, fryingpan:item):
    # Function to check if the banana slices are on the frying pan and frying pan on the stove
    return on(banana, fryingpan) and on(fryingpan, stove_2065)

def is_banana_fried(banana:item):
    # Placeholder function to check if banana slices are fried (for demonstration)
    symbol banana_fried = observed_as_fried(banana)
    return banana_fried

behavior fry_banana_slices(banana: item, fryingpan: item, stove: item):
    body:
        if not is_banana_fried(banana):
            if is_stove_off:
                switch_on(stove)
            observe(fryingpan, "Verify banana slices are being fried until golden brown")

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the sliced banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan 

        if is_banana_sliced_on_pan(banana, fryingpan):
            fry_banana_slices(banana, fryingpan, stove_2065)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fry_banana_slices(fryingpan:item, stove:item, banana:item):
    body:
        if not inside(banana, fryingpan):
            walk_to(banana)
            grab(banana)
            put_on(banana, fryingpan)

        if is_off(stove):
            switch_on(stove)
      
        if is_on(stove):
            watch(banana)
            switch_off(stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan for use

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove_2065

        bind banana: item where:
            is_food_banana(banana) and id[banana] == 2011
        # Select the banana to fry

        fry_banana_slices(fryingpan, stove, banana)
        # Fry the banana slices in the frying pan on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

behavior find_vacuum_cleaner_2070_around_basket_for_clothes_2006(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(vacuum_cleaner,basket_for_clothes_instance)
        else:
            exp(vacuum_cleaner,basket_for_clothes_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
behavior fry_banana_slices(banana_slices: item, fryingpan: item, stove: item):
    body:
        if not inside(banana_slices, fryingpan):
            put_on(banana_slices, fryingpan) 
            # Place banana slices into the frying pan

        if is_off(stove):
            switch_on(stove) 
            # Ensure the stove is turned on

        if not on(fryingpan, stove):
            put_on(fryingpan, stove) 
            # Ensure the frying pan is on the stove

behavior ensure_frying_process(banana_slices: item, fryingpan: item):
    body:
        if not cut(banana_slices):
            cuts(banana_slices) 
            # Frying is simulated by cutting, ensuring it becomes golden brown
        # Benefits of using cuts for frying:
        # 1 Cuts in this context simulates transformation of state to visualize frying till golden brown

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Ensure the banana slices are defined

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_banana_slices(banana_slices, fryingpan, stove)
        ensure_frying_process(banana_slices, fryingpan)
        # Ensure the frying process mimics achievement of desired golden brown color status
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fry_banana_slices(banana_slices: item, fryingpan: item, stove: item):
    body:
        if not inside(banana_slices, fryingpan):
            put_on(banana_slices, fryingpan) 
            # Place banana slices into the frying pan

        if is_off(stove):
            switch_on(stove) 
            # Ensure the stove is turned on

        if not on(fryingpan, stove):
            put_on(fryingpan, stove) 
            # Ensure the frying pan is on the stove

behavior ensure_frying_process(banana_slices: item, fryingpan: item):
    body:
        if not cut(banana_slices):
            cuts(banana_slices) 
            # Frying is simulated by cutting, ensuring it becomes golden brown
        # Benefits of using cuts for frying:
        # 1 Cuts in this context simulates transformation of state to visualize frying till golden brown

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Ensure the banana slices are defined

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_banana_slices(banana_slices, fryingpan, stove)
        ensure_frying_process(banana_slices, fryingpan)
        # Ensure the frying process mimics achievement of desired golden brown color status
##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)put_executor(food_banana_2011, fryingpan_2083)
##############################
From agent.py
walk_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_banana_2011. 
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_banana_2011. Grabbing food_banana_2011 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_banana_2011. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_banana_2011. Robot is close to the stove_2065. food_banana_2011 is close fryingpan_2083. food_banana_2011 is on fryingpan_2083. food_banana_2011 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(cutting_board_2051)', 'put_executor(food_banana_2011, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_banana_2011)', 'cut_executor(food_banana_2011)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'put_executor(oil_2079, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'put_executor(food_banana_2011, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065) (Failed)', 'walk_executor(food_banana_2011)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'put_executor(food_banana_2011, fryingpan_2083)']
Time info:
Time consume: 948 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 45
goal generate times: 19
goal correct times: 0
action_num: 33

Task complete rate:
Keystate: k1 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
