From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Place the chicken and onion in the oven for roasting.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_cutting_board_2051(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item:item):
    body:
        if dirty(item):
            scrub(item)
            rinse(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_item(chicken)
        # Clean the chicken

        clean_item(onion)
        # Clean the onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_dishwasher_1001(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_chicken,dishwasher_instance)
        else:
            exp(food_chicken,dishwasher_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,dishwasher_instance]=True
        close[dishwasher_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_cutting_board_2051(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_and_onion_ready(chicken: item, onion: item):
    # Check if both the chicken and onion are clean
    return clean(chicken) and clean(onion)

behavior clean_item(item: item):
    body:
        if dirty(item):
            wash(item) # Wash the item if its dirty

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and dirty(chicken)
        # Select the chicken if it is dirty

        bind onion: item where:
            is_food_onion(onion) and dirty(onion)
        # Select the onion if it is dirty

        if not is_chicken_and_onion_ready(chicken, onion):
            clean_item(chicken) # Clean the chicken
            clean_item(onion)   # Clean the onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_onion_2032_around_cutting_board_2051(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_cd_2075_around_computer_417(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(cd,computer_instance)
        else:
            exp(cd,computer_instance)
    eff:
        unknown[cd]=False
        close[cd,computer_instance]=True
        close[computer_instance,cd]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item:item):
    body:
        if dirty(item):
            get_water(item)
            if not clean(item):
                wash(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        walk_to(chicken)
        # Approach the chicken

        clean_item(chicken)
        # Clean the chicken

        walk_to(onion)
        # Approach the onion

        clean_item(onion)
        # Clean the onion

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_item(item:item):
    body:
        if dirty(item):
            get_water(item)
            if not clean(item):
                wash(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        walk_to(chicken)
        # Approach the chicken

        clean_item(chicken)
        # Clean the chicken

        walk_to(onion)
        # Approach the onion

        clean_item(onion)
        # Clean the onion

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_chicken_2017, kitchen_counter_230)walk_executor(food_chicken_2017)walk_executor(cutting_board_2051)exp(food_onion_2032, cutting_board_2051)walk_executor(food_onion_2032)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_chicken_2017, kitchen_counter_230)
Fail to find food_chicken_2017 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)walk_executor(fridge_289)exp(food_onion_2032, fridge_289)walk_executor(food_onion_2032)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)walk_executor(food_onion_2032)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the fridge_289. Robot is close to the food_onion_2032. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to clean both the chicken and the onion. It should first ensure the items are clean by washing them with water if necessary. The current actions have only located and moved close to the chicken and onion, but no cleaning actions have been performed.
##############################
From agent.py
Human Instruction: The robot needs to clean both the chicken and the onion. It should first ensure the items are clean by washing them with water if necessary. The current actions have only located and moved close to the chicken and onion, but no cleaning actions have been performed.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_chicken_2017 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_chicken_2017 around fridge_289.
Action 7: Walk to food_chicken_2017.
Action 8: Walk to food_onion_2032.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_or_onion_clean(chicken: item, onion: item):
    # Check if both the chicken and onion are clean
    return clean(chicken) and clean(onion)

behavior clean_item(item: item):
    body:
        if dirty(item):
            if grabbable(item) and not inhand(item):
                grab(item)
            wash(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        if not is_chicken_or_onion_clean(chicken, onion):
            # Clean the chicken
            clean_item(chicken)
            # Clean the onion
            clean_item(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_vacuum_cleaner_2070_around_washing_machine_2007(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken_and_onion(chicken:item, onion:item, cleaning_method:string):
    body:
        if cleaning_method == wash:
            if dirty(chicken):
                wash(chicken)
            if dirty(onion):
                wash(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        clean_chicken_and_onion(chicken, onion, wash)
        # Clean the chicken and onion by washing them

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item:item):
    body:
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        clean_item(chicken)
        # Clean the chicken

        clean_item(onion)
        # Clean the onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def clean_item(item:item):
    # Function to ensure an item is clean
    if dirty(item):
        wash(item)

behavior clean_chicken_and_onion(chicken:item, onion:item):
    body:
        clean_item(chicken)
        clean_item(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken which is a food item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion which is a food item

        clean_chicken_and_onion(chicken, onion)
        # Clean both the chicken and the onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_cleaned(item: item):
    # Function to check if an item is cleaned
    return clean(item)

behavior clean_item(item: item):
    body:
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        # Clean the chicken if it is dirty
        clean_item(chicken)

        # Clean the onion if it is dirty
        clean_item(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_mouse_166_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_detergent_2084_around_sink_231(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior clean_item(item:item):
    body:
        if dirty(item):
            wash(item)

behavior perform_cleaning(char:character, chicken:item, onion:item):
    body:
        if close_char(char, chicken):
            clean_item(chicken)
        if close_char(char, onion):
            clean_item(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)

        perform_cleaning(char, chicken, onion)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. clean the chicken and onion." ?
Answer: Your current subgoal for cleaning the chicken and onion deviates from the provided thoughts. Instead, focus on placing the chicken and onion in the oven for roasting.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_to_roast(chicken: item, onion: item):
    body:
        if not clean(chicken):
            wash(chicken)
        if not clean(onion):
            wash(onion)

behavior roast_in_oven(chicken: item, onion: item, oven: item):
    body:
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inside(onion, oven):
            put_inside(onion, oven)
        if open(oven):
            closes(oven)
        # Assume that the oven can automatically start roasting when closed, 
        # otherwise additional commands would be required based on available functionalities

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and close_char(char, chicken)
        # Select the chicken from known items where the character is close
        
        bind onion: item where:
            is_food_onion(onion) and close_char(char, onion)
        # Select the onion from known items where the character is close

        walk_to(chicken)
        # Move the character close to the chicken

        prepare_to_roast(chicken, onion)
        # Prepare chicken and onion by cleaning them if needed

        bind oven:item where:
            is_oven(oven)
        # Select the oven available in the environment

        roast_in_oven(chicken, onion, oven)
        # Place chicken and onion into the oven for roasting

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_chicken_roast_ready(chicken: item, onion: item, oven: item):
    # Check if the chicken and onion are inside the oven and the oven is on
    return inside(chicken, oven) and inside(onion, oven)

behavior place_items_in_oven(chicken: item, onion: item, oven: item):
    body:
        if not inside(chicken, oven):
            grab(chicken)
            put_inside(chicken, oven)
        
        if not inside(onion, oven):
            grab(onion)
            put_inside(onion, oven)

behavior turn_on_oven(oven: item):
    body:
        if is_off(oven) and has_switch(oven):
            switch_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and close_char(char, chicken)
        # Select the chicken that is close to the character

        bind onion: item where:
            is_food_onion(onion) and close_char(char, onion)
        # Select the onion that is close to the character

        bind oven: item where:
            is_oven(oven)
        # Select an oven from items
        
        if not is_chicken_roast_ready(chicken, onion, oven):
            place_items_in_oven(chicken, onion, oven)
            # Place chicken and onion inside the oven for roasting

        turn_on_oven(oven)
        # Turn on the oven to start roasting

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_ready_to_place(oven:item):
    # Check if the oven is open and is empty
    symbol oven_ready= open(oven) and not exists o: item : (inside(o, oven))
    return oven_ready
    
behavior open_oven(oven:item):
    body:
        if closed(oven):
            opens(oven)

behavior grab_chicken_and_onion(chicken:item, onion:item):
    body:
        if not inhand(chicken):
            grab(chicken)
        if not inhand(onion):
            grab(onion)

behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        if inhand(chicken) and inhand(onion) and is_ready_to_place(oven):
            put_inside(chicken, oven)
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Assume the chicken is available in the environment
        
        bind onion: item where:
            is_food_onion(onion)
        # Assume the onion is available in the environment

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        if not inhand(chicken) or not inhand(onion):
            walk_to(chicken)
            grab_chicken_and_onion(chicken, onion)

        open_oven(oven)

        place_in_oven(chicken, onion, oven)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_ready_to_place_in_oven(chicken:item, onion:item):
    # Check if the chicken and onion are clean and not already inside the oven
    return clean(chicken) and clean(onion) and not inside(chicken, oven) and not inside(onion, oven)

behavior clean_item(item:item):
    body:
        if dirty(item):
            wash(item)

behavior place_in_oven(item:item, oven:item):
    body:
        if not inside(item, oven):
            put_inside(item, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and grabbable(chicken)
        # Select a grabbable chicken
        
        bind onion: item where:
            is_food_onion(onion) and grabbable(onion)
        # Select a grabbable onion

        bind oven: item where:
            is_oven(oven)
        # Select an oven

        if not is_ready_to_place_in_oven(chicken, onion):
            clean_item(chicken)
            clean_item(onion)

        place_in_oven(chicken, oven)
        place_in_oven(onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_item_and_place_in_oven(item: item, oven: item):
    body:
        if not inhand(item):
            grab(item)  # Grab the item if its not already in hand
        if not inside(item, oven):
            put_inside(item, oven)  # Place the item inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        grab_item_and_place_in_oven(chicken, oven)
        grab_item_and_place_in_oven(onion, oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior grab_item_and_place_in_oven(item: item, oven: item):
    body:
        if not inhand(item):
            grab(item)  # Grab the item if its not already in hand
        if not inside(item, oven):
            put_inside(item, oven)  # Place the item inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        grab_item_and_place_in_oven(chicken, oven)
        grab_item_and_place_in_oven(onion, oven)

##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(oven_295)open_executor(oven_295)putin_executor(food_chicken_2017, oven_295)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(oven_295)putin_executor(food_onion_2032, oven_295)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
putin_executor(food_chicken_2017, oven_295)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is close food_chicken_2017. food_chicken_2017 is inside oven_295. food_chicken_2017 is close oven_295. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the fridge_289. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the food_chicken_2017. Robot is close to the oven_295. 
##############################
From agent.py
putin_executor(food_onion_2032, oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the food_chicken_2017. Robot is close to the oven_295. food_onion_2032 is inside oven_295. oven_295 is close food_onion_2032. food_onion_2032 is close oven_295. food_onion_2032 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(food_chicken_2017)', 'walk_executor(food_onion_2032)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(oven_295)', 'open_executor(oven_295)', 'putin_executor(food_chicken_2017, oven_295)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(oven_295)', 'putin_executor(food_onion_2032, oven_295)']
Time info:
Time consume: 576 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 37
goal generate times: 14
goal correct times: 0
action_num: 15

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
