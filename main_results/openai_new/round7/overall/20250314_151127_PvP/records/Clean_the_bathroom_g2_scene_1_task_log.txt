From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_sink(sink:item):
    # Function to check if the sink has water
    symbol has_water=has_water(sink)
    return has_water

def is_soap_present(soap:item):
    # Function to check if the soap is available
    return is_soap(soap)

behavior prepare_sink_of_soapy_water(sink:item, soap:item):
    body:
        if not has_water_in_sink(sink):
            observe(sink, "Check if the sink has water")
        if not is_soap_present(soap):
            walk_to(soap)
            grab(soap)
        if not inside(soap, sink):
            put_inside(soap, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Bind the bathroom
        
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Bind the sink in the bathroom
        
        bind soap: item where:
            is_soap(soap)
        # Bind the soap

        walk_to(sink)
        # Approach the bathroom sink
        
        prepare_sink_of_soapy_water(sink, soap)
        # Prepare a sink of soapy water in the bathroom

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_water_in_sink(sink:item):
    # Function to check if the sink has water
    symbol has_water=has_water(sink)
    return has_water

def is_soap_present(soap:item):
    # Function to check if the soap is available
    return is_soap(soap)

behavior prepare_sink_of_soapy_water(sink:item, soap:item):
    body:
        if not has_water_in_sink(sink):
            observe(sink, "Check if the sink has water")
        if not is_soap_present(soap):
            walk_to(soap)
            grab(soap)
        if not inside(soap, sink):
            put_inside(soap, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Bind the bathroom
        
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Bind the sink in the bathroom
        
        bind soap: item where:
            is_soap(soap)
        # Bind the soap

        walk_to(sink)
        # Approach the bathroom sink
        
        prepare_sink_of_soapy_water(sink, soap)
        # Prepare a sink of soapy water in the bathroom

##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)obs(sink_19, Check if the sink has water)exp(soap_2125, bathroom_counter_18)walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, mat_32, phone_2029, cleaning_solution_2143, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
obs(sink_19, Check if the sink has water)
Get this information:  soap_2125 is on sink_19. detergent_2155 is on sink_19. sink_19 is inside bathroom_1. sink_19 is inside bathroom_counter_18. sink_19 is close to mat_32. sink_19 is close to wall_3. sink_19 is close to wall_4. sink_19 is close to floor_10. sink_19 is close to detergent_2155. sink_19 is close to floor_11. sink_19 is close to soap_2125. sink_19 is close to floor_14. sink_19 is close to after_shave_2063. sink_19 is close to bathroom_cabinet_17. sink_19 is close to bathroom_counter_18. sink_19 is close to faucet_20. sink_19 is close to cleaning_solution_2143. sink_19 is close to character_240. cleaning_solution_2143 is on sink_19. after_shave_2063 is inside sink_19. sink_19 is facing drawing_33. sink_19 is DIRTY.
##############################
From agent.py
exp(soap_2125, bathroom_counter_18)
Find soap_2125. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)obs(sink_19, Check if the sink has water)grab_executor(soap_2125)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(sink_19)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
obs(sink_19, Check if the sink has water)
Get this information:  soap_2125 is on sink_19. detergent_2155 is on sink_19. sink_19 is inside bathroom_1. sink_19 is inside bathroom_counter_18. sink_19 is close to mat_32. sink_19 is close to wall_3. sink_19 is close to wall_4. sink_19 is close to floor_10. sink_19 is close to detergent_2155. sink_19 is close to floor_11. sink_19 is close to soap_2125. sink_19 is close to floor_14. sink_19 is close to after_shave_2063. sink_19 is close to bathroom_cabinet_17. sink_19 is close to bathroom_counter_18. sink_19 is close to faucet_20. sink_19 is close to cleaning_solution_2143. sink_19 is close to character_240. cleaning_solution_2143 is on sink_19. after_shave_2063 is inside sink_19. sink_19 is facing drawing_33. sink_19 is DIRTY.
##############################
From agent.py
grab_executor(soap_2125)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. Robot is close to the soap_2125. Grabbing soap_2125 by right hand. 
##############################
From agent.py
putin_executor(soap_2125, sink_19)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. Robot is close to the soap_2125. soap_2125 is inside sink_19. soap_2125 is close sink_19. soap_2125 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have put the soap into the sink, but the sink still does not have water. Turn on the faucet to fill the sink with water to complete the task.
##############################
From agent.py
Human Instruction: You have put the soap into the sink, but the sink still does not have water. Turn on the faucet to fill the sink with water to complete the task.

The actions you have taken:
Action 1: Walk to sink_19.
Action 2: Observe around sink_19 with the question of Check if the sink has water.
Action 3: look for soap_2125 around bathroom_counter_18.
Action 4: Walk to sink_19.
Action 5: Observe around sink_19 with the question of Check if the sink has water.
Action 6: Grab soap_2125.
Action 7: Put soap_2125 into sink_19.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2120_around_basket_for_clothes_2078(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        if not has_water(sink):
            switch_on(faucet) # Turn on the faucet to fill the sink with water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==19
        # Select the sink with ID 19

        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet)
        # Select the faucet that is close to the character

        fill_sink_with_water(sink, faucet)
        # Fill the sink with water to complete the task

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2120_around_basket_for_clothes_2078(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_shoes_2033_around_basket_for_clothes_2078(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(shoes,basket_for_clothes_instance)
        else:
            exp(shoes,basket_for_clothes_instance)
    eff:
        unknown[shoes]=False
        close[shoes,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink: item):
    body:
        if not has_water(sink):
            walk_to(sink)
            get_water(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select the sink with ID 19
        
        fill_sink_with_water(sink)
        # Fill the selected sink with water

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_sink_with_water(sink: item):
    body:
        if not has_water(sink):
            walk_to(sink)
            get_water(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select the sink with ID 19
        
        fill_sink_with_water(sink)
        # Fill the selected sink with water

##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(sink_19)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The actions to put soap into the sink and turn on the faucet have been taken, but there's no confirmation that the sink has filled with water. It might be necessary to check if the sink is now filled with water and constitutes "soapy water," as no action or effect confirms water presence and the correct state for the sink.
##############################
From agent.py
Human Instruction: The actions to put soap into the sink and turn on the faucet have been taken, but there's no confirmation that the sink has filled with water. It might be necessary to check if the sink is now filled with water and constitutes "soapy water," as no action or effect confirms water presence and the correct state for the sink.

The actions you have taken:
Action 1: Walk to sink_19.
Action 2: Observe around sink_19 with the question of Check if the sink has water.
Action 3: look for soap_2125 around bathroom_counter_18.
Action 4: Walk to sink_19.
Action 5: Observe around sink_19 with the question of Check if the sink has water.
Action 6: Grab soap_2125.
Action 7: Put soap_2125 into sink_19.
Action 8: Walk to sink_19.
Action 9: Walk to faucet_20.
Action 10: Switch on faucet_20.
Action 11: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_detergent_2011_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_soapy_water_present(sink:item):
    # Function to check if there is soapy water in the sink
    symbol has_water_and_soap=exists o: item : (is_soap(o) and inside(o, sink))
    return has_water_and_soap

behavior check_and_prepare_soapy_water(sink:item, soap:item):
    body:
        if not has_water(sink):
            walk_to(sink)
            # Ensures the character is close to the sink
            if not inhand(soap):
                grab(soap)
            put_inside(soap, sink)
            # Put soap into the sink
            bind faucet: item where:
                is_faucet(faucet) and close_char(char, faucet)
            # Assume faucet is near the sink
            switch_on(faucet)
            # Turn on faucet to fill sink with water
            switch_off(faucet)
            # Stop water when sufficient

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==19
        # Select the sink with ID 19
        bind soap: item where:
            is_soap(soap) and id[soap]==2125
        # Select soap 2125
        if not is_soapy_water_present(sink):
            check_and_prepare_soapy_water(sink, soap)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_detergent_2011_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_bathroom_sink_with_soapy_water(sink: item):
    # Function to check if the sink in the bathroom has soapy water
    symbol has_soapy_water = has_water(sink) and visited(sink)
    return has_soapy_water

behavior check_sink_and_fill_water(sink:item):
    body:
        if not is_bathroom_sink_with_soapy_water(sink):
            observe(sink, "Check if the sink has water and is soapy")
            if not has_water(sink):
                water(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom_counter_18)
        walk_to(sink)
        check_sink_and_fill_water(sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_detergent_2155_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_sink(sink:item):
    # Function to check if there is water in a specified sink
    symbol water_in_sink=exists o: item : (has_water(sink))
    return water_in_sink

behavior ensure_water_in_sink(sink:item):
    body:
        if not has_water_in_sink(sink):
            water(sink) # Fill the sink with water if it does not have any

behavior create_soapy_water_in_sink(sink:item):
    body:
        if exists soap: item : (is_soap(soap) and inside(soap, sink)):
            ensure_water_in_sink(sink)
        else:
            observe(sink, "Check if there is soap inside the sink")

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select sink with ID 19
        walk_to(sink)
        # Approach sink 19
        create_soapy_water_in_sink(sink)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2120_around_basket_for_clothes_2078(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_shoes_2033_around_basket_for_clothes_2078(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(shoes,basket_for_clothes_instance)
        else:
            exp(shoes,basket_for_clothes_instance)
    eff:
        unknown[shoes]=False
        close[shoes,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,shoes]=True
    

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_soapy_water(sink:item):
    # Function to check if the sink is filled with soapy water
    symbol has_water=has_water(sink)
    return has_water

behavior ensure_sink_has_soapy_water(sink:item):
    body:
        if not is_soapy_water(sink):
            observe(sink, "Check if the sink has water and contains soapy water")
            # Observe if the sink has water and its soapy

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==19
        # Select sink with ID 19
        
        walk_to(sink)
        # Approach the sink
        
        ensure_sink_has_soapy_water(sink)
        # Ensure the sink is filled with soapy water

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_soapy_water(sink:item):
    # Function to check if the sink is filled with soapy water
    symbol has_water=has_water(sink)
    return has_water

behavior ensure_sink_has_soapy_water(sink:item):
    body:
        if not is_soapy_water(sink):
            observe(sink, "Check if the sink has water and contains soapy water")
            # Observe if the sink has water and its soapy

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==19
        # Select sink with ID 19
        
        walk_to(sink)
        # Approach the sink
        
        ensure_sink_has_soapy_water(sink)
        # Ensure the sink is filled with soapy water

##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)
##############################
From agent.py
walk_executor(sink_19)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to verify if the sink is indeed filled with water after the faucet was turned on and off, as there is no confirmation that the sink contains the soapy water required to complete the sub-task. Consider observing the sink to confirm it is filled with soapy water.
##############################
Task Summary:
Task Goal:
Prepare a sink of soapy water in the bathroom.
Action History:
['walk_executor(sink_19)', 'walk_executor(sink_19)', 'grab_executor(soap_2125)', 'putin_executor(soap_2125, sink_19)', 'walk_executor(sink_19)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(sink_19)']
Time info:
Time consume: 209 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 12
goal generate times: 7
goal correct times: 0
action_num: 9

Task complete rate:
1
Scene_id: 1
##############################
