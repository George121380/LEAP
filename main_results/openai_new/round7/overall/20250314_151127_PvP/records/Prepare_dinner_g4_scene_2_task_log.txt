From agent.py
Reset goals: The sub-goals are: 
['1. Gather the necessary ingredients for fried rice with egg, ensuring they are clean and ready to use.', '2. Fry the egg and then add the rice to the pan, mixing them thoroughly.', '3. Ensure the fried rice with egg is evenly cooked and serve.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_130(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_rice_2067_around_cupboard_130(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def prepare_ingredients_for_fried_rice():
    # Function to prepare ingredients for fried rice which are clean and available
    bind rice: item where:
        is_food_rice(rice) and clean(rice)
    bind egg: item where:
        is_food_egg(egg) and clean(egg)
    bind vegetables: item where:
        is_food_vegetable(vegetables) and clean(vegetables)

behavior gather_ingredients(rice: item, egg: item, vegetables: item):
    body:
        if not inhand(rice):
            grab(rice)
        if not inhand(egg):
            grab(egg)
        if not inhand(vegetables):
            grab(vegetables)

behavior __goal__():
    body:
        # Prepare ingredients for fried rice
        prepare_ingredients_for_fried_rice()
        
        bind rice: item where:
            is_food_rice(rice) and clean(rice)
        bind egg: item where:
            is_food_egg(egg) and clean(egg)
        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)
        
        # Gather the ingredients
        gather_ingredients(rice, egg, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_130(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2072_around_cupboard_130(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def is_clean_ingredient(ingredient: item):
    # Function to determine if an ingredient is clean
    return clean(ingredient)

behavior clean_ingredient(ingredient: item):
    body:
        if dirty(ingredient):
            wash(ingredient)
            # Clean the ingredient if it is dirty

behavior gather_ingredients(ingredient1: item, ingredient2: item, ingredient3: item):
    body:
        if not is_clean_ingredient(ingredient1):
            clean_ingredient(ingredient1)
        if not is_clean_ingredient(ingredient2):
            clean_ingredient(ingredient2)
        if not is_clean_ingredient(ingredient3):
            clean_ingredient(ingredient3)
        # Ensure all ingredients are clean

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Identify and bind to rice

        bind egg: item where:
            is_food_egg(egg)
        # Identify and bind to egg

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Identify and bind to vegetable

        gather_ingredients(rice, egg, vegetable)
        # Clean and gather the necessary ingredients for fried rice with egg

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_rice_2067_around_cupboard_130(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_salt_2068_around_cupboard_130(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def is_kitchen_counter_clean(counter:item):
    # Check if the kitchen counter is clean
    return clean(counter)

def is_rice_on_kitchen_counter(counter:item, rice:item):
    # Check if the rice is placed on the kitchen counter
    return on(rice, counter)

def is_egg_on_kitchen_counter(counter:item, egg:item):
    # Check if the egg is placed on the kitchen counter
    return on(egg, counter)

def is_vegetable_on_kitchen_counter(counter:item, vegetable:item):
    # Check if the vegetable is placed on the kitchen counter
    return on(vegetable, counter)

def is_oil_on_kitchen_counter(counter:item, oil:item):
    # Check if the oil is placed on the kitchen counter
    return on(oil, counter)

def is_salt_on_kitchen_counter(counter:item, salt:item):
    # Check if the salt is placed on the kitchen counter
    return on(salt, counter)

def is_cleaning_needed(item:item):
    # Determine if an item needs cleaning
    return dirty(item)

behavior clean_and_place_on_counter(item:item, counter:item):
    body:
        if not clean(item):
            wash(item)  # Ensure the item is clean
        if not inhand(item):
            grab(item)
        if not on(item, counter):
            put_on(item, counter)

behavior ensure_kitchen_counter_is_clean(counter:item):
    body:
        if is_cleaning_needed(counter):
            wipe(counter)  # Clean the kitchen counter if needed

behavior prepare_gather_ingredients(counter:item, rice:item, egg:item, vegetable:item, oil:item, salt:item):
    body:
        ensure_kitchen_counter_is_clean(counter)

        if not is_rice_on_kitchen_counter(counter, rice):
            clean_and_place_on_counter(rice, counter)

        if not is_egg_on_kitchen_counter(counter, egg):
            clean_and_place_on_counter(egg, counter)

        if not is_vegetable_on_kitchen_counter(counter, vegetable):
            clean_and_place_on_counter(vegetable, counter)

        if not is_oil_on_kitchen_counter(counter, oil):
            clean_and_place_on_counter(oil, counter)
        
        if not is_salt_on_kitchen_counter(counter, salt):
            clean_and_place_on_counter(salt, counter)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter
        
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetable

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        bind salt: item where:
            is_food_salt(salt)
        # Select the salt

        prepare_gather_ingredients(kitchen_counter, rice, egg, vegetable, oil, salt)
        # Gather all necessary ingredients and clean them

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_kitchen_counter_clean(counter:item):
    # Check if the kitchen counter is clean
    return clean(counter)

def is_rice_on_kitchen_counter(counter:item, rice:item):
    # Check if the rice is placed on the kitchen counter
    return on(rice, counter)

def is_egg_on_kitchen_counter(counter:item, egg:item):
    # Check if the egg is placed on the kitchen counter
    return on(egg, counter)

def is_vegetable_on_kitchen_counter(counter:item, vegetable:item):
    # Check if the vegetable is placed on the kitchen counter
    return on(vegetable, counter)

def is_oil_on_kitchen_counter(counter:item, oil:item):
    # Check if the oil is placed on the kitchen counter
    return on(oil, counter)

def is_salt_on_kitchen_counter(counter:item, salt:item):
    # Check if the salt is placed on the kitchen counter
    return on(salt, counter)

def is_cleaning_needed(item:item):
    # Determine if an item needs cleaning
    return dirty(item)

behavior clean_and_place_on_counter(item:item, counter:item):
    body:
        if not clean(item):
            wash(item)  # Ensure the item is clean
        if not inhand(item):
            grab(item)
        if not on(item, counter):
            put_on(item, counter)

behavior ensure_kitchen_counter_is_clean(counter:item):
    body:
        if is_cleaning_needed(counter):
            wipe(counter)  # Clean the kitchen counter if needed

behavior prepare_gather_ingredients(counter:item, rice:item, egg:item, vegetable:item, oil:item, salt:item):
    body:
        ensure_kitchen_counter_is_clean(counter)

        if not is_rice_on_kitchen_counter(counter, rice):
            clean_and_place_on_counter(rice, counter)

        if not is_egg_on_kitchen_counter(counter, egg):
            clean_and_place_on_counter(egg, counter)

        if not is_vegetable_on_kitchen_counter(counter, vegetable):
            clean_and_place_on_counter(vegetable, counter)

        if not is_oil_on_kitchen_counter(counter, oil):
            clean_and_place_on_counter(oil, counter)
        
        if not is_salt_on_kitchen_counter(counter, salt):
            clean_and_place_on_counter(salt, counter)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter
        
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetable

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        bind salt: item where:
            is_food_salt(salt)
        # Select the salt

        prepare_gather_ingredients(kitchen_counter, rice, egg, vegetable, oil, salt)
        # Gather all necessary ingredients and clean them

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_rice_2067, cupboard_130)walk_executor(food_rice_2067)grab_executor(food_rice_2067)wash_executor(food_rice_2067)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_128)put_executor(food_rice_2067, kitchen_counter_128)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_egg_2053)switchoff_executor(faucet_134)walk_executor(kitchen_counter_128)put_executor(food_egg_2053, kitchen_counter_128)walk_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)walk_executor(kitchen_counter_128)put_executor(food_vegetable_2072, kitchen_counter_128)walk_executor(cupboard_130)exp(oil_2102, cupboard_130)walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(oil_2102)switchoff_executor(faucet_134)walk_executor(kitchen_counter_128)put_executor(oil_2102, kitchen_counter_128)walk_executor(cupboard_130)exp(food_salt_2068, cupboard_130)walk_executor(food_salt_2068)grab_executor(food_salt_2068)wash_executor(food_salt_2068)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(kitchen_counter_128)put_executor(food_salt_2068, kitchen_counter_128)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_rice_2067, cupboard_130)
Fail to find food_rice_2067 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_rice_2067, cupboard_131)walk_executor(food_rice_2067)grab_executor(food_rice_2067)wash_executor(food_rice_2067)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_rice_2067, kitchen_counter_129)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_egg_2053)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_egg_2053, kitchen_counter_129)walk_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_vegetable_2072, kitchen_counter_129)walk_executor(fridge_140)exp(oil_2102, fridge_140)walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(oil_2102)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(oil_2102, kitchen_counter_129)open_executor(stove_2090)exp(food_salt_2068, stove_2090)walk_executor(food_salt_2068)grab_executor(food_salt_2068)wash_executor(food_salt_2068)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(kitchen_counter_129)put_executor(food_salt_2068, kitchen_counter_129)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_rice_2067, cupboard_131)
Fail to find food_rice_2067 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(food_rice_2067, kitchen_counter_128)walk_executor(food_rice_2067)grab_executor(food_rice_2067)wash_executor(food_rice_2067)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_rice_2067, kitchen_counter_129)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_egg_2053)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_egg_2053, kitchen_counter_129)walk_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_vegetable_2072, kitchen_counter_129)open_executor(stove_2090)exp(oil_2102, stove_2090)walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(oil_2102)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(oil_2102, kitchen_counter_129)walk_executor(kitchen_counter_132)exp(food_salt_2068, kitchen_counter_132)walk_executor(food_salt_2068)grab_executor(food_salt_2068)wash_executor(food_salt_2068)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(kitchen_counter_129)put_executor(food_salt_2068, kitchen_counter_129)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_rice_2067, kitchen_counter_128)
Fail to find food_rice_2067 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(food_rice_2067, kitchen_counter_129)walk_executor(food_rice_2067)grab_executor(food_rice_2067)wash_executor(food_rice_2067)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_132)put_executor(food_rice_2067, kitchen_counter_132)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_egg_2053)switchoff_executor(faucet_134)walk_executor(kitchen_counter_132)put_executor(food_egg_2053, kitchen_counter_132)walk_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)walk_executor(kitchen_counter_132)put_executor(food_vegetable_2072, kitchen_counter_132)exp(oil_2102, kitchen_counter_132)walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(oil_2102)switchoff_executor(faucet_134)walk_executor(kitchen_counter_132)put_executor(oil_2102, kitchen_counter_132)exp(food_salt_2068, kitchen_counter_132)walk_executor(food_salt_2068)grab_executor(food_salt_2068)wash_executor(food_salt_2068)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(kitchen_counter_132)put_executor(food_salt_2068, kitchen_counter_132)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(food_rice_2067, kitchen_counter_129)
Fail to find food_rice_2067 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(food_rice_2067, stove_2090)walk_executor(food_rice_2067)grab_executor(food_rice_2067)wash_executor(food_rice_2067)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_rice_2067, kitchen_counter_129)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_egg_2053)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_egg_2053, kitchen_counter_129)walk_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_vegetable_2072, kitchen_counter_129)walk_executor(kitchen_counter_132)exp(food_salt_2068, kitchen_counter_132)walk_executor(food_salt_2068)grab_executor(food_salt_2068)wash_executor(food_salt_2068)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(kitchen_counter_129)put_executor(food_salt_2068, kitchen_counter_129)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(food_rice_2067, stove_2090)
Fail to find food_rice_2067 around stove_2090. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_rice_2067, fridge_140)walk_executor(food_rice_2067)grab_executor(food_rice_2067)wash_executor(food_rice_2067)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_rice_2067, kitchen_counter_129)walk_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_egg_2053)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_egg_2053, kitchen_counter_129)walk_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_vegetable_2072, kitchen_counter_129)walk_executor(kitchen_counter_132)exp(food_salt_2068, kitchen_counter_132)walk_executor(food_salt_2068)grab_executor(food_salt_2068)wash_executor(food_salt_2068)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(kitchen_counter_129)put_executor(food_salt_2068, kitchen_counter_129)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_rice_2067, fridge_140)
Find food_rice_2067. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2067)walk_executor(kitchen_counter_129)put_executor(food_rice_2067, kitchen_counter_129)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(kitchen_counter_129)put_executor(food_egg_2053, kitchen_counter_129)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_129)put_executor(food_vegetable_2072, kitchen_counter_129)walk_executor(food_salt_2068)grab_executor(food_salt_2068)walk_executor(kitchen_counter_129)put_executor(food_salt_2068, kitchen_counter_129)
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_rice_2067 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. 
##############################
From agent.py
put_executor(food_rice_2067, kitchen_counter_129)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. food_rice_2067 is close kitchen_counter_129. kitchen_counter_129 is close food_rice_2067. food_rice_2067 is on kitchen_counter_129. food_rice_2067 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. 
##############################
From agent.py
put_executor(food_egg_2053, kitchen_counter_129)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. food_egg_2053 is close kitchen_counter_129. kitchen_counter_129 is close food_egg_2053. food_egg_2053 is on kitchen_counter_129. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. food_vegetable_2072 is cleaned. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_129. 
##############################
From agent.py
put_executor(food_vegetable_2072, kitchen_counter_129)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_129. food_vegetable_2072 is close kitchen_counter_129. kitchen_counter_129 is close food_vegetable_2072. food_vegetable_2072 is on kitchen_counter_129. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(food_salt_2068)
Robot find: Robot is close to the fridge_140. Robot is close to the food_salt_2068. 
##############################
From agent.py
grab_executor(food_salt_2068)
Robot find: Robot is close to the fridge_140. Robot is close to the food_salt_2068. Grabbing food_salt_2068 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: Robot is close to the food_salt_2068. Robot is close to the kitchen_counter_129. 
##############################
From agent.py
put_executor(food_salt_2068, kitchen_counter_129)
Robot find: Robot is close to the food_salt_2068. Robot is close to the kitchen_counter_129. food_salt_2068 is close kitchen_counter_129. kitchen_counter_129 is close food_salt_2068. food_salt_2068 is on kitchen_counter_129. food_salt_2068 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to gather the oil, as it has not been placed on the kitchen counter yet. Make sure to clean and place the oil on the counter along with the other ingredients.
##############################
From agent.py
Human Instruction: You need to gather the oil, as it has not been placed on the kitchen counter yet. Make sure to clean and place the oil on the counter along with the other ingredients.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for food_rice_2067 around cupboard_130.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for food_rice_2067 around cupboard_131.
Action 6: Walk to kitchen_counter_128.
Action 7: look for food_rice_2067 around kitchen_counter_128.
Action 8: Walk to kitchen_counter_129.
Action 9: look for food_rice_2067 around kitchen_counter_129.
Action 10: Walk to stove_2090.
Action 11: Open stove_2090.
Action 12: look for food_rice_2067 around stove_2090.
Action 13: Walk to fridge_140.
Action 14: Switch off fridge_140.
Action 15: Open fridge_140.
Action 16: look for food_rice_2067 around fridge_140.
Action 17: Grab food_rice_2067.
Action 18: Walk to kitchen_counter_129.
Action 19: Put food_rice_2067 on kitchen_counter_129.
Action 20: Walk to food_egg_2053.
Action 21: Grab food_egg_2053.
Action 22: Walk to kitchen_counter_129.
Action 23: Put food_egg_2053 on kitchen_counter_129.
Action 24: Walk to food_vegetable_2072.
Action 25: Grab food_vegetable_2072.
Action 26: Wash food_vegetable_2072.
Action 27: Walk to faucet_134.
Action 28: Switch off faucet_134.
Action 29: Walk to kitchen_counter_129.
Action 30: Put food_vegetable_2072 on kitchen_counter_129.
Action 31: Walk to food_salt_2068.
Action 32: Grab food_salt_2068.
Action 33: Walk to kitchen_counter_129.
Action 34: Put food_salt_2068 on kitchen_counter_129.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_wallshelf_187(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient_clean(ingredient: item):
    # Check if the ingredient is clean
    return clean(ingredient)

behavior wash_ingredient_if_dirty(ingredient: item):
    body:
        if dirty(ingredient):
            wash(ingredient)
            # Wash the ingredient if it is dirty to ensure it is clean

behavior ensure_oil_is_on_counter(oil: item, kitchen_counter: item):
    body:
        if not on(oil, kitchen_counter):
            if not inhand(oil):
                grab(oil)
            put_on(oil, kitchen_counter)
            # Place the oil on the kitchen counter

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Bind to the rice item

        bind egg: item where:
            is_food_egg(egg)
        # Bind to the egg item

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Bind to the vegetable item

        bind salt: item where:
            is_food_salt(salt)
        # Bind to the salt item
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Bind to the kitchen counter item

        foreach ingredient: item:
            if is_food_rice(ingredient) or is_food_egg(ingredient) or is_food_vegetable(ingredient) or is_food_salt(ingredient):
                if not is_ingredient_clean(ingredient):
                    wash_ingredient_if_dirty(ingredient)

        bind oil: item where:
            is_oil(oil)
        # Bind to the oil item
        ensure_oil_is_on_counter(oil, kitchen_counter)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_ingredient_clean(ingredient: item):
    # Check if the ingredient is clean
    return clean(ingredient)

behavior wash_ingredient_if_dirty(ingredient: item):
    body:
        if dirty(ingredient):
            wash(ingredient)
            # Wash the ingredient if it is dirty to ensure it is clean

behavior ensure_oil_is_on_counter(oil: item, kitchen_counter: item):
    body:
        if not on(oil, kitchen_counter):
            if not inhand(oil):
                grab(oil)
            put_on(oil, kitchen_counter)
            # Place the oil on the kitchen counter

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Bind to the rice item

        bind egg: item where:
            is_food_egg(egg)
        # Bind to the egg item

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Bind to the vegetable item

        bind salt: item where:
            is_food_salt(salt)
        # Bind to the salt item
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Bind to the kitchen counter item

        foreach ingredient: item:
            if is_food_rice(ingredient) or is_food_egg(ingredient) or is_food_vegetable(ingredient) or is_food_salt(ingredient):
                if not is_ingredient_clean(ingredient):
                    wash_ingredient_if_dirty(ingredient)

        bind oil: item where:
            is_oil(oil)
        # Bind to the oil item
        ensure_oil_is_on_counter(oil, kitchen_counter)


##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Gather the required ingredients: rice, eggs, and any other desired additives (such as vegetables or soy sauce) at the counter.  ', '2. Cook the rice if it is not already cooked.  ', '3. Scramble the eggs.  ', '4. Fry the cooked rice with the scrambled eggs and any additional ingredients.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_ingredients(item:item, counter:item):
    body:
        if not inhand(item):
            grab(item)
        if not on(item, counter):
            put_on(item, counter)

behavior ensure_clean_and_place_oil(oil:item, counter:item):
    body:
        if dirty(oil):
            wash(oil)
        gather_ingredients(oil, counter)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)
        
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind salt: item where:
            is_food_salt(salt)

        bind oil: item where:
            is_oil(oil)

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)

        gather_ingredients(rice, kitchen_counter)
        gather_ingredients(egg, kitchen_counter)
        gather_ingredients(vegetable, kitchen_counter)
        gather_ingredients(salt, kitchen_counter)
        ensure_clean_and_place_oil(oil, kitchen_counter)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior gather_ingredients(item:item, counter:item):
    body:
        if not inhand(item):
            grab(item)
        if not on(item, counter):
            put_on(item, counter)

behavior ensure_clean_and_place_oil(oil:item, counter:item):
    body:
        if dirty(oil):
            wash(oil)
        gather_ingredients(oil, counter)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)
        
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind salt: item where:
            is_food_salt(salt)

        bind oil: item where:
            is_oil(oil)

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)

        gather_ingredients(rice, kitchen_counter)
        gather_ingredients(egg, kitchen_counter)
        gather_ingredients(vegetable, kitchen_counter)
        gather_ingredients(salt, kitchen_counter)
        ensure_clean_and_place_oil(oil, kitchen_counter)

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(kitchen_counter_129)put_executor(food_rice_2067, kitchen_counter_129)grab_executor(food_egg_2053)put_executor(food_egg_2053, kitchen_counter_129)grab_executor(food_vegetable_2072)put_executor(food_vegetable_2072, kitchen_counter_129)grab_executor(food_salt_2068)put_executor(food_salt_2068, kitchen_counter_129)grab_executor(oil_2102)put_executor(oil_2102, kitchen_counter_129)
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Grabbing food_rice_2067 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. 
##############################
From agent.py
put_executor(food_rice_2067, kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. food_rice_2067 is close kitchen_counter_129. food_rice_2067 is on kitchen_counter_129. food_rice_2067 released by right hand. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
put_executor(food_egg_2053, kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the food_egg_2053. food_egg_2053 is close kitchen_counter_129. food_egg_2053 is on kitchen_counter_129. food_egg_2053 released by right hand. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the food_egg_2053. Robot is close to the food_vegetable_2072. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
put_executor(food_vegetable_2072, kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the food_egg_2053. Robot is close to the food_vegetable_2072. food_vegetable_2072 is close kitchen_counter_129. food_vegetable_2072 is on kitchen_counter_129. food_vegetable_2072 released by right hand. 
##############################
From agent.py
grab_executor(food_salt_2068)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the food_egg_2053. Robot is close to the food_vegetable_2072. Robot is close to the food_salt_2068. Grabbing food_salt_2068 by right hand. 
##############################
From agent.py
put_executor(food_salt_2068, kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the food_egg_2053. Robot is close to the food_vegetable_2072. Robot is close to the food_salt_2068. food_salt_2068 is close kitchen_counter_129. food_salt_2068 is on kitchen_counter_129. food_salt_2068 released by right hand. 
##############################
From agent.py
grab_executor(oil_2102)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the food_egg_2053. Robot is close to the food_vegetable_2072. Robot is close to the food_salt_2068. Robot is close to the oil_2102. Grabbing oil_2102 by right hand. 
##############################
From agent.py
put_executor(oil_2102, kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the food_egg_2053. Robot is close to the food_vegetable_2072. Robot is close to the food_salt_2068. Robot is close to the oil_2102. oil_2102 is close kitchen_counter_129. oil_2102 is on kitchen_counter_129. oil_2102 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_wallshelf_301(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

behavior find_bowl_2096_around_wallshelf_301(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_rice_cooked(rice:item):
    # Function to check if the rice is cooked
    return cooked(rice)

def is_pot_with_water_on_stove(stove:item):
    # Function to check if theres a pot with water on the stove
    symbol pot_with_water=exists pot: item : (is_pot(pot) and has_water(pot) and on(pot, stove))
    return pot_with_water

behavior cook_rice_in_pot(pot:item, stove:item, rice:item):
    body:
        if not inside(rice, pot):
            grab(rice)
            put_inside(rice, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)
            
behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not is_rice_cooked(rice):
            bind pot: item where:
                is_pot(pot)
            # Select a pot

            walk_to(pot)
            # Ensure the character is close to the pot
            
            fill_pot_with_water(pot)
            # Fill the pot with water if it doesnt have any
            
            walk_to(stove)
            # Ensure the character is close to the stove
            
            if not is_pot_with_water_on_stove(stove):
                place_pot_on_stove(pot, stove)
            
            cook_rice_in_pot(pot, stove, rice)
            
            turn_on_stove(stove)
            # Turn on the stove to start cooking the rice


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_wallshelf_301(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_rice_cooked(rice:item):
    # Function to determine if the rice is already cooked This requires observation
    symbol rice_ready=exists rice_cooked: item : (is_food_rice(rice_cooked) and cut(rice_cooked))
    return rice_ready

behavior cook_rice(rice: item):
    body:
        if not cut(rice):
            grab(rice)
            # Assume that grabbing rice allows for further preparation
            if exists pot: item : (is_pot(pot) and on(pot, stove)):
                bind pot: item where:
                    is_pot(pot) and on(pot, stove)
                observe(pot, "Determine if the pot has water")
                if not has_water(pot):
                    get_water(pot)
                put_on(rice, pot)

behavior ensure_stove_is_on(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove_2090

        if not is_rice_cooked(rice):
            ensure_stove_is_on(stove)
            # Make sure the stove is turned on for cooking
            cook_rice(rice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_knifeblock_52(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(oil,knifeblock_instance)
        else:
            exp(oil,knifeblock_instance)
    eff:
        unknown[oil]=False
        close[oil,knifeblock_instance]=True
        close[knifeblock_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_rice_cooked(pot: item):
    # Check if the rice is cooked by verifying if there is rice in the pot and it is on the stove
    symbol rice_cooked=exists rice: item : (is_food_rice(rice) and inside(rice, pot) and on(pot, stove_2090))
    return rice_cooked

behavior fill_pot_with_rice_and_water(pot: item):
    body:
        if not inside(food_rice_2067, pot):
            if not inhand(food_rice_2067):
                grab(food_rice_2067)
            put_inside(food_rice_2067, pot)
        if not has_water(pot):
            get_water(pot)

behavior cook_rice(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069
        
        if not is_rice_cooked(pot):
            fill_pot_with_rice_and_water(pot)
            # Fill the pot with rice and water
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        cook_rice(pot, stove)
        # Cook the rice by placing the pot on the stove and turning it on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_rice_cooked(rice: item):
    # Function to determine if the rice is already cooked
    return not dirty(rice)

behavior cook_rice(rice: item, pot: item, stove: item):
    body:
        if not is_rice_cooked(rice):
            walk_to(rice)
            grab(rice)
            put_inside(rice, pot)

            walk_to(stove)
            if is_off(stove):
                switch_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the uncooked rice

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        cook_rice(rice, pot, stove)
        # Cook the rice if it is not already cooked

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_wallshelf_301(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_rice_cooked(rice:item):
    # Function to check if the rice is cooked
    symbol rice_is_cooked=exists stove: item : (is_stove(stove) and on(rice, stove) and cooked(rice))
    return rice_is_cooked

def has_rice():
    # Function to check if there is rice available
    symbol rice_available=exists rice: item : is_food_rice(rice)
    return rice_available

behavior cook_rice(stove:item, rice:item):
    body:
        if not on(rice, stove):
            if not inhand(rice):
                grab(rice)
            put_on(rice, stove)
        
        if is_off(stove):
            switch_on(stove)

behavior ensure_stove_is_off(stove:item):
    body:
        if is_on(stove):
            switch_off(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        if has_rice() and not is_rice_cooked(food_rice_2067):
            bind rice: item where:
                is_food_rice(rice) and id[rice] == 2067
            # Select the rice with ID 2067

            walk_to(rice)
            # Move to the rice

            cook_rice(stove, rice)
            # Cook the rice

        ensure_stove_is_off(stove)
        # Ensure the stove is turned off after cooking

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pajamas_2039_around_basket_for_clothes_2040(pajamas:item):
    goal: not unknown(pajamas)
    body:
        assert is_pajamas(pajamas)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(pajamas,basket_for_clothes_instance)
        else:
            exp(pajamas,basket_for_clothes_instance)
    eff:
        unknown[pajamas]=False
        close[pajamas,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,pajamas]=True
    

behavior find_bowl_2095_around_sink_133(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_cooked_rice(rice:item):
    # Function to check if the rice is cooked
    return is_on(rice) 

def is_ready_to_cook_stove(stove:item):
    # Function to check if the stove is ready to cook
    return plugged(stove) and is_on(stove)

behavior put_rice_in_pot(rice:item, pot:item): 
    body:
        if not inside(rice, pot):
            grab(rice)
            put_inside(rice, pot)
            # Put rice into the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove if it is off

behavior cook_rice(rice:item):
    body:
        # Assume rices cooked state is represented by is_on(rice)
        if not has_cooked_rice(rice):
            bind pot: item where:
                is_pot(pot)
            bind stove: item where:
                is_stove(stove)
            put_rice_in_pot(rice, pot)
            place_pot_on_stove(pot, stove)
            if not is_ready_to_cook_stove(stove):
                turn_on_stove(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        cook_rice(rice)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_cooked_rice(rice:item):
    # Function to check if the rice is cooked
    return is_on(rice) 

def is_ready_to_cook_stove(stove:item):
    # Function to check if the stove is ready to cook
    return plugged(stove) and is_on(stove)

behavior put_rice_in_pot(rice:item, pot:item): 
    body:
        if not inside(rice, pot):
            grab(rice)
            put_inside(rice, pot)
            # Put rice into the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove if it is off

behavior cook_rice(rice:item):
    body:
        # Assume rices cooked state is represented by is_on(rice)
        if not has_cooked_rice(rice):
            bind pot: item where:
                is_pot(pot)
            bind stove: item where:
                is_stove(stove)
            put_rice_in_pot(rice, pot)
            place_pot_on_stove(pot, stove)
            if not is_ready_to_cook_stove(stove):
                turn_on_stove(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        cook_rice(rice)

##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2067)walk_executor(pot_2093)open_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the food_egg_2053. Robot is close to the food_vegetable_2072. Robot is close to the food_salt_2068. Robot is close to the oil_2102. Grabbing food_rice_2067 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
putin_executor(food_rice_2067, pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the pot_2093. food_rice_2067 is inside pot_2093. food_rice_2067 is close pot_2093. pot_2093 is close food_rice_2067. food_rice_2067 released by right hand. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_rice_2067. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_alcohol_2002_around_bathroom_cabinet_305(alcohol:item):
    goal: not unknown(alcohol)
    body:
        assert is_alcohol(alcohol)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(alcohol,bathroom_cabinet_instance)
        else:
            exp(alcohol,bathroom_cabinet_instance)
    eff:
        unknown[alcohol]=False
        close[alcohol,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,alcohol]=True
    

behavior find_clothes_pants_2113_around_basket_for_clothes_2040(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_pants,basket_for_clothes_instance)
        else:
            exp(clothes_pants,basket_for_clothes_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
def prepare_frying_pan_for_eggs(pan: item, stove: item):
    # Ensure the frying pan is placed on the stove, the stove is on, and oil is in the pan
    if not on(pan, stove):
        if not inhand(pan):
            grab(pan)
        put_on(pan, stove)

def crack_eggs(eggs: item, pan: item):
    # Crack eggs into the frying pan
    if not on(eggs, pan):
        if not inhand(eggs):
            grab(eggs)
        put_on(eggs, pan)

def add_oil_to_pan(oil: item, pan: item):
    # Add oil to the frying pan
    if not inhand(oil):
        grab(oil)
    put_on(oil, pan)

behavior scramble_eggs(pan: item):
    body:
        if on(pan, stove):
            grab(spatula)
            # Assume spatula is bound elsewhere in the behavior
            if inhand(spatula):
                walk_to(pan)
                # Scramble the eggs with a spatula
                mix_eggs(spatula, pan)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and id[eggs] == 2053
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and id[frying_pan] == 2101
        bind oil: item where:
            is_oil(oil) and id[oil] == 2102

        prepare_frying_pan_for_eggs(frying_pan, stove)
        if is_off(stove):
            switch_on(stove)
        add_oil_to_pan(oil, frying_pan)
        crack_eggs(eggs, frying_pan)
        scramble_eggs(frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_wallshelf_187(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_oil_on_counter(oil:item, counter:item):
    # Function to check if the oil is on the kitchen counter
    return on(oil, counter)

behavior gather_oil_and_place_on_counter(oil:item, counter:item):
    body:
        walk_to(oil)
        grab(oil)
        walk_to(counter)
        if not on(oil, counter):
            put_on(oil, counter)

behavior scramble_eggs(eggs:item, fryingpan:item):
    body:
        if not cut(eggs):
            cuts(eggs)
        if not inside(eggs, fryingpan):
            put_inside(eggs, fryingpan)

def is_oil_and_eggs_on_counter():
    # Check if both oil and eggs are on the counter
    return is_oil_on_counter(oil, counter) and on(eggs, counter)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil) and id[oil] == 2102
        # Select the oil with id 2102

        bind counter: item where:
            is_kitchen_counter(counter) and id[counter] == 129
        # Select the kitchen counter with id 129

        if not is_oil_on_counter(oil, counter):
            gather_oil_and_place_on_counter(oil, counter)

        bind eggs: item where:
            is_food_egg(eggs) and id[eggs] == 2053
        # Select the eggs with id 2053
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        if not is_oil_and_eggs_on_counter():
            walk_to(counter)

        scramble_eggs(eggs, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_wallshelf_187(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_eggs(egg:item, pan:item, stove:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not on(egg, pan):
            put_on(egg, pan)
        if is_off(stove):
            walk_to(stove)
            switch_on(stove)
        if not cut(egg):
            cuts(egg)  # Assumed to break and scramble egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select egg from items

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        scramble_eggs(egg, pan, stove)
        # Scramble the eggs on the pan using the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_wallshelf_187(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_eggs(eggs: item, fryingpan: item):
    body:
        if not inhand(eggs):
            grab(eggs)
        if not on(eggs, fryingpan):
            put_on(eggs, fryingpan)
        # Assume scrambling involves placing the eggs in the frying pan for further processing

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        scramble_eggs(eggs, fryingpan)
        # Scramble the eggs in the frying pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior scramble_eggs(eggs: item, fryingpan: item):
    body:
        if not inhand(eggs):
            grab(eggs)
        if not on(eggs, fryingpan):
            put_on(eggs, fryingpan)
        # Assume scrambling involves placing the eggs in the frying pan for further processing

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        scramble_eggs(eggs, fryingpan)
        # Scramble the eggs in the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)put_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. 
##############################
From agent.py
put_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_egg_2053. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. fryingpan_2107 is close food_egg_2053. food_egg_2053 is on fryingpan_2107. food_egg_2053 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_wallshelf_187(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_oil_on_counter(oil: item, counter: item):
    # Check if the oil is on the kitchen counter
    return on(oil, counter)

def free_hand_to_grab():
    # Check if the character has a free hand to perform a grab
    return has_a_free_hand(char)

behavior grab_oil_and_place_on_counter(oil: item, counter: item):
    body:
        if not inhand(oil) and free_hand_to_grab():
            grab(oil)
        if not is_oil_on_counter(oil, counter):
            put_on(oil, counter)

behavior start_frying_process(rice: item, eggs: item, counter: item, fryingpan: item):
    body:
        if not on(rice, fryingpan):
            walk_to(rice)
            grab(rice)
            walk_to(fryingpan)
            put_on(rice, fryingpan)

        if not on(eggs, fryingpan):
            walk_to(eggs)
            grab(eggs)
            walk_to(fryingpan)
            put_on(eggs, fryingpan)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil) and id[oil] == 2102
        # Select the oil needed for cooking

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2067
        # Select the already cooked rice

        bind eggs: item where:
            is_food_egg(eggs) and id[eggs] == 2053
        # Select the scrambled eggs
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 129
        # Select the kitchen counter to place the oil

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select the frying pan for cooking

        grab_oil_and_place_on_counter(oil, kitchen_counter)
        # Ensure that oil is placed on the counter

        start_frying_process(rice, eggs, kitchen_counter, fryingpan)
        # Start the frying process with rice and eggs in the frying pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_oil_on_counter(oil: item, counter: item):
    # Check if the oil is on the kitchen counter
    return on(oil, counter)

def free_hand_to_grab():
    # Check if the character has a free hand to perform a grab
    return has_a_free_hand(char)

behavior grab_oil_and_place_on_counter(oil: item, counter: item):
    body:
        if not inhand(oil) and free_hand_to_grab():
            grab(oil)
        if not is_oil_on_counter(oil, counter):
            put_on(oil, counter)

behavior start_frying_process(rice: item, eggs: item, counter: item, fryingpan: item):
    body:
        if not on(rice, fryingpan):
            walk_to(rice)
            grab(rice)
            walk_to(fryingpan)
            put_on(rice, fryingpan)

        if not on(eggs, fryingpan):
            walk_to(eggs)
            grab(eggs)
            walk_to(fryingpan)
            put_on(eggs, fryingpan)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil) and id[oil] == 2102
        # Select the oil needed for cooking

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2067
        # Select the already cooked rice

        bind eggs: item where:
            is_food_egg(eggs) and id[eggs] == 2053
        # Select the scrambled eggs
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 129
        # Select the kitchen counter to place the oil

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select the frying pan for cooking

        grab_oil_and_place_on_counter(oil, kitchen_counter)
        # Ensure that oil is placed on the counter

        start_frying_process(rice, eggs, kitchen_counter, fryingpan)
        # Start the frying process with rice and eggs in the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(kitchen_counter_129)put_executor(oil_2102, kitchen_counter_129)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(fryingpan_2107)put_executor(food_rice_2067, fryingpan_2107)
##############################
From agent.py
walk_executor(oil_2102)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. 
##############################
From agent.py
grab_executor(oil_2102)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Grabbing oil_2102 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. 
##############################
From agent.py
put_executor(oil_2102, kitchen_counter_129)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. oil_2102 is close kitchen_counter_129. oil_2102 is on kitchen_counter_129. oil_2102 released by right hand. 
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the food_rice_2067. Robot is close to the pot_2093. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the food_rice_2067. Robot is close to the pot_2093. Grabbing food_rice_2067 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
put_executor(food_rice_2067, fryingpan_2107)
Robot find: Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. food_rice_2067 is close fryingpan_2107. fryingpan_2107 is close food_rice_2067. food_rice_2067 is on fryingpan_2107. food_rice_2067 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to place the vegetables and any additional ingredients in the frying pan along with the rice and scrambled eggs as part of the frying process.
##############################
From agent.py
Human Instruction: The robot needs to place the vegetables and any additional ingredients in the frying pan along with the rice and scrambled eggs as part of the frying process.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for food_rice_2067 around cupboard_130.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for food_rice_2067 around cupboard_131.
Action 6: Walk to kitchen_counter_128.
Action 7: look for food_rice_2067 around kitchen_counter_128.
Action 8: Walk to kitchen_counter_129.
Action 9: look for food_rice_2067 around kitchen_counter_129.
Action 10: Walk to stove_2090.
Action 11: Open stove_2090.
Action 12: look for food_rice_2067 around stove_2090.
Action 13: Walk to fridge_140.
Action 14: Switch off fridge_140.
Action 15: Open fridge_140.
Action 16: look for food_rice_2067 around fridge_140.
Action 17: Grab food_rice_2067.
Action 18: Walk to kitchen_counter_129.
Action 19: Put food_rice_2067 on kitchen_counter_129.
Action 20: Walk to food_egg_2053.
Action 21: Grab food_egg_2053.
Action 22: Walk to kitchen_counter_129.
Action 23: Put food_egg_2053 on kitchen_counter_129.
Action 24: Walk to food_vegetable_2072.
Action 25: Grab food_vegetable_2072.
Action 26: Wash food_vegetable_2072.
Action 27: Walk to faucet_134.
Action 28: Switch off faucet_134.
Action 29: Walk to kitchen_counter_129.
Action 30: Put food_vegetable_2072 on kitchen_counter_129.
Action 31: Walk to food_salt_2068.
Action 32: Grab food_salt_2068.
Action 33: Walk to kitchen_counter_129.
Action 34: Put food_salt_2068 on kitchen_counter_129.
Action 35: Walk to food_rice_2067.
Action 36: Grab food_rice_2067.
Action 37: Walk to kitchen_counter_129.
Action 38: Put food_rice_2067 on kitchen_counter_129.
Action 39: Grab food_egg_2053.
Action 40: Put food_egg_2053 on kitchen_counter_129.
Action 41: Grab food_vegetable_2072.
Action 42: Put food_vegetable_2072 on kitchen_counter_129.
Action 43: Grab food_salt_2068.
Action 44: Put food_salt_2068 on kitchen_counter_129.
Action 45: Grab oil_2102.
Action 46: Put oil_2102 on kitchen_counter_129.
Action 47: Grab food_rice_2067.
Action 48: Walk to pot_2093.
Action 49: Open pot_2093.
Action 50: Put food_rice_2067 into pot_2093.
Action 51: Grab pot_2093.
Action 52: Walk to stove_2090.
Action 53: Put pot_2093 on stove_2090.
Action 54: Switch on stove_2090.
Action 55: Walk to food_egg_2053.
Action 56: Grab food_egg_2053.
Action 57: Walk to fryingpan_2107.
Action 58: Put food_egg_2053 on fryingpan_2107.
Action 59: Walk to oil_2102.
Action 60: Grab oil_2102.
Action 61: Walk to kitchen_counter_129.
Action 62: Put oil_2102 on kitchen_counter_129.
Action 63: Walk to food_rice_2067.
Action 64: Grab food_rice_2067.
Action 65: Walk to fryingpan_2107.
Action 66: Put food_rice_2067 on fryingpan_2107.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_stovefan_139(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==139
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(oil,stovefan_instance)
        else:
            exp(oil,stovefan_instance)
    eff:
        unknown[oil]=False
        close[oil,stovefan_instance]=True
        close[stovefan_instance,oil]=True
    

behavior find_food_onion_2026_around_wallshelf_187(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_onion,wallshelf_instance)
        else:
            exp(food_onion,wallshelf_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,wallshelf_instance]=True
        close[wallshelf_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredients_ready(fryingpan:item):
    # Check if the pan has rice, scrambled eggs, and vegetables ready for frying
    symbol ready_ingredients = exists food_rice: item :
        exists food_egg: item :
        exists food_vegetable: item :
            (is_food_rice(food_rice) and on(food_rice, fryingpan)) and 
            (is_food_egg(food_egg) and on(food_egg, fryingpan)) and 
            (is_food_vegetable(food_vegetable) and clean(food_vegetable) and on(food_vegetable, fryingpan))
    return ready_ingredients

behavior fry_rice_with_ingredients(fryingpan: item):
    body:
        if is_ingredients_ready(fryingpan):
            if is_off(fryingpan):
                switch_on(fryingpan)
            # Start frying the ingredients

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and is_ingredients_ready(fryingpan)
        # Select the frying pan with loaded ingredients
        
        walk_to(fryingpan)
        # Move to the fryingpan
        
        fry_rice_with_ingredients(fryingpan)
        # Fry the rice with scrambled eggs and vegetables

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_wallshelf_187(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_ingredients(rice:item, scrambled_eggs:item, vegetables:item, pan:item):
    body:
        if not on(rice, pan):
            grab(rice)
            put_on(rice, pan)
        if not on(scrambled_eggs, pan):
            grab(scrambled_eggs)
            put_on(scrambled_eggs, pan)
        if not on(vegetables, pan):
            grab(vegetables)
            put_on(vegetables, pan)

behavior __goal__():
    body:
        bind cooked_rice: item where:
            is_food_rice(cooked_rice) and clean(cooked_rice)
        # Select the cooked rice

        bind scrambled_egg: item where:
            is_food_egg(scrambled_egg) and clean(scrambled_egg)
        # Select the scrambled eggs

        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)
        # Select the vegetables

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan
        
        fry_rice_with_ingredients(cooked_rice, scrambled_egg, vegetables, frying_pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_rice_with_ingredients(rice:item, scrambled_eggs:item, vegetables:item, pan:item):
    body:
        if not on(rice, pan):
            grab(rice)
            put_on(rice, pan)
        if not on(scrambled_eggs, pan):
            grab(scrambled_eggs)
            put_on(scrambled_eggs, pan)
        if not on(vegetables, pan):
            grab(vegetables)
            put_on(vegetables, pan)

behavior __goal__():
    body:
        bind cooked_rice: item where:
            is_food_rice(cooked_rice) and clean(cooked_rice)
        # Select the cooked rice

        bind scrambled_egg: item where:
            is_food_egg(scrambled_egg) and clean(scrambled_egg)
        # Select the scrambled eggs

        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)
        # Select the vegetables

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan
        
        fry_rice_with_ingredients(cooked_rice, scrambled_egg, vegetables, frying_pan)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(fryingpan_2107)put_executor(food_vegetable_2072, fryingpan_2107)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_vegetable_2072. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_vegetable_2072. Robot is close to the fryingpan_2107. 
##############################
From agent.py
put_executor(food_vegetable_2072, fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_vegetable_2072. Robot is close to the fryingpan_2107. food_vegetable_2072 is close fryingpan_2107. fryingpan_2107 is close food_vegetable_2072. food_vegetable_2072 is on fryingpan_2107. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to grab and put the necessary ingredient (food_salt_2068) on the frying pan to complete the frying process with the additional ingredient.
##############################
From agent.py
Human Instruction: You need to grab and put the necessary ingredient (food_salt_2068) on the frying pan to complete the frying process with the additional ingredient.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for food_rice_2067 around cupboard_130.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for food_rice_2067 around cupboard_131.
Action 6: Walk to kitchen_counter_128.
Action 7: look for food_rice_2067 around kitchen_counter_128.
Action 8: Walk to kitchen_counter_129.
Action 9: look for food_rice_2067 around kitchen_counter_129.
Action 10: Walk to stove_2090.
Action 11: Open stove_2090.
Action 12: look for food_rice_2067 around stove_2090.
Action 13: Walk to fridge_140.
Action 14: Switch off fridge_140.
Action 15: Open fridge_140.
Action 16: look for food_rice_2067 around fridge_140.
Action 17: Grab food_rice_2067.
Action 18: Walk to kitchen_counter_129.
Action 19: Put food_rice_2067 on kitchen_counter_129.
Action 20: Walk to food_egg_2053.
Action 21: Grab food_egg_2053.
Action 22: Walk to kitchen_counter_129.
Action 23: Put food_egg_2053 on kitchen_counter_129.
Action 24: Walk to food_vegetable_2072.
Action 25: Grab food_vegetable_2072.
Action 26: Wash food_vegetable_2072.
Action 27: Walk to faucet_134.
Action 28: Switch off faucet_134.
Action 29: Walk to kitchen_counter_129.
Action 30: Put food_vegetable_2072 on kitchen_counter_129.
Action 31: Walk to food_salt_2068.
Action 32: Grab food_salt_2068.
Action 33: Walk to kitchen_counter_129.
Action 34: Put food_salt_2068 on kitchen_counter_129.
Action 35: Walk to food_rice_2067.
Action 36: Grab food_rice_2067.
Action 37: Walk to kitchen_counter_129.
Action 38: Put food_rice_2067 on kitchen_counter_129.
Action 39: Grab food_egg_2053.
Action 40: Put food_egg_2053 on kitchen_counter_129.
Action 41: Grab food_vegetable_2072.
Action 42: Put food_vegetable_2072 on kitchen_counter_129.
Action 43: Grab food_salt_2068.
Action 44: Put food_salt_2068 on kitchen_counter_129.
Action 45: Grab oil_2102.
Action 46: Put oil_2102 on kitchen_counter_129.
Action 47: Grab food_rice_2067.
Action 48: Walk to pot_2093.
Action 49: Open pot_2093.
Action 50: Put food_rice_2067 into pot_2093.
Action 51: Grab pot_2093.
Action 52: Walk to stove_2090.
Action 53: Put pot_2093 on stove_2090.
Action 54: Switch on stove_2090.
Action 55: Walk to food_egg_2053.
Action 56: Grab food_egg_2053.
Action 57: Walk to fryingpan_2107.
Action 58: Put food_egg_2053 on fryingpan_2107.
Action 59: Walk to oil_2102.
Action 60: Grab oil_2102.
Action 61: Walk to kitchen_counter_129.
Action 62: Put oil_2102 on kitchen_counter_129.
Action 63: Walk to food_rice_2067.
Action 64: Grab food_rice_2067.
Action 65: Walk to fryingpan_2107.
Action 66: Put food_rice_2067 on fryingpan_2107.
Action 67: Walk to food_vegetable_2072.
Action 68: Grab food_vegetable_2072.
Action 69: Walk to fryingpan_2107.
Action 70: Put food_vegetable_2072 on fryingpan_2107.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laptop_2015_around_bench_122(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==122
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(laptop,bench_instance)
        else:
            exp(laptop,bench_instance)
    eff:
        unknown[laptop]=False
        close[laptop,bench_instance]=True
        close[bench_instance,laptop]=True
    

behavior find_pajamas_2039_around_basket_for_clothes_2040(pajamas:item):
    goal: not unknown(pajamas)
    body:
        assert is_pajamas(pajamas)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(pajamas,basket_for_clothes_instance)
        else:
            exp(pajamas,basket_for_clothes_instance)
    eff:
        unknown[pajamas]=False
        close[pajamas,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,pajamas]=True
    

behavior find_oil_2005_around_wallshelf_187(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(oil,wallshelf_instance)
        else:
            exp(oil,wallshelf_instance)
    eff:
        unknown[oil]=False
        close[oil,wallshelf_instance]=True
        close[wallshelf_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetables_and_eggs_in_fryingpan(fryingpan:item):
    # Function to check if the vegetables and scrambled eggs are in the frying pan
    symbol has_ingredients=exists o: item : ((is_food_vegetable(o) or is_food_egg(o)) and on(o, fryingpan))
    return has_ingredients

behavior fry_rice_with_ingredients(rice: item, fryingpan: item, salt: item):
    body:
        if not has_vegetables_and_eggs_in_fryingpan(fryingpan):
            bind vegetables: item where:
                is_food_vegetable(vegetables)
            # Select the vegetables

            bind scrambled_eggs: item where:
                is_food_egg(scrambled_eggs)
            # Select the scrambled eggs

            bind stove: item where:
                is_stove(stove)

            walk_to(vegetables)
            # Move to the vegetables

            grab(vegetables)
            # Grab the vegetables if not already in hand

            walk_to(fryingpan)
            # Move to the frying pan

            put_on(vegetables, fryingpan)
            # Put the vegetables on the frying pan

            if not on(scrambled_eggs, fryingpan):
                walk_to(scrambled_eggs)
                # Move to the scrambled eggs

                grab(scrambled_eggs)
                # Grab the scrambled eggs if not in hand

                walk_to(fryingpan)
                # Move to the frying pan

                put_on(scrambled_eggs, fryingpan)
                # Put scrambled eggs on the frying pan

        if not on(rice, fryingpan):
            grab(rice)
            # Grab cooked rice if not in hand

            put_on(rice, fryingpan)
            # Put rice on the frying pan

        if close_char(char, salt) and not on(salt, fryingpan):
            grab(salt)
            # Grab salt

            put_on(salt, fryingpan)
            # Put salt on the frying pan

        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to start frying process

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and id[rice]==2067
        # Select the cooked rice

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind food_salt: item where:
            is_food_salt(food_salt)
        # Select the salt

        fry_rice_with_ingredients(rice, fryingpan, food_salt)
        # Fry the rice with ingredients

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_microwave_149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_egg_and_ingredients(rice:item, egg:item, vegetables:item, salt:item, frying_pan:item):
    body:
        if not inhand(rice):
            grab(rice)
        if not on(rice, frying_pan):
            put_on(rice, frying_pan)
            
        if not inhand(egg):
            grab(egg)
        if not on(egg, frying_pan):
            put_on(egg, frying_pan)

        if not inhand(vegetables):
            grab(vegetables)
        if not on(vegetables, frying_pan):
            put_on(vegetables, frying_pan)

        if not inhand(salt):
            grab(salt)
        if not inhand(salt):
            put_on(salt, frying_pan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetable item

        bind salt: item where:
            is_food_salt(salt)
        # Select the salt item

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select frying pan

        fry_rice_with_egg_and_ingredients(rice, egg, vegetables, salt, frying_pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_rice_with_egg_and_ingredients(rice:item, egg:item, vegetables:item, salt:item, frying_pan:item):
    body:
        if not inhand(rice):
            grab(rice)
        if not on(rice, frying_pan):
            put_on(rice, frying_pan)
            
        if not inhand(egg):
            grab(egg)
        if not on(egg, frying_pan):
            put_on(egg, frying_pan)

        if not inhand(vegetables):
            grab(vegetables)
        if not on(vegetables, frying_pan):
            put_on(vegetables, frying_pan)

        if not inhand(salt):
            grab(salt)
        if not inhand(salt):
            put_on(salt, frying_pan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetable item

        bind salt: item where:
            is_food_salt(salt)
        # Select the salt item

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select frying pan

        fry_rice_with_egg_and_ingredients(rice, egg, vegetables, salt, frying_pan)

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(fryingpan_2107)put_executor(food_rice_2067, fryingpan_2107)grab_executor(food_egg_2053)put_executor(food_egg_2053, fryingpan_2107)grab_executor(food_vegetable_2072)put_executor(food_vegetable_2072, fryingpan_2107)walk_executor(food_salt_2068)grab_executor(food_salt_2068)
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_rice_2067. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_rice_2067. Grabbing food_rice_2067 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. 
##############################
From agent.py
put_executor(food_rice_2067, fryingpan_2107)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. food_rice_2067 is close fryingpan_2107. food_rice_2067 is on fryingpan_2107. food_rice_2067 released by right hand. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
put_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the food_egg_2053. food_egg_2053 is close fryingpan_2107. food_egg_2053 is on fryingpan_2107. food_egg_2053 released by right hand. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the food_egg_2053. Robot is close to the food_vegetable_2072. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
put_executor(food_vegetable_2072, fryingpan_2107)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_rice_2067. Robot is close to the kitchen_counter_129. Robot is close to the food_egg_2053. Robot is close to the food_vegetable_2072. food_vegetable_2072 is close fryingpan_2107. food_vegetable_2072 is on fryingpan_2107. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(food_salt_2068)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_salt_2068. 
##############################
From agent.py
grab_executor(food_salt_2068)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the food_salt_2068. Grabbing food_salt_2068 by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the grabbed food_salt_2068 on the frying pan to complete the frying process with the additional ingredient.
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(kitchen_counter_128)', 'walk_executor(kitchen_counter_129)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_rice_2067)', 'walk_executor(kitchen_counter_129)', 'put_executor(food_rice_2067, kitchen_counter_129)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(kitchen_counter_129)', 'put_executor(food_egg_2053, kitchen_counter_129)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'wash_executor(food_vegetable_2072)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(kitchen_counter_129)', 'put_executor(food_vegetable_2072, kitchen_counter_129)', 'walk_executor(food_salt_2068)', 'grab_executor(food_salt_2068)', 'walk_executor(kitchen_counter_129)', 'put_executor(food_salt_2068, kitchen_counter_129)', 'walk_executor(food_rice_2067)', 'grab_executor(food_rice_2067)', 'walk_executor(kitchen_counter_129)', 'put_executor(food_rice_2067, kitchen_counter_129)', 'grab_executor(food_egg_2053)', 'put_executor(food_egg_2053, kitchen_counter_129)', 'grab_executor(food_vegetable_2072)', 'put_executor(food_vegetable_2072, kitchen_counter_129)', 'grab_executor(food_salt_2068)', 'put_executor(food_salt_2068, kitchen_counter_129)', 'grab_executor(oil_2102)', 'put_executor(oil_2102, kitchen_counter_129)', 'grab_executor(food_rice_2067)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'putin_executor(food_rice_2067, pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'put_executor(food_egg_2053, fryingpan_2107)', 'walk_executor(oil_2102)', 'grab_executor(oil_2102)', 'walk_executor(kitchen_counter_129)', 'put_executor(oil_2102, kitchen_counter_129)', 'walk_executor(food_rice_2067)', 'grab_executor(food_rice_2067)', 'walk_executor(fryingpan_2107)', 'put_executor(food_rice_2067, fryingpan_2107)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(fryingpan_2107)', 'put_executor(food_vegetable_2072, fryingpan_2107)', 'walk_executor(food_rice_2067)', 'grab_executor(food_rice_2067)', 'walk_executor(fryingpan_2107)', 'put_executor(food_rice_2067, fryingpan_2107)', 'grab_executor(food_egg_2053)', 'put_executor(food_egg_2053, fryingpan_2107)', 'grab_executor(food_vegetable_2072)', 'put_executor(food_vegetable_2072, fryingpan_2107)', 'walk_executor(food_salt_2068)', 'grab_executor(food_salt_2068)']
Time info:
Time consume: 1385 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 58
goal generate times: 20
goal correct times: 0
action_num: 74

Task complete rate:
Keystate: k1 - Requires: 10 steps
Keystate: k2 - Requires: 14 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
