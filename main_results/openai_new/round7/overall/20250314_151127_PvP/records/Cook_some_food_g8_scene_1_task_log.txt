From agent.py
Reset goals: The sub-goals are: 
['1. Boil the egg.', '2. Prepare and mix the lemon and vegetables.', '3. Combine the boiled egg with the mixed lemon and vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove(pot: item, stove: item):
    # Check if the pot is on the stove
    return on(pot, stove)

def has_water_in_pot(pot: item):
    # Check if the pot has water
    return has_water(pot)

behavior prepare_pot_for_boiling(pot: item, stove: item):
    body:
        if not has_water_in_pot(pot):
            get_water(pot) # Fill the pot with water

        if not is_pot_on_stove(pot, stove):
            put_on(pot, stove) # Place the pot on the stove

behavior turn_on_stove_for_boiling(stove: item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        prepare_pot_for_boiling(pot, stove)
        turn_on_stove_for_boiling(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_pot_on_stove(pot: item, stove: item):
    # Check if the pot is on the stove
    return on(pot, stove)

def has_water_in_pot(pot: item):
    # Check if the pot has water
    return has_water(pot)

behavior prepare_pot_for_boiling(pot: item, stove: item):
    body:
        if not has_water_in_pot(pot):
            get_water(pot) # Fill the pot with water

        if not is_pot_on_stove(pot, stove):
            put_on(pot, stove) # Place the pot on the stove

behavior turn_on_stove_for_boiling(stove: item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        prepare_pot_for_boiling(pot, stove)
        turn_on_stove_for_boiling(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(pot_2138, cupboard_118)
Fail to find pot_2138 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Fill the pot with water. The robot needs to ensure that the pot contains water before it can boil the egg.
##############################
From agent.py
Human Instruction: Fill the pot with water. The robot needs to ensure that the pot contains water before it can boil the egg.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for pot_2138 around cupboard_118.
Action 4: Walk to pot_78.
Action 5: Grab pot_78.
Action 6: Walk to faucet_20.
Action 7: Switch on faucet_20.
Action 8: Switch off faucet_20.
Action 9: Walk to stove_2135.
Action 10: Put pot_78 on stove_2135.
Action 11: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2092_around_bowl_2141(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_egg,bowl_instance)
        else:
            exp(food_egg,bowl_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,bowl_instance]=True
        close[bowl_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select pot_78

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove_2135

        if not has_water(pot):
            walk_to(pot)
            fill_pot_with_water(pot)

        walk_to(stove)
        place_pot_on_stove(pot, stove)

        if is_off(stove):
            switch_on(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select pot_78

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove_2135

        if not has_water(pot):
            walk_to(pot)
            fill_pot_with_water(pot)

        walk_to(stove)
        place_pot_on_stove(pot, stove)

        if is_off(stove):
            switch_on(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_lemon_2100_around_kitchen_counter_123(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_and_cut_ingredients(lemon:item, vegetables:item):
    body:
        if dirty(lemon):
            wash(lemon)
        if is_food_vegetable(vegetables) and dirty(vegetables):
            wash(vegetables)
        if not cut(lemon):
            cuts(lemon)
        if is_food_vegetable(vegetables) and not cut(vegetables):
            cuts(vegetables)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        clean_and_cut_ingredients(lemon, vegetables)
        # Clean and cut the lemon and vegetables

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_kitchen_counter_122(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_lemon_2100_around_kitchen_counter_122(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
def is_vegetable_clean(vegetable: item):
    # Check if the vegetable is clean
    return clean(vegetable)

behavior clean_vegetable(vegetable: item):
    body:
        if not is_vegetable_clean(vegetable):
            wash(vegetable)
            # Wash the vegetable to ensure it is clean

behavior prepare_vegetables(vegetables: item):
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and inside(vegetable, vegetables):
                clean_vegetable(vegetable) 

behavior prepare_lemon(lemon: item):
    body:
        if not cut(lemon):
            cuts(lemon)

behavior __goal__():
    body:        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select lemon

        prepare_lemon(lemon)
        prepare_vegetables(vegetables)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_kitchen_counter_122(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_lemon_2100_around_kitchen_counter_122(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_clothes_hat_2117_around_basket_for_clothes_2078(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
behavior cut_vegetables_and_lemon(vegetables:item, lemon:item):
    body:
        if is_food_vegetable(vegetables) and cuttable(vegetables) and not cut(vegetables):
            cuts(vegetables)
        if is_food_lemon(lemon) and cuttable(lemon) and not cut(lemon):
            cuts(lemon)

behavior mix_ingredients(vegetables:item, lemon:item, bowl:item):
    body:
        if not inhand(vegetables):
            grab(vegetables)
        if not inhand(lemon) and has_a_free_hand(char):
            grab(lemon)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Bind to the vegetable

        bind lemon: item where:
            is_food_lemon(lemon)
        # Bind to the lemon

        bind bowl: item where:
            is_bowl(bowl)
        # Bind to the bowl

        cut_vegetables_and_lemon(vegetables, lemon)
        mix_ingredients(vegetables, lemon, bowl)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_cutting_board_2123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_carrot,cutting_board_instance)
        else:
            exp(food_carrot,cutting_board_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cutting_board_instance]=True
        close[cutting_board_instance,food_carrot]=True
    

behavior find_food_lemon_2100_around_kitchen_counter_122(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_knife_2035_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_vegetable_and_lemon_clean(vegetable: item, lemon: item):
    # Function to check if the vegetable and lemon are clean
    return clean(vegetable) and clean(lemon)

behavior clean_vegetables_and_lemon(vegetable: item, lemon: item):
    body:
        if dirty(vegetable):
            wash(vegetable)
            # Wash the vegetable if it is dirty
        if dirty(lemon):
            wash(lemon)
            # Wash the lemon if it is dirty

behavior mix_lemon_and_vegetables(vegetable: item, lemon: item):
    body:
        if cuttable(vegetable) and not cut(vegetable):
            cuts(vegetable)
            # Cut the vegetable if it is cuttable and not already cut
        if cuttable(lemon) and not cut(lemon):
            cuts(lemon)
            # Cut the lemon if it is cuttable and not already cut

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Bind a vegetable

        bind lemon: item where:
            is_food_lemon(lemon)
        # Bind a lemon

        if not is_vegetable_and_lemon_clean(vegetable, lemon):
            clean_vegetables_and_lemon(vegetable, lemon)
            # Clean the vegetables and lemon if they are not clean

        mix_lemon_and_vegetables(vegetable, lemon)
        # Prepare and mix the lemon and vegetables

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_cutting_board_2123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_carrot,cutting_board_instance)
        else:
            exp(food_carrot,cutting_board_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cutting_board_instance]=True
        close[cutting_board_instance,food_carrot]=True
    

behavior find_food_lemon_2100_around_kitchen_counter_122(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_122(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation

def is_kitchen_counter(x: item):
    # Function to check if a given item is a kitchen counter
    symbol is_kitchen_counter=exists room: item : (is_kitchen_counter(room) and inside(x, room))
    return is_kitchen_counter

behavior prepare_ingredients(lemon: item, vegetables: item):
    body:
        if not cut(lemon) and is_food_lemon(lemon):
            cuts(lemon) # Cut the lemon if it is not cut and it is a lemon

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not cut(vegetable):
                cuts(vegetable) # Cut the vegetable if it is not cut and it is a vegetable

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Bind the kitchen counter for reference
        
        bind lemon: item where:
            is_food_lemon(lemon)
        # Bind the lemon from collected items

        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                walk_to(vegetable)
                prepare_ingredients(lemon, vegetable)
                # Prepare and mix lemon and vegetables on the kitchen counter
#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_kitchen_counter(x: item):
    # Function to check if a given item is a kitchen counter
    symbol is_kitchen_counter=exists room: item : (is_kitchen_counter(room) and inside(x, room))
    return is_kitchen_counter

behavior prepare_ingredients(lemon: item, vegetables: item):
    body:
        if not cut(lemon) and is_food_lemon(lemon):
            cuts(lemon) # Cut the lemon if it is not cut and it is a lemon

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not cut(vegetable):
                cuts(vegetable) # Cut the vegetable if it is not cut and it is a vegetable

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Bind the kitchen counter for reference
        
        bind lemon: item where:
            is_food_lemon(lemon)
        # Bind the lemon from collected items

        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                walk_to(vegetable)
                prepare_ingredients(lemon, vegetable)
                # Prepare and mix lemon and vegetables on the kitchen counter
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_vegetable_2113, kitchen_counter_122)walk_executor(food_vegetable_2113)walk_executor(kitchen_counter_122)exp(food_lemon_2100, kitchen_counter_122)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(cutting_board_2123)put_executor(food_lemon_2100, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_lemon_2100)cut_executor(food_lemon_2100)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(cutting_board_2123)put_executor(food_vegetable_2113, cutting_board_2123)walk_executor(food_vegetable_2113)cut_executor(food_vegetable_2113)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_vegetable_2113, kitchen_counter_122)
Fail to find food_vegetable_2113 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)walk_executor(fridge_126)exp(food_lemon_2100, fridge_126)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(cutting_board_2123)put_executor(food_lemon_2100, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_lemon_2100)cut_executor(food_lemon_2100)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(cutting_board_2123)put_executor(food_vegetable_2113, cutting_board_2123)walk_executor(food_vegetable_2113)cut_executor(food_vegetable_2113)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_vegetable_2113, fridge_126)
Find food_vegetable_2113. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2113)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(cutting_board_2123)put_executor(food_lemon_2100, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_lemon_2100)cut_executor(food_lemon_2100)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(cutting_board_2123)put_executor(food_vegetable_2113, cutting_board_2123)walk_executor(food_vegetable_2113)cut_executor(food_vegetable_2113)
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. 
##############################
From agent.py
walk_executor(food_lemon_2100)
Robot find: Robot is close to the fridge_126. Robot is close to the food_lemon_2100. 
##############################
From agent.py
grab_executor(food_lemon_2100)
Robot find: Robot is close to the fridge_126. Robot is close to the food_lemon_2100. Grabbing food_lemon_2100 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_lemon_2100. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_lemon_2100, cutting_board_2123)
Robot find: Robot is close to the food_lemon_2100. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_lemon_2100. food_lemon_2100 is close cutting_board_2123. food_lemon_2100 is on cutting_board_2123. food_lemon_2100 released by right hand. 
##############################
From agent.py
walk_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. 
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2100)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_lemon_2100. 
##############################
From agent.py
cut_executor(food_lemon_2100)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_lemon_2100. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_vegetable_2113, cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_vegetable_2113. food_vegetable_2113 is close cutting_board_2123. food_vegetable_2113 is on cutting_board_2123. food_vegetable_2113 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the cutting_board_2123. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_food_food_2064(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_kiwi,food_food_instance)
        else:
            exp(food_kiwi,food_food_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,food_food_instance]=True
        close[food_food_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_mix_ingredients(egg:item, mix:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not on(egg, bowl):
            put_on(egg, bowl)
        if not inhand(mix):
            grab(mix)
        if not inside(mix, bowl):
            put_inside(mix, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2182
        # Select the boiled egg
        
        bind mix: item where:
            is_food_vegetable(mix) and id[mix] == 2113
        # Select the mixed lemon and vegetables
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        
        grab_and_mix_ingredients(egg, mix, bowl)
        # Combine the egg with the mixed lemon and vegetables in the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2048_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_ingredients_bowl(egg:item, lemon:item, vegetables:item, bowl:item):
    # Check if the bowl contains the boiled egg, lemon, and vegetables
    return inside(egg, bowl) and inside(lemon, bowl) and inside(vegetables, bowl)

behavior combine_ingredients_in_bowl(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not has_ingredients_bowl(egg, lemon, vegetables, bowl):
            if not inhand(egg):
                grab(egg)
            walk_to(bowl)
            if not inside(egg, bowl):
                put_inside(egg, bowl)

            if not inhand(lemon):
                grab(lemon)
            if not inside(lemon, bowl):
                put_inside(lemon, bowl)

            if not inhand(vegetables):
                grab(vegetables)
            if not inside(vegetables, bowl):
                put_inside(vegetables, bowl)
                
behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the boiled and cut egg
        
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to combine ingredients ingredients

        combine_ingredients_in_bowl(egg, lemon, vegetables, bowl)
        # Combine the ingredients in the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl_ready(bowl: item, boiled_egg: item, lemon: item, vegetables: item):
    # Function to check if the boiled egg, lemon, and vegetables are in the bowl
    return inside(boiled_egg, bowl) and inside(lemon, bowl) and inside(vegetables, bowl)

behavior combine_ingredients(bowl: item, boiled_egg: item, lemon: item, vegetables: item):
    body:
        if not inhand(boiled_egg):
            grab(boiled_egg)
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)

        if not inhand(lemon):
            grab(lemon)
        if not inside(lemon, bowl): 
            put_inside(lemon, bowl)

        if not inhand(vegetables):
            grab(vegetables)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)
        # Select the boiled and cut egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the prepared vegetables

        if not is_bowl_ready(bowl, boiled_egg, lemon, vegetables):
            combine_ingredients(bowl, boiled_egg, lemon, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_check_2071_around_bowl_2141(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(check,bowl_instance)
        else:
            exp(check,bowl_instance)
    eff:
        unknown[check]=False
        close[check,bowl_instance]=True
        close[bowl_instance,check]=True
    

behavior find_cup_2132_around_dishwasher_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cup,dishwasher_instance)
        else:
            exp(cup,dishwasher_instance)
    eff:
        unknown[cup]=False
        close[cup,dishwasher_instance]=True
        close[dishwasher_instance,cup]=True
    

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_mixed_lemon_and_vegetables_in_bowl(bowl:item, lemon:item, veggies:item):
    # Check if both lemon and vegetables are in the bowl
    return inside(lemon, bowl) and inside(veggies, bowl)

behavior combine_items_in_bowl(egg:item, lemon:item, veggies:item, bowl:item):
    body:
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inside(veggies, bowl):
            put_inside(veggies, bowl)
        if not inside(egg, bowl):
            put_inside(egg, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Bind to the boiled egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Bind to the prepared lemon

        bind veggies: item where:
            is_food_vegetable(veggies) and cut(veggies)
        # Bind to the prepared vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Bind to a bowl

        if not has_mixed_lemon_and_vegetables_in_bowl(bowl, lemon, veggies):
            combine_items_in_bowl(egg, lemon, veggies, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_food_food_2064(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_kiwi,food_food_instance)
        else:
            exp(food_kiwi,food_food_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,food_food_instance]=True
        close[food_food_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(boiled_egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inhand(boiled_egg):
            grab(boiled_egg)
        if not inhand(lemon):
            grab(lemon)
        if not inhand(vegetables):
            grab(vegetables)
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)
        # Select the boiled and cut egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        combine_ingredients(boiled_egg, lemon, vegetables, bowl)
        # Combine all ingredients into a bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_check_2071_around_bowl_2141(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(check,bowl_instance)
        else:
            exp(check,bowl_instance)
    eff:
        unknown[check]=False
        close[check,bowl_instance]=True
        close[bowl_instance,check]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_carrot_2015_around_dishwasher_129(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_carrot,dishwasher_instance)
        else:
            exp(food_carrot,dishwasher_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,dishwasher_instance]=True
        close[dishwasher_instance,food_carrot]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def in_bowl(item: item, bowl: item):
    # Check if the item is in the bowl
    return inside(item, bowl)

behavior combine_egg_with_lemon_and_vegetables(egg: item, lemon: item, vegetables: item, bowl: item):
    body:
        if not inhand(egg):
            grab(egg)
        if not inside(egg, bowl):
            put_inside(egg, bowl)

        if not inhand(lemon):
            grab(lemon)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

        if not inhand(vegetables):
            grab(vegetables)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind egg: item where:
            is_food_egg(egg)
        # Select the boiled egg
        
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        combine_egg_with_lemon_and_vegetables(egg, lemon, vegetables, bowl)
        # Combine egg, lemon, and vegetables in the bowl

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. combine the boiled egg with the mixed lemon and vegetables in a bowl." ?
Answer: Put the egg in a bowl. Then put the lemon and the vegetables in the bowl.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_box_2038_around_cupboard_117(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_food_food_1000(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_kiwi,food_food_instance)
        else:
            exp(food_kiwi,food_food_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,food_food_instance]=True
        close[food_food_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(egg: item, lemon: item, vegetables: item, bowl: item):
    body:
        if not inhand(egg):
            grab(egg)
        if not on(egg, bowl):
            put_in_bowl(egg, bowl)
        if not inhand(lemon):
            grab(lemon)
        if not on(lemon, bowl):
            put_in_bowl(lemon, bowl)
        if not inhand(vegetables):
            grab(vegetables)
        if not on(vegetables, bowl):
            put_in_bowl(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the boiled egg that has been cut

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the prepared lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the prepared vegetables

        observe(bowl, "Verify if the bowl is recipient")
        bind bowl: item where:
            is_bowl(bowl) and recipient(bowl)
        # Select a bowl

        combine_ingredients(egg, lemon, vegetables, bowl)
        # Combine all ingredients into the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_box_2038_around_cupboard_117(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

behavior find_pot_78_around_door_62(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==62
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(pot,door_instance)
        else:
            exp(pot,door_instance)
    eff:
        unknown[pot]=False
        close[pot,door_instance]=True
        close[door_instance,pot]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_food_food_1000(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_kiwi,food_food_instance)
        else:
            exp(food_kiwi,food_food_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,food_food_instance]=True
        close[food_food_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl_inside_kitchen(bowl: item):
    # Check if the bowl is in the kitchen
    symbol in_kitchen=exists room: item : (is_kitchen_counter(room) and inside(bowl, room))
    return in_kitchen

behavior put_ingredients_in_bowl(bowl: item, ingredients: item):
    body:
        if not inhand(ingredients):
            grab(ingredients)
        if not on(ingredients, bowl):
            put_inside(ingredients, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the cut boiled egg

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind bowl: item where:
            is_bowl(bowl) and is_bowl_inside_kitchen(bowl)
        # Select a bowl inside the kitchen

        put_ingredients_in_bowl(bowl, egg)
        put_ingredients_in_bowl(bowl, vegetables)
        put_ingredients_in_bowl(bowl, lemon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_door_62(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==62
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(pot,door_instance)
        else:
            exp(pot,door_instance)
    eff:
        unknown[pot]=False
        close[pot,door_instance]=True
        close[door_instance,pot]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior combine_ingredients(bowl:item, egg:item, lemon:item, vegetables:item):
    body:
        if not inside(egg, bowl):
            if not inhand(egg):
                grab(egg)
            put_inside(egg, bowl)
            # Place the boiled egg inside the bowl

        if not inside(lemon, bowl):
            if not inhand(lemon):
                grab(lemon)
            put_inside(lemon, bowl)
            # Place the lemon inside the bowl

        if not inside(vegetables, bowl):
            if not inhand(vegetables):
                grab(vegetables)
            put_inside(vegetables, bowl)
            # Place the vegetables inside the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind egg: item where:
            is_food_egg(egg) and cut(egg) and id[egg] == 1293
        # Select the boiled egg that is cut

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon) and id[lemon] == 2100
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables) and id[vegetables] == 2113
        # Select the cut vegetables

        walk_to(bowl)
        # Walk to the bowl location

        combine_ingredients(bowl, egg, lemon, vegetables)
        # Combine the egg, lemon, and vegetables in the bowl
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_door_62(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==62
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(pot,door_instance)
        else:
            exp(pot,door_instance)
    eff:
        unknown[pot]=False
        close[pot,door_instance]=True
        close[door_instance,pot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl(item: item):
    # Check if the item is a bowl
    return id[item] == 4075

behavior combine_ingredients(egg: item, vegetables: item, lemon: item, bowl: item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 4132
        # Select the boiled egg with ID 4132

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 4143
        # Select the vegetables with ID 4143

        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 4157
        # Select the lemon with ID 4157

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        combine_ingredients(egg, vegetables, lemon, bowl)
        # Combine the boiled egg, vegetables, and lemon in a bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2009_around_sink_120(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_onion,sink_instance)
        else:
            exp(food_onion,sink_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,sink_instance]=True
        close[sink_instance,food_onion]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_in_bowl(item: item, bowl: item):
    # Check if the specified item is in the bowl
    return inside(item, bowl)

behavior combine_ingredients(egg: item, lemon: item, vegetables: item, bowl: item):
    body:
        if not is_item_in_bowl(egg, bowl):
            put_inside(egg, bowl)
        if not is_item_in_bowl(lemon, bowl):
            put_inside(lemon, bowl)
        if not is_item_in_bowl(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the boiled egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        combine_ingredients(egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(egg: item, lemon: item, vegetables: item, bowl: item):
    body:
        if not inhand(egg):
            grab(egg)
        if not cut(egg):
            cuts(egg)
        if not on(egg, bowl):
            put_inside(egg, bowl)

        if not inhand(lemon):
            grab(lemon)
        if not cut(lemon):
            cuts(lemon)
        if not on(lemon, bowl):
            put_inside(lemon, bowl)

        if not inhand(vegetables):
            grab(vegetables)
        if not cut(vegetables):
            cuts(vegetables)
        if not on(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)
        # Identify the boiled egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Identify the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Identify the cut vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Identify the bowl

        combine_ingredients(boiled_egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_door_62(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==62
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(pot,door_instance)
        else:
            exp(pot,door_instance)
    eff:
        unknown[pot]=False
        close[pot,door_instance]=True
        close[door_instance,pot]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_bowl_2141(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_kiwi,bowl_instance)
        else:
            exp(food_kiwi,bowl_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,bowl_instance]=True
        close[bowl_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl_available_for_salad(bowl:item):
    # Function to check if a bowl is available
    return is_bowl(bowl)

behavior combine_boiled_egg_with_lemon_and_vegetables(boiled_egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg) # Assuming the egg was boiled and cut
        # Select the boiled and cut egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        if not exists bowl: item: is_bowl_available_for_salad(bowl):
            foreach bowl: item:
                if is_bowl(bowl) and not visited(bowl):
                    observe(bowl, "Identify a bowl for the egg salad preparation")
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl for combining

        combine_boiled_egg_with_lemon_and_vegetables(boiled_egg, lemon, vegetables, bowl)
        # Combine the boiled egg with lemon and vegetables inside the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_egg_lemon_vegetables(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inhand(lemon):
            grab(lemon)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inhand(vegetables):
            grab(vegetables)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select a cut egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select a cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select cut vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        combine_egg_lemon_vegetables(egg, lemon, vegetables, bowl)
        # Combine the egg, lemon, and vegetables in the bowl
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_food_food_1000(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_kiwi,food_food_instance)
        else:
            exp(food_kiwi,food_food_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,food_food_instance]=True
        close[food_food_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
behavior combine_ingredients(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not inhand(lemon):
            grab(lemon)
        if not inhand(vegetables) and has_a_free_hand(char):
            grab(vegetables)
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Choose the boiled egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Choose the sliced lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Choose the chopped vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        combine_ingredients(egg, lemon, vegetables, bowl)
        # Combine the boiled egg, lemon, and vegetables in the bowl
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cup_2132_around_bowl_2142(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2142
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(cup,bowl_instance)
        else:
            exp(cup,bowl_instance)
    eff:
        unknown[cup]=False
        close[cup,bowl_instance]=True
        close[bowl_instance,cup]=True
    

#exp_behavior_end

#goal_representation

def combine_ingredients(egg: item, vegetables: item, lemon: item, bowl: item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select a boiled egg item

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the vegetables

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the lemon

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        combine_ingredients(egg, vegetables, lemon, bowl)
        # Combine the ingredients in the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_cup_2134_around_bowl_2142(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2142
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(cup,bowl_instance)
        else:
            exp(cup,bowl_instance)
    eff:
        unknown[cup]=False
        close[cup,bowl_instance]=True
        close[bowl_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients_and_place_in_bowl(boiled_egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inhand(boiled_egg):
            grab(boiled_egg)
        if not on(boiled_egg, bowl):
            put_on(boiled_egg, bowl)
        if not inhand(lemon):
            grab(lemon)
        if not on(lemon, bowl):
            put_on(lemon, bowl)
        if not inhand(vegetables):
            grab(vegetables)
        if not on(vegetables, bowl):
            put_on(vegetables, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cut(boiled_egg)
        # Select the boiled egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        combine_ingredients_and_place_in_bowl(boiled_egg, lemon, vegetables, bowl)
        # Combine and place all ingredients in the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_food_food_1000(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_kiwi,food_food_instance)
        else:
            exp(food_kiwi,food_food_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,food_food_instance]=True
        close[food_food_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
behavior combine_ingredients(bowled_egg: item, lemon_and_vegetables: item, bowl: item):
    body:
        if not inhand(bowled_egg):
            grab(bowled_egg)
        if not inhand(lemon_and_vegetables):
            grab(lemon_and_vegetables)
        if not inside(bowled_egg, bowl):
            put_inside(bowled_egg, bowl)
        if not inside(lemon_and_vegetables, bowl):
            put_inside(lemon_and_vegetables, bowl)

behavior __goal__():
    body:
        bind bowled_egg: item where:
            is_food_egg(bowled_egg) and cut(bowled_egg)
        # Select the cut boiled egg

        bind lemon_and_vegetables: item where:
            is_food_vegetable(lemon_and_vegetables) or is_food_lemon(lemon_and_vegetables)
        # Select the mixed lemon and vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        combine_ingredients(bowled_egg, lemon_and_vegetables, bowl)
        # Combine the boiled egg with the mixed lemon and vegetables in the bowl
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. combine the boiled egg with the mixed lemon and vegetables in a bowl." ?
Answer: Cut the boiled egg into pieces, then put the egg, mixed lemon pieces, and cut vegetables into a bowl.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_box_2038_around_spectacles_2153(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind spectacles_instance:item where:
            is_spectacles(spectacles_instance) and id[spectacles_instance]==2153
        achieve close_char(char,spectacles_instance)
        if can_open(spectacles_instance):
            achieve_once open(spectacles_instance)
            exp(box,spectacles_instance)
        else:
            exp(box,spectacles_instance)
    eff:
        unknown[box]=False
        close[box,spectacles_instance]=True
        close[spectacles_instance,box]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_bookshelf_124(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(food_kiwi,bookshelf_instance)
        else:
            exp(food_kiwi,bookshelf_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,bookshelf_instance]=True
        close[bookshelf_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not cut(egg):
            cuts(egg)
        if not inhand(vegetables):
            grab(vegetables)
        if not inhand(lemon):
            grab(lemon)
        if not on(egg, bowl) or not on(vegetables, bowl) or not on(lemon, bowl):
            put_on(egg, bowl)
            put_on(vegetables, bowl)
            put_on(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cuttable(egg)
        # Select the boiled egg

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2113
        # Select the vegetables with ID 2113

        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 2100
        # Select the lemon with ID 2100

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        combine_ingredients(egg, vegetables, lemon, bowl)
        # Combine the boiled egg, mixed lemon, and vegetables in the bowl

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior combine_ingredients(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not cut(egg):
            cuts(egg)
        if not inhand(vegetables):
            grab(vegetables)
        if not inhand(lemon):
            grab(lemon)
        if not on(egg, bowl) or not on(vegetables, bowl) or not on(lemon, bowl):
            put_on(egg, bowl)
            put_on(vegetables, bowl)
            put_on(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cuttable(egg)
        # Select the boiled egg

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2113
        # Select the vegetables with ID 2113

        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 2100
        # Select the lemon with ID 2100

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        combine_ingredients(egg, vegetables, lemon, bowl)
        # Combine the boiled egg, mixed lemon, and vegetables in the bowl

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)walk_executor(food_egg_2092)cut_executor(food_egg_2092)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(kitchen_counter_119)put_executor(knife_2037, kitchen_counter_119)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)put_executor(food_egg_2092, bowl_2140)put_executor(food_vegetable_2113, bowl_2140)put_executor(food_lemon_2100, bowl_2140)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_egg_2092, cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_egg_2092. food_egg_2092 is close cutting_board_2123. food_egg_2092 is on cutting_board_2123. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_vegetable_2113. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_vegetable_2113. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
walk_executor(food_lemon_2100)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_vegetable_2113. Robot is close to the food_lemon_2100. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_cup_2132_around_dishwasher_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cup,dishwasher_instance)
        else:
            exp(cup,dishwasher_instance)
    eff:
        unknown[cup]=False
        close[cup,dishwasher_instance]=True
        close[dishwasher_instance,cup]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_bowl_2142(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2142
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_kiwi,bowl_instance)
        else:
            exp(food_kiwi,bowl_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,bowl_instance]=True
        close[bowl_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_put_ingredients_in_bowl(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not inside(egg, bowl):
            put_on(egg, bowl)

        if not inhand(vegetables):
            grab(vegetables)
        if not inside(vegetables, bowl):
            put_on(vegetables, bowl)

        if not inhand(lemon):
            grab(lemon)
        if not inside(lemon, bowl):
            put_on(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the cut egg

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        grab_and_put_ingredients_in_bowl(egg, vegetables, lemon, bowl)
        # Combine boiled egg with the mixed lemon and vegetables in the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_basket_for_clothes_2078(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(food_kiwi,basket_for_clothes_instance)
        else:
            exp(food_kiwi,basket_for_clothes_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_and_grab_ingredients(boiled_egg: item, lemon: item, vegetables: item):
    body:
        if not cut(boiled_egg):
            cuts(boiled_egg)
        if not cut(lemon):
            cuts(lemon)
        if not cut(vegetables):
            cuts(vegetables)

behavior combine_ingredients_in_bowl(boiled_egg: item, lemon: item, vegetables: item, bowl: item):
    body:
        if not inside(boiled_egg, bowl):
            put_inside(boiled_egg, bowl)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and cuttable(boiled_egg) and cut(boiled_egg)
        # Select the cut boiled egg

        bind lemon: item where:
            is_food_lemon(lemon) and cuttable(lemon) and cut(lemon)
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cuttable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        combine_ingredients_in_bowl(boiled_egg, lemon, vegetables, bowl)
        # Combine the ingredients in the bowl


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_food_food_1000(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_kiwi,food_food_instance)
        else:
            exp(food_kiwi,food_food_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,food_food_instance]=True
        close[food_food_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients_in_bowl(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not inhand(lemon):
            grab(lemon)
        if not inhand(vegetables):
            grab(vegetables)
            
        if not on(egg, bowl):
            put_on(egg, bowl)
        if not on(lemon, bowl):
            put_on(lemon, bowl)
        if not on(vegetables, bowl):
            put_on(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the boiled and cut egg

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        combine_ingredients_in_bowl(egg, lemon, vegetables, bowl)
        # Combine the boiled egg, lemon, and vegetables in the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_kiwi_2054_around_food_food_2064(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_kiwi,food_food_instance)
        else:
            exp(food_kiwi,food_food_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,food_food_instance]=True
        close[food_food_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_egg_with_lemon_and_vegetables(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not inside(egg, bowl):
            put_inside(egg, bowl)

        if not inhand(lemon):
            grab(lemon)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

        if not inhand(vegetables):
            grab(vegetables)
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the cut boiled egg
        
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon pieces
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        
        combine_egg_with_lemon_and_vegetables(egg, lemon, vegetables, bowl)
        # Combine the boiled egg, lemon, and vegetables into the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_bowl_2142(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2142
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(cup,bowl_instance)
        else:
            exp(cup,bowl_instance)
    eff:
        unknown[cup]=False
        close[cup,bowl_instance]=True
        close[bowl_instance,cup]=True
    

behavior find_pot_2138_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(egg: item, lemon: item, vegetables: item, bowl: item):
    body:
        if not inside(egg, bowl):
            walk_to(egg)
            if not inhand(egg):
                grab(egg)
            put_inside(egg, bowl)
        if not inside(lemon, bowl):
            walk_to(lemon)
            if not inhand(lemon):
                grab(lemon)
            put_inside(lemon, bowl)
        if not inside(vegetables, bowl):
            walk_to(vegetables)
            if not inhand(vegetables):
                grab(vegetables)
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the cut egg

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select the cut vegetables
        
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2192
        # Select the bowl for mixing

        combine_ingredients(egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_door_62(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==62
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(pot,door_instance)
        else:
            exp(pot,door_instance)
    eff:
        unknown[pot]=False
        close[pot,door_instance]=True
        close[door_instance,pot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_bowl_2142(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2142
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_kiwi,bowl_instance)
        else:
            exp(food_kiwi,bowl_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,bowl_instance]=True
        close[bowl_instance,food_kiwi]=True
    

behavior find_cup_2132_around_dishwasher_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cup,dishwasher_instance)
        else:
            exp(cup,dishwasher_instance)
    eff:
        unknown[cup]=False
        close[cup,dishwasher_instance]=True
        close[dishwasher_instance,cup]=True
    

#exp_behavior_end

#goal_representation

behavior cut_and_combine(egg: item, lemon: item, vegetables: item, bowl: item):
    body:
        # Ensure the egg is cut
        if not cut(egg):
            cuts(egg)
        
        # Ensure the lemon is cut
        if not cut(lemon):
            cuts(lemon)
        
        # Ensure the vegetables are cut
        if not cut(vegetables):
            cuts(vegetables)
        
        # Place the cut egg in the bowl
        if not inside(egg, bowl):
            put_inside(egg, bowl)
        
        # Place the cut lemon pieces in the bowl
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
        
        # Place the cut vegetables in the bowl
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cuttable(egg)
        # Select a cuttable egg
        
        bind lemon: item where:
            is_food_lemon(lemon) and cuttable(lemon)
        # Select a cuttable lemon
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cuttable(vegetables)
        # Select cuttable vegetables
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        cut_and_combine(egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. combine the boiled egg with the mixed lemon and vegetables in a bowl." ?
Answer: Cut the boiled egg into pieces and put it in a bowl. Then put the lemon pieces and vegetables into the bowl.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2054_around_food_food_2064(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_kiwi,food_food_instance)
        else:
            exp(food_kiwi,food_food_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,food_food_instance]=True
        close[food_food_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not cut(egg):
            cuts(egg)
        if not on(egg, bowl):
            put_on(egg, bowl)

        if not inhand(vegetables):
            grab(vegetables)
        if not on(vegetables, bowl):
            put_on(vegetables, bowl)

        if not inhand(lemon):
            grab(lemon)
        if not on(lemon, bowl):
            put_on(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cuttable(egg)
        # Select a cuttable egg
        
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        combine_ingredients(egg, lemon, vegetables, bowl)
        # Combine egg, lemon, and vegetables in the bowl

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior combine_ingredients(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        if not inhand(egg):
            grab(egg)
        if not cut(egg):
            cuts(egg)
        if not on(egg, bowl):
            put_on(egg, bowl)

        if not inhand(vegetables):
            grab(vegetables)
        if not on(vegetables, bowl):
            put_on(vegetables, bowl)

        if not inhand(lemon):
            grab(lemon)
        if not on(lemon, bowl):
            put_on(lemon, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cuttable(egg)
        # Select a cuttable egg
        
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        combine_ingredients(egg, lemon, vegetables, bowl)
        # Combine egg, lemon, and vegetables in the bowl

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)put_executor(food_vegetable_2113, kitchen_counter_119)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)walk_executor(food_egg_2092)cut_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)put_executor(food_egg_2092, bowl_2140)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(bowl_2140)put_executor(food_vegetable_2113, bowl_2140)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(bowl_2140)put_executor(food_lemon_2100, bowl_2140)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_vegetable_2113, kitchen_counter_119)
Robot find: Robot is close to the knife_2037. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close food_vegetable_2113. food_vegetable_2113 is close kitchen_counter_119. food_vegetable_2113 is on kitchen_counter_119. food_vegetable_2113 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_egg_2092, cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. Robot is close to the kitchen_counter_119. food_egg_2092 is close cutting_board_2123. food_egg_2092 is on cutting_board_2123. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. 
##############################
From agent.py
cut_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_egg_2092, bowl_2140)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. bowl_2140 is close food_egg_2092. food_egg_2092 is close bowl_2140. food_egg_2092 is on bowl_2140. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the food_vegetable_2113. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the food_vegetable_2113. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the food_vegetable_2113. Robot is close to the bowl_2140. 
##############################
From agent.py
put_executor(food_vegetable_2113, bowl_2140)
Robot find: Robot is close to the knife_2037. Robot is close to the kitchen_counter_119. Robot is close to the food_vegetable_2113. Robot is close to the bowl_2140. bowl_2140 is close food_vegetable_2113. food_vegetable_2113 is close bowl_2140. food_vegetable_2113 is on bowl_2140. food_vegetable_2113 released by left hand. 
##############################
From agent.py
walk_executor(food_lemon_2100)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_lemon_2100. 
##############################
From agent.py
grab_executor(food_lemon_2100)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_lemon_2100. Grabbing food_lemon_2100 by left hand. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the knife_2037. Robot is close to the food_lemon_2100. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_lemon_2100, bowl_2140)
Robot find: Robot is close to the knife_2037. Robot is close to the food_lemon_2100. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. bowl_2140 is close food_lemon_2100. food_lemon_2100 is close bowl_2140. food_lemon_2100 is on bowl_2140. food_lemon_2100 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a bowl of egg salad with boiled egg, lemon, and vegetables.
Action History:
['walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(stove_2135)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(food_vegetable_2113)', 'walk_executor(food_lemon_2100)', 'grab_executor(food_lemon_2100)', 'walk_executor(cutting_board_2123)', 'put_executor(food_lemon_2100, cutting_board_2123)', 'walk_executor(knife_2037)', 'grab_executor(knife_2037)', 'walk_executor(food_lemon_2100)', 'cut_executor(food_lemon_2100)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(cutting_board_2123)', 'put_executor(food_vegetable_2113, cutting_board_2123)', 'walk_executor(food_vegetable_2113)', 'cut_executor(food_vegetable_2113)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(cutting_board_2123)', 'put_executor(food_egg_2092, cutting_board_2123)', 'walk_executor(food_egg_2092)', 'cut_executor(food_egg_2092)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(food_lemon_2100)', 'grab_executor(food_lemon_2100) (Failed)', 'walk_executor(kitchen_counter_119)', 'put_executor(food_vegetable_2113, kitchen_counter_119)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(cutting_board_2123)', 'put_executor(food_egg_2092, cutting_board_2123)', 'walk_executor(food_egg_2092)', 'cut_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(bowl_2140)', 'put_executor(food_egg_2092, bowl_2140)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(bowl_2140)', 'put_executor(food_vegetable_2113, bowl_2140)', 'walk_executor(food_lemon_2100)', 'grab_executor(food_lemon_2100)', 'walk_executor(bowl_2140)', 'put_executor(food_lemon_2100, bowl_2140)']
Time info:
Time consume: 624 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 125
goal generate times: 33
goal correct times: 0
action_num: 59

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 27 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
