From agent.py
Reset goals: The sub-goals are: 
['Use a pot to boil some water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_fruit_2023_around_kitchen_counter_230(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

#exp_behavior_end

#goal_representation
 
def is_stove_with_pot_and_water(stove: item):
    # Function to check if there is a pot with water on the stove
    symbol pot_with_water=exists pot: item : (is_pot(pot) and has_water(pot) and on(pot, stove))
    return pot_with_water

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        if not is_stove_with_pot_and_water(stove):
            bind pot: item where:
                is_pot(pot)
            
            walk_to(pot)
            # Ensures the character is close to the pot
            
            fill_pot_with_water(pot)
            # Fill the pot with water if it doesnt have any
            
            walk_to(stove)
            # Ensures the character is close to the stove
            
            place_pot_on_stove(pot, stove)
            # Place the pot on the stove
            
        turn_on_stove(stove)
        # Turn on the stove to start boiling the water

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_stove_with_pot_and_water(stove: item):
    # Function to check if there is a pot with water on the stove
    symbol pot_with_water=exists pot: item : (is_pot(pot) and has_water(pot) and on(pot, stove))
    return pot_with_water

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior fill_pot_with_water(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        if not is_stove_with_pot_and_water(stove):
            bind pot: item where:
                is_pot(pot)
            
            walk_to(pot)
            # Ensures the character is close to the pot
            
            fill_pot_with_water(pot)
            # Fill the pot with water if it doesnt have any
            
            walk_to(stove)
            # Ensures the character is close to the stove
            
            place_pot_on_stove(pot, stove)
            # Place the pot on the stove
            
        turn_on_stove(stove)
        # Turn on the stove to start boiling the water

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(pot_2069, cupboard_229)
Fail to find pot_2069 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Use pot to boil some water.
Action History:
['walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 45 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 12
goal generate times: 1
goal correct times: 0
action_num: 12

Task complete rate:
1
Scene_id: 0
##############################
