From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_mouse_166_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_pot_with_water(pot:item):
    # Function to check if the pot has water
    return has_water(pot)

def is_stove_ready(stove:item):
    # Function to check if the stove is ready to use (plugged in, turned off)
    return plugged(stove) and is_off(stove)

behavior put_water_in_pot(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior put_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior ensure_stove_is_on(stove:item):
    body:
        if not is_on(stove):
            if is_stove_ready(stove):
                switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        walk_to(pot)
        # Ensure character is close to the pot

        put_water_in_pot(pot)
        # Add water to the pot

        walk_to(stove)
        # Ensure character is close to the stove

        put_pot_on_stove(pot, stove)
        # Place the pot on the stove

        ensure_stove_is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_pot_with_water(pot:item):
    # Function to check if the pot has water
    return has_water(pot)

def is_stove_ready(stove:item):
    # Function to check if the stove is ready to use (plugged in, turned off)
    return plugged(stove) and is_off(stove)

behavior put_water_in_pot(pot: item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior put_pot_on_stove(pot: item, stove: item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior ensure_stove_is_on(stove:item):
    body:
        if not is_on(stove):
            if is_stove_ready(stove):
                switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        walk_to(pot)
        # Ensure character is close to the pot

        put_water_in_pot(pot)
        # Add water to the pot

        walk_to(stove)
        # Ensure character is close to the stove

        put_pot_on_stove(pot, stove)
        # Place the pot on the stove

        ensure_stove_is_on(stove)
        # Turn on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to turn on the stove to start the boiling process, as it is currently not on.
##############################
From agent.py
Human Instruction: You need to turn on the stove to start the boiling process, as it is currently not on.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for pot_2069 around stove_2065.
Action 4: Walk to pot_2069.
Action 5: Open pot_2069.
Action 6: Grab pot_2069.
Action 7: Walk to faucet_43.
Action 8: Switch on faucet_43.
Action 9: Switch off faucet_43.
Action 10: Walk to stove_2065.
Action 11: Put pot_2069 on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_stove_and_turn_on(stove:item):
    body:
        # Observe the stove to check if it is off and needs to be turned on
        observe(stove, "Check if the stove is turned on or off")
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove_2065
        
        observe_stove_and_turn_on(stove)
        # Observe and turn on the stove to ensure boiling process starts

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior observe_stove_and_turn_on(stove:item):
    body:
        # Observe the stove to check if it is off and needs to be turned on
        observe(stove, "Check if the stove is turned on or off")
        if is_off(stove) and has_switch(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove_2065
        
        observe_stove_and_turn_on(stove)
        # Observe and turn on the stove to ensure boiling process starts

##############################
From agent.py-> find a plan in act()
obs(stove_2065, Check if the stove is turned on or off)switchon_executor(stove_2065)
##############################
From agent.py
obs(stove_2065, Check if the stove is turned on or off)
Get this information:  stove_2065 is on kitchen_counter_230. stove_2065 is inside dining_room_201. pot_2069 is on stove_2065. stove_2065 is close to kitchen_counter_230. stove_2065 is close to character_65. stove_2065 is close to pot_2069. stove_2065 is OFF. stove_2065 is OPEN.
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil egg.
Action History:
['walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 49 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 100
goal generate times: 2
goal correct times: 0
action_num: 11

Task complete rate:
Keystate: k1 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
