From agent.py
Reset goals: The sub-goals are: 
['1. Crack the egg into a bowl and whisk it.', '2. Heat the frying pan to the appropriate temperature.', '3. Pour the whisked egg into the frying pan and scramble it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_and_whisk_egg(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        # Crack the egg into the bowl
        achieve cut(egg)
        # Whisk the egg in the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to crack the egg into

        crack_and_whisk_egg(egg, bowl)
        # Crack the egg into the bowl and whisk it

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior crack_and_whisk_egg(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        # Crack the egg into the bowl
        achieve cut(egg)
        # Whisk the egg in the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to crack the egg into

        crack_and_whisk_egg(egg, bowl)
        # Crack the egg into the bowl and whisk it

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(bowl_2071, kitchen_counter_230)exp(food_egg_2020, kitchen_counter_230)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Fail to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2071, cupboard_229)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(bowl_2071, cupboard_229)
Fail to find bowl_2071 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_234)exp(bowl_2071, wallshelf_234)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
walk_executor(wallshelf_234)
Robot find: Robot is close to the wallshelf_234. 
##############################
From agent.py
exp(bowl_2071, wallshelf_234)
Fail to find bowl_2071 around wallshelf_234. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_235)exp(bowl_2071, wallshelf_235)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
walk_executor(wallshelf_235)
Robot find: Robot is close to the wallshelf_235. 
##############################
From agent.py
exp(bowl_2071, wallshelf_235)
Fail to find bowl_2071 around wallshelf_235. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_228)exp(bowl_2071, bench_228)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
walk_executor(bench_228)
Robot find: mat_236, mat_237, Robot is close to the bench_228. 
##############################
From agent.py
exp(bowl_2071, bench_228)
Fail to find bowl_2071 around bench_228. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(bowl_2071, coffee_table_2068)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the coffee_table_2068. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2071 ?
Answer: Go to dining_room_201 and look for table_226. Bowl_2071 is on table_226, and it is positioned close to the table itself. Retrieve bowl_2071 from there.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_201 and look for table_226. Bowl_2071 is on table_226, and it is positioned close to the table itself. Retrieve bowl_2071 from there.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for bowl_2071 around cupboard_229.
Action 6: Walk to wallshelf_234.
Action 7: look for bowl_2071 around wallshelf_234.
Action 8: Walk to wallshelf_235.
Action 9: look for bowl_2071 around wallshelf_235.
Action 10: Walk to bench_228.
Action 11: look for bowl_2071 around bench_228.
Action 12: Walk to coffee_table_2068.

##############################
From agent.py
exp(bowl_2071, coffee_table_2068)
Fail to find bowl_2071 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, fork_2080, fork_2081, Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the food_egg_2020. Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
putin_executor(food_egg_2020, bowl_2071)
Robot find: Robot is close to the food_egg_2020. Robot is close to the table_226. Robot is close to the bowl_2071. bowl_2071 is close food_egg_2020. food_egg_2020 is inside bowl_2071. food_egg_2020 is close bowl_2071. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the food_egg_2020. Robot is close to the bowl_2071. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_egg_2020. Robot is close to the bowl_2071. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, cutting_board_2051)
Robot find: Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_egg_2020. food_egg_2020 is close cutting_board_2051. food_egg_2020 is on cutting_board_2051. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
cut_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to whisk the egg in the bowl after cracking it.
##############################
From agent.py
Human Instruction: You need to whisk the egg in the bowl after cracking it.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for bowl_2071 around cupboard_229.
Action 6: Walk to wallshelf_234.
Action 7: look for bowl_2071 around wallshelf_234.
Action 8: Walk to wallshelf_235.
Action 9: look for bowl_2071 around wallshelf_235.
Action 10: Walk to bench_228.
Action 11: look for bowl_2071 around bench_228.
Action 12: Walk to coffee_table_2068.
Action 13: look for bowl_2071 around coffee_table_2068.
Action 14: Walk to table_226.
Action 15: look for bowl_2071 around table_226.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for food_egg_2020 around fridge_289.
Action 20: Grab food_egg_2020.
Action 21: Walk to bowl_2071.
Action 22: Put food_egg_2020 into bowl_2071.
Action 23: Walk to food_egg_2020.
Action 24: Grab food_egg_2020.
Action 25: Walk to cutting_board_2051.
Action 26: Put food_egg_2020 on cutting_board_2051.
Action 27: Walk to knife_2050.
Action 28: Grab knife_2050.
Action 29: Walk to food_egg_2020.
Action 30: Cut food_egg_2020.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_and_whisk_egg(egg:item, bowl:item, cutting_board:item, knife:item):
    body:
        achieve_once on(egg, cutting_board)
        # Place the egg on the cutting board
        achieve_once cut(egg)
        # Crack the egg using the knife
        achieve_once inside(egg, bowl)
        # Put the cracked egg into the bowl
        achieve has_water(bowl)
        # Whisk the egg in the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        crack_and_whisk_egg(egg, bowl, cutting_board, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior crack_and_whisk_egg(egg:item, bowl:item, cutting_board:item, knife:item):
    body:
        achieve_once on(egg, cutting_board)
        # Place the egg on the cutting board
        achieve_once cut(egg)
        # Crack the egg using the knife
        achieve_once inside(egg, bowl)
        # Put the cracked egg into the bowl
        achieve has_water(bowl)
        # Whisk the egg in the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        crack_and_whisk_egg(egg, bowl, cutting_board, knife)

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
putin_executor(food_egg_2020, bowl_2071)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the table_226. Robot is close to the bowl_2071. food_egg_2020 is inside bowl_2071. food_egg_2020 is close bowl_2071. food_egg_2020 released by left hand. 
##############################
From agent.py
grab_executor(bowl_2071)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the table_226. Robot is close to the bowl_2071. Grabbing bowl_2071 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the knife_2050. Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to whisk the egg in the bowl. The egg has been cracked and placed inside the bowl, but the final step of whisking has not been performed.
##############################
From agent.py
Human Instruction: The robot needs to whisk the egg in the bowl. The egg has been cracked and placed inside the bowl, but the final step of whisking has not been performed.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for bowl_2071 around cupboard_229.
Action 6: Walk to wallshelf_234.
Action 7: look for bowl_2071 around wallshelf_234.
Action 8: Walk to wallshelf_235.
Action 9: look for bowl_2071 around wallshelf_235.
Action 10: Walk to bench_228.
Action 11: look for bowl_2071 around bench_228.
Action 12: Walk to coffee_table_2068.
Action 13: look for bowl_2071 around coffee_table_2068.
Action 14: Walk to table_226.
Action 15: look for bowl_2071 around table_226.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for food_egg_2020 around fridge_289.
Action 20: Grab food_egg_2020.
Action 21: Walk to bowl_2071.
Action 22: Put food_egg_2020 into bowl_2071.
Action 23: Walk to food_egg_2020.
Action 24: Grab food_egg_2020.
Action 25: Walk to cutting_board_2051.
Action 26: Put food_egg_2020 on cutting_board_2051.
Action 27: Walk to knife_2050.
Action 28: Grab knife_2050.
Action 29: Walk to food_egg_2020.
Action 30: Cut food_egg_2020.
Action 31: Grab food_egg_2020.
Action 32: Walk to bowl_2071.
Action 33: Put food_egg_2020 into bowl_2071.
Action 34: Grab bowl_2071.
Action 35: Walk to faucet_43.
Action 36: Switch on faucet_43.
Action 37: Switch off faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior whisk_egg_in_bowl(egg:item, bowl:item):
    body:
        achieve close_char(char, bowl)
        # Ensure the character is close to the bowl
        achieve_once inside(egg, bowl)
        # Ensure the egg is inside the bowl
        if not cut(egg):
            achieve_once close_char(char, egg)
            # Ensure the character is close to the egg
            achieve cut(egg)
            # Whisk the egg by cutting it into pieces

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl item 

        whisk_egg_in_bowl(egg, bowl)
        # Whisk the egg inside the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior whisk_egg_in_bowl(egg:item, bowl:item, whisk:item):
    body:
        achieve_once inside(egg, bowl)
        # Ensure the egg is inside the bowl
        achieve_once inhand(whisk)
        # Hold the whisk in hand for whisking
        achieve clean(bowl)
        # Assume whisking leads to clean state as a continuation of the task

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl in which the egg was cracked

        bind whisk: item where:
            is_knife(whisk)
        # Select a whisking tool, here assumed to match available categories like knife

        whisk_egg_in_bowl(egg, bowl, whisk)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior whisk_egg_in_bowl(egg:item, bowl:item, whisk:item):
    body:
        achieve_once inside(egg, bowl)
        # Ensure the egg is inside the bowl
        achieve_once inhand(whisk)
        # Hold the whisk in hand for whisking
        achieve clean(bowl)
        # Assume whisking leads to clean state as a continuation of the task

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl in which the egg was cracked

        bind whisk: item where:
            is_knife(whisk)
        # Select a whisking tool, here assumed to match available categories like knife

        whisk_egg_in_bowl(egg, bowl, whisk)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(bowl_2071)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the bowl_2071. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the bowl_2071. Robot is close to the kitchen_counter_230. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(bowl_2071)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. bowl_2071 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot still needs to whisk the egg in the bowl. This action has not yet been performed.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_television_410(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==410
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(cd_player,television_instance)
        else:
            exp(cd_player,television_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,television_instance]=True
        close[television_instance,cd_player]=True
    

behavior find_mat_22_around_fryingpan_2083(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(mat,fryingpan_instance)
        else:
            exp(mat,fryingpan_instance)
    eff:
        unknown[mat]=False
        close[mat,fryingpan_instance]=True
        close[fryingpan_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_fryingpan(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_fryingpan(fryingpan, stove)
        # Heat the frying pan on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_fryingpan(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_fryingpan(fryingpan, stove)
        # Heat the frying pan on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the bowl_2071. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the bowl_2071. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the bowl_2071. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the bowl_2071. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the bowl_2071. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_bookshelf_354(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cd_player,bookshelf_instance)
        else:
            exp(cd_player,bookshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,bookshelf_instance]=True
        close[bookshelf_instance,cd_player]=True
    

behavior find_pillow_406_around_nightstand_100(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==100
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(pillow,nightstand_instance)
        else:
            exp(pillow,nightstand_instance)
    eff:
        unknown[pillow]=False
        close[pillow,nightstand_instance]=True
        close[nightstand_instance,pillow]=True
    

behavior find_mat_401_around_dishwasher_1001(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(mat,dishwasher_instance)
        else:
            exp(mat,dishwasher_instance)
    eff:
        unknown[mat]=False
        close[mat,dishwasher_instance]=True
        close[dishwasher_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior pour_egg_and_scramble(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)
        # Pour the whisked egg into the frying pan
        achieve cut(egg)
        # Scramble the egg by agitating it in the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        pour_egg_and_scramble(egg, fryingpan)
        # Pour the whisked egg into the frying pan and scramble it
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior pour_egg_and_scramble(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)
        # Pour the whisked egg into the frying pan
        achieve cut(egg)
        # Scramble the egg by agitating it in the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        pour_egg_and_scramble(egg, fryingpan)
        # Pour the whisked egg into the frying pan and scramble it
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has not yet scrambled the egg in the frying pan. You need to agitate or stir the egg within the frying pan to complete the scrambling process.
##############################
From agent.py
Human Instruction: The robot has not yet scrambled the egg in the frying pan. You need to agitate or stir the egg within the frying pan to complete the scrambling process.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for bowl_2071 around cupboard_229.
Action 6: Walk to wallshelf_234.
Action 7: look for bowl_2071 around wallshelf_234.
Action 8: Walk to wallshelf_235.
Action 9: look for bowl_2071 around wallshelf_235.
Action 10: Walk to bench_228.
Action 11: look for bowl_2071 around bench_228.
Action 12: Walk to coffee_table_2068.
Action 13: look for bowl_2071 around coffee_table_2068.
Action 14: Walk to table_226.
Action 15: look for bowl_2071 around table_226.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for food_egg_2020 around fridge_289.
Action 20: Grab food_egg_2020.
Action 21: Walk to bowl_2071.
Action 22: Put food_egg_2020 into bowl_2071.
Action 23: Walk to food_egg_2020.
Action 24: Grab food_egg_2020.
Action 25: Walk to cutting_board_2051.
Action 26: Put food_egg_2020 on cutting_board_2051.
Action 27: Walk to knife_2050.
Action 28: Grab knife_2050.
Action 29: Walk to food_egg_2020.
Action 30: Cut food_egg_2020.
Action 31: Grab food_egg_2020.
Action 32: Walk to bowl_2071.
Action 33: Put food_egg_2020 into bowl_2071.
Action 34: Grab bowl_2071.
Action 35: Walk to faucet_43.
Action 36: Switch on faucet_43.
Action 37: Switch off faucet_43.
Action 38: Walk to kitchen_counter_230.
Action 39: Put knife_2050 on kitchen_counter_230.
Action 40: Walk to faucet_43.
Action 41: Switch on faucet_43.
Action 42: Wash bowl_2071.
Action 43: Switch off faucet_43.
Action 44: Walk to fryingpan_2083.
Action 45: Grab fryingpan_2083.
Action 46: Walk to stove_2065.
Action 47: Put fryingpan_2083 on stove_2065.
Action 48: Switch on stove_2065.
Action 49: Walk to food_egg_2020.
Action 50: Grab food_egg_2020.
Action 51: Walk to fryingpan_2083.
Action 52: Put food_egg_2020 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_home_office_319(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_cat_2055_around_pot_2069(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(cat,pot_instance)
        else:
            exp(cat,pot_instance)
    eff:
        unknown[cat]=False
        close[cat,pot_instance]=True
        close[pot_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_and_scramble_egg_in_frying_pan(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(egg, fryingpan)
        # Pour the whisked egg into the frying pan
        achieve is_on(stove)
        # Ensure the stove remains on to provide heat
        achieve close_char(char, fryingpan)
        # Stay close to the frying pan for scrambling
        observe(fryingpan, "Gently agitate or stir the egg in the frying pan to complete the scrambling process")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the whisked egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        pour_and_scramble_egg_in_frying_pan(egg, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_and_scramble_egg_in_frying_pan(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(egg, fryingpan)
        # Pour the whisked egg into the frying pan
        achieve is_on(stove)
        # Ensure the stove remains on to provide heat
        achieve close_char(char, fryingpan)
        # Stay close to the frying pan for scrambling
        observe(fryingpan, "Gently agitate or stir the egg in the frying pan to complete the scrambling process")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the whisked egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        pour_and_scramble_egg_in_frying_pan(egg, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Gently agitate or stir the egg in the frying pan to complete the scrambling process)
##############################
From agent.py
obs(fryingpan_2083, Gently agitate or stir the egg in the frying pan to complete the scrambling process)
Get this information:  fryingpan_2083 is inside dining_room_201. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close to stove_2065. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_egg_2020. fryingpan_2083 is on stove_2065. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to gently agitate or stir the egg in the frying pan to complete the scrambling process.
##############################
From agent.py
Human Instruction: You need to gently agitate or stir the egg in the frying pan to complete the scrambling process.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for bowl_2071 around cupboard_229.
Action 6: Walk to wallshelf_234.
Action 7: look for bowl_2071 around wallshelf_234.
Action 8: Walk to wallshelf_235.
Action 9: look for bowl_2071 around wallshelf_235.
Action 10: Walk to bench_228.
Action 11: look for bowl_2071 around bench_228.
Action 12: Walk to coffee_table_2068.
Action 13: look for bowl_2071 around coffee_table_2068.
Action 14: Walk to table_226.
Action 15: look for bowl_2071 around table_226.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for food_egg_2020 around fridge_289.
Action 20: Grab food_egg_2020.
Action 21: Walk to bowl_2071.
Action 22: Put food_egg_2020 into bowl_2071.
Action 23: Walk to food_egg_2020.
Action 24: Grab food_egg_2020.
Action 25: Walk to cutting_board_2051.
Action 26: Put food_egg_2020 on cutting_board_2051.
Action 27: Walk to knife_2050.
Action 28: Grab knife_2050.
Action 29: Walk to food_egg_2020.
Action 30: Cut food_egg_2020.
Action 31: Grab food_egg_2020.
Action 32: Walk to bowl_2071.
Action 33: Put food_egg_2020 into bowl_2071.
Action 34: Grab bowl_2071.
Action 35: Walk to faucet_43.
Action 36: Switch on faucet_43.
Action 37: Switch off faucet_43.
Action 38: Walk to kitchen_counter_230.
Action 39: Put knife_2050 on kitchen_counter_230.
Action 40: Walk to faucet_43.
Action 41: Switch on faucet_43.
Action 42: Wash bowl_2071.
Action 43: Switch off faucet_43.
Action 44: Walk to fryingpan_2083.
Action 45: Grab fryingpan_2083.
Action 46: Walk to stove_2065.
Action 47: Put fryingpan_2083 on stove_2065.
Action 48: Switch on stove_2065.
Action 49: Walk to food_egg_2020.
Action 50: Grab food_egg_2020.
Action 51: Walk to fryingpan_2083.
Action 52: Put food_egg_2020 into fryingpan_2083.
Action 53: Observe around fryingpan_2083 with the question of Gently agitate or stir the egg in the frying pan to complete the scrambling process.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_home_office_319(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_cat_2055_around_couch_352(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
def gently_stirred_egg_in_fryingpan(fryingpan:item, egg:item):
    body:
        achieve_once inside(egg, fryingpan)
        # Pour the egg into the frying pan
        observe(fryingpan, "Gently agitate or stir the egg in the frying pan to complete the scrambling process")
        # Observe to ensure the egg is scrambled in the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind egg: item where:
            is_food_egg(egg)
        # Select the whisked egg

        gently_stirred_egg_in_fryingpan(fryingpan, egg)
        # Pour the whisked egg into the frying pan and scramble it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_tvstand_225(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cd_player,tvstand_instance)
        else:
            exp(cd_player,tvstand_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,tvstand_instance]=True
        close[tvstand_instance,cd_player]=True
    

behavior find_mat_173_around_sink_42(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(mat,sink_instance)
        else:
            exp(mat,sink_instance)
    eff:
        unknown[mat]=False
        close[mat,sink_instance]=True
        close[sink_instance,mat]=True
    

#exp_behavior_end

#goal_representation

behavior pour_egg_into_pan(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)
        # Pour the whisked egg into the frying pan

behavior scramble_egg_in_pan(egg:item, fryingpan:item):
    body:
        observe(fryingpan, "Gently agitate or stir the egg in the frying pan to complete the scrambling process")
        # Observe the pan to ensure the eggs are adequately scrambled as per human instruction

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item that was whisked

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan that was heated

        pour_egg_into_pan(egg, fryingpan)
        scramble_egg_in_pan(egg, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior pour_egg_into_pan(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)
        # Pour the whisked egg into the frying pan

behavior scramble_egg_in_pan(egg:item, fryingpan:item):
    body:
        observe(fryingpan, "Gently agitate or stir the egg in the frying pan to complete the scrambling process")
        # Observe the pan to ensure the eggs are adequately scrambled as per human instruction

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item that was whisked

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan that was heated

        pour_egg_into_pan(egg, fryingpan)
        scramble_egg_in_pan(egg, fryingpan)

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Gently agitate or stir the egg in the frying pan to complete the scrambling process)
##############################
From agent.py
obs(fryingpan_2083, Gently agitate or stir the egg in the frying pan to complete the scrambling process)
Get this information:  fryingpan_2083 is inside dining_room_201. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close to stove_2065. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_egg_2020. fryingpan_2083 is on stove_2065. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to gently agitate or stir the egg in the frying pan to complete the scrambling process, as per the human instruction.
##############################
Task Summary:
Task Goal:
Scramble egg by the fryingpan.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(wallshelf_234)', 'walk_executor(wallshelf_235)', 'walk_executor(bench_228)', 'walk_executor(coffee_table_2068)', 'walk_executor(table_226)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_egg_2020)', 'walk_executor(bowl_2071)', 'putin_executor(food_egg_2020, bowl_2071)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(cutting_board_2051)', 'put_executor(food_egg_2020, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_egg_2020)', 'cut_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(bowl_2071)', 'putin_executor(food_egg_2020, bowl_2071)', 'grab_executor(bowl_2071)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(kitchen_counter_230)', 'put_executor(knife_2050, kitchen_counter_230)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(bowl_2071)', 'switchoff_executor(faucet_43)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)']
Time info:
Time consume: 316 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 171
goal generate times: 9
goal correct times: 0
action_num: 44

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
