From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt to be washed.', '2. Hand wash the shirt.', '3. Iron the shirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_basket_for_clothes_2006(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_shirt_to_be_washed(shirt: item):
    body:
        observe(shirt, "Verify the location or condition of the shirt to be washed")

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt item

        find_shirt_to_be_washed(shirt)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_shirt_to_be_washed(shirt: item):
    body:
        observe(shirt, "Verify the location or condition of the shirt to be washed")

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt item

        find_shirt_to_be_washed(shirt)

##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Verify the location or condition of the shirt to be washed)
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Robot find: clothes_pants_2085, clothes_shirt_2086, clothes_socks_2087, clothes_skirt_2088, towel_rack_31, towel_rack_33, towel_rack_32, towel_rack_34, mat_22, Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. 
##############################
From agent.py
exp(clothes_shirt_2086, basket_for_clothes_2006)
Find clothes_shirt_2086. 
##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2086, Verify the location or condition of the shirt to be washed)
##############################
From agent.py
obs(clothes_shirt_2086, Verify the location or condition of the shirt to be washed)
Get this information:  clothes_shirt_2086 is close to basket_for_clothes_2006. clothes_shirt_2086 is close to character_65. clothes_shirt_2086 is inside bathroom_1. clothes_shirt_2086 is inside basket_for_clothes_2006. clothes_shirt_2086 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_sink_231(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_clothes_gloves_2046_around_closetdrawer_120(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_shirt(shirt:item):
    body:
        wash(shirt)

behavior rinse_shirt(shirt:item):
    body:
        rinse(shirt)

behavior squeeze_shirt(shirt:item):
    body:
        squeeze(shirt)

behavior clean_shirt(shirt:item):
    body:
        wash_shirt(shirt)
        rinse_shirt(shirt)
        squeeze_shirt(shirt)
        achieve clean(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        clean_shirt(shirt)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_shirt(shirt:item):
    body:
        wash(shirt)

behavior rinse_shirt(shirt:item):
    body:
        rinse(shirt)

behavior squeeze_shirt(shirt:item):
    body:
        squeeze(shirt)

behavior clean_shirt(shirt:item):
    body:
        wash_shirt(shirt)
        rinse_shirt(shirt)
        squeeze_shirt(shirt)
        achieve clean(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        clean_shirt(shirt)

##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(clothes_shirt_2086)switchoff_executor(faucet_43)walk_executor(clothes_shirt_2086)rinse_executor(clothes_shirt_2086)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. clothes_shirt_2086 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. 
##############################
From agent.py
rinse_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to squeeze clothes_shirt_2086 after rinsing it to complete the hand washing process.
##############################
From agent.py
Human Instruction: You need to squeeze clothes_shirt_2086 after rinsing it to complete the hand washing process.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2006.
Action 2: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 3: Observe around clothes_shirt_2086 with the question of Verify the location or condition of the shirt to be washed.
Action 4: Grab clothes_shirt_2086.
Action 5: Walk to faucet_43.
Action 6: Switch on faucet_43.
Action 7: Wash clothes_shirt_2086.
Action 8: Switch off faucet_43.
Action 9: Walk to clothes_shirt_2086.
Action 10: Rinse clothes_shirt_2086.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_sink_42(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_towel_2056_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior hand_wash_shirt(shirt:item):
    body:
        rinse(shirt)
        # Rinse the shirt
        squeeze(shirt)
        # Squeeze the shirt to remove excess water

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086 to be washed

        hand_wash_shirt(shirt)
        # Complete the hand washing of the shirt

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior hand_wash_shirt(shirt:item):
    body:
        rinse(shirt)
        # Rinse the shirt
        squeeze(shirt)
        # Squeeze the shirt to remove excess water

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086 to be washed

        hand_wash_shirt(shirt)
        # Complete the hand washing of the shirt

##############################
From agent.py-> find a plan in act()
rinse_executor(clothes_shirt_2086)
##############################
From agent.py
rinse_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to squeeze the clothes_shirt_2086 after rinsing it to complete the hand washing process.
##############################
From agent.py
Human Instruction: You need to squeeze the clothes_shirt_2086 after rinsing it to complete the hand washing process.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2006.
Action 2: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 3: Observe around clothes_shirt_2086 with the question of Verify the location or condition of the shirt to be washed.
Action 4: Grab clothes_shirt_2086.
Action 5: Walk to faucet_43.
Action 6: Switch on faucet_43.
Action 7: Wash clothes_shirt_2086.
Action 8: Switch off faucet_43.
Action 9: Walk to clothes_shirt_2086.
Action 10: Rinse clothes_shirt_2086.
Action 11: Rinse clothes_shirt_2086.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_115_around_closetdrawer_120(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_shirt(shirt:item):
    body:
        achieve_once clean(shirt)
        achieve_once dry(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086

        squeeze_shirt(shirt)
        # Squeeze the shirt to complete the hand washing process

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_towel_2058_around_towel_rack_33(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==33
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_hanger_374_around_closetdrawer_392(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_shirt(shirt:item):
    body:
        achieve_once squeeze(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select shirt with ID 2086

        squeeze_shirt(shirt)
        # Squeeze the shirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_sink_42(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_towel_2059_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_hanger_140_around_closetdrawer_120(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_the_shirt(shirt:item):
    body:
        achieve clean(shirt)

behavior rinse_and_squeeze_shirt(shirt:item):
    body:
        rinse(shirt)
        # Rinse the shirt again
        rinse(shirt)
        # Squeeze the shirt to remove excess water
        squeeze(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2086
        # Select the shirt with ID 2086, which needs to be washed
        wash_the_shirt(shirt)
        rinse_and_squeeze_shirt(shirt)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_the_shirt(shirt:item):
    body:
        achieve clean(shirt)

behavior rinse_and_squeeze_shirt(shirt:item):
    body:
        rinse(shirt)
        # Rinse the shirt again
        rinse(shirt)
        # Squeeze the shirt to remove excess water
        squeeze(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2086
        # Select the shirt with ID 2086, which needs to be washed
        wash_the_shirt(shirt)
        rinse_and_squeeze_shirt(shirt)

##############################
From agent.py-> find a plan in act()
rinse_executor(clothes_shirt_2086)rinse_executor(clothes_shirt_2086)
##############################
From agent.py
rinse_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. 
##############################
From agent.py
rinse_executor(clothes_shirt_2086)
Robot find: Robot is close to the clothes_shirt_2086. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to squeeze the clothes_shirt_2086 after rinsing it to complete the hand washing process.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_128_around_ironing_board_2074(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(hanger,ironing_board_instance)
        else:
            exp(hanger,ironing_board_instance)
    eff:
        unknown[hanger]=False
        close[hanger,ironing_board_instance]=True
        close[ironing_board_instance,hanger]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation

behavior locate_iron_and_board(shirt:item):
    body:
        foreach iron: item:
            if is_iron(iron) and not visited(iron):
                observe(iron, "Determine if it is close to an ironing board")                

behavior iron_shirt(shirt:item, iron:item, board:item):
    body:
        achieve_once on(shirt, board)
        # Position shirt on the ironing board
        achieve_once is_on(iron)
        # Turn on the iron to iron the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select clothes_shirt_2086

        locate_iron_and_board(shirt)

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_shirt(shirt, iron, ironing_board)
        # Iron the shirt on the ironing board using the iron

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior locate_iron_and_board(shirt:item):
    body:
        foreach iron: item:
            if is_iron(iron) and not visited(iron):
                observe(iron, "Determine if it is close to an ironing board")                

behavior iron_shirt(shirt:item, iron:item, board:item):
    body:
        achieve_once on(shirt, board)
        # Position shirt on the ironing board
        achieve_once is_on(iron)
        # Turn on the iron to iron the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select clothes_shirt_2086

        locate_iron_and_board(shirt)

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_shirt(shirt, iron, ironing_board)
        # Iron the shirt on the ironing board using the iron

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)exp(iron_2089, ironing_board_2074)walk_executor(iron_2089)obs(iron_2089, Determine if it is close to an ironing board)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: iron_2089, Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
exp(iron_2089, ironing_board_2074)
Find iron_2089. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2089)obs(iron_2089, Determine if it is close to an ironing board)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)plugin_executor(iron_2089)switchon_executor(iron_2089)
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py
obs(iron_2089, Determine if it is close to an ironing board)
Get this information:  iron_2089 is inside bathroom_1. iron_2089 is close to ironing_board_2074. iron_2089 is close to character_65. iron_2089 is on ironing_board_2074. iron_2089 is PLUGGED_OUT. iron_2089 is OFF. iron_2089 is CLEAN.
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. ironing_board_2074 is close clothes_shirt_2086. clothes_shirt_2086 is close ironing_board_2074. clothes_shirt_2086 is on ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
plugin_executor(iron_2089)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. iron_2089 is plugged in. 
##############################
From agent.py
switchon_executor(iron_2089)
Robot find: Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. iron_2089 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to iron the shirt with the iron. While the iron has been plugged in and turned on, the ironing action itself has not been completed.
##############################
From agent.py
Human Instruction: You need to iron the shirt with the iron. While the iron has been plugged in and turned on, the ironing action itself has not been completed.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2006.
Action 2: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 3: Observe around clothes_shirt_2086 with the question of Verify the location or condition of the shirt to be washed.
Action 4: Grab clothes_shirt_2086.
Action 5: Walk to faucet_43.
Action 6: Switch on faucet_43.
Action 7: Wash clothes_shirt_2086.
Action 8: Switch off faucet_43.
Action 9: Walk to clothes_shirt_2086.
Action 10: Rinse clothes_shirt_2086.
Action 11: Rinse clothes_shirt_2086.
Action 12: Rinse clothes_shirt_2086.
Action 13: Rinse clothes_shirt_2086.
Action 14: Walk to ironing_board_2074.
Action 15: look for iron_2089 around ironing_board_2074.
Action 16: Walk to iron_2089.
Action 17: Observe around iron_2089 with the question of Determine if it is close to an ironing board.
Action 18: Walk to ironing_board_2074.
Action 19: Put clothes_shirt_2086 on ironing_board_2074.
Action 20: Plug in iron_2089.
Action 21: Switch on iron_2089.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_382(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_hanger_369_around_closetdrawer_120(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        achieve_once plugged(iron)
        achieve_once is_on(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the clean shirt
        
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        iron_shirt(shirt, iron, ironing_board)
        # Iron the shirt using the iron on the ironing board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_130_around_closetdrawer_122(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board to begin ironing

        achieve_once plugged(iron)
        # Ensure the iron is plugged in

        achieve is_on(iron)
        # Ensure the iron remains on until the shirt is ironed

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        # Select the shirt that needs to be ironed

        bind iron: item where:
            is_iron(iron)
        # Select the iron to use

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board to use

        iron_shirt(clothes_shirt, iron, ironing_board)
        # Iron the shirt using the iron on the ironing board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_113_around_closetdrawer_120(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_the_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve_once is_on(iron)
        # Ensure the iron is turned on
        achieve_once inhand(iron)
        # Temporarily hold the iron to iron the shirt
        achieve clean(shirt)
        # Ensure the shirt is ironed and clean

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select a cleaned shirt to iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron) and is_on(iron) and plugged(iron)
        # Select an iron that is plugged in and turned on

        iron_the_shirt(shirt, iron, ironing_board)
        # Iron the shirt on the ironing board

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_the_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve_once is_on(iron)
        # Ensure the iron is turned on
        achieve_once inhand(iron)
        # Temporarily hold the iron to iron the shirt
        achieve clean(shirt)
        # Ensure the shirt is ironed and clean

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select a cleaned shirt to iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron) and is_on(iron) and plugged(iron)
        # Select an iron that is plugged in and turned on

        iron_the_shirt(shirt, iron, ironing_board)
        # Iron the shirt on the ironing board

##############################
From agent.py-> find a plan in act()
walk_executor(iron_2089)grab_executor(iron_2089)
##############################
From agent.py
walk_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. 
##############################
From agent.py
grab_executor(iron_2089)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. Grabbing iron_2089 by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The ironing action itself has not been completed. You need to perform the ironing action on the shirt using the iron that is already turned on and plugged in.
##############################
From agent.py
Human Instruction: The ironing action itself has not been completed. You need to perform the ironing action on the shirt using the iron that is already turned on and plugged in.

The actions you have taken:
Action 1: Walk to basket_for_clothes_2006.
Action 2: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 3: Observe around clothes_shirt_2086 with the question of Verify the location or condition of the shirt to be washed.
Action 4: Grab clothes_shirt_2086.
Action 5: Walk to faucet_43.
Action 6: Switch on faucet_43.
Action 7: Wash clothes_shirt_2086.
Action 8: Switch off faucet_43.
Action 9: Walk to clothes_shirt_2086.
Action 10: Rinse clothes_shirt_2086.
Action 11: Rinse clothes_shirt_2086.
Action 12: Rinse clothes_shirt_2086.
Action 13: Rinse clothes_shirt_2086.
Action 14: Walk to ironing_board_2074.
Action 15: look for iron_2089 around ironing_board_2074.
Action 16: Walk to iron_2089.
Action 17: Observe around iron_2089 with the question of Determine if it is close to an ironing board.
Action 18: Walk to ironing_board_2074.
Action 19: Put clothes_shirt_2086 on ironing_board_2074.
Action 20: Plug in iron_2089.
Action 21: Switch on iron_2089.
Action 22: Walk to iron_2089.
Action 23: Grab iron_2089.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_128_around_closetdrawer_120(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        achieve is_on(iron)
        # Ensure the iron is turned on for the ironing process

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the clean shirt to be ironed

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron) and plugged(iron)
        # Select a pluggedin iron

        iron_shirt(shirt, ironing_board, iron)
        # Iron the shirt placed on the ironing board using the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_clothes(shirt:item, iron:item, ironing_board:item):
    body:
        achieve is_on(iron) # Ensure the iron is turned on
        achieve_once inhand(iron) # Temporarily hold the iron
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board
        # Iron the shirt here (the actual ironing action is implicit in the task)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) # Select the shirt to be ironed

        bind ironing_board: item where:
            is_ironing_board(ironing_board) # Select the ironing board

        bind iron: item where:
            is_iron(iron) # Select the iron

        iron_clothes(shirt, iron, ironing_board) # Perform the ironing task

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_130_around_closetdrawer_120(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_the_shirt(shirt: item, ironing_board: item, iron: item):
    body:
        achieve_once on(shirt, ironing_board) # Ensure the shirt is on the ironing board
        achieve_once is_on(iron) # Ensure the iron is on
        achieve_once plugged(iron) # Ensure the iron is plugged in
        # The ironing action will be completed once the iron is on and plugged in

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Bind the shirt item for use

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board item for use

        bind iron: item where:
            is_iron(iron) and is_on(iron) and plugged(iron)
        # Bind the iron that is already on and plugged in for use

        iron_the_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_134_around_closetdrawer_120(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board) 
        # Make sure the shirt is on the ironing board
        
        achieve_once inhand(iron)
        # Hold the iron in hand
        
        achieve clean(shirt) 
        # Iron the shirt until it is clean

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Bind the shirt item for ironing

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board

        bind iron: item where:
            is_iron(iron) and is_on(iron) and plugged(iron)
        # Bind the iron item that is on and plugged in

        iron_shirt(shirt, ironing_board, iron)
        # Perform the ironing action on the shirt
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_the_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is placed on the ironing board
        achieve_once inhand(iron)
        # Pick up the iron for use
        achieve is_on(iron)
        # Ensure the iron is on

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and clean(clothes_shirt)
        # Select the clean shirt

        bind iron_2089: item where:
            is_iron(iron_2089) and plugged(iron_2089) and is_on(iron_2089)
        # Select the iron that is already plugged in and on

        bind ironing_board_2074: item where:
            is_ironing_board(ironing_board_2074)
        # Select the ironing board

        iron_the_shirt(clothes_shirt, iron_2089, ironing_board_2074)
        # Iron the clean shirt using the iron on the ironing board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_120(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_hanger_109_around_closetdrawer_120(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is placed on the ironing board
        achieve_once inhand(iron)
        # Hold the iron in hand

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron to use

        achieve is_on(iron)
        # Ensure the iron is turned on

        achieve plugged(iron)
        # Ensure the iron is plugged in

        achieve close(shirt, ironing_board)
        # Ensure the shirt is close to the ironing board

        iron_shirt(shirt, iron)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. iron the shirt." ?
Answer: Put the shirt on the ironing board. Turn on the iron. Then put the iron on the shirt, push and pull the iron on the shirt.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_120(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_hanger_132_around_closetdrawer_119(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_for_ironing(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        achieve_once is_on(iron)
        # Ensure the iron is turned on

behavior __goal__():
    body: 
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the clean shirt to be ironed
        
        bind iron: item where:
            is_iron(iron) and plugged(iron)
        # Select the iron that is already plugged in
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        prepare_for_ironing(shirt, iron, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_148(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_hanger_132_around_closetdrawer_119(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve_once is_on(iron)
        # Make sure the iron is on
        achieve_once inhand(iron)
        # Temporarily hold the iron in hand
        # Intermediate steps will involve pushing and pulling the iron over the shirt, which is an implied set of actions

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        iron_shirt(shirt, ironing_board, iron)
        # Execute the ironing behavior
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_377(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_120(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ironing_board(shirt:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board

behavior perform_ironing(shirt:item, iron:item):
    body:
        achieve_once inhand(iron)
        achieve_once is_on(iron)
        # Ensure the iron is on and ready for use
        # Perform the ironing action by pushing and pulling the iron on the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt for ironing

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        prepare_ironing_board(shirt, ironing_board)
        perform_ironing(shirt, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_126_around_closetdrawer_120(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_the_shirt(clothes_shirt:item, iron:item):
    body:
        achieve_once on(clothes_shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        achieve_once is_on(iron)
        # Ensure the iron is turned on
        achieve_once inhand(iron)
        # Temporarily hold the iron to iron the shirt
        achieve clean(clothes_shirt)
        # Ensure the shirt is clean and ironed

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt)
        # Select the shirt item

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_the_shirt(clothes_shirt, iron)
        # Perform ironing on the shirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_116(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_hanger_372_around_closetdrawer_121(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==121
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve_once is_on(iron)
        # Ensure the iron is turned on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select a shirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        iron_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_120(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_120(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve_once is_on(iron)
        # Ensure the iron is turned on
        achieve_once inhand(iron)
        # Grab the iron for ironing the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Bind the shirt item

        bind iron: item where:
            is_iron(iron)
        # Bind the iron item

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board item

        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_light_411(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==411
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(clothes_underwear,light_instance)
        else:
            exp(clothes_underwear,light_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,light_instance]=True
        close[light_instance,clothes_underwear]=True
    

behavior find_hanger_109_around_closetdrawer_120(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        achieve_once is_on(iron)
        achieve plugged(iron)
        achieve_once is_clothes_shirt(shirt)
        # Assure the shirt is on the board, the iron is on, and plugged in
        # These conditions are met, then execute ironing action

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_hanger_359_around_closetdrawer_119(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_shirt_on_board(shirt:item, board:item):
    body:
        achieve_once on(shirt, board)

behavior iron_the_shirt(shirt:item, iron:item):
    body:
        achieve_once is_on(iron)
        achieve_once inhand(iron)
        # Perform ironing of the shirt using the iron

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        bind iron: item where:
            is_iron(iron) and plugged(iron)
        # Select the pluggedin iron
        
        put_shirt_on_board(shirt, ironing_board)
        # Place the shirt on the ironing board
        
        iron_the_shirt(shirt, iron)
        # Iron the shirt using the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_119(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_hanger_112_around_closetdrawer_120(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve_once inhand(iron) # Hold the iron temporarily
        achieve is_on(iron) # Ensure the iron remains on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Bind the shirt item for use

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board item for use

        bind iron: item where:
            is_iron(iron)
        # Bind the iron item for use

        iron_shirt(shirt, ironing_board, iron)
        # Iron the shirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_117(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve_once is_on(iron)
        # Ensure the iron is turned on for the ironing task

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_shirt(shirt, ironing_board, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_120(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_hanger_134_around_closetdrawer_122(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_shirt_on_ironing_board(shirt:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)

behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve_once is_on(iron)
        # Iron the shirt using the iron

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Bind the cleaned shirt for use

        bind iron: item where:
            is_iron(iron) and is_on(iron)
        # Bind the iron which is already turned on for use

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board

        place_shirt_on_ironing_board(shirt, ironing_board)
        iron_shirt(shirt, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_119(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_hanger_375_around_closetdrawer_120(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing board
        achieve_once is_on(iron) # Ensure the iron is turned on
        # No further actions are required to specify the program will automatically move the iron over the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt) # Ensure the shirt is clean before ironing
        # Select the cleaned shirt

        bind iron: item where:
            is_iron(iron) and is_on(iron) and plugged(iron)
        # Select the iron that is turned on and plugged in
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        iron_shirt(shirt, iron, ironing_board)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. iron the shirt." ?
Answer: Put the shirt on the ironing board. Turn on the iron. Then put the iron on the shirt, push and pull the iron on the shirt.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2049_around_closetdrawer_120(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_hanger_359_around_dresser_358(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(hanger,dresser_instance)
        else:
            exp(hanger,dresser_instance)
    eff:
        unknown[hanger]=False
        close[hanger,dresser_instance]=True
        close[dresser_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        achieve_once inhand(iron)
        # Temporarily hold the iron
        
behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        iron_shirt(iron, shirt, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_115_around_closetdrawer_117(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is placed on the ironing board
        achieve is_on(iron)
        # Keep the iron turned on
        achieve_once close_char(char, shirt)
        # Be close to the shirt on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        iron_shirt(iron, shirt, ironing_board) 
        # Complete the ironing task for the shirt

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve_once on(shirt, ironing_board)
        # Ensure the shirt is placed on the ironing board
        achieve is_on(iron)
        # Keep the iron turned on
        achieve_once close_char(char, shirt)
        # Be close to the shirt on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        iron_shirt(iron, shirt, ironing_board) 
        # Complete the ironing task for the shirt

##############################
From agent.py-> find a plan in act()
walk_executor(clothes_shirt_2086)
##############################
From agent.py
walk_executor(clothes_shirt_2086)
Robot find: Robot is close to the ironing_board_2074. Robot is close to the iron_2089. Robot is close to the clothes_shirt_2086. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: While the shirt is on the ironing board and the iron is plugged in and turned on, the actual ironing action has not been performed. You need to push and pull the iron on the shirt to complete the ironing task.
##############################
Task Summary:
Task Goal:
Hand wash a shirt and iron this shirt.
Action History:
['walk_executor(basket_for_clothes_2006)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(clothes_shirt_2086)', 'switchoff_executor(faucet_43)', 'walk_executor(clothes_shirt_2086)', 'rinse_executor(clothes_shirt_2086)', 'rinse_executor(clothes_shirt_2086)', 'rinse_executor(clothes_shirt_2086)', 'rinse_executor(clothes_shirt_2086)', 'walk_executor(ironing_board_2074)', 'walk_executor(iron_2089)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'plugin_executor(iron_2089)', 'switchon_executor(iron_2089)', 'walk_executor(iron_2089)', 'grab_executor(iron_2089)', 'walk_executor(clothes_shirt_2086)']
Time info:
Time consume: 452 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 7
goal generate times: 30
goal correct times: 0
action_num: 20

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 1 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
