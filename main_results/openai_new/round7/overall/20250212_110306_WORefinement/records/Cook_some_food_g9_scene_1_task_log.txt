From agent.py
Reset goals: The sub-goals are: 
['1. Find and peel potatoes.  ', '2. Cut the potatoes into strips.  ', '3. Fry the potato strips until golden brown.  ', '4. Drain and serve the French fries.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2107_around_kitchen_counter_122(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_peel_potatoes(potato:item):
    body:
        observe(potato, "Check if the potato is ready to be peeled")
        # Ensure the potato is proper for peeling
        achieve cut(potato)
        # Peel the potato

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato item

        find_and_peel_potatoes(potato)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_peel_potatoes(potato:item):
    body:
        observe(potato, "Check if the potato is ready to be peeled")
        # Ensure the potato is proper for peeling
        achieve cut(potato)
        # Peel the potato

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato item

        find_and_peel_potatoes(potato)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_potato_2107, kitchen_counter_122)walk_executor(food_potato_2107)obs(food_potato_2107, Check if the potato is ready to be peeled)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_potato_2107, kitchen_counter_122)
Fail to find food_potato_2107 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_potato_2107, cupboard_118)walk_executor(food_potato_2107)obs(food_potato_2107, Check if the potato is ready to be peeled)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(food_potato_2107, cupboard_118)
Fail to find food_potato_2107 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_potato_2107, fridge_126)walk_executor(food_potato_2107)obs(food_potato_2107, Check if the potato is ready to be peeled)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_potato_2107, fridge_126)
Find food_potato_2107. 
##############################
From agent.py-> find a plan in act()
obs(food_potato_2107, Check if the potato is ready to be peeled)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
obs(food_potato_2107, Check if the potato is ready to be peeled)
Get this information:  food_potato_2107 is close to fridge_126. food_potato_2107 is close to character_240. food_potato_2107 is inside dining_room_41. food_potato_2107 is inside fridge_126. food_potato_2107 is CLEAN.
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_potato_2107. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. 
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_pot_2138(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_carrot,pot_instance)
        else:
            exp(food_carrot,pot_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,pot_instance]=True
        close[pot_instance,food_carrot]=True
    

behavior find_measuring_cup_2012_around_cupboard_117(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(measuring_cup,cupboard_instance)
        else:
            exp(measuring_cup,cupboard_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cupboard_instance]=True
        close[cupboard_instance,measuring_cup]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_potatoes(potato:item, board:item, knife:item):
    body:
        achieve_once on(potato, board)
        # Place the potato on the cutting board
        achieve_once inhand(knife)
        # Grab the knife
        achieve cut(potato)
        # Cut the potato into strips

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select the potato for cutting

        bind board: item where:
            is_cutting_board(board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_potatoes(potato, board, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cut_potatoes(potato:item, board:item, knife:item):
    body:
        achieve_once on(potato, board)
        # Place the potato on the cutting board
        achieve_once inhand(knife)
        # Grab the knife
        achieve cut(potato)
        # Cut the potato into strips

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select the potato for cutting

        bind board: item where:
            is_cutting_board(board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_potatoes(potato, board, knife)

##############################
From agent.py-> find a plan in act()
cut_executor(food_potato_2107)
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_glue_2045_around_bathroom_cabinet_17(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(glue,bathroom_cabinet_instance)
        else:
            exp(glue,bathroom_cabinet_instance)
    eff:
        unknown[glue]=False
        close[glue,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,glue]=True
    

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes_until_golden_brown(potato_slice:item, stove:item, fryingpan:item):
    body:
        achieve_once inside(potato_slice, fryingpan)
        # Place the potato slices inside the frying pan
        achieve plugged(stove)
        # Ensure the stove is plugged in for frying
        achieve_once is_on(stove)
        # Turn on the stove for frying
        achieve_once close_char(char, stove)
        # Stay close to the stove to monitor frying process
        observe(fryingpan, "Check when the potato slices are golden brown")
        # Observe the potato slices to ensure they reach the golden brown state
        achieve_once is_off(stove)
        # Turn off the stove after frying

behavior __goal__():
    body:
        bind potato_slice: item where:
            is_food_potato(potato_slice) and cut(potato_slice)
        # Select the cut potato slices

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        fry_potatoes_until_golden_brown(potato_slice, stove, fryingpan)
        # Fry the potato slices until they are golden brown

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_glue_2045_around_bathroom_cabinet_17(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(glue,bathroom_cabinet_instance)
        else:
            exp(glue,bathroom_cabinet_instance)
    eff:
        unknown[glue]=False
        close[glue,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,glue]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_strips(strip:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(strip, fryingpan)
        # Place the potato strips inside the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind potato_strip: item where:
            is_food_potato(potato_strip) and cut(potato_strip)
        # Select cut potato strips

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_potato_strips(potato_strip, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_glue_2045_around_bathroom_cabinet_17(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(glue,bathroom_cabinet_instance)
        else:
            exp(glue,bathroom_cabinet_instance)
    eff:
        unknown[glue]=False
        close[glue,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,glue]=True
    

behavior find_food_kiwi_2054_around_cupboard_117(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_kiwi,cupboard_instance)
        else:
            exp(food_kiwi,cupboard_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,cupboard_instance]=True
        close[cupboard_instance,food_kiwi]=True
    

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes(oil:item, stove:item, fryingpan:item, potato_strips:item):
    body:
        achieve_once inside(oil, fryingpan) 
        # Add oil into the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove
        achieve cut(potato_strips)
        # Make sure the potato strips are cut
        achieve_once inside(potato_strips, fryingpan)
        # Place the potato strips inside the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind oil: item where:
            is_oil(oil)
        
        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)

        fry_potatoes(oil, stove, fryingpan, potato_strips)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_glue_2045_around_bathroom_cabinet_17(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(glue,bathroom_cabinet_instance)
        else:
            exp(glue,bathroom_cabinet_instance)
    eff:
        unknown[glue]=False
        close[glue,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,glue]=True
    

behavior find_food_butter_2007_around_cupboard_117(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_stove_on(stove:item):
    # Function to check if the stove is on
    symbol stove_on = exists o: item : (is_stove(o) and is_on(o))
    return stove_on

def find_frying_pan():
    # Function to find a frying pan
    foreach o: item:
        if is_fryingpan(o) and not visited(o):
            observe(o, "check if there is any oil or potato strips in the frying pan")

behavior fry_until_golden(oil:item, potato_strips:item, frying_pan:item):
    body:
        achieve_once inside(oil, frying_pan)
        achieve inside(potato_strips, frying_pan)
        # Assume the frying process naturally results in golden brown color given correct conditions

behavior heat_on_stove(frying_pan:item, stove:item):
    body:
        achieve_once on(frying_pan, stove)

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select potato strips that are already cut

        if not exists frying_pan: item : (is_fryingpan(frying_pan) and id[frying_pan] == 3001):
            find_frying_pan()
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and (id[frying_pan] == 3001)

        if not is_stove_on(frying_pan):
            bind stove: item where:
                is_stove(stove)
            heat_on_stove(frying_pan, stove)

        fry_until_golden(oil, potato_strips, frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes(potato_strips:item, oil:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan)
        # Ensure the frying pan has oil in it
        achieve_once on(potato_strips, fryingpan)
        # Place the potato strips inside the frying pan
        achieve is_on(fryingpan)
        # Turn on the frying pan

behavior __goal__():
    body:
        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the potato strips

        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        fry_potatoes(potato_strips, oil, fryingpan)
        # Fry the potato strips until golden brown

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_oven_127(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_food_kiwi_2054_around_pot_2138(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_kiwi,pot_instance)
        else:
            exp(food_kiwi,pot_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,pot_instance]=True
        close[pot_instance,food_kiwi]=True
    

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_frying_pan(pan:item):
    # Function to check if an item is a frying pan
    symbol is_frying_pan= is_fryingpan(pan)
    return is_frying_pan

def has_potatoes_in_pan(pan:item):
    # Function to check if there are potato strips in the frying pan
    symbol has_potatoes= exists o: item : (is_food_potato(o) and inside(o, pan))
    return has_potatoes

behavior fry_potatoes(pan:item):
    body:
        achieve_once inside(food_oil, pan)
        # Pour oil into the pan
        achieve_once is_on(stove)
        # Turn on the stove
        achieve_once cut(food_potato)
        # Ensure the potato strips are ready for frying
        achieve_once inside(food_potato, pan)
        # Place the cut potato strips into the pan
        achieve_once golden_brown(food_potato)
        # Fry the potatoes until they are golden brown

behavior __goal__():
    body:
        bind pan: item where:
            is_frying_pan(pan) and has_potatoes_in_pan(pan)
        # Select a frying pan with potato strips
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind food_oil: item where:
            is_oil(food_oil)
        # Select cooking oil

        bind food_potato: item where:
            is_food_potato(food_potato)
        # Select the potato strips to be fried

        fry_potatoes(pan)
        # Fry the potatoes in the selected frying pan

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the potato strips until golden brown.  " ?
Answer: Find a frying pan and put it on the stove. Turn on the stove and add some oil. Put the potato pieces in the frying pan.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def has_oil_in_pan(fryingpan: item):
    # Function to check if there is oil inside the frying pan
    symbol has_oil = exists o: item : (is_oil(o) and inside(o, fryingpan))
    return has_oil

def has_potato_strips(fryingpan: item):
    # Function to check if there are potato strips inside the frying pan
    symbol has_potato = exists o: item : (is_food_potato(o) and cut(o) and inside(o, fryingpan))
    return has_potato

behavior fry_until_golden(fryingpan: item):
    body:
        achieve is_on(stove)
        # Ensure the stove is on to fry the potato strips

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)
        
        # Check if the frying pan contains oil and potato strips
        if not has_oil_in_pan(fryingpan) or not has_potato_strips(fryingpan):
            foreach o: item:
                if is_oil(o):
                    achieve_once inside(o, fryingpan)
                if is_food_potato(o) and cut(o):
                    achieve_once inside(o, fryingpan)

        fry_until_golden(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_strips(pan:item, stove:item):
    body:
        # Achieve the state of having the stove on
        achieve is_on(stove)
        # Achieve the state of having oil inside the frying pan
        achieve inside(oil, pan)
        # Achieve the state of having potato strips inside the frying pan
        achieve inside(potato_strips, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind oil: item where:
            is_oil(oil)
        # Select oil to be used in the frying pan
        
        bind potato_strips: item where:
            is_food_potato(potato_strips)
        # Select potato strips

        fry_potato_strips(pan, stove)
        # Fry the potato strips

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_glue_2045_around_bathroom_cabinet_17(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(glue,bathroom_cabinet_instance)
        else:
            exp(glue,bathroom_cabinet_instance)
    eff:
        unknown[glue]=False
        close[glue,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,glue]=True
    

behavior find_food_butter_2007_around_bookshelf_275(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(food_butter,bookshelf_instance)
        else:
            exp(food_butter,bookshelf_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,bookshelf_instance]=True
        close[bookshelf_instance,food_butter]=True
    

behavior find_food_kiwi_2054_around_bookshelf_275(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(food_kiwi,bookshelf_instance)
        else:
            exp(food_kiwi,bookshelf_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,bookshelf_instance]=True
        close[bookshelf_instance,food_kiwi]=True
    

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
# Define behavior to place potato strips in the frying pan
behavior put_potato_in_pan(potato_strip:item, frying_pan:item):
    body:
        achieve_once inside(potato_strip, frying_pan)
  
# Define behavior to add oil to the frying pan
behavior add_oil_to_pan(oil:item, frying_pan:item):
    body:
        achieve_once inside(oil, frying_pan)

# Define behavior to turn on the stove
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

# Define behavior to fry potato strips until golden brown
behavior fry_potato_strips(frying_pan:item, stove:item):
    body:
        achieve_once close_char(char, frying_pan) 
        # Ensure character is close to the frying pan

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind potato_strip: item where:
            is_food_potato(potato_strip) and cut(potato_strip)
        # Select cut potato strips

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind oil: item where:
            is_oil(oil)
        # Select oil

        put_potato_in_pan(potato_strip, frying_pan)
        add_oil_to_pan(oil, frying_pan)
        turn_on_stove(stove)
        fry_potato_strips(frying_pan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_glue_2045_around_bookshelf_275(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(glue,bookshelf_instance)
        else:
            exp(glue,bookshelf_instance)
    eff:
        unknown[glue]=False
        close[glue,bookshelf_instance]=True
        close[bookshelf_instance,glue]=True
    

behavior find_food_kiwi_2054_around_bookshelf_275(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(food_kiwi,bookshelf_instance)
        else:
            exp(food_kiwi,bookshelf_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,bookshelf_instance]=True
        close[bookshelf_instance,food_kiwi]=True
    

behavior find_oil_2013_around_pot_2138(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(oil,pot_instance)
        else:
            exp(oil,pot_instance)
    eff:
        unknown[oil]=False
        close[oil,pot_instance]=True
        close[pot_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_fries_color_correct(fries:item):
    # Function to check if the fries are golden brown
    symbol fries_correct_color= exists o: item : (is_food_potato(o) and inside(o, fries))
    return fries_correct_color

behavior observe_oil_and_add_to_pan(oil:item, pan:item):
    body:
        observe(oil, "Check if there is enough oil to fry the potatoes")
        achieve_once inside(oil, pan)
        # Add oil to the pan for frying

behavior fry_potatoes(fries:item, pan:item):
    body:
        achieve_once inside(fries, pan)
        # Put potato strips in the pan
        achieve_once is_on(pan)
        # Turn on the pan
        if not is_fries_color_correct(fries):
            # If fries are not yet golden brown, continue frying
            observe(fries, "Check if the fries are golden brown")

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries)
        # Select potato strips

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Ensure stove is turned on
        
        bind oil: item where:
            is_oil(oil)
        # Select oil for frying

        observe_oil_and_add_to_pan(oil, pan)
        fry_potatoes(fries, pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_strips(oil:item, stove:item, fryingpan:item, potatoes:item):
    body:
        achieve inside(oil, fryingpan)
        # Add oil inside the frying pan
        achieve is_on(stove)
        # Turn on the stove
        achieve inside(potatoes, fryingpan)
        # Put the potato pieces in the frying pan
        achieve fried(potatoes)
        # Fry the potato strips until golden brown

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select an oil item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the potato strips

        fry_potato_strips(oil, stove, fryingpan, potatoes)
        # Perform the frying process

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_butter_2007_around_bookshelf_275(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(food_butter,bookshelf_instance)
        else:
            exp(food_butter,bookshelf_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,bookshelf_instance]=True
        close[bookshelf_instance,food_butter]=True
    

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def has_frying_pan_near_stove():
    # Check if there is a frying pan near the stove
    symbol has_pan_near_stove=exists pan: item : (is_fryingpan(pan) and close(pan, stove))
    return has_pan_near_stove

def oil_inside_pan(pan:item):
    # Check if there is oil inside the pan
    symbol has_oil=exists oil: item : (is_oil(oil) and inside(oil, pan))
    return has_oil

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)
        # Add oil to the frying pan

behavior fry_potato_strips(potato_strips:item, pan:item):
    body:
        achieve_once inside(potato_strips, pan)
        # Fry potato strips in the pan until golden brown

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if has_frying_pan_near_stove():
            # If theres a frying pan near the stove, use it
            bind pan: item where:
                is_fryingpan(pan) and close(pan, stove)
        else:
            # Otherwise, find a frying pan and move it close to the stove
            foreach pan: item:
                if is_fryingpan(pan) and not close(pan, stove):
                    achieve_once close(pan, stove)

        bind oil: item where:
            is_oil(oil)
        # Bind the oil item for adding to the frying pan

        if not oil_inside_pan(pan):
            add_oil_to_pan(oil, pan)
        # Ensure the pan has oil

        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Bind the potato strips

        achieve is_on(stove) 
        # Turn on the stove

        fry_potato_strips(potato_strips, pan)
        # Fry potato strips until golden brown

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(knife_2037)', 'grab_executor(knife_2037)', 'walk_executor(food_potato_2107)', 'cut_executor(food_potato_2107)', 'cut_executor(food_potato_2107)']
Time info:
Time consume: 229 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 8
goal generate times: 14
goal correct times: 0
action_num: 14

Task complete rate:
Keystate: k1 - Requires: 14 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
