From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_coffee_filter_2035_around_cupboard_131(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior make_coffee(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is plugged in and turned on

behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior make_cup_of_coffee(cup:item):
    body:
        achieve has_a_free_hand(char)
        achieve has_water(cup)
        # Make sure the cup is in hand and ready to receive coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        make_coffee(coffee_maker)
        fill_coffee_maker_with_water(coffee_maker)
        make_cup_of_coffee(cup)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior make_coffee(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is plugged in and turned on

behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior make_cup_of_coffee(cup:item):
    body:
        achieve has_a_free_hand(char)
        achieve has_water(cup)
        # Make sure the cup is in hand and ready to receive coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        make_coffee(coffee_maker)
        fill_coffee_maker_with_water(coffee_maker)
        make_cup_of_coffee(cup)
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)switchon_executor(coffe_maker_147)walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(cup_2087, sink_133)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(cup_2087, sink_133)
Fail to find cup_2087 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(cup_2087, bookshelf_188)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(bookshelf_188)
Robot find: drawing_196, Robot is close to the bookshelf_188. 
##############################
From agent.py
open_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. bookshelf_188 is opened. 
##############################
From agent.py
exp(cup_2087, bookshelf_188)
Fail to find cup_2087 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(cup_2087, table_127)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Go to dining_room_1. Locate table_123. You will find cup_2087 on top of table_123.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1. Locate table_123. You will find cup_2087 on top of table_123.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for cup_2087 around cupboard_131.
Action 6: Walk to cupboard_130.
Action 7: look for cup_2087 around cupboard_130.
Action 8: Walk to sink_133.
Action 9: look for cup_2087 around sink_133.
Action 10: Walk to bookshelf_188.
Action 11: Open bookshelf_188.
Action 12: look for cup_2087 around bookshelf_188.
Action 13: Walk to kitchen_counter_128.
Action 14: look for cup_2087 around kitchen_counter_128.
Action 15: Walk to table_127.

##############################
From agent.py
exp(cup_2087, table_127)
Fail to find cup_2087 around table_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The coffee maker needs to be filled with water, and you must ensure that the faucet is switched on to fill it. Additionally, although the coffee maker has been switched on, the necessary steps to brew a cup of coffee have not been completed.
##############################
From agent.py
Human Instruction: The coffee maker needs to be filled with water, and you must ensure that the faucet is switched on to fill it. Additionally, although the coffee maker has been switched on, the necessary steps to brew a cup of coffee have not been completed.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for cup_2087 around cupboard_131.
Action 6: Walk to cupboard_130.
Action 7: look for cup_2087 around cupboard_130.
Action 8: Walk to sink_133.
Action 9: look for cup_2087 around sink_133.
Action 10: Walk to bookshelf_188.
Action 11: Open bookshelf_188.
Action 12: look for cup_2087 around bookshelf_188.
Action 13: Walk to kitchen_counter_128.
Action 14: look for cup_2087 around kitchen_counter_128.
Action 15: Walk to table_127.
Action 16: look for cup_2087 around table_127.
Action 17: Walk to table_123.
Action 18: look for cup_2087 around table_123.
Action 19: Walk to cup_2087.
Action 20: Grab cup_2087.
Action 21: Walk to faucet_134.
Action 22: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_coffee_filter_2035_around_wallshelf_190(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

behavior make_coffee(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)
        # Ensure the coffee maker is on to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134 for filling water
        
        fill_coffee_maker_with_water(coffee_maker, faucet)
        make_coffee(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_bookshelf_136(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(coffee_filter,bookshelf_instance)
        else:
            exp(coffee_filter,bookshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,bookshelf_instance]=True
        close[bookshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior make_coffee(coffee_maker:item, cup:item, faucet:item):
    body:
        achieve close_char(char, coffee_maker)
        achieve has_water(cup) # Ensure the cup is filled with water
        achieve_once on(cup, coffee_maker) # Place cup under coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        make_coffee(coffee_maker, cup, faucet)
        # Make a cup of coffee using the coffee maker with the cup and faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_bookshelf_136(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(coffee_filter,bookshelf_instance)
        else:
            exp(coffee_filter,bookshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,bookshelf_instance]=True
        close[bookshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
# Define a function that checks whether an item is a coffee maker, and has water inside it
def is_coffee_maker_ready(coffee_maker:item):
    symbol maker_ready = is_coffe_maker(coffee_maker) and has_water(coffee_maker)
    return maker_ready

# Define a function to make a cup of coffee using a coffee maker
behavior make_coffee(coffee_maker:item, cup:item, faucet:item):
    body:
        achieve_once close_char(char, coffee_maker)
        # Ensure the character is close to the coffee maker
        achieve_once close_char(char, cup)
        # Ensure the character is close to the cup
        if not is_coffee_maker_ready(coffee_maker):
            achieve_once has_water(coffee_maker)
            # Fill the coffee maker with water
        achieve_once inside(cup, coffee_maker)
        # Brew coffee into the cup

# Define a function for the main goal to make coffee
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup) and id[cup]==2087

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134

        make_coffee(coffee_maker, cup, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
# Define a function that checks whether an item is a coffee maker, and has water inside it
def is_coffee_maker_ready(coffee_maker:item):
    symbol maker_ready = is_coffe_maker(coffee_maker) and has_water(coffee_maker)
    return maker_ready

# Define a function to make a cup of coffee using a coffee maker
behavior make_coffee(coffee_maker:item, cup:item, faucet:item):
    body:
        achieve_once close_char(char, coffee_maker)
        # Ensure the character is close to the coffee maker
        achieve_once close_char(char, cup)
        # Ensure the character is close to the cup
        if not is_coffee_maker_ready(coffee_maker):
            achieve_once has_water(coffee_maker)
            # Fill the coffee maker with water
        achieve_once inside(cup, coffee_maker)
        # Brew coffee into the cup

# Define a function for the main goal to make coffee
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup) and id[cup]==2087

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134

        make_coffee(coffee_maker, cup, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)walk_executor(cup_2087)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the cup_2087. 
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is opened. 
##############################
From agent.py
putin_executor(cup_2087, coffe_maker_147)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. cup_2087 is inside coffe_maker_147. coffe_maker_147 is close cup_2087. cup_2087 is close coffe_maker_147. cup_2087 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the coffee maker with water to ensure it is ready for brewing coffee. Make sure the faucet is switched on to fill it with water before proceeding with brewing the coffee into the cup.
##############################
From agent.py
Human Instruction: You need to fill the coffee maker with water to ensure it is ready for brewing coffee. Make sure the faucet is switched on to fill it with water before proceeding with brewing the coffee into the cup.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for cup_2087 around cupboard_131.
Action 6: Walk to cupboard_130.
Action 7: look for cup_2087 around cupboard_130.
Action 8: Walk to sink_133.
Action 9: look for cup_2087 around sink_133.
Action 10: Walk to bookshelf_188.
Action 11: Open bookshelf_188.
Action 12: look for cup_2087 around bookshelf_188.
Action 13: Walk to kitchen_counter_128.
Action 14: look for cup_2087 around kitchen_counter_128.
Action 15: Walk to table_127.
Action 16: look for cup_2087 around table_127.
Action 17: Walk to table_123.
Action 18: look for cup_2087 around table_123.
Action 19: Walk to cup_2087.
Action 20: Grab cup_2087.
Action 21: Walk to faucet_134.
Action 22: Switch off faucet_134.
Action 23: Walk to coffe_maker_147.
Action 24: Walk to cup_2087.
Action 25: Walk to coffe_maker_147.
Action 26: Switch off coffe_maker_147.
Action 27: Open coffe_maker_147.
Action 28: Put cup_2087 into coffe_maker_147.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_bookshelf_136(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(coffee_filter,bookshelf_instance)
        else:
            exp(coffee_filter,bookshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,bookshelf_instance]=True
        close[bookshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_filled_with_water(coffee_maker:item):
    # Function to check if the coffee maker has water
    symbol filled_with_water= has_water(coffee_maker)
    return filled_with_water

behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once close_char(char, coffee_maker)
        # Ensure the character is close to the coffee maker
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior make_coffee_with_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee
        achieve inside(cup, coffee_maker)
        # Ensure the cup is inside the coffee maker to receive coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==147
        # Bind the coffee maker with ID 147

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Bind the faucet with ID 134

        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Bind the cup with ID 2087

        if not is_filled_with_water(coffee_maker):
            fill_coffee_maker_with_water(coffee_maker, faucet)
  
        make_coffee_with_coffee_maker(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_filled_with_water(coffee_maker:item):
    # Function to check if the coffee maker has water
    symbol filled_with_water= has_water(coffee_maker)
    return filled_with_water

behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once close_char(char, coffee_maker)
        # Ensure the character is close to the coffee maker
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior make_coffee_with_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee
        achieve inside(cup, coffee_maker)
        # Ensure the cup is inside the coffee maker to receive coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==147
        # Bind the coffee maker with ID 147

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Bind the faucet with ID 134

        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Bind the cup with ID 2087

        if not is_filled_with_water(coffee_maker):
            fill_coffee_maker_with_water(coffee_maker, faucet)
  
        make_coffee_with_coffee_maker(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)walk_executor(coffe_maker_147)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. Robot is close to the cup_2087. 
##############################
From agent.py
close_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the coffee maker with water. Ensure that the faucet is turned on to fill the coffee maker before proceeding with brewing the coffee into the cup.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2070_around_wallshelf_187(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_sugar,wallshelf_instance)
        else:
            exp(food_sugar,wallshelf_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,wallshelf_instance]=True
        close[wallshelf_instance,food_sugar]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior add_milk_and_sugar_to_coffee(milk:item, sugar:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Add milk to the coffee in the cup
        achieve_once inside(sugar, cup)
        # Add sugar to the coffee in the cup

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087 where the coffee is made

        add_milk_and_sugar_to_coffee(milk, sugar, cup)
        # Add milk and sugar to the coffee in the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior add_milk_and_sugar_to_coffee(milk:item, sugar:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Add milk to the coffee in the cup
        achieve_once inside(sugar, cup)
        # Add sugar to the coffee in the cup

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087 where the coffee is made

        add_milk_and_sugar_to_coffee(milk, sugar, cup)
        # Add milk and sugar to the coffee in the cup

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(wallshelf_187)exp(food_sugar_2070, wallshelf_187)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(cup_2087)putin_executor(food_sugar_2070, cup_2087)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(cup_2087)putin_executor(food_sugar_2070, cup_2087)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the coffe_maker_147. 
##############################
From agent.py
putin_executor(milk_2074, cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the coffe_maker_147. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2070)
Robot find: Robot is close to the fridge_140. Robot is close to the food_sugar_2070. 
##############################
From agent.py
grab_executor(food_sugar_2070)
Robot find: Robot is close to the fridge_140. Robot is close to the food_sugar_2070. Grabbing food_sugar_2070 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the food_sugar_2070. Robot is close to the coffe_maker_147. 
##############################
From agent.py
putin_executor(food_sugar_2070, cup_2087)
Robot find: Robot is close to the food_sugar_2070. Robot is close to the coffe_maker_147. food_sugar_2070 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(sink_133)', 'walk_executor(bookshelf_188)', 'open_executor(bookshelf_188)', 'walk_executor(kitchen_counter_128)', 'walk_executor(table_127)', 'walk_executor(table_123)', 'walk_executor(cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(coffe_maker_147)', 'walk_executor(cup_2087)', 'walk_executor(coffe_maker_147)', 'switchoff_executor(coffe_maker_147)', 'open_executor(coffe_maker_147)', 'putin_executor(cup_2087, coffe_maker_147)', 'walk_executor(faucet_134)', 'walk_executor(coffe_maker_147)', 'close_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(cup_2087)', 'putin_executor(milk_2074, cup_2087)', 'walk_executor(food_sugar_2070)', 'grab_executor(food_sugar_2070)', 'walk_executor(cup_2087)', 'putin_executor(food_sugar_2070, cup_2087)']
Time info:
Time consume: 206 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 76
goal generate times: 6
goal correct times: 0
action_num: 36

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
