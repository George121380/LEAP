From agent.py
Reset goals: The sub-goals are: 
['1. Locate the bathroom sink.', '2. Fill the sink with water and add soap to create soapy water.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior locate_bathroom_sink(sink:item):
    body:
        observe(sink, "Determine if it is the bathroom sink")

behavior __goal__():
    body:
        foreach sink: item:
            if is_sink(sink) and not visited(sink):
                locate_bathroom_sink(sink)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior locate_bathroom_sink(sink:item):
    body:
        observe(sink, "Determine if it is the bathroom sink")

behavior __goal__():
    body:
        foreach sink: item:
            if is_sink(sink) and not visited(sink):
                locate_bathroom_sink(sink)
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)obs(sink_42, Determine if it is the bathroom sink)walk_executor(sink_231)obs(sink_231, Determine if it is the bathroom sink)
##############################
From agent.py
walk_executor(sink_42)
Robot find: detergent_2084, cleaning_solution_2073, towel_rack_31, soap_2053, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
obs(sink_42, Determine if it is the bathroom sink)
Get this information:  cleaning_solution_2073 is on sink_42. detergent_2084 is on sink_42. sink_42 is inside bathroom_1. sink_42 is inside bathroom_counter_41. sink_42 is close to floor_2. sink_42 is close to floor_3. sink_42 is close to detergent_2084. sink_42 is close to soap_2053. sink_42 is close to floor_4. sink_42 is close to bathroom_cabinet_40. sink_42 is close to bathroom_counter_41. sink_42 is close to wall_9. sink_42 is close to faucet_43. sink_42 is close to wall_12. sink_42 is close to basket_for_clothes_2006. sink_42 is close to washing_machine_2007. sink_42 is close to cleaning_solution_2073. sink_42 is close to character_65. soap_2053 is on sink_42. sink_42 is DIRTY.
##############################
From agent.py
walk_executor(sink_231)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, soap_2054, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
obs(sink_231, Determine if it is the bathroom sink)
Get this information:  soap_2054 is on sink_231. sink_231 is inside dining_room_201. sink_231 is inside kitchen_counter_230. plate_1000 is on sink_231. sink_231 is close to soap_2054. sink_231 is close to floor_7. sink_231 is close to wall_11. sink_231 is close to wall_15. sink_231 is close to coffe_maker_290. sink_231 is close to toaster_292. sink_231 is close to toilet_37. sink_231 is close to shower_36. sink_231 is close to microwave_297. sink_231 is close to floor_202. sink_231 is close to floor_203. sink_231 is close to floor_204. sink_231 is close to wall_211. sink_231 is close to wall_212. sink_231 is close to cupboard_229. sink_231 is close to kitchen_counter_230. sink_231 is close to faucet_232. sink_231 is close to plate_1000. sink_231 is close to dishwasher_1001. sink_231 is close to character_65. sink_231 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2059_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_toilet_paper_2090_around_toilet_37(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==37
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_soapy_water(sink:item, soap:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water
        achieve_once inhand(soap)
        # Temporarily hold the soap
        achieve_once inside(soap, sink)
        # Add soap into the sink to create soapy water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select a sink inside the bathroom

        bind soap: item where:
            is_soap(soap)
        # Select soap

        fill_sink_with_soapy_water(sink, soap)
        # Create soapy water in the sink

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cup_2063(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2063
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(coffee_filter,cup_instance)
        else:
            exp(coffee_filter,cup_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cup_instance]=True
        close[cup_instance,coffee_filter]=True
    

behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water_and_soap(sink:item, soap:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water
        achieve_once inside(soap, sink)
        # Add soap to create soapy water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==231
        # Select sink with ID 231

        bind soap: item where:
            is_soap(soap)
        # Select soap

        fill_sink_with_water_and_soap(sink, soap)
        # Fill the sink with water and add the soap

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_sink_with_water_and_soap(sink:item, soap:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water
        achieve_once inside(soap, sink)
        # Add soap to create soapy water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==231
        # Select sink with ID 231

        bind soap: item where:
            is_soap(soap)
        # Select soap

        fill_sink_with_water_and_soap(sink, soap)
        # Fill the sink with water and add the soap

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_231)putin_executor(soap_2053, sink_231)
##############################
From agent.py
walk_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(soap_2053)
Robot find: Robot is close to the sink_42. Robot is close to the soap_2053. 
##############################
From agent.py
grab_executor(soap_2053)
Robot find: Robot is close to the sink_42. Robot is close to the soap_2053. Grabbing soap_2053 by right hand. 
##############################
From agent.py
walk_executor(sink_231)
Robot find: Robot is close to the soap_2053. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
putin_executor(soap_2053, sink_231)
Robot find: Robot is close to the soap_2053. Robot is close to the kitchen_counter_230. Robot is close to the sink_231. soap_2053 is close sink_231. sink_231 is close soap_2053. soap_2053 is inside sink_231. soap_2053 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a sink of soapy water in the bathroom.
Action History:
['walk_executor(sink_42)', 'walk_executor(sink_231)', 'walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(soap_2053)', 'grab_executor(soap_2053)', 'walk_executor(sink_231)', 'putin_executor(soap_2053, sink_231)']
Time info:
Time consume: 58 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 85
goal generate times: 3
goal correct times: 0
action_num: 9

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
