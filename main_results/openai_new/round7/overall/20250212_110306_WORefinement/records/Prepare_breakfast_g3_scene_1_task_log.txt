From agent.py
Reset goals: The sub-goals are: 
['Boil egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2040_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, water:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(water, pot)
        # Ensure water is inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind water: item where:
            is_water(water)
        # Select the water

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        boil_egg(egg, water, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2040_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_laser_pointer_2034_around_home_office_241(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laser_pointer,home_office_instance)
        else:
            exp(laser_pointer,home_office_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,home_office_instance]=True
        close[home_office_instance,laser_pointer]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(pot:item, egg:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot) # Fill the pot with water
        boil_egg(pot, egg, stove) # Boil the egg using the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(pot:item, egg:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot) # Fill the pot with water
        boil_egg(pot, egg, stove) # Boil the egg using the stove

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(pot_2138, stove_2135)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(pot_2138, stove_2135)
Find pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_78)putin_executor(food_egg_2092, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the pot_78. Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)putin_executor(food_egg_2092, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2092, pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. pot_78 is close food_egg_2092. food_egg_2092 is inside pot_78. food_egg_2092 is close pot_78. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to actually fill the pot with water to complete the task of boiling an egg. The actions taken do not include filling the pot with water, which is a necessary step before the stove can effectively boil the egg.
##############################
From agent.py
Human Instruction: The robot needs to actually fill the pot with water to complete the task of boiling an egg. The actions taken do not include filling the pot with water, which is a necessary step before the stove can effectively boil the egg.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: look for pot_2138 around stove_2135.
Action 4: Walk to pot_78.
Action 5: Grab pot_78.
Action 6: Walk to faucet_20.
Action 7: Switch on faucet_20.
Action 8: Switch off faucet_20.
Action 9: Walk to fridge_126.
Action 10: Switch off fridge_126.
Action 11: Open fridge_126.
Action 12: look for food_egg_2092 around fridge_126.
Action 13: Grab food_egg_2092.
Action 14: Put food_egg_2092 into pot_78.
Action 15: Walk to stove_2135.
Action 16: Put pot_78 on stove_2135.
Action 17: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior heat_pot_with_egg_stove(pot:item, egg:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select a pot with ID 78

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select a stove with ID 2135

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Select an egg with ID 2092

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        heat_pot_with_egg_stove(pot, egg, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior heat_pot_with_egg_stove(pot:item, egg:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select a pot with ID 78

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select a stove with ID 2135

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Select an egg with ID 2092

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        heat_pot_with_egg_stove(pot, egg, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is filled with water before placing it on the stove and attempting to boil the egg.
##############################
From agent.py
Human Instruction: You need to ensure that the pot is filled with water before placing it on the stove and attempting to boil the egg.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: look for pot_2138 around stove_2135.
Action 4: Walk to pot_78.
Action 5: Grab pot_78.
Action 6: Walk to faucet_20.
Action 7: Switch on faucet_20.
Action 8: Switch off faucet_20.
Action 9: Walk to fridge_126.
Action 10: Switch off fridge_126.
Action 11: Open fridge_126.
Action 12: look for food_egg_2092 around fridge_126.
Action 13: Grab food_egg_2092.
Action 14: Put food_egg_2092 into pot_78.
Action 15: Walk to stove_2135.
Action 16: Put pot_78 on stove_2135.
Action 17: Switch on stove_2135.
Action 18: Walk to faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Place the egg inside the pot and put the pot on the stove to boil

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Select the egg with ID 2092

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        fill_pot_with_water(pot)
        boil_egg(egg, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior add_egg_to_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

behavior heat_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Place the pot on the stove and turn on the stove to boil the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot) # Fill the pot with water
        add_egg_to_pot(egg, pot) # Put the egg into the pot
        heat_pot(pot, stove) # Boil the water and cook the egg using the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) # Ensure the character is close to the faucet
        achieve has_water(pot) # Fill the pot with water

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, pot) # Place the egg in the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        fill_pot_with_water(pot, faucet) # Fill the pot with water
        boil_egg(pot, stove, egg) # Boil the egg using the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_sink_19(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_shampoo_2019_around_bathroom_cabinet_17(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(shampoo,bathroom_cabinet_instance)
        else:
            exp(shampoo,bathroom_cabinet_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,shampoo]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil water
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water
        
        fill_pot_with_water(pot, faucet) # Fill the pot with water
        boil_egg(pot, stove, egg) # Boil the egg using the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2120_around_basket_for_clothes_2078(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_oil_2013_around_pot_2138(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(oil,pot_instance)
        else:
            exp(oil,pot_instance)
    eff:
        unknown[oil]=False
        close[oil,pot_instance]=True
        close[pot_instance,oil]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior start_boiling_egg(pot:item, stove:item):
    body:
        achieve_once inside(food_egg, pot)
        # Place the egg into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select pot with ID 78

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135

        bind food_egg: item where:
            is_food_egg(food_egg) and id[food_egg] == 2092
        # Select the egg with ID 2092
        
        fill_pot_with_water(pot)
        # Ensure the pot is filled with water
        
        start_boiling_egg(pot, stove)
        # Start boiling the egg

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior boil_egg(pot:item, egg:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind egg: item where:
            is_food_egg(egg)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot)
        boil_egg(pot, egg, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil egg." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_brush_2002_around_dresser_274(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(brush,dresser_instance)
        else:
            exp(brush,dresser_instance)
    eff:
        unknown[brush]=False
        close[brush,dresser_instance]=True
        close[dresser_instance,brush]=True
    

behavior find_clothes_scarf_2120_around_dresser_274(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_scarf,dresser_instance)
        else:
            exp(clothes_scarf,dresser_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,dresser_instance]=True
        close[dresser_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, pot)
        # Put the egg into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item

        fill_pot_with_water(pot, faucet)
        boil_egg(pot, stove, egg)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot) 
        # Fill the pot with water

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, pot) 
        # Place the egg inside the pot
        achieve on(pot, stove) 
        # Place the pot on the stove
        achieve is_on(stove) 
        # Ensure the stove is on to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        fill_pot_with_water(pot, faucet)
        boil_egg(pot, stove, egg)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_toaster_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_bread,toaster_instance)
        else:
            exp(food_bread,toaster_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,toaster_instance]=True
        close[toaster_instance,food_bread]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once close_char(char, pot)
        achieve has_water(pot)
        # Fill the pot with water

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot with water

behavior boil_egg_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Boil the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Select the faucet with ID 20

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135

        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092
        # Select the egg with ID 2092

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        place_egg_in_pot(egg, pot)
        # Place the egg into the pot with water

        boil_egg_on_stove(pot, stove)
        # Boil the pot with the egg on the stove
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once close_char(char, pot)
        achieve has_water(pot)
        # Fill the pot with water

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot with water

behavior boil_egg_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Boil the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Select the faucet with ID 20

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135

        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092
        # Select the egg with ID 2092

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        place_egg_in_pot(egg, pot)
        # Place the egg into the pot with water

        boil_egg_on_stove(pot, stove)
        # Boil the pot with the egg on the stove
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Fill the pot with water before putting the pot on the stove and placing the egg inside it.
##############################
Task Summary:
Task Goal:
Boil egg.
Action History:
['walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_egg_2092)', 'putin_executor(food_egg_2092, pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(faucet_20)', 'walk_executor(pot_78)']
Time info:
Time consume: 194 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 40
goal generate times: 12
goal correct times: 0
action_num: 17

Task complete rate:
1
Scene_id: 1
##############################
