From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash a lemon.', '2. Slice the lemon and place it in a cup.', '3. Add water and sugar to the cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_lemon_2028_around_cutting_board_2051(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_lemon,cutting_board_instance)
        else:
            exp(food_lemon,cutting_board_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,cutting_board_instance]=True
        close[cutting_board_instance,food_lemon]=True
    

behavior find_cleaning_solution_2073_around_curtain_179(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==179
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(cleaning_solution,curtain_instance)
        else:
            exp(cleaning_solution,curtain_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,curtain_instance]=True
        close[curtain_instance,cleaning_solution]=True
    

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation

def is_food_lemon(x: item):
    return is_food(x) and is_food_lemon(x)

behavior find_and_clean_lemon(lemon:item):
    body:
        achieve_once close_char(char, lemon)
        observe(lemon, "Determine if the lemon is clean")
        if dirty(lemon):
            wash(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)

        find_and_clean_lemon(lemon)

#goal_representation_end

##############################
From agent.py->reset_goal

def is_food_lemon(x: item):
    return is_food(x) and is_food_lemon(x)

behavior find_and_clean_lemon(lemon:item):
    body:
        achieve_once close_char(char, lemon)
        observe(lemon, "Determine if the lemon is clean")
        if dirty(lemon):
            wash(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)

        find_and_clean_lemon(lemon)

##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2051)exp(food_lemon_2028, cutting_board_2051)walk_executor(food_lemon_2028)obs(food_lemon_2028, Determine if the lemon is clean)
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_lemon_2028, cutting_board_2051)
Fail to find food_lemon_2028 around cutting_board_2051. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)exp(food_lemon_2028, pot_2069)walk_executor(food_lemon_2028)obs(food_lemon_2028, Determine if the lemon is clean)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
exp(food_lemon_2028, pot_2069)
Fail to find food_lemon_2028 around pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_lemon_2028, fridge_289)walk_executor(food_lemon_2028)obs(food_lemon_2028, Determine if the lemon is clean)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_lemon_2028, fridge_289)
Find food_lemon_2028. 
##############################
From agent.py-> find a plan in act()
obs(food_lemon_2028, Determine if the lemon is clean)
##############################
From agent.py
obs(food_lemon_2028, Determine if the lemon is clean)
Get this information:  food_lemon_2028 is close to fridge_289. food_lemon_2028 is close to character_65. food_lemon_2028 is inside fridge_289. food_lemon_2028 is inside dining_room_201. food_lemon_2028 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior slice_lemon_and_place_in_cup(lemon:item, cup:item, knife:item, cutting_board:item):
    body:
        achieve_once on(lemon, cutting_board)
        # Place the lemon on the cutting board
        achieve_once cut(lemon)
        # Slice the lemon using the knife
        achieve_once inside(lemon, cup)
        # Place the lemon slices into the cup

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        slice_lemon_and_place_in_cup(lemon, cup, knife, cutting_board)
        # Slice the lemon and add it to the cup
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior slice_lemon_and_place_in_cup(lemon:item, cup:item, knife:item, cutting_board:item):
    body:
        achieve_once on(lemon, cutting_board)
        # Place the lemon on the cutting board
        achieve_once cut(lemon)
        # Slice the lemon using the knife
        achieve_once inside(lemon, cup)
        # Place the lemon slices into the cup

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        slice_lemon_and_place_in_cup(lemon, cup, knife, cutting_board)
        # Slice the lemon and add it to the cup
##############################
From agent.py-> find a plan in act()
grab_executor(food_lemon_2028)walk_executor(cutting_board_2051)put_executor(food_lemon_2028, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_lemon_2028)cut_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(cup_2063)putin_executor(food_lemon_2028, cup_2063)
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_lemon_2028 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_lemon_2028, cutting_board_2051)
Robot find: Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_lemon_2028. food_lemon_2028 is close cutting_board_2051. food_lemon_2028 is on cutting_board_2051. food_lemon_2028 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
cut_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by left hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_lemon_2028, cup_2063)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. cup_2063 is close food_lemon_2028. food_lemon_2028 is close cup_2063. food_lemon_2028 is inside cup_2063. food_lemon_2028 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_closetdrawer_158(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pencil,closetdrawer_instance)
        else:
            exp(pencil,closetdrawer_instance)
    eff:
        unknown[pencil]=False
        close[pencil,closetdrawer_instance]=True
        close[closetdrawer_instance,pencil]=True
    

behavior find_headset_2062_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_and_sugar(cup:item, water_source:item, sugar:item):
    body:
        achieve_once close_char(char, water_source)
        # Ensure the character is close to the water source
        achieve_once has_water(cup)
        # Fill the cup with water
        achieve_once inside(sugar, cup)
        # Add sugar to the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063
        
        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source, assuming its a faucet

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        add_water_and_sugar(cup, water_source, sugar)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_and_sugar(cup:item, water_source:item, sugar:item):
    body:
        achieve_once close_char(char, water_source)
        # Ensure the character is close to the water source
        achieve_once has_water(cup)
        # Fill the cup with water
        achieve_once inside(sugar, cup)
        # Add sugar to the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063
        
        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source, assuming its a faucet

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        add_water_and_sugar(cup, water_source, sugar)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the knife_2050. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the fridge_289. Robot is close to the food_sugar_2039. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2076_around_trashcan_99(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(headset,trashcan_instance)
        else:
            exp(headset,trashcan_instance)
    eff:
        unknown[headset]=False
        close[headset,trashcan_instance]=True
        close[trashcan_instance,headset]=True
    

behavior find_mat_401_around_trashcan_99(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(mat,trashcan_instance)
        else:
            exp(mat,trashcan_instance)
    eff:
        unknown[mat]=False
        close[mat,trashcan_instance]=True
        close[trashcan_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_and_sugar_to_cup(water_source:item, sugar:item, cup:item):
    body:
        achieve_once close_char(char, water_source)
        # Ensure the character is close to the water source
        achieve_once has_water(cup)
        # Fill the cup with water
        achieve_once inside(sugar, cup)
        # Add sugar into the cup

behavior __goal__():
    body:
        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source, assuming it is a faucet
        
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select a sugar item

        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the cup with ID 2063

        add_water_and_sugar_to_cup(water_source, sugar, cup)
        # Add water and sugar to the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_and_sugar_to_cup(water_source:item, sugar:item, cup:item):
    body:
        achieve_once close_char(char, water_source)
        # Ensure the character is close to the water source
        achieve_once has_water(cup)
        # Fill the cup with water
        achieve_once inside(sugar, cup)
        # Add sugar into the cup

behavior __goal__():
    body:
        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source, assuming it is a faucet
        
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select a sugar item

        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the cup with ID 2063

        add_water_and_sugar_to_cup(water_source, sugar, cup)
        # Add water and sugar to the cup

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the knife_2050. Robot is close to the cup_2063. Robot is close to the kitchen_counter_230. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. Robot is close to the food_sugar_2039. 
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot find: Robot is close to the cup_2063. Robot is close to the fridge_289. Robot is close to the food_sugar_2039. Grabbing food_sugar_2039 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the food_sugar_2039. 
##############################
From agent.py
putin_executor(food_sugar_2039, cup_2063)
Robot find: Robot is close to the cup_2063. Robot is close to the food_sugar_2039. cup_2063 is close food_sugar_2039. food_sugar_2039 is close cup_2063. food_sugar_2039 is inside cup_2063. food_sugar_2039 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a cup of lemon water with additional sugar.
Action History:
['walk_executor(cutting_board_2051)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_lemon_2028)', 'walk_executor(cutting_board_2051)', 'put_executor(food_lemon_2028, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_lemon_2028)', 'cut_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(cup_2063)', 'putin_executor(food_lemon_2028, cup_2063)', 'walk_executor(faucet_43)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(food_sugar_2039)', 'grab_executor(food_sugar_2039) (Failed)', 'walk_executor(faucet_43)', 'walk_executor(kitchen_counter_230)', 'put_executor(knife_2050, kitchen_counter_230)', 'walk_executor(food_sugar_2039)', 'grab_executor(food_sugar_2039)', 'walk_executor(cup_2063)', 'putin_executor(food_sugar_2039, cup_2063)']
Time info:
Time consume: 126 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 79
goal generate times: 4
goal correct times: 0
action_num: 31

Task complete rate:
1
Scene_id: 0
##############################
