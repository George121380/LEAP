From agent.py
Reset goals: The sub-goals are: 
['1. Gather rice and eggs.', '2. Cook the rice.', '3. Fry the eggs and then mix them with the cooked rice.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_cupboard_131(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_egg,cupboard_instance)
        else:
            exp(food_egg,cupboard_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,cupboard_instance]=True
        close[cupboard_instance,food_egg]=True
    

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_rice_egg(rice:item, egg:item):
    body:
        achieve_once close_char(char, rice)
        # Move character close to the rice
        achieve_once close_char(char, egg)
        # Move character close to the egg

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice item

        bind egg: item where:
            is_food_egg(egg)
        # Select egg item

        gather_rice_egg(rice, egg)
        # Gather rice and egg

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior gather_rice_egg(rice:item, egg:item):
    body:
        achieve_once close_char(char, rice)
        # Move character close to the rice
        achieve_once close_char(char, egg)
        # Move character close to the egg

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice item

        bind egg: item where:
            is_food_egg(egg)
        # Select egg item

        gather_rice_egg(rice, egg)
        # Gather rice and egg

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_rice_2067, cupboard_131)walk_executor(food_rice_2067)walk_executor(cupboard_131)exp(food_egg_2053, cupboard_131)walk_executor(food_egg_2053)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_rice_2067, cupboard_131)
Fail to find food_rice_2067 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_rice_2067, cupboard_130)walk_executor(food_rice_2067)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_rice_2067, cupboard_130)
Fail to find food_rice_2067 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_187)exp(food_rice_2067, wallshelf_187)walk_executor(food_rice_2067)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)
##############################
From agent.py
walk_executor(wallshelf_187)
Robot find: Robot is close to the wallshelf_187. 
##############################
From agent.py
exp(food_rice_2067, wallshelf_187)
Fail to find food_rice_2067 around wallshelf_187. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_rice_2067, kitchen_counter_132)walk_executor(food_rice_2067)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_rice_2067, kitchen_counter_132)
Fail to find food_rice_2067 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_rice_2067, fridge_140)walk_executor(food_rice_2067)walk_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_rice_2067, fridge_140)
Find food_rice_2067. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the rice and eggs in the kitchen.', '2. Cook the rice and scramble the eggs separately.', '3. Combine the cooked rice and scrambled eggs in a pan to fry them together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dough_2021_around_oven_141(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(dough,oven_instance)
        else:
            exp(dough,oven_instance)
    eff:
        unknown[dough]=False
        close[dough,oven_instance]=True
        close[oven_instance,dough]=True
    

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def find_food_rice():
    # Function to check if rice is in a specific location
    symbol found_rice = exists o: item : (is_food_rice(o))
    return found_rice

def find_food_egg():
    # Function to check if an egg is in a specific location
    symbol found_egg = exists o: item : (is_food_egg(o))
    return found_egg

behavior __goal__():
    body:
        if not find_food_rice() or not find_food_egg():
            foreach location: item:
                if is_cupboard(location) or is_fridge(location) or is_wallshelf(location) or is_kitchen_counter(location):
                    if not visited(location):
                        # Check known locations for rice and egg
                        observe(location, "Check for rice and eggs")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dough_2021_around_toaster_144(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(dough,toaster_instance)
        else:
            exp(dough,toaster_instance)
    eff:
        unknown[dough]=False
        close[dough,toaster_instance]=True
        close[toaster_instance,dough]=True
    

behavior find_chair_138_around_chair_138(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==138
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_bowl_2095_around_sink_133(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def locate_food_item(food:item):
    body:
        observe(food, "Determine the current location of the food item")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select a rice item

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item

        locate_food_item(rice)
        locate_food_item(egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_stove_2090(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_bowl_2095_around_sink_133(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_food_item(food:item):
    body:
        observe(food, "Determine the current location of the food item")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice item
        
        bind egg: item where:
            is_food_egg(egg)
        # Select egg item
        
        locate_food_item(rice)
        locate_food_item(egg)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior locate_food_item(food:item):
    body:
        observe(food, "Determine the current location of the food item")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice item
        
        bind egg: item where:
            is_food_egg(egg)
        # Select egg item
        
        locate_food_item(rice)
        locate_food_item(egg)

##############################
From agent.py-> find a plan in act()
obs(food_rice_2067, Determine the current location of the food item)obs(food_egg_2053, Determine the current location of the food item)
##############################
From agent.py
obs(food_rice_2067, Determine the current location of the food item)
Get this information:  food_rice_2067 is inside dining_room_1. food_rice_2067 is inside fridge_140. food_rice_2067 is close to fridge_140. food_rice_2067 is close to character_219. food_rice_2067 is CLEAN.
##############################
From agent.py
obs(food_egg_2053, Determine the current location of the food item)
Get this information:  food_egg_2053 is close to fridge_140. food_egg_2053 is close to character_219. food_egg_2053 is inside dining_room_1. food_egg_2053 is inside fridge_140. food_egg_2053 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice_and_scramble_eggs(rice:item, egg:item, pot:item, stove:item, fryingpan:item):
    body:
        # Cook the rice
        achieve_once has_water(pot)
        # Fill the pot with water
        achieve_once inside(rice, pot)
        # Place the rice inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the rice

        # Scramble the eggs
        achieve_once on(egg, fryingpan)
        # Crack and place the egg in the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve_once is_on(stove)
        # Turn on the stove to scramble the eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        cook_rice_and_scramble_eggs(rice, egg, pot, stove, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_rice_and_scramble_eggs(rice:item, egg:item, pot:item, stove:item, fryingpan:item):
    body:
        # Cook the rice
        achieve_once has_water(pot)
        # Fill the pot with water
        achieve_once inside(rice, pot)
        # Place the rice inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the rice

        # Scramble the eggs
        achieve_once on(egg, fryingpan)
        # Crack and place the egg in the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve_once is_on(stove)
        # Turn on the stove to scramble the eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        cook_rice_and_scramble_eggs(rice, egg, pot, stove, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)put_executor(food_egg_2053, fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)put_executor(food_egg_2053, fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. Robot is close to the fridge_140. Grabbing food_rice_2067 by left hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. 
##############################
From agent.py
putin_executor(food_rice_2067, pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. food_rice_2067 is inside pot_2093. food_rice_2067 is close pot_2093. pot_2093 is close food_rice_2067. food_rice_2067 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the fridge_140. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
put_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. food_egg_2053 is close fryingpan_2107. fryingpan_2107 is close food_egg_2053. food_egg_2053 is on fryingpan_2107. food_egg_2053 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot find: Robot is close to the food_egg_2053. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Grabbing fryingpan_2107 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(fryingpan_2107, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. fryingpan_2107 is on stove_2090. stove_2090 is close fryingpan_2107. fryingpan_2107 is close stove_2090. fryingpan_2107 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The current sub-task is not complete because the pot has not been filled with water. You need to fill the pot (pot_2093) with water.
##############################
From agent.py
Human Instruction: The current sub-task is not complete because the pot has not been filled with water. You need to fill the pot (pot_2093) with water.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_rice_2067 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_rice_2067 around cupboard_130.
Action 6: Walk to wallshelf_187.
Action 7: look for food_rice_2067 around wallshelf_187.
Action 8: Walk to kitchen_counter_132.
Action 9: look for food_rice_2067 around kitchen_counter_132.
Action 10: Walk to fridge_140.
Action 11: Switch off fridge_140.
Action 12: Open fridge_140.
Action 13: look for food_rice_2067 around fridge_140.
Action 14: Observe around food_rice_2067 with the question of Determine the current location of the food item.
Action 15: Observe around food_egg_2053 with the question of Determine the current location of the food item.
Action 16: Walk to stove_2090.
Action 17: Open stove_2090.
Action 18: look for pot_2093 around stove_2090.
Action 19: Walk to pot_2093.
Action 20: Open pot_2093.
Action 21: Grab pot_2093.
Action 22: Walk to faucet_134.
Action 23: Switch off faucet_134.
Action 24: Walk to food_rice_2067.
Action 25: Grab food_rice_2067.
Action 26: Walk to pot_2093.
Action 27: Put food_rice_2067 into pot_2093.
Action 28: Walk to stove_2090.
Action 29: Put pot_2093 on stove_2090.
Action 30: Switch on stove_2090.
Action 31: Walk to food_egg_2053.
Action 32: Grab food_egg_2053.
Action 33: Walk to fryingpan_2107.
Action 34: Put food_egg_2053 on fryingpan_2107.
Action 35: Grab fryingpan_2107.
Action 36: Walk to stove_2090.
Action 37: Put fryingpan_2107 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dough_2021_around_oven_141(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(dough,oven_instance)
        else:
            exp(dough,oven_instance)
    eff:
        unknown[dough]=False
        close[dough,oven_instance]=True
        close[oven_instance,dough]=True
    

behavior find_food_bread_2016_around_microwave_149(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_bread,microwave_instance)
        else:
            exp(food_bread,microwave_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,microwave_instance]=True
        close[microwave_instance,food_bread]=True
    

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior cook_rice_and_scramble_eggs(fryingpan:item, stove:item, food_rice:item, food_egg:item, pot:item):
    body:
        achieve_once inside(food_rice, pot)
        # Add rice into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Cook the rice by turning on the stove
        
        achieve_once inside(food_egg, fryingpan)
        # Add egg into the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Scramble the eggs by turning on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        # Select the pot with ID 2093
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2107
        # Select the frying pan with ID 2107
        
        bind food_rice: item where:
            is_food_rice(food_rice)
        # Select the rice
        
        bind food_egg: item where:
            is_food_egg(food_egg)
        # Select the egg
        
        fill_pot_with_water(pot, faucet)
        # Fill the pot with water
        cook_rice_and_scramble_eggs(fryingpan, stove, food_rice, food_egg, pot)
        # Cook the rice and scramble the eggs separately on the stove
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior cook_rice_and_scramble_eggs(fryingpan:item, stove:item, food_rice:item, food_egg:item, pot:item):
    body:
        achieve_once inside(food_rice, pot)
        # Add rice into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Cook the rice by turning on the stove
        
        achieve_once inside(food_egg, fryingpan)
        # Add egg into the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Scramble the eggs by turning on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        # Select the pot with ID 2093
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2107
        # Select the frying pan with ID 2107
        
        bind food_rice: item where:
            is_food_rice(food_rice)
        # Select the rice
        
        bind food_egg: item where:
            is_food_egg(food_egg)
        # Select the egg
        
        fill_pot_with_water(pot, faucet)
        # Fill the pot with water
        cook_rice_and_scramble_eggs(fryingpan, stove, food_rice, food_egg, pot)
        # Cook the rice and scramble the eggs separately on the stove
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the stove_2090. Robot is close to the food_rice_2067. Robot is close to the pot_2093. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the stove_2090. Robot is close to the food_rice_2067. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_egg_2053. Robot is close to the stove_2090. 
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot find: Robot is close to the fryingpan_2107. Robot is close to the food_egg_2053. Robot is close to the stove_2090. food_egg_2053 is close fryingpan_2107. food_egg_2053 is inside fryingpan_2107. fryingpan_2107 is close food_egg_2053. food_egg_2053 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot (pot_2093) with water before cooking the rice.
##############################
From agent.py
Human Instruction: You need to fill the pot (pot_2093) with water before cooking the rice.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_rice_2067 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_rice_2067 around cupboard_130.
Action 6: Walk to wallshelf_187.
Action 7: look for food_rice_2067 around wallshelf_187.
Action 8: Walk to kitchen_counter_132.
Action 9: look for food_rice_2067 around kitchen_counter_132.
Action 10: Walk to fridge_140.
Action 11: Switch off fridge_140.
Action 12: Open fridge_140.
Action 13: look for food_rice_2067 around fridge_140.
Action 14: Observe around food_rice_2067 with the question of Determine the current location of the food item.
Action 15: Observe around food_egg_2053 with the question of Determine the current location of the food item.
Action 16: Walk to stove_2090.
Action 17: Open stove_2090.
Action 18: look for pot_2093 around stove_2090.
Action 19: Walk to pot_2093.
Action 20: Open pot_2093.
Action 21: Grab pot_2093.
Action 22: Walk to faucet_134.
Action 23: Switch off faucet_134.
Action 24: Walk to food_rice_2067.
Action 25: Grab food_rice_2067.
Action 26: Walk to pot_2093.
Action 27: Put food_rice_2067 into pot_2093.
Action 28: Walk to stove_2090.
Action 29: Put pot_2093 on stove_2090.
Action 30: Switch on stove_2090.
Action 31: Walk to food_egg_2053.
Action 32: Grab food_egg_2053.
Action 33: Walk to fryingpan_2107.
Action 34: Put food_egg_2053 on fryingpan_2107.
Action 35: Grab fryingpan_2107.
Action 36: Walk to stove_2090.
Action 37: Put fryingpan_2107 on stove_2090.
Action 38: Walk to pot_2093.
Action 39: Grab pot_2093.
Action 40: Walk to faucet_308.
Action 41: Switch off faucet_308.
Action 42: Walk to stove_2090.
Action 43: Put pot_2093 on stove_2090.
Action 44: Walk to food_egg_2053.
Action 45: Grab food_egg_2053.
Action 46: Walk to fryingpan_2107.
Action 47: Put food_egg_2053 into fryingpan_2107.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_oil_2005_around_dishwasher_143(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(oil,dishwasher_instance)
        else:
            exp(oil,dishwasher_instance)
    eff:
        unknown[oil]=False
        close[oil,dishwasher_instance]=True
        close[dishwasher_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior cook_rice_in_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the rice

behavior scramble_eggs_in_pan(eggs:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(eggs, fryingpan)
        # Place the eggs in the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to scramble the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the faucet with ID 134

        bind eggs: item where:
            is_food_egg(eggs) and id[eggs] == 2053
        # Select the eggs with ID 2053

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select the frying pan with ID 2107

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        cook_rice_in_pot(pot, stove)
        # Cook the rice in the pot on the stove

        scramble_eggs_in_pan(eggs, fryingpan, stove)
        # Scramble the eggs in the pan on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior cook_rice(pot:item, stove:item, rice:item, faucet:item):
    body:
        achieve_once inside(rice, pot)
        # Place the rice inside the pot
        achieve close_char(char, faucet)
        # Ensure character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the rice

behavior scramble_eggs(eggs:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(eggs, fryingpan)
        # Place the eggs in the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to scramble the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        cook_rice(pot, stove, rice, faucet)
        # Cook the rice in the pot on the stove

        scramble_eggs(eggs, fryingpan, stove)
        # Scramble the eggs in the frying pan on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_phone_47_around_microwave_149(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(phone,microwave_instance)
        else:
            exp(phone,microwave_instance)
    eff:
        unknown[phone]=False
        close[phone,microwave_instance]=True
        close[microwave_instance,phone]=True
    

behavior find_headset_2086_around_computer_2110(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior cook_rice(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Cook the rice by placing the pot on the stove and turning it on

behavior scramble_eggs(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)
        achieve_once inside(egg, fryingpan)
        achieve is_on(stove)
        # Scramble the eggs in the fryingpan on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2053
        # Select the egg with ID 2053

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select the fryingpan with ID 2107

        fill_pot_with_water(pot)
        cook_rice(pot, stove)
        scramble_eggs(egg, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior cook_rice(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Cook the rice by placing the pot on the stove and turning it on

behavior scramble_eggs(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)
        achieve_once inside(egg, fryingpan)
        achieve is_on(stove)
        # Scramble the eggs in the fryingpan on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2053
        # Select the egg with ID 2053

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select the fryingpan with ID 2107

        fill_pot_with_water(pot)
        cook_rice(pot, stove)
        scramble_eggs(egg, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the stove_2090. Robot is close to the food_rice_2067. Robot is close to the pot_2093. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the stove_2090. Robot is close to the food_rice_2067. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot is not filled with water before cooking the rice. You need to ensure that pot_2093 is filled with water first before proceeding to cook the rice on stove_2090.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_138_around_chair_138(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==138
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_clothes_skirt_2116_around_dresser_377(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
behavior combine_rice_and_eggs(cooked_rice:item, scrambled_eggs:item, pan:item):
    body:
        achieve_once inside(cooked_rice, pan)
        # Add the cooked rice into the pan
        achieve_once inside(scrambled_eggs, pan)
        # Add the scrambled eggs into the pan

behavior fry_combined_rice_and_eggs(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)
        # Place the pan on the stove for frying
        achieve is_on(stove)
        # Ensure the stove is turned on to fry the rice and eggs together

behavior __goal__():
    body:
        bind cooked_rice: item where:
            is_food_rice(cooked_rice) and id[cooked_rice] == 2067
        # Select the cooked rice with a specific ID

        bind scrambled_eggs: item where:
            is_food_egg(scrambled_eggs) and id[scrambled_eggs] == 2053
        # Select the scrambled eggs with a specific ID

        bind pan: item where:
            is_fryingpan(pan) and id[pan] == 2107
        # Select the frying pan with a specific ID

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with a specific ID

        combine_rice_and_eggs(cooked_rice, scrambled_eggs, pan)
        fry_combined_rice_and_eggs(pan, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior combine_rice_and_eggs(cooked_rice:item, scrambled_eggs:item, pan:item):
    body:
        achieve_once inside(cooked_rice, pan)
        # Add the cooked rice into the pan
        achieve_once inside(scrambled_eggs, pan)
        # Add the scrambled eggs into the pan

behavior fry_combined_rice_and_eggs(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)
        # Place the pan on the stove for frying
        achieve is_on(stove)
        # Ensure the stove is turned on to fry the rice and eggs together

behavior __goal__():
    body:
        bind cooked_rice: item where:
            is_food_rice(cooked_rice) and id[cooked_rice] == 2067
        # Select the cooked rice with a specific ID

        bind scrambled_eggs: item where:
            is_food_egg(scrambled_eggs) and id[scrambled_eggs] == 2053
        # Select the scrambled eggs with a specific ID

        bind pan: item where:
            is_fryingpan(pan) and id[pan] == 2107
        # Select the frying pan with a specific ID

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with a specific ID

        combine_rice_and_eggs(cooked_rice, scrambled_eggs, pan)
        fry_combined_rice_and_eggs(pan, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(fryingpan_2107)putin_executor(food_rice_2067, fryingpan_2107)
##############################
From agent.py
walk_executor(food_rice_2067)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot find: Robot is close to the pot_2093. Robot is close to the food_rice_2067. Grabbing food_rice_2067 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the food_rice_2067. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_rice_2067, fryingpan_2107)
Robot find: Robot is close to the food_rice_2067. Robot is close to the stove_2090. Robot is close to the fryingpan_2107. food_rice_2067 is inside fryingpan_2107. food_rice_2067 is close fryingpan_2107. fryingpan_2107 is close food_rice_2067. food_rice_2067 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(wallshelf_187)', 'walk_executor(kitchen_counter_132)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(food_rice_2067)', 'grab_executor(food_rice_2067)', 'walk_executor(pot_2093)', 'putin_executor(food_rice_2067, pot_2093)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'put_executor(food_egg_2053, fryingpan_2107)', 'grab_executor(fryingpan_2107)', 'walk_executor(stove_2090)', 'put_executor(fryingpan_2107, stove_2090)', 'walk_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_egg_2053, fryingpan_2107)', 'walk_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'walk_executor(food_rice_2067)', 'grab_executor(food_rice_2067)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_rice_2067, fryingpan_2107)']
Time info:
Time consume: 323 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 53
goal generate times: 10
goal correct times: 0
action_num: 50

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
