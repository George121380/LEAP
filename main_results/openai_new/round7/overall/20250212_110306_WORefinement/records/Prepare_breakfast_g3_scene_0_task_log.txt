From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_146(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg_in_pot(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        # Fill the pot with water
        boil_egg_in_pot(egg, pot, stove)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg_in_pot(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        # Fill the pot with water
        boil_egg_in_pot(egg, pot, stove)
        # Boil the egg in the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)putin_executor(food_egg_2020, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2020, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. pot_2069 is close food_egg_2020. food_egg_2020 is inside pot_2069. food_egg_2020 is close pot_2069. food_egg_2020 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water. Ensure that the pot contains water before boiling the egg on the stove.
##############################
From agent.py
Human Instruction: The pot needs to be filled with water. Ensure that the pot contains water before boiling the egg on the stove.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to fridge_289.
Action 10: Switch off fridge_289.
Action 11: Open fridge_289.
Action 12: look for food_egg_2020 around fridge_289.
Action 13: Grab food_egg_2020.
Action 14: Put food_egg_2020 into pot_2069.
Action 15: Walk to stove_2065.
Action 16: Put pot_2069 on stove_2065.
Action 17: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_hanger_113_around_closetdrawer_146(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        boil_egg(pot, stove, egg)
        # Perform the action of boiling the egg

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot with the egg on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that is filled with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        boil_egg(pot, stove, egg)
        # Boil the egg in the pot on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior boil_the_egg(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_the_egg(egg, pot, stove)
        # Boil the egg by placing it in the pot with water on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_22_around_cup_2064(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2064
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(mat,cup_instance)
        else:
            exp(mat,cup_instance)
    eff:
        unknown[mat]=False
        close[mat,cup_instance]=True
        close[cup_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve has_water(pot)
        # Fill the pot with water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is on to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(egg, pot, stove)
        # Boil the egg using the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(pot:item, stove:item):
    body:
        achieve_once inside(food_egg_2020, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot 

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        boil_egg(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        fill_pot_with_water(pot)
        # Fill the pot with water
        boil_egg(pot, stove, egg)
        # Boil the egg using the pot on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil the egg." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(pot:item, egg:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Place the pot on the stove and turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that contains water

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(pot, egg, stove)
        # Boil the egg in the pot using the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Put the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot) # Fill the pot with water
        boil_egg(egg, pot, stove) # Boil the egg

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior ensure_water_in_pot(pot:item):
    body:
        if not has_water(pot):
            achieve has_water(pot)
            # Fill the pot with water if it does not already have water

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is on for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        ensure_water_in_pot(pot)
        boil_egg(egg, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_egg(pot:item, egg:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item

        fill_pot_with_water(pot) # Fill the pot with water
        boil_egg(pot, egg, stove) # Boil the egg using the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_the_egg(pot:item, stove:item, egg:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot is filled with water
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        boil_the_egg(pot, stove, egg)
        # Boil the egg in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(pot:item, egg:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot contains water
        achieve_once inside(egg, pot)
        # Put the egg in the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_egg(pot, egg, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water.', '2. Put the pot on the stove.', '3. Turn on the stove.', '4. Put the egg in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        fill_pot_with_water(pot)
        # Fill the selected pot with water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Move character close to the faucet
        achieve_once close_char(char, pot)
        # Move character close to the pot
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Move character close to the faucet
        achieve_once close_char(char, pot)
        # Move character close to the pot
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)walk_executor(pot_2069)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the stove_2065. Robot is close to the food_egg_2020. Robot is close to the pot_2069. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that water is put into the pot. The current set of actions does not explicitly include the pot being filled with water. Please ensure that the action of putting water into the pot is taken before considering the sub-task complete.
##############################
From agent.py
Human Instruction: The robot needs to ensure that water is put into the pot. The current set of actions does not explicitly include the pot being filled with water. Please ensure that the action of putting water into the pot is taken before considering the sub-task complete.

Human Guidance: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to fridge_289.
Action 10: Switch off fridge_289.
Action 11: Open fridge_289.
Action 12: look for food_egg_2020 around fridge_289.
Action 13: Grab food_egg_2020.
Action 14: Put food_egg_2020 into pot_2069.
Action 15: Walk to stove_2065.
Action 16: Put pot_2069 on stove_2065.
Action 17: Switch on stove_2065.
Action 18: Walk to faucet_43.
Action 19: Walk to pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot item
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        fill_pot_with_water(pot, faucet) 
        # Fill the pot with water using the faucet
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot item
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        fill_pot_with_water(pot, faucet) 
        # Fill the pot with water using the faucet
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water. While the faucet was turned on and off, there was no action to explicitly place the pot under the faucet to fill it with water. Ensure that the pot is filled with water before proceeding to the next sub-task.
##############################
From agent.py
Human Instruction: You need to fill the pot with water. While the faucet was turned on and off, there was no action to explicitly place the pot under the faucet to fill it with water. Ensure that the pot is filled with water before proceeding to the next sub-task.

Human Guidance: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to fridge_289.
Action 10: Switch off fridge_289.
Action 11: Open fridge_289.
Action 12: look for food_egg_2020 around fridge_289.
Action 13: Grab food_egg_2020.
Action 14: Put food_egg_2020 into pot_2069.
Action 15: Walk to stove_2065.
Action 16: Put pot_2069 on stove_2065.
Action 17: Switch on stove_2065.
Action 18: Walk to faucet_43.
Action 19: Walk to pot_2069.
Action 20: Walk to faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet to fill the pot
        achieve_once has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve_once close_char(char, pot) 
        # Ensure the character is close to the pot
        achieve_once has_water(pot) 
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve_once close_char(char, pot) 
        # Ensure the character is close to the pot
        achieve_once has_water(pot) 
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the stove_2065. Robot is close to the food_egg_2020. Robot is close to the pot_2069. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is filled with water. While the faucet was turned on and off, there was no action to explicitly place the pot under the faucet to fill it with water. Ensure that the pot is positioned correctly under the faucet when the faucet is switched on.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot item

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_tray_296_around_dishwasher_1001(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that is filled with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to place the pot on

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_closetdrawer_158(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(iron,closetdrawer_instance)
        else:
            exp(iron,closetdrawer_instance)
    eff:
        unknown[iron]=False
        close[iron,closetdrawer_instance]=True
        close[closetdrawer_instance,iron]=True
    

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior ensure_pot_filled_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Make sure the pot is filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        ensure_pot_filled_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior ensure_pot_filled_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Make sure the pot is filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        ensure_pot_filled_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove with ID 2065 to proceed with boiling egg process
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove item

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior ensure_stove_is_on(stove:item):
    body:
        achieve is_on(stove)
        
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        ensure_stove_is_on(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. turn on the stove." ?
Answer: Turn the stove knob to the desired heat level to turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_236_around_trashcan_99(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(mat,trashcan_instance)
        else:
            exp(mat,trashcan_instance)
    eff:
        unknown[mat]=False
        close[mat,trashcan_instance]=True
        close[trashcan_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Bind the stove with ID 2065

        turn_on_stove(stove)
        # Turn on the stove with ID 2065
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        turn_on_stove(stove)
        # Turn on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        turn_on_stove(stove)
        # Turn on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove where the pot is placed
        
        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        
        turn_on_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        # Select a stove with a switch

        turn_on_stove(stove) 
        # Turn on the stove
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. turn on the stove." ?
Answer: To "turn on the stove," locate the control for the burner where the pot is placed and turn it to the desired heat setting.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and on(pot_2069, stove)
        # Select the stove where the pot is placed

        turn_on_stove(stove)
        # Turn on the stove where the pot is placed
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_stove_on(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        # Select a stove that has a switch

        turn_stove_on(stove)
        # Turn on the selected stove
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and on(pot_2069, stove)
        # Ensure the pot is on the stove

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove on which you need to turn on

        achieve close_char(char, stove)
        # Approach the stove to turn it on

        turn_on_stove(stove)
        # Turn on the stove
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove on which you need to turn on

        achieve close_char(char, stove)
        # Approach the stove to turn it on

        turn_on_stove(stove)
        # Turn on the stove
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2046_around_closetdrawer_146(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_iron_2089_around_home_office_319(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(iron,home_office_instance)
        else:
            exp(iron,home_office_instance)
    eff:
        unknown[iron]=False
        close[iron,home_office_instance]=True
        close[home_office_instance,iron]=True
    

#exp_behavior_end

#goal_representation

behavior put_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot that is on the stove

        put_egg_in_pot(egg, pot)
        # Put the egg inside the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_table_226(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that already has water

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        achieve_once inside(egg, pot)
        # Place the egg inside the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_table_226(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot) and has_water(pot) and on(pot, stove_2065)

        place_egg_in_pot(egg, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind pot: item where:
            is_pot(pot)
        # Select the pot item

        put_egg_in_pot(egg, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        place_egg_in_pot(egg, pot)
        # Place the egg inside the pot
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_22_around_bench_228(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==228
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(mat,bench_instance)
        else:
            exp(mat,bench_instance)
    eff:
        unknown[mat]=False
        close[mat,bench_instance]=True
        close[bench_instance,mat]=True
    

#exp_behavior_end

#goal_representation

behavior put_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg]==2020
        # Select the egg with ID 2020

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that has water

        put_egg_in_pot(egg, pot)
        # Place the egg in the pot

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "4. put the egg in the pot." ?
Answer: Wait until the water begins to boil, then gently lower the egg into the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2046_around_closetdrawer_158(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
behavior put_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind pot: item where:
            is_pot(pot)
        # Select the pot item

        put_egg_in_pot(egg, pot)
        # Put the egg in the pot
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_doorjamb_165(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==165
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(mat,doorjamb_instance)
        else:
            exp(mat,doorjamb_instance)
    eff:
        unknown[mat]=False
        close[mat,doorjamb_instance]=True
        close[doorjamb_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that has water

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        put_egg_in_pot(egg, pot)
        # Place the egg in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

behavior find_iron_2089_around_closetdrawer_158(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(iron,closetdrawer_instance)
        else:
            exp(iron,closetdrawer_instance)
    eff:
        unknown[iron]=False
        close[iron,closetdrawer_instance]=True
        close[closetdrawer_instance,iron]=True
    

behavior find_clothes_gloves_2046_around_closetdrawer_146(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_egg_in_pot(egg:item, pot:item, stove:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water
        achieve_once on(pot, stove)
        # Ensure the pot is on the stove
        achieve is_on(stove)
        # Ensure the stove is on
        achieve_once inside(egg, pot)
        # Gently lower the egg into the pot

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        put_egg_in_pot(egg, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

behavior find_iron_2089_around_oil_2079(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2079
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(iron,oil_instance)
        else:
            exp(iron,oil_instance)
    eff:
        unknown[iron]=False
        close[iron,oil_instance]=True
        close[oil_instance,iron]=True
    

behavior find_mat_401_around_home_office_319(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(mat,home_office_instance)
        else:
            exp(mat,home_office_instance)
    eff:
        unknown[mat]=False
        close[mat,home_office_instance]=True
        close[home_office_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior wait_for_water_to_boil(stove:item, pot:item):
    body:
        if is_on(stove) and on(pot, stove):
            achieve has_water(pot)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        wait_for_water_to_boil(stove, pot)
        place_egg_in_pot(egg, pot)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wait_for_boiling_and_add_egg(pot:item, egg:item):
    body:
        receive_only_from_human_giving_instruction(Wait until the water begins to boil)
        achieve_once inside(egg, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) and on(pot, stove_2065)
        # Select the pot that has water and is on the stove

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg

        wait_for_boiling_and_add_egg(pot, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water

        put_egg_in_pot(egg, pot)
        # Put the egg into the pot

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_table_226(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that contains water

        place_egg_in_pot(egg, pot)
        # Place the egg in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

behavior find_iron_2089_around_closetdrawer_158(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(iron,closetdrawer_instance)
        else:
            exp(iron,closetdrawer_instance)
    eff:
        unknown[iron]=False
        close[iron,closetdrawer_instance]=True
        close[closetdrawer_instance,iron]=True
    

behavior find_mat_401_around_home_office_319(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(mat,home_office_instance)
        else:
            exp(mat,home_office_instance)
    eff:
        unknown[mat]=False
        close[mat,home_office_instance]=True
        close[home_office_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior wait_for_boiling_water(pot:item):
    body:
        # This behavior assumes the water in the pot is already boiling
        achieve_once has_water(pot) # Ensure the pot has water

behavior gently_place_egg_in_pot(egg:item, pot:item):
    body:
        # Gently place the egg into the pot
        achieve_once inside(egg, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        
        bind egg: item where:
            is_food_egg(egg) and close_char(char, egg)
        
        wait_for_boiling_water(pot)
        gently_place_egg_in_pot(egg, pot)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_oil_2079(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2079
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(iron,oil_instance)
        else:
            exp(iron,oil_instance)
    eff:
        unknown[iron]=False
        close[iron,oil_instance]=True
        close[oil_instance,iron]=True
    

behavior find_mat_237_around_table_226(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior wait_for_water_to_boil(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Wait for the water to start boiling before placing the egg in

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that is filled with water

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is turned on

        wait_for_water_to_boil(pot, stove)
        put_egg_in_pot(egg, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

behavior find_iron_2089_around_oil_2079(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2079
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(iron,oil_instance)
        else:
            exp(iron,oil_instance)
    eff:
        unknown[iron]=False
        close[iron,oil_instance]=True
        close[oil_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior wait_for_boiling_and_add_egg(water:item, stove:item, egg:item, pot:item):
    body:
        achieve has_water(pot)
        achieve is_on(stove)
        if not inside(egg, pot):
            # Wait until the water begins to boil, then gently lower the egg into the pot
            achieve_once close_char(char, pot)
            achieve_once inside(egg, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water

        bind stove: item where:
            is_stove(stove) and on(pot, stove) and is_on(stove)
        # Select a stove that has the pot on it and is turned on

        bind egg: item where:
            is_food_egg(egg) and close_char(char, pot)
        # Select the egg

        wait_for_boiling_and_add_egg(has_water(pot), stove, egg, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and close_char(char, pot)
        # Select the pot that is close to the character and already filled with water

        bind egg: item where:
            is_food_egg(egg) and inhand(egg)
        # Ensure the egg is in hand

        place_egg_in_pot(egg, pot)
        # Place the egg into the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_22_around_fryingpan_2083(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(mat,fryingpan_instance)
        else:
            exp(mat,fryingpan_instance)
    eff:
        unknown[mat]=False
        close[mat,fryingpan_instance]=True
        close[fryingpan_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_egg_in_boiling_water(egg:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve is_on(stove)
        # Ensure the pot has water and the stove is on to boil the water
        achieve_once inside(egg, pot)
        # Gently lower the egg into the pot

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_egg_in_boiling_water(egg, pot, stove)
        # Place the egg in the pot to boil
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_closetdrawer_146(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(iron,closetdrawer_instance)
        else:
            exp(iron,closetdrawer_instance)
    eff:
        unknown[iron]=False
        close[iron,closetdrawer_instance]=True
        close[closetdrawer_instance,iron]=True
    

behavior find_mat_236_around_doorjamb_165(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==165
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(mat,doorjamb_instance)
        else:
            exp(mat,doorjamb_instance)
    eff:
        unknown[mat]=False
        close[mat,doorjamb_instance]=True
        close[doorjamb_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior wait_for_water_to_boil(stove:item, pot:item):
    body:
        achieve close_char(char, stove)
        observe(pot, "Check if the water is boiling")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water

        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        # Select the stove with the pot on it

        wait_for_water_to_boil(stove, pot)
        # Wait for the water to boil

        place_egg_in_pot(egg, pot)
        # Put the egg into the pot after the water boils
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_table_226(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_pot_has_water(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior wait_for_water_to_boil(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Ensure the pot is on the stove and the stove is on for boiling

behavior put_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Gently place the egg inside the pot

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Bind the egg item for use

        bind pot: item where:
            is_pot(pot)
        # Bind the pot item for use

        bind stove: item where:
            is_stove(stove)
        # Bind the stove item for use

        ensure_pot_has_water(pot)
        wait_for_water_to_boil(pot, stove)
        put_egg_in_pot(egg, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_table_226(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(tray,table_instance)
        else:
            exp(tray,table_instance)
    eff:
        unknown[tray]=False
        close[tray,table_instance]=True
        close[table_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

behavior wait_for_boiling_water(pot:item):
    body:
        observe(pot, "Wait until water is boiling")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item

        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        if has_water(pot):
            wait_for_boiling_water(pot)
            put_egg_in_pot(egg, pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

behavior wait_for_boiling_water(pot:item):
    body:
        observe(pot, "Wait until water is boiling")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item

        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        if has_water(pot):
            wait_for_boiling_water(pot)
            put_egg_in_pot(egg, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)obs(pot_2069, Wait until water is boiling)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the stove_2065. Robot is close to the food_egg_2020. Robot is close to the pot_2069. 
##############################
From agent.py
obs(pot_2069, Wait until water is boiling)
Get this information:  pot_2069 is inside dining_room_201. pot_2069 is close to stove_2065. pot_2069 is close to character_65. pot_2069 is on stove_2065. food_egg_2020 is inside pot_2069. pot_2069 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil egg.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_egg_2020)', 'putin_executor(food_egg_2020, pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(faucet_43)', 'walk_executor(pot_2069)', 'walk_executor(faucet_43)', 'walk_executor(pot_2069)', 'walk_executor(faucet_43)', 'walk_executor(stove_2065)', 'walk_executor(pot_2069)']
Time info:
Time consume: 798 seconds
Exp_helper query times: 0
Guidance query times: 4
library scale: 100
goal generate times: 66
goal correct times: 0
action_num: 22

Task complete rate:
1
Scene_id: 0
##############################
