From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2053_around_kitchen_counter_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior insert_coffee_filter_and_coffee(coffee_maker:item, coffee_filter:item, coffee:item):
    body:
        achieve_once inside(coffee_filter, coffee_maker)
        # Place the coffee filter inside the coffee maker
        achieve_once inside(coffee, coffee_maker)
        # Place the coffee inside the coffee maker

behavior start_coffee_maker(coffee_maker:item):
    body:
        if has_switch(coffee_maker):
            achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve_once close_char(char, coffee_maker)
        # Ensure the character is close to the coffee maker
        achieve_once inside(coffee_maker, cup)
        # Pour the brewed coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet as the water source

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        # Select a coffee filter

        bind coffee: item where:
            is_food_coffee(coffee)
        # Select coffee to brew

        bind cup: item where:
            is_cup(cup)
        # Select a cup to pour the brewed coffee

        fill_coffee_maker_with_water(coffee_maker, faucet)
        insert_coffee_filter_and_coffee(coffee_maker, coffee_filter, coffee)
        start_coffee_maker(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2133_around_table_270(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2053_around_coffe_maker_130(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==130
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker
        achieve_once inside(cup, coffee_maker)
        # Place the cup inside the coffee maker to fill with coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        make_coffee(coffee_maker, cup)
        # Make a cup of coffee using the coffee maker

#goal_representation_end

##############################
From agent.py->reset_goal

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker
        achieve_once inside(cup, coffee_maker)
        # Place the cup inside the coffee maker to fill with coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        make_coffee(coffee_maker, cup)
        # Make a cup of coffee using the coffee maker

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)switchon_executor(coffe_maker_130)walk_executor(table_270)exp(cup_2133, table_270)walk_executor(coffe_maker_130)switchoff_executor(coffe_maker_130)open_executor(coffe_maker_130)walk_executor(cup_2133)grab_executor(cup_2133)walk_executor(coffe_maker_130)putin_executor(cup_2133, coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned on. 
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
exp(cup_2133, table_270)
Fail to find cup_2133 around table_270. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_199)exp(cup_2133, table_199)walk_executor(coffe_maker_130)switchoff_executor(coffe_maker_130)open_executor(coffe_maker_130)walk_executor(cup_2133)grab_executor(cup_2133)walk_executor(coffe_maker_130)putin_executor(cup_2133, coffe_maker_130)
##############################
From agent.py
walk_executor(table_199)
Robot find: wooden_spoon_2000, mat_203, tea_bag_2023, drawing_201, drawing_202, Robot is close to the table_199. 
##############################
From agent.py
exp(cup_2133, table_199)
Fail to find cup_2133 around table_199. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2133, table_114)walk_executor(coffe_maker_130)switchoff_executor(coffe_maker_130)open_executor(coffe_maker_130)walk_executor(cup_2133)grab_executor(cup_2133)walk_executor(coffe_maker_130)putin_executor(cup_2133, coffe_maker_130)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2133, table_114)
Find cup_2133. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)switchoff_executor(coffe_maker_130)open_executor(coffe_maker_130)walk_executor(cup_2133)grab_executor(cup_2133)walk_executor(coffe_maker_130)putin_executor(cup_2133, coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
switchoff_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_130)
Robot find: coffee_filter_2065, Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is opened. 
##############################
From agent.py
walk_executor(cup_2133)
Robot find: Robot is close to the table_114. Robot is close to the cup_2133. 
##############################
From agent.py
grab_executor(cup_2133)
Robot find: Robot is close to the table_114. Robot is close to the cup_2133. Grabbing cup_2133 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2133. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(cup_2133, coffe_maker_130)
Robot find: Robot is close to the cup_2133. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is close cup_2133. cup_2133 is inside coffe_maker_130. cup_2133 is close coffe_maker_130. cup_2133 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the coffee maker is plugged in.
##############################
From agent.py
Human Instruction: You need to ensure that the coffee maker is plugged in.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to table_270.
Action 4: look for cup_2133 around table_270.
Action 5: Walk to table_199.
Action 6: look for cup_2133 around table_199.
Action 7: Walk to table_114.
Action 8: look for cup_2133 around table_114.
Action 9: Walk to coffe_maker_130.
Action 10: Switch off coffe_maker_130.
Action 11: Open coffe_maker_130.
Action 12: Walk to cup_2133.
Action 13: Grab cup_2133.
Action 14: Walk to coffe_maker_130.
Action 15: Put cup_2133 into coffe_maker_130.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_117(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_coffee_maker_ready(coffee_maker: item):
    # Ensure the coffee maker is ready with the appropriate conditions
    if not plugged(coffee_maker):
        observe(coffee_maker, "Ensure the coffee maker is plugged in")

behavior make_coffee(cup: item, coffee_maker: item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Place the cup inside the coffee maker
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start the coffee brewing process

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
            # Select the coffee maker
        
        bind cup: item where:
            is_cup(cup)
            # Select a cup

        ensure_coffee_maker_ready(coffee_maker)
        make_coffee(cup, coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_117(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_ready_to_brew(coffee_maker:item):
    symbol ready = is_on(coffee_maker) and plugged(coffee_maker)
    return ready

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once inside(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==130
        
        bind cup: item where:
            is_cup(cup) and id[cup]==2133

        if is_ready_to_brew(coffee_maker):
            make_coffee(coffee_maker, cup)
        else:
            observe(coffee_maker, "Check if the coffee maker is plugged in and switched on")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_ready_to_brew(coffee_maker:item):
    symbol ready = is_on(coffee_maker) and plugged(coffee_maker)
    return ready

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once inside(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==130
        
        bind cup: item where:
            is_cup(cup) and id[cup]==2133

        if is_ready_to_brew(coffee_maker):
            make_coffee(coffee_maker, cup)
        else:
            observe(coffee_maker, "Check if the coffee maker is plugged in and switched on")

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_130, Check if the coffee maker is plugged in and switched on)
##############################
From agent.py
obs(coffe_maker_130, Check if the coffee maker is plugged in and switched on)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffe_maker_130 is close to cup_2133. coffee_filter_2065 is inside coffe_maker_130. cup_2133 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN. coffe_maker_130 is OFF.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Switch on the coffee maker. Currently, the coffe_maker_130 is plugged in but turned off; it needs to be switched on to complete the task of making a cup of coffee.
##############################
From agent.py
Human Instruction: Switch on the coffee maker. Currently, the coffe_maker_130 is plugged in but turned off; it needs to be switched on to complete the task of making a cup of coffee.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to table_270.
Action 4: look for cup_2133 around table_270.
Action 5: Walk to table_199.
Action 6: look for cup_2133 around table_199.
Action 7: Walk to table_114.
Action 8: look for cup_2133 around table_114.
Action 9: Walk to coffe_maker_130.
Action 10: Switch off coffe_maker_130.
Action 11: Open coffe_maker_130.
Action 12: Walk to cup_2133.
Action 13: Grab cup_2133.
Action 14: Walk to coffe_maker_130.
Action 15: Put cup_2133 into coffe_maker_130.
Action 16: Observe around coffe_maker_130 with the question of Check if the coffee maker is plugged in and switched on.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior switch_on_coffee_maker(coffee_maker:item):
    body:
        if has_switch(coffee_maker):
            achieve is_on(coffee_maker)

behavior prepare_coffee_with_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Place the cup inside the coffee maker
        switch_on_coffee_maker(coffee_maker)
        # Ensure the coffee maker is on

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and has_plug(coffee_maker) and plugged(coffee_maker)
        # Select a coffee maker that is plugged in

        bind cup: item where:
            is_cup(cup) and id[cup] == 2133
        # Select the specific cup with ID 2133

        prepare_coffee_with_coffee_maker(coffee_maker, cup)
        # Use the coffee maker to prepare coffee with the selected cup
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior switch_on_coffee_maker(coffee_maker:item):
    body:
        if has_switch(coffee_maker):
            achieve is_on(coffee_maker)

behavior prepare_coffee_with_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Place the cup inside the coffee maker
        switch_on_coffee_maker(coffee_maker)
        # Ensure the coffee maker is on

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and has_plug(coffee_maker) and plugged(coffee_maker)
        # Select a coffee maker that is plugged in

        bind cup: item where:
            is_cup(cup) and id[cup] == 2133
        # Select the specific cup with ID 2133

        prepare_coffee_with_coffee_maker(coffee_maker, cup)
        # Use the coffee maker to prepare coffee with the selected cup
##############################
From agent.py-> find a plan in act()
close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
close_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)', 'walk_executor(table_270)', 'walk_executor(table_199)', 'walk_executor(table_114)', 'walk_executor(coffe_maker_130)', 'switchoff_executor(coffe_maker_130)', 'open_executor(coffe_maker_130)', 'walk_executor(cup_2133)', 'grab_executor(cup_2133)', 'walk_executor(coffe_maker_130)', 'putin_executor(cup_2133, coffe_maker_130)', 'close_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)']
Time info:
Time consume: 106 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 83
goal generate times: 5
goal correct times: 0
action_num: 14

Task complete rate:
1
Scene_id: 1
##############################
