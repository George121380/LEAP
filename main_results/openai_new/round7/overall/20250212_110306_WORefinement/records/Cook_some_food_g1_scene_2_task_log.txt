From agent.py
Reset goals: The sub-goals are: 
['Boil the vegetables in a pot on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_lemon_2061_around_cupboard_131(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_lemon,cupboard_instance)
        else:
            exp(food_lemon,cupboard_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,cupboard_instance]=True
        close[cupboard_instance,food_lemon]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_54_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables_in_pot(pot:item, stove:item, vegetables:item):
    body:
        achieve is_on(stove)
        # Turn on the stove
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling vegetables

        bind stove: item where:
            is_stove(stove)
        # Select a stove for heating

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to be boiled

        fill_pot_with_water(pot) # Fill the pot with water
        boil_vegetables_in_pot(pot, stove, vegetables) # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables_in_pot(pot:item, stove:item, vegetables:item):
    body:
        achieve is_on(stove)
        # Turn on the stove
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling vegetables

        bind stove: item where:
            is_stove(stove)
        # Select a stove for heating

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to be boiled

        fill_pot_with_water(pot) # Fill the pot with water
        boil_vegetables_in_pot(pot, stove, vegetables) # Boil the vegetables in the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_54, cupboard_131)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(pot_54, cupboard_131)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before boiling the vegetables.
##############################
From agent.py
Human Instruction: You need to fill the pot with water before boiling the vegetables.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_54 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to stove_2090.
Action 10: Switch on stove_2090.
Action 11: Walk to fridge_140.
Action 12: Switch off fridge_140.
Action 13: Open fridge_140.
Action 14: look for food_vegetable_2072 around fridge_140.
Action 15: Walk to faucet_308.
Action 16: Switch off faucet_308.
Action 17: Walk to food_vegetable_2072.
Action 18: Grab food_vegetable_2072.
Action 19: Walk to pot_54.
Action 20: Put food_vegetable_2072 into pot_54.
Action 21: Walk to stove_2090.
Action 22: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_wallshelf_187(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

behavior find_dough_2021_around_cupboard_130(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dough,cupboard_instance)
        else:
            exp(dough,cupboard_instance)
    eff:
        unknown[dough]=False
        close[dough,cupboard_instance]=True
        close[cupboard_instance,dough]=True
    

behavior find_phone_47_around_nightstand_373(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==373
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_headset_2086_around_doorjamb_182(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==182
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(headset,doorjamb_instance)
        else:
            exp(headset,doorjamb_instance)
    eff:
        unknown[headset]=False
        close[headset,doorjamb_instance]=True
        close[doorjamb_instance,headset]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the specific stove with ID 2090

        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot)
        # Ensure vegetables are inside the pot

        fill_pot_with_water(pot)
        # Fill the pot with water

        boil_vegetables(pot, stove)
        # Boil the vegetables in the pot on the stove
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the specific stove with ID 2090

        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot)
        # Ensure vegetables are inside the pot

        fill_pot_with_water(pot)
        # Fill the pot with water

        boil_vegetables(pot, stove)
        # Boil the vegetables in the pot on the stove
##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the pot with water before boiling the vegetables. Ensure that the pot contains water before placing it on the stove and switching the stove on again for boiling.
##############################
From agent.py
Human Instruction: The robot needs to fill the pot with water before boiling the vegetables. Ensure that the pot contains water before placing it on the stove and switching the stove on again for boiling.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_54 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to stove_2090.
Action 10: Switch on stove_2090.
Action 11: Walk to fridge_140.
Action 12: Switch off fridge_140.
Action 13: Open fridge_140.
Action 14: look for food_vegetable_2072 around fridge_140.
Action 15: Walk to faucet_308.
Action 16: Switch off faucet_308.
Action 17: Walk to food_vegetable_2072.
Action 18: Grab food_vegetable_2072.
Action 19: Walk to pot_54.
Action 20: Put food_vegetable_2072 into pot_54.
Action 21: Walk to stove_2090.
Action 22: Put pot_54 on stove_2090.
Action 23: Grab pot_54.
Action 24: Walk to faucet_134.
Action 25: Switch on faucet_134.
Action 26: Switch off faucet_134.
Action 27: Walk to stove_2090.
Action 28: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_cupboard_130(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior heat_vegetables_in_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Place the pot on the stove and turn on the stove to boil vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the faucet with ID 134
        
        fill_pot_with_water(pot, faucet) 
        # Fill the pot with water using the faucet
        
        heat_vegetables_in_pot(pot, stove) 
        # Boil the vegetables using the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_cupboard_130(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot with vegetables on the stove
        achieve is_on(stove)
        # Ensure the stove is on to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        # Ensure the pot is filled with water

        boil_vegetables(pot, stove)
        # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_cupboard_130(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water at the faucet

behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot) 
        # Place vegetables inside the pot
        achieve_once on(pot, stove) 
        # Place the pot on the stove
        achieve is_on(stove) 
        # Ensure the stove is on to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the faucet with ID 134

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072
        # Select the vegetables with ID 2072

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        fill_pot_water(pot, faucet)
        boil_vegetables(vegetables, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot) 
        # Put vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        fill_pot_with_water(pot, faucet) # Fill the pot with water
        boil_vegetables(pot, stove, vegetables) # Boil the vegetables using the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot) 
        # Put vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        fill_pot_with_water(pot, faucet) # Fill the pot with water
        boil_vegetables(pot, stove, vegetables) # Boil the vegetables using the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water before placing it on the stove and turning the stove on to boil the vegetables.
##############################
Task Summary:
Task Goal:
Boil vegetables with a pot on the stove.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(faucet_134)']
Time info:
Time consume: 124 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 45
goal generate times: 6
goal correct times: 0
action_num: 27

Task complete rate:
Keystate: k1 - Requires: 8 steps
Keystate: k2 - Requires: 6 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
