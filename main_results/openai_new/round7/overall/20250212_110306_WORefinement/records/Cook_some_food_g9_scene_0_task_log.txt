From agent.py
Reset goals: The sub-goals are: 
['1. Peel and cut the potatoes into fries.', '2. Fry the potato slices until golden brown.', '3. Place the French fries on a serving dish.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_and_cut_potatoes(potato:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potato, cutting_board)
        # Place the potato on the cutting board
        achieve_once cut(potato)
        # Peel and cut the potato into fries using the knife

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato item

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        peel_and_cut_potatoes(potato, knife, cutting_board)
        # Peel and cut the potatoes into fries on the cutting board

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_and_cut_potatoes(potato:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potato, cutting_board)
        # Place the potato on the cutting board
        achieve_once cut(potato)
        # Peel and cut the potato into fries using the knife

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato item

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        peel_and_cut_potatoes(potato, knife, cutting_board)
        # Peel and cut the potatoes into fries on the cutting board

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_potato_2035, kitchen_counter_230)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_potato_2035, kitchen_counter_230)
Fail to find food_potato_2035 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_potato_2035, cupboard_229)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_potato_2035, cupboard_229)
Fail to find food_potato_2035 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_234)exp(food_potato_2035, wallshelf_234)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(wallshelf_234)
Robot find: Robot is close to the wallshelf_234. 
##############################
From agent.py
exp(food_potato_2035, wallshelf_234)
Fail to find food_potato_2035 around wallshelf_234. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_235)exp(food_potato_2035, wallshelf_235)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(wallshelf_235)
Robot find: Robot is close to the wallshelf_235. 
##############################
From agent.py
exp(food_potato_2035, wallshelf_235)
Fail to find food_potato_2035 around wallshelf_235. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_potato_2035, fridge_289)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_potato_2035, fridge_289)
Find food_potato_2035. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_potato_2035 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_potato_2035. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
cut_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_mousepad_167(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(cd_player,mousepad_instance)
        else:
            exp(cd_player,mousepad_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,mousepad_instance]=True
        close[mousepad_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_slices(sliced_potatoes:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(sliced_potatoes, fryingpan)
        # Place the sliced potatoes inside the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Ensure the stove is on to fry the potatoes till golden brown

behavior __goal__():
    body:
        bind sliced_potatoes: item where:
            is_food_potato(sliced_potatoes) and cut(sliced_potatoes)
        # Select sliced potatoes that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_potato_slices(sliced_potatoes, fryingpan, stove)
        # Fry the potato slices until golden brown on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_potato_slices(sliced_potatoes:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(sliced_potatoes, fryingpan)
        # Place the sliced potatoes inside the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Ensure the stove is on to fry the potatoes till golden brown

behavior __goal__():
    body:
        bind sliced_potatoes: item where:
            is_food_potato(sliced_potatoes) and cut(sliced_potatoes)
        # Select sliced potatoes that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_potato_slices(sliced_potatoes, fryingpan, stove)
        # Fry the potato slices until golden brown on the stove

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_potato_2035, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. food_potato_2035 is inside fryingpan_2083. fryingpan_2083 is close food_potato_2035. food_potato_2035 is close fryingpan_2083. food_potato_2035 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The potato slices have been placed inside the frying pan, and the frying pan has been placed on the stove. The stove has been turned on, but you did not add oil to the frying pan, which is typically necessary to fry potato slices until they are golden brown. Add oil to the frying pan to complete this sub-task.
##############################
From agent.py
Human Instruction: The potato slices have been placed inside the frying pan, and the frying pan has been placed on the stove. The stove has been turned on, but you did not add oil to the frying pan, which is typically necessary to fry potato slices until they are golden brown. Add oil to the frying pan to complete this sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_potato_2035 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for food_potato_2035 around cupboard_229.
Action 6: Walk to wallshelf_234.
Action 7: look for food_potato_2035 around wallshelf_234.
Action 8: Walk to wallshelf_235.
Action 9: look for food_potato_2035 around wallshelf_235.
Action 10: Walk to fridge_289.
Action 11: Switch off fridge_289.
Action 12: Open fridge_289.
Action 13: look for food_potato_2035 around fridge_289.
Action 14: Grab food_potato_2035.
Action 15: Walk to cutting_board_2051.
Action 16: Put food_potato_2035 on cutting_board_2051.
Action 17: Walk to knife_2050.
Action 18: Grab knife_2050.
Action 19: Walk to food_potato_2035.
Action 20: Cut food_potato_2035.
Action 21: Grab food_potato_2035.
Action 22: Walk to fryingpan_2083.
Action 23: Put food_potato_2035 into fryingpan_2083.
Action 24: Grab fryingpan_2083.
Action 25: Walk to stove_2065.
Action 26: Put fryingpan_2083 on stove_2065.
Action 27: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_slices(potato_slices:item, fryingpan:item, stove:item, oil:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve_once inside(oil, fryingpan)
        # Add oil to the frying pan
        achieve_once inside(potato_slices, fryingpan)
        # Add the potato slices to the frying pan
        achieve is_on(stove)
        # Ensure the stove is on to fry the potato slices until golden brown

behavior __goal__():
    body:
        bind potato_slices: item where:
            is_food_potato(potato_slices) and cut(potato_slices)
        # Select the sliced potatoes that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind oil: item where:
            is_oil(oil)
        # Select oil

        fry_potato_slices(potato_slices, fryingpan, stove, oil)
        # Perform the frying process

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_potato_slices(potato_slices:item, fryingpan:item, stove:item, oil:item):
    body:
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve_once inside(oil, fryingpan)
        # Add oil to the frying pan
        achieve_once inside(potato_slices, fryingpan)
        # Add the potato slices to the frying pan
        achieve is_on(stove)
        # Ensure the stove is on to fry the potato slices until golden brown

behavior __goal__():
    body:
        bind potato_slices: item where:
            is_food_potato(potato_slices) and cut(potato_slices)
        # Select the sliced potatoes that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind oil: item where:
            is_oil(oil)
        # Select oil

        fry_potato_slices(potato_slices, fryingpan, stove, oil)
        # Perform the frying process

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_french_fries_on_serving_dish(fries:item, dish:item):
    body:
        achieve_once on(fries, dish)

behavior __goal__():
    body:
        bind french_fries: item where:
            is_food_food(french_fries) and cut(french_fries)
        # Select the french fries item that has been cut

        bind serving_dish: item where:
            is_plate(serving_dish) or is_bowl(serving_dish)
        # Select a serving dish

        place_french_fries_on_serving_dish(french_fries, serving_dish)
        # Place the french fries on the serving dish

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_tray_296_around_coffee_table_2068(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(tray,coffee_table_instance)
        else:
            exp(tray,coffee_table_instance)
    eff:
        unknown[tray]=False
        close[tray,coffee_table_instance]=True
        close[coffee_table_instance,tray]=True
    

#exp_behavior_end

#goal_representation
behavior place_french_fries_on_serving_dish(french_fries:item, serving_dish:item):
    body:
        achieve_once on(french_fries, serving_dish)

behavior __goal__():
    body:
        bind french_fries: item where:
            is_food_potato(french_fries) and cut(french_fries)
        # Select the french fries that are already cut

        bind serving_dish: item where:
            surfaces(serving_dish)
        # Select a serving dish that has a surface

        place_french_fries_on_serving_dish(french_fries, serving_dish)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_french_fries_on_serving_dish(french_fries:item, serving_dish:item):
    body:
        achieve_once on(french_fries, serving_dish)

behavior __goal__():
    body:
        bind french_fries: item where:
            is_food_potato(french_fries) and cut(french_fries)
        # Select the french fries that are already cut

        bind serving_dish: item where:
            surfaces(serving_dish)
        # Select a serving dish that has a surface

        place_french_fries_on_serving_dish(french_fries, serving_dish)
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the French fries onto a serving dish to complete the task.
##############################
From agent.py
Human Instruction: You need to place the French fries onto a serving dish to complete the task.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_potato_2035 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for food_potato_2035 around cupboard_229.
Action 6: Walk to wallshelf_234.
Action 7: look for food_potato_2035 around wallshelf_234.
Action 8: Walk to wallshelf_235.
Action 9: look for food_potato_2035 around wallshelf_235.
Action 10: Walk to fridge_289.
Action 11: Switch off fridge_289.
Action 12: Open fridge_289.
Action 13: look for food_potato_2035 around fridge_289.
Action 14: Grab food_potato_2035.
Action 15: Walk to cutting_board_2051.
Action 16: Put food_potato_2035 on cutting_board_2051.
Action 17: Walk to knife_2050.
Action 18: Grab knife_2050.
Action 19: Walk to food_potato_2035.
Action 20: Cut food_potato_2035.
Action 21: Grab food_potato_2035.
Action 22: Walk to fryingpan_2083.
Action 23: Put food_potato_2035 into fryingpan_2083.
Action 24: Grab fryingpan_2083.
Action 25: Walk to stove_2065.
Action 26: Put fryingpan_2083 on stove_2065.
Action 27: Switch on stove_2065.
Action 28: Walk to oil_2079.
Action 29: Grab oil_2079.
Action 30: Walk to fryingpan_2083.
Action 31: Put oil_2079 into fryingpan_2083.
Action 32: Walk to food_potato_2035.
Action 33: Grab food_potato_2035.
Action 34: Walk to cutting_board_2051.
Action 35: Put food_potato_2035 on cutting_board_2051.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_tray_296_around_table_226(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(tray,table_instance)
        else:
            exp(tray,table_instance)
    eff:
        unknown[tray]=False
        close[tray,table_instance]=True
        close[table_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_french_fries_on_serving_dish(french_fries:item, dish:item):
    body:
        achieve_once on(french_fries, dish)
        # Place the French fries on the serving dish

behavior __goal__():
    body:
        bind french_fries: item where:
            is_food_potato(french_fries) and cut(french_fries)
        # Select the French fries, which are already cut and fried

        bind serving_dish: item where:
            is_plate(serving_dish) or is_tray(serving_dish)
        # Select a serving dish suitable for French fries

        place_french_fries_on_serving_dish(french_fries, serving_dish)
        # Place the French fries on the serving dish

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_french_fries_on_serving_dish(french_fries:item, dish:item):
    body:
        achieve_once on(french_fries, dish)
        # Place the French fries on the serving dish

behavior __goal__():
    body:
        bind french_fries: item where:
            is_food_potato(french_fries) and cut(french_fries)
        # Select the French fries, which are already cut and fried

        bind serving_dish: item where:
            is_plate(serving_dish) or is_tray(serving_dish)
        # Select a serving dish suitable for French fries

        place_french_fries_on_serving_dish(french_fries, serving_dish)
        # Place the French fries on the serving dish

##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(tray_296, table_226)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(tray_296)put_executor(food_potato_2035, tray_296)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the knife_2050. Robot is close to the table_226. 
##############################
From agent.py
exp(tray_296, table_226)
Fail to find tray_296 around table_226. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_297)open_executor(microwave_297)exp(tray_296, microwave_297)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(tray_296)put_executor(food_potato_2035, tray_296)
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the knife_2050. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the knife_2050. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find tray_296 ?
Answer: Robot, the target item tray_296 is located inside oven_295. To aid in identification, note that oven_295 is in the dining room, dining_room_201, close to several items including coffe_maker_290, toaster_292, and kitchen_counter_230. Additionally, nearby are wall_15, cupboard_229, and floor_204. Please proceed to oven_295 in the dining room to find tray_296 inside it.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to place the French fries onto a serving dish to complete the task.
Robot, the target item tray_296 is located inside oven_295. To aid in identification, note that oven_295 is in the dining room, dining_room_201, close to several items including coffe_maker_290, toaster_292, and kitchen_counter_230. Additionally, nearby are wall_15, cupboard_229, and floor_204. Please proceed to oven_295 in the dining room to find tray_296 inside it.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_potato_2035 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for food_potato_2035 around cupboard_229.
Action 6: Walk to wallshelf_234.
Action 7: look for food_potato_2035 around wallshelf_234.
Action 8: Walk to wallshelf_235.
Action 9: look for food_potato_2035 around wallshelf_235.
Action 10: Walk to fridge_289.
Action 11: Switch off fridge_289.
Action 12: Open fridge_289.
Action 13: look for food_potato_2035 around fridge_289.
Action 14: Grab food_potato_2035.
Action 15: Walk to cutting_board_2051.
Action 16: Put food_potato_2035 on cutting_board_2051.
Action 17: Walk to knife_2050.
Action 18: Grab knife_2050.
Action 19: Walk to food_potato_2035.
Action 20: Cut food_potato_2035.
Action 21: Grab food_potato_2035.
Action 22: Walk to fryingpan_2083.
Action 23: Put food_potato_2035 into fryingpan_2083.
Action 24: Grab fryingpan_2083.
Action 25: Walk to stove_2065.
Action 26: Put fryingpan_2083 on stove_2065.
Action 27: Switch on stove_2065.
Action 28: Walk to oil_2079.
Action 29: Grab oil_2079.
Action 30: Walk to fryingpan_2083.
Action 31: Put oil_2079 into fryingpan_2083.
Action 32: Walk to food_potato_2035.
Action 33: Grab food_potato_2035.
Action 34: Walk to cutting_board_2051.
Action 35: Put food_potato_2035 on cutting_board_2051.
Action 36: Walk to table_226.
Action 37: look for tray_296 around table_226.
Action 38: Walk to microwave_297.
Action 39: Open microwave_297.

##############################
From agent.py
exp(tray_296, microwave_297)
Fail to find tray_296 around microwave_297. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)exp(tray_296, oven_295)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(tray_296)put_executor(food_potato_2035, tray_296)
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the knife_2050. Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the knife_2050. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
exp(tray_296, oven_295)
Find tray_296. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(tray_296)put_executor(food_potato_2035, tray_296)
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(tray_296)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the tray_296. Robot is close to the oven_295. 
##############################
From agent.py
put_executor(food_potato_2035, tray_296)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the tray_296. Robot is close to the oven_295. tray_296 is close food_potato_2035. food_potato_2035 is close tray_296. food_potato_2035 is on tray_296. food_potato_2035 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(wallshelf_234)', 'walk_executor(wallshelf_235)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_potato_2035)', 'cut_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_potato_2035, fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(table_226)', 'walk_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(tray_296)', 'put_executor(food_potato_2035, tray_296)']
Time info:
Time consume: 244 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 174
goal generate times: 6
goal correct times: 0
action_num: 39

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
