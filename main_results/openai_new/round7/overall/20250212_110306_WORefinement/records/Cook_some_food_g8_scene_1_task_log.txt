From agent.py
Reset goals: The sub-goals are: 
['1. Boil the egg.', '2. Prepare the vegetables and lemon by washing and chopping them if needed.', '3. Mix the boiled egg, lemon, and vegetables in a bowl to make the salad.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2040_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_laser_pointer_2034_around_home_office_241(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laser_pointer,home_office_instance)
        else:
            exp(laser_pointer,home_office_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,home_office_instance]=True
        close[home_office_instance,laser_pointer]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot) 
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) 
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) 
        # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        turn_on_stove(stove)
        # Turn on the stove to boil the water

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot) 
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) 
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) 
        # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        turn_on_stove(stove)
        # Turn on the stove to boil the water

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)walk_executor(stove_2135)open_executor(stove_2135)exp(pot_2138, stove_2135)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(pot_2138, stove_2135)
Find pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to place an egg in the pot of water on the stove in order to boil it.
##############################
From agent.py
Human Instruction: The robot needs to place an egg in the pot of water on the stove in order to boil it.

The actions you have taken:
Action 1: Walk to faucet_20.
Action 2: Walk to stove_2135.
Action 3: Open stove_2135.
Action 4: look for pot_2138 around stove_2135.
Action 5: Walk to faucet_20.
Action 6: Walk to pot_78.
Action 7: Grab pot_78.
Action 8: Walk to faucet_20.
Action 9: Switch on faucet_20.
Action 10: Switch off faucet_20.
Action 11: Walk to stove_2135.
Action 12: Put pot_78 on stove_2135.
Action 13: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_cupboard_117(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_egg,cupboard_instance)
        else:
            exp(food_egg,cupboard_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,cupboard_instance]=True
        close[cupboard_instance,food_egg]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot) 
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        fill_pot_with_water(pot, faucet) # Fill the pot with water
        place_pot_on_stove(pot, stove) # Place the pot on the stove
        turn_on_stove(stove) # Turn on the stove to boil the water
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot) 
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        fill_pot_with_water(pot, faucet) # Fill the pot with water
        place_pot_on_stove(pot, stove) # Place the pot on the stove
        turn_on_stove(stove) # Turn on the stove to boil the water
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to place an egg in the pot of water on the stove to boil it.
##############################
From agent.py
Human Instruction: The robot needs to place an egg in the pot of water on the stove to boil it.

The actions you have taken:
Action 1: Walk to faucet_20.
Action 2: Walk to stove_2135.
Action 3: Open stove_2135.
Action 4: look for pot_2138 around stove_2135.
Action 5: Walk to faucet_20.
Action 6: Walk to pot_78.
Action 7: Grab pot_78.
Action 8: Walk to faucet_20.
Action 9: Switch on faucet_20.
Action 10: Switch off faucet_20.
Action 11: Walk to stove_2135.
Action 12: Put pot_78 on stove_2135.
Action 13: Switch on stove_2135.
Action 14: Walk to faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_plate_2152(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_egg,plate_instance)
        else:
            exp(food_egg,plate_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,plate_instance]=True
        close[plate_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior heat_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

        heat_pot_on_stove(pot, stove)
        # Heat the pot on the stove to boil the water
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove_and_heat(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot item

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

        place_pot_on_stove_and_heat(pot, stove)
        # Place the pot on the stove and heat it to boil the water


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_plate_2152(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_egg,plate_instance)
        else:
            exp(food_egg,plate_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,plate_instance]=True
        close[plate_instance,food_egg]=True
    

behavior find_pot_78_around_home_office_241(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pot,home_office_instance)
        else:
            exp(pot,home_office_instance)
    eff:
        unknown[pot]=False
        close[pot,home_office_instance]=True
        close[home_office_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot

behavior boil_egg(pot:item, stove:item):
    body:
        achieve once close_char(char, stove)
        # Ensure the character is close to the stove
        achieve is_on(stove)
        # Ensure the stove is on to boil the water in the pot

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item

        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select a pot with ID 78

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select a stove with ID 2135

        if has_water(pot):
            boil_egg(pot, stove)
            place_egg_in_pot(egg, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_78_around_table_270(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pot,table_instance)
        else:
            exp(pot,table_instance)
    eff:
        unknown[pot]=False
        close[pot,table_instance]=True
        close[table_instance,pot]=True
    

behavior find_clothes_scarf_2120_around_dresser_274(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_scarf,dresser_instance)
        else:
            exp(clothes_scarf,dresser_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,dresser_instance]=True
        close[dresser_instance,clothes_scarf]=True
    

behavior find_cup_2133_around_pot_2138(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(cup,pot_instance)
        else:
            exp(cup,pot_instance)
    eff:
        unknown[cup]=False
        close[cup,pot_instance]=True
        close[pot_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior achieve_boiled_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on to boil the egg

behavior ensure_pot_filled_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve(has_water(pot))
        # Make sure the pot is filled with water

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item

        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        ensure_pot_filled_with_water(pot, faucet)
        achieve_boiled_egg(egg, pot, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior achieve_boiled_egg(egg:item, pot:item, stove:item):
    body:
        achieve_once inside(egg, pot)
        # Place the egg inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on to boil the egg

behavior ensure_pot_filled_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve(has_water(pot))
        # Make sure the pot is filled with water

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg item

        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        ensure_pot_filled_with_water(pot, faucet)
        achieve_boiled_egg(egg, pot, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_78)putin_executor(food_egg_2092, pot_78)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_78)putin_executor(food_egg_2092, pot_78)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_egg_2092, pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. pot_78 is close food_egg_2092. food_egg_2092 is inside pot_78. food_egg_2092 is close pot_78. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_onion_2104_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_vegetable_or_lemon(x: item):
    # This function checks if an item is a vegetable or a lemon
    return is_food_vegetable(x) or is_food_lemon(x)

behavior prepare_and_clean(vegetable_or_lemon: item):
    body:
        observe(vegetable_or_lemon, "Determine if the item is clean")
        if dirty(vegetable_or_lemon):
            wash(vegetable_or_lemon)

behavior __goal__():
    body:
        foreach x: item:
            if is_vegetable_or_lemon(x):
                prepare_and_clean(x)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_vegetable_or_lemon(x: item):
    # This function checks if an item is a vegetable or a lemon
    return is_food_vegetable(x) or is_food_lemon(x)

behavior prepare_and_clean(vegetable_or_lemon: item):
    body:
        observe(vegetable_or_lemon, "Determine if the item is clean")
        if dirty(vegetable_or_lemon):
            wash(vegetable_or_lemon)

behavior __goal__():
    body:
        foreach x: item:
            if is_vegetable_or_lemon(x):
                prepare_and_clean(x)

##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2100)obs(food_lemon_2100, Determine if the item is clean)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Determine if the item is clean)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(food_lemon_2100)
Robot find: Robot is close to the food_lemon_2100. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_lemon_2100, Determine if the item is clean)
Get this information:  food_lemon_2100 is inside dining_room_41. food_lemon_2100 is inside fridge_126. food_lemon_2100 is close to fridge_126. food_lemon_2100 is close to character_240. food_lemon_2100 is CLEAN.
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the fridge_126. Robot is close to the food_vegetable_2113. 
##############################
From agent.py
obs(food_vegetable_2113, Determine if the item is clean)
Get this information:  food_vegetable_2113 is inside dining_room_41. food_vegetable_2113 is inside fridge_126. food_vegetable_2113 is close to fridge_126. food_vegetable_2113 is close to character_240. food_vegetable_2113 is DIRTY.
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the fridge_126. Robot is close to the food_vegetable_2113. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_vegetable_2113 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_mat_284_around_orchid_285(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind orchid_instance:item where:
            is_orchid(orchid_instance) and id[orchid_instance]==285
        achieve close_char(char,orchid_instance)
        if can_open(orchid_instance):
            achieve_once open(orchid_instance)
            exp(mat,orchid_instance)
        else:
            exp(mat,orchid_instance)
    eff:
        unknown[mat]=False
        close[mat,orchid_instance]=True
        close[orchid_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior mix_ingredients_in_bowl(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the boiled egg item

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon item

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables item

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        mix_ingredients_in_bowl(egg, lemon, vegetables, bowl)
        # Mix the boiled egg, lemon, and vegetables in the bowl to make the salad
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior mix_ingredients_in_bowl(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the boiled egg item

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon item

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables item

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        mix_ingredients_in_bowl(egg, lemon, vegetables, bowl)
        # Mix the boiled egg, lemon, and vegetables in the bowl to make the salad
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2141)putin_executor(food_egg_2092, bowl_2141)walk_executor(food_lemon_2100)grab_executor(food_lemon_2100)walk_executor(bowl_2141)putin_executor(food_lemon_2100, bowl_2141)putin_executor(food_vegetable_2113, bowl_2141)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_egg_2092. Robot is close to the pot_78. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_egg_2092. Robot is close to the pot_78. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_egg_2092. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_egg_2092, bowl_2141)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_egg_2092. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. food_egg_2092 is inside bowl_2141. bowl_2141 is close food_egg_2092. food_egg_2092 is close bowl_2141. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(food_lemon_2100)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_lemon_2100. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_lemon_2100)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_lemon_2100. Robot is close to the fridge_126. Grabbing food_lemon_2100 by left hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_lemon_2100. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_lemon_2100, bowl_2141)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_lemon_2100. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. food_lemon_2100 is inside bowl_2141. food_lemon_2100 is close bowl_2141. bowl_2141 is close food_lemon_2100. food_lemon_2100 released by left hand. 
##############################
From agent.py
putin_executor(food_vegetable_2113, bowl_2141)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_lemon_2100. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. food_vegetable_2113 is inside bowl_2141. food_vegetable_2113 is close bowl_2141. bowl_2141 is close food_vegetable_2113. food_vegetable_2113 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a bowl of egg salad with boiled egg, lemon, and vegetables.
Action History:
['walk_executor(faucet_20)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(faucet_20)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(faucet_20)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(faucet_20)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(pot_78)', 'putin_executor(food_egg_2092, pot_78)', 'walk_executor(food_lemon_2100)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_vegetable_2113)', 'switchoff_executor(faucet_20)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(bowl_2141)', 'putin_executor(food_egg_2092, bowl_2141)', 'walk_executor(food_lemon_2100)', 'grab_executor(food_lemon_2100)', 'walk_executor(bowl_2141)', 'putin_executor(food_lemon_2100, bowl_2141)', 'putin_executor(food_vegetable_2113, bowl_2141)']
Time info:
Time consume: 398 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 131
goal generate times: 8
goal correct times: 0
action_num: 37

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 21 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
