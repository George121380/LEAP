From agent.py
Reset goals: The sub-goals are: 
['1. Find the book in the home office.', '2. Put the book on the coffee table in the home office.', '3. Open the window in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_home_office_319(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(book,home_office_instance)
        else:
            exp(book,home_office_instance)
    eff:
        unknown[book]=False
        close[book,home_office_instance]=True
        close[home_office_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book(book:item, home_office:item):
    body:
        achieve_once inside(book, home_office)
        observe(book, "Locate the book in the home office")
        
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book item

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
            
        find_book(book, home_office)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_home_office_319(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(book,home_office_instance)
        else:
            exp(book,home_office_instance)
    eff:
        unknown[book]=False
        close[book,home_office_instance]=True
        close[home_office_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_book(book:item):
    body:
        observe(book, "Determine the current location of the book")

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book item

        locate_book(book)
        # Find the book in the home office

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior locate_book(book:item):
    body:
        observe(book, "Determine the current location of the book")

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book item

        locate_book(book)
        # Find the book in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(home_office_319)exp(book_2066, home_office_319)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Determine the current location of the book)
##############################
From agent.py
walk_executor(home_office_319)

##############################
From agent.py
exp(book_2066, home_office_319)
Fail to find book_2066 around home_office_319. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Determine the current location of the book)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: drawing_402, drawing_403, drawing_404, book_2066, book_2067, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Determine the current location of the book)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
open_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. book_2066 is opened. 
##############################
From agent.py
obs(book_2066, Determine the current location of the book)
Get this information:  book_2066 is close to bookshelf_354. book_2066 is close to character_65. book_2066 is on bookshelf_354. book_2066 is inside home_office_319. book_2066 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_mousepad_167(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mat,mousepad_instance)
        else:
            exp(mat,mousepad_instance)
    eff:
        unknown[mat]=False
        close[mat,mousepad_instance]=True
        close[mousepad_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book item

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        foreach table: item:
            if is_coffee_table(table) and inside(table, home_office):
                # Identify the coffee table in the home office
                place_book_on_table(book, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book item

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        foreach table: item:
            if is_coffee_table(table) and inside(table, home_office):
                # Identify the coffee table in the home office
                place_book_on_table(book, table)

##############################
From agent.py-> find a plan in act()
grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. coffee_table_2068 is close book_2066. book_2066 is close coffee_table_2068. book_2066 is on coffee_table_2068. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior open_window(window:item):
    body:
        achieve_once open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind window: item where:
            is_window(window) and inside(window, home_office)
        open_window(window)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior open_window(window:item):
    body:
        achieve_once open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind window: item where:
            is_window(window) and inside(window, home_office)
        open_window(window)

##############################
From agent.py-> find a plan in act()
walk_executor(window_348)open_executor(window_348)
##############################
From agent.py
walk_executor(window_348)
Robot find: drawing_400, mat_401, pillow_405, Robot is close to the window_348. 
##############################
From agent.py
open_executor(window_348)
Robot find: Robot is close to the window_348. window_348 is opened. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find a book and put it on the coffe table in home office. Then open the window in the home office.
Action History:
['walk_executor(home_office_319)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'open_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2066, coffee_table_2068)', 'walk_executor(window_348)', 'open_executor(window_348)']
Time info:
Time consume: 99 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 8
goal generate times: 4
goal correct times: 0
action_num: 10

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
