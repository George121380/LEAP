From agent.py
Reset goals: The sub-goals are: 
['1. Find the ingredients for the fish soup and clean them.', '2. Put the cleaned ingredients into a pot with water.', '3. Cook the ingredients in the pot until the soup is ready.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_carrot_2086_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_onion_2009_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_clean_ingredient(ingredient:item):
    body:
        observe(ingredient, "Check if the ingredient is dirty")
        if dirty(ingredient):
            wash(ingredient)

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_food_fish(ingredient) or is_food_vegetable(ingredient):
                find_and_clean_ingredient(ingredient)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_and_clean_ingredient(ingredient:item):
    body:
        observe(ingredient, "Check if the ingredient is dirty")
        if dirty(ingredient):
            wash(ingredient)

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_food_fish(ingredient) or is_food_vegetable(ingredient):
                find_and_clean_ingredient(ingredient)
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)obs(food_fish_2093, Check if the ingredient is dirty)walk_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Check if the ingredient is dirty)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
obs(food_fish_2093, Check if the ingredient is dirty)grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)walk_executor(food_vegetable_2113)obs(food_vegetable_2113, Check if the ingredient is dirty)grab_executor(food_vegetable_2113)walk_executor(kitchen_counter_119)put_executor(food_fish_2093, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(food_vegetable_2113)switchoff_executor(faucet_121)
##############################
From agent.py
obs(food_fish_2093, Check if the ingredient is dirty)
Get this information:  food_fish_2093 is inside dining_room_41. food_fish_2093 is inside fridge_126. food_fish_2093 is close to fridge_126. food_fish_2093 is close to character_240. food_fish_2093 is DIRTY.
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_fish_2093 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_vegetable_2113, Check if the ingredient is dirty)
Get this information:  food_vegetable_2113 is inside dining_room_41. food_vegetable_2113 is inside fridge_126. food_vegetable_2113 is close to fridge_126. food_vegetable_2113 is close to character_240. food_vegetable_2113 is DIRTY.
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_fish_2093, kitchen_counter_119)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close food_fish_2093. food_fish_2093 is close kitchen_counter_119. food_fish_2093 is on kitchen_counter_119. food_fish_2093 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_121)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. faucet_121 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. food_vegetable_2113 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_121)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. faucet_121 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_bowl_2140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_carrot,bowl_instance)
        else:
            exp(food_carrot,bowl_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,bowl_instance]=True
        close[bowl_instance,food_carrot]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_ingredients_to_pot(ingredient:item, pot:item):
    body:
        achieve_once inside(ingredient, pot)
        # Add the cleaned ingredient to the pot

behavior ensure_water_in_pot(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and clean(fish)
        # Select the cleaned fish

        bind vegetable: item where:
            is_food_vegetable(vegetable) and clean(vegetable)
        # Select the cleaned vegetable

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        add_ingredients_to_pot(fish, pot)
        add_ingredients_to_pot(vegetable, pot)
        ensure_water_in_pot(pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_ingredients_to_pot(ingredient:item, pot:item):
    body:
        achieve_once inside(ingredient, pot)
        # Add the cleaned ingredient to the pot

behavior ensure_water_in_pot(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and clean(fish)
        # Select the cleaned fish

        bind vegetable: item where:
            is_food_vegetable(vegetable) and clean(vegetable)
        # Select the cleaned vegetable

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        add_ingredients_to_pot(fish, pot)
        add_ingredients_to_pot(vegetable, pot)
        ensure_water_in_pot(pot)

##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2093)walk_executor(pot_78)putin_executor(food_fish_2093, pot_78)putin_executor(food_vegetable_2113, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
putin_executor(food_fish_2093, pot_78)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the oven_127. pot_78 is close food_fish_2093. food_fish_2093 is inside pot_78. food_fish_2093 is close pot_78. food_fish_2093 released by right hand. 
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_78)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the oven_127. food_vegetable_2113 is inside pot_78. pot_78 is close food_vegetable_2113. food_vegetable_2113 is close pot_78. food_vegetable_2113 released by left hand. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The ingredients have been placed into the pot, but the pot has not been filled with water. Ensure the pot is filled with water to complete the sub-task.
##############################
From agent.py
Human Instruction: The ingredients have been placed into the pot, but the pot has not been filled with water. Ensure the pot is filled with water to complete the sub-task.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_fish_2093 around fridge_126.
Action 5: Observe around food_fish_2093 with the question of Check if the ingredient is dirty.
Action 6: Grab food_fish_2093.
Action 7: Walk to faucet_20.
Action 8: Switch on faucet_20.
Action 9: Wash food_fish_2093.
Action 10: Switch off faucet_20.
Action 11: Walk to food_vegetable_2113.
Action 12: Observe around food_vegetable_2113 with the question of Check if the ingredient is dirty.
Action 13: Grab food_vegetable_2113.
Action 14: Walk to kitchen_counter_119.
Action 15: Put food_fish_2093 on kitchen_counter_119.
Action 16: Switch on faucet_121.
Action 17: Wash food_vegetable_2113.
Action 18: Switch off faucet_121.
Action 19: Grab food_fish_2093.
Action 20: Walk to pot_78.
Action 21: Put food_fish_2093 into pot_78.
Action 22: Put food_vegetable_2113 into pot_78.
Action 23: Grab pot_78.
Action 24: Walk to faucet_20.
Action 25: Switch on faucet_20.
Action 26: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_hanger_292_around_ironing_board_2144(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(hanger,ironing_board_instance)
        else:
            exp(hanger,ironing_board_instance)
    eff:
        unknown[hanger]=False
        close[hanger,ironing_board_instance]=True
        close[ironing_board_instance,hanger]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior put_ingredients_in_pot(pot:item, fish:item, vegetable:item):
    body:
        achieve_once inside(fish, pot)
        achieve_once inside(vegetable, pot)
        # Put the fish and vegetable into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2093
        # Select the fish with ID 2093

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2113
        # Select the vegetable with ID 2113

        fill_pot_with_water(pot, faucet)
        put_ingredients_in_pot(pot, fish, vegetable)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_269(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot where ingredients have been placed

        fill_pot_with_water(pot)
        # Fill the pot with water to complete the subtask

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_pot_78_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_pot_contains_ingredients_and_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot with ingredients

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        ensure_pot_contains_ingredients_and_water(pot, faucet)
        # Ensure the pot contains ingredients and is filled with water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior ensure_ingredients_in_pot(pot:item, ingredient1:item, ingredient2:item):
    body:
        achieve_once inside(ingredient1, pot)
        achieve_once inside(ingredient2, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select a pot with ID 78

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind food_fish: item where:
            is_food_fish(food_fish) and id[food_fish] == 2093
        # Select the fish ingredient

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable] == 2113
        # Select the vegetable ingredient

        ensure_ingredients_in_pot(pot, food_fish, food_vegetable)
        # Ensure the ingredients are inside the pot

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot) 
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot item 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select a faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet 20

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the cleaned ingredients into a pot with water." ?
Answer: Find a pot and fill it with water. Then put the fish in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_tea_2066_around_cupboard_118(tea:item):
    goal: not unknown(tea)
    body:
        assert is_tea(tea)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea,cupboard_instance)
        else:
            exp(tea,cupboard_instance)
    eff:
        unknown[tea]=False
        close[tea,cupboard_instance]=True
        close[cupboard_instance,tea]=True
    

#exp_behavior_end

#goal_representation
behavior find_pot_and_fill_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot (pot_78 in this scenario)
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select faucet (faucet_20 in this scenario)

        find_pot_and_fill_with_water(pot, faucet)
        # Find the pot and fill it with water using the faucet
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_pot_78_around_light_212(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(pot,light_instance)
        else:
            exp(pot,light_instance)
    eff:
        unknown[pot]=False
        close[pot,light_instance]=True
        close[light_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior add_ingredients_to_pot(pot:item, fish:item, vegetable:item):
    body:
        achieve_once inside(fish, pot)
        # Put the fish into the pot
        achieve_once inside(vegetable, pot)
        # Put the vegetable into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind fish: item where:
            is_food_fish(fish)
        # Select food item fish

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select food item vegetable

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water
        
        add_ingredients_to_pot(pot, fish, vegetable)
        # Add cleaned fish and vegetables into the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_269(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_pot_78_around_faucet_121(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(pot,faucet_instance)
        else:
            exp(pot,faucet_instance)
    eff:
        unknown[pot]=False
        close[pot,faucet_instance]=True
        close[faucet_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def fill_pot_with_water(pot:item):
    # Function to ensure the pot is filled with water
    achieve has_water(pot)

behavior ensure_ingredients_in_pot_and_filled_with_water(food_fish:item, food_vegetable:item, pot:item, faucet:item):
    body:
        achieve_once inside(food_fish, pot)
        # Ensure the fish is in the pot
        achieve_once inside(food_vegetable, pot)
        # Ensure the vegetable is in the pot
        achieve_once close_char(char, faucet)
        # Approach the faucet for water
        fill_pot_with_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind food_fish: item where:
            is_food_fish(food_fish)
        # Select the cleaned fish

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        # Select the cleaned vegetable

        bind pot: item where:
            is_pot(pot) and inside(food_fish, pot) and inside(food_vegetable, pot)
        # Select the pot with fish and vegetable already inside

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        ensure_ingredients_in_pot_and_filled_with_water(food_fish, food_vegetable, pot, faucet)
        # Ensure all ingredients are in the pot and it is filled with water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_cutting_board_2123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(wooden_spoon,cutting_board_instance)
        else:
            exp(wooden_spoon,cutting_board_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cutting_board_instance]=True
        close[cutting_board_instance,wooden_spoon]=True
    

behavior find_pot_78_around_light_212(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(pot,light_instance)
        else:
            exp(pot,light_instance)
    eff:
        unknown[pot]=False
        close[pot,light_instance]=True
        close[light_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) # Ensure the character is close to the faucet
        achieve has_water(pot) # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot in which the ingredients are placed
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select faucet to fill the pot with water

        fill_pot_with_water(pot, faucet)
        # Fill the selected pot with water using the identified faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_269(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_tea_2066_around_bowl_2140(tea:item):
    goal: not unknown(tea)
    body:
        assert is_tea(tea)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(tea,bowl_instance)
        else:
            exp(tea,bowl_instance)
    eff:
        unknown[tea]=False
        close[tea,bowl_instance]=True
        close[bowl_instance,tea]=True
    

behavior find_pot_78_around_light_212(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(pot,light_instance)
        else:
            exp(pot,light_instance)
    eff:
        unknown[pot]=False
        close[pot,light_instance]=True
        close[light_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Bind the pot into which the ingredients need to be placed

        fill_pot_with_water(pot)
        # Fill the pot with water to complete the task goal
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_tvstand_273(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cat,tvstand_instance)
        else:
            exp(cat,tvstand_instance)
    eff:
        unknown[cat]=False
        close[cat,tvstand_instance]=True
        close[tvstand_instance,cat]=True
    

behavior find_hanger_292_around_trashcan_99(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(hanger,trashcan_instance)
        else:
            exp(hanger,trashcan_instance)
    eff:
        unknown[hanger]=False
        close[hanger,trashcan_instance]=True
        close[trashcan_instance,hanger]=True
    

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior put_ingredients_in_pot(food_fish:item, food_vegetable:item, pot:item):
    body:
        achieve_once inside(food_fish, pot)
        # Put the food fish into the pot
        achieve_once inside(food_vegetable, pot)
        # Put the vegetables into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind food_fish: item where:
            is_food_fish(food_fish)
        # Select the fish

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        # Select the vegetables

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        put_ingredients_in_pot(food_fish, food_vegetable, pot)
        # Put the cleaned fish and vegetables into the pot with water
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot_and_put_ingredients(pot:item, faucet:item, fish:item, vegetable:item):
    body:
        achieve_once inside(fish, pot)
        achieve_once inside(vegetable, pot)
        # Ensure ingredients are inside the pot
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Bind the specific pot

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Bind the specific faucet

        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2093
        # Select the fish

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2113
        # Select the vegetable

        add_water_to_pot_and_put_ingredients(pot, faucet, fish, vegetable)
        # Ensure ingredients are inside the pot, and pot is filled with water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_294_around_washing_machine_2079(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(hanger,washing_machine_instance)
        else:
            exp(hanger,washing_machine_instance)
    eff:
        unknown[hanger]=False
        close[hanger,washing_machine_instance]=True
        close[washing_machine_instance,hanger]=True
    

behavior find_pot_78_around_light_212(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(pot,light_instance)
        else:
            exp(pot,light_instance)
    eff:
        unknown[pot]=False
        close[pot,light_instance]=True
        close[light_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot) 
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        bind fish: item where:
            is_food_fish(fish) and id[fish]==2093
        # Select the fish with ID 2093

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable]==2113
        # Select the vegetable with ID 2113

        achieve_once inside(fish, pot)
        # Put the fish in the pot

        achieve_once inside(vegetable, pot)
        # Put the vegetable in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior ensure_ingredients_in_pot(pot:item, fish:item, vegetable:item):
    body:
        achieve_once inside(fish, pot)
        # Put the fish inside the pot
        achieve_once inside(vegetable, pot)
        # Put the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind fish: item where:
            is_food_fish(fish) and id[fish] == 2093
        # Select the fish with ID 2093

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2113
        # Select the vegetable with ID 2113

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        ensure_ingredients_in_pot(pot, fish, vegetable)
        fill_pot_with_water(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior add_ingredients_to_pot(ingredients:list, pot:item):
    body:
        foreach ingredient:item:
            achieve_once inside(ingredient, pot)
        # Add the cleaned ingredients to the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        bind food_fish: item where:
            is_food_fish(food_fish) and clean(food_fish)
        # Select cleaned food fish

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and clean(food_vegetable)
        # Select cleaned food vegetable

        symbol ingredients = [food_fish, food_vegetable]
        # List of ingredients to add to the pot

        add_ingredients_to_pot(ingredients, pot)
        # Add the cleaned ingredients to the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior place_ingredients_in_pot(ingredients:list[item], pot:item):
    body:
        foreach ingredient: item:
            if ingredient in ingredients:
                achieve_once inside(ingredient, pot)
        # Place each ingredient inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the specific pot with ID 78

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetable

        fill_pot_with_water(pot)
        # Fill pot with water

        place_ingredients_in_pot([fish, vegetable], pot)
        # Place the ingredients into the pot

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the cleaned ingredients into a pot with water." ?
Answer: Clean the fish by washing it in a sink. Then cut the fish into pieces. Find a pot and fill it with water. Put the fish in the pot.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Cut the fish into pieces.', '2. Find a pot and fill it with water.', '3. Put the fish in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_cutting_board_present():
    # Function to check if a cutting board is available
    symbol has_cutting_board = exists item: item : (is_cutting_board(item))
    return has_cutting_board

behavior cut_fish(fish:item, knife:item, cutting_board:item):
    body:
        achieve_once on(fish, cutting_board)
        # Place the fish on the cutting board
        achieve_once cut(fish)
        # Cut the fish into pieces using the knife

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        if is_cutting_board_present():
            bind cutting_board: item where:
                is_cutting_board(cutting_board)
            # Select a cutting board
            cut_fish(fish, knife, cutting_board)

        else:
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Check availability of cutting board for cutting fish")
                    
        fill_pot_with_water(pot, faucet)
        # Ensure the pot has water

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_cutting_board_present():
    # Function to check if a cutting board is available
    symbol has_cutting_board = exists item: item : (is_cutting_board(item))
    return has_cutting_board

behavior cut_fish(fish:item, knife:item, cutting_board:item):
    body:
        achieve_once on(fish, cutting_board)
        # Place the fish on the cutting board
        achieve_once cut(fish)
        # Cut the fish into pieces using the knife

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        if is_cutting_board_present():
            bind cutting_board: item where:
                is_cutting_board(cutting_board)
            # Select a cutting board
            cut_fish(fish, knife, cutting_board)

        else:
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Check availability of cutting board for cutting fish")
                    
        fill_pot_with_water(pot, faucet)
        # Ensure the pot has water

##############################
From agent.py-> find a plan in act()
walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(cutting_board_2123)put_executor(food_fish_2093, cutting_board_2123)exp(knife_2122, cutting_board_2123)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_fish_2093)cut_executor(food_fish_2093)
##############################
From agent.py
walk_executor(food_fish_2093)
Robot find: Robot is close to the pot_78. Robot is close to the food_fish_2093. 
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the pot_78. Robot is close to the food_fish_2093. Grabbing food_fish_2093 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the pot_78. Robot is close to the food_fish_2093. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_fish_2093, cutting_board_2123)
Robot find: Robot is close to the pot_78. Robot is close to the food_fish_2093. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_fish_2093. food_fish_2093 is close cutting_board_2123. food_fish_2093 is on cutting_board_2123. food_fish_2093 released by left hand. 
##############################
From agent.py
exp(knife_2122, cutting_board_2123)
Fail to find knife_2122 around cutting_board_2123. 
##############################
From agent.py-> find a plan in act()
walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_fish_2093)cut_executor(food_fish_2093)
##############################
From agent.py
walk_executor(knifeblock_76)
Robot find: Robot is close to the pot_78. Robot is close to the knifeblock_76. 
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Fail to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(knife_2122, cupboard_118)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_fish_2093)cut_executor(food_fish_2093)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the pot_78. Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the pot_78. Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(knife_2122, cupboard_118)
Fail to find knife_2122 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2037)walk_executor(food_fish_2093)cut_executor(food_fish_2093)
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the pot_78. Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. Grabbing knife_2037 by left hand. 
##############################
From agent.py
walk_executor(food_fish_2093)
Robot find: Robot is close to the pot_78. Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_fish_2093. 
##############################
From agent.py
cut_executor(food_fish_2093)
Robot find: Robot is close to the pot_78. Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_fish_2093. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        find_and_fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        find_and_fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the knife_2037. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot found the pot (pot_78) and moved to the faucet (faucet_20), but the pot has not been filled with water. Ensure that the robot uses the faucet to fill the pot with water.
##############################
From agent.py
Human Instruction: The robot found the pot (pot_78) and moved to the faucet (faucet_20), but the pot has not been filled with water. Ensure that the robot uses the faucet to fill the pot with water.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_fish_2093 around fridge_126.
Action 5: Observe around food_fish_2093 with the question of Check if the ingredient is dirty.
Action 6: Grab food_fish_2093.
Action 7: Walk to faucet_20.
Action 8: Switch on faucet_20.
Action 9: Wash food_fish_2093.
Action 10: Switch off faucet_20.
Action 11: Walk to food_vegetable_2113.
Action 12: Observe around food_vegetable_2113 with the question of Check if the ingredient is dirty.
Action 13: Grab food_vegetable_2113.
Action 14: Walk to kitchen_counter_119.
Action 15: Put food_fish_2093 on kitchen_counter_119.
Action 16: Switch on faucet_121.
Action 17: Wash food_vegetable_2113.
Action 18: Switch off faucet_121.
Action 19: Grab food_fish_2093.
Action 20: Walk to pot_78.
Action 21: Put food_fish_2093 into pot_78.
Action 22: Put food_vegetable_2113 into pot_78.
Action 23: Grab pot_78.
Action 24: Walk to faucet_20.
Action 25: Switch on faucet_20.
Action 26: Switch off faucet_20.
Action 27: Walk to food_fish_2093.
Action 28: Grab food_fish_2093.
Action 29: Walk to cutting_board_2123.
Action 30: Put food_fish_2093 on cutting_board_2123.
Action 31: look for knife_2122 around cutting_board_2123.
Action 32: Walk to knifeblock_76.
Action 33: look for knife_2122 around knifeblock_76.
Action 34: Walk to cupboard_118.
Action 35: Open cupboard_118.
Action 36: look for knife_2122 around cupboard_118.
Action 37: Grab knife_2037.
Action 38: Walk to food_fish_2093.
Action 39: Cut food_fish_2093.
Action 40: Walk to faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_washing_machine_2079(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cat,washing_machine_instance)
        else:
            exp(cat,washing_machine_instance)
    eff:
        unknown[cat]=False
        close[cat,washing_machine_instance]=True
        close[washing_machine_instance,cat]=True
    

behavior find_pot_78_around_window_2156(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==2156
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(pot,window_instance)
        else:
            exp(pot,window_instance)
    eff:
        unknown[pot]=False
        close[pot,window_instance]=True
        close[window_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_oil_2149_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_pot_78_around_light_212(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(pot,light_instance)
        else:
            exp(pot,light_instance)
    eff:
        unknown[pot]=False
        close[pot,light_instance]=True
        close[light_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot) 
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet) 
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) # Ensure the character is close to the faucet
        achieve has_water(pot) # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet) 
        # Fill the pot with water using faucet 20

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_trashcan_99(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(cat,trashcan_instance)
        else:
            exp(cat,trashcan_instance)
    eff:
        unknown[cat]=False
        close[cat,trashcan_instance]=True
        close[trashcan_instance,cat]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using faucet 20

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_pot_78_around_window_2156(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==2156
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(pot,window_instance)
        else:
            exp(pot,window_instance)
    eff:
        unknown[pot]=False
        close[pot,window_instance]=True
        close[window_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. find a pot and fill it with water." ?
Answer: Find a pot and fill it with water.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_box_2038_around_cupboard_117(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(box,cupboard_instance)
        else:
            exp(box,cupboard_instance)
    eff:
        unknown[box]=False
        close[box,cupboard_instance]=True
        close[cupboard_instance,box]=True
    

behavior find_pot_2040_around_dresser_274(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(pot,dresser_instance)
        else:
            exp(pot,dresser_instance)
    eff:
        unknown[pot]=False
        close[pot,dresser_instance]=True
        close[dresser_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        achieve close_char(char, pot)
        # Ensure the character is close to the pot

        achieve close_char(char, faucet)
        # Ensure the character is close to the faucet

        achieve has_water(pot)
        # Fill the pot with water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_light_212(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(pot,light_instance)
        else:
            exp(pot,light_instance)
    eff:
        unknown[pot]=False
        close[pot,light_instance]=True
        close[light_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_pot_filled_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Select faucet with ID 20

        ensure_pot_filled_with_water(pot, faucet)
        # Ensure the pot is filled with water using the faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Ensure that the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        #Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        #Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_kitchen_counter_122(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_headset_2146_around_computer_276(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the specified faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once inhand(pot)
        # Hold the pot
        achieve has_water(pot)
        # Note: The previous actions ensure pot is filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the selected faucet

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_208_around_bed_197(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_oil_2149_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_pot_2040_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Ensure the pot is filled with water using faucet 20

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_pencil_2020_around_desk_272(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_pot_filled_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the specific pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the specific faucet with ID 20

        ensure_pot_filled_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_hanger_292_around_basket_for_clothes_2078(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(hanger,basket_for_clothes_instance)
        else:
            exp(hanger,basket_for_clothes_instance)
    eff:
        unknown[hanger]=False
        close[hanger,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,hanger]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78 that needs filling

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Select the faucet with ID 20

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve close_char(char, pot)
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        ensure close_char(char, pot)
        ensure close_char(char, faucet)
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_fish_2093)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_fish_2093)', 'switchoff_executor(faucet_20)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(kitchen_counter_119)', 'put_executor(food_fish_2093, kitchen_counter_119)', 'switchon_executor(faucet_121)', 'wash_executor(food_vegetable_2113)', 'switchoff_executor(faucet_121)', 'grab_executor(food_fish_2093)', 'walk_executor(pot_78)', 'putin_executor(food_fish_2093, pot_78)', 'putin_executor(food_vegetable_2113, pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(food_fish_2093)', 'grab_executor(food_fish_2093)', 'walk_executor(cutting_board_2123)', 'put_executor(food_fish_2093, cutting_board_2123)', 'walk_executor(knifeblock_76)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'grab_executor(knife_2037)', 'walk_executor(food_fish_2093)', 'cut_executor(food_fish_2093)', 'walk_executor(faucet_20)']
Time info:
Time consume: 782 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 161
goal generate times: 40
goal correct times: 0
action_num: 34

Task complete rate:
Keystate: k1 - Requires: 9 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
