From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Cool the vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_cutting_board_2051(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_vegetable,cutting_board_instance)
        else:
            exp(food_vegetable,cutting_board_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cutting_board_instance]=True
        close[cutting_board_instance,food_vegetable]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        fill_pot_with_water(pot)
        # Fill the pot with water

        boil_vegetables(pot, stove, vegetables)
        # Boil the vegetables in the pot on the stove
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        fill_pot_with_water(pot)
        # Fill the pot with water

        boil_vegetables(pot, stove, vegetables)
        # Boil the vegetables in the pot on the stove
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)exp(food_vegetable_2041, cutting_board_2051)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)exp(food_vegetable_2041, cutting_board_2051)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the pot_2069. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_vegetable_2041, cutting_board_2051)
Fail to find food_vegetable_2041 around cutting_board_2051. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_vegetable_2041, fridge_289)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_vegetable_2041, fridge_289)
Find food_vegetable_2041. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2041)putin_executor(food_vegetable_2041, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. food_vegetable_2041 is inside pot_2069. food_vegetable_2041 is close pot_2069. pot_2069 is close food_vegetable_2041. food_vegetable_2041 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot must be filled with water as part of the 'fill_pot_with_water' behavior to accomplish the task of boiling the vegetables. The actions taken indicate that the faucet was turned on and off, but there is no explicit confirmation that the pot was filled with water. You need to fill the pot with water before boiling the vegetables on the stove.
##############################
From agent.py
Human Instruction: The pot must be filled with water as part of the 'fill_pot_with_water' behavior to accomplish the task of boiling the vegetables. The actions taken indicate that the faucet was turned on and off, but there is no explicit confirmation that the pot was filled with water. You need to fill the pot with water before boiling the vegetables on the stove.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to cutting_board_2051.
Action 10: look for food_vegetable_2041 around cutting_board_2051.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_vegetable_2041 around fridge_289.
Action 15: Grab food_vegetable_2041.
Action 16: Put food_vegetable_2041 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_mousepad_414(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mat,mousepad_instance)
        else:
            exp(mat,mousepad_instance)
    eff:
        unknown[mat]=False
        close[mat,mousepad_instance]=True
        close[mousepad_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once inside(food_vegetable, pot)
        # Ensure vegetables are placed inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable] == 2041
        # Select the vegetables with ID 2041
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        fill_pot_with_water(pot)
        boil_vegetables(pot, stove)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

behavior find_mat_22_around_fryingpan_2083(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(mat,fryingpan_instance)
        else:
            exp(mat,fryingpan_instance)
    eff:
        unknown[mat]=False
        close[mat,fryingpan_instance]=True
        close[fryingpan_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior apply_heat(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Place the pot on the stove and turn it on to boil the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot) # Ensure the pot is filled with water
        apply_heat(pot, stove) # Boil the water using the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve has_water(pot)

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot)

        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve has_water(pot)

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot)

        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water before boiling the vegetables on the stove. Despite the faucet being turned on and off, there is no confirmation that the pot was actually filled with water.
##############################
From agent.py
Human Instruction: The pot needs to be filled with water before boiling the vegetables on the stove. Despite the faucet being turned on and off, there is no confirmation that the pot was actually filled with water.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to cutting_board_2051.
Action 10: look for food_vegetable_2041 around cutting_board_2051.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_vegetable_2041 around fridge_289.
Action 15: Grab food_vegetable_2041.
Action 16: Put food_vegetable_2041 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables_in_pot(pot: item, stove: item, vegetables: item):
    body:
        achieve_once inside(vegetables, pot)
        # Place vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        fill_pot_with_water(pot, faucet)
        boil_vegetables_in_pot(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_237_around_sink_231(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(mat,sink_instance)
        else:
            exp(mat,sink_instance)
    eff:
        unknown[mat]=False
        close[mat,sink_instance]=True
        close[sink_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot)
        # Ensure vegetables are inside the pot

        boil_vegetables(pot, stove)
        # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select a vegetable item

        fill_pot_with_water(pot) # Fill the pot with water
        boil_vegetables(pot, stove, vegetables) # Boil the vegetables in the pot on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water_and_boil(pot:item, faucet:item, stove:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water_and_boil(pot, faucet, stove)
        # Fill the pot with water and boil on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_22_around_towel_rack_31(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(mat,towel_rack_instance)
        else:
            exp(mat,towel_rack_instance)
    eff:
        unknown[mat]=False
        close[mat,towel_rack_instance]=True
        close[towel_rack_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        fill_pot_with_water(pot)
        # Fill the pot with water
        boil_vegetables(pot, stove, vegetables)
        # Boil the vegetables using the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        # Add vegetables into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to boil

        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the vegetables." ?
Answer: Wash the vegetables. Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables in the pot. Then turn off the stove.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash the vegetables.', '2. Fill a pot with water and put it on the stove.', '3. Turn on the stove and put the vegetables in the pot.', '4. Turn off the stove and transfer the vegetables to a bowl to cool.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        wash(vegetables)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetable item

        wash_vegetables(vegetables)
        # Wash the vegetables

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_vegetables(vegetables:item):
    body:
        wash(vegetables)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetable item

        wash_vegetables(vegetables)
        # Wash the vegetables

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water_and_place_on_stove(pot:item, stove:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once has_water(pot)
        # Fill the pot with water
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot to be used

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water_and_place_on_stove(pot, stove, faucet)
        # Fill the pot with water and place it on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

behavior find_iron_2089_around_closetdrawer_158(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(iron,closetdrawer_instance)
        else:
            exp(iron,closetdrawer_instance)
    eff:
        unknown[iron]=False
        close[iron,closetdrawer_instance]=True
        close[closetdrawer_instance,iron]=True
    

behavior find_bowl_2072_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet item

        bind stove: item where:
            is_stove(stove)
        # Select a stove item

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once close_char(char, pot)
        # Ensure the character is close to the pot
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once close_char(char, pot)
        # Ensure the character is close to the pot
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot is filled with water. The actions completed so far do not confirm that water was placed into pot_2069. Make sure to fill the pot with water before proceeding to the next steps.
##############################
From agent.py
Human Instruction: You need to ensure the pot is filled with water. The actions completed so far do not confirm that water was placed into pot_2069. Make sure to fill the pot with water before proceeding to the next steps.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to cutting_board_2051.
Action 10: look for food_vegetable_2041 around cutting_board_2051.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_vegetable_2041 around fridge_289.
Action 15: Grab food_vegetable_2041.
Action 16: Put food_vegetable_2041 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to faucet_43.
Action 21: Walk to food_vegetable_2041.
Action 22: Grab food_vegetable_2041.
Action 23: Walk to faucet_43.
Action 24: Switch on faucet_43.
Action 25: Wash food_vegetable_2041.
Action 26: Switch off faucet_43.
Action 27: Walk to pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

behavior find_mat_173_around_trashcan_99(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(mat,trashcan_instance)
        else:
            exp(mat,trashcan_instance)
    eff:
        unknown[mat]=False
        close[mat,trashcan_instance]=True
        close[trashcan_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is filled with water before proceeding. Although the pot was moved to the faucet and the faucet was turned on and off, there are no actions confirming that the water was actually placed into pot_2069. Please fill the pot with water and then put it back on the stove.
##############################
From agent.py
Human Instruction: You need to ensure that the pot is filled with water before proceeding. Although the pot was moved to the faucet and the faucet was turned on and off, there are no actions confirming that the water was actually placed into pot_2069. Please fill the pot with water and then put it back on the stove.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to cutting_board_2051.
Action 10: look for food_vegetable_2041 around cutting_board_2051.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_vegetable_2041 around fridge_289.
Action 15: Grab food_vegetable_2041.
Action 16: Put food_vegetable_2041 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to faucet_43.
Action 21: Walk to food_vegetable_2041.
Action 22: Grab food_vegetable_2041.
Action 23: Walk to faucet_43.
Action 24: Switch on faucet_43.
Action 25: Wash food_vegetable_2041.
Action 26: Switch off faucet_43.
Action 27: Walk to pot_2069.
Action 28: Walk to faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_mat_237_around_home_office_319(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(mat,home_office_instance)
        else:
            exp(mat,home_office_instance)
    eff:
        unknown[mat]=False
        close[mat,home_office_instance]=True
        close[home_office_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the specific pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the specific faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the specific stove with ID 2065

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_236_around_wallshelf_235(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(mat,wallshelf_instance)
        else:
            exp(mat,wallshelf_instance)
    eff:
        unknown[mat]=False
        close[mat,wallshelf_instance]=True
        close[wallshelf_instance,mat]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot) # Ensure the pot is filled with water
        place_pot_on_stove(pot, stove) # Place the pot on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot filled with water on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def ensure_has_water(pot:item):
    # Function to ensure the pot has water
    symbol pot_has_water = has_water(pot)
    if not pot_has_water:
        achieve has_water(pot)

behavior fill_pot_with_water_and_place_on_stove(pot:item, faucet:item, stove:item):
    body:
        achieve_once close_char(char, faucet)
        ensure_has_water(pot)
        achieve_once close_char(char, stove)
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select stove with ID 2065
        
        fill_pot_with_water_and_place_on_stove(pot, faucet, stove)
        # Fill the pot with water and place it on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_wallshelf_234(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(mat,wallshelf_instance)
        else:
            exp(mat,wallshelf_instance)
    eff:
        unknown[mat]=False
        close[mat,wallshelf_instance]=True
        close[wallshelf_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the specific pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select the specific faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the specific stove with ID 2065

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water using the faucet

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. fill a pot with water and put it on the stove." ?
Answer: Fill a pot with water. Put the pot on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_237_around_cupboard_229(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, pot)
        # Ensure the character is close to the pot
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, pot)
        # Ensure the character is close to the pot
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)walk_executor(faucet_43)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot has not been filled with water. You need to ensure that water is actually put into pot_2069 by switching on the faucet while pot_2069 is appropriately positioned to catch the water, and then switch off the faucet. After that, place the pot back on the stove.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_closetdrawer_158(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pencil,closetdrawer_instance)
        else:
            exp(pencil,closetdrawer_instance)
    eff:
        unknown[pencil]=False
        close[pencil,closetdrawer_instance]=True
        close[closetdrawer_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_water_in_pot(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once close_char(char, pot)
        # Ensure the character is close to the pot
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior put_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables into the pot

behavior turn_on_stove_with_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the vegetables with ID 2041

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        ensure_water_in_pot(pot, faucet)
        # Ensure the pot is filled with water

        put_vegetables_in_pot(vegetables, pot)
        # Put the vegetables into the pot

        turn_on_stove_with_pot(pot, stove)
        # Turn on the stove with the pot on it

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_water_in_pot(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once close_char(char, pot)
        # Ensure the character is close to the pot
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior put_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables into the pot

behavior turn_on_stove_with_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the vegetables with ID 2041

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        ensure_water_in_pot(pot, faucet)
        # Ensure the pot is filled with water

        put_vegetables_in_pot(vegetables, pot)
        # Put the vegetables into the pot

        turn_on_stove_with_pot(pot, stove)
        # Turn on the stove with the pot on it

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the stove_2065. Robot is close to the pot_2069. food_vegetable_2041 is inside pot_2069. food_vegetable_2041 is close pot_2069. pot_2069 is close food_vegetable_2041. food_vegetable_2041 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is filled with water before proceeding. There are no actions confirming that the water was actually placed into pot_2069. Please fill the pot with water and then put it back on the stove.
##############################
From agent.py
Human Instruction: You need to ensure that the pot is filled with water before proceeding. There are no actions confirming that the water was actually placed into pot_2069. Please fill the pot with water and then put it back on the stove.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to cutting_board_2051.
Action 10: look for food_vegetable_2041 around cutting_board_2051.
Action 11: Walk to fridge_289.
Action 12: Switch off fridge_289.
Action 13: Open fridge_289.
Action 14: look for food_vegetable_2041 around fridge_289.
Action 15: Grab food_vegetable_2041.
Action 16: Put food_vegetable_2041 into pot_2069.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to faucet_43.
Action 21: Walk to food_vegetable_2041.
Action 22: Grab food_vegetable_2041.
Action 23: Walk to faucet_43.
Action 24: Switch on faucet_43.
Action 25: Wash food_vegetable_2041.
Action 26: Switch off faucet_43.
Action 27: Walk to pot_2069.
Action 28: Walk to faucet_43.
Action 29: Walk to pot_2069.
Action 30: Walk to faucet_43.
Action 31: Walk to pot_2069.
Action 32: Put food_vegetable_2041 into pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_stove_and_add_vegetables(stove:item, pot:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that is already filled with water
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)
        # Select clean vegetables

        turn_on_stove_and_add_vegetables(stove, pot, vegetables)
        # Turn on the stove and add the vegetables to the pot
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior turn_on_stove_and_boiled_vegetables(stove:item, pot:item, vegetables:item):
    body:
        achieve_once is_on(stove)
        # Ensure the stove is turned on
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the particular stove with ID 2065

        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the specific pot with ID 2069

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the specific food vegetables with ID 2041

        turn_on_stove_and_boiled_vegetables(stove, pot, vegetables)
        # Execute the behavior of turning on the stove and placing vegetables in the pot
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Ensure the vegetables are placed inside the pot

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the washed vegetables

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot Since the warning advised that the pot_2069 wasnt confirmed to have water, check for a pot that has water

        bind stove: item where:
            is_stove(stove)
        # Select the stove item
        
        put_vegetables_in_pot(vegetables, pot)
        # Put the vegetables in the pot

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_stove_and_place_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve has_water(pot) # Ensure the pot has water as per instruction
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) and id[pot] == 2069
        # Select pot with ID 2069 that has water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove with ID 2065

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the vegetables with ID 2041

        turn_on_stove_and_place_vegetables(pot, stove, vegetables)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_401_around_orchid_244(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind orchid_instance:item where:
            is_orchid(orchid_instance) and id[orchid_instance]==244
        achieve close_char(char,orchid_instance)
        if can_open(orchid_instance):
            achieve_once open(orchid_instance)
            exp(mat,orchid_instance)
        else:
            exp(mat,orchid_instance)
    eff:
        unknown[mat]=False
        close[mat,orchid_instance]=True
        close[orchid_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_vegetables_and_turn_on_stove(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables inside the pot
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Bind the vegetables item

        bind pot: item where:
            is_pot(pot)
        # Bind the pot item

        bind stove: item where:
            is_stove(stove)
        # Bind the stove

        add_vegetables_and_turn_on_stove(vegetables, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior turn_on_stove_and_add_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove
        achieve_once inside(vegetables, pot)
        # Add the vegetables into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        turn_on_stove_and_add_vegetables(pot, stove, vegetables)
        # Turn on the stove and add the vegetables into the pot on the stove
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. turn on the stove and put the vegetables in the pot." ?
Answer: First, turn on the stove. Then, put the vegetables in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_236_around_stovefan_288(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==288
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(mat,stovefan_instance)
        else:
            exp(mat,stovefan_instance)
    eff:
        unknown[mat]=False
        close[mat,stovefan_instance]=True
        close[stovefan_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)
        
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable item

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        put_vegetables_in_pot(vegetable, pot)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_401_around_trashcan_99(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(mat,trashcan_instance)
        else:
            exp(mat,trashcan_instance)
    eff:
        unknown[mat]=False
        close[mat,trashcan_instance]=True
        close[trashcan_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Ensure the pot has water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        turn_on_stove(stove)
        place_vegetables_in_pot(vegetables, pot)
        # Turn on the stove and place the vegetables in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

behavior find_iron_2089_around_dishwasher_1001(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(iron,dishwasher_instance)
        else:
            exp(iron,dishwasher_instance)
    eff:
        unknown[iron]=False
        close[iron,dishwasher_instance]=True
        close[dishwasher_instance,iron]=True
    

behavior find_mat_236_around_trashcan_99(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(mat,trashcan_instance)
        else:
            exp(mat,trashcan_instance)
    eff:
        unknown[mat]=False
        close[mat,trashcan_instance]=True
        close[trashcan_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_vegetables_for_boiling(vegetables:item, pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure that the pot is filled with water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be boiled

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        prepare_vegetables_for_boiling(vegetables, pot, stove)
        # Prepare and start boiling the vegetables in the pot on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_oil_2079(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2079
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(iron,oil_instance)
        else:
            exp(iron,oil_instance)
    eff:
        unknown[iron]=False
        close[iron,oil_instance]=True
        close[oil_instance,iron]=True
    

behavior find_mat_237_around_trashcan_99(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(mat,trashcan_instance)
        else:
            exp(mat,trashcan_instance)
    eff:
        unknown[mat]=False
        close[mat,trashcan_instance]=True
        close[trashcan_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_stove_on(stove:item):
    body:
        achieve is_on(stove) 
        # Ensure the stove is turned on

behavior put_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables into the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        # Bind the stove with a switch to turn it on

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Bind the pot with water for boiling vegetables

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Bind the vegetables for boiling

        ensure_stove_on(stove) 
        put_vegetables_in_pot(vegetables, pot)
        # Turn on the stove and place the vegetables in the pot
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_22_around_closetdrawer_146(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(mat,closetdrawer_instance)
        else:
            exp(mat,closetdrawer_instance)
    eff:
        unknown[mat]=False
        close[mat,closetdrawer_instance]=True
        close[closetdrawer_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        if has_switch(stove):
            achieve is_on(stove)

behavior add_vegetables_to_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        turn_on_stove(stove)
        # Turn on the stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Bind the vegetables

        bind pot: item where:
            is_pot(pot)
        # Bind the pot that already has water

        add_vegetables_to_pot(vegetables, pot)
        # Add the vegetables to the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_oil_2079(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2079
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(iron,oil_instance)
        else:
            exp(iron,oil_instance)
    eff:
        unknown[iron]=False
        close[iron,oil_instance]=True
        close[oil_instance,iron]=True
    

behavior find_mat_22_around_doorjamb_165(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==165
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(mat,doorjamb_instance)
        else:
            exp(mat,doorjamb_instance)
    eff:
        unknown[mat]=False
        close[mat,doorjamb_instance]=True
        close[doorjamb_instance,mat]=True
    

#exp_behavior_end

#goal_representation

behavior put_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        achieve is_on(stove)
        # Ensure the stove is turned on

        put_vegetables_in_pot(vegetables, pot)
        # Put the vegetables in the pot

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove_and_add_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once is_on(stove)
        # Turn the stove on
        achieve_once inside(vegetables, pot)
        # Put the vegetables into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        turn_on_stove_and_add_vegetables(pot, stove, vegetables)
        # Turn on the stove and put the vegetables in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_22_around_table_226(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_vegetables_to_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that is already filled with water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        turn_on_stove(stove)
        # Turn on the stove

        add_vegetables_to_pot(vegetables, pot)
        # Put the vegetables in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_vegetables_in_pot_and_turn_on_stove(veg:item, pot:item, stove:item):
    body:
        achieve_once inside(veg, pot)
        # Place the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind veg: item where:
            is_food_vegetable(veg)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        place_vegetables_in_pot_and_turn_on_stove(veg, pot, stove)
        # Execute the task to place the vegetables in the pot and turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_table_226(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(pencil,table_instance)
        else:
            exp(pencil,table_instance)
    eff:
        unknown[pencil]=False
        close[pencil,table_instance]=True
        close[table_instance,pencil]=True
    

behavior find_mat_237_around_doorjamb_165(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==165
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(mat,doorjamb_instance)
        else:
            exp(mat,doorjamb_instance)
    eff:
        unknown[mat]=False
        close[mat,doorjamb_instance]=True
        close[doorjamb_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the specific stove with ID 2065

        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the specific pot with ID 2069

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the specific vegetables with ID 2041

        turn_on_stove(stove)
        place_vegetables_in_pot(vegetables, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_closetdrawer_146(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(iron,closetdrawer_instance)
        else:
            exp(iron,closetdrawer_instance)
    eff:
        unknown[iron]=False
        close[iron,closetdrawer_instance]=True
        close[closetdrawer_instance,iron]=True
    

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_stove_and_put_vegetables_in_pot(stove:item, pot:item, vegetables:item):
    body:
        achieve is_on(stove)
        # Turn on the stove
        achieve_once inside(vegetables, pot)
        # Put the vegetables into the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the vegetables with ID 2041

        turn_on_stove_and_put_vegetables_in_pot(stove, pot, vegetables)
        # Turn on the stove and put the vegetables in the pot
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_pencil_2001_around_mousepad_167(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(pencil,mousepad_instance)
        else:
            exp(pencil,mousepad_instance)
    eff:
        unknown[pencil]=False
        close[pencil,mousepad_instance]=True
        close[mousepad_instance,pencil]=True
    

behavior find_mat_237_around_coffee_table_2068(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(mat,coffee_table_instance)
        else:
            exp(mat,coffee_table_instance)
    eff:
        unknown[mat]=False
        close[mat,coffee_table_instance]=True
        close[coffee_table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove_and_add_vegetables(stove:item, pot:item):
    body:
        achieve is_on(stove)
        achieve inside(food_vegetable_2041, pot)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069

        turn_on_stove_and_add_vegetables(stove, pot)
        # Turn on the stove and add vegetables to the pot

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_vegetable_2041)', 'putin_executor(food_vegetable_2041, pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(faucet_43)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(pot_2069)', 'walk_executor(faucet_43)', 'walk_executor(pot_2069)', 'walk_executor(faucet_43)', 'walk_executor(pot_2069)', 'putin_executor(food_vegetable_2041, pot_2069)']
Time info:
Time consume: 742 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 97
goal generate times: 41
goal correct times: 0
action_num: 29

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 5 steps
Keystate: k3 - Requires: 4 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
