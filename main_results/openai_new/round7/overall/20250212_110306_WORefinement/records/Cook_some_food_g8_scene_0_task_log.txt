From agent.py
Reset goals: The sub-goals are: 
['1. Find the ingredients: boiled egg, lemon, and vegetables.', '2. Wash the vegetables.', '3. Chop the boiled egg, lemon, and vegetables.', '4. Mix all chopped ingredients in a bowl to make the salad.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_ingredients(ingredient:item):
    body:
        observe(ingredient, "Determine the current location of the ingredient")

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg)
        # Select a boiled egg item

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon item

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select a vegetable item

        locate_ingredients(boiled_egg)
        locate_ingredients(lemon)
        locate_ingredients(vegetables)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior locate_ingredients(ingredient:item):
    body:
        observe(ingredient, "Determine the current location of the ingredient")

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg)
        # Select a boiled egg item

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon item

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select a vegetable item

        locate_ingredients(boiled_egg)
        locate_ingredients(lemon)
        locate_ingredients(vegetables)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)obs(food_egg_2020, Determine the current location of the ingredient)walk_executor(fridge_289)exp(food_lemon_2028, fridge_289)walk_executor(food_lemon_2028)obs(food_lemon_2028, Determine the current location of the ingredient)walk_executor(kitchen_counter_230)exp(food_vegetable_2041, kitchen_counter_230)walk_executor(food_vegetable_2041)obs(food_vegetable_2041, Determine the current location of the ingredient)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
obs(food_egg_2020, Determine the current location of the ingredient)obs(food_lemon_2028, Determine the current location of the ingredient)obs(food_vegetable_2041, Determine the current location of the ingredient)
##############################
From agent.py
obs(food_egg_2020, Determine the current location of the ingredient)
Get this information:  food_egg_2020 is inside fridge_289. food_egg_2020 is inside dining_room_201. food_egg_2020 is close to fridge_289. food_egg_2020 is close to character_65. food_egg_2020 is CLEAN.
##############################
From agent.py
obs(food_lemon_2028, Determine the current location of the ingredient)
Get this information:  food_lemon_2028 is close to fridge_289. food_lemon_2028 is close to character_65. food_lemon_2028 is inside fridge_289. food_lemon_2028 is inside dining_room_201. food_lemon_2028 is CLEAN.
##############################
From agent.py
obs(food_vegetable_2041, Determine the current location of the ingredient)
Get this information:  food_vegetable_2041 is inside fridge_289. food_vegetable_2041 is inside dining_room_201. food_vegetable_2041 is close to fridge_289. food_vegetable_2041 is close to character_65. food_vegetable_2041 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_sink_42(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior wash_vegetables(vegetable:item):
    body:
        wash(vegetable)
        
behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                wash_vegetables(vegetable)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior wash_vegetables(vegetable:item):
    body:
        wash(vegetable)
        
behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                wash_vegetables(vegetable)
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cutting_board_2051(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior chop_items(boiled_egg:item, lemon:item, vegetables:item, knife:item, cutting_board:item):
    body:
        achieve_once on(boiled_egg, cutting_board)
        # Place the boiled egg on the cutting board
        achieve_once cut(boiled_egg)
        # Chop the boiled egg

        achieve_once on(lemon, cutting_board)
        # Place the lemon on the cutting board
        achieve_once cut(lemon)
        # Chop the lemon

        achieve_once on(vegetables, cutting_board)
        # Place the vegetables on the cutting board
        achieve_once cut(vegetables)
        # Chop the vegetables

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and id[boiled_egg] == 2020
        # Select the boiled egg with ID 2020

        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 2028
        # Select the lemon with ID 2028

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the vegetables with ID 2041

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        chop_items(boiled_egg, lemon, vegetables, knife, cutting_board)
        # Chop the boiled egg, lemon, and vegetables using the knife and cutting board

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior chop_items(boiled_egg:item, lemon:item, vegetables:item, knife:item, cutting_board:item):
    body:
        achieve_once on(boiled_egg, cutting_board)
        # Place the boiled egg on the cutting board
        achieve_once cut(boiled_egg)
        # Chop the boiled egg

        achieve_once on(lemon, cutting_board)
        # Place the lemon on the cutting board
        achieve_once cut(lemon)
        # Chop the lemon

        achieve_once on(vegetables, cutting_board)
        # Place the vegetables on the cutting board
        achieve_once cut(vegetables)
        # Chop the vegetables

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg) and id[boiled_egg] == 2020
        # Select the boiled egg with ID 2020

        bind lemon: item where:
            is_food_lemon(lemon) and id[lemon] == 2028
        # Select the lemon with ID 2028

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2041
        # Select the vegetables with ID 2041

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        chop_items(boiled_egg, lemon, vegetables, knife, cutting_board)
        # Chop the boiled egg, lemon, and vegetables using the knife and cutting board

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)exp(knife_2050, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(cutting_board_2051)put_executor(food_lemon_2028, cutting_board_2051)walk_executor(food_lemon_2028)cut_executor(food_lemon_2028)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the food_vegetable_2041. Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_egg_2020. food_egg_2020 is close cutting_board_2051. food_egg_2020 is on cutting_board_2051. food_egg_2020 released by left hand. 
##############################
From agent.py
exp(knife_2050, cutting_board_2051)
Find knife_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(cutting_board_2051)put_executor(food_lemon_2028, cutting_board_2051)walk_executor(food_lemon_2028)cut_executor(food_lemon_2028)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by left hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
cut_executor(food_egg_2020)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_table_226(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior chop_items(boiled_egg:item, lemon:item, vegetables:item, knife:item, cutting_board:item):
    body:
        achieve_once on(boiled_egg, cutting_board)
        # Place the boiled egg on the cutting board
        achieve_once cut(boiled_egg)
        # Chop the boiled egg using the knife
        achieve_once on(lemon, cutting_board)
        # Place the lemon on the cutting board
        achieve_once cut(lemon)
        # Chop the lemon using the knife
        foreach vegetable: item:
            if inside(vegetable, vegetables): # Iterate over all vegetables
                achieve_once on(vegetable, cutting_board)
                # Place each vegetable on the cutting board
                achieve_once cut(vegetable)
                # Chop each vegetable using the knife

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg)
        # Select the boiled egg

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables set

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        chop_items(boiled_egg, lemon, vegetables, knife, cutting_board)
        # Chop the boiled egg, lemon, and vegetables using the knife on the cutting board
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior chop_items(boiled_egg:item, lemon:item, vegetables:item, knife:item, cutting_board:item):
    body:
        achieve_once on(boiled_egg, cutting_board)
        # Place the boiled egg on the cutting board
        achieve_once cut(boiled_egg)
        # Chop the boiled egg using the knife
        achieve_once on(lemon, cutting_board)
        # Place the lemon on the cutting board
        achieve_once cut(lemon)
        # Chop the lemon using the knife
        foreach vegetable: item:
            if inside(vegetable, vegetables): # Iterate over all vegetables
                achieve_once on(vegetable, cutting_board)
                # Place each vegetable on the cutting board
                achieve_once cut(vegetable)
                # Chop each vegetable using the knife

behavior __goal__():
    body:
        bind boiled_egg: item where:
            is_food_egg(boiled_egg)
        # Select the boiled egg

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables set

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        chop_items(boiled_egg, lemon, vegetables, knife, cutting_board)
        # Chop the boiled egg, lemon, and vegetables using the knife on the cutting board
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(food_vegetable_2041, kitchen_counter_230)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(cutting_board_2051)put_executor(food_lemon_2028, cutting_board_2051)walk_executor(food_lemon_2028)cut_executor(food_lemon_2028)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, kitchen_counter_230)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_vegetable_2041. food_vegetable_2041 is close kitchen_counter_230. food_vegetable_2041 is on kitchen_counter_230. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. 
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_lemon_2028, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_lemon_2028. food_lemon_2028 is close cutting_board_2051. food_lemon_2028 is on cutting_board_2051. food_lemon_2028 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to cut the vegetables as per the sub-task requirements to complete chopping all the necessary ingredients: boiled egg, lemon, and vegetables.
##############################
From agent.py
Human Instruction: The robot needs to cut the vegetables as per the sub-task requirements to complete chopping all the necessary ingredients: boiled egg, lemon, and vegetables.

Trial and Error: You can not grab food_lemon_2028
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_egg_2020 around fridge_289.
Action 5: Observe around food_egg_2020 with the question of Determine the current location of the ingredient.
Action 6: Observe around food_lemon_2028 with the question of Determine the current location of the ingredient.
Action 7: Observe around food_vegetable_2041 with the question of Determine the current location of the ingredient.
Action 8: Grab food_vegetable_2041.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Wash food_vegetable_2041.
Action 12: Switch off faucet_43.
Action 13: Walk to food_egg_2020.
Action 14: Grab food_egg_2020.
Action 15: Walk to cutting_board_2051.
Action 16: Put food_egg_2020 on cutting_board_2051.
Action 17: look for knife_2050 around cutting_board_2051.
Action 18: Walk to knife_2050.
Action 19: Grab knife_2050.
Action 20: Walk to food_egg_2020.
Action 21: Cut food_egg_2020.
Action 22: Walk to food_lemon_2028.
Action 23: Walk to kitchen_counter_230.
Action 24: Put food_vegetable_2041 on kitchen_counter_230.
Action 25: Walk to food_lemon_2028.
Action 26: Grab food_lemon_2028.
Action 27: Walk to cutting_board_2051.
Action 28: Put food_lemon_2028 on cutting_board_2051.
Action 29: Walk to food_lemon_2028.
Action 30: Cut food_lemon_2028.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_109_around_home_office_319(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(hanger,home_office_instance)
        else:
            exp(hanger,home_office_instance)
    eff:
        unknown[hanger]=False
        close[hanger,home_office_instance]=True
        close[home_office_instance,hanger]=True
    

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior chop_ingredients(ingredient:item, knife:item, cutting_board:item):
    body:
        achieve_once on(ingredient, cutting_board)
        # Place the ingredient on the cutting board
        achieve_once cut(ingredient)
        # Chop the ingredient using the knife

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon item

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables item

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        chop_ingredients(egg, knife, cutting_board)
        chop_ingredients(lemon, knife, cutting_board)
        chop_ingredients(vegetables, knife, cutting_board)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior chop_ingredients(ingredient:item, knife:item, cutting_board:item):
    body:
        achieve_once on(ingredient, cutting_board)
        # Place the ingredient on the cutting board
        achieve_once cut(ingredient)
        # Chop the ingredient using the knife

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon item

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables item

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        chop_ingredients(egg, knife, cutting_board)
        chop_ingredients(lemon, knife, cutting_board)
        chop_ingredients(vegetables, knife, cutting_board)
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. 
##############################
From agent.py
put_executor(food_vegetable_2041, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. cutting_board_2051 is close food_vegetable_2041. food_vegetable_2041 is close cutting_board_2051. food_vegetable_2041 is on cutting_board_2051. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior mix_ingredients_in_bowl(chopped_egg:item, chopped_lemon:item, chopped_vegetables:item, bowl:item):
    body:
        achieve_once inside(chopped_egg, bowl)
        achieve_once inside(chopped_lemon, bowl)
        achieve_once inside(chopped_vegetables, bowl)

behavior __goal__():
    body:
        bind chopped_egg: item where:
            is_food_egg(chopped_egg) and cut(chopped_egg)
        # Select the chopped egg
        
        bind chopped_lemon: item where:
            is_food_lemon(chopped_lemon) and cut(chopped_lemon)
        # Select the chopped lemon
        
        bind chopped_vegetables: item where:
            is_food_vegetable(chopped_vegetables) and cut(chopped_vegetables)
        # Select the chopped vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        mix_ingredients_in_bowl(chopped_egg, chopped_lemon, chopped_vegetables, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior mix_ingredients_in_bowl(chopped_egg:item, chopped_lemon:item, chopped_vegetables:item, bowl:item):
    body:
        achieve_once inside(chopped_egg, bowl)
        achieve_once inside(chopped_lemon, bowl)
        achieve_once inside(chopped_vegetables, bowl)

behavior __goal__():
    body:
        bind chopped_egg: item where:
            is_food_egg(chopped_egg) and cut(chopped_egg)
        # Select the chopped egg
        
        bind chopped_lemon: item where:
            is_food_lemon(chopped_lemon) and cut(chopped_lemon)
        # Select the chopped lemon
        
        bind chopped_vegetables: item where:
            is_food_vegetable(chopped_vegetables) and cut(chopped_vegetables)
        # Select the chopped vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        mix_ingredients_in_bowl(chopped_egg, chopped_lemon, chopped_vegetables, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2072, cupboard_229)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(bowl_2072, cupboard_229)
Fail to find bowl_2072 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2072, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the knife_2050. Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2072, table_226)
Find bowl_2072. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(food_egg_2020, bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bowl_2072. Robot is close to the table_226. bowl_2072 is close food_egg_2020. food_egg_2020 is inside bowl_2072. food_egg_2020 is close bowl_2072. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by right hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(food_lemon_2028, bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the bowl_2072. Robot is close to the table_226. food_lemon_2028 is close bowl_2072. bowl_2072 is close food_lemon_2028. food_lemon_2028 is inside bowl_2072. food_lemon_2028 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(food_vegetable_2041, bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bowl_2072. Robot is close to the table_226. food_vegetable_2041 is inside bowl_2072. food_vegetable_2041 is close bowl_2072. bowl_2072 is close food_vegetable_2041. food_vegetable_2041 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a bowl of egg salad with boiled egg, lemon, and vegetables.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(cutting_board_2051)', 'put_executor(food_egg_2020, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_egg_2020)', 'cut_executor(food_egg_2020)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028) (Failed)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_vegetable_2041, kitchen_counter_230)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(cutting_board_2051)', 'put_executor(food_lemon_2028, cutting_board_2051)', 'walk_executor(food_lemon_2028)', 'cut_executor(food_lemon_2028)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(cutting_board_2051)', 'put_executor(food_vegetable_2041, cutting_board_2051)', 'walk_executor(food_vegetable_2041)', 'cut_executor(food_vegetable_2041)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(table_226)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(bowl_2072)', 'putin_executor(food_egg_2020, bowl_2072)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(bowl_2072)', 'putin_executor(food_lemon_2028, bowl_2072)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(bowl_2072)', 'putin_executor(food_vegetable_2041, bowl_2072)']
Time info:
Time consume: 246 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 53
goal generate times: 6
goal correct times: 0
action_num: 47

Task complete rate:
Keystate: k1 - Requires: 14 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
