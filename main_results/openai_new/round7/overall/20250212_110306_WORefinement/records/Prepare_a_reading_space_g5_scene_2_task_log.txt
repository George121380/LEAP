From agent.py
Reset goals: The sub-goals are: 
['1. Find your spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2106_around_bookshelf_188(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(spectacles,bookshelf_instance)
        else:
            exp(spectacles,bookshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,bookshelf_instance]=True
        close[bookshelf_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_place_spectacles(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles item

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        foreach coffee_table: item:
            if is_table(coffee_table) and inside(coffee_table, home_office):
                # Identify the coffee table in the home office
                find_and_place_spectacles(spectacles, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_place_spectacles(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles item

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        foreach coffee_table: item:
            if is_table(coffee_table) and inside(coffee_table, home_office):
                # Identify the coffee table in the home office
                find_and_place_spectacles(spectacles, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(spectacles_2106, bookshelf_188)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(bookshelf_188)
Robot find: drawing_196, Robot is close to the bookshelf_188. 
##############################
From agent.py
open_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. bookshelf_188 is opened. 
##############################
From agent.py
exp(spectacles_2106, bookshelf_188)
Fail to find spectacles_2106 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(spectacles_2106, bookshelf_136)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(spectacles_2106, bookshelf_136)
Fail to find spectacles_2106 around bookshelf_136. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(spectacles_2106, bookshelf_189)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. 
##############################
From agent.py
open_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. bookshelf_189 is opened. 
##############################
From agent.py
exp(spectacles_2106, bookshelf_189)
Fail to find spectacles_2106 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_187)exp(spectacles_2106, wallshelf_187)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(wallshelf_187)
Robot find: Robot is close to the wallshelf_187. 
##############################
From agent.py
exp(spectacles_2106, wallshelf_187)
Fail to find spectacles_2106 around wallshelf_187. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_190)exp(spectacles_2106, wallshelf_190)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(wallshelf_190)
Robot find: Robot is close to the wallshelf_190. 
##############################
From agent.py
exp(spectacles_2106, wallshelf_190)
Fail to find spectacles_2106 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_191)exp(spectacles_2106, wallshelf_191)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(wallshelf_191)
Robot find: Robot is close to the wallshelf_191. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find spectacles_2106 ?
Answer: Go to dining_room_1. Locate kitchen_counter_128. The spectacles_2106 are on top of kitchen_counter_128.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1. Locate kitchen_counter_128. The spectacles_2106 are on top of kitchen_counter_128.

The actions you have taken:
Action 1: Walk to bookshelf_188.
Action 2: Open bookshelf_188.
Action 3: look for spectacles_2106 around bookshelf_188.
Action 4: Walk to bookshelf_136.
Action 5: look for spectacles_2106 around bookshelf_136.
Action 6: Walk to bookshelf_189.
Action 7: Open bookshelf_189.
Action 8: look for spectacles_2106 around bookshelf_189.
Action 9: Walk to wallshelf_187.
Action 10: look for spectacles_2106 around wallshelf_187.
Action 11: Walk to wallshelf_190.
Action 12: look for spectacles_2106 around wallshelf_190.
Action 13: Walk to wallshelf_191.

##############################
From agent.py
exp(spectacles_2106, wallshelf_191)
Fail to find spectacles_2106 around wallshelf_191. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(spectacles_2106, kitchen_counter_128)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(spectacles_2106, kitchen_counter_128)
Find spectacles_2106. 
##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. 
##############################
From agent.py
grab_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. Grabbing spectacles_2106 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, Robot is close to the spectacles_2106. Robot is close to the table_193. 
##############################
From agent.py
put_executor(spectacles_2106, table_193)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. table_193 is close spectacles_2106. spectacles_2106 is close table_193. spectacles_2106 is on table_193. spectacles_2106 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the spectacles on the coffee table in the home office. As of now, the spectacles are placed on table_193, but it has not been verified that this is the coffee table in the home office. Ensure the correct table is used as specified in the full goal.
##############################
From agent.py
Human Instruction: You need to place the spectacles on the coffee table in the home office. As of now, the spectacles are placed on table_193, but it has not been verified that this is the coffee table in the home office. Ensure the correct table is used as specified in the full goal.

The actions you have taken:
Action 1: Walk to bookshelf_188.
Action 2: Open bookshelf_188.
Action 3: look for spectacles_2106 around bookshelf_188.
Action 4: Walk to bookshelf_136.
Action 5: look for spectacles_2106 around bookshelf_136.
Action 6: Walk to bookshelf_189.
Action 7: Open bookshelf_189.
Action 8: look for spectacles_2106 around bookshelf_189.
Action 9: Walk to wallshelf_187.
Action 10: look for spectacles_2106 around wallshelf_187.
Action 11: Walk to wallshelf_190.
Action 12: look for spectacles_2106 around wallshelf_190.
Action 13: Walk to wallshelf_191.
Action 14: look for spectacles_2106 around wallshelf_191.
Action 15: Walk to kitchen_counter_128.
Action 16: look for spectacles_2106 around kitchen_counter_128.
Action 17: Walk to spectacles_2106.
Action 18: Grab spectacles_2106.
Action 19: Walk to table_193.
Action 20: Put spectacles_2106 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_correct_coffee_table(table:item):
    # Function to check if a table is the correct coffee table
    symbol correct= exists room: item : (is_home_office(room) and inside(table, room))
    return correct

behavior locate_and_place_spectacles_on_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles]==2106
        # Select the spectacles with ID 2106

        bind table_193: item where:
            is_table(table_193) and id[table_193] == 193
        # Select table with ID 193

        if not on(spectacles, table_193) and not is_correct_coffee_table(table_193):
            # If the spectacles are not on the right table, find the right table
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Determine if this is the coffee table in the home office")

                    if is_correct_coffee_table(table):
                        locate_and_place_spectacles_on_table(spectacles, table)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_console_2027_around_tvstand_186(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(console,tvstand_instance)
        else:
            exp(console,tvstand_instance)
    eff:
        unknown[console]=False
        close[console,tvstand_instance]=True
        close[tvstand_instance,console]=True
    

behavior find_phone_47_around_oven_141(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(phone,oven_instance)
        else:
            exp(phone,oven_instance)
    eff:
        unknown[phone]=False
        close[phone,oven_instance]=True
        close[oven_instance,phone]=True
    

behavior find_chair_263_around_table_123(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation

def is_coffee_table(table:item):
    # Function to check if a table is a coffee table
    # For simplicity, this function assumes the table is a coffee table if it is inside the home office, further logic might be required in practice
    symbol is_coffee_table= exists room: item : (is_home_office(room) and inside(table, room))
    return is_coffee_table

behavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles]==2106
        # Select the spectacles with ID 2106
        
        if exists table: item : (is_table(table) and is_coffee_table(table)):
            bind coffee_table: item where:
                is_table(coffee_table) and is_coffee_table(coffee_table)
            # Select the coffee table if it is known
            
            if not on(spectacles, coffee_table):
                # If the spectacles are not already on the coffee table
                place_spectacles_on_coffee_table(spectacles, coffee_table)
        
        else:
            # If the coffee table is not known, locate it
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Determine if this is the coffee table in the home office")
                    # Observe each unvisited table to find the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_coffee_table(table:item):
    # Function to check if a table is a coffee table
    # For simplicity, this function assumes the table is a coffee table if it is inside the home office, further logic might be required in practice
    symbol is_coffee_table= exists room: item : (is_home_office(room) and inside(table, room))
    return is_coffee_table

behavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles]==2106
        # Select the spectacles with ID 2106
        
        if exists table: item : (is_table(table) and is_coffee_table(table)):
            bind coffee_table: item where:
                is_table(coffee_table) and is_coffee_table(coffee_table)
            # Select the coffee table if it is known
            
            if not on(spectacles, coffee_table):
                # If the spectacles are not already on the coffee table
                place_spectacles_on_coffee_table(spectacles, coffee_table)
        
        else:
            # If the coffee table is not known, locate it
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Determine if this is the coffee table in the home office")
                    # Observe each unvisited table to find the coffee table

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)obs(table_123, Determine if this is the coffee table in the home office)walk_executor(table_127)obs(table_127, Determine if this is the coffee table in the home office)walk_executor(table_193)obs(table_193, Determine if this is the coffee table in the home office)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
obs(table_123, Determine if this is the coffee table in the home office)
Get this information:  cup_2088 is on table_123. laptop_2015 is on table_123. table_123 is inside dining_room_1. table_123 is close to wall_5. table_123 is close to cup_2087. table_123 is close to cup_2088. table_123 is close to ceilinglamp_41. table_123 is close to floor_12. table_123 is close to floor_13. table_123 is close to floor_14. table_123 is close to bowl_2095. table_123 is close to floor_17. table_123 is close to mat_114. table_123 is close to floor_18. table_123 is close to mouse_2003. table_123 is close to fork_2103. table_123 is close to bench_122. table_123 is close to homework_2011. table_123 is close to bench_124. table_123 is close to laptop_2015. table_123 is close to character_219. fork_2103 is on table_123. table_123 is on floor_17. table_123 is on mat_114. bowl_2095 is on table_123. cup_2087 is on table_123. homework_2011 is on table_123. mouse_2003 is on table_123. table_123 is facing drawing_118. table_123 is CLEAN.
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
obs(table_127, Determine if this is the coffee table in the home office)
Get this information:  fork_2104 is on table_127. table_127 is close to wall_11. table_127 is close to console_2027. table_127 is close to crayon_2030. table_127 is close to bowl_2096. table_127 is close to bowl_2097. table_127 is close to mat_115. table_127 is close to floor_20. table_127 is close to floor_19. table_127 is close to napkin_2014. table_127 is close to floor_23. table_127 is close to fork_2104. table_127 is close to plate_2105. table_127 is close to bench_126. table_127 is close to bench_125. table_127 is close to floor_24. table_127 is close to character_219. bowl_2096 is on table_127. table_127 is on mat_115. table_127 is on floor_20. plate_2105 is on table_127. table_127 is facing drawing_118. bowl_2097 is on table_127. console_2027 is on table_127. table_127 is inside dining_room_1. crayon_2030 is on table_127. napkin_2014 is on table_127. table_127 is CLEAN.
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the table_193. 
##############################
From agent.py
obs(table_193, Determine if this is the coffee table in the home office)
Get this information:  computer_2110 is on table_193. table_193 is close to mouse_2112. table_193 is close to couch_192. table_193 is close to pillow_195. table_193 is close to floor_164. table_193 is close to floor_165. table_193 is close to chair_2119. table_193 is close to curtain_199. table_193 is close to orchid_200. table_193 is close to floor_168. table_193 is close to wall_170. table_193 is close to floor_167. table_193 is close to mat_201. table_193 is close to laser_pointer_2025. table_193 is close to wall_174. table_193 is close to dvd_player_2000. table_193 is close to oil_2005. table_193 is close to computer_2110. table_193 is close to keyboard_2111. table_193 is close to spectacles_2106. table_193 is close to character_219. table_193 is facing drawing_196. keyboard_2111 is on table_193. oil_2005 is on table_193. spectacles_2106 is on table_193. orchid_200 is on table_193. table_193 is inside home_office_161. dvd_player_2000 is on table_193. mouse_2112 is on table_193. laser_pointer_2025 is on table_193. table_193 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2092_around_home_office_161(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(book,home_office_instance)
        else:
            exp(book,home_office_instance)
    eff:
        unknown[book]=False
        close[book,home_office_instance]=True
        close[home_office_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table(table:item):
    # Function to check if a table is a coffee table
    # For simplicity, this function assumes the table is a coffee table if it is inside the home office
    symbol is_coffee_table= exists room: item : (is_home_office(room) and inside(table, room))
    return is_coffee_table

behavior locate_and_place_book(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book item

        if exists table: item : (is_table(table) and is_coffee_table(table)):
            bind coffee_table: item where:
                is_table(coffee_table) and is_coffee_table(coffee_table)
            # Select the coffee table if it is known
            
            if not on(book, coffee_table):
                # If the book is not already on the coffee table
                locate_and_place_book(book, coffee_table)
        
        else:
            # If the coffee table is not known, locate it
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Determine if this is the coffee table in the home office")
                    # Observe each unvisited table to find the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_book_2091(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2091
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(novel,book_instance)
        else:
            exp(novel,book_instance)
    eff:
        unknown[novel]=False
        close[novel,book_instance]=True
        close[book_instance,novel]=True
    

behavior find_book_2092_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation

behavior locate_and_place_book(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book item

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        foreach table: item:
            if is_table(table) and inside(table, home_office):
                # Identify table in the home office
                locate_and_place_book(book, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior locate_and_place_book(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book item

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        foreach table: item:
            if is_table(table) and inside(table, home_office):
                # Identify table in the home office
                locate_and_place_book(book, table)

##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find my spectacles and put it on the coffe table in home office. Then find the book and put it on the coffe table in home office.
Action History:
['walk_executor(bookshelf_188)', 'open_executor(bookshelf_188)', 'walk_executor(bookshelf_136)', 'walk_executor(bookshelf_189)', 'open_executor(bookshelf_189)', 'walk_executor(wallshelf_187)', 'walk_executor(wallshelf_190)', 'walk_executor(wallshelf_191)', 'walk_executor(kitchen_counter_128)', 'walk_executor(spectacles_2106)', 'grab_executor(spectacles_2106)', 'walk_executor(table_193)', 'put_executor(spectacles_2106, table_193)', 'walk_executor(table_123)', 'walk_executor(table_127)', 'walk_executor(table_193)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)']
Time info:
Time consume: 143 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 48
goal generate times: 5
goal correct times: 0
action_num: 20

Task complete rate:
1
Scene_id: 2
##############################
