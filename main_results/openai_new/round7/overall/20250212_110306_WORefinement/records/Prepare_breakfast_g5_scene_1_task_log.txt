From agent.py
Reset goals: The sub-goals are: 
['1. Find the cereal and milk.', '2. Heat the milk until warm.', '3. Pour the milk into a cup and add the cereal.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2087_around_kitchen_counter_122(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def has_food(food_category_function, storage_category_function):
    # Function to check if there is a specific type of food inside the known storage
    symbol has_food= exists o: item : (food_category_function(o) and inside(o, storage_category_function))
    return has_food

behavior __goal__():
    body:
        if exists storage: item : (is_food_cereal(storage) and has_food(is_food_cereal, storage)):
            # Check if there is cereal based on the available information
            bind storage: item where:
                is_food_cereal(storage) and has_food(is_food_cereal, storage)
            # Select cereal storage

            achieve close_char(char, storage)
            # Move the character closer to the cereal storage

        else: 
            # If no cereal found, initiate exploration to locate it
            foreach storage: item:
                if is_cereal(storage) and not visited(storage):
                    observe(storage,"Check is there cereal present")
        
        if exists storage: item : (is_milk(storage)):
            # Check if there is milk based on the available information
            bind storage: item where:
                is_milk(storage)
            # Select milk storage

            achieve close_char(char, storage) 
            # Move the character closer to the milk storage

        else: 
            # If no milk found, initiate exploration to locate it
            foreach storage: item:
                if is_milk(storage) and not visited(storage):
                    observe(storage,"Check for presence of milk")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2087_around_kitchen_counter_122(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal(x:item):
    # Function to check if the item is either milk or cereal
    symbol has_milk_or_cereal = is_milk(x) or is_food_cereal(x)
    return has_milk_or_cereal

behavior __goal__():
    body:
        foreach x: item:
            if has_milk_or_cereal(x) and not visited(x):
                observe(x, "Check if this is milk or cereal")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_milk_or_cereal(x:item):
    # Function to check if the item is either milk or cereal
    symbol has_milk_or_cereal = is_milk(x) or is_food_cereal(x)
    return has_milk_or_cereal

behavior __goal__():
    body:
        foreach x: item:
            if has_milk_or_cereal(x) and not visited(x):
                observe(x, "Check if this is milk or cereal")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_cereal_2087, kitchen_counter_122)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Check if this is milk or cereal)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, Check if this is milk or cereal)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_cereal_2087, kitchen_counter_122)
Fail to find food_cereal_2087 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(food_cereal_2087, cupboard_117)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Check if this is milk or cereal)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, Check if this is milk or cereal)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(food_cereal_2087, cupboard_117)
Fail to find food_cereal_2087 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_cereal_2087, cupboard_118)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Check if this is milk or cereal)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, Check if this is milk or cereal)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(food_cereal_2087, cupboard_118)
Fail to find food_cereal_2087 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)exp(food_cereal_2087, fryingpan_2154)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Check if this is milk or cereal)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, Check if this is milk or cereal)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_cereal_2087, fryingpan_2154)
Fail to find food_cereal_2087 around fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_cereal_2087, kitchen_counter_119)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Check if this is milk or cereal)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, Check if this is milk or cereal)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_cereal_2087, kitchen_counter_119)
Fail to find food_cereal_2087 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_cereal_2087, fridge_126)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Check if this is milk or cereal)walk_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, Check if this is milk or cereal)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_cereal_2087, fridge_126)
Find food_cereal_2087. 
##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Check if this is milk or cereal)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, Check if this is milk or cereal)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_mousepad_214(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(milk,mousepad_instance)
        else:
            exp(milk,mousepad_instance)
    eff:
        unknown[milk]=False
        close[milk,mousepad_instance]=True
        close[mousepad_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_and_identify(item:item):
    body:
        observe(item, "Determine if it is the cereal or milk")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and open(fridge)
        # Ensure the fridge is accessible

        bind cupboard: item where:
            is_cupboard(cupboard) and open(cupboard)
        # Ensure the cupboard is accessible

        foreach item: item:
            if is_milk(item) and inside(item, fridge):
                locate_and_identify(item)
                
            if is_food_cereal(item) and inside(item, fridge):
                locate_and_identify(item)
                
            if is_milk(item) and inside(item, cupboard):
                locate_and_identify(item)
                
            if is_food_cereal(item) and inside(item, cupboard):
                locate_and_identify(item)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_and_identify(item:item):
    body:
        observe(item, "Determine if it is the cereal or milk")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and open(fridge)
        # Ensure the fridge is accessible

        bind cupboard: item where:
            is_cupboard(cupboard) and open(cupboard)
        # Ensure the cupboard is accessible

        foreach item: item:
            if is_milk(item) and inside(item, fridge):
                locate_and_identify(item)
                
            if is_food_cereal(item) and inside(item, fridge):
                locate_and_identify(item)
                
            if is_milk(item) and inside(item, cupboard):
                locate_and_identify(item)
                
            if is_food_cereal(item) and inside(item, cupboard):
                locate_and_identify(item)


##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Determine if it is the cereal or milk)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_mousepad_214(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(milk,mousepad_instance)
        else:
            exp(milk,mousepad_instance)
    eff:
        unknown[milk]=False
        close[milk,mousepad_instance]=True
        close[mousepad_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_cereal_and_milk_found(kitchen:item):
    # Determine if both cereal and milk have been found in the kitchen
    symbol cereal_found = exists c: item : (is_food_cereal(c) and inside(c, kitchen))
    symbol milk_found = exists m: item : (is_milk(m) and inside(m, kitchen))
    return cereal_found and milk_found

behavior find_items_in_kitchen(kitchen:item):
    body:
        foreach o: item:
            if (is_food_cereal(o) or is_milk(o)) and not visited(o):
                observe(o, "Check if this is the cereal or milk")

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen) or is_cupboard(kitchen) or is_fridge(kitchen)
        
        if not is_cereal_and_milk_found(kitchen):
            # If cereal and milk have not been located based on known information, start to explore
            find_items_in_kitchen(kitchen)
        else:
            achieve close_char(char, kitchen)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_cereal_and_milk_found(kitchen:item):
    # Determine if both cereal and milk have been found in the kitchen
    symbol cereal_found = exists c: item : (is_food_cereal(c) and inside(c, kitchen))
    symbol milk_found = exists m: item : (is_milk(m) and inside(m, kitchen))
    return cereal_found and milk_found

behavior find_items_in_kitchen(kitchen:item):
    body:
        foreach o: item:
            if (is_food_cereal(o) or is_milk(o)) and not visited(o):
                observe(o, "Check if this is the cereal or milk")

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen) or is_cupboard(kitchen) or is_fridge(kitchen)
        
        if not is_cereal_and_milk_found(kitchen):
            # If cereal and milk have not been located based on known information, start to explore
            find_items_in_kitchen(kitchen)
        else:
            achieve close_char(char, kitchen)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Check if this is the cereal or milk)walk_executor(mousepad_214)exp(milk_2115, mousepad_214)walk_executor(milk_2115)obs(milk_2115, Check if this is the cereal or milk)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_mousepad_214(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(milk,mousepad_instance)
        else:
            exp(milk,mousepad_instance)
    eff:
        unknown[milk]=False
        close[milk,mousepad_instance]=True
        close[mousepad_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_food_item(food:item):
    body:
        observe(food, "Determine the current location of the food item")
        
behavior locate_milk(milk:item):
    body:
        observe(milk, "Determine the current location of the milk")

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        locate_food_item(cereal)
        locate_milk(milk)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_food_item(food:item):
    body:
        observe(food, "Determine the current location of the food item")
        
behavior locate_milk(milk:item):
    body:
        observe(milk, "Determine the current location of the milk")

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        locate_food_item(cereal)
        locate_milk(milk)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the food item)walk_executor(mousepad_214)exp(milk_2115, mousepad_214)walk_executor(milk_2115)obs(milk_2115, Determine the current location of the milk)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_bookshelf_124(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior locate_food_items(cereal:item, milk:item):
    body:
        observe(cereal, "Determine the current location of the cereal")
        observe(milk, "Determine the current location of the milk")

behavior choose_items_to_observe():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        locate_food_items(cereal, "milk")
        # Locate both the cereal and the milk

behavior __goal__():
    body:
        choose_items_to_observe()
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_toaster_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_bread,toaster_instance)
        else:
            exp(food_bread,toaster_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,toaster_instance]=True
        close[toaster_instance,food_bread]=True
    

behavior find_milk_2115_around_sink_120(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(milk,sink_instance)
        else:
            exp(milk,sink_instance)
    eff:
        unknown[milk]=False
        close[milk,sink_instance]=True
        close[sink_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item(f: item):
    # Function to check if an item is a food item (cereal or milk)
    return is_food_cereal(f) or is_milk(f)

behavior __goal__():
    body:
        if exists food_cereal: item : (is_food_cereal(food_cereal) and not visited(food_cereal)):
            # Check if a cereal is found and not yet visited
            bind food_cereal: item where:
                is_food_cereal(food_cereal)
            # Select the cereal that was identified
            achieve close_char(char, food_cereal)
            # Move closer to the cereal
        
        else: 
            # If no known cereal is found, initiate exploration to locate one
            foreach food_item: item:
                if is_food_cereal(food_item) and not visited(food_item):
                    # Check all unvisited cereal items
                    observe(food_item, "Check if it is a cereal and where it is located")

        if exists milk: item : (is_milk(milk) and not visited(milk)):
            # Check if a milk is found and not yet visited
            bind milk: item where:
                is_milk(milk)
            # Select the milk that was identified
            achieve close_char(char, milk)
            # Move closer to the milk
        
        else: 
            # If no known milk is found, initiate exploration to locate one
            foreach food_item: item:
                if is_milk(food_item) and not visited(food_item):
                    # Check all unvisited milk items
                    observe(food_item, "Check if it is milk and where it is located")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_mousepad_214(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(milk,mousepad_instance)
        else:
            exp(milk,mousepad_instance)
    eff:
        unknown[milk]=False
        close[milk,mousepad_instance]=True
        close[mousepad_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item(f: item):
    # Function to check if an item is a food item by type
    return is_food_cereal(f) or is_milk(f)

behavior find_food_item(food:item):
    body:
        observe(food, "Determine the current location of the food item")
        # Observe the location of the food item

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        find_food_item(cereal)
        # Locate the cereal item

        find_food_item(milk)
        # Locate the milk item

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item(f: item):
    # Function to check if an item is a food item by type
    return is_food_cereal(f) or is_milk(f)

behavior find_food_item(food:item):
    body:
        observe(food, "Determine the current location of the food item")
        # Observe the location of the food item

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        find_food_item(cereal)
        # Locate the cereal item

        find_food_item(milk)
        # Locate the milk item

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the food item)walk_executor(mousepad_214)exp(milk_2115, mousepad_214)walk_executor(milk_2115)obs(milk_2115, Determine the current location of the food item)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_bookshelf_124(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def lock_food_cereal(food_cereal:item):
    # Function to handle the locked status of the cereal
    observe(food_cereal, "Check status of food_cereal_2087")

behavior find_milk(milk:item):
    body:
        observe(milk, "Determine the current location of the milk")

behavior __goal__():
    body:
        bind food_cereal: item where:
            is_food_cereal(food_cereal)
        # Select the cereal item

        lock_food_cereal(food_cereal)
        # Handle the cereal being locked in an unspecified location

        bind milk: item where:
            is_milk(milk)
        # Select the milk item
        
        find_milk(milk)
        # Find the milk

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_mousepad_214(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(milk,mousepad_instance)
        else:
            exp(milk,mousepad_instance)
    eff:
        unknown[milk]=False
        close[milk,mousepad_instance]=True
        close[mousepad_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal(o:item):
    # Function to check if there is milk or cereal in or around an object
    symbol contains_milk_or_cereal = exists item1: item : ((is_milk(item1) or is_food_cereal(item1)) and close(item1, o))
    return contains_milk_or_cereal

behavior __goal__():
    body:
        if exists o: item : (has_milk_or_cereal(o)):
            # Check if there is an item that either contains milk or cereal based on the available information
            bind o: item where:
                has_milk_or_cereal(o)
            # Select an item containing milk or cereal
            achieve close_char(char, o)
            # Move the character closer to the item containing milk or cereal

        else:
            # If no item with milk or cereal is found, initiate exploration to locate one
            foreach o: item:
                if not visited(o):
                    # Check all unvisited items for milk or cereal presence
                    observe(o, "Check for presence of milk or cereal around this item")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_milk_2115_around_bookshelf_124(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_items(cereal:item, milk:item):
    body:
        observe(cereal, "Determine the current location of the cereal")
        observe(milk, "Determine the current location of the milk")

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        locate_items(cereal, milk)
        # Find the location of the cereal and milk

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_items(cereal:item, milk:item):
    body:
        observe(cereal, "Determine the current location of the cereal")
        observe(milk, "Determine the current location of the milk")

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        locate_items(cereal, milk)
        # Find the location of the cereal and milk

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the cereal)walk_executor(bookshelf_124)open_executor(bookshelf_124)exp(milk_2115, bookshelf_124)walk_executor(milk_2115)obs(milk_2115, Determine the current location of the milk)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_mousepad_214(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(milk,mousepad_instance)
        else:
            exp(milk,mousepad_instance)
    eff:
        unknown[milk]=False
        close[milk,mousepad_instance]=True
        close[mousepad_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior find_cereal(cereal:item, location:item):
    body:
        observe(cereal, "Check if cereal is at the specified location")

behavior find_milk(milk:item, location:item):
    body:
        observe(milk, "Check if milk is at the specified location")

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        foreach location: item:
            if (is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location)) and not visited(location):
                find_cereal(cereal, location)
                find_milk(milk, location)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior find_cereal(cereal:item, location:item):
    body:
        observe(cereal, "Check if cereal is at the specified location")

behavior find_milk(milk:item, location:item):
    body:
        observe(milk, "Check if milk is at the specified location")

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        foreach location: item:
            if (is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location)) and not visited(location):
                find_cereal(cereal, location)
                find_milk(milk, location)
##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Check if cereal is at the specified location)walk_executor(mousepad_214)exp(milk_2115, mousepad_214)walk_executor(milk_2115)obs(milk_2115, Check if milk is at the specified location)walk_executor(food_cereal_2087)obs(food_cereal_2087, Check if cereal is at the specified location)walk_executor(milk_2115)obs(milk_2115, Check if milk is at the specified location)walk_executor(food_cereal_2087)obs(food_cereal_2087, Check if cereal is at the specified location)walk_executor(milk_2115)obs(milk_2115, Check if milk is at the specified location)walk_executor(food_cereal_2087)obs(food_cereal_2087, Check if cereal is at the specified location)walk_executor(milk_2115)obs(milk_2115, Check if milk is at the specified location)walk_executor(food_cereal_2087)obs(food_cereal_2087, Check if cereal is at the specified location)walk_executor(milk_2115)obs(milk_2115, Check if milk is at the specified location)walk_executor(food_cereal_2087)obs(food_cereal_2087, Check if cereal is at the specified location)walk_executor(milk_2115)obs(milk_2115, Check if milk is at the specified location)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_bookshelf_124(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_item(item:item, location:item):
    body:
        observe(location, "Check if the item is here")

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        foreach location: item:
            if not visited(location):
                # Check for the cereal
                locate_item(cereal, location)
                # Check for the milk
                locate_item(milk, location)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_dishwasher_129(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(milk,dishwasher_instance)
        else:
            exp(milk,dishwasher_instance)
    eff:
        unknown[milk]=False
        close[milk,dishwasher_instance]=True
        close[dishwasher_instance,milk]=True
    

behavior find_food_food_2001_around_dishwasher_129(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_food,dishwasher_instance)
        else:
            exp(food_food,dishwasher_instance)
    eff:
        unknown[food_food]=False
        close[food_food,dishwasher_instance]=True
        close[dishwasher_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
behavior locate_food_item(food:item):
    body:
        observe(food, "Determine the current location of the food item")

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        bind milk: item where:
            is_milk(milk)
        # Select milk

        locate_food_item(cereal)
        locate_food_item(milk)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior locate_food_item(food:item):
    body:
        observe(food, "Determine the current location of the food item")

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        bind milk: item where:
            is_milk(milk)
        # Select milk

        locate_food_item(cereal)
        locate_food_item(milk)
##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the food item)walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(milk_2115, dishwasher_129)walk_executor(milk_2115)obs(milk_2115, Determine the current location of the food item)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_bookshelf_124(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_cereal(food:item):
    symbol is_cereal_item = is_food_cereal(food)
    return is_cereal_item

def is_milk_item(item:item):
    symbol is_milk_type = is_milk(item)
    return is_milk_type

behavior locate_food_item(item:item):
    body:
        observe(item, "Determine the current location of the food item")

behavior __goal__():
    body:
        if exists cereal: item : (is_cereal(cereal)):
            bind cereal: item where:
                is_cereal(cereal)
            locate_food_item(cereal)
        else:
            foreach food: item:
                if is_food_cereal(food) and not visited(food):
                    observe(food, "Check if this is the cereal")


        if exists milk: item : (is_milk_item(milk)):
            bind milk: item where:
                is_milk_item(milk)
            locate_food_item(milk)
        else:
            foreach item: item:
                if is_milk(item) and not visited(item):
                    observe(item, "Check if this is the milk")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_cereal(food:item):
    symbol is_cereal_item = is_food_cereal(food)
    return is_cereal_item

def is_milk_item(item:item):
    symbol is_milk_type = is_milk(item)
    return is_milk_type

behavior locate_food_item(item:item):
    body:
        observe(item, "Determine the current location of the food item")

behavior __goal__():
    body:
        if exists cereal: item : (is_cereal(cereal)):
            bind cereal: item where:
                is_cereal(cereal)
            locate_food_item(cereal)
        else:
            foreach food: item:
                if is_food_cereal(food) and not visited(food):
                    observe(food, "Check if this is the cereal")


        if exists milk: item : (is_milk_item(milk)):
            bind milk: item where:
                is_milk_item(milk)
            locate_food_item(milk)
        else:
            foreach item: item:
                if is_milk(item) and not visited(item):
                    observe(item, "Check if this is the milk")

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Check if this is the cereal)walk_executor(bookshelf_124)open_executor(bookshelf_124)exp(milk_2115, bookshelf_124)walk_executor(milk_2115)obs(milk_2115, Determine the current location of the food item)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_mousepad_214(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(milk,mousepad_instance)
        else:
            exp(milk,mousepad_instance)
    eff:
        unknown[milk]=False
        close[milk,mousepad_instance]=True
        close[mousepad_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_cereal_and_milk(cereal:item, milk:item):
    body:
        observe(cereal, "Determine the current location of the cereal")
        # Find cereal location
        observe(milk, "Determine the current location of the milk")
        # Find milk location

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        locate_cereal_and_milk(cereal, milk)
        # Locate both cereal and milk

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_cereal_and_milk(cereal:item, milk:item):
    body:
        observe(cereal, "Determine the current location of the cereal")
        # Find cereal location
        observe(milk, "Determine the current location of the milk")
        # Find milk location

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        locate_cereal_and_milk(cereal, milk)
        # Locate both cereal and milk

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the cereal)walk_executor(mousepad_214)exp(milk_2115, mousepad_214)walk_executor(milk_2115)obs(milk_2115, Determine the current location of the milk)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_bookshelf_124(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_food_cereal():
    # Function that attempts to find cereal thats identifiable by current information 
    symbol cereal_found = exists cereal: item : (is_food_cereal(cereal))
    return cereal_found

def has_milk():
    # Function that attempts to find milk thats identifiable by current information 
    symbol milk_found = exists milk: item : (is_milk(milk))
    return milk_found

behavior __goal__():
    body:
        # Check if the cereal and milk are already identifiable, if so, archive the information and stop
        # if not, start new search
        if not has_food_cereal():
            foreach o: item:
                if is_food_cereal(o):
                    observe(o, "Inspect if this is the food cereal we are looking for")
        
        if not has_milk():
            foreach o: item:
                if is_milk(o):
                    observe(o, "Inspect if this is the milk we are looking for")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_toaster_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_bread,toaster_instance)
        else:
            exp(food_bread,toaster_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,toaster_instance]=True
        close[toaster_instance,food_bread]=True
    

behavior find_milk_2115_around_bookshelf_124(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(milk,bookshelf_instance)
        else:
            exp(milk,bookshelf_instance)
    eff:
        unknown[milk]=False
        close[milk,bookshelf_instance]=True
        close[bookshelf_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_items(milk: item, cereal: item):
    body:
        observe(milk, "Determine the current location of the milk")
        observe(cereal, "Determine the current location of the cereal")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item
        
        locate_items(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_items(milk: item, cereal: item):
    body:
        observe(milk, "Determine the current location of the milk")
        observe(cereal, "Determine the current location of the cereal")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item
        
        locate_items(milk, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)exp(milk_2115, bookshelf_124)walk_executor(milk_2115)obs(milk_2115, Determine the current location of the milk)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the cereal)
##############################
From agent.py
walk_executor(bookshelf_124)
Robot find: book_2136, envelope_2055, book_2137, drawing_110, drawing_111, Robot is close to the bookshelf_124. 
##############################
From agent.py
open_executor(bookshelf_124)
Robot find: Robot is close to the bookshelf_124. bookshelf_124 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find milk_2115 ?
Answer: Go to the dining room labeled as dining_room_41. Inside, locate table_114. You will find the milk_2115 on top of table_114. Use the proximity of the table and the surrounding space in the dining room to accurately identify and retrieve the milk_2115.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining room labeled as dining_room_41. Inside, locate table_114. You will find the milk_2115 on top of table_114. Use the proximity of the table and the surrounding space in the dining room to accurately identify and retrieve the milk_2115.

Trial and Error: You can not open food_cereal_2087You can not open food_cereal_2087You can not open food_cereal_2087You can not open food_cereal_2087You can not open food_cereal_2087You can not open food_cereal_2087You can not open food_cereal_2087You can not open food_cereal_2087You can not open food_cereal_2087You can not open food_cereal_2087
The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for food_cereal_2087 around kitchen_counter_122.
Action 3: Walk to cupboard_117.
Action 4: look for food_cereal_2087 around cupboard_117.
Action 5: Walk to cupboard_118.
Action 6: Open cupboard_118.
Action 7: look for food_cereal_2087 around cupboard_118.
Action 8: Walk to fryingpan_2154.
Action 9: look for food_cereal_2087 around fryingpan_2154.
Action 10: Walk to kitchen_counter_119.
Action 11: look for food_cereal_2087 around kitchen_counter_119.
Action 12: Walk to fridge_126.
Action 13: Switch off fridge_126.
Action 14: Open fridge_126.
Action 15: look for food_cereal_2087 around fridge_126.
Action 16: Walk to bookshelf_124.
Action 17: Open bookshelf_124.

##############################
From agent.py
exp(milk_2115, bookshelf_124)
Fail to find milk_2115 around bookshelf_124. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(milk_2115, table_114)walk_executor(milk_2115)obs(milk_2115, Determine the current location of the milk)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the cereal)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(milk_2115, table_114)
Find milk_2115. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)obs(milk_2115, Determine the current location of the milk)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the cereal)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
obs(milk_2115, Determine the current location of the milk)
Get this information:  milk_2115 is close to table_114. milk_2115 is close to character_240. milk_2115 is on table_114. milk_2115 is inside dining_room_41.
##############################
From agent.py
walk_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior determine_current_location(item:item):
    body:
        observe(item, "Determine the current location of the item")

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table]==114
        # Select the table_114 in the dining room

        bind milk: item where:
            is_milk(milk) and id[milk]==2115
        # Select the milk with ID 2115

        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal]==2087
        # Select the cereal with ID 2087

        foreach table: item:
            if is_table(table) and inside(table, dining_room):
                locate_item_on_table(milk, table)
                determine_current_location(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior determine_current_location(item:item):
    body:
        observe(item, "Determine the current location of the item")

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table]==114
        # Select the table_114 in the dining room

        bind milk: item where:
            is_milk(milk) and id[milk]==2115
        # Select the milk with ID 2115

        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal]==2087
        # Select the cereal with ID 2087

        foreach table: item:
            if is_table(table) and inside(table, dining_room):
                locate_item_on_table(milk, table)
                determine_current_location(cereal)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the item)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_trashcan_99(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_kiwi,trashcan_instance)
        else:
            exp(food_kiwi,trashcan_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,trashcan_instance]=True
        close[trashcan_instance,food_kiwi]=True
    

behavior find_food_carrot_2015_around_trashcan_99(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_carrot,trashcan_instance)
        else:
            exp(food_carrot,trashcan_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,trashcan_instance]=True
        close[trashcan_instance,food_carrot]=True
    

behavior find_food_food_2021_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def locate_cereal_and_milk(cereal:item, milk:item):
    behavior locate_item(item:item):
        body:
            observe(item, "Determine the current location of the item")

    behavior __goal__():
        body:
            locate_item(cereal)
            locate_item(milk)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        locate_cereal_and_milk(cereal, milk)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_trashcan_99(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_kiwi,trashcan_instance)
        else:
            exp(food_kiwi,trashcan_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,trashcan_instance]=True
        close[trashcan_instance,food_kiwi]=True
    

behavior find_phone_2016_around_home_office_241(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(phone,home_office_instance)
        else:
            exp(phone,home_office_instance)
    eff:
        unknown[phone]=False
        close[phone,home_office_instance]=True
        close[home_office_instance,phone]=True
    

behavior find_food_food_2073_around_trashcan_99(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_food,trashcan_instance)
        else:
            exp(food_food,trashcan_instance)
    eff:
        unknown[food_food]=False
        close[food_food,trashcan_instance]=True
        close[trashcan_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_milk(milk:item):
    body:
        observe(milk, "Determine the current location of milk")

behavior locate_cereal(cereal:item):
    body:
        observe(cereal, "Determine the current location of cereal")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        locate_milk(milk)
        locate_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_milk(milk:item):
    body:
        observe(milk, "Determine the current location of milk")

behavior locate_cereal(cereal:item):
    body:
        observe(cereal, "Determine the current location of cereal")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        locate_milk(milk)
        locate_cereal(cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)obs(milk_2115, Determine the current location of milk)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of cereal)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
obs(milk_2115, Determine the current location of milk)
Get this information:  milk_2115 is close to table_114. milk_2115 is close to character_240. milk_2115 is on table_114. milk_2115 is inside dining_room_41.
##############################
From agent.py
walk_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_milk_and_cereal(milk:item, cereal:item):
    body:
        observe(milk, "Determine the current location of the milk")
        observe(cereal, "Determine the current location of the cereal")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        locate_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_milk_and_cereal(milk:item, cereal:item):
    body:
        observe(milk, "Determine the current location of the milk")
        observe(cereal, "Determine the current location of the cereal")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        locate_milk_and_cereal(milk, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)obs(milk_2115, Determine the current location of the milk)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the cereal)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
obs(milk_2115, Determine the current location of the milk)
Get this information:  milk_2115 is close to table_114. milk_2115 is close to character_240. milk_2115 is on table_114. milk_2115 is inside dining_room_41.
##############################
From agent.py
walk_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2088_around_kitchen_counter_123(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cheese,kitchen_counter_instance)
        else:
            exp(food_cheese,kitchen_counter_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cheese]=True
    

behavior find_food_food_2021_around_food_food_2021(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2021
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_item_location(item:item, location:item):
    body:
        achieve_once close_char(char, location)
        # Move close to the location
        observe(item, "Determine the current location of the item")
        # Find the items location

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Identify the specific table in the dining room

        find_item_location(milk, table)
        find_item_location(cereal, dining_room)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_item_location(item:item, location:item):
    body:
        achieve_once close_char(char, location)
        # Move close to the location
        observe(item, "Determine the current location of the item")
        # Find the items location

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Identify the specific table in the dining room

        find_item_location(milk, table)
        find_item_location(cereal, dining_room)
 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)obs(milk_2115, Determine the current location of the item)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the item)
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
obs(milk_2115, Determine the current location of the item)
Get this information:  milk_2115 is close to table_114. milk_2115 is on table_114. milk_2115 is inside dining_room_41.
##############################
From agent.py
walk_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_plate_2152(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_carrot,plate_instance)
        else:
            exp(food_carrot,plate_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,plate_instance]=True
        close[plate_instance,food_carrot]=True
    

behavior find_food_butter_2007_around_kitchen_counter_123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_milk(milk:item, table:item):
    body:
        achieve_once close_char(char, table)
        # Approach the table where milk is supposed to be located
        observe(milk, "Determine the current location of the milk")

def locate_cereal(cereal:item):
    if visited(cereal):
        achieve_once close_char(char, cereal)
    else:
        observe(cereal, "Determine the current location of the cereal")

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        bind table_114: item where:
            id[table_114] == 114 and is_table(table_114) and inside(table_114, dining_room)
        # Bind table_114 inside the dining room

        bind milk: item where:
            is_milk(milk)
        # Bind the milk item

        locate_milk(milk, table_114)

        bind food_cereal: item where:
            is_food_cereal(food_cereal)
        # Bind food_cereal

        locate_cereal(food_cereal)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_trashcan_99(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_kiwi,trashcan_instance)
        else:
            exp(food_kiwi,trashcan_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,trashcan_instance]=True
        close[trashcan_instance,food_kiwi]=True
    

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_retrieve_milk(milk:item):
    body:
        achieve close_char(char, milk)
        # Move close to the milk for retrieval

def is_cereal_present(cereal:item):
    # Check if cereal is identifiable
    return True

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk item
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room
        
        foreach table: item:
            if is_table(table) and inside(table, dining_room):
                if is_cereal_present(cereal):
                    find_and_retrieve_milk(milk)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_trashcan_99(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_kiwi,trashcan_instance)
        else:
            exp(food_kiwi,trashcan_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,trashcan_instance]=True
        close[trashcan_instance,food_kiwi]=True
    

behavior find_food_onion_2048_around_trashcan_99(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_onion,trashcan_instance)
        else:
            exp(food_onion,trashcan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,trashcan_instance]=True
        close[trashcan_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def locate_cereal_and_milk():
    symbol found_milk = exists milk: item : (is_milk(milk) and close_char(char, milk))
    symbol found_cereal = exists cereal: item : (is_food_cereal(cereal) and close_char(char, cereal))
    return found_milk or found_cereal

behavior observe_dining_room_items(table: item):
    body:
        observe(table, "Identify milk and cereal on the table")

behavior __goal__():
    body:
        if locate_cereal_and_milk():
            bind milk: item where:
                is_milk(milk) and close_char(char, milk)
            bind cereal: item where:
                is_food_cereal(cereal) and close_char(char, cereal)
            # Both milk and cereal can be located directly

        else:
            bind dining_room: item where:
                is_dining_room(dining_room)
            bind table_114: item where:
                is_table(table_114) and inside(table_114, dining_room) and id[table_114] == 114
            # Look for milk and cereal in the dining room specifically on table_114
            observe_dining_room_items(table_114)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_kitchen_counter_123(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_kiwi,kitchen_counter_instance)
        else:
            exp(food_kiwi,kitchen_counter_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_kiwi]=True
    

behavior find_food_onion_2048_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def locate_cereal_and_milk(milk:item, cereal:item, dining_room:item):
    # Behavior to find and locate cereal and milk
    body:
        observe(milk, "Determine the current location of the milk")
        observe(cereal, "Determine the current location of the cereal")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Ensure the binding for the dining room

        locate_cereal_and_milk(milk, cereal, dining_room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_kitchen_counter_123(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_kiwi,kitchen_counter_instance)
        else:
            exp(food_kiwi,kitchen_counter_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_kiwi]=True
    

behavior find_food_onion_2104_around_trashcan_99(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_onion,trashcan_instance)
        else:
            exp(food_onion,trashcan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,trashcan_instance]=True
        close[trashcan_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_cereal(cereal: item):
    body:
        observe(cereal, "Determine the current location of the cereal")

behavior observe_milk(milk: item):
    body:
        observe(milk, "Determine the current location of the milk")

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        if not visited(cereal):
            observe_cereal(cereal)
            # Locate the cereal

        if not visited(milk):
            observe_milk(milk)
            # Locate the milk

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior observe_cereal(cereal: item):
    body:
        observe(cereal, "Determine the current location of the cereal")

behavior observe_milk(milk: item):
    body:
        observe(milk, "Determine the current location of the milk")

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        if not visited(cereal):
            observe_cereal(cereal)
            # Locate the cereal

        if not visited(milk):
            observe_milk(milk)
            # Locate the milk

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the cereal)walk_executor(milk_2115)obs(milk_2115, Determine the current location of the milk)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_walllamp_36(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==36
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(food_kiwi,walllamp_instance)
        else:
            exp(food_kiwi,walllamp_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,walllamp_instance]=True
        close[walllamp_instance,food_kiwi]=True
    

behavior find_food_carrot_2086_around_trashcan_99(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_carrot,trashcan_instance)
        else:
            exp(food_carrot,trashcan_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,trashcan_instance]=True
        close[trashcan_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_cereal_and_milk(milk:item, cereal:item):
    body:
        observe(milk, "Determine the current location of the milk item")
        observe(cereal, "Determine the current location of the cereal item")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item
        
        locate_cereal_and_milk(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_cereal_and_milk(milk:item, cereal:item):
    body:
        observe(milk, "Determine the current location of the milk item")
        observe(cereal, "Determine the current location of the cereal item")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select a milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item
        
        locate_cereal_and_milk(milk, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)obs(milk_2115, Determine the current location of the milk item)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the cereal item)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
obs(milk_2115, Determine the current location of the milk item)
Get this information:  milk_2115 is close to table_114. milk_2115 is close to character_240. milk_2115 is on table_114. milk_2115 is inside dining_room_41.
##############################
From agent.py
walk_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_food_bread_2084(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_bread_instance:item where:
            is_food_bread(food_bread_instance) and id[food_bread_instance]==2084
        achieve close_char(char,food_bread_instance)
        if can_open(food_bread_instance):
            achieve_once open(food_bread_instance)
            exp(food_food,food_bread_instance)
        else:
            exp(food_food,food_bread_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_bread_instance]=True
        close[food_bread_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
behavior find_cereal_and_milk(milk:item, cereal:item, dining_room:item, table:item):
    body:
        observe(milk, "Determine the current location of the milk")
        observe(cereal, "Determine the current location of the cereal")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind cereal: item where:
            is_food_cereal(cereal)
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        find_cereal_and_milk(milk, cereal, dining_room, table)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior find_cereal_and_milk(milk:item, cereal:item, dining_room:item, table:item):
    body:
        observe(milk, "Determine the current location of the milk")
        observe(cereal, "Determine the current location of the cereal")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind cereal: item where:
            is_food_cereal(cereal)
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        find_cereal_and_milk(milk, cereal, dining_room, table)
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)obs(milk_2115, Determine the current location of the milk)walk_executor(food_cereal_2087)open_executor(food_cereal_2087)obs(food_cereal_2087, Determine the current location of the cereal)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
obs(milk_2115, Determine the current location of the milk)
Get this information:  milk_2115 is close to table_114. milk_2115 is close to character_240. milk_2115 is on table_114. milk_2115 is inside dining_room_41.
##############################
From agent.py
walk_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_trashcan_99(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_kiwi,trashcan_instance)
        else:
            exp(food_kiwi,trashcan_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,trashcan_instance]=True
        close[trashcan_instance,food_kiwi]=True
    

behavior find_food_cheese_2072_around_kitchen_counter_123(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cheese,kitchen_counter_instance)
        else:
            exp(food_cheese,kitchen_counter_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
def locate_milk(milk:item, table:item):
    body:
        observe(milk, "Determine the current location of the milk item")

def locate_cereal(cereal:item):
    body:
        observe(cereal, "Determine the current location of the cereal item")

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and id[table]==114
        # Select table with ID 114 inside the dining room 41

        bind milk: item where:
            is_milk(milk) and on(milk, table) and inside(table, dining_room)
        # Select milk that is on a table within the dining room

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        locate_milk(milk, table)
        locate_cereal(cereal)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation
behavior locate_cereal_and_milk(milk:item, table:item):
    body:
        achieve close_char(char, table)
        observe(milk, "Determine the current location of the milk")

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select table with ID 114

        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the milk with ID 2115

        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2087
        # Select the cereal with ID 2087

        locate_cereal_and_milk(milk, table)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior locate_cereal_and_milk(milk:item, table:item):
    body:
        achieve close_char(char, table)
        observe(milk, "Determine the current location of the milk")

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select table with ID 114

        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the milk with ID 2115

        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal] == 2087
        # Select the cereal with ID 2087

        locate_cereal_and_milk(milk, table)
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)obs(milk_2115, Determine the current location of the milk)
##############################
From agent.py
walk_executor(table_114)
Robot find: Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
obs(milk_2115, Determine the current location of the milk)
Get this information:  milk_2115 is close to table_114. milk_2115 is on table_114. milk_2115 is inside dining_room_41.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2054_around_kitchen_counter_123(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_kiwi,kitchen_counter_instance)
        else:
            exp(food_kiwi,kitchen_counter_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_kiwi]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk:item, stove:item):
    body:
        achieve_once close_char(char, milk) 
        # Ensure the character is close to the milk
        achieve_once has_water(milk) 
        # Assume milk is considered as a liquid similar to water for heating
        achieve_once on(milk, stove)
        # Place the milk on the stove
        achieve is_on(stove)
        # Ensure the stove is on to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the milk with ID 2115

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_milk(milk, stove)
        # Heat the milk on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_milk(milk:item, stove:item):
    body:
        achieve_once close_char(char, milk) 
        # Ensure the character is close to the milk
        achieve_once has_water(milk) 
        # Assume milk is considered as a liquid similar to water for heating
        achieve_once on(milk, stove)
        # Place the milk on the stove
        achieve is_on(stove)
        # Ensure the stove is on to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the milk with ID 2115

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_milk(milk, stove)
        # Heat the milk on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(milk_2115, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the milk_2115. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the milk_2115. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the milk_2115. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(milk_2115, stove_2135)
Robot find: Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. milk_2115 is close stove_2135. milk_2115 is on stove_2135. stove_2135 is close milk_2115. milk_2115 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_milk_and_add_cereal_to_cup(milk:item, cereal:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        pour_milk_and_add_cereal_to_cup(milk, cereal, cup)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_milk_and_add_cereal_to_cup(milk:item, cereal:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal item

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        pour_milk_and_add_cereal_to_cup(milk, cereal, cup)


##############################
From agent.py-> find a plan in act()
grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)walk_executor(food_cereal_2087)grab_executor(food_cereal_2087)walk_executor(cup_2132)putin_executor(food_cereal_2087, cup_2132)
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the milk_2115. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the milk_2115. Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
putin_executor(milk_2115, cup_2132)
Robot find: Robot is close to the milk_2115. Robot is close to the table_114. Robot is close to the cup_2132. milk_2115 is close cup_2132. cup_2132 is close milk_2115. milk_2115 is inside cup_2132. milk_2115 released by right hand. 
##############################
From agent.py
walk_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. 
##############################
From agent.py
grab_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. Grabbing food_cereal_2087 by right hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the food_cereal_2087. Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
putin_executor(food_cereal_2087, cup_2132)
Robot find: Robot is close to the food_cereal_2087. Robot is close to the table_114. Robot is close to the cup_2132. cup_2132 is close food_cereal_2087. food_cereal_2087 is inside cup_2132. food_cereal_2087 is close cup_2132. food_cereal_2087 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fryingpan_2154)', 'walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'walk_executor(bookshelf_124)', 'open_executor(bookshelf_124)', 'walk_executor(table_114)', 'walk_executor(milk_2115)', 'walk_executor(food_cereal_2087)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'walk_executor(milk_2115)', 'walk_executor(food_cereal_2087)', 'open_executor(food_cereal_2087) (Failed)', 'walk_executor(milk_2115)', 'walk_executor(food_cereal_2087)', 'open_executor(food_cereal_2087) (Failed)', 'walk_executor(table_114)', 'walk_executor(food_cereal_2087)', 'open_executor(food_cereal_2087) (Failed)', 'open_executor(food_cereal_2087) (Failed)', 'walk_executor(milk_2115)', 'walk_executor(food_cereal_2087)', 'open_executor(food_cereal_2087) (Failed)', 'walk_executor(milk_2115)', 'walk_executor(food_cereal_2087)', 'open_executor(food_cereal_2087) (Failed)', 'walk_executor(table_114)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(milk_2115, stove_2135)', 'switchon_executor(stove_2135)', 'grab_executor(milk_2115)', 'walk_executor(cup_2132)', 'putin_executor(milk_2115, cup_2132)', 'walk_executor(food_cereal_2087)', 'grab_executor(food_cereal_2087)', 'walk_executor(cup_2132)', 'putin_executor(food_cereal_2087, cup_2132)']
Time info:
Time consume: 587 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 112
goal generate times: 34
goal correct times: 0
action_num: 58

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
