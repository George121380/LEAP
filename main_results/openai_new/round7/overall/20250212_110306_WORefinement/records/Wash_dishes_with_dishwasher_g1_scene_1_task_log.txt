From agent.py
Reset goals: The sub-goals are: 
['1. Identify the bowls and plates in need of washing.', '2. Place the identified bowls and plates in the dishwasher.', '3. Run the dishwasher to wash the bowls and plates.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2152_around_sink_19(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(plate,sink_instance)
        else:
            exp(plate,sink_instance)
    eff:
        unknown[plate]=False
        close[plate,sink_instance]=True
        close[sink_instance,plate]=True
    

behavior find_bowl_2140_around_sink_19(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_plate_or_bowl(item:item):
    # Function to check if an item is either a plate or a bowl
    return is_plate(item) or is_bowl(item)

behavior identify_dishes():
    body:
        observe(dishes, "Determine the identity of the items as plates or bowls")

behavior __goal__():
    body:
        foreach dishes: item:
            if is_plate_or_bowl(dishes):
                identify_dishes()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2152_around_dishwasher_129(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2142_around_sink_19(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_dirty_bowls_or_plates():
    # Function to check if there are dirty bowls or plates
    symbol has_dirty_items = exists o: item : ((is_bowl(o) or is_plate(o)) and dirty(o))
    return has_dirty_items

behavior __goal__():
    body:
        if has_dirty_bowls_or_plates():
            # If there are known dirty bowls or plates, approach them
            foreach o: item:
                if (is_bowl(o) or is_plate(o)) and dirty(o):
                    achieve close_char(char, o)
        else:
            # If no known dirty bowls or plates, inspect unvisited items
            foreach o: item:
                if (is_bowl(o) or is_plate(o)) and not visited(o):
                    observe(o, "Check if it is dirty")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_dirty_bowls_or_plates():
    # Function to check if there are dirty bowls or plates
    symbol has_dirty_items = exists o: item : ((is_bowl(o) or is_plate(o)) and dirty(o))
    return has_dirty_items

behavior __goal__():
    body:
        if has_dirty_bowls_or_plates():
            # If there are known dirty bowls or plates, approach them
            foreach o: item:
                if (is_bowl(o) or is_plate(o)) and dirty(o):
                    achieve close_char(char, o)
        else:
            # If no known dirty bowls or plates, inspect unvisited items
            foreach o: item:
                if (is_bowl(o) or is_plate(o)) and not visited(o):
                    observe(o, "Check if it is dirty")

##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)exp(bowl_2140, sink_19)walk_executor(bowl_2140)obs(bowl_2140, Check if it is dirty)walk_executor(sink_19)exp(bowl_2141, sink_19)walk_executor(bowl_2141)obs(bowl_2141, Check if it is dirty)walk_executor(sink_19)exp(bowl_2142, sink_19)walk_executor(bowl_2142)obs(bowl_2142, Check if it is dirty)walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(plate_2152, dishwasher_129)walk_executor(plate_2152)obs(plate_2152, Check if it is dirty)
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, mat_32, phone_2029, cleaning_solution_2143, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
exp(bowl_2140, sink_19)
Fail to find bowl_2140 around sink_19. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_270)exp(bowl_2140, table_270)walk_executor(bowl_2140)obs(bowl_2140, Check if it is dirty)walk_executor(table_270)exp(bowl_2141, table_270)walk_executor(bowl_2141)obs(bowl_2141, Check if it is dirty)walk_executor(table_270)exp(bowl_2142, table_270)walk_executor(bowl_2142)obs(bowl_2142, Check if it is dirty)walk_executor(cupboard_117)exp(plate_2152, cupboard_117)walk_executor(plate_2152)obs(plate_2152, Check if it is dirty)
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
exp(bowl_2140, table_270)
Fail to find bowl_2140 around table_270. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(bowl_2140, cupboard_117)walk_executor(bowl_2140)obs(bowl_2140, Check if it is dirty)walk_executor(cupboard_117)exp(bowl_2141, cupboard_117)walk_executor(bowl_2141)obs(bowl_2141, Check if it is dirty)walk_executor(cupboard_117)exp(bowl_2142, cupboard_117)walk_executor(bowl_2142)obs(bowl_2142, Check if it is dirty)walk_executor(table_199)exp(plate_2152, table_199)walk_executor(plate_2152)obs(plate_2152, Check if it is dirty)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(bowl_2140, cupboard_117)
Fail to find bowl_2140 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(bowl_2140, cupboard_118)walk_executor(bowl_2140)obs(bowl_2140, Check if it is dirty)walk_executor(cupboard_118)exp(bowl_2141, cupboard_118)walk_executor(bowl_2141)obs(bowl_2141, Check if it is dirty)walk_executor(cupboard_118)exp(bowl_2142, cupboard_118)walk_executor(bowl_2142)obs(bowl_2142, Check if it is dirty)walk_executor(cupboard_118)exp(plate_2152, cupboard_118)walk_executor(plate_2152)obs(plate_2152, Check if it is dirty)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(bowl_2140, cupboard_118)
Fail to find bowl_2140 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(bowl_2140, dishwasher_129)walk_executor(bowl_2140)obs(bowl_2140, Check if it is dirty)walk_executor(dishwasher_129)exp(bowl_2141, dishwasher_129)walk_executor(bowl_2141)obs(bowl_2141, Check if it is dirty)walk_executor(dishwasher_129)exp(bowl_2142, dishwasher_129)walk_executor(bowl_2142)obs(bowl_2142, Check if it is dirty)walk_executor(dishwasher_129)exp(plate_2152, dishwasher_129)walk_executor(plate_2152)obs(plate_2152, Check if it is dirty)
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. 
##############################
From agent.py
open_executor(dishwasher_129)
Robot find: detergent_2011, measuring_cup_2012, Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is opened. 
##############################
From agent.py
exp(bowl_2140, dishwasher_129)
Fail to find bowl_2140 around dishwasher_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(bowl_2140)obs(bowl_2140, Check if it is dirty)walk_executor(kitchen_counter_119)exp(bowl_2141, kitchen_counter_119)walk_executor(bowl_2141)obs(bowl_2141, Check if it is dirty)walk_executor(kitchen_counter_119)exp(bowl_2142, kitchen_counter_119)walk_executor(bowl_2142)obs(bowl_2142, Check if it is dirty)walk_executor(kitchen_counter_122)exp(plate_2152, kitchen_counter_122)walk_executor(plate_2152)obs(plate_2152, Check if it is dirty)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find all the bowls and plates in the household.', '2. Load the bowls and plates into the dishwasher.', '3. Start the dishwasher to wash the bowls and plates.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_2068_around_ceilinglamp_138(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==138
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(tray,ceilinglamp_instance)
        else:
            exp(tray,ceilinglamp_instance)
    eff:
        unknown[tray]=False
        close[tray,ceilinglamp_instance]=True
        close[ceilinglamp_instance,tray]=True
    

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_bowl_or_plate_in_household():
    # Function to check if there are bowls or plates in the household
    symbol has_bowl_or_plate = exists o: item : (is_bowl(o) or is_plate(o))
    return has_bowl_or_plate

behavior __goal__():
    body:
        if has_bowl_or_plate_in_household():
            # If there are already bowls or plates found, proceed with the task
            foreach o: item:
                if is_bowl(o) or is_plate(o):
                    observe(o, "Check the location of bowls or plates")
        else:
            # If no bowls or plates are found, initiate exploring to locate them
            foreach o: item:
                if is_bowl(o) or is_plate(o) and not visited(o):
                    observe(o, "Search for any unvisited bowls or plates")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_bowl_or_plate_in_household():
    # Function to check if there are bowls or plates in the household
    symbol has_bowl_or_plate = exists o: item : (is_bowl(o) or is_plate(o))
    return has_bowl_or_plate

behavior __goal__():
    body:
        if has_bowl_or_plate_in_household():
            # If there are already bowls or plates found, proceed with the task
            foreach o: item:
                if is_bowl(o) or is_plate(o):
                    observe(o, "Check the location of bowls or plates")
        else:
            # If no bowls or plates are found, initiate exploring to locate them
            foreach o: item:
                if is_bowl(o) or is_plate(o) and not visited(o):
                    observe(o, "Search for any unvisited bowls or plates")

##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)obs(bowl_2140, Check the location of bowls or plates)walk_executor(bowl_2141)obs(bowl_2141, Check the location of bowls or plates)walk_executor(bowl_2142)obs(bowl_2142, Check the location of bowls or plates)walk_executor(plate_2152)obs(plate_2152, Check the location of bowls or plates)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. 
##############################
From agent.py
obs(bowl_2140, Check the location of bowls or plates)
Get this information:  bowl_2140 is close to kitchen_counter_119. bowl_2140 is close to character_240. bowl_2140 is on kitchen_counter_119. bowl_2140 is inside dining_room_41. bowl_2140 is DIRTY.
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2141. 
##############################
From agent.py
obs(bowl_2141, Check the location of bowls or plates)
Get this information:  bowl_2141 is inside dining_room_41. bowl_2141 is close to kitchen_counter_119. bowl_2141 is close to character_240. bowl_2141 is on kitchen_counter_119. bowl_2141 is DIRTY.
##############################
From agent.py
walk_executor(bowl_2142)
Robot find: iron_2161, Robot is close to the kitchen_counter_119. Robot is close to the bowl_2142. 
##############################
From agent.py
obs(bowl_2142, Check the location of bowls or plates)
Get this information:  bowl_2142 is close to iron_2161. bowl_2142 is close to kitchen_counter_119. bowl_2142 is close to character_240. iron_2161 is on bowl_2142. bowl_2142 is on kitchen_counter_119. bowl_2142 is inside dining_room_41. bowl_2142 is DIRTY.
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the plate_2152. 
##############################
From agent.py
obs(plate_2152, Check the location of bowls or plates)
Get this information:  plate_2152 is inside dining_room_41. plate_2152 is close to kitchen_counter_119. plate_2152 is close to character_240. plate_2152 is on kitchen_counter_119. plate_2152 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_items_into_dishwasher(o:item, dishwasher:item):
    body:
        achieve_once inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach o: item:
            if (is_bowl(o) or is_plate(o)) and visited(o):
                load_items_into_dishwasher(o, dishwasher)
        # Load all located bowls and plates into the dishwasher

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior load_items_into_dishwasher(o:item, dishwasher:item):
    body:
        achieve_once inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach o: item:
            if (is_bowl(o) or is_plate(o)) and visited(o):
                load_items_into_dishwasher(o, dishwasher)
        # Load all located bowls and plates into the dishwasher

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_items_to_dishwasher(o:item, dishwasher:item):
    body:
        achieve_once inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach o: item:
            if is_bowl(o) or is_plate(o):
                bind location: item where:
                    visited(location) and close_char(char, location)
                # Choose a location where bowls or plates have been found
                observe(location, "Check if the item is in location")
                if close_char(char, o):
                    load_items_to_dishwasher(o, dishwasher)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2134_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_bowls_and_plates_into_dishwasher(dish:item, dishwasher:item):
    body:
        achieve_once inside(dish, dishwasher)
        # Load the dish into the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach dish: item:
            if is_bowl(dish) or is_plate(dish):
                load_bowls_and_plates_into_dishwasher(dish, dishwasher)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior load_bowls_and_plates_into_dishwasher(dish:item, dishwasher:item):
    body:
        achieve_once inside(dish, dishwasher)
        # Load the dish into the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach dish: item:
            if is_bowl(dish) or is_plate(dish):
                load_bowls_and_plates_into_dishwasher(dish, dishwasher)

##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. 
##############################
From agent.py
grab_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2140. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. 
##############################
From agent.py
putin_executor(bowl_2140, dishwasher_129)
Robot find: Robot is close to the bowl_2140. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is close bowl_2140. bowl_2140 is close dishwasher_129. bowl_2140 is inside dishwasher_129. bowl_2140 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(bowl_2141)
Robot find: Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. Grabbing bowl_2141 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2141. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the measuring_cup_2012. 
##############################
From agent.py
putin_executor(bowl_2141, dishwasher_129)
Robot find: Robot is close to the bowl_2141. Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the measuring_cup_2012. dishwasher_129 is close bowl_2141. bowl_2141 is inside dishwasher_129. bowl_2141 is close dishwasher_129. bowl_2141 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2142)
Robot find: Robot is close to the bowl_2142. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(bowl_2142)
Robot find: Robot is close to the bowl_2142. Robot is close to the kitchen_counter_119. Grabbing bowl_2142 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the bowl_2142. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. 
##############################
From agent.py
putin_executor(bowl_2142, dishwasher_129)
Robot find: Robot is close to the bowl_2142. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. dishwasher_129 is close bowl_2142. bowl_2142 is close dishwasher_129. bowl_2142 is inside dishwasher_129. bowl_2142 released by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the plate_2152. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. Robot is close to the bowl_2142. 
##############################
From agent.py
putin_executor(plate_2152, dishwasher_129)
Robot find: Robot is close to the plate_2152. Robot is close to the dishwasher_129. Robot is close to the measuring_cup_2012. Robot is close to the detergent_2011. Robot is close to the bowl_2140. Robot is close to the bowl_2141. Robot is close to the bowl_2142. dishwasher_129 is close plate_2152. plate_2152 is inside dishwasher_129. plate_2152 is close dishwasher_129. plate_2152 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        # Ensure the dishwasher is closed
        achieve_once is_on(dishwasher)
        # Start the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        start_dishwasher(dishwasher)
        # Start the dishwasher to wash the bowls and plates

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior start_dishwasher(dishwasher:item):
    body:
        achieve_once closed(dishwasher)
        # Ensure the dishwasher is closed
        achieve_once is_on(dishwasher)
        # Start the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        start_dishwasher(dishwasher)
        # Start the dishwasher to wash the bowls and plates

##############################
From agent.py-> find a plan in act()
close_executor(dishwasher_129)switchon_executor(dishwasher_129)
##############################
From agent.py
close_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. dishwasher_129 is closed. 
##############################
From agent.py
switchon_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. dishwasher_129 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
wash all the bowls and the plates with dishwasher
Action History:
['walk_executor(sink_19)', 'walk_executor(table_270)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(dishwasher_129)', 'open_executor(dishwasher_129)', 'walk_executor(kitchen_counter_119)', 'walk_executor(bowl_2140)', 'walk_executor(bowl_2141)', 'walk_executor(bowl_2142)', 'walk_executor(plate_2152)', 'walk_executor(bowl_2140)', 'grab_executor(bowl_2140)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2140, dishwasher_129)', 'walk_executor(bowl_2141)', 'grab_executor(bowl_2141)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2141, dishwasher_129)', 'walk_executor(bowl_2142)', 'grab_executor(bowl_2142)', 'walk_executor(dishwasher_129)', 'putin_executor(bowl_2142, dishwasher_129)', 'walk_executor(plate_2152)', 'grab_executor(plate_2152)', 'walk_executor(dishwasher_129)', 'putin_executor(plate_2152, dishwasher_129)', 'close_executor(dishwasher_129)', 'switchon_executor(dishwasher_129)']
Time info:
Time consume: 238 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 123
goal generate times: 7
goal correct times: 0
action_num: 30

Task complete rate:
1
Scene_id: 1
##############################
