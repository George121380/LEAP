From agent.py
Reset goals: The sub-goals are: 
['1. Peel and slice the bananas.', '2. Heat oil in a pan.', '3. Fry the banana slices until golden brown.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_fridge_126(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board
        achieve_once cut(banana)
        # Slice the banana using the knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana item

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_and_slice_bananas(banana, cutting_board, knife)
        # Peel and slice the banana on the cutting board

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board
        achieve_once cut(banana)
        # Slice the banana using the knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana item

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_and_slice_bananas(banana, cutting_board, knife)
        # Peel and slice the banana on the cutting board

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_banana_2083, fridge_126)walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_banana_2083, fridge_126)
Find food_banana_2083. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2083)walk_executor(cutting_board_2123)put_executor(food_banana_2083, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_banana_2083 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_banana_2083, cutting_board_2123)
Robot find: Robot is close to the food_banana_2083. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_banana_2083. food_banana_2083 is close cutting_board_2123. food_banana_2083 is on cutting_board_2123. food_banana_2083 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_76)
Robot find: Robot is close to the knifeblock_76. 
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Fail to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_272)exp(knife_2122, desk_272)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(desk_272)
Robot find: stamp_2022, phone_2147, mouse_280, keyboard_278, headset_2146, chair_271, stamp_2043, Robot is close to the desk_272. 
##############################
From agent.py
exp(knife_2122, desk_272)
Fail to find knife_2122 around desk_272. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)open_executor(microwave_135)exp(knife_2122, microwave_135)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
exp(knife_2122, microwave_135)
Fail to find knife_2122 around microwave_135. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(knife_2122, kitchen_counter_123)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(knife_2122, kitchen_counter_123)
Fail to find knife_2122 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_banana_2083)cut_executor(food_banana_2083)
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
cut_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to peel the banana before slicing. The action of removing the banana's peel has not been performed.
##############################
From agent.py
Human Instruction: The robot needs to peel the banana before slicing. The action of removing the banana's peel has not been performed.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_banana_2083 around fridge_126.
Action 5: Grab food_banana_2083.
Action 6: Walk to cutting_board_2123.
Action 7: Put food_banana_2083 on cutting_board_2123.
Action 8: Walk to knifeblock_76.
Action 9: look for knife_2122 around knifeblock_76.
Action 10: Walk to desk_272.
Action 11: look for knife_2122 around desk_272.
Action 12: Walk to microwave_135.
Action 13: Open microwave_135.
Action 14: look for knife_2122 around microwave_135.
Action 15: Walk to kitchen_counter_123.
Action 16: look for knife_2122 around kitchen_counter_123.
Action 17: Walk to knife_2035.
Action 18: Grab knife_2035.
Action 19: Walk to food_banana_2083.
Action 20: Cut food_banana_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_bowl_2140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

behavior find_knife_2035_around_cupboard_118(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board
        achieve_once cut(banana)
        # Slice the banana using the knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana item

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_and_slice_bananas(banana, cutting_board, knife)
        # Peel and slice the banana on the cutting board

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board
        achieve_once cut(banana)
        # Slice the banana using the knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana item

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_and_slice_bananas(banana, cutting_board, knife)
        # Peel and slice the banana on the cutting board

##############################
From agent.py-> find a plan in act()
cut_executor(food_banana_2083)
##############################
From agent.py
cut_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to peel the banana before slicing it. Ensure that the action of removing the banana's peel is performed before proceeding to slice it on the cutting board.
##############################
From agent.py
Human Instruction: The robot needs to peel the banana before slicing it. Ensure that the action of removing the banana's peel is performed before proceeding to slice it on the cutting board.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_banana_2083 around fridge_126.
Action 5: Grab food_banana_2083.
Action 6: Walk to cutting_board_2123.
Action 7: Put food_banana_2083 on cutting_board_2123.
Action 8: Walk to knifeblock_76.
Action 9: look for knife_2122 around knifeblock_76.
Action 10: Walk to desk_272.
Action 11: look for knife_2122 around desk_272.
Action 12: Walk to microwave_135.
Action 13: Open microwave_135.
Action 14: look for knife_2122 around microwave_135.
Action 15: Walk to kitchen_counter_123.
Action 16: look for knife_2122 around kitchen_counter_123.
Action 17: Walk to knife_2035.
Action 18: Grab knife_2035.
Action 19: Walk to food_banana_2083.
Action 20: Cut food_banana_2083.
Action 21: Cut food_banana_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2046_around_bowl_2140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

behavior find_knife_2037_around_cupboard_118(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board
        achieve_once cut(banana)
        # Slice the banana using the knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana item

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_and_slice_bananas(banana, cutting_board, knife)
        # Peel and slice the banana on the cutting board using the knife
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):
    body:
        achieve_once on(banana, cutting_board)
        # Place the banana on the cutting board
        achieve_once cut(banana)
        # Slice the banana using the knife

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana item

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_and_slice_bananas(banana, cutting_board, knife)
        # Peel and slice the banana on the cutting board using the knife
##############################
From agent.py-> find a plan in act()
cut_executor(food_banana_2083)
##############################
From agent.py
cut_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to perform the action of peeling the banana before slicing it.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_glue_2045_around_bathroom_cabinet_17(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(glue,bathroom_cabinet_instance)
        else:
            exp(glue,bathroom_cabinet_instance)
    eff:
        unknown[glue]=False
        close[glue,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,glue]=True
    

behavior find_homework_2047_around_computer_276(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(homework,computer_instance)
        else:
            exp(homework,computer_instance)
    eff:
        unknown[homework]=False
        close[homework,computer_instance]=True
        close[computer_instance,homework]=True
    

#exp_behavior_end

#goal_representation
behavior heat_oil_in_pan(oil:item, pan:item, stove:item):
    body:
        achieve_once inside(oil, pan)
        # Add the oil into the pan
        achieve_once on(pan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the oil

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil item

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_oil_in_pan(oil, pan, stove)
        # Heat the oil in the pan on the stove
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior heat_oil_in_pan(oil:item, pan:item, stove:item):
    body:
        achieve_once inside(oil, pan)
        # Add the oil into the pan
        achieve_once on(pan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the oil

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select oil item

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_oil_in_pan(oil, pan, stove)
        # Heat the oil in the pan on the stove
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. oil_2149 is inside fryingpan_2154. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 released by left hand. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. Grabbing fryingpan_2154 by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_sliced_bananas(sliced_bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(sliced_bananas, fryingpan)
        # Place the sliced bananas inside the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Ensure the stove is on to fry the bananas till golden brown

behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select sliced bananas that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_sliced_bananas(sliced_bananas, fryingpan, stove)
        # Fry the sliced bananas until golden brown on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_sliced_bananas(sliced_bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(sliced_bananas, fryingpan)
        # Place the sliced bananas inside the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Ensure the stove is on to fry the bananas till golden brown

behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select sliced bananas that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_sliced_bananas(sliced_bananas, fryingpan, stove)
        # Fry the sliced bananas until golden brown on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_bowl_2140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(oil,bowl_instance)
        else:
            exp(oil,bowl_instance)
    eff:
        unknown[oil]=False
        close[oil,bowl_instance]=True
        close[bowl_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior fry_sliced_bananas(sliced_bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(sliced_bananas, fryingpan)
        # Place the sliced bananas inside the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Ensure the stove is on to fry the bananas till golden brown

behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select sliced bananas that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_sliced_bananas(sliced_bananas, fryingpan, stove)
        # Fry the sliced bananas until golden brown on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

behavior find_knife_2122_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_sliced_bananas(sliced_bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(sliced_bananas, fryingpan)
        # Place the sliced bananas inside the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Ensure the stove is on to fry the bananas till golden brown

behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select sliced bananas that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_sliced_bananas(sliced_bananas, fryingpan, stove)
        # Fry the sliced bananas until golden brown on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2035_around_curtain_289(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==289
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(knife,curtain_instance)
        else:
            exp(knife,curtain_instance)
    eff:
        unknown[knife]=False
        close[knife,curtain_instance]=True
        close[curtain_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_sliced_bananas(sliced_bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(sliced_bananas, fryingpan)
        # Place the sliced bananas inside the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Ensure the stove is on to fry the bananas till golden brown

behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select sliced bananas that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_sliced_bananas(sliced_bananas, fryingpan, stove)
        # Fry the sliced bananas until golden brown on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_sliced_bananas(sliced_bananas:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(sliced_bananas, fryingpan)
        # Place the sliced bananas inside the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Ensure the stove is on to fry the bananas till golden brown

behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select sliced bananas that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_sliced_bananas(sliced_bananas, fryingpan, stove)
        # Fry the sliced bananas until golden brown on the stove

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the banana slices until golden brown." ?
Answer: Put the banana slices in the frying pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the banana slices in the frying pan to fry.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_banana_slices_in_fryingpan(sliced_banana:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(sliced_banana, fryingpan)
        # Place the banana slices in the frying pan

behavior __goal__():
    body:
        bind sliced_banana: item where:
            is_food_banana(sliced_banana) and cut(sliced_banana)
        # Select sliced bananas that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        put_banana_slices_in_fryingpan(sliced_banana, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2037_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_banana_slices_to_frying_pan(banana_slices:item, fryingpan:item):
    body:
        achieve_once inside(banana_slices, fryingpan)
        # Place the banana slices inside the frying pan

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        add_banana_slices_to_frying_pan(banana_slices, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2037_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_banana_slices_in_frying_pan(banana_slices:item, frying_pan:item):
    body:
        achieve_once inside(banana_slices, frying_pan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the sliced banana

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan

        put_banana_slices_in_frying_pan(banana_slices, frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_cupboard_118(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior place_banana_slices_in_frying_pan(banana_slices:item, frying_pan:item):
    body:
        achieve_once inside(banana_slices, frying_pan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices that have already been cut

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        place_banana_slices_in_frying_pan(banana_slices, frying_pan)
        # Place the banana slices into the frying pan to fry
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_bowl_2140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

behavior find_oil_2013_around_bowl_2140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(oil,bowl_instance)
        else:
            exp(oil,bowl_instance)
    eff:
        unknown[oil]=False
        close[oil,bowl_instance]=True
        close[bowl_instance,oil]=True
    

behavior find_knife_2122_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_banana_slices_in_frying_pan(banana_slices:item, fryingpan:item):
    body:
        achieve_once inside(banana_slices, fryingpan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select banana slices that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        place_banana_slices_in_frying_pan(banana_slices, fryingpan)
        # Place the banana slices in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

behavior find_oil_2013_around_pot_2138(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(oil,pot_instance)
        else:
            exp(oil,pot_instance)
    eff:
        unknown[oil]=False
        close[oil,pot_instance]=True
        close[pot_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior place_banana_slices_in_frying_pan(banana_slices:item, fryingpan:item):
    body:
        achieve_once inside(banana_slices, fryingpan)
        # Place the banana slices inside the frying pan

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        place_banana_slices_in_frying_pan(banana_slices, fryingpan)
        # Place the sliced bananas into the frying pan to fry
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the banana slices in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_cupboard_118(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_oil_2149_around_filing_cabinet_200(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==200
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(oil,filing_cabinet_instance)
        else:
            exp(oil,filing_cabinet_instance)
    eff:
        unknown[oil]=False
        close[oil,filing_cabinet_instance]=True
        close[filing_cabinet_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior put_banana_slices_in_fryingpan(banana_slices:item, fryingpan:item):
    body:
        achieve_once inside(banana_slices, fryingpan)

behavior __goal__():
    body:
        bind sliced_banana: item where:
            is_food_banana(sliced_banana) and cut(sliced_banana)
        # Select the sliced banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        put_banana_slices_in_fryingpan(sliced_banana, fryingpan)
        # Put the banana slices in the frying pan
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_bowl_2140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

behavior find_oil_2013_around_dishwasher_129(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(oil,dishwasher_instance)
        else:
            exp(oil,dishwasher_instance)
    eff:
        unknown[oil]=False
        close[oil,dishwasher_instance]=True
        close[dishwasher_instance,oil]=True
    

behavior find_knife_2122_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior place_banana_slices_in_frying_pan(sliced_banana:item, frying_pan:item):
    body:
        achieve_once inside(sliced_banana, frying_pan)

behavior __goal__():
    body:
        bind sliced_banana: item where:
            is_food_banana(sliced_banana) and cut(sliced_banana)
        # Select the sliced banana that is already cut

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        place_banana_slices_in_frying_pan(sliced_banana, frying_pan)
        # Place the banana slices in the frying pan
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_bowl_2140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2037_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_banana_slices_in_frying_pan(banana_slices:item, fryingpan:item):
    body:
        achieve_once inside(banana_slices, fryingpan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select banana slices that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        place_banana_slices_in_frying_pan(banana_slices, fryingpan)
        # Place the banana slices in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_ceilinglamp_138(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==138
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(knife,ceilinglamp_instance)
        else:
            exp(knife,ceilinglamp_instance)
    eff:
        unknown[knife]=False
        close[knife,ceilinglamp_instance]=True
        close[ceilinglamp_instance,knife]=True
    

behavior find_oil_2013_around_dishwasher_129(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(oil,dishwasher_instance)
        else:
            exp(oil,dishwasher_instance)
    eff:
        unknown[oil]=False
        close[oil,dishwasher_instance]=True
        close[dishwasher_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior place_banana_slices_in_fryingpan(banana_slices:item, fryingpan:item):
    body:
        achieve_once inside(banana_slices, fryingpan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the sliced bananas that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        place_banana_slices_in_fryingpan(banana_slices, fryingpan)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior put_banana_slices_in_frying_pan(banana_slices:item, fryingpan:item):
    body:
        achieve_once inside(banana_slices, fryingpan)
        # Place the banana slices in the frying pan

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the cut banana slices

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        put_banana_slices_in_frying_pan(banana_slices, fryingpan)
        # Put the banana slices in the frying pan
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_pot_2138(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(oil,pot_instance)
        else:
            exp(oil,pot_instance)
    eff:
        unknown[oil]=False
        close[oil,pot_instance]=True
        close[pot_instance,oil]=True
    

behavior find_knife_2122_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior place_banana_slices_in_frying_pan(banana_slices:item, frying_pan:item):
    body:
        achieve_once inside(banana_slices, frying_pan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the sliced bananas that are already cut

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        place_banana_slices_in_frying_pan(banana_slices, frying_pan)
        # Place the banana slices in the frying pan

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put the banana slices in the frying pan." ?
Answer: Put the banana in the frying pan.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_bowl_2140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_sliced_bananas(banana_slices:item, fryingpan:item):
    body:
        achieve_once inside(banana_slices, fryingpan)
        # Place the banana slices inside the frying pan

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        fry_sliced_bananas(banana_slices, fryingpan)
        # Place the banana slices in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

behavior find_knife_2037_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_banana_slices_in_fryingpan(banana_slices:item, fryingpan:item):
    body:
        achieve_once inside(banana_slices, fryingpan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select banana slices that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        place_banana_slices_in_fryingpan(banana_slices, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_trashcan_99(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(oil,trashcan_instance)
        else:
            exp(oil,trashcan_instance)
    eff:
        unknown[oil]=False
        close[oil,trashcan_instance]=True
        close[trashcan_instance,oil]=True
    

behavior find_knife_2122_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_banana_slices_in_fryingpan(sliced_bananas:item, fryingpan:item):
    body:
        achieve_once inside(sliced_bananas, fryingpan)
        # Place the sliced bananas in the fryingpan

behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select sliced bananas that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan

        place_banana_slices_in_fryingpan(sliced_bananas, fryingpan)
        # Place the banana slices in the fryingpan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

behavior find_knife_2122_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_banana_slices_in_pan(banana_slices:item, fryingpan:item):
    body:
        achieve_once inside(banana_slices, fryingpan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the sliced banana that is already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        place_banana_slices_in_pan(banana_slices, fryingpan)
        # Place the banana slices in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_bowl_2140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_banana_slices_in_fryingpan(banana_slices:item, fryingpan:item):
    body:
        achieve_once inside(banana_slices, fryingpan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices that have already been cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        place_banana_slices_in_fryingpan(banana_slices, fryingpan)
        # Put the banana slices in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_bowl_2140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior place_banana_slices_in_fryingpan(banana_slices:item, fryingpan:item):
    body:
        achieve_once inside(banana_slices, fryingpan)

behavior __goal__():
    body:
        bind banana_slices: item where:
            is_food_banana(banana_slices) and cut(banana_slices)
        # Select the banana slices that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        place_banana_slices_in_fryingpan(banana_slices, fryingpan)
        # Place the banana slices in the frying pan

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the banana in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

behavior find_knife_2035_around_table_199(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(knife,table_instance)
        else:
            exp(knife,table_instance)
    eff:
        unknown[knife]=False
        close[knife,table_instance]=True
        close[table_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_banana_in_frying_pan(sliced_banana:item, frying_pan:item):
    body:
        achieve_once inside(sliced_banana, frying_pan)
        # Place the sliced banana inside the frying pan

behavior __goal__():
    body:
        bind sliced_banana: item where:
            is_food_banana(sliced_banana) and cut(sliced_banana)
        # Select sliced banana that has been cut

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        put_banana_in_frying_pan(sliced_banana, frying_pan)
        # Put the sliced banana in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

behavior find_knife_2037_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior put_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)
        # Place the banana inside the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the sliced banana item

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        put_banana_in_fryingpan(banana, fryingpan)
        # Place the sliced banana into the frying pan
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_bowl_2140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(oil,bowl_instance)
        else:
            exp(oil,bowl_instance)
    eff:
        unknown[oil]=False
        close[oil,bowl_instance]=True
        close[bowl_instance,oil]=True
    

behavior find_knife_2122_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior put_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)
        # Place the banana in the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select a cut banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        put_banana_in_fryingpan(banana, fryingpan)
        # Put the banana in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_dishwasher_129(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(oil,dishwasher_instance)
        else:
            exp(oil,dishwasher_instance)
    eff:
        unknown[oil]=False
        close[oil,dishwasher_instance]=True
        close[dishwasher_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior place_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the sliced bananas

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select the frying pan that is on the stove

        place_banana_in_fryingpan(banana, fryingpan)
        # Place the sliced bananas into the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior place_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)
        # Place the sliced banana into the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the banana that is already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select the frying pan that is already on the stove

        place_banana_in_fryingpan(banana, fryingpan)
        # Place the sliced banana in the frying pan
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_trashcan_99(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(oil,trashcan_instance)
        else:
            exp(oil,trashcan_instance)
    eff:
        unknown[oil]=False
        close[oil,trashcan_instance]=True
        close[trashcan_instance,oil]=True
    

behavior find_knife_2122_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the sliced banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        put_banana_in_fryingpan(banana, fryingpan)
        # Place the banana in the frying pan

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put the banana in the frying pan." ?
Answer: Put the banana in the frying pan.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)
        # Place the banana into the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select a banana that is already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        put_banana_in_fryingpan(banana, fryingpan)
        # Place the banana in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2035_around_curtain_289(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==289
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(knife,curtain_instance)
        else:
            exp(knife,curtain_instance)
    eff:
        unknown[knife]=False
        close[knife,curtain_instance]=True
        close[curtain_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the banana that is cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        put_banana_in_fryingpan(banana, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_trashcan_99(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_food,trashcan_instance)
        else:
            exp(food_food,trashcan_instance)
    eff:
        unknown[food_food]=False
        close[food_food,trashcan_instance]=True
        close[trashcan_instance,food_food]=True
    

behavior find_oil_2013_around_bowl_2140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(oil,bowl_instance)
        else:
            exp(oil,bowl_instance)
    eff:
        unknown[oil]=False
        close[oil,bowl_instance]=True
        close[bowl_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior place_banana_in_frying_pan(sliced_bananas:item, fryingpan:item):
    body:
        achieve_once inside(sliced_bananas, fryingpan)
        # Place the sliced bananas into the frying pan

behavior __goal__():
    body:
        bind sliced_bananas: item where:
            is_food_banana(sliced_bananas) and cut(sliced_bananas)
        # Select the sliced bananas that are already cut

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        place_banana_in_frying_pan(sliced_bananas, fryingpan)
        # Place the sliced bananas into the frying pan
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

behavior find_knife_2122_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the previously sliced banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan currently on the stove

        place_banana_in_fryingpan(banana, fryingpan)
        # Place the banana slices into the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_trashcan_99(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(wooden_spoon,trashcan_instance)
        else:
            exp(wooden_spoon,trashcan_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,trashcan_instance]=True
        close[trashcan_instance,wooden_spoon]=True
    

behavior find_oil_2013_around_bowl_2140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(oil,bowl_instance)
        else:
            exp(oil,bowl_instance)
    eff:
        unknown[oil]=False
        close[oil,bowl_instance]=True
        close[bowl_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)
        # Place the banana in the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the sliced banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        put_banana_in_fryingpan(banana, fryingpan)
        # Put the banana in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

behavior find_knife_2035_around_curtain_206(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==206
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(knife,curtain_instance)
        else:
            exp(knife,curtain_instance)
    eff:
        unknown[knife]=False
        close[knife,curtain_instance]=True
        close[curtain_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_banana_in_frying_pan(banana:item, frying_pan:item):
    body:
        achieve_once inside(banana, frying_pan)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select a banana that is sliced

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        put_banana_in_frying_pan(banana, frying_pan)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the banana in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_trashcan_99(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(oil,trashcan_instance)
        else:
            exp(oil,trashcan_instance)
    eff:
        unknown[oil]=False
        close[oil,trashcan_instance]=True
        close[trashcan_instance,oil]=True
    

behavior find_knife_2037_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior place_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Bind the item representing a sliced banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind the item representing the frying pan

        place_banana_in_fryingpan(banana, fryingpan)
        # Place the banana into the frying pan
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior put_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the sliced banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        put_banana_in_fryingpan(banana, fryingpan)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_light_212(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==212
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(oil,light_instance)
        else:
            exp(oil,light_instance)
    eff:
        unknown[oil]=False
        close[oil,light_instance]=True
        close[light_instance,oil]=True
    

behavior find_knife_2037_around_trashcan_99(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(knife,trashcan_instance)
        else:
            exp(knife,trashcan_instance)
    eff:
        unknown[knife]=False
        close[knife,trashcan_instance]=True
        close[trashcan_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_banana_in_frying_pan(banana:item, frying_pan:item):
    body:
        achieve_once inside(banana, frying_pan)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana item
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan
        
        place_banana_in_frying_pan(banana, frying_pan)
        # Place the banana in the frying pan

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_banana_in_frying_pan(banana:item, frying_pan:item):
    body:
        achieve_once inside(banana, frying_pan)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        # Select the banana item
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan
        
        place_banana_in_frying_pan(banana, frying_pan)
        # Place the banana in the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(food_banana_2083)grab_executor(food_banana_2083)walk_executor(fryingpan_2154)putin_executor(food_banana_2083, fryingpan_2154)
##############################
From agent.py
walk_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. 
##############################
From agent.py
grab_executor(food_banana_2083)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_banana_2083. Grabbing food_banana_2083 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_banana_2083, fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the food_banana_2083. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. food_banana_2083 is inside fryingpan_2154. food_banana_2083 is close fryingpan_2154. fryingpan_2154 is close food_banana_2083. food_banana_2083 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_banana_2083)', 'walk_executor(cutting_board_2123)', 'put_executor(food_banana_2083, cutting_board_2123)', 'walk_executor(knifeblock_76)', 'walk_executor(desk_272)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(kitchen_counter_123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_banana_2083)', 'cut_executor(food_banana_2083)', 'cut_executor(food_banana_2083)', 'cut_executor(food_banana_2083)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2149, fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_banana_2083)', 'grab_executor(food_banana_2083)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_banana_2083, fryingpan_2154)']
Time info:
Time consume: 654 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 176
goal generate times: 43
goal correct times: 0
action_num: 29

Task complete rate:
1
Scene_id: 1
##############################
