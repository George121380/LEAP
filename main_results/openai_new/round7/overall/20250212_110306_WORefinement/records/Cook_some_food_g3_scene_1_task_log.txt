From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_home_office_241(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laser_pointer,home_office_instance)
        else:
            exp(laser_pointer,home_office_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,home_office_instance]=True
        close[home_office_instance,laser_pointer]=True
    

behavior find_pot_2138_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_carrot_2086_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_potato_2107_around_kitchen_counter_122(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior heat_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Place the pot on the stove and turn on the stove to boil the ingredients

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not cut(vegetable):
                fill_pot_with_water(pot)
                heat_pot(pot, stove)
                # Boil the vegetables in the pot

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior heat_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Place the pot on the stove and turn on the stove to boil the ingredients

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot item

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not cut(vegetable):
                fill_pot_with_water(pot)
                heat_pot(pot, stove)
                # Boil the vegetables in the pot

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(pot_2138, stove_2135)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(pot_2138, stove_2135)
Find pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that vegetables are placed in the pot before boiling. Currently, the pot is filled with water and placed on the stove, but no action has been taken to add vegetables to the pot.
##############################
From agent.py
Human Instruction: You need to ensure that vegetables are placed in the pot before boiling. Currently, the pot is filled with water and placed on the stove, but no action has been taken to add vegetables to the pot.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: look for pot_2138 around stove_2135.
Action 4: Walk to pot_78.
Action 5: Grab pot_78.
Action 6: Walk to faucet_20.
Action 7: Switch on faucet_20.
Action 8: Switch off faucet_20.
Action 9: Walk to stove_2135.
Action 10: Put pot_78 on stove_2135.
Action 11: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_carrot_2015_around_pot_2138(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_carrot,pot_instance)
        else:
            exp(food_carrot,pot_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,pot_instance]=True
        close[pot_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_potato_2107_around_fridge_126(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
behavior add_vegetables_to_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)
        # Place the vegetable inside the pot

behavior boil_vegetables(pot:item):
    body:
        achieve is_on(pot)
        # Ensure the stove is on to boil the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that contains water

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not inside(vegetable, pot):
                add_vegetables_to_pot(vegetable, pot)
                # Add each vegetable to the pot

        boil_vegetables(pot)
        # Boil the vegetables in the pot
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_clothes_scarf_2120_around_dresser_274(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_scarf,dresser_instance)
        else:
            exp(clothes_scarf,dresser_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,dresser_instance]=True
        close[dresser_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot)
        # Put the vegetables inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is on to boil the vegetables

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water in it

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select a stove that is currently on

        boil_vegetables(vegetables, pot, stove)
         Boil the vegetables in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_carrot_2015_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_onion_2009_around_fridge_126(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_potato_2107_around_kitchen_counter_122(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_with_water(pot:item):
    # Function to check if the specified pot is filled with water
    symbol has_water= has_water(pot)
    return has_water

behavior add_vegetables_to_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior boil_vegetables(stove:item, pot:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_pot_with_water(pot)
        # Select a pot that is filled with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables item

        add_vegetables_to_pot(vegetables, pot)
        boil_vegetables(stove, pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pot_with_water(pot:item):
    # Function to check if the specified pot is filled with water
    symbol has_water= has_water(pot)
    return has_water

behavior add_vegetables_to_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior boil_vegetables(stove:item, pot:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_pot_with_water(pot)
        # Select a pot that is filled with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables item

        add_vegetables_to_pot(vegetables, pot)
        boil_vegetables(stove, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_vegetable_2113, fridge_126)
Find food_vegetable_2113. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. food_vegetable_2113 is inside pot_78. pot_78 is close food_vegetable_2113. food_vegetable_2113 is close pot_78. food_vegetable_2113 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_2068_around_bowl_2141(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(tray,bowl_instance)
        else:
            exp(tray,bowl_instance)
    eff:
        unknown[tray]=False
        close[tray,bowl_instance]=True
        close[bowl_instance,tray]=True
    

behavior find_mat_32_around_mat_32(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==32
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior cool_boiled_vegetables_in_bowl(boiled_vegetables:item, bowl:item):
    body:
        achieve_once inside(boiled_vegetables, bowl)

behavior __goal__():
    body:
        bind boiled_vegetables: item where:
            is_food_vegetable(boiled_vegetables) and inhand(boiled_vegetables)
        # Select the boiled vegetables that were just handled

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to cool the vegetables

        cool_boiled_vegetables_in_bowl(boiled_vegetables, bowl)
        # Cool the boiled vegetables by placing them inside the bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_cooling_bowl(x: item):
    # Function to determine if an item is a bowl suitable for cooling
    symbol is_cooling_bowl = is_bowl(x)
    return is_cooling_bowl

behavior cool_boiled_vegetables_in_bowl(vegetables: item, bowl: item):
    body:
        achieve_once inside(vegetables, bowl)
        # Place the boiled vegetables in the bowl to cool

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot_78)
        # Bind the boiled vegetables currently inside pot_78

        if exists bowl: item : (is_cooling_bowl(bowl)):
            bind cooling_bowl: item where:
                is_cooling_bowl(cooling_bowl)
            
            cool_boiled_vegetables_in_bowl(vegetables, cooling_bowl)
        else:
            foreach bowl: item:
                if is_cooling_bowl(bowl) and not visited(bowl):
                    observe(bowl, "Determine if this bowl is suitable for cooling the vegetables")
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_phone_2029(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2029
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(pot,phone_instance)
        else:
            exp(pot,phone_instance)
    eff:
        unknown[pot]=False
        close[pot,phone_instance]=True
        close[phone_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior cool_boiled_vegetables_in_bowl(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Place the boiled vegetables inside the bowl for cooling

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the boiled vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        cool_boiled_vegetables_in_bowl(vegetables, bowl)
        # Cool the boiled vegetables in the bowl

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cool_boiled_vegetables_in_bowl(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Place the boiled vegetables inside the bowl for cooling

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the boiled vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        cool_boiled_vegetables_in_bowl(vegetables, bowl)
        # Cool the boiled vegetables in the bowl

##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2113)walk_executor(bowl_2141)putin_executor(food_vegetable_2113, bowl_2141)
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the stove_2135. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_vegetable_2113, bowl_2141)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. food_vegetable_2113 is inside bowl_2141. food_vegetable_2113 is close bowl_2141. bowl_2141 is close food_vegetable_2113. food_vegetable_2113 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables. Then cool them in a bowl.
Action History:
['walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_vegetable_2113)', 'walk_executor(pot_78)', 'putin_executor(food_vegetable_2113, pot_78)', 'grab_executor(food_vegetable_2113)', 'walk_executor(bowl_2141)', 'putin_executor(food_vegetable_2113, bowl_2141)']
Time info:
Time consume: 191 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 82
goal generate times: 7
goal correct times: 0
action_num: 19

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 8 steps
Keystate: k3 - Requires: 2 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
