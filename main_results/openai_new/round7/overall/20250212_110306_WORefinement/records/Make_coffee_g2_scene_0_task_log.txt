From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_cup_2063_around_desk_357(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(cup,desk_instance)
        else:
            exp(cup,desk_instance)
    eff:
        unknown[cup]=False
        close[cup,desk_instance]=True
        close[desk_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker

behavior fill_water_in_coffee_maker(coffee_maker:item, water:item):
    body:
        if has_water(water):
            achieve has_water(coffee_maker)
            # Put water in the coffee maker

behavior pour_coffee(cup:item, coffee_maker:item):
    body:
        observe(coffee_maker, "Check if coffee can be poured from the coffee maker")
        # Determine if coffee is ready and pour it into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        bind water: item where:
            is_sink(water) or is_cleaning_solution(water)
        # Water source either from sink or available solution
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        fill_water_in_coffee_maker(coffee_maker, water)
        brew_coffee(coffee_maker)
        pour_coffee(cup, coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior brew_coffee(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker

behavior fill_water_in_coffee_maker(coffee_maker:item, water:item):
    body:
        if has_water(water):
            achieve has_water(coffee_maker)
            # Put water in the coffee maker

behavior pour_coffee(cup:item, coffee_maker:item):
    body:
        observe(coffee_maker, "Check if coffee can be poured from the coffee maker")
        # Determine if coffee is ready and pour it into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        bind water: item where:
            is_sink(water) or is_cleaning_solution(water)
        # Water source either from sink or available solution
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        fill_water_in_coffee_maker(coffee_maker, water)
        brew_coffee(coffee_maker)
        pour_coffee(cup, coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)switchon_executor(coffe_maker_290)switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if coffee can be poured from the coffee maker)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned on. 
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Check if coffee can be poured from the coffee maker)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OFF. coffe_maker_290 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the coffee maker with water and ensure it is turned on for brewing. Additionally, you need to ensure that coffee is ready and pour it into a cup.
##############################
From agent.py
Human Instruction: You need to fill the coffee maker with water and ensure it is turned on for brewing. Additionally, you need to ensure that coffee is ready and pour it into a cup.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Switch on coffe_maker_290.
Action 3: Switch off coffe_maker_290.
Action 4: Open coffe_maker_290.
Action 5: Observe around coffe_maker_290 with the question of Check if coffee can be poured from the coffee maker.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_121(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==121
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once close_char(char, coffee_maker) # Ensure the character is close to the coffee maker
        achieve is_on(coffee_maker) # Turn on the coffee maker
        achieve_once has_water(coffee_maker) # Ensure the coffee maker is filled with water
        achieve_once close_char(char, cup) # Ensure the character is close to the cup
        achieve once inside_char(char, coffee_maker) # Assume interaction is direct
        achieve_once inside_char(char, cup) # Assume interaction is direct
        achieve_once inside(cup, coffee_maker) # Assume pouring action

behavior check_coffee_flow(coffee_maker:item):
    body:
        observe(coffee_maker, "Check if coffee can be poured from the coffee maker")
        # Check if the coffee maker has brewed coffee that can be poured

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==290
        # Select the coffee maker with ID 290

        bind cup: item where:
            is_cup(cup)
        # Select a cup to pour the coffee into

        fill_coffee_maker_with_water(coffee_maker)
        # Fill the coffee maker with water

        check_coffee_flow(coffee_maker)
        # Verify that coffee can be poured

        make_coffee(coffee_maker, cup)
        # Make and pour coffee into the cup
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_coffee_ready(coffee_maker:item):
    # Function to check if the coffee maker has coffee ready to be poured
    symbol has_coffee=exists o: item: (is_coffe_maker(o) and close_char(char, coffee_maker))
    return has_coffee

behavior make_coffee(coffee_maker: item):
    body:
        if is_off(coffee_maker):
            achieve_once is_on(coffee_maker)
            # Turn on the coffee maker if it is off
        
        if not has_water(coffee_maker):
            achieve has_water(coffee_maker)
            # Fill the coffee maker with water
        
        # Ensure coffee maker is open to observe whether coffee can be poured
        if closed(coffee_maker):
            achieve_once open(coffee_maker)

behavior pour_coffee(cup: item, coffee_maker: item):
    body:
        if has_coffee_ready(coffee_maker):
            achieve_once inside(coffee_maker, cup)
            # Pour coffee from the coffee maker into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup for pouring coffee

        make_coffee(coffee_maker) # Prepare the coffee maker
        pour_coffee(cup, coffee_maker) # Pour coffee into the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_desk_357(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(coffee_filter,desk_instance)
        else:
            exp(coffee_filter,desk_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,desk_instance]=True
        close[desk_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve_once has_water(coffee_maker)
        # Fill the coffee maker with water

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve_once inside(coffee_maker, cup)
        # Pour the brewed coffee from the coffee maker into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_coffee_maker_with_water(coffee_maker)
        brew_coffee(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_bowl_2072_around_stove_2065(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(bowl,stove_instance)
        else:
            exp(bowl,stove_instance)
    eff:
        unknown[bowl]=False
        close[bowl,stove_instance]=True
        close[stove_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is on for brewing
        
behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve_once inside(cup, coffee_maker)
        # Pour coffee into the cup from the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_coffee_maker_with_water(coffee_maker)
        # Fill the coffee maker with water

        brew_coffee(coffee_maker)
        # Brew coffee using the coffee maker
        
        pour_coffee_into_cup(coffee_maker, cup)
        # Pour the brewed coffee into the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee_in_maker(coffee_maker:item):
    body:
        achieve_once has_water(coffee_maker) # Ensure there is water in the coffee maker
        observe(coffee_maker, "Check if coffee can be poured from the coffee maker") # Verify if coffee can be poured
        achieve_once is_off(coffee_maker) # Turn off coffee maker after use

behavior pour_coffee_in_cup(cup:item, coffee_maker:item):
    body:
        achieve_once inside(coffee_maker, cup) # Pour coffee from coffee_maker into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        make_coffee_in_maker(coffee_maker)
        pour_coffee_in_cup(cup, coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior make_coffee(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water
        achieve_once is_on(coffee_maker)
        # Ensure the coffee maker is turned on

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve_once inside(coffee, cup)
        # Pour the brewed coffee into the cup

behavior close_the_coffee_maker(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)
        # Ensure the coffee maker is closed at the end

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        make_coffee(coffee_maker)
        # Brew coffee using the coffee maker
        
        pour_coffee_into_cup(coffee_maker, cup)
        # Pour brewed coffee into the cup
        
        close_the_coffee_maker(coffee_maker)
        # Close the coffee maker
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. make a cup of coffee using the coffee maker." ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee_with_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve is_on(coffee_maker)
        achieve_once has_water(coffee_maker)
        achieve_once inside(coffee, cup)
        # Ensure the coffee maker is on, contains water, and prepares coffee in the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==290
        # Select the coffee maker with ID 290

        bind cup: item where:
            is_cup(cup)
        # Select a suitable cup

        make_coffee_with_coffee_maker(coffee_maker, cup)
        # Make coffee using the coffee maker and collect in the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker
        achieve_once inside(coffee, cup)
        # Brew coffee and pour it into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        brew_coffee(coffee_maker, cup)
        # Make coffee using the coffee maker and pour it into a cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water
        achieve_once on(coffee_maker, surfaces(cup))
        # Place cup insideunder the coffee maker
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Bind a cup

        make_coffee(coffee_maker, cup)
        # Make a cup of coffee using the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_ready(coffee_maker: item):
    # Function to check if coffee is ready in the coffee maker
    symbol coffee_ready = exists o: item : (is_cup(o) and pourable(coffee_maker) and close_char(char, coffee_maker))
    return coffee_ready

behavior make_coffee(coffee_maker: item):
    body:
        if not is_on(coffee_maker):
            achieve is_on(coffee_maker) # Switch on the coffee maker if it is off
        
        if not has_water(coffee_maker):
            achieve has_water(coffee_maker) # Ensure the coffee maker has water

        # Check if the coffee maker is ready to pour coffee
        observe(coffee_maker, "Check if coffee can be poured from the coffee maker")
        
        if is_coffee_ready(coffee_maker):
            bind cup: item where:
                is_cup(cup) and close_char(char, coffee_maker)
            achieve_once inside(cup, coffee_maker)
            # Pour coffee into the cup once it is ready
        
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        make_coffee(coffee_maker)
        # Make a cup of coffee using the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once has_water(coffee_maker) # Ensure the coffee maker has water
        achieve_once close_char(char, coffee_maker) # Approach the coffee maker
        achieve_once closed(coffee_maker) # Ensure the coffee maker is closed
        achieve_once is_on(coffee_maker) # Turn on the coffee maker to brew
        achieve_once inside(cup, char) # Place a cup ready to receive coffee

behavior serve_coffee(cup:item, coffee_maker:item):
    body:
        observe(coffee_maker, "Check if coffee can be poured from the coffee maker")
        achieve_once has_water(cup) # Pour brewed coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Locate the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a suitably sized cup

        prepare_coffee(coffee_maker, cup)
        # Prepare a cup of coffee with the coffee maker

        serve_coffee(cup, coffee_maker)
        # Pour the prepared coffee into the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_121(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==121
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once close_char(char, coffee_maker) # Ensure the character is close to the coffee maker
        achieve_once close_char(char, cup) # Ensure the character is close to the cup
        achieve_once is_on(coffee_maker) # Ensure the coffee maker is turned on
        achieve_once inside(cup, coffee_maker) # Brew the coffee directly into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_coffee_maker_with_water(coffee_maker)
        # Fill the coffee maker with water

        make_coffee(coffee_maker, cup)
        # Make coffee using the coffee maker and pour it into the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once close_char(char, coffee_maker) # Ensure the character is close to the coffee maker
        achieve_once close_char(char, cup) # Ensure the character is close to the cup
        achieve_once is_on(coffee_maker) # Ensure the coffee maker is turned on
        achieve_once inside(cup, coffee_maker) # Brew the coffee directly into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        fill_coffee_maker_with_water(coffee_maker)
        # Fill the coffee maker with water

        make_coffee(coffee_maker, cup)
        # Make coffee using the coffee maker and pour it into the cup

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffe_maker_290)walk_executor(cup_2064)walk_executor(coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(cup_2064)grab_executor(cup_2064)walk_executor(coffe_maker_290)putin_executor(cup_2064, coffe_maker_290)
##############################
From agent.py
walk_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. 
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. 
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is opened. 
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. 
##############################
From agent.py
grab_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Grabbing cup_2064 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. 
##############################
From agent.py
putin_executor(cup_2064, coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. coffe_maker_290 is close cup_2064. cup_2064 is inside coffe_maker_290. cup_2064 is close coffe_maker_290. cup_2064 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add water to the coffee maker, ensure it is turned on to brew the coffee, and verify that the coffee is ready before it is poured into the cup. Currently, the cup is placed inside the coffee maker, but no action confirms water filling or completed brewing.
##############################
From agent.py
Human Instruction: You need to add water to the coffee maker, ensure it is turned on to brew the coffee, and verify that the coffee is ready before it is poured into the cup. Currently, the cup is placed inside the coffee maker, but no action confirms water filling or completed brewing.

Human Guidance: Put a suitably sized cup into the coffee machine and start it.
The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Switch on coffe_maker_290.
Action 3: Switch off coffe_maker_290.
Action 4: Open coffe_maker_290.
Action 5: Observe around coffe_maker_290 with the question of Check if coffee can be poured from the coffee maker.
Action 6: Walk to faucet_232.
Action 7: Switch on faucet_232.
Action 8: Switch off faucet_232.
Action 9: Walk to coffe_maker_290.
Action 10: Walk to cup_2064.
Action 11: Walk to coffe_maker_290.
Action 12: Close coffe_maker_290.
Action 13: Switch on coffe_maker_290.
Action 14: Switch off coffe_maker_290.
Action 15: Open coffe_maker_290.
Action 16: Walk to cup_2064.
Action 17: Grab cup_2064.
Action 18: Walk to coffe_maker_290.
Action 19: Put cup_2064 into coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve_once close_char(char, coffee_maker) 
        # Ensure the character is close to the coffee maker
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior brew_coffee(coffee_maker: item):
    body:
        achieve_once closed(coffee_maker)
        # Close the coffee maker lid if opened
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker
        observe(coffee_maker, "Check if coffee is ready to be poured")
        # Verify the coffee is brewed

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 232
        # Select the faucet with ID 232

        bind cup: item where:
            is_cup(cup) and id[cup] == 2064
        # Select the cup with ID 2064

        fill_coffee_maker_with_water(coffee_maker, faucet)
        brew_coffee(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Ensure the character is close to the faucet
        achieve_once close_char(char, coffee_maker) 
        # Ensure the character is close to the coffee maker
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior brew_coffee(coffee_maker: item):
    body:
        achieve_once closed(coffee_maker)
        # Close the coffee maker lid if opened
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker
        observe(coffee_maker, "Check if coffee is ready to be poured")
        # Verify the coffee is brewed

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select the coffee maker with ID 290

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 232
        # Select the faucet with ID 232

        bind cup: item where:
            is_cup(cup) and id[cup] == 2064
        # Select the cup with ID 2064

        fill_coffee_maker_with_water(coffee_maker, faucet)
        brew_coffee(coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)walk_executor(coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if coffee is ready to be poured)
##############################
From agent.py
walk_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. 
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Check if coffee is ready to be poured)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to cup_2064. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. cup_2064 is inside coffe_maker_290. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OFF. coffe_maker_290 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Fill the coffee maker with water and ensure it is turned on to brew the coffee until it is ready. Then you can proceed to the next sub-task.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_milk_and_sugar_to_coffee(milk:item, sugar:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Add milk to the coffee cup
        achieve_once inside(sugar, cup)
        # Add sugar to the coffee cup

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk item

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar item

        bind cup: item where:
            is_cup(cup) and id[cup] == 2064
        # Select the cup of coffee with ID 2064

        add_milk_and_sugar_to_coffee(milk, sugar, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_milk_and_sugar_to_coffee(milk:item, sugar:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Add milk to the coffee cup
        achieve_once inside(sugar, cup)
        # Add sugar to the coffee cup

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk item

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar item

        bind cup: item where:
            is_cup(cup) and id[cup] == 2064
        # Select the cup of coffee with ID 2064

        add_milk_and_sugar_to_coffee(milk, sugar, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2064)putin_executor(milk_2043, cup_2064)walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_sugar_2039, cupboard_229)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2064)putin_executor(food_sugar_2039, cup_2064)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2064)putin_executor(milk_2043, cup_2064)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2064)putin_executor(food_sugar_2039, cup_2064)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the milk_2043. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. 
##############################
From agent.py
putin_executor(milk_2043, cup_2064)
Robot find: Robot is close to the milk_2043. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. milk_2043 is inside cup_2064. cup_2064 is close milk_2043. milk_2043 is close cup_2064. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. 
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. Grabbing food_sugar_2039 by right hand. 
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. 
##############################
From agent.py
putin_executor(food_sugar_2039, cup_2064)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. food_sugar_2039 is close cup_2064. food_sugar_2039 is inside cup_2064. cup_2064 is close food_sugar_2039. food_sugar_2039 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(coffe_maker_290)', 'walk_executor(cup_2064)', 'walk_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'walk_executor(cup_2064)', 'grab_executor(cup_2064)', 'walk_executor(coffe_maker_290)', 'putin_executor(cup_2064, coffe_maker_290)', 'walk_executor(faucet_232)', 'walk_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(cup_2064)', 'putin_executor(milk_2043, cup_2064)', 'walk_executor(food_sugar_2039)', 'grab_executor(food_sugar_2039)', 'walk_executor(cup_2064)', 'putin_executor(food_sugar_2039, cup_2064)']
Time info:
Time consume: 252 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 37
goal generate times: 15
goal correct times: 0
action_num: 34

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
