From agent.py
Reset goals: The sub-goals are: 
['Clean the bathroom sink directly.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2025_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_bathroom_sink(sink:item, cleaning_solution:item):
    body:
        achieve_once inhand(cleaning_solution)
        # Ensure cleaning solution is in hand
        scrub(sink)
        wash(sink)
        wipe(sink)
        rinse(sink)
        # Clean the sink by scrubbing, washing, wiping, and rinsing

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and dirty(sink)
        # Select a dirty sink

        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        # Select a cleaning solution item

        clean_bathroom_sink(sink, cleaning_solution)
        # Clean the bathroom sink using the selected cleaning solution

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_rag_2025_around_sink_19(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(rag,sink_instance)
        else:
            exp(rag,sink_instance)
    eff:
        unknown[rag]=False
        close[rag,sink_instance]=True
        close[sink_instance,rag]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the sink by achieving the clean state

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a bathroom sink

        clean_bathroom_sink(sink)
        # Clean the bathroom sink
#goal_representation_end

##############################
From agent.py->reset_goal
behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the sink by achieving the clean state

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a bathroom sink

        clean_bathroom_sink(sink)
        # Clean the bathroom sink
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)wipe_executor(sink_19)
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, mat_32, phone_2029, cleaning_solution_2143, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_rag_2025_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the sink by achieving the clean state
        
behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==19
        # Select sink with ID 19

        clean_bathroom_sink(sink)
        # Clean the bathroom sink with ID 19
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the sink by achieving the clean state
        
behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==19
        # Select sink with ID 19

        clean_bathroom_sink(sink)
        # Clean the bathroom sink with ID 19
##############################
From agent.py-> find a plan in act()
wipe_executor(sink_19)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

behavior find_soap_2125_around_soap_2125(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2125
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

#exp_behavior_end

#goal_representation

behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the sink by achieving the clean state

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select the sink with ID 19

        clean_bathroom_sink(sink)
        # Clean the bathroom sink

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # Clean the sink by achieving the clean state

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select the sink with ID 19

        clean_bathroom_sink(sink)
        # Clean the bathroom sink

##############################
From agent.py-> find a plan in act()
wipe_executor(sink_19)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

behavior find_soap_2125_around_soap_2125(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2125
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

behavior find_brush_2002_around_bathroom_cabinet_17(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(brush,bathroom_cabinet_instance)
        else:
            exp(brush,bathroom_cabinet_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,brush]=True
    

#exp_behavior_end

#goal_representation
behavior clean_bathroom_sink(sink:item):
    body:
        wash(sink)
        scrub(sink)
        rinse(sink)
        wipe(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==19
        # Select the bathroom sink with ID 19

        clean_bathroom_sink(sink)
        # Clean the bathroom sink using the appropriate cleaning actions
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_bathroom_sink_directly(sink:item):
    body:
        rinse(sink) 
        wash(sink) 
        scrub(sink)
        rinse(sink) 

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19

        clean_bathroom_sink_directly(sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_soap_2125_around_soap_2125(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2125
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

behavior find_brush_2002_around_bathroom_cabinet_17(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(brush,bathroom_cabinet_instance)
        else:
            exp(brush,bathroom_cabinet_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,brush]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_bathroom_sink(sink:item):
    body:
        scrub(sink)
        # Scrub the bathroom sink
        rinse(sink)
        # Rinse the bathroom sink
        wipe(sink)
        # Wipe the bathroom sink 

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select the bathroom sink with ID 19
       
        if dirty(sink):
            clean_bathroom_sink(sink)
        # Clean the bathroom sink if it is dirty

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_bathroom_sink(sink:item):
    body:
        scrub(sink)
        # Scrub the bathroom sink
        rinse(sink)
        # Rinse the bathroom sink
        wipe(sink)
        # Wipe the bathroom sink 

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select the bathroom sink with ID 19
       
        if dirty(sink):
            clean_bathroom_sink(sink)
        # Clean the bathroom sink if it is dirty

##############################
From agent.py-> find a plan in act()
scrub_executor(sink_19)rinse_executor(sink_19)wipe_executor(sink_19)
##############################
From agent.py
scrub_executor(sink_19)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. sink_19 is cleaned. 
##############################
From agent.py
rinse_executor(sink_19)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

behavior find_soap_2126_around_faucet_121(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(soap,faucet_instance)
        else:
            exp(soap,faucet_instance)
    eff:
        unknown[soap]=False
        close[soap,faucet_instance]=True
        close[faucet_instance,soap]=True
    

behavior find_detergent_2155_around_detergent_2155(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2155
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(detergent,detergent_instance)
        else:
            exp(detergent,detergent_instance)
    eff:
        unknown[detergent]=False
        close[detergent,detergent_instance]=True
        close[detergent_instance,detergent]=True
    

behavior find_brush_2002_around_bathroom_cabinet_17(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(brush,bathroom_cabinet_instance)
        else:
            exp(brush,bathroom_cabinet_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,brush]=True
    

behavior find_vacuum_cleaner_2139_around_washing_machine_2079(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
behavior clean_bathroom_sink(sink:item):
    body:
        achieve clean(sink)
        # The goal is to achieve the state where the sink is clean

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Identify the specific sink to be cleaned by its ID
        
        clean_bathroom_sink(sink)
        # Execute the behavior to clean the identified bathroom sink
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_soap_2125_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

behavior find_brush_2002_around_bathroom_cabinet_17(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(brush,bathroom_cabinet_instance)
        else:
            exp(brush,bathroom_cabinet_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,brush]=True
    

#exp_behavior_end

#goal_representation

behavior clean_bathroom_sink(sink:item):
    body:
        scrub(sink)
        rinse(sink)
        scrub(sink)
        rinse(sink)
        wipe(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
            and not clean(sink)
        clean_bathroom_sink(sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_washing_machine_2079(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(towel,washing_machine_instance)
        else:
            exp(towel,washing_machine_instance)
    eff:
        unknown[towel]=False
        close[towel,washing_machine_instance]=True
        close[washing_machine_instance,towel]=True
    

behavior find_soap_2125_around_soap_2125(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2125
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

behavior find_brush_2002_around_bathroom_cabinet_17(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(brush,bathroom_cabinet_instance)
        else:
            exp(brush,bathroom_cabinet_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,brush]=True
    

behavior find_rag_2025_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_bathroom_sink(sink:item):
    body:
        rinse(sink)
        scrub(sink)
        rinse(sink)
        # This sequence ensures the sink is cleaned by rinsing, scrubbing, then rinsing again

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select the sink with ID 19
        clean_bathroom_sink(sink)
        # Execute the cleaning process

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_bathroom_sink(sink:item):
    body:
        rinse(sink)
        scrub(sink)
        rinse(sink)
        # This sequence ensures the sink is cleaned by rinsing, scrubbing, then rinsing again

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select the sink with ID 19
        clean_bathroom_sink(sink)
        # Execute the cleaning process

##############################
From agent.py-> find a plan in act()
rinse_executor(sink_19)scrub_executor(sink_19)rinse_executor(sink_19)
##############################
From agent.py
rinse_executor(sink_19)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
scrub_executor(sink_19)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
rinse_executor(sink_19)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Clean the bathroom sink directly.
Action History:
['walk_executor(sink_19)', 'wipe_executor(sink_19) (Failed)', 'wipe_executor(sink_19) (Failed)', 'wipe_executor(sink_19) (Failed)', 'scrub_executor(sink_19)', 'rinse_executor(sink_19)', 'wipe_executor(sink_19) (Failed)', 'rinse_executor(sink_19)', 'scrub_executor(sink_19)', 'rinse_executor(sink_19)']
Time info:
Time consume: 152 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 178
goal generate times: 10
goal correct times: 0
action_num: 10

Task complete rate:
1
Scene_id: 1
##############################
