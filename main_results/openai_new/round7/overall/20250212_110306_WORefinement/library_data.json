[
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Identify where the pizza and hamburger are located.",
        "cdl": " \nbehavior locate_food_item(food:item):\n    body:\n        observe(food, \"Determine the current location of the food item\")\n\nbehavior __goal__():\n    body:\n        bind pizza: item where:\n            is_food_pizza(pizza)\n        # Select a pizza item\n        \n        bind hamburger: item where:\n            is_food_hamburger(hamburger)\n        # Select a hamburger item\n        \n        locate_food_item(pizza)\n        locate_food_item(hamburger)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Put the pizza and hamburger on a plate.",
        "cdl": "\nbehavior place_food_on_plate(food:item, plate:item):\n    body:\n        achieve_once on(food, plate)\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate)\n        # Bind the plate item for use\n\n        bind pizza: item where:\n            is_food_pizza(pizza)\n        # Bind the pizza item for use\n\n        bind hamburger: item where:\n            is_food_hamburger(hamburger)\n        # Bind the hamburger item for use\n\n        place_food_on_plate(pizza, plate)\n        # Place pizza on the plate\n\n        place_food_on_plate(hamburger, plate)\n        # Place hamburger on the plate\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "3. Heat them in the microwave.",
        "cdl": "\nbehavior heat_in_microwave(plate:item, microwave:item):\n    body:\n        achieve_once inside(plate, microwave)\n        # Place the plate with pizza and hamburger inside the microwave\n        achieve_once is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate) and id[plate]==2105\n        # Select the plate with ID 2105 where the pizza and hamburger are placed\n        \n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave\n\n        heat_in_microwave(plate, microwave)\n        # Heat the plate in the microwave\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "4. Place the plate on a table in the dining room.",
        "cdl": " \nbehavior move_plate_to_dining_room_table(plate:item, table:item):\n    body:\n        achieve_once on(plate, table)\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        \n        bind plate: item where:\n            is_plate(plate) and on(plate, table_123)\n        \n        foreach table: item:\n            if is_table(table) and inside(table, dining_room):\n                move_plate_to_dining_room_table(plate, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book and place it on the table in the home office.",
        "cdl": " \nbehavior locate_book_and_place_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book item\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach table: item:\n            if is_table(table) and inside(table, home_office):\n                # Identify table in the home office\n                locate_book_and_place_on_table(book, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Turn on the light in the home office.",
        "cdl": " \nbehavior turn_on_light(light:item):\n    body:\n        if has_switch(light):\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind light: item where:\n            is_light(light) and inside(light, home_office)\n\n        turn_on_light(light)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find your cat.",
        "cdl": " \nbehavior locate_cat(cat:item):\n    body:\n        observe(cat, \"Determine the current location of the cat\")\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select a cat item\n\n        locate_cat(cat)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Find the cat and touch it.",
        "cdl": "\nbehavior find_and_touch_cat(cat:item):\n    body:\n        observe(cat, \"Determine the current location of the cat\")\n        # Find the cats location\n        achieve close_char(char, cat)\n        # Move closer to the cat\n        touch(cat)\n        # Touch the cat\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select a cat item\n\n        find_and_touch_cat(cat)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify the basket that contains clothes. ",
        "cdl": "\ndef is_clothes_inside_basket(basket:item):\n    # Function to check if there are clothes inside a specified basket\n    symbol has_clothes= exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and is_clothes_inside_basket(basket)):\n            # Check if there is a clothes basket with clothes based on the available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and is_clothes_inside_basket(basket)\n            # Select a basket that has clothes inside\n            achieve close_char(char, basket)\n            # Move the character closer to the basket with clothes\n\n        else: \n            # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    # Check all unvisited baskets\n                    observe(basket,\"Check is there any clothes in the basket\")\n                    # Observe whether each basket has any clothes\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Use the washing machine to wash the clothes from the basket.",
        "cdl": " \nbehavior load_clothes_to_washing_machine(c:item, washing_machine:item):\n    body:\n        achieve_once inside(c, washing_machine)\n        # Place the clothes inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine) # Close the washing machine door\n        achieve_once is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket with clothes\n        \n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        foreach c: item:\n        # Load all clothes from the basket into the washing machine\n            if is_clothes(c) and inside(c, basket):\n                load_clothes_to_washing_machine(c, washing_machine)\n        \n        start_washing_machine(washing_machine) # Start the washing machine\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Use a pot to boil water.",
        "cdl": " \nbehavior fill_pot_with_water(pot:item):\n    body:\n        achieve has_water(pot)\n        # Fill the pot with water\n\nbehavior heat_pot(pot:item, stove:item):\n    body:\n        achieve_once on(pot, stove)\n        achieve is_on(stove)\n        # Place the pot on the stove and turn on the stove to boil water\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot item\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        fill_pot_with_water(pot) # Fill the pot with water\n        heat_pot(pot, stove) # Boil the water using the stove\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Put the pizza and hamburger on a plate.",
        "cdl": " \nbehavior place_food_on_plate(food:item, plate:item):\n    body:\n        achieve_once on(food, plate)\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate)\n        # Bind the plate item for use\n\n        bind pizza: item where:\n            is_food_pizza(pizza)\n        # Bind the pizza item for use\n\n        bind hamburger: item where:\n            is_food_hamburger(hamburger)\n        # Bind the hamburger item for use\n\n        place_food_on_plate(pizza, plate)\n        # Place pizza on the plate\n\n        place_food_on_plate(hamburger, plate)\n        # Place hamburger on the plate\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Heat the plate with the pizza and hamburger in the microwave.",
        "cdl": " \nbehavior heat_in_microwave(plate:item, microwave:item):\n    body:\n        achieve_once inside(plate, microwave)\n        # Place the plate with pizza and hamburger inside the microwave\n        achieve_once is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate) and id[plate]==2152\n        # Select the plate with ID 2152 where the pizza and hamburger are placed\n        \n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave\n\n        heat_in_microwave(plate, microwave)\n        # Heat the plate in the microwave\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "3. Put the plate on a table in the dining room.",
        "cdl": " \nbehavior place_plate_on_table(plate:item, table:item):\n    body:\n        achieve_once on(plate, table)\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        \n        bind plate: item where:\n            is_plate(plate)\n        \n        foreach table: item:\n            if is_table(table) and inside(table, dining_room):\n                place_plate_on_table(plate, table)\n\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket with clothes.",
        "cdl": " \ndef has_clothes_inside_basket(basket:item):\n    # Function to check if there are clothes inside a specified basket\n    symbol has_clothes= exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and has_clothes_inside_basket(basket)):\n            # Check if there is a basket with clothes based on the available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and has_clothes_inside_basket(basket)\n            # Select a basket that has clothes inside\n            achieve close_char(char, basket)\n            # Move the character closer to the basket with clothes\n\n        else: \n            # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    # Check all unvisited baskets\n                    observe(basket,\"Check is there any clothes in the basket\")\n                    # Observe whether each basket has any clothes\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add the clothes to the washing machine, along with soap.",
        "cdl": " \nbehavior load_clothes_to_washing_machine(c:item, washing_machine:item):\n    body:\n        achieve_once inside(c, washing_machine)\n        # Place the clothes inside the washing machine\n\nbehavior add_soap_to_washing_machine(soap:item, washing_machine:item):\n    body:\n        achieve_once inside(soap, washing_machine)\n        # Add soap into the washing machine\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket with clothes\n        \n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        bind soap: item where:\n            is_soap(soap)\n        # Select soap\n\n        foreach c: item:\n        # Load all clothes from the basket into the washing machine\n            if is_clothes(c) and inside(c, basket):\n                load_clothes_to_washing_machine(c, washing_machine)\n        \n        add_soap_to_washing_machine(soap, washing_machine)\n        # Add soap to the washing machine\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Run the washing machine.",
        "cdl": " \nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine) # Close the washing machine door\n        achieve_once is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        start_washing_machine(washing_machine) # Start the washing machine\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all rooms in the household.",
        "cdl": " \nbehavior identify_room(room:item):\n    body:\n        observe(room, \"Check if this is a room\")\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_room(room) and not visited(room):\n                identify_room(room)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Ensure at least one light is turned on in each room.",
        "cdl": " \nbehavior ensure_light_on(light:item):\n    body:\n        if has_switch(light):\n            achieve is_on(light)\n\nbehavior handle_room_lights(room:item):\n    body:\n        foreach light: item:\n            if is_light(light) and inside(light, room):\n                ensure_light_on(light)\n\nbehavior visit_all_rooms(room:item):\n    body:\n        if not visited(room):\n            observe(room, \"Check if this is a room\")\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                visit_all_rooms(room)\n                handle_room_lights(room)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Wash the bowls and plates using the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve_once inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher) # Close the dishwasher door\n        achieve_once is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        \n        foreach o: item:\n            if is_plate(o) or is_bowl(o):\n                wash(o) \n                # Ensure each item is clean before loading\n\n                load_dishwasher(o, dishwasher)\n                # Load each plate and bowl into the dishwasher\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the forks by hand.",
        "cdl": " \nbehavior wash_forks_by_hand(fork: item):\n    body:\n        wash(fork)\n\nbehavior __goal__():\n    body:\n        foreach fork: item:\n            if is_fork(fork):\n                wash_forks_by_hand(fork)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Use the washing machine to wash the jacket.",
        "cdl": " \nbehavior load_jacket_to_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve_once inside(jacket, washing_machine)\n        # Place the jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine) # Close the washing machine door\n        achieve_once is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket that needs washing\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        load_jacket_to_washing_machine(jacket, washing_machine)\n        # Load the jacket into the washing machine\n\n        start_washing_machine(washing_machine) # Start the washing machine\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with water.",
        "cdl": " \nbehavior fill_cup_with_water(cup:item, faucet:item):\n    body:\n        achieve_once close_char(char, faucet) # Ensure the character is close to the faucet\n        achieve_once close_char(char, cup) # Ensure the character is close to the cup\n        achieve_once has_water(cup) # Fill the cup with water\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2087\n        # Select the cup with ID 2087\n\n        bind faucet: item where:\n            is_faucet(faucet) and id[faucet]==134\n        # Select the faucet with ID 134\n\n        fill_cup_with_water(cup, faucet) \n        # Fill the cup with water using faucet 134\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Slice a kiwi and add the slices into the cup.",
        "cdl": " \nbehavior slice_kiwi_and_add_to_cup(kiwi:item, cup:item, knife:item, cutting_board:item):\n    body:\n        achieve_once on(kiwi, cutting_board)\n        # Place the kiwi on the cutting board\n        achieve_once cut(kiwi)\n        # Slice the kiwi using the knife\n        achieve_once inside(kiwi, cup)\n        # Place the kiwi slices into the cup\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi)\n        # Select the kiwi item\n\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2087\n        # Select the cup with ID 2087 that has been filled with water\n\n        bind knife: item where:\n            is_knife(knife) and id[knife] == 2036\n        # Select the knife with ID 2036\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) and id[cutting_board] == 2080\n        # Select the cutting board with ID 2080\n\n        slice_kiwi_and_add_to_cup(kiwi, cup, knife, cutting_board)\n\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior open_windows_in_bathroom(window:item):\n    body:\n        achieve_once open(window)\n        # Ensure the windows in the bathroom are open\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        foreach window: item:\n            if is_window(window) and inside(window, bathroom):\n                # Identify windows inside the bathroom\n                open_windows_in_bathroom(window)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": " \nbehavior slice_chicken(chicken:item, knife:item, cutting_board:item):\n    body:\n        achieve_once on(chicken, cutting_board)\n        # Place the chicken on the cutting board\n        achieve_once cut(chicken)\n        # Slice the chicken using the knife\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken item\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n        \n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        slice_chicken(chicken, knife, cutting_board)\n        # Slice the chicken using the knife on the cutting board\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with water.",
        "cdl": " \nbehavior fill_cup_with_water(cup:item, faucet:item):\n    body:\n        achieve_once close_char(char, faucet) \n        # Ensure the character is close to the faucet\n        achieve_once close_char(char, cup) \n        # Ensure the character is close to the cup\n        achieve_once has_water(cup) \n        # Fill the cup with water\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet\n\n        fill_cup_with_water(cup, faucet) \n        # Fill the cup with water using the faucet\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Slice the kiwi and add it to the cup of water.",
        "cdl": " \nbehavior slice_kiwi_and_add_to_cup(kiwi:item, cup:item, knife:item, cutting_board:item):\n    body:\n        achieve_once on(kiwi, cutting_board)\n        # Place the kiwi on the cutting board\n        achieve_once cut(kiwi)\n        # Slice the kiwi using the knife\n        achieve_once inside(kiwi, cup)\n        # Place the kiwi slices into the cup\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi)\n        # Select the kiwi item\n\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2132\n        # Select cup with ID 2132 \n\n        bind knife: item where:\n            is_knife(knife) and id[knife] == 2122\n        # Select the knife with ID 2122\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) and id[cutting_board] == 2123\n        # Select the cutting board with ID 2123\n\n        slice_kiwi_and_add_to_cup(kiwi, cup, knife, cutting_board)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book.",
        "cdl": " \nbehavior locate_book(book:item):\n    body:\n        observe(book, \"Determine the current location of the book\")\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book) and id[book]==2091\n        # Bind the specific book with ID 2091 for tracking\n\n        locate_book(book)\n        # Locate the specific book with ID 2091\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Put the book on the coffee table in the home office.",
        "cdl": " \ndef is_coffee_table(table:item):\n    # Function to check if a table is a coffee table\n    # For simplicity, this function assumes the table is a coffee table if it is inside the home office, further logic might be required in practice\n    symbol is_coffee_table= exists room: item : (is_home_office(room) and inside(table, room))\n    return is_coffee_table\n\nbehavior locate_and_place_book(book:item, coffee_table:item):\n    body:\n        achieve_once on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book) and id[book]==2091\n        # Select the book with ID 2091\n\n        if exists table: item : (is_table(table) and is_coffee_table(table)):\n            bind coffee_table: item where:\n                is_table(coffee_table) and is_coffee_table(coffee_table)\n            # Select the coffee table if it is known\n            \n            if not on(book, coffee_table):\n                # If the book is not already on the coffee table\n                locate_and_place_book(book, coffee_table)\n        \n        else:\n            # If the coffee table is not known, locate it\n            foreach table: item:\n                if is_table(table) and not visited(table):\n                    observe(table, \"Determine if this is the coffee table in the home office\")\n                    # Observe each unvisited table to find the coffee table\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior open_windows_in_bathroom(window:item):\n    body:\n        achieve_once open(window)\n        # Ensure the windows in the bathroom are open\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        foreach window: item:\n            if is_window(window) and inside(window, bathroom):\n                # Identify windows inside the bathroom\n                open_windows_in_bathroom(window)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Find the pizza and hamburger.",
        "cdl": " \nbehavior locate_food_item(food:item):\n    body:\n        observe(food, \"Determine the current location of the food item\")\n\nbehavior __goal__():\n    body:\n        bind pizza: item where:\n            is_food_pizza(pizza)\n        # Select a pizza item\n        \n        bind hamburger: item where:\n            is_food_hamburger(hamburger)\n        # Select a hamburger item\n        \n        locate_food_item(pizza)\n        locate_food_item(hamburger)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Put the pizza and hamburger on a plate.",
        "cdl": "behavior place_food_on_plate(food:item, plate:item):\n    body:\n        achieve_once on(food, plate)\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate)\n        # Bind the plate item for use\n\n        bind pizza: item where:\n            is_food_pizza(pizza)\n        # Bind the pizza item for use\n\n        bind hamburger: item where:\n            is_food_hamburger(hamburger)\n        # Bind the hamburger item for use\n\n        place_food_on_plate(pizza, plate)\n        # Place pizza on the plate\n\n        place_food_on_plate(hamburger, plate)\n        # Place hamburger on the plate"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "3. Heat the pizza and hamburger in the microwave.",
        "cdl": " \nbehavior heat_in_microwave(plate:item, microwave:item):\n    body:\n        achieve_once inside(plate, microwave)\n        # Place the plate with pizza and hamburger inside the microwave\n        achieve_once is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind plate: item where:\n            is_plate(plate)\n        # bind the plate item where the pizza and hamburger are placed\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave\n\n        heat_in_microwave(plate, microwave)\n        # Heat the plate in the microwave\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "4. Put the plate with the pizza and hamburger on a table in the dining room.",
        "cdl": " \nbehavior move_plate_to_dining_room_table(plate:item, table:item):\n    body:\n        achieve_once on(plate, table)\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        \n        bind plate: item where:\n            is_plate(plate) and id[plate] == 1000\n        \n        foreach table: item:\n            if is_table(table) and inside(table, dining_room):\n                move_plate_to_dining_room_table(plate, table)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Check if there is at least one light on in each room.",
        "cdl": " \nbehavior ensure_light_on(light:item):\n    body:\n        if has_switch(light):\n            achieve is_on(light)\n\nbehavior handle_room_lights(room:item):\n    body:\n        foreach light: item:\n            if is_light(light) and inside(light, room):\n                ensure_light_on(light)\n\nbehavior visit_all_rooms(room:item):\n    body:\n        if not visited(room):\n            observe(room, \"Check if this is a room\")\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                visit_all_rooms(room)\n                handle_room_lights(room)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Turn on a light in rooms where no light is on.",
        "cdl": " \nbehavior turn_on_light(light:item):\n    body:\n        if has_switch(light):\n            achieve is_on(light)\n\nbehavior ensure_room_light(room:item):\n    body:\n        foreach light: item:\n            if is_light(light) and inside(light, room) and is_off(light):\n                turn_on_light(light)\n\nbehavior identify_room(room:item):\n    body:\n        observe(room, \"Check if this is a room\")\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                identify_room(room)\n                ensure_room_light(room)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Put the milk and egg on one of the tables in the dining room.",
        "cdl": " \nbehavior place_items_on_table(milk:item, egg:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(egg, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        \n        bind egg: item where:\n            is_food_egg(egg)\n\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        \n        foreach table: item:\n            if is_table(table) and inside(table, dining_room):\n                place_items_on_table(milk, egg, table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": " \nbehavior throw_items_from_fridge_to_trash(item:item, trashcan:item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Place the item inside the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and open(fridge)\n        # Ensure the fridge is the open one\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select a trashcan\n\n        foreach o: item:\n        # Throw all items from the fridge into the trashcan\n            if inside(o, fridge) and not is_food_egg(o) and not is_milk(o):\n                throw_items_from_fridge_to_trash(o, trashcan)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and eggs back in the fridge.",
        "cdl": " \nbehavior put_items_back_in_fridge(milk:item, egg:item, fridge:item):\n    body:\n        achieve_once inside(milk, fridge)\n        achieve_once inside(egg, fridge)\n        # Place both the milk and the egg back inside the fridge\n\nbehavior close_fridge_door(fridge:item):\n    body:\n        achieve_once closed(fridge)\n        # Ensure the fridge door is closed\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk item\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg item\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        put_items_back_in_fridge(milk, egg, fridge)\n        close_fridge_door(fridge)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup and fill it with water.",
        "cdl": " \nbehavior fill_cup_with_water(cup:item, faucet:item):\n    body:\n        achieve_once close_char(char, faucet) \n        # Ensure the character is close to the faucet\n        achieve_once close_char(char, cup) \n        # Ensure the character is close to the cup\n        achieve_once has_water(cup) \n        # Fill the cup with water\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet\n\n        fill_cup_with_water(cup, faucet) \n        # Fill the cup with water using the faucet\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Fill a cup with water and place it in the freezer.",
        "cdl": " \nbehavior fill_and_freeze_cup(cup: item, faucet: item, freezer: item):\n    body:\n        achieve_once close_char(char, faucet) \n        # Ensure the character is close to the faucet\n        achieve_once has_water(cup)\n        # Fill the cup with water\n        achieve_once inside(cup, freezer)\n        # Place the cup inside the freezer\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet\n\n        bind freezer: item where:\n            is_fridge(freezer)\n        # Select a freezer, assuming the fridge has a freezer compartment\n\n        fill_and_freeze_cup(cup, faucet, freezer)\n        # Fill the cup with water and freeze it\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "1. Peel and slice the bananas.  ",
        "cdl": " \nbehavior peel_and_slice_bananas(banana:item, cutting_board:item, knife:item):\n    body:\n        achieve_once on(banana, cutting_board)\n        # Place the banana on the cutting board\n        achieve_once cut(banana)\n        # Slice the banana using the knife\n\nbehavior __goal__():\n    body:\n        bind banana: item where:\n            is_food_banana(banana)\n        # Select a banana item\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        peel_and_slice_bananas(banana, cutting_board, knife)\n        # Peel and slice the banana on the cutting board\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Heat oil in a pan.  ",
        "cdl": "behavior heat_oil_in_pan(oil:item, pan:item, stove:item):\n    body:\n        achieve_once inside(oil, pan)\n        # Add the oil into the pan\n        achieve_once on(pan, stove)\n        # Place the pan on the stove\n        achieve is_on(stove)\n        # Turn on the stove to heat the oil\n\nbehavior __goal__():\n    body:\n        bind oil: item where:\n            is_oil(oil)\n        # Select oil item\n\n        bind pan: item where:\n            is_fryingpan(pan)\n        # Select a frying pan\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        heat_oil_in_pan(oil, pan, stove)\n        # Heat the oil in the pan on the stove"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "3. Fry the sliced bananas until golden brown.",
        "cdl": "behavior fry_sliced_bananas(sliced_bananas:item, fryingpan:item, stove:item):\n    body:\n        achieve_once inside(sliced_bananas, fryingpan)\n        # Place the sliced bananas inside the frying pan\n        achieve_once on(fryingpan, stove)\n        # Place the frying pan on the stove\n        achieve is_on(stove)\n        # Ensure the stove is on to fry the bananas till golden brown\n\nbehavior __goal__():\n    body:\n        bind sliced_bananas: item where:\n            is_food_banana(sliced_bananas) and cut(sliced_bananas)\n        # Select sliced bananas that are already cut\n\n        bind fryingpan: item where:\n            is_fryingpan(fryingpan)\n        # Select a frying pan\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        fry_sliced_bananas(sliced_bananas, fryingpan, stove)\n        # Fry the sliced bananas until golden brown on the stove"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": "behavior turn_on_dvd_player(dvd_player:item):\n    body:\n        if has_switch(dvd_player):\n            achieve is_on(dvd_player)\n\nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        # Select a DVD player item\n\n        turn_on_dvd_player(dvd_player)\n        # Turn on the DVD player"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find your spectacles and put them on the coffee table in the home office.",
        "cdl": "\ndef is_coffee_table(table:item):\n    # Function to check if a table is a coffee table\n    # For simplicity, this function assumes the table is a coffee table if it is inside the home office, further logic might be required in practice\n    symbol is_coffee_table= exists room: item : (is_home_office(room) and inside(table, room))\n    return is_coffee_table\n\nbehavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):\n    body:\n        achieve_once on(spectacles, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind spectacles: item where:\n            is_spectacles(spectacles) and id[spectacles]==2106\n        # Select the spectacles with ID 2106\n        \n        if exists table: item : (is_table(table) and is_coffee_table(table)):\n            bind coffee_table: item where:\n                is_table(coffee_table) and is_coffee_table(coffee_table)\n            # Select the coffee table if it is known\n            \n            if not on(spectacles, coffee_table):\n                # If the spectacles are not already on the coffee table\n                place_spectacles_on_coffee_table(spectacles, coffee_table)\n        \n        else:\n            # If the coffee table is not known, locate it\n            foreach table: item:\n                if is_table(table) and not visited(table):\n                    observe(table, \"Determine if this is the coffee table in the home office\")\n                    # Observe each unvisited table to find the coffee table\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": "\nbehavior locate_and_place_book(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book item\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach table: item:\n            if is_table(table) and inside(table, home_office):\n                # Identify table in the home office\n                locate_and_place_book(book, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and place it on the coffee table in the home office.",
        "cdl": "behavior locate_and_place_book(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book item\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach table: item:\n            if is_table(table) and inside(table, home_office):\n                # Identify table in the home office\n                locate_and_place_book(book, table)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Open the window in the home office.",
        "cdl": "behavior open_window(window:item):\n    body:\n        achieve_once open(window)\n        # Ensure the window is open\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach window: item:\n            if is_window(window) and inside(window, home_office):\n                # Identify windows in the home office\n                open_window(window)"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": "behavior slice_chicken(chicken:item, knife:item, cutting_board:item):\n    body:\n        achieve_once on(chicken, cutting_board)\n        # Place the chicken on the cutting board\n        achieve_once cut(chicken)\n        # Slice the chicken using the knife\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken item\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n        \n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        slice_chicken(chicken, knife, cutting_board)\n        # Slice the chicken using the knife on the cutting board"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the milk, turkey, egg, fish, and chicken.",
        "cdl": " \nbehavior locate_food_item(food:item):\n    body:\n        observe(food, \"Determine the current location of the food item\")\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk item\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select turkey item\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg item\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select fish item\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select chicken item\n\n        locate_food_item(milk)\n        locate_food_item(turkey)\n        locate_food_item(egg)\n        locate_food_item(fish)\n        locate_food_item(chicken)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place these items on one of the tables in the dining room.",
        "cdl": " \nbehavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(turkey, table)\n        achieve_once on(egg, table)\n        achieve_once on(fish, table)\n        achieve_once on(chicken, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        \n        bind turkey: item where:\n            is_food_turkey(turkey)\n        \n        bind egg: item where:\n            is_food_egg(egg)\n        \n        bind fish: item where:\n            is_food_fish(fish)\n        \n        bind chicken: item where:\n            is_food_chicken(chicken)\n        \n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        \n        foreach table: item:\n            if is_table(table) and inside(table, dining_room):\n                place_items_on_table(milk, turkey, egg, fish, chicken, table)\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV by touching the remote control.",
        "cdl": "behavior touch_remote_control(remote_control:item):\n    body:\n        achieve_once close_char(char, remote_control)\n        # Ensure the character is close to the remote control\n        touch(remote_control)\n        # Touch the remote control\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select a remote control item\n\n        touch_remote_control(remote_control)\n        # Touch the remote control to turn on the TV"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with milk.",
        "cdl": " \nbehavior fill_cup_with_milk(cup:item, milk:item):\n    body:\n        achieve_once has_a_free_hand(char)\n        achieve_once close_char(char, milk)\n        # Ensure the character is close to the milk\n        achieve_once close_char(char, cup)\n        # Ensure the character is close to the cup\n        achieve_once inside(milk, cup)\n        # Fill the cup with milk\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        fill_cup_with_milk(cup, milk)\n        # Fill the cup with milk\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": " \nbehavior heat_cup_of_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve_once inside(cup, microwave)\n        # Place the cup with milk inside the microwave\n        achieve_once is_on(microwave)\n        # Turn on the microwave to heat the milk\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2087\n        # Select the cup with milk (ID 2087)\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave\n\n        heat_cup_of_milk_in_microwave(cup, microwave)\n        # Heat the cup of milk in the microwave\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all the rooms.",
        "cdl": " \nbehavior identify_room(room:item):\n    body:\n        observe(room, \"Check if this is a room\")\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                if not visited(room):\n                    identify_room(room)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. For any room that is dark, turn on one light.",
        "cdl": "behavior turn_on_light_if_off(light:item):\n    body:\n        if is_off(light) and has_switch(light):\n            achieve is_on(light)\n\nbehavior ensure_light_in_room(room:item):\n    body:\n        foreach light: item:\n            if is_light(light) and inside(light, room):\n                turn_on_light_if_off(light)\n\nbehavior identify_and_ensure_light_in_room(room:item):\n    body:\n        if not visited(room):\n            observe(room, \"Check if this is a room\")\n            # After identifying, ensure at least one light is on in the room\n        ensure_light_in_room(room)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):\n                identify_and_ensure_light_in_room(room)"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put it back in the fridge.",
        "cdl": " \nbehavior cut_and_store_chicken(chicken:item, fridge:item):\n    body:\n        achieve_once cut(chicken)\n        # Cut the chicken into pieces\n        achieve_once inside(chicken, fridge)\n        # Place the cut chicken inside the fridge\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge)\n        # Ensure the fridge is closed\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken item\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select a fridge\n\n        cut_and_store_chicken(chicken, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify the basket containing clothes that need washing.",
        "cdl": " \ndef has_clothes_inside_basket(basket:item):\n    # Function to check if there are clothes inside a specified basket\n    symbol has_clothes= exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and has_clothes_inside_basket(basket)):\n            # Check if there is a clothes basket with clothes based on the available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and has_clothes_inside_basket(basket)\n            # Select a basket that has clothes inside\n            achieve close_char(char, basket)\n            # Move the character closer to the basket with clothes\n\n        else: \n            # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    # Check all unvisited baskets\n                    observe(basket,\"Check is there any clothes in the basket\")\n                    # Observe whether each basket has any clothes\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add soap to the washing machine.",
        "cdl": " \nbehavior add_soap_to_washing_machine(soap:item, washing_machine:item):\n    body:\n        achieve_once inside(soap, washing_machine)\n        # Add soap into the washing machine\n\nbehavior __goal__():\n    body:\n        bind soap: item where:\n            is_soap(soap)\n        # Select soap\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        add_soap_to_washing_machine(soap, washing_machine)\n        # Add soap to the washing machine\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Transfer the clothes from the basket into the washing machine.",
        "cdl": " \nbehavior transfer_clothes_to_washing_machine(c:item, washing_machine:item):\n    body:\n        achieve_once inside(c, washing_machine)\n        # Transfer the clothes into the washing machine\n\nbehavior __goal__():\n    body:\n        bind basket_for_clothes: item where:\n            is_basket_for_clothes(basket_for_clothes)\n        # Bind the basket containing clothes\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Bind the washing machine\n\n        foreach c: item:\n        # Load all clothes from the basket into the washing machine\n            if is_clothes(c) and inside(c, basket_for_clothes):\n                transfer_clothes_to_washing_machine(c, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "4. Run the washing machine.",
        "cdl": " \nbehavior run_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        # Ensure the washing machine door is closed\n        achieve_once is_on(washing_machine)\n        # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        run_washing_machine(washing_machine)\n        # Run the washing machine\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the table in the dining room.",
        "cdl": " \nbehavior locate_table_in_dining_room(table:item):\n    body:\n        observe(table, \"Determine if this is a table in the dining room\")\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        foreach table: item:\n            if is_table(table) and inside(table, dining_room) and not visited(table):\n                locate_table_in_dining_room(table)\n "
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the milk, turkey, egg, fish, and chicken on the table.",
        "cdl": "behavior place_items_on_table(milk:item, turkey:item, egg:item, fish:item, chicken:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(turkey, table)\n        achieve_once on(egg, table)\n        achieve_once on(fish, table)\n        achieve_once on(chicken, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        \n        bind turkey: item where:\n            is_food_turkey(turkey)\n        \n        bind egg: item where:\n            is_food_egg(egg)\n        \n        bind fish: item where:\n            is_food_fish(fish)\n        \n        bind chicken: item where:\n            is_food_chicken(chicken)\n        \n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        \n        foreach table: item:\n            if is_table(table) and inside(table, dining_room):\n                place_items_on_table(milk, turkey, egg, fish, chicken, table)"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom. Then turn on the lights in the bathroom.",
        "cdl": "\nbehavior turn_on_light(light:item):\n    body:\n        if has_switch(light):\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n\n        foreach light: item:\n            if is_light(light) and inside(light, bedroom):\n                turn_on_light(light)\n\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n\n        foreach light: item:\n            if is_light(light) and inside(light, bathroom):\n                turn_on_light(light)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Wipe the toilet with toilet paper and throw it into the toilet.",
        "cdl": " \nbehavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):\n    body:\n        achieve_once close_char(char, toilet)\n        # Ensure the character is close to the toilet\n        achieve_once inhand(toilet_paper)\n        # Take the toilet paper\n        wipe(toilet)\n        # Wipe the toilet with the toilet paper\n\nbehavior throw_toilet_paper_in_toilet(toilet:item, toilet_paper:item):\n    body:\n        achieve_once inside(toilet_paper, toilet)\n        # Throw the toilet paper into the toilet\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet) and id[toilet] == 15\n        # Select the toilet with the specific ID 15\n\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper)\n        # Select toilet paper\n\n        wipe_toilet_with_toilet_paper(toilet, toilet_paper)\n        throw_toilet_paper_in_toilet(toilet, toilet_paper)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior hand_wash_jacket(jacket:item):\n    body:\n        wash(jacket)\n        # Hand wash the jacket\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket item that needs to be hand washed\n\n        hand_wash_jacket(jacket)\n        # Hand wash the jacket\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket by washing machine.",
        "cdl": " \nbehavior load_clothes_to_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve_once inside(jacket, washing_machine)\n        # Place the jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine) # Close the washing machine door\n        achieve_once is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket that needs washing\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        load_clothes_to_washing_machine(jacket, washing_machine)\n        # Load the jacket into the washing machine\n\n        start_washing_machine(washing_machine) # Start the washing machine\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Insert the CD into the CD player and play music.",
        "cdl": "behavior insert_cd_into_player(cd:item, cd_player:item):\n    body:\n        achieve_once inside(cd, cd_player)\n        # Insert the CD into the CD player\n        achieve is_on(cd_player)\n        # Turn on the CD player to play music\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        # Select a CD\n\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        # Select a CD player\n\n        insert_cd_into_player(cd, cd_player)\n        # Insert the CD into the player and play music"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom, then turn on the lights in the bathroom.",
        "cdl": "behavior turn_on_light(light:item):\n    body:\n        if has_switch(light):\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n\n        foreach light: item:\n            if is_light(light) and inside(light, bedroom):\n                turn_on_light(light)\n\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n\n        foreach light: item:\n            if is_light(light) and inside(light, bathroom):\n                turn_on_light(light)"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find a table in the dining room to place the milk and egg.",
        "cdl": "behavior place_items_on_table(milk:item, egg:item, table:item):\n    body:\n        achieve_once on(milk, table)\n        achieve_once on(egg, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        \n        bind egg: item where:\n            is_food_egg(egg)\n\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        \n        foreach table: item:\n            if is_table(table) and inside(table, dining_room):\n                place_items_on_table(milk, egg, table)"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items from the fridge into the trashcan.",
        "cdl": "\nbehavior throw_items_from_fridge_to_trash(item:item, trashcan:item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Place the item inside the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and open(fridge)\n        # Ensure the fridge is the open one\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select a trashcan\n\n        foreach o: item:\n        # Throw all items from the fridge into the trashcan\n            if inside(o, fridge):\n                throw_items_from_fridge_to_trash(o, trashcan)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and eggs back in the fridge.",
        "cdl": "behavior put_items_back_in_fridge(milk:item, egg:item, fridge:item):\n    body:\n        achieve_once inside(milk, fridge)\n        achieve_once inside(egg, fridge)\n        # Place both the milk and the egg back inside the fridge\n\nbehavior close_fridge_door(fridge:item):\n    body:\n        achieve_once closed(fridge)\n        # Ensure the fridge door is closed\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk item\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg item\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        put_items_back_in_fridge(milk, egg, fridge)\n        close_fridge_door(fridge)"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": "behavior turn_on_light(light:item):\n    body:\n        if has_switch(light):\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n\n        foreach light: item:\n            if is_light(light) and inside(light, bathroom):\n                turn_on_light(light)"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and toast it.",
        "cdl": " \nbehavior cut_bread(bread:item, knife:item, cutting_board:item):\n    body:\n        achieve_once on(bread, cutting_board)\n        # Place the bread on the cutting board\n        achieve_once cut(bread)\n        # Slice the bread using the knife\n\nbehavior toast_bread(sliced_bread:item, toaster:item):\n    body:\n        achieve_once inside(sliced_bread, toaster)\n        # Place the sliced bread inside the toaster\n        achieve_once plugged(toaster)\n        # Ensure the toaster is plugged in\n        achieve_once is_on(toaster)\n        # Turn on the toaster to toast the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread)\n        # Select a bread item\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind toaster: item where:\n            is_toaster(toaster) and has_plug(toaster)\n        # Select a toaster that has a plug\n\n        cut_bread(bread, knife, cutting_board)\n\n        foreach sliced_bread: item:\n            if is_food_bread(sliced_bread) and cut(sliced_bread):\n                toast_bread(sliced_bread, toaster)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find and wash a lemon.",
        "cdl": "\ndef is_food_lemon(x: item):\n    return is_food(x) and is_food_lemon(x)\n\nbehavior find_and_clean_lemon(lemon:item):\n    body:\n        achieve_once close_char(char, lemon)\n        observe(lemon, \"Determine if the lemon is clean\")\n        if dirty(lemon):\n            wash(lemon)\n\nbehavior __goal__():\n    body:\n        bind lemon: item where:\n            is_food_lemon(lemon)\n\n        find_and_clean_lemon(lemon)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Slice the lemon and place it in a cup.",
        "cdl": "behavior slice_lemon_and_place_in_cup(lemon:item, cup:item, knife:item, cutting_board:item):\n    body:\n        achieve_once on(lemon, cutting_board)\n        # Place the lemon on the cutting board\n        achieve_once cut(lemon)\n        # Slice the lemon using the knife\n        achieve_once inside(lemon, cup)\n        # Place the lemon slices into the cup\n\nbehavior __goal__():\n    body:\n        bind lemon: item where:\n            is_food_lemon(lemon)\n        # Select a lemon\n\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        slice_lemon_and_place_in_cup(lemon, cup, knife, cutting_board)\n        # Slice the lemon and add it to the cup"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "3. Add water and sugar to the cup.",
        "cdl": " \nbehavior add_water_and_sugar_to_cup(water_source:item, sugar:item, cup:item):\n    body:\n        achieve_once close_char(char, water_source)\n        # Ensure the character is close to the water source\n        achieve_once has_water(cup)\n        # Fill the cup with water\n        achieve_once inside(sugar, cup)\n        # Add sugar into the cup\n\nbehavior __goal__():\n    body:\n        bind water_source: item where:\n            is_faucet(water_source)\n        # Select a water source, assuming it is a faucet\n        \n        bind sugar: item where:\n            is_food_sugar(sugar)\n        # Select a sugar item\n\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2063\n        # Select the cup with ID 2063\n\n        add_water_and_sugar_to_cup(water_source, sugar, cup)\n        # Add water and sugar to the cup\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put it back in the fridge.",
        "cdl": "behavior cut_and_store_chicken(chicken:item, fridge:item):\n    body:\n        achieve_once cut(chicken)\n        # Cut the chicken into pieces\n        achieve_once inside(chicken, fridge)\n        # Place the cut chicken inside the fridge\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge)\n        # Ensure the fridge is closed\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken item\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select a fridge\n\n        cut_and_store_chicken(chicken, fridge)\n        close_fridge(fridge)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the spectacles and put them on the coffee table in the home office.",
        "cdl": "def is_coffee_table(table:item):\n    # Function to check if a table is a coffee table\n    # The function assumes the table is a coffee table if it is inside the home office\n    symbol is_coffee_table = exists room: item : (is_home_office(room) and inside(table, room))\n    return is_coffee_table\n\nbehavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):\n    body:\n        achieve_once on(spectacles, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        # Select the spectacles\n\n        if exists table: item : (is_table(table) and is_coffee_table(table)):\n            bind coffee_table: item where:\n                is_table(coffee_table) and is_coffee_table(coffee_table)\n            # Select the coffee table if it is known\n            \n            if not on(spectacles, coffee_table):\n                # If the spectacles are not already on the coffee table\n                place_spectacles_on_coffee_table(spectacles, coffee_table)\n        \n        else:\n            # If the coffee table is not known, locate it\n            foreach table: item:\n                if is_table(table) and not visited(table):\n                    observe(table, \"Determine if this is the coffee table in the home office\")\n                    # Observe each unvisited table to find the coffee table"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": "behavior locate_and_place_book(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book item\n        \n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach table: item:\n            if is_table(table) and inside(table, home_office):\n                # Identify table in the home office\n                locate_and_place_book(book, table)"
    },
    {
        "task_name": "Make coffee",
        "source_sub_task": "Make a cup of coffee using the coffee maker.",
        "cdl": "behavior switch_on_coffee_maker(coffee_maker:item):\n    body:\n        if has_switch(coffee_maker):\n            achieve is_on(coffee_maker)\n\nbehavior prepare_coffee_with_coffee_maker(coffee_maker:item, cup:item):\n    body:\n        achieve_once inside(cup, coffee_maker)\n        # Place the cup inside the coffee maker\n        switch_on_coffee_maker(coffee_maker)\n        # Ensure the coffee maker is on\n\nbehavior __goal__():\n    body:\n        bind coffee_maker: item where:\n            is_coffe_maker(coffee_maker) and has_plug(coffee_maker) and plugged(coffee_maker)\n        # Select a coffee maker that is plugged in\n\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2133\n        # Select the specific cup with ID 2133\n\n        prepare_coffee_with_coffee_maker(coffee_maker, cup)\n        # Use the coffee maker to prepare coffee with the selected cup"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom, then turn on the lights in the bathroom.",
        "cdl": "behavior turn_on_light(light:item):\n    body:\n        if has_switch(light):\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n\n        foreach light: item:\n            if is_light(light) and inside(light, bedroom):\n                turn_on_light(light)\n\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n\n        foreach light: item:\n            if is_light(light) and inside(light, bathroom):\n                turn_on_light(light)"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup of water.",
        "cdl": "behavior fill_cup_with_water(cup:item, faucet:item):\n    body:\n        achieve_once close_char(char, faucet) \n        # Ensure the character is close to the faucet\n        achieve_once has_water(cup)\n        # Fill the cup with water\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet\n\n        fill_cup_with_water(cup, faucet) \n        # Fill the cup with water using the faucet"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Locate the basket with clothes that need washing.",
        "cdl": " \ndef has_clothes_inside_basket(basket:item):\n    # Function to check if there are clothes inside a specified basket\n    symbol has_clothes= exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and has_clothes_inside_basket(basket)):\n            # Check if there is a basket with clothes based on the available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and has_clothes_inside_basket(basket)\n            # Select a basket that has clothes inside\n            achieve close_char(char, basket)\n            # Move the character closer to the basket with clothes\n\n        else: \n            # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket,\"Check is there any clothes in the basket\")\n                    # Observe whether each basket has any clothes\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add soap to the washing machine.",
        "cdl": "behavior add_soap_to_washing_machine(soap:item, washing_machine:item):\n    body:\n        achieve_once inside(soap, washing_machine)\n        # Add soap into the washing machine\n\nbehavior __goal__():\n    body:\n        bind soap: item where:\n            is_soap(soap)\n        # Select soap\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        add_soap_to_washing_machine(soap, washing_machine)\n        # Add soap to the washing machine"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Load the clothes into the washing machine.",
        "cdl": " \nbehavior load_clothes_into_washing_machine(c:item, washing_machine:item):\n    body:\n        achieve_once inside(c, washing_machine)\n        # Transfer a clothing item into the washing machine\n\nbehavior __goal__():\n    body:\n        bind basket_for_clothes: item where:\n            is_basket_for_clothes(basket_for_clothes)\n        # Bind the basket containing clothes\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Bind the washing machine\n\n        foreach c: item:\n        # Load all clothes from the basket into the washing machine\n            if is_clothes(c) and inside(c, basket_for_clothes):\n                load_clothes_into_washing_machine(c, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "4. Run the washing machine.",
        "cdl": "behavior run_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        # Ensure the washing machine door is closed\n        achieve_once is_on(washing_machine)\n        # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        run_washing_machine(washing_machine)\n        # Run the washing machine"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Wipe the toilet with toilet paper and then throw it into the toilet.",
        "cdl": "behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):\n    body:\n        achieve_once close_char(char, toilet)\n        # Ensure the character is close to the toilet\n        achieve_once inhand(toilet_paper)\n        # Take the toilet paper\n        wipe(toilet)\n        # Wipe the toilet with the toilet paper\n\nbehavior throw_toilet_paper_in_toilet(toilet:item, toilet_paper:item):\n    body:\n        achieve_once inside(toilet_paper, toilet)\n        # Throw the toilet paper into the toilet\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet)\n        # Select a toilet\n\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper)\n        # Select toilet paper\n\n        wipe_toilet_with_toilet_paper(toilet, toilet_paper)\n        throw_toilet_paper_in_toilet(toilet, toilet_paper)"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Locate all the windows in the house.",
        "cdl": " \nbehavior locate_window(window:item):\n    body:\n        observe(window, \"Determine the location of the window\")\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and not visited(window):\n                locate_window(window)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Wipe each window with a towel.",
        "cdl": " \nbehavior achieve_wipe_window(window:item, towel:item):\n    body:\n        achieve_once inhand(towel)\n        wipe(window)\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and (visited(window) or open(window)):\n                bind towel: item where:\n                    is_towel(towel)\n                achieve_wipe_window(window, towel)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": " \nbehavior turn_on_dvd_player(dvd_player:item):\n    body:\n        if has_switch(dvd_player):\n            achieve is_on(dvd_player)\n\nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        # Select a DVD player item\n\n        turn_on_dvd_player(dvd_player)\n        # Turn on the DVD player\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book.",
        "cdl": "\nbehavior locate_book(book:item):\n    body:\n        observe(book, \"Determine the current location of the book\")\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book item\n\n        locate_book(book)\n        # Locate the book\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Put the book on the table in the home office.",
        "cdl": " \nbehavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the book\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach table: item:\n            if is_table(table) and inside(table, home_office):\n                # Identify table in the home office\n                place_book_on_table(book, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "3. Turn on the light in the home office.",
        "cdl": "behavior turn_on_light_in_office(light:item):\n    body:\n        if has_switch(light):\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        foreach light: item:\n            if is_light(light) and inside(light, home_office):\n                turn_on_light_in_office(light)"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Find the cat and put it on the table in the home office.",
        "cdl": " \nbehavior find_and_place_cat_on_table(cat:item, table:item):\n    body:\n        achieve_once close_char(char, cat)\n        # Move close to the cat\n        achieve_once on(cat, table)\n        # Place the cat on the table\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat item\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach table: item:\n            if is_table(table) and inside(table, home_office):\n                # Identify table in the home office\n                find_and_place_cat_on_table(cat, table)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "2. Put the pot on the stove.",
        "cdl": " \nbehavior place_pot_on_stove(pot:item, stove:item):\n    body:\n        achieve_once on(pot, stove)\n        # Place the pot on the stove\n\nbehavior ensure_pot_filled_with_water(pot:item, faucet:item):\n    body:\n        achieve_once close_char(char, faucet)\n        # Ensure the character is close to the faucet\n        achieve has_water(pot)\n        # Make sure the pot is filled with water\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot item\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet\n\n        ensure_pot_filled_with_water(pot, faucet)\n        place_pot_on_stove(pot, stove)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "3. Turn on the stove.",
        "cdl": "behavior turn_on_stove(stove:item):\n    body:\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind stove: item where:\n            is_stove(stove)\n        # Select the stove on which you need to turn on\n\n        achieve close_char(char, stove)\n        # Approach the stove to turn it on\n\n        turn_on_stove(stove)\n        # Turn on the stove"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "4. Put the egg in the pot.",
        "cdl": " \nbehavior put_egg_in_pot(egg:item, pot:item):\n    body:\n        achieve_once inside(egg, pot)\n        # Place the egg inside the pot\n\nbehavior wait_for_boiling_water(pot:item):\n    body:\n        observe(pot, \"Wait until water is boiling\")\n\nbehavior __goal__():\n    body:\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select an egg item\n\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot item\n\n        if has_water(pot):\n            wait_for_boiling_water(pot)\n            put_egg_in_pot(egg, pot)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find your cat and gently secure it near the washing area.",
        "cdl": " \nbehavior gently_secure_cat(cat: item, sink: item):\n    body:\n        achieve_once close_char(char, cat)\n        # Ensure the character is close to the cat\n        achieve close(cat, sink)\n        # Move the cat close to the sink\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat item\n\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 133\n        # Select the sink with ID 133\n \n        gently_secure_cat(cat, sink)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Slice the chicken into small pieces.",
        "cdl": "behavior slice_chicken(chicken:item, knife:item, cutting_board:item):\n    body:\n        achieve_once on(chicken, cutting_board)\n        # Place the chicken on the cutting board\n        achieve_once cut(chicken)\n        # Slice the chicken using the knife\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken item\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        slice_chicken(chicken, knife, cutting_board)\n        # Slice the chicken using the knife on the cutting board"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Serve the sliced chicken to the cat.",
        "cdl": "\nbehavior serve_sliced_chicken_to_cat(chicken:item, cat:item, table:item):\n    body:\n        achieve_once on(chicken, table)\n        # Place the sliced chicken on the table\n        achieve close(chicken, cat)\n        # Ensure the chicken is close to the cat\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken) and cut(chicken)\n        # Select the sliced chicken item\n\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat item\n\n        bind table: item where:\n            is_table(table)\n        # Select a table\n\n        serve_sliced_chicken_to_cat(chicken, cat, table)\n        # Serve the sliced chicken to the cat\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player.",
        "cdl": "behavior turn_on_dvd_player(dvd_player:item):\n    body:\n        if has_switch(dvd_player):\n            achieve is_on(dvd_player)\n\nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        # Select a DVD player item\n\n        turn_on_dvd_player(dvd_player)\n        # Turn on the DVD player"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book and place it on the coffee table in the home office.",
        "cdl": "behavior locate_and_place_book(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book item\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach table: item:\n            if is_table(table) and inside(table, home_office):\n                # Identify table in the home office\n                locate_and_place_book(book, table)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Prepare a cup of hot milk and place it on the table.",
        "cdl": " \nbehavior prepare_cup_of_hot_milk(cup:item, milk:item, microwave:item):\n    body:\n        achieve_once inside(milk, cup)\n        # Fill the cup with milk\n        achieve_once inside(cup, microwave)\n        # Place the cup with milk inside the microwave\n        achieve_once is_on(microwave)\n        # Turn on the microwave to heat the milk\n\nbehavior place_cup_on_table(cup:item, table:item):\n    body:\n        achieve_once on(cup, table)\n        # Put the cup on the table\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Identify the table in the home office\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select a milk item\n\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave\n\n        prepare_cup_of_hot_milk(cup, milk, microwave)\n        # Prepare a cup of hot milk\n\n        place_cup_on_table(cup, table)\n        # Place the prepared cup on the coffee table\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Clean the chicken and onions.  ",
        "cdl": "behavior clean_item(item:item):\n    body:\n        rinse(item)\n        wash(item)\n        scrub(item)\n        rinse(item) # Repeat the rinse to ensure cleanliness\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select a chicken item to be cleaned\n\n        bind onion: item where:\n            is_food_onion(onion)\n        # Select an onion item to be cleaned\n\n        clean_item(chicken)\n        # Clean the chicken\n\n        clean_item(onion)\n        # Clean the onion"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Put the chicken and onions into the oven to roast.",
        "cdl": " \nbehavior place_into_oven(chicken:item, onion:item, oven:item):\n    body:\n        achieve_once inside(chicken, oven)\n        achieve_once inside(onion, oven)\n\nbehavior roast_in_oven(oven:item):\n    body:\n        achieve_once is_on(oven)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken item\n\n        bind onion: item where:\n            is_food_onion(onion)\n        # Select the onion item\n\n        bind oven: item where:\n            is_oven(oven)\n        # Select the oven\n\n        place_into_oven(chicken, onion, oven)\n        roast_in_oven(oven)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Insert a CD into the CD player and play music.",
        "cdl": " \nbehavior insert_cd_into_player_and_play(cd:item, cd_player:item):\n    body:\n        achieve_once inside(cd, cd_player)\n        # Insert the CD into the CD player\n        achieve is_on(cd_player)\n        # Turn on the CD player to play music\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        # Select a CD\n\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        # Select a CD player\n\n        insert_cd_into_player_and_play(cd, cd_player)\n        # Insert the CD into the player and play music\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup.",
        "cdl": " \nbehavior locate_cup(cup:item):\n    body:\n        observe(cup, \"Determine the current location of the cup\")\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup item\n\n        locate_cup(cup)\n        # Locate the cup\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Fill the cup with water.",
        "cdl": " \nbehavior fill_cup_with_water(cup:item, faucet:item):\n    body:\n        achieve_once close_char(char, faucet) \n        # Ensure the character is close to the faucet\n        achieve_once has_water(cup) \n        # Fill the cup with water\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) \n        # Select the cup that has been found\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet\n\n        fill_cup_with_water(cup, faucet)\n        # Fill the cup with water using the faucet\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "3. Slice kiwi and add the slices into the cup with water.",
        "cdl": "behavior slice_kiwi_and_add_to_cup(kiwi:item, cup:item, knife:item, cutting_board:item):\n    body:\n        achieve_once on(kiwi, cutting_board)\n        # Place the kiwi on the cutting board\n        achieve_once cut(kiwi)\n        # Slice the kiwi using the knife\n        achieve_once inside(kiwi, cup)\n        # Place the kiwi slices into the cup\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi)\n        # Select the kiwi item\n\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2063\n        # Select the cup with ID 2063 that has been filled with water\n\n        bind knife: item where:\n            is_knife(knife) and id[knife] == 2050\n        # Select the knife with ID 2050\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) and id[cutting_board] == 2051\n        # Select the cutting board with ID 2051\n\n        slice_kiwi_and_add_to_cup(kiwi, cup, knife, cutting_board)"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Locate the fridge containing the items.",
        "cdl": "\nbehavior locate_fridge(fridge:item):\n    body:\n        observe(fridge, \"Determine the current location of the fridge\")\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select a fridge item\n\n        locate_fridge(fridge)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Transfer all the items from the fridge to the trashcan.",
        "cdl": "behavior transfer_items_from_fridge_to_trashcan(item:item, trashcan:item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Place the item inside the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and open(fridge)\n        # Bind to the fridge that is currently open\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select a trashcan\n\n        foreach o: item:\n        # Transfer all items from the fridge to the trashcan\n            if inside(o, fridge):\n                transfer_items_from_fridge_to_trashcan(o, trashcan)"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Locate your cat within the household.",
        "cdl": " \nbehavior locate_cat(cat:item):\n    body:\n        observe(cat, \"Determine the current location of the cat\")\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select a cat item\n\n        locate_cat(cat)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Approach the cat and touch it gently.",
        "cdl": " \nbehavior approach_and_touch_cat(cat:item):\n    body:\n        achieve close_char(char, cat)\n        # Move closer to the cat\n        touch(cat)\n        # Touch the cat gently\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat item\n\n        approach_and_touch_cat(cat)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "Output:",
        "cdl": " \nbehavior load_jacket_to_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve_once inside(jacket, washing_machine)\n        # Place the jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        # Close the washing machine door\n        achieve_once is_on(washing_machine)\n        # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket that needs washing\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        load_jacket_to_washing_machine(jacket, washing_machine)\n        # Load the jacket into the washing machine\n\n        start_washing_machine(washing_machine)\n        # Start the washing machine\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior hand_wash_jacket(jacket:item):\n    body:\n        wash(jacket)\n        # Hand wash the jacket\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket item that needs to be hand washed\n\n        hand_wash_jacket(jacket)\n        # Hand wash the jacket\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": "behavior load_jacket_to_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve_once inside(jacket, washing_machine)\n        # Place the jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine) # Close the washing machine door\n        achieve_once is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket that needs washing\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select a washing machine\n\n        load_jacket_to_washing_machine(jacket, washing_machine)\n        # Load the jacket into the washing machine\n\n        start_washing_machine(washing_machine) # Start the washing machine"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find and wash a lemon.",
        "cdl": "behavior find_and_clean_lemon(lemon:item):\n    body:\n        achieve_once close_char(char, lemon)\n        observe(lemon, \"Determine if the lemon is clean\")\n        if dirty(lemon):\n            wash(lemon)\n\nbehavior __goal__():\n    body:\n        bind lemon: item where:\n            is_food_lemon(lemon)\n\n        find_and_clean_lemon(lemon)"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Find all the bowls and plates in the household.",
        "cdl": " \ndef has_bowl_or_plate_in_household():\n    # Function to check if there are bowls or plates in the household\n    symbol has_bowl_or_plate = exists o: item : (is_bowl(o) or is_plate(o))\n    return has_bowl_or_plate\n\nbehavior __goal__():\n    body:\n        if has_bowl_or_plate_in_household():\n            # If there are already bowls or plates found, proceed with the task\n            foreach o: item:\n                if is_bowl(o) or is_plate(o):\n                    observe(o, \"Check the location of bowls or plates\")\n        else:\n            # If no bowls or plates are found, initiate exploring to locate them\n            foreach o: item:\n                if is_bowl(o) or is_plate(o) and not visited(o):\n                    observe(o, \"Search for any unvisited bowls or plates\")\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Load the bowls and plates into the dishwasher.",
        "cdl": " \nbehavior load_bowls_and_plates_into_dishwasher(dish:item, dishwasher:item):\n    body:\n        achieve_once inside(dish, dishwasher)\n        # Load the dish into the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        foreach dish: item:\n            if is_bowl(dish) or is_plate(dish):\n                load_bowls_and_plates_into_dishwasher(dish, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "3. Start the dishwasher to wash the bowls and plates.",
        "cdl": " \nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        # Ensure the dishwasher is closed\n        achieve_once is_on(dishwasher)\n        # Start the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher to wash the bowls and plates\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink by scrubbing it, washing it, wiping it, or rinsing it.",
        "cdl": "behavior clean_bathroom_sink(sink:item, cleaning_solution:item):\n    body:\n        achieve_once inhand(cleaning_solution)\n        # Ensure cleaning solution is in hand\n        achieve clean(sink)\n        # Clean the sink by achieving the clean state\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select a cleaning solution item\n\n        clean_bathroom_sink(sink, cleaning_solution)\n        # Clean the bathroom sink using the selected cleaning solution"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Identify the bowls and plates to be washed.",
        "cdl": " \ndef has_bowls_or_plates(dishwasher:item):\n    # Function to check if there are bowls or plates in or near the dishwasher\n    symbol has_items= exists o: item : ((is_bowl(o) or is_plate(o)) and close(o, dishwasher))\n    return has_items\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        if has_bowls_or_plates(dishwasher):\n            # If there are bowls or plates near or in the dishwasher, inspect them\n            foreach o: item:\n                if (is_bowl(o) or is_plate(o)) and close(o, dishwasher):\n                    observe(o, \"Verify if the item is ready to load into the dishwasher\")\n        else:\n            # If no bowls or plates are near the dishwasher, search for them\n            foreach o: item:\n                if (is_bowl(o) or is_plate(o)) and not visited(o):\n                    observe(o, \"Search for any unvisited bowls or plates\")\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Load the bowls and plates into the dishwasher and start it.",
        "cdl": " \nbehavior load_bowls_and_plates_into_dishwasher(bowl_or_plate:item, dishwasher:item):\n    body:\n        achieve_once inside(bowl_or_plate, dishwasher)\n        # Load the bowl or plate into the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        # Close the dishwasher door\n        achieve_once is_on(dishwasher)\n        # Turn on the dishwasher to start the washing process\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        foreach dish: item:\n            if is_bowl(dish) or is_plate(dish):\n                load_bowls_and_plates_into_dishwasher(dish, dishwasher)\n        start_dishwasher(dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "3. Find the forks and wash them by hand.",
        "cdl": "\nbehavior locate_fork_for_hand_washing(fork:item):\n    body:\n        observe(fork, \"Check the location of fork for hand washing\")\n\nbehavior wash_fork_by_hand(fork:item):\n    body:\n        wash(fork)\n\nbehavior __goal__():\n    body:\n        foreach fork: item:\n            if is_fork(fork) and not visited(fork):\n                locate_fork_for_hand_washing(fork)\n                wash_fork_by_hand(fork)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": " \nbehavior turn_on_light(light:item):\n    body:\n        if has_switch(light):\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n\n        foreach light: item:\n            if is_light(light) and inside(light, bathroom):\n                turn_on_light(light)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "Boil some rice in a pot.",
        "cdl": " \nbehavior fill_pot_with_rice_and_boil(pot:item, rice:item, stove:item, faucet:item):\n    body:\n        achieve_once close_char(char, faucet)\n        # Ensure the character is close to the faucet\n        achieve has_water(pot)\n        # Fill the pot with water\n        achieve_once inside(rice, pot)\n        # Add rice into the pot\n        achieve_once on(pot, stove)\n        # Place the pot on the stove\n        achieve is_on(stove)\n        # Turn on the stove to boil the rice\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot item\n\n        bind rice: item where:\n            is_food_rice(rice)\n        # Select rice to boil\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet\n\n        fill_pot_with_rice_and_boil(pot, rice, stove, faucet)\n        # Fill the pot with water, add rice, and boil it on the stove\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket that contains clothes.",
        "cdl": "def has_clothes_inside_basket(basket:item):\n    # Function to check if there are clothes inside a specified basket\n    symbol has_clothes = exists o: item : (is_clothes(o) and inside(o, basket))\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : (is_basket_for_clothes(basket) and has_clothes_inside_basket(basket)):\n            # Check if there is a basket with clothes based on the available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and has_clothes_inside_basket(basket)\n            # Select a basket that has clothes inside\n            achieve close_char(char, basket)\n            # Move the character closer to the basket with clothes\n\n        else: \n            # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    # Check all unvisited baskets\n                    observe(basket, \"Check if there are any clothes in the basket\")\n                    # Observe whether each basket has any clothes"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Put the clothes into the washing machine and start the washing cycle.",
        "cdl": "behavior load_clothes_into_washing_machine(c:item, washing_machine:item):\n    body:\n        achieve_once inside(c, washing_machine)\n        # Transfer a clothing item into the washing machine\n\nbehavior start_washing_cycle(washing_machine:item):\n    body:\n        achieve_once closed(washing_machine)\n        # Ensure the washing machine door is closed\n        achieve_once is_on(washing_machine)\n        # Turn on the washing machine to start the washing cycle\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket] == 2078\n        # Bind the basket with clothes\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Bind the washing machine\n\n        foreach c: item:\n        # Load all clothes from the basket into the washing machine\n            if is_clothes(c) and inside(c, basket):\n                load_clothes_into_washing_machine(c, washing_machine)\n\n        start_washing_cycle(washing_machine)\n        # Start the washing cycle"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": "behavior open_windows_in_bathroom(window:item):\n    body:\n        achieve_once open(window)\n        # Ensure the windows in the bathroom are open\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        foreach window: item:\n            if is_window(window) and inside(window, bathroom):\n                # Identify windows inside the bathroom\n                open_windows_in_bathroom(window)"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find the cat.",
        "cdl": " \nbehavior locate_cat(cat:item):\n    body:\n        observe(cat, \"Determine the current location of the cat\")\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select a cat item\n\n        locate_cat(cat)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Gently touch the cat.",
        "cdl": "behavior gently_touch_cat(cat:item):\n    body:\n        achieve close_char(char, cat)\n        # Move closer to the cat\n        touch(cat)\n        # Touch the cat gently\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat item\n\n        gently_touch_cat(cat)"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the fridge containing the items.",
        "cdl": " \nbehavior locate_fridge(fridge:item):\n    body:\n        observe(fridge, \"Determine the current location of the fridge\")\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select a fridge item\n\n        locate_fridge(fridge)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items from the fridge into the trashcan.",
        "cdl": " \nbehavior throw_items_from_fridge_to_trash(item:item, trashcan:item):\n    body:\n        achieve_once inside(item, trashcan)\n        # Place the item inside the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and open(fridge)\n        # Ensure the fridge is the open one\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select a trashcan\n\n        foreach o: item:\n        # Throw all items from the fridge into the trashcan\n            if inside(o, fridge):\n                throw_items_from_fridge_to_trash(o, trashcan)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Prepare a bowl of water.",
        "cdl": " \nbehavior fill_bowl_with_water(bowl:item, faucet:item):\n    body:\n        achieve_once close_char(char, faucet)\n        # Ensure the character is close to the faucet\n        achieve_once inhand(bowl)\n        # Take the bowl in hand\n        achieve has_water(bowl)\n        # Fill the bowl with water\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl) and id[bowl]==2095\n        # Select the bowl with ID 2095\n\n        bind faucet: item where:\n            is_faucet(faucet) and id[faucet]==134\n        # Select the faucet with ID 134\n\n        fill_bowl_with_water(bowl, faucet)\n        # Fill the bowl with water using the faucet\n "
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Put the bowl on the table in the home office.",
        "cdl": "\nbehavior locate_home_office_table(table:item):\n    body:\n        observe(table, \"Determine if this is the table in the home office\")\n\nbehavior place_bowl_on_table(bowl:item, table:item):\n    body:\n        achieve_once on(bowl, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind bowl: item where:\n            is_bowl(bowl)\n\n        if inside(bowl, home_office):\n            foreach table: item:\n                if is_table(table) and inside(table, home_office):\n                    place_bowl_on_table(bowl, table)\n        else:\n            foreach table: item:\n                if is_table(table) and not visited(table):\n                    locate_home_office_table(table)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "3. Find the cat and put it on the table in the home office.",
        "cdl": " \nbehavior find_and_place_cat_on_table(cat:item, table:item):\n    body:\n        achieve_once close_char(char, cat)\n        # Move close to the cat\n        achieve_once on(cat, table)\n        # Place the cat on the table\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat item\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach table: item:\n            if is_table(table) and inside(table, home_office):\n                # Identify table in the home office\n                find_and_place_cat_on_table(cat, table)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put cleaning solution in the dishwasher.",
        "cdl": " \nbehavior add_cleaning_solution(dishwasher:item, cleaning_solution:item):\n    body:\n        achieve_once inside(cleaning_solution, dishwasher)\n        # Add cleaning solution into the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select cleaning solution\n\n        add_cleaning_solution(dishwasher, cleaning_solution)\n        # Add the cleaning solution to the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Place the bowls and plates in the dishwasher.",
        "cdl": " \nbehavior place_dishes_in_dishwasher(dish:item, dishwasher:item):\n    body:\n        achieve_once inside(dish, dishwasher)\n        # Place the dish inside the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher]==129\n        # Select the dishwasher with ID 129\n\n        foreach dish: item:\n            if is_plate(dish) or is_bowl(dish):\n                place_dishes_in_dishwasher(dish, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "3. Start the dishwasher to wash the bowls and plates.",
        "cdl": "behavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        # Ensure the dishwasher is closed\n        achieve_once is_on(dishwasher)\n        # Start the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher to wash the bowls and plates"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and then put it back in the fridge.",
        "cdl": " \nbehavior cut_and_store_chicken(chicken:item, fridge:item):\n    body:\n        achieve_once cut(chicken)\n        # Cut the chicken into pieces\n        achieve_once inside(chicken, fridge)\n        # Place the cut chicken inside the fridge\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve_once closed(fridge)\n        # Ensure the fridge is closed\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken item\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select a fridge\n\n        cut_and_store_chicken(chicken, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put cleaning solution in the dishwasher.",
        "cdl": "behavior add_cleaning_solution(dishwasher:item, cleaning_solution:item):\n    body:\n        achieve_once inside(cleaning_solution, dishwasher)\n        # Add cleaning solution into the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select cleaning solution\n\n        add_cleaning_solution(dishwasher, cleaning_solution)\n        # Add the cleaning solution to the dishwasher"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and plates with the dishwasher.",
        "cdl": "behavior load_bowls_and_plates_into_dishwasher(dish:item, dishwasher:item):\n    body:\n        achieve_once inside(dish, dishwasher)\n        # Load the dish into the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        # Ensure the dishwasher is closed\n        achieve_once is_on(dishwasher)\n        # Start the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        foreach dish: item:\n            if is_bowl(dish) or is_plate(dish):\n                load_bowls_and_plates_into_dishwasher(dish, dishwasher)\n        start_dishwasher(dishwasher)\n        # Start the dishwasher to wash the bowls and plates"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the spectacles and put them on the coffee table in the home office.",
        "cdl": " \ndef is_coffee_table(table:item):\n    # Function to check if a table is a coffee table\n    symbol is_coffee_table = exists room: item : (is_home_office(room) and inside(table, room))\n    return is_coffee_table\n\nbehavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):\n    body:\n        achieve_once on(spectacles, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        # Select the spectacles\n        \n        if exists table: item : (is_table(table) and is_coffee_table(table)):\n            bind coffee_table: item where:\n                is_table(coffee_table) and is_coffee_table(coffee_table)\n            # Select the coffee table if it is known\n            \n            if not on(spectacles, coffee_table):\n                # If the spectacles are not already on the coffee table\n                place_spectacles_on_coffee_table(spectacles, coffee_table)\n        \n        else:\n            # If the coffee table is not known, locate it\n            foreach table: item:\n                if is_table(table) and not visited(table):\n                    observe(table, \"Determine if this is the coffee table in the home office\")\n                    # Observe each unvisited table to find the coffee table\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": "behavior locate_and_place_book(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book item\n        \n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach table: item:\n            if is_table(table) and inside(table, home_office):\n                # Identify table in the home office\n                locate_and_place_book(book, table)"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Clean the chicken and the onion.",
        "cdl": "behavior clean_item(item:item):\n    body:\n        rinse(item)\n        wash(item)\n        scrub(item)\n        rinse(item) # Repeat the rinse to ensure cleanliness\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken item to be cleaned\n\n        bind onion: item where:\n            is_food_onion(onion)\n        # Select the onion item to be cleaned\n\n        clean_item(chicken)\n        # Clean the chicken\n\n        clean_item(onion)\n        # Clean the onion"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Place the chicken and onion in the oven to roast.",
        "cdl": "behavior place_into_oven(chicken:item, onion:item, oven:item):\n    body:\n        achieve_once inside(chicken, oven)\n        achieve_once inside(onion, oven)\n\nbehavior roast_in_oven(oven:item):\n    body:\n        achieve_once is_on(oven)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken item\n\n        bind onion: item where:\n            is_food_onion(onion)\n        # Select the onion item\n\n        bind oven: item where:\n            is_oven(oven)\n        # Select the oven\n\n        place_into_oven(chicken, onion, oven)\n        roast_in_oven(oven)"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put cleaning solution in the dishwasher.",
        "cdl": "behavior add_cleaning_solution(dishwasher:item, cleaning_solution:item):\n    body:\n        achieve_once inside(cleaning_solution, dishwasher)\n        # Add cleaning solution into the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select cleaning solution\n\n        add_cleaning_solution(dishwasher, cleaning_solution)\n        # Add the cleaning solution to the dishwasher"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and the plates with the dishwasher.",
        "cdl": " \nbehavior load_bowls_and_plates_into_dishwasher(dish:item, dishwasher:item):\n    body:\n        achieve_once inside(dish, dishwasher)\n        # Load the dish into the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        # Ensure the dishwasher is closed\n        achieve_once is_on(dishwasher)\n        # Start the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        foreach dish: item:\n            if is_bowl(dish) or is_plate(dish):\n                load_bowls_and_plates_into_dishwasher(dish, dishwasher)\n        start_dishwasher(dishwasher)\n        # Start the dishwasher to wash the bowls and plates\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Identify all windows in the house.",
        "cdl": " \nbehavior locate_window(window:item):\n    body:\n        observe(window, \"Determine the location of the window\")\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and not visited(window):\n                locate_window(window)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Use a towel to wipe each window.",
        "cdl": "behavior achieve_wipe_window(window:item, towel:item):\n    body:\n        achieve_once inhand(towel)\n        wipe(window)\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and (visited(window) or open(window)):\n                bind towel: item where:\n                    is_towel(towel)\n                achieve_wipe_window(window, towel)"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Use a pot to boil some water.",
        "cdl": "behavior fill_pot_with_water(pot:item):\n    body:\n        achieve has_water(pot)\n        # Fill the pot with water\n\nbehavior heat_pot(pot:item, stove:item):\n    body:\n        achieve_once on(pot, stove)\n        achieve is_on(stove)\n        # Place the pot on the stove and turn on the stove to boil water\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot item\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        fill_pot_with_water(pot) # Fill the pot with water\n        heat_pot(pot, stove) # Boil the water using the stove"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Load the bowls and plates into the dishwasher.",
        "cdl": "behavior load_bowls_and_plates_into_dishwasher(item:item, dishwasher:item):\n    body:\n        achieve_once inside(item, dishwasher)\n        # Load the bowls and plates into the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        foreach item: item:\n            if is_bowl(item) or is_plate(item):\n                load_bowls_and_plates_into_dishwasher(item, dishwasher)"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Start the dishwasher to wash the bowls and plates.",
        "cdl": " \nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve_once closed(dishwasher)\n        # Ensure the dishwasher is closed\n        achieve_once is_on(dishwasher)\n        # Start the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher to wash the bowls and plates\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "3. Wash the forks by hand in the sink.",
        "cdl": " \nbehavior find_and_wash_fork(fork:item):\n    body:\n        observe(fork, \"Determine the location of the fork for hand washing\")\n        # Locate the fork\n        wash(fork)\n        # Wash the fork by hand in the sink\n\nbehavior __goal__():\n    body:\n        foreach fork: item:\n            if is_fork(fork) and not visited(fork):\n                find_and_wash_fork(fork)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Slice some chicken and give it to your cat.",
        "cdl": "behavior slice_chicken(chicken:item, knife:item, cutting_board:item):\n    body:\n        achieve_once on(chicken, cutting_board)\n        # Place the chicken on the cutting board\n        achieve_once cut(chicken)\n        # Slice the chicken using the knife\n\nbehavior serve_sliced_chicken_to_cat(chicken:item, cat:item, table:item):\n    body:\n        achieve_once on(chicken, table)\n        # Place the sliced chicken on the table\n        achieve close(chicken, cat)\n        # Ensure the chicken is close to the cat\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken item\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        slice_chicken(chicken, knife, cutting_board)\n        # Slice the chicken\n\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat item\n\n        bind table: item where:\n            is_table(table)\n        # Select a table\n\n        serve_sliced_chicken_to_cat(chicken, cat, table)\n        # Serve the sliced chicken to the cat on the table"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Identify all the windows in the house.",
        "cdl": " \nbehavior locate_window(window:item):\n    body:\n        observe(window, \"Determine the location of the window\")\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and not visited(window):\n                locate_window(window)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Wipe each window with a towel.",
        "cdl": " \nbehavior achieve_wipe_window(window:item, towel:item):\n    body:\n        achieve_once inhand(towel)\n        wipe(window)\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and (visited(window) or open(window)):\n                bind towel: item where:\n                    is_towel(towel)\n                achieve_wipe_window(window, towel)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Wipe the toilet with toilet paper and then throw the paper into the toilet.",
        "cdl": "behavior wipe_toilet_with_toilet_paper(toilet:item, toilet_paper:item):\n    body:\n        achieve_once close_char(char, toilet)\n        # Ensure the character is close to the toilet\n        achieve_once inhand(toilet_paper)\n        # Take the toilet paper\n        wipe(toilet)\n        # Wipe the toilet with the toilet paper\n\nbehavior throw_toilet_paper_in_toilet(toilet:item, toilet_paper:item):\n    body:\n        achieve_once inside(toilet_paper, toilet)\n        # Throw the toilet paper into the toilet\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet)\n        # Select a toilet\n\n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper)\n        # Select toilet paper\n\n        wipe_toilet_with_toilet_paper(toilet, toilet_paper)\n        throw_toilet_paper_in_toilet(toilet, toilet_paper)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book.",
        "cdl": " \nbehavior locate_book(book:item):\n    body:\n        observe(book, \"Determine the current location of the book\")\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book item\n\n        locate_book(book)\n        # Locate the book\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Put the book on the table in the home office.",
        "cdl": " \nbehavior place_book_on_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the book\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach table: item:\n            if is_table(table) and inside(table, home_office):\n                # Identify table in the home office\n                place_book_on_table(book, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "3. Turn on the light in the home office.",
        "cdl": "\nbehavior turn_on_light(light:item):\n    body:\n        if has_switch(light):\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        foreach light: item:\n            if is_light(light) and inside(light, home_office):\n                turn_on_light(light)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and toast it.",
        "cdl": " \nbehavior cut_bread(bread:item, knife:item, cutting_board:item):\n    body:\n        achieve_once on(bread, cutting_board)\n        # Place the bread on the cutting board\n        achieve_once cut(bread)\n        # Slice the bread using the knife\n\nbehavior toast_bread(sliced_bread:item, toaster:item):\n    body:\n        achieve_once inside(sliced_bread, toaster)\n        # Place the sliced bread inside the toaster\n        achieve_once plugged(toaster)\n        # Ensure the toaster is plugged in\n        achieve_once is_on(toaster)\n        # Turn on the toaster to toast the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread)\n        # Select a bread item\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind toaster: item where:\n            is_toaster(toaster) and has_plug(toaster)\n        # Select a toaster that has a plug\n\n        cut_bread(bread, knife, cutting_board)\n\n        foreach sliced_bread: item:\n            if is_food_bread(sliced_bread) and cut(sliced_bread):\n                toast_bread(sliced_bread, toaster)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and toast it.",
        "cdl": "behavior cut_bread(bread:item, knife:item, cutting_board:item):\n    body:\n        achieve_once on(bread, cutting_board)\n        # Place the bread on the cutting board\n        achieve_once cut(bread)\n        # Slice the bread using the knife\n\nbehavior toast_bread(sliced_bread:item, toaster:item):\n    body:\n        achieve_once inside(sliced_bread, toaster)\n        # Place the sliced bread inside the toaster\n        achieve_once plugged(toaster)\n        # Ensure the toaster is plugged in\n        achieve_once is_on(toaster)\n        # Turn on the toaster to toast the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread)\n        # Select a bread item\n\n        bind knife: item where:\n            is_knife(knife)\n        # Select a knife\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select a cutting board\n\n        bind toaster: item where:\n            is_toaster(toaster) and has_plug(toaster)\n        # Select a toaster that has a plug\n\n        cut_bread(bread, knife, cutting_board)\n\n        foreach sliced_bread: item:\n            if is_food_bread(sliced_bread) and cut(sliced_bread):\n                toast_bread(sliced_bread, toaster)"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV by touching the remote control.",
        "cdl": " \nbehavior touch_remote_control(remote_control:item):\n    body:\n        achieve_once close_char(char, remote_control)\n        # Ensure the character is close to the remote control\n        touch(remote_control)\n        # Touch the remote control\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select a remote control item\n\n        touch_remote_control(remote_control)\n        # Touch the remote control to turn on the TV\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "Insert the CD into the CD player and play the music.",
        "cdl": "behavior insert_cd_into_player_and_play(cd:item, cd_player:item):\n    body:\n        achieve_once inside(cd, cd_player)\n        # Insert the CD into the CD player\n        achieve is_on(cd_player)\n        # Turn on the CD player to play music\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        # Select a CD\n\n        bind cd_player: item where:\n            is_cd_player(cd_player)\n        # Select a CD player\n\n        insert_cd_into_player_and_play(cd, cd_player)\n        # Insert the CD into the player and play music"
    },
    {
        "task_name": "Make coffee",
        "source_sub_task": "Make a cup of coffee using the coffee maker.",
        "cdl": " \nbehavior switch_on_coffee_maker(coffee_maker:item):\n    body:\n        if has_switch(coffee_maker):\n            achieve is_on(coffee_maker)\n\nbehavior prepare_coffee_with_coffee_maker(coffee_maker:item, cup:item):\n    body:\n        achieve_once inside(cup, coffee_maker)\n        # Place the cup inside the coffee maker\n        switch_on_coffee_maker(coffee_maker)\n        # Ensure the coffee maker is on\n\nbehavior __goal__():\n    body:\n        bind coffee_maker: item where:\n            is_coffe_maker(coffee_maker) and has_plug(coffee_maker) and plugged(coffee_maker)\n        # Select a coffee maker that is plugged in\n\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2087\n        # Select the specific cup with ID 2087\n\n        prepare_coffee_with_coffee_maker(coffee_maker, cup)\n        # Use the coffee maker to prepare coffee with the selected cup\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find a book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior locate_and_place_book(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book item\n        \n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach table: item:\n            if is_table(table) and inside(table, home_office):\n                # Identify table in the home office\n                locate_and_place_book(book, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Open the window in the home office.",
        "cdl": "behavior open_window(window:item):\n    body:\n        achieve_once open(window)\n        # Ensure the window is open\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach window: item:\n            if is_window(window) and inside(window, home_office):\n                # Identify windows in the home office\n                open_window(window)"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find a bowl and fill it with water.",
        "cdl": " \nbehavior fill_bowl_with_water(bowl:item, faucet:item):\n    body:\n        achieve_once close_char(char, faucet)\n        # Ensure the character is close to the faucet\n        achieve_once inhand(bowl)\n        # Take the bowl in hand\n        achieve has_water(bowl)\n        # Fill the bowl with water\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select a bowl\n\n        bind faucet: item where:\n            is_faucet(faucet)\n        # Select a faucet\n\n        fill_bowl_with_water(bowl, faucet)\n        # Fill the bowl with water using the faucet\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Put the bowl of water on the table in the home office.",
        "cdl": "behavior move_bowl_to_home_office_table(bowl:item, table:item):\n    body:\n        achieve_once on(bowl, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n\n        bind bowl: item where:\n            is_bowl(bowl) and id[bowl] == 2071\n        # Select the bowl with ID 2071\n\n        if inside(bowl, home_office):\n            foreach table: item:\n                if is_table(table) and inside(table, home_office):\n                    move_bowl_to_home_office_table(bowl, table)\n        else:\n            foreach table: item:\n                if is_table(table) and not visited(table):\n                    observe(table, \"Determine if this table is in the home office and place the bowl\")"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "3. Find the cat and put it on the table in the home office.",
        "cdl": "behavior find_and_place_cat_on_table(cat:item, table:item):\n    body:\n        achieve_once close_char(char, cat)\n        # Move close to the cat\n        achieve_once on(cat, table)\n        # Place the cat on the table\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat item\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        foreach table: item:\n            if is_table(table) and inside(table, home_office):\n                # Identify table in the home office\n                find_and_place_cat_on_table(cat, table)"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Heat oil in a pan.",
        "cdl": "behavior heat_oil_in_pan(oil:item, pan:item, stove:item):\n    body:\n        achieve_once inside(oil, pan)\n        # Add the oil into the pan\n        achieve_once on(pan, stove)\n        # Place the pan on the stove\n        achieve is_on(stove)\n        # Turn on the stove to heat the oil\n\nbehavior __goal__():\n    body:\n        bind oil: item where:\n            is_oil(oil)\n        # Select oil item\n\n        bind pan: item where:\n            is_fryingpan(pan)\n        # Select a frying pan\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        heat_oil_in_pan(oil, pan, stove)\n        # Heat the oil in the pan on the stove"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Put the banana in the frying pan.",
        "cdl": " \nbehavior place_banana_in_frying_pan(banana:item, frying_pan:item):\n    body:\n        achieve_once inside(banana, frying_pan)\n\nbehavior __goal__():\n    body:\n        bind banana: item where:\n            is_food_banana(banana)\n        # Select the banana item\n        \n        bind frying_pan: item where:\n            is_fryingpan(frying_pan)\n        # Select a frying pan\n        \n        place_banana_in_frying_pan(banana, frying_pan)\n        # Place the banana in the frying pan\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV by touching the remote control.",
        "cdl": "behavior touch_remote_control(remote_control:item):\n    body:\n        achieve_once close_char(char, remote_control)\n        # Ensure the character is close to the remote control\n        touch(remote_control)\n        # Touch the remote control\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select a remote control item\n\n        touch_remote_control(remote_control)\n        # Touch the remote control to turn on the TV"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink directly.",
        "cdl": " \nbehavior clean_bathroom_sink(sink:item):\n    body:\n        rinse(sink)\n        scrub(sink)\n        rinse(sink)\n        # This sequence ensures the sink is cleaned by rinsing, scrubbing, then rinsing again\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 19\n        # Select the sink with ID 19\n        clean_bathroom_sink(sink)\n        # Execute the cleaning process\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": " \nbehavior turn_on_light(light:item):\n    body:\n        if has_switch(light):\n            achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n\n        foreach light: item:\n            if is_light(light) and inside(light, bathroom):\n                turn_on_light(light)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and pour milk into it.",
        "cdl": " \nbehavior find_and_pour_milk_into_cup(cup:item, milk:item):\n    body:\n        achieve_once inside(milk, cup)\n        # Pour the milk into the cup\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) \n        # Select a cup\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        find_and_pour_milk_into_cup(cup, milk)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": "behavior heat_cup_of_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve_once inside(cup, microwave)\n        # Place the cup with milk inside the microwave\n        achieve_once is_on(microwave)\n        # Turn on the microwave to heat the milk\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2132\n        # Select the cup with ID 2132 which has the milk\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave\n\n        heat_cup_of_milk_in_microwave(cup, microwave)\n        # Heat the cup of milk in the microwave"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book in the environment.",
        "cdl": "behavior locate_book(book:item):\n    body:\n        observe(book, \"Determine the current location of the book\")\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book item\n\n        locate_book(book)\n        # Locate the book"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": "behavior place_book_on_coffee_table(book:item, table:item):\n    body:\n        achieve_once on(book, table)\n\ndef is_coffee_table(table:item):\n    # Function to identify if a table is a coffee table\n    symbol is_coffee_table = exists room: item : (is_home_office(room) and inside(table, room))\n    return is_coffee_table\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the book\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        if exists table: item : (is_table(table) and is_coffee_table(table)):\n            bind coffee_table: item where:\n                is_table(coffee_table) and is_coffee_table(coffee_table)\n            # Select the coffee table if it is known\n\n            place_book_on_coffee_table(book, coffee_table)\n\n        else:\n            foreach table: item:\n                if is_table(table) and not visited(table):\n                    observe(table, \"Determine if this is the coffee table in the home office\")\n                    # Search for the coffee table in the home office"
    }
]