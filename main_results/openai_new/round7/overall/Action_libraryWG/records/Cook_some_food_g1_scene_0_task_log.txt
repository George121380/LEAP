From agent.py
Reset goals: The sub-goals are: 
['1. Find the vegetables you want to boil.  ', '2. Fill a pot with water.  ', '3. Place the pot on the stove and set the stove to a boiling temperature.  ', '4. Add the vegetables to the pot and boil until cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetable(vegetable:item):
    # Function to check if an item is classified as a vegetable
    symbol is_vegetable=is_food_vegetable(vegetable)
    return is_vegetable

behavior __goal__():
    body:
        if exists vegetable: item : (has_vegetable(vegetable)):
            # Check if theres any known vegetable item
            bind vegetable: item where:
                has_vegetable(vegetable)
            achieve close_char(char, vegetable) 
            # Move the character closer to the vegetable
            
        else: 
           # If no known vegetable is found, initiate exploration to locate one
            foreach item: item:
                if is_food_item(item) and not visited(item):
                    # Check all unvisited potential food items
                    observe(item,"Check if this item is a vegetable")
                    # Observe whether each item is a vegetable

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_food_item not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#goal_representation
 
def has_vegetable(vegetable:item):
    # Function to check if an item is classified as a vegetable
    symbol is_vegetable=is_food_vegetable(vegetable)
    return is_vegetable

behavior __goal__():
    body:
        if exists vegetable: item : (has_vegetable(vegetable)):
            # Check if theres any known vegetable item
            bind vegetable: item where:
                has_vegetable(vegetable)
            achieve close_char(char, vegetable) 
            # Move the character closer to the vegetable
            
        else: 
           # If no known vegetable is found, initiate exploration to locate one
            foreach item: item:
                if is_food_vegetable(item) and not visited(item):
                    # Check all unvisited potential vegetable items
                    observe(item,"Check if this item is a vegetable")
                    # Observe whether each item is a vegetable

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_vegetable(vegetable:item):
    # Function to check if an item is classified as a vegetable
    symbol is_vegetable=is_food_vegetable(vegetable)
    return is_vegetable

behavior __goal__():
    body:
        if exists vegetable: item : (has_vegetable(vegetable)):
            # Check if theres any known vegetable item
            bind vegetable: item where:
                has_vegetable(vegetable)
            achieve close_char(char, vegetable) 
            # Move the character closer to the vegetable
            
        else: 
           # If no known vegetable is found, initiate exploration to locate one
            foreach item: item:
                if is_food_vegetable(item) and not visited(item):
                    # Check all unvisited potential vegetable items
                    observe(item,"Check if this item is a vegetable")
                    # Observe whether each item is a vegetable

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_vegetable_2041, kitchen_counter_230)walk_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_vegetable_2041, kitchen_counter_230)
Fail to find food_vegetable_2041 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_vegetable_2041, cupboard_229)walk_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_vegetable_2041, cupboard_229)
Fail to find food_vegetable_2041 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_vegetable_2041, fridge_289)walk_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_vegetable_2041, fridge_289)
Find food_vegetable_2041. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a pot suitable for boiling vegetables and place it on the stove.', '2. Put the vegetables into the pot and boil them.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_pot_around_stove(stove: item):
    # Function to check if there is a pot on the stove
    symbol pot_on_stove=exists p: item : (is_pot(p) and on(p, stove))
    return pot_on_stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) 
        # Select a stove
        
        if not has_pot_around_stove(stove):
            foreach obj: item:
                if is_pot(obj) and not visited(obj):
                    observe(obj,"Confirm if this is a pot suitable for boiling vegetables")
                    # Observe to check if its a pot suitable for boiling vegetables

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_pot_around_stove(stove: item):
    # Function to check if there is a pot on the stove
    symbol pot_on_stove=exists p: item : (is_pot(p) and on(p, stove))
    return pot_on_stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) 
        # Select a stove
        
        if not has_pot_around_stove(stove):
            foreach obj: item:
                if is_pot(obj) and not visited(obj):
                    observe(obj,"Confirm if this is a pot suitable for boiling vegetables")
                    # Observe to check if its a pot suitable for boiling vegetables

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)obs(pot_2069, Confirm if this is a pot suitable for boiling vegetables)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
obs(pot_2069, Confirm if this is a pot suitable for boiling vegetables)
Get this information:  pot_2069 is inside dining_room_201. pot_2069 is close to kitchen_counter_230. pot_2069 is close to character_65. pot_2069 is on kitchen_counter_230. pot_2069 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the pot (pot_2069) on the stove. Currently, the pot is on kitchen_counter_230.
##############################
From agent.py
Human Instruction: You need to place the pot (pot_2069) on the stove. Currently, the pot is on kitchen_counter_230.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_vegetable_2041 around kitchen_counter_230.
Action 3: Walk to cupboard_229.
Action 4: Open cupboard_229.
Action 5: look for food_vegetable_2041 around cupboard_229.
Action 6: Walk to fridge_289.
Action 7: Switch off fridge_289.
Action 8: Open fridge_289.
Action 9: look for food_vegetable_2041 around fridge_289.
Action 10: Walk to pot_2069.
Action 11: Open pot_2069.
Action 12: Observe around pot_2069 with the question of Confirm if this is a pot suitable for boiling vegetables.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior check_pot_suitable_for_boiling(pot:item):
    body:
        observe(pot, "Confirm if this is a pot suitable for boiling vegetables")

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 230
        bind stove: item where:
            is_stove(stove)
        achieve close_char(char, kitchen_counter)
        check_pot_suitable_for_boiling(pot)
        achieve_once inhand(pot)
        achieve close_char(char, stove)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_place_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once inhand(pot) # Temporarily hold the pot to move it to the stove
        achieve_once on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot with ID 2069
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        find_and_place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_place_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once inhand(pot) # Temporarily hold the pot to move it to the stove
        achieve_once on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot with ID 2069
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        find_and_place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_sink_231(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(fork,sink_instance)
        else:
            exp(fork,sink_instance)
    eff:
        unknown[fork]=False
        close[fork,sink_instance]=True
        close[sink_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve_once inside(vegetables, pot)

behavior boil_pot(pot: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065) and id[pot] == 2069

        bind vegetables: item where:
            is_food_vegetable(vegetables)

        put_vegetables_in_pot(vegetables, pot) # Place the vegetables into the pot
        boil_pot(pot) # Boil the vegetables by turning on the stove if not already on

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_pillow_406_around_couch_352(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(pillow,couch_instance)
        else:
            exp(pillow,couch_instance)
    eff:
        unknown[pillow]=False
        close[pillow,couch_instance]=True
        close[couch_instance,pillow]=True
    

#goal_representation
 
behavior put_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve_once inside(vegetables, pot)

behavior boil_pot(pot: item, stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065) and id[pot] == 2069

        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065

        put_vegetables_in_pot(vegetables, pot) # Place the vegetables into the pot
        boil_pot(pot, stove) # Boil the vegetables by turning on the stove if not already on

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior put_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve_once inside(vegetables, pot)

behavior boil_pot(pot: item, stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove) and id[pot] == 2069

        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065

        put_vegetables_in_pot(vegetables, pot) # Place the vegetables into the pot
        boil_pot(pot, stove) # Boil the vegetables by turning on the stove if not already on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Bind a variable to represent the vegetables
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot that is currently on the stove
        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        # Bind a variable to represent the stove
        boil_vegetables(vegetables, pot, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
c
behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot)
        # Place the vegetables inside the pot
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Bind a variable to represent the vegetables
        bind stove: item where:
            is_stove(stove)
        # Bind a variable to represent the stove
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot that is currently on the stove
        boil_vegetables(vegetables, pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'c') at line 5774, column 1.
Expected one of: 
	* FEATURE
	* TYPEDEF
	* _PRAGMA_KEYWORD
	* INIT
	* UNDIRECTED_GENERATOR
	* BEHAVIOR
	* $END
	* OBJECTS
	* CONTROLLER
	* _NEWLINE
	* GOAL
	* IMPORT
	* INCLUDE
	* DEF
	* DOMAIN
	* GENERATOR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#goal_representation
 
behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot) 
        # Place the vegetables inside the pot
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Bind a variable to represent the vegetables
        bind stove: item where:
            is_stove(stove)
        # Bind a variable to represent the stove
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot that is currently on the stove
        boil_vegetables(vegetables, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot) 
        # Place the vegetables inside the pot
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Bind a variable to represent the vegetables
        bind stove: item where:
            is_stove(stove)
        # Bind a variable to represent the stove
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot that is currently on the stove
        boil_vegetables(vegetables, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the stove_2065. Robot is close to the pot_2069. food_vegetable_2041 is inside pot_2069. food_vegetable_2041 is close pot_2069. pot_2069 is close food_vegetable_2041. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil vegetables with a pot on the stove.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(pot_2069)', 'putin_executor(food_vegetable_2041, pot_2069)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 262 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 53
goal generate times: 6
goal correct times: 3
action_num: 17

Task complete rate:
Keystate: k1 - Requires: 18 steps
Keystate: k2 - Requires: 7 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
