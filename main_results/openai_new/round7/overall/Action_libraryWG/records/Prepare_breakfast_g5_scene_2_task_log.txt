From agent.py
Reset goals: The sub-goals are: 
['1. Find milk and cereal.', '2. Pour the milk into a cup and heat it up.', '3. Add the cereal to the hot milk.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2048_around_kitchen_counter_129(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_grabbable(milk:item):
    # Function to check if the milk is grabbable
    symbol milk_grabbable=grabbable(milk)
    return milk_grabbable

def has_cereal_grabbable(cereal:item):
    # Function to check if the cereal is grabbable
    symbol cereal_grabbable=grabbable(cereal)
    return cereal_grabbable

behavior __goal__():
    body:
        if exists milk: item : (is_milk(milk) and has_milk_grabbable(milk)):
            # Check if there is grabbable milk in known locations
            bind milk: item where:
                is_milk(milk) and has_milk_grabbable(milk)
            # Select milk if its known to be grabbable
            achieve close_char(char, milk) 
            # Move character closer to the milk
        
        else:
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    # Check all unvisited milk containers
                    observe(milk, "Check if the milk is grabbable")
        
        if exists cereal: item : (is_food_cereal(cereal) and has_cereal_grabbable(cereal)):
            # Check if there is grabbable cereal in known locations
            bind cereal: item where:
                is_food_cereal(cereal) and has_cereal_grabbable(cereal)
            # Select cereal if its known to be grabbable
            achieve close_char(char, cereal)
            # Move character closer to the cereal
        
        else:
            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    # Check all unvisited cereal containers
                    observe(cereal, "Check if the cereal is grabbable")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2048_around_cupboard_131(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal(item: item):
    # Function to check if there is milk or cereal at a specified location
    symbol has_milk_or_cereal = exists o: item : ((is_milk(o) or is_food_cereal(o)) and close_char(char, o))
    return has_milk_or_cereal

behavior __goal__():
    body:
        if exists item: item : (has_milk_or_cereal(item)):
            # If milk or cereal is already found based on the available information, approach it
            bind item: item where:
                has_milk_or_cereal(item)
            achieve close_char(char, item)
        else:
            # Check all items in the scene that have not been visited to look for milk or cereal
            foreach item: item:
                if not visited(item):
                    # If item has not been visited, observe it for milk or cereal
                    observe(item, "Check for milk or cereal at item location")

#goal_representation_end

##############################
Error is:
Failed to rename the derived function application.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2048_around_kitchen_counter_129(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal(object:item):
    # Function to check if the object is milk or cereal
    symbol has_milk_cereal= exists o: item : (is_milk(o) or is_food_cereal(o))
    return has_milk_cereal

behavior __goal__():
    body:
        if exists object: item : (is_food(object) or is_drink(object)) and has_milk_or_cereal(object):
            # Check if milk or cereal is already known in the information
            bind object: item where:
                (is_food(object) or is_drink(object)) and has_milk_or_cereal(object)
            # Select an item that is either milk or cereal
            achieve close_char(char, object) 
            # Move the character closer to the object

        else: 
           # If no milk or cereal is found, initiate exploration to locate them
            foreach object: item:
                if (is_food(object) or is_drink(object)) and not visited(object):
                    # Check all unvisited objects that can potentially be milk or cereal
                    observe(object,"Check if this item is milk or cereal")
                    # Observe whether the object is classified as milk or cereal

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_drink not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2048_around_kitchen_counter_132(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

#goal_representation
 
def has_milk_or_cereal(object:item):
    # Function to check if the object is milk or cereal
    symbol has_milk_cereal= exists o: item : (is_milk(o) or is_food_cereal(o))
    return has_milk_cereal

behavior __goal__():
    body:
        if exists object: item : (is_food(object) or drinkable(object)) and has_milk_or_cereal(object):
            # Check if milk or cereal is already known in the information
            bind object: item where:
                (is_food(object) or drinkable(object)) and has_milk_or_cereal(object)
            # Select an item that is either milk or cereal
            achieve close_char(char, object) 
            # Move the character closer to the object

        else: 
            # If no milk or cereal is found, initiate exploration to locate them
            foreach object: item:
                if (is_food(object) or drinkable(object)) and not visited(object):
                    # Check all unvisited objects that can potentially be milk or cereal
                    observe(object,"Check if this item is milk or cereal")
                    # Observe whether the object is classified as milk or cereal

#goal_representation_end

##############################
Error is:
Failed to rename the derived function application.
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find milk and cereal." ?
Answer: You should first find a cup to put the milk in. Then find the milk and cereal.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup for the milk.', '2. Pour milk into the cup and add cereal.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_wallshelf_301(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cup,wallshelf_instance)
        else:
            exp(cup,wallshelf_instance)
    eff:
        unknown[cup]=False
        close[cup,wallshelf_instance]=True
        close[wallshelf_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2048_around_kitchen_counter_129(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def has_cup_in_scene():
    # Function to check if there is a cup instance in the available scene
    symbol has_cup= exists c: item : is_cup(c)
    return has_cup

behavior observe_unvisited_cups():
    body:
        foreach c: item:
            if is_cup(c) and not visited(c):
                observe(c, "Confirm the presence of a cup")

behavior __goal__():
    body:
        if has_cup_in_scene():
            # Check if there is a known cup in the scene, and bind to approach it
            bind cup: item where:
                is_cup(cup)
            achieve close_char(char, cup)
        else:
            # If no known cup is found, observe unvisited items to find one
            observe_unvisited_cups()

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_301)exp(cup_2087, wallshelf_301)walk_executor(cup_2087)
##############################
From agent.py
walk_executor(wallshelf_301)
Robot find: towel_rack_299, towel_rack_300, drawing_296, Robot is close to the wallshelf_301. 
##############################
From agent.py
exp(cup_2087, wallshelf_301)
Fail to find cup_2087 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_187)exp(cup_2087, wallshelf_187)walk_executor(cup_2087)
##############################
From agent.py
walk_executor(wallshelf_187)
Robot find: Robot is close to the wallshelf_187. 
##############################
From agent.py
exp(cup_2087, wallshelf_187)
Fail to find cup_2087 around wallshelf_187. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(cup_2087, kitchen_counter_132)walk_executor(cup_2087)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_132)
Fail to find cup_2087 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Go to dining_room_1. Locate table_123, and you will find cup_2087 placed on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1. Locate table_123, and you will find cup_2087 placed on it.

Human Guidance: You should first find a cup to put the milk in. Then find the milk and cereal.
The actions you have taken:
Action 1: Walk to wallshelf_301.
Action 2: look for cup_2087 around wallshelf_301.
Action 3: Walk to wallshelf_187.
Action 4: look for cup_2087 around wallshelf_187.
Action 5: Walk to cupboard_131.
Action 6: Open cupboard_131.
Action 7: look for cup_2087 around cupboard_131.
Action 8: Walk to kitchen_counter_132.
Action 9: look for cup_2087 around kitchen_counter_132.
Action 10: Walk to cupboard_130.
Action 11: look for cup_2087 around cupboard_130.
Action 12: Walk to kitchen_counter_128.

##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2048_around_kitchen_counter_129(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

behavior find_cup_2006_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_milk_cereal(milk: item, cereal: item, cup: item):
    body:
        achieve_once inside(milk, cup)
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup using the provided id
        
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        pour_milk_cereal(milk, cereal, cup)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_milk_cereal(milk: item, cereal: item, cup: item):
    body:
        achieve_once inside(milk, cup)
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup using the provided id
        
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        pour_milk_cereal(milk, cereal, cup)
 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(kitchen_counter_129)exp(food_cereal_2048, kitchen_counter_129)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
putin_executor(milk_2074, cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. milk_2074 is close cup_2087. milk_2074 is inside cup_2087. cup_2087 is close milk_2074. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the fridge_140. Grabbing food_cereal_2048 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
putin_executor(food_cereal_2048, cup_2087)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the table_123. Robot is close to the cup_2087. food_cereal_2048 is close cup_2087. cup_2087 is close food_cereal_2048. food_cereal_2048 is inside cup_2087. food_cereal_2048 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(wallshelf_301)', 'walk_executor(wallshelf_187)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(kitchen_counter_132)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_128)', 'walk_executor(table_123)', 'walk_executor(cup_2087)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(cup_2087)', 'putin_executor(milk_2074, cup_2087)', 'walk_executor(food_cereal_2048)', 'grab_executor(food_cereal_2048)', 'walk_executor(cup_2087)', 'putin_executor(food_cereal_2048, cup_2087)']
Time info:
Time consume: 199 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 124
goal generate times: 5
goal correct times: 1
action_num: 20

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
