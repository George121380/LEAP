From agent.py
Reset goals: The sub-goals are: 
['1. Brew a cup of coffee using the coffee maker.', '2. Add milk and sugar to the brewed coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_coffe_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior load_water(coffee_maker:item, water_source:item):
    body:
        if can_open(coffee_maker):
            achieve_once open(coffee_maker)
        achieve_once has_water(coffee_maker)
        achieve_once closed(coffee_maker)

behavior load_coffe_filter(coffee_maker:item, coffee_filter:item):
    body:
        if can_open(coffee_maker):
            achieve_once open(coffee_maker)
        achieve_once inside(coffee_filter, coffee_maker)
        achieve_once closed(coffee_maker)

behavior start_brew(coffee_maker:item):
    body:
        # Assuming the coffee maker needs to be on, filled with water, and have a filter for brewing
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind water_source: item where:
            is_faucet(water_source)
        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)

        if not is_on(coffee_maker):
            turn_on_coffe_maker(coffee_maker)

        load_water(coffee_maker, water_source)
        load_coffe_filter(coffee_maker, coffee_filter)
        start_brew(coffee_maker)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        achieve plugged(coffee_maker)
        # Ensure it is plugged in
        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        achieve plugged(coffee_maker)
        # Ensure it is plugged in
        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the coffee maker is plugged in and that the coffee is brewed before moving on to the next sub-task.
##############################
From agent.py
Human Instruction: You need to ensure the coffee maker is plugged in and that the coffee is brewed before moving on to the next sub-task.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_coffee_maker_plugged_in_and_on(coffe_maker: item):
    body:
        achieve plugged(coffe_maker)
        achieve is_on(coffe_maker)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        ensure_coffee_maker_plugged_in_and_on(coffe_maker)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffee_maker:item):
    body:
        achieve plugged(coffee_maker) 
        # Ensure the coffee maker is plugged in before starting
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on to brew coffee
        
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker item
        brew_coffee(coffee_maker)
        # Brew a cup of coffee using the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior check_plug_coffeemaker(coffee_maker:item, socket:item):
    body:
        if not plugged(coffee_maker):
            achieve_once plugged(socket) # Ensure coffeemaker is plugged in

behavior check_water_coffeemaker(coffee_maker:item):
    body:
        achieve has_water(coffee_maker) # Ensure the coffee maker has water

behavior brew_coffee(coffee_maker:item):
    body:
        achieve has_water(coffee_maker) # Ensure there is water in the coffee maker
        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker) # Ensure coffee maker is switched on

behavior __goal__():
    body:
        bind coffeemaker: item where:
            is_coffe_maker(coffeemaker)
        # Bind a coffeemaker item

        bind socket: item where:
            is_powersocket(socket) and close(coffeemaker, socket)
        # Bind a socket item close to the coffeemaker

        check_plug_coffeemaker(coffeemaker, socket)
        # Ensure coffeemaker is plugged in
        
        check_water_coffeemaker(coffeemaker)
        # Ensure water is in the coffeemaker

        brew_coffee(coffeemaker)
        # Ensure the coffee is brewed using the coffeemaker

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. brew a cup of coffee using the coffee maker." ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_receptacle_full_or_cup_available(coffee_maker: item):
    # Check if there is a suitable cup in the coffee maker receptacle or close to it
    symbol full_or_available = exists cup: item: (is_cup(cup) and close(cup, coffee_maker))
    return full_or_available

behavior start_coffee_brewing(coffee_maker: item, cup: item):
    body:
        achieve plugged(coffee_maker)
        # Ensure that the coffee maker is plugged in

        achieve has_water(coffee_maker)
        # Ensure that the coffee maker has water

        achieve is_on(coffee_maker)
        # Brew coffee using the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a random coffee maker instance

        if is_receptacle_full_or_cup_available(coffee_maker):
            bind cup: item where:
                is_cup(cup) and close(cup, coffee_maker)

            start_coffee_brewing(coffee_maker, cup)
            # Start brewing coffee using the coffee maker and a suitable cup
        else:
            # If no cup is available, iterate through items to find an unvisited coffee maker
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(coffee_maker, "Identify a cup for coffee brewing")
                    # Observe to figure out the presence of a suitable coffee cup


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_receptacle_full_or_cup_available(coffee_maker: item):
    # Check if there is a suitable cup in the coffee maker receptacle or close to it
    symbol full_or_available = exists cup: item: (is_cup(cup) and close(cup, coffee_maker))
    return full_or_available

behavior start_coffee_brewing(coffee_maker: item, cup: item):
    body:
        achieve plugged(coffee_maker)
        # Ensure that the coffee maker is plugged in

        achieve has_water(coffee_maker)
        # Ensure that the coffee maker has water

        achieve is_on(coffee_maker)
        # Brew coffee using the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a random coffee maker instance

        if is_receptacle_full_or_cup_available(coffee_maker):
            bind cup: item where:
                is_cup(cup) and close(cup, coffee_maker)

            start_coffee_brewing(coffee_maker, cup)
            # Start brewing coffee using the coffee maker and a suitable cup
        else:
            # If no cup is available, iterate through items to find an unvisited coffee maker
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(coffee_maker, "Identify a cup for coffee brewing")
                    # Observe to figure out the presence of a suitable coffee cup


##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Identify a cup for coffee brewing)obs(coffe_maker_290, Identify a cup for coffee brewing)
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is opened. 
##############################
From agent.py
obs(coffe_maker_290, Identify a cup for coffee brewing)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OFF. coffe_maker_290 is CLEAN. coffe_maker_290 is OPEN.
##############################
From agent.py
obs(coffe_maker_290, Identify a cup for coffee brewing)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OFF. coffe_maker_290 is CLEAN. coffe_maker_290 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put a suitably sized cup into the coffee maker, ensure the coffee maker has water, and then start the coffee brewing process. Currently, the actions taken do not confirm the presence of a cup in the coffee maker or that coffee brewing has started.
##############################
From agent.py
Human Instruction: You need to put a suitably sized cup into the coffee maker, ensure the coffee maker has water, and then start the coffee brewing process. Currently, the actions taken do not confirm the presence of a cup in the coffee maker or that coffee brewing has started.

Human Guidance: Put a suitably sized cup into the coffee machine and start it.
The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Switch on coffe_maker_290.
Action 3: Switch off coffe_maker_290.
Action 4: Open coffe_maker_290.
Action 5: Observe around coffe_maker_290 with the question of Identify a cup for coffee brewing.
Action 6: Observe around coffe_maker_290 with the question of Identify a cup for coffee brewing.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior brew_coffee(coffee_maker: item, cup: item):
    body:
        achieve_once inside(cup, coffee_maker)
        achieve has_water(coffee_maker)
        achieve_once closed(coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup) and not visited(cup)

        # Move coffee cup to coffee maker and brew
        brew_coffee(coffee_maker, cup)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior brew_coffee(coffee_maker: item, cup: item):
    body:
        achieve_once inside(cup, coffee_maker)
        achieve has_water(coffee_maker)
        achieve_once closed(coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup) and not visited(cup)

        # Move coffee cup to coffee maker and brew
        brew_coffee(coffee_maker, cup)
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2064)grab_executor(cup_2064)walk_executor(coffe_maker_290)putin_executor(cup_2064, coffe_maker_290)walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. 
##############################
From agent.py
grab_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Grabbing cup_2064 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. 
##############################
From agent.py
putin_executor(cup_2064, coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. coffe_maker_290 is close cup_2064. cup_2064 is inside coffe_maker_290. cup_2064 is close coffe_maker_290. cup_2064 released by right hand. 
##############################
From agent.py
walk_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffe_maker_290. 
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
bind coffe_maker: item where:
    is_coffe_maker(coffe_maker) and id[coffe_maker]==290

behavior add_ingredients(coffee:item, milk:item, sugar:item):
    body:
        achieve_once inside(milk, coffee)
        # Add milk to the coffee
        achieve_once inside(sugar, coffee)
        # Add sugar to the coffee

behavior __goal__():
    body:
        # First, identify the milk and sugar in the scene
        bind milk: item where:
            is_milk(milk)
        bind sugar: item where:
            is_food_sugar(sugar)
        
        bind coffee: item where:
            is_cup(coffee) and inside(coffee, coffe_maker)
            # Ensure that the coffee is in a cup placed within the coffee maker
        add_ingredients(coffee, milk, sugar)
        # Add milk and sugar to the brewed coffee

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BIND', 'bind') at line 5716, column 1.
Expected one of: 
	* FEATURE
	* TYPEDEF
	* _PRAGMA_KEYWORD
	* UNDIRECTED_GENERATOR
	* INIT
	* BEHAVIOR
	* $END
	* IMPORT
	* CONTROLLER
	* _NEWLINE
	* OBJECTS
	* GOAL
	* INCLUDE
	* DEF
	* DOMAIN
	* GENERATOR
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

#goal_representation
 
behavior add_ingredients(coffee:item, milk:item, sugar:item):
    body:
        achieve_once inside(milk, coffee)
        # Add milk to the coffee
        achieve_once inside(sugar, coffee)
        # Add sugar to the coffee

behavior __goal__():
    body:
        # First, identify the milk and sugar in the scene
        bind milk: item where:
            is_milk(milk)
        bind sugar: item where:
            is_food_sugar(sugar)
        
        bind coffee: item where:
            is_cup(coffee) and inside(coffee, coffe_maker_290)
            # Ensure that the coffee is in a cup placed within the coffee maker
        add_ingredients(coffee, milk, sugar)
        # Add milk and sugar to the brewed coffee

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffe_maker_290; available variables: [Variable<coffee: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

#goal_representation
 
behavior add_ingredients(coffee:item, milk:item, sugar:item):
    body:
        achieve_once inside(milk, coffee)
        # Add milk to the coffee
        achieve_once inside(sugar, coffee)
        # Add sugar to the coffee

behavior __goal__():
    body:
        # First, identify the milk and sugar in the scene
        bind milk: item where:
            is_milk(milk)
        bind sugar: item where:
            is_food_sugar(sugar)
        
        bind coffee: item where:
            is_cup(coffee) and inside(coffee, coffe_maker_290)
        # Ensure that the coffee is in a cup placed within the coffee maker

        bind coffe_maker_290: item where:
            is_coffe_maker(coffe_maker_290)
            
        add_ingredients(coffee, milk, sugar)
        # Add milk and sugar to the brewed coffee

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
behavior add_milk_sugar(coffee:item, milk:item, sugar:item):
    body:
        achieve_once inside(milk, coffee)
        # Pour milk into the brewed coffee
        achieve_once inside(sugar, coffee)
        # Add sugar to the brewed coffee

behavior __goal__():
    body:
        bind coffee: item where:
            is_cup(coffee) and on(coffee, coffe_maker_290)
        # Bind the brewed coffee cup placed on the coffee maker

        bind milk: item where:
            is_milk(milk)
        # Bind the milk to be added to the coffee

        bind sugar: item where:
            is_food_sugar(sugar)
        # Bind the sugar to be added to the coffee

        add_milk_sugar(coffee, milk, sugar)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffe_maker_290; available variables: [Variable<coffee: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

#goal_representation
 
behavior add_milk_sugar(coffee:item, milk:item, sugar:item):
    body:
        achieve_once inside(milk, coffee)
        # Pour milk into the brewed coffee
        achieve_once inside(sugar, coffee)
        # Add sugar to the brewed coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Declare and select a coffee maker
        
        bind coffee: item where:
            is_cup(coffee) and on(coffee, coffee_maker)
        # Bind the brewed coffee cup placed on the coffee maker

        bind milk: item where:
            is_milk(milk)
        # Bind the milk to be added to the coffee

        bind sugar: item where:
            is_food_sugar(sugar)
        # Bind the sugar to be added to the coffee

        add_milk_sugar(coffee, milk, sugar)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_milk_sugar_to_coffee(milk:item, sugar:item, cup:item):
    body:
        achieve inside(milk, cup) # Add milk to the cup of coffee
        achieve inside(sugar, cup) # Add sugar to the cup of coffee

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup for the coffee

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar
        
        add_milk_sugar_to_coffee(milk, sugar, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_milk_sugar_to_coffee(milk:item, sugar:item, cup:item):
    body:
        achieve inside(milk, cup) # Add milk to the cup of coffee
        achieve inside(sugar, cup) # Add sugar to the cup of coffee

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup for the coffee

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar
        
        add_milk_sugar_to_coffee(milk, sugar, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_sugar_2039, cupboard_229)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. 
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. Grabbing food_sugar_2039 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_sugar_2039, cup_2063)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. cup_2063 is close food_sugar_2039. food_sugar_2039 is close cup_2063. food_sugar_2039 is inside cup_2063. food_sugar_2039 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'walk_executor(cup_2064)', 'grab_executor(cup_2064)', 'walk_executor(coffe_maker_290)', 'putin_executor(cup_2064, coffe_maker_290)', 'walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(food_sugar_2039)', 'grab_executor(food_sugar_2039)', 'walk_executor(cup_2063)', 'putin_executor(food_sugar_2039, cup_2063)']
Time info:
Time consume: 248 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 34
goal generate times: 10
goal correct times: 0
action_num: 24

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
